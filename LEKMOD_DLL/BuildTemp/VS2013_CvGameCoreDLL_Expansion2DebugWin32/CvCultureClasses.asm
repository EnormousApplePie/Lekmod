; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvCultureClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??0CvGreatWork@@QAE@XZ				; CvGreatWork::CvGreatWork
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
;	COMDAT ??0CvGreatWork@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvGreatWork@@QAE@XZ PROC				; CvGreatWork::CvGreatWork, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], -1

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvGreatWork@@QAE@XZ ENDP				; CvGreatWork::CvGreatWork
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z ; CvGreatWork::CvGreatWork
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z$1
__ehfuncinfo$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T232132 = -20						; size = 4
__$EHRec$ = -12						; size = 12
_szGreatPersonName$ = 8					; size = 28
_eType$ = 36						; size = 4
_eClassType$ = 40					; size = 4
_iTurn$ = 44						; size = 4
_eEra$ = 48						; size = 4
_ePlayer$ = 52						; size = 4
??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z PROC ; CvGreatWork::CvGreatWork, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR _szGreatPersonName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eType$[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eClassType$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iTurn$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eEra$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 43   : 	m_iTurnFounded = GC.getGame().getGameTurn();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232132[ebp], edx
	mov	ecx, DWORD PTR $T232132[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 44   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szGreatPersonName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _szGreatPersonName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvGreatWork@@QAE@VCvString@@W4GreatWorkType@@W4GreatWorkClass@@HW4EraTypes@@W4PlayerTypes@@@Z ENDP ; CvGreatWork::CvGreatWork
PUBLIC	?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkClass
PUBLIC	__$ArrayPad$
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z	; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4EraTypes@@@Z:PROC ; operator>>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
xdata$x	SEGMENT
__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z$0
__ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z
_TEXT	SEGMENT
_oldGreatWorkName$222525 = -52				; size = 28
__$ArrayPad$ = -24					; size = 4
_uiVersion$ = -20					; size = 4
_iTemp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z PROC	; operator>>, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 49   : 	int iTemp;
; 50   : 
; 51   : 	uint uiVersion;
; 52   : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 53   : 
; 54   : 	if(uiVersion == 1)

	cmp	DWORD PTR _uiVersion$[ebp], 1
	jne	SHORT $LN3@operator

; 55   : 	{
; 56   : 		CvString oldGreatWorkName;

	lea	ecx, DWORD PTR _oldGreatWorkName$222525[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 57   : 		loadFrom >> oldGreatWorkName;

	lea	ecx, DWORD PTR _oldGreatWorkName$222525[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 58   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _oldGreatWorkName$222525[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@operator:

; 59   : 
; 60   : 	loadFrom >> writeTo.m_szGreatPersonName;

	mov	edx, DWORD PTR _writeTo$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 61   : 
; 62   : 	loadFrom >> iTemp;

	lea	eax, DWORD PTR _iTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 63   : 	writeTo.m_eType = (GreatWorkType)iTemp;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 64   : 
; 65   : 	if (uiVersion >= 3)

	cmp	DWORD PTR _uiVersion$[ebp], 3
	jb	SHORT $LN2@operator

; 66   : 	{
; 67   : 		loadFrom >> iTemp;

	lea	eax, DWORD PTR _iTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 68   : 		writeTo.m_eClassType = (GreatWorkClass)iTemp;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 69   : 	}
; 70   : 	else

	jmp	SHORT $LN1@operator
$LN2@operator:

; 71   : 	{
; 72   : 		writeTo.m_eClassType = CultureHelpers::GetGreatWorkClass(writeTo.m_eType);

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkClass
	add	esp, 4
	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [edx+32], eax
$LN1@operator:

; 73   : 	}
; 74   : 
; 75   : 	loadFrom >> writeTo.m_iTurnFounded;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 76   : 	loadFrom >> writeTo.m_eEra;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4EraTypes@@@Z ; operator>>
	add	esp, 8

; 77   : 	loadFrom >> writeTo.m_ePlayer;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 78   : 
; 79   : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 80   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z$0:
	lea	ecx, DWORD PTR _oldGreatWorkName$222525[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z ENDP	; operator>>
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvGreatWork@@@Z	; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4EraTypes@@@Z:PROC ; operator<<
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvGreatWork@@@Z
_TEXT	SEGMENT
$T232201 = -12						; size = 4
$T232196 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvGreatWork@@@Z PROC	; operator<<, COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 85   : 	uint uiVersion = 3;

	mov	DWORD PTR _uiVersion$[ebp], 3

; 86   : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 87   : 
; 88   : 	saveTo << readFrom.m_szGreatPersonName;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 89   : 
; 90   : 	saveTo << readFrom.m_eType;

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR $T232196[ebp], eax
	lea	ecx, DWORD PTR $T232196[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 91   : 	saveTo << readFrom.m_eClassType;

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T232201[ebp], eax
	lea	ecx, DWORD PTR $T232201[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 92   : 	
; 93   : 	saveTo << readFrom.m_iTurnFounded;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 94   : 	saveTo << readFrom.m_eEra;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4EraTypes@@@Z ; operator<<
	add	esp, 8

; 95   : 	saveTo << readFrom.m_ePlayer;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 96   : 
; 97   : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 98   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvGreatWork@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvGreatWork,22,0,297,0>::~FStaticVector<CvGreatWork,22,0,297,0>
PUBLIC	?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ	; BaseVector<CvGreatWork,0>::clear
PUBLIC	??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvGreatWork,22,0,297,0>::FStaticVector<CvGreatWork,22,0,297,0>
PUBLIC	??0CvGameCulture@@QAE@XZ			; CvGameCulture::CvGameCulture
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??0CvGameCulture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGameCulture@@QAE@XZ$0
__ehfuncinfo$??0CvGameCulture@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvGameCulture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvGameCulture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
__$EHRec$ = -12						; size = 12
??0CvGameCulture@@QAE@XZ PROC				; CvGameCulture::CvGameCulture, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvGameCulture@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvGreatWork,22,0,297,0>::FStaticVector<CvGreatWork,22,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 106  : 	m_CurrentGreatWorks.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ ; BaseVector<CvGreatWork,0>::clear

; 107  : 
; 108  : 	m_bReportedSomeoneInfluential = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1072], 0

; 109  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvGameCulture@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvGreatWork,22,0,297,0>::~FStaticVector<CvGreatWork,22,0,297,0>
__ehhandler$??0CvGameCulture@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvGameCulture@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvGameCulture@@QAE@XZ ENDP				; CvGameCulture::CvGameCulture
PUBLIC	??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ	; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>
PUBLIC	?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z ; FStaticVector<CvGreatWork,22,0,297,0>::Free
PUBLIC	??1CvGameCulture@@QAE@XZ			; CvGameCulture::~CvGameCulture
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvGameCulture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvGameCulture@@QAE@XZ$1
__ehfuncinfo$??1CvGameCulture@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvGameCulture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvGameCulture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
__$EHRec$ = -12						; size = 12
??1CvGameCulture@@QAE@XZ PROC				; CvGameCulture::~CvGameCulture, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvGameCulture@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 114  : }

	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z ; FStaticVector<CvGreatWork,22,0,297,0>::Free
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvGameCulture@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ ; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>
__ehhandler$??1CvGameCulture@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvGameCulture@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvGameCulture@@QAE@XZ ENDP				; CvGameCulture::~CvGameCulture
PUBLIC	?DoTurn@CvPlayerCulture@@QAEXXZ			; CvPlayerCulture::DoTurn
PUBLIC	?DoTurn@CvGameCulture@@QAEXXZ			; CvGameCulture::DoTurn
EXTRN	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ:PROC ; CvPlayer::GetCulture
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Odtp
;	COMDAT ?DoTurn@CvGameCulture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T232329 = -13						; size = 1
_ePlayer$222577 = -12					; size = 4
_kPlayer$222579 = -8					; size = 4
_uiPlayer$222573 = -4					; size = 4
?DoTurn@CvGameCulture@@QAEXXZ PROC			; CvGameCulture::DoTurn, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 	for (uint uiPlayer = 0; uiPlayer < MAX_MAJOR_CIVS; uiPlayer++)

	mov	DWORD PTR _uiPlayer$222573[ebp], 0
	jmp	SHORT $LN4@DoTurn
$LN3@DoTurn:
	mov	eax, DWORD PTR _uiPlayer$222573[ebp]
	add	eax, 1
	mov	DWORD PTR _uiPlayer$222573[ebp], eax
$LN4@DoTurn:
	cmp	DWORD PTR _uiPlayer$222573[ebp], 22	; 00000016H
	jae	SHORT $LN5@DoTurn

; 120  : 	{
; 121  : 		PlayerTypes ePlayer = (PlayerTypes)uiPlayer;

	mov	ecx, DWORD PTR _uiPlayer$222573[ebp]
	mov	DWORD PTR _ePlayer$222577[ebp], ecx

; 122  : 		CvPlayer &kPlayer = GET_PLAYER(ePlayer);

	mov	edx, DWORD PTR _ePlayer$222577[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$222579[ebp], edx

; 123  : 		if (kPlayer.isAlive())

	mov	eax, DWORD PTR _kPlayer$222579[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T232329[ebp], cl
	movzx	edx, BYTE PTR $T232329[ebp]
	test	edx, edx
	je	SHORT $LN1@DoTurn

; 124  : 		{
; 125  : 			kPlayer.GetCulture()->DoTurn();

	mov	ecx, DWORD PTR _kPlayer$222579[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?DoTurn@CvPlayerCulture@@QAEXXZ		; CvPlayerCulture::DoTurn
$LN1@DoTurn:

; 126  : 		}

	jmp	SHORT $LN3@DoTurn
$LN5@DoTurn:

; 127  : 	}
; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoTurn@CvGameCulture@@QAEXXZ ENDP			; CvGameCulture::DoTurn
_TEXT	ENDS
PUBLIC	??1CvGreatWork@@QAE@XZ				; CvGreatWork::~CvGreatWork
PUBLIC	?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z ; FStaticVector<CvGreatWork,22,0,297,0>::push_back
PUBLIC	__$ArrayPad$
PUBLIC	?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z ; CvGameCulture::CreateGreatWork
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z$1
__ehfuncinfo$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z
_TEXT	SEGMENT
_this$ = -92						; size = 4
$T232346 = -80						; size = 4
$T232339 = -76						; size = 4
$T232333 = -72						; size = 4
_newGreatWork$ = -68					; size = 48
_iNumGreatWorks$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
_eClass$ = 12						; size = 4
_ePlayer$ = 16						; size = 4
_eEra$ = 20						; size = 4
_szCreator$ = 24					; size = 28
?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z PROC ; CvGameCulture::CreateGreatWork, COMDAT
; _this$ = ecx

; 132  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 133  : 	CvGreatWork newGreatWork;

	lea	ecx, DWORD PTR _newGreatWork$[ebp]
	call	??0CvGreatWork@@QAE@XZ			; CvGreatWork::CvGreatWork
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 134  : 	newGreatWork.m_eType = eType;

	mov	eax, DWORD PTR _eType$[ebp]
	mov	DWORD PTR _newGreatWork$[ebp+28], eax

; 135  : 	newGreatWork.m_eClassType = eClass;

	mov	ecx, DWORD PTR _eClass$[ebp]
	mov	DWORD PTR _newGreatWork$[ebp+32], ecx

; 136  : 	newGreatWork.m_eEra = eEra;

	mov	edx, DWORD PTR _eEra$[ebp]
	mov	DWORD PTR _newGreatWork$[ebp+40], edx

; 137  : 	newGreatWork.m_ePlayer = ePlayer;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR _newGreatWork$[ebp+44], eax

; 138  : 	newGreatWork.m_iTurnFounded = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232339[ebp], ecx
	mov	ecx, DWORD PTR $T232339[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	DWORD PTR _newGreatWork$[ebp+36], eax

; 139  : 	newGreatWork.m_szGreatPersonName = szCreator;

	lea	edx, DWORD PTR _szCreator$[ebp]
	push	edx
	lea	ecx, DWORD PTR _newGreatWork$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 140  : 
; 141  : 	int iNumGreatWorks = m_CurrentGreatWorks.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T232346[ebp], ecx
	mov	edx, DWORD PTR $T232346[ebp]
	mov	DWORD PTR _iNumGreatWorks$[ebp], edx

; 142  : 
; 143  : 	m_CurrentGreatWorks.push_back(newGreatWork);

	lea	eax, DWORD PTR _newGreatWork$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z ; FStaticVector<CvGreatWork,22,0,297,0>::push_back

; 144  : 
; 145  : 	return iNumGreatWorks;

	mov	ecx, DWORD PTR _iNumGreatWorks$[ebp]
	mov	DWORD PTR $T232333[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _newGreatWork$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szCreator$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T232333[ebp]

; 146  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z$0:
	lea	ecx, DWORD PTR _szCreator$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z$1:
	lea	ecx, DWORD PTR _newGreatWork$[ebp]
	jmp	??1CvGreatWork@@QAE@XZ
__ehhandler$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z ENDP ; CvGameCulture::CreateGreatWork
; Function compile flags: /Odtp
;	COMDAT ??1CvGreatWork@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvGreatWork@@QAE@XZ PROC				; CvGreatWork::~CvGreatWork, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvGreatWork@@QAE@XZ ENDP				; CvGreatWork::~CvGreatWork
_TEXT	ENDS
PUBLIC	?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z ; CvGameCulture::GetGreatWorkType
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pWork$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z PROC ; CvGameCulture::GetGreatWorkType, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 151  : 	const CvGreatWork* pWork = &m_CurrentGreatWorks[iIndex];

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pWork$[ebp], eax

; 152  : 	return pWork->m_eType;

	mov	edx, DWORD PTR _pWork$[ebp]
	mov	eax, DWORD PTR [edx+28]

; 153  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z ENDP ; CvGameCulture::GetGreatWorkType
_TEXT	ENDS
PUBLIC	?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z ; CvGameCulture::GetGreatWorkClass
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pWork$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z PROC ; CvGameCulture::GetGreatWorkClass, COMDAT
; _this$ = ecx

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 158  : 	const CvGreatWork* pWork = &m_CurrentGreatWorks[iIndex];

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pWork$[ebp], eax

; 159  : 	return pWork->m_eClassType;

	mov	edx, DWORD PTR _pWork$[ebp]
	mov	eax, DWORD PTR [edx+32]

; 160  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z ENDP ; CvGameCulture::GetGreatWorkClass
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0CH@IEKOAALF@?$CL?$CFd?5?$FLICON_CULTURE?$FN?0?5?$CL?$CFd?5?$FLICON_TO@ ; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_02GFKOMOKH@?5?$CI?$AA@			; `string'
PUBLIC	??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@		; `string'
PUBLIC	?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkName
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z ; CvGameCulture::GetGreatWorkTooltip
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z:PROC ; CvPlayerPolicies::GetNumericModifier
EXTRN	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ:PROC ; CvPlayer::GetPlayerPolicies
EXTRN	?GetGreatWorkYieldChange@CvPlayer@@QBEHW4YieldTypes@@@Z:PROC ; CvPlayer::GetGreatWorkYieldChange
EXTRN	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z:PROC ; CvGlobals::getEraInfo
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:PROC ; CvGameTextMgr::setDateStr
EXTRN	?getCalendar@CvGame@@QBE?AW4CalendarTypes@@XZ:PROC ; CvGame::getCalendar
EXTRN	?getStartYear@CvGame@@QBEHXZ:PROC		; CvGame::getStartYear
EXTRN	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ:PROC ; CvGame::getGameSpeedType
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0CH@IEKOAALF@?$CL?$CFd?5?$FLICON_CULTURE?$FN?0?5?$CL?$CFd?5?$FLICON_TO@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CH@IEKOAALF@?$CL?$CFd?5?$FLICON_CULTURE?$FN?0?5?$CL?$CFd?5?$FLICON_TO@ DB '+'
	DB	'%d [ICON_CULTURE], +%d [ICON_TOURISM]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GFKOMOKH@?5?$CI?$AA@
CONST	SEGMENT
??_C@_02GFKOMOKH@?5?$CI?$AA@ DB ' (', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@
CONST	SEGMENT
??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@ DB '[NEWLINE]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv155 = -296						; size = 4
tv426 = -289						; size = 1
tv423 = -288						; size = 4
tv420 = -284						; size = 4
tv371 = -280						; size = 4
tv306 = -276						; size = 4
_this$ = -272						; size = 4
$T232481 = -268						; size = 4
$T232474 = -264						; size = 4
$T232463 = -260						; size = 4
$T232459 = -256						; size = 4
$T232452 = -252						; size = 4
$T232442 = -248						; size = 4
$T232441 = -244						; size = 4
$T232437 = -240						; size = 4
$T232433 = -236						; size = 4
$T232429 = -232						; size = 4
$T232409 = -228						; size = 4
$T232402 = -224						; size = 28
_strGreatWorkName$ = -196				; size = 80
_strYearString$ = -112					; size = 28
_cultureString$ = -84					; size = 28
_iCulturePerWork$ = -56					; size = 4
_iTourismPerWork$ = -52					; size = 4
_szTooltip$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_pWork$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
_eOwner$ = 16						; size = 4
?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z PROC ; CvGameCulture::GetGreatWorkTooltip, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232409[ebp], 0

; 165  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 166  : 	CvString szTooltip = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN13@GetGreatWo
	mov	DWORD PTR tv306[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN14@GetGreatWo
$LN13@GetGreatWo:
	mov	DWORD PTR tv306[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN14@GetGreatWo:
	mov	ecx, DWORD PTR tv306[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 167  : 
; 168  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _pWork$[ebp], edx

; 169  : 
; 170  : 	CvString strYearString;

	lea	ecx, DWORD PTR _strYearString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 171  : 	CvGameTextMgr::setDateStr(strYearString,
; 172  : 		pWork->m_iTurnFounded,
; 173  : 		false /*bSave*/,
; 174  : 		GC.getGame().getCalendar(),
; 175  : 		GC.getGame().getStartYear(),
; 176  : 		GC.getGame().getGameSpeedType());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232429[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232433[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232437[ebp], eax
	mov	ecx, DWORD PTR $T232429[ebp]
	call	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ ; CvGame::getGameSpeedType
	push	eax
	mov	ecx, DWORD PTR $T232433[ebp]
	call	?getStartYear@CvGame@@QBEHXZ		; CvGame::getStartYear
	push	eax
	mov	ecx, DWORD PTR $T232437[ebp]
	call	?getCalendar@CvGame@@QBE?AW4CalendarTypes@@XZ ; CvGame::getCalendar
	push	eax
	push	0
	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	eax, DWORD PTR _strYearString$[ebp]
	push	eax
	call	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setDateStr
	add	esp, 24					; 00000018H

; 177  : 
; 178  : 	Localization::String strGreatWorkName = Localization::Lookup(CultureHelpers::GetGreatWorkName(pWork->m_eType));

	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	lea	eax, DWORD PTR $T232402[ebp]
	push	eax
	call	?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkName
	add	esp, 8
	mov	DWORD PTR tv371[ebp], eax
	mov	ecx, DWORD PTR tv371[ebp]
	mov	DWORD PTR $T232441[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T232441[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T232442[ebp], eax
	mov	edx, DWORD PTR $T232442[ebp]
	push	edx
	lea	eax, DWORD PTR _strGreatWorkName$[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T232402[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 179  : 
; 180  : 	szTooltip = strGreatWorkName.toUTF8();

	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T232452[ebp], eax
	cmp	DWORD PTR $T232452[ebp], 0
	je	SHORT $LN33@GetGreatWo
	mov	ecx, DWORD PTR $T232452[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN34@GetGreatWo
$LN33@GetGreatWo:
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN34@GetGreatWo:

; 181  : 	szTooltip += "[NEWLINE]";

	push	OFFSET ??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 182  : 
; 183  : #ifdef AUI_WARNING_FIXES
; 184  : 	if (pWork->m_szGreatPersonName[0] != '\0')
; 185  : #else
; 186  : 	if (strlen(pWork->m_szGreatPersonName) > 0)

	mov	ecx, DWORD PTR _pWork$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv420[ebp], eax
	mov	edx, DWORD PTR tv420[ebp]
	add	edx, 1
	mov	DWORD PTR tv423[ebp], edx
$LL65@GetGreatWo:
	mov	eax, DWORD PTR tv420[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv426[ebp], cl
	add	DWORD PTR tv420[ebp], 1
	cmp	BYTE PTR tv426[ebp], 0
	jne	SHORT $LL65@GetGreatWo
	mov	edx, DWORD PTR tv420[ebp]
	sub	edx, DWORD PTR tv423[ebp]
	mov	DWORD PTR tv155[ebp], edx
	je	SHORT $LN1@GetGreatWo

; 187  : #endif
; 188  : 	{
; 189  : 		szTooltip += pWork->m_szGreatPersonName;

	mov	eax, DWORD PTR _pWork$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 190  : 		szTooltip += "[NEWLINE]";

	push	OFFSET ??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@GetGreatWo:

; 191  : 	}
; 192  : 	szTooltip += GET_PLAYER(pWork->m_ePlayer).getCivilizationShortDescription();

	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232459[ebp], edx
	mov	ecx, DWORD PTR $T232459[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 193  : 	szTooltip += "[NEWLINE]";

	push	OFFSET ??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 194  : 	szTooltip += GC.getEraInfo(pWork->m_eEra)->GetDescription();

	mov	eax, DWORD PTR _pWork$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	DWORD PTR $T232463[ebp], eax
	mov	ecx, DWORD PTR $T232463[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 195  : 	szTooltip += " (";

	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 196  : 	szTooltip += strYearString;

	lea	edx, DWORD PTR _strYearString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 197  : 	szTooltip += ")";

	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 198  : 	szTooltip += "[NEWLINE]";

	push	OFFSET ??_C@_09ODCIJKAA@?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 199  : 	CvString cultureString;

	lea	ecx, DWORD PTR _cultureString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 200  : 	int iCulturePerWork = GC.getBASE_CULTURE_PER_GREAT_WORK();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8208
	mov	DWORD PTR _iCulturePerWork$[ebp], eax

; 201  : 	iCulturePerWork += GET_PLAYER(eOwner).GetGreatWorkYieldChange(YIELD_CULTURE);

	mov	ecx, DWORD PTR _eOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232474[ebp], ecx
	push	4
	mov	ecx, DWORD PTR $T232474[ebp]
	call	?GetGreatWorkYieldChange@CvPlayer@@QBEHW4YieldTypes@@@Z ; CvPlayer::GetGreatWorkYieldChange
	add	eax, DWORD PTR _iCulturePerWork$[ebp]
	mov	DWORD PTR _iCulturePerWork$[ebp], eax

; 202  : 	int iTourismPerWork = GC.getBASE_TOURISM_PER_GREAT_WORK();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8212
	mov	DWORD PTR _iTourismPerWork$[ebp], edx

; 203  : 	iTourismPerWork += GET_PLAYER(eOwner).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_EXTRA_TOURISM_PER_GREAT_WORK); // NQMP GJS - Cultural Exchange

	mov	eax, DWORD PTR _eOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232481[ebp], eax
	push	63					; 0000003fH
	mov	ecx, DWORD PTR $T232481[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR _iTourismPerWork$[ebp]
	mov	DWORD PTR _iTourismPerWork$[ebp], eax

; 204  : 
; 205  : 
; 206  : 	cultureString.Format ("+%d [ICON_CULTURE], +%d [ICON_TOURISM]", iCulturePerWork, iTourismPerWork);

	mov	ecx, DWORD PTR _iTourismPerWork$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iCulturePerWork$[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@IEKOAALF@?$CL?$CFd?5?$FLICON_CULTURE?$FN?0?5?$CL?$CFd?5?$FLICON_TO@
	lea	eax, DWORD PTR _cultureString$[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 207  : 	szTooltip += cultureString;

	lea	ecx, DWORD PTR _cultureString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 208  : 
; 209  : 	return szTooltip;

	lea	edx, DWORD PTR _szTooltip$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T232409[ebp]
	or	eax, 1
	mov	DWORD PTR $T232409[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _cultureString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strYearString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 210  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _szTooltip$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR _strYearString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$2:
	lea	ecx, DWORD PTR $T232402[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$3:
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$4:
	lea	ecx, DWORD PTR _cultureString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z$5:
	mov	eax, DWORD PTR $T232409[ebp]
	and	eax, 1
	je	$LN10@GetGreatWo
	and	DWORD PTR $T232409[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN10@GetGreatWo:
	ret	0
__ehhandler$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkTooltip@CvGameCulture@@QBE?AVCvString@@HW4PlayerTypes@@@Z ENDP ; CvGameCulture::GetGreatWorkTooltip
PUBLIC	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T232508 = -8						; size = 4
_pWork$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z PROC ; CvGameCulture::GetGreatWorkName, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232508[ebp], 0

; 215  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 216  : 	const CvGreatWork* pWork = &m_CurrentGreatWorks[iIndex];

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pWork$[ebp], eax

; 217  : 
; 218  : 	return CultureHelpers::GetGreatWorkName(pWork->m_eType);

	mov	edx, DWORD PTR _pWork$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkName
	add	esp, 8
	mov	edx, DWORD PTR $T232508[ebp]
	or	edx, 1
	mov	DWORD PTR $T232508[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 219  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ENDP ; CvGameCulture::GetGreatWorkName
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkArtist
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z$0
__ehfuncinfo$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z
_TEXT	SEGMENT
tv94 = -60						; size = 4
_this$ = -56						; size = 4
$T232518 = -52						; size = 4
_szArtist$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_pWork$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z PROC ; CvGameCulture::GetGreatWorkArtist, COMDAT
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232518[ebp], 0

; 224  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 225  : 	CvString szArtist = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN8@GetGreatWo@2
	mov	DWORD PTR tv94[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN9@GetGreatWo@2
$LN8@GetGreatWo@2:
	mov	DWORD PTR tv94[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@GetGreatWo@2:
	mov	ecx, DWORD PTR tv94[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szArtist$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 226  : 
; 227  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _pWork$[ebp], edx

; 228  : 	szArtist = pWork->m_szGreatPersonName;

	mov	ecx, DWORD PTR _pWork$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szArtist$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 229  : 
; 230  : 	return szArtist;

	lea	edx, DWORD PTR _szArtist$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T232518[ebp]
	or	eax, 1
	mov	DWORD PTR $T232518[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szArtist$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 231  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z$0:
	lea	ecx, DWORD PTR _szArtist$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z$1:
	mov	eax, DWORD PTR $T232518[ebp]
	and	eax, 1
	je	$LN5@GetGreatWo@2
	and	DWORD PTR $T232518[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetGreatWo@2:
	ret	0
__ehhandler$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkArtist@CvGameCulture@@QBE?AVCvString@@H@Z ENDP ; CvGameCulture::GetGreatWorkArtist
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkEra
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$1
__ehfuncinfo$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z
_TEXT	SEGMENT
tv186 = -104						; size = 4
_this$ = -100						; size = 4
$T232586 = -96						; size = 4
$T232582 = -92						; size = 4
$T232578 = -88						; size = 4
$T232574 = -84						; size = 4
$T232554 = -80						; size = 4
_strYearString$ = -76					; size = 28
_szEra$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_pWork$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z PROC ; CvGameCulture::GetGreatWorkEra, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232554[ebp], 0

; 236  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 237  : 	CvString szEra = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN9@GetGreatWo@3
	mov	DWORD PTR tv186[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN10@GetGreatWo@3
$LN9@GetGreatWo@3:
	mov	DWORD PTR tv186[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN10@GetGreatWo@3:
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 238  : 
; 239  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _pWork$[ebp], edx

; 240  : 
; 241  : 	CvString strYearString;

	lea	ecx, DWORD PTR _strYearString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 242  : 	CvGameTextMgr::setDateStr(strYearString,
; 243  : 		pWork->m_iTurnFounded,
; 244  : 		false /*bSave*/,
; 245  : 		GC.getGame().getCalendar(),
; 246  : 		GC.getGame().getStartYear(),
; 247  : 		GC.getGame().getGameSpeedType());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232574[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232578[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232582[ebp], eax
	mov	ecx, DWORD PTR $T232574[ebp]
	call	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ ; CvGame::getGameSpeedType
	push	eax
	mov	ecx, DWORD PTR $T232578[ebp]
	call	?getStartYear@CvGame@@QBEHXZ		; CvGame::getStartYear
	push	eax
	mov	ecx, DWORD PTR $T232582[ebp]
	call	?getCalendar@CvGame@@QBE?AW4CalendarTypes@@XZ ; CvGame::getCalendar
	push	eax
	push	0
	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	eax, DWORD PTR _strYearString$[ebp]
	push	eax
	call	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setDateStr
	add	esp, 24					; 00000018H

; 248  : 
; 249  : 	szEra += GC.getEraInfo(pWork->m_eEra)->GetDescription();

	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	DWORD PTR $T232586[ebp], eax
	mov	ecx, DWORD PTR $T232586[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 250  : 	szEra += " (";

	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI?$AA@
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 251  : 	szEra += strYearString;

	lea	eax, DWORD PTR _strYearString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 252  : 	szEra += ")";

	push	OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 253  : 
; 254  : 	return szEra;

	lea	ecx, DWORD PTR _szEra$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T232554[ebp]
	or	edx, 1
	mov	DWORD PTR $T232554[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strYearString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 255  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$0:
	lea	ecx, DWORD PTR _szEra$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$1:
	lea	ecx, DWORD PTR _strYearString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z$2:
	mov	eax, DWORD PTR $T232554[ebp]
	and	eax, 1
	je	$LN6@GetGreatWo@3
	and	DWORD PTR $T232554[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetGreatWo@3:
	ret	0
__ehhandler$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkEra@CvGameCulture@@QBE?AVCvString@@H@Z ENDP ; CvGameCulture::GetGreatWorkEra
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkEraAbbreviation
EXTRN	?getAbbreviation@CvEraInfo@@QBEPBDXZ:PROC	; CvEraInfo::getAbbreviation
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z$0
__ehfuncinfo$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z
_TEXT	SEGMENT
tv132 = -64						; size = 4
_this$ = -60						; size = 4
$T232628 = -56						; size = 4
$T232610 = -52						; size = 4
_szEra$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_pWork$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z PROC ; CvGameCulture::GetGreatWorkEraAbbreviation, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232610[ebp], 0

; 259  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 260  : 	CvString szEra = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN8@GetGreatWo@4
	mov	DWORD PTR tv132[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN9@GetGreatWo@4
$LN8@GetGreatWo@4:
	mov	DWORD PTR tv132[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@GetGreatWo@4:
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 261  : 
; 262  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _pWork$[ebp], edx

; 263  : 	szEra = GC.getEraInfo(pWork->m_eEra)->getAbbreviation();

	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	ecx, eax
	call	?getAbbreviation@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getAbbreviation
	mov	DWORD PTR $T232628[ebp], eax
	cmp	DWORD PTR $T232628[ebp], 0
	je	SHORT $LN14@GetGreatWo@4
	mov	eax, DWORD PTR $T232628[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN15@GetGreatWo@4
$LN14@GetGreatWo@4:
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN15@GetGreatWo@4:

; 264  : 
; 265  : 	return szEra;	

	lea	ecx, DWORD PTR _szEra$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T232610[ebp]
	or	edx, 1
	mov	DWORD PTR $T232610[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 266  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z$0:
	lea	ecx, DWORD PTR _szEra$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z$1:
	mov	eax, DWORD PTR $T232610[ebp]
	and	eax, 1
	je	$LN5@GetGreatWo@4
	and	DWORD PTR $T232610[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetGreatWo@4:
	ret	0
__ehhandler$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkEraAbbreviation@CvGameCulture@@QBE?AVCvString@@H@Z ENDP ; CvGameCulture::GetGreatWorkEraAbbreviation
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkEraShort
EXTRN	?getShortDesc@CvEraInfo@@QBEPBDXZ:PROC		; CvEraInfo::getShortDesc
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z$0
__ehfuncinfo$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z
_TEXT	SEGMENT
tv132 = -64						; size = 4
_this$ = -60						; size = 4
$T232666 = -56						; size = 4
$T232648 = -52						; size = 4
_szEra$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_pWork$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_iIndex$ = 12						; size = 4
?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z PROC ; CvGameCulture::GetGreatWorkEraShort, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T232648[ebp], 0

; 270  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 271  : 	CvString szEra = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN8@GetGreatWo@5
	mov	DWORD PTR tv132[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN9@GetGreatWo@5
$LN8@GetGreatWo@5:
	mov	DWORD PTR tv132[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@GetGreatWo@5:
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 272  : 
; 273  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR _pWork$[ebp], edx

; 274  : 	szEra = GC.getEraInfo(pWork->m_eEra)->getShortDesc();

	mov	ecx, DWORD PTR _pWork$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	ecx, eax
	call	?getShortDesc@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getShortDesc
	mov	DWORD PTR $T232666[ebp], eax
	cmp	DWORD PTR $T232666[ebp], 0
	je	SHORT $LN14@GetGreatWo@5
	mov	eax, DWORD PTR $T232666[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN15@GetGreatWo@5
$LN14@GetGreatWo@5:
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN15@GetGreatWo@5:

; 275  : 
; 276  : 	return szEra;	

	lea	ecx, DWORD PTR _szEra$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T232648[ebp]
	or	edx, 1
	mov	DWORD PTR $T232648[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szEra$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 277  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z$0:
	lea	ecx, DWORD PTR _szEra$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z$1:
	mov	eax, DWORD PTR $T232648[ebp]
	and	eax, 1
	je	$LN5@GetGreatWo@5
	and	DWORD PTR $T232648[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetGreatWo@5:
	ret	0
__ehhandler$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkEraShort@CvGameCulture@@QBE?AVCvString@@H@Z ENDP ; CvGameCulture::GetGreatWorkEraShort
PUBLIC	?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkCreator
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pWork$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z PROC ; CvGameCulture::GetGreatWorkCreator, COMDAT
; _this$ = ecx

; 280  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 281  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 282  : 	const CvGreatWork *pWork = &m_CurrentGreatWorks[iIndex];

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pWork$[ebp], eax

; 283  : 	return pWork->m_ePlayer;

	mov	edx, DWORD PTR _pWork$[ebp]
	mov	eax, DWORD PTR [edx+44]

; 284  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ENDP ; CvGameCulture::GetGreatWorkCreator
_TEXT	ENDS
PUBLIC	?GetGreatWorkController@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkController
EXTRN	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z:PROC ; CvCityBuildings::GetBuildingGreatWork
EXTRN	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ:PROC	; CvBuildingEntry::GetGreatWorkCount
EXTRN	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z:PROC ; CvCityBuildings::GetNumBuilding
EXTRN	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ:PROC ; CvCity::GetCityBuildings
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z:PROC ; CvCivilizationInfo::getCivilizationBuildings
EXTRN	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ:PROC ; CvPlayer::getCivilizationInfo
EXTRN	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumBuildingClassInfos
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkController@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T232699 = -56						; size = 4
$T232695 = -52						; size = 4
$T232691 = -48						; size = 4
_iGreatWorkIndex$222697 = -44				; size = 4
_iI$222693 = -40					; size = 4
_iNumSlots$222692 = -36					; size = 4
_pkBuilding$222689 = -32				; size = 4
_eBuilding$222685 = -28					; size = 4
_playerCivilizationInfo$222684 = -24			; size = 4
_iBuildingClassLoop$222680 = -20			; size = 4
_ePlayer$222673 = -16					; size = 4
_iCityLoop$222675 = -12					; size = 4
_pCity$222676 = -8					; size = 4
_uiPlayer$222669 = -4					; size = 4
_iIndex$ = 8						; size = 4
?GetGreatWorkController@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z PROC ; CvGameCulture::GetGreatWorkController, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 289  : 	
; 290  : 	// for each player
; 291  : 	//   for each building
; 292  : 	//     for each slot
; 293  : 	//       check to see if it holds this work
; 294  : 
; 295  : 	for (uint uiPlayer = 0; uiPlayer < MAX_MAJOR_CIVS; uiPlayer++)

	mov	DWORD PTR _uiPlayer$222669[ebp], 0
	jmp	SHORT $LN16@GetGreatWo@6
$LN15@GetGreatWo@6:
	mov	eax, DWORD PTR _uiPlayer$222669[ebp]
	add	eax, 1
	mov	DWORD PTR _uiPlayer$222669[ebp], eax
$LN16@GetGreatWo@6:
	cmp	DWORD PTR _uiPlayer$222669[ebp], 22	; 00000016H
	jae	$LN14@GetGreatWo@6

; 296  : 	{
; 297  : 		PlayerTypes ePlayer = (PlayerTypes)uiPlayer;

	mov	ecx, DWORD PTR _uiPlayer$222669[ebp]
	mov	DWORD PTR _ePlayer$222673[ebp], ecx

; 298  : 
; 299  : 		int iCityLoop;
; 300  : 		CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$222676[ebp], 0

; 301  : 		for (pCity = GET_PLAYER(ePlayer).firstCity(&iCityLoop); pCity != NULL; pCity = GET_PLAYER(ePlayer).nextCity(&iCityLoop))

	mov	edx, DWORD PTR _ePlayer$222673[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232691[ebp], edx
	push	0
	lea	eax, DWORD PTR _iCityLoop$222675[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232691[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$222676[ebp], eax
	jmp	SHORT $LN13@GetGreatWo@6
$LN12@GetGreatWo@6:
	mov	ecx, DWORD PTR _ePlayer$222673[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232695[ebp], ecx
	push	0
	lea	edx, DWORD PTR _iCityLoop$222675[ebp]
	push	edx
	mov	ecx, DWORD PTR $T232695[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$222676[ebp], eax
$LN13@GetGreatWo@6:
	cmp	DWORD PTR _pCity$222676[ebp], 0
	je	$LN11@GetGreatWo@6

; 302  : 		{
; 303  : #ifdef AUI_WARNING_FIXES
; 304  : 			for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 305  : #else
; 306  : 			for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$222680[ebp], 0
	jmp	SHORT $LN10@GetGreatWo@6
$LN9@GetGreatWo@6:
	mov	eax, DWORD PTR _iBuildingClassLoop$222680[ebp]
	add	eax, 1
	mov	DWORD PTR _iBuildingClassLoop$222680[ebp], eax
$LN10@GetGreatWo@6:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$222680[ebp], eax
	jge	$LN8@GetGreatWo@6

; 307  : #endif
; 308  : 			{
; 309  : 				CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(ePlayer).getCivilizationInfo();

	mov	ecx, DWORD PTR _ePlayer$222673[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232699[ebp], ecx
	mov	ecx, DWORD PTR $T232699[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$222684[ebp], eax

; 310  : 				BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	edx, DWORD PTR _iBuildingClassLoop$222680[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerCivilizationInfo$222684[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$222685[ebp], eax

; 311  : 				if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$222685[ebp], -1
	je	SHORT $LN7@GetGreatWo@6

; 312  : 				{
; 313  : 					CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$222685[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$222689[ebp], eax

; 314  : 					if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$222689[ebp], 0
	je	SHORT $LN7@GetGreatWo@6

; 315  : 					{
; 316  : 						if (pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	ecx, DWORD PTR _eBuilding$222685[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$222676[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN7@GetGreatWo@6

; 317  : 						{
; 318  : 							int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$222689[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$222692[ebp], eax

; 319  : 							for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$222693[ebp], 0
	jmp	SHORT $LN4@GetGreatWo@6
$LN3@GetGreatWo@6:
	mov	edx, DWORD PTR _iI$222693[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$222693[ebp], edx
$LN4@GetGreatWo@6:
	mov	eax, DWORD PTR _iI$222693[ebp]
	cmp	eax, DWORD PTR _iNumSlots$222692[ebp]
	jge	SHORT $LN7@GetGreatWo@6

; 320  : 							{
; 321  : 								int iGreatWorkIndex = pCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	ecx, DWORD PTR _iI$222693[ebp]
	push	ecx
	mov	edx, DWORD PTR _iBuildingClassLoop$222680[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$222676[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$222697[ebp], eax

; 322  : 								if (iGreatWorkIndex == iIndex)

	mov	eax, DWORD PTR _iGreatWorkIndex$222697[ebp]
	cmp	eax, DWORD PTR _iIndex$[ebp]
	jne	SHORT $LN1@GetGreatWo@6

; 323  : 								{
; 324  : 									return ePlayer;

	mov	eax, DWORD PTR _ePlayer$222673[ebp]
	jmp	SHORT $LN17@GetGreatWo@6
$LN1@GetGreatWo@6:

; 325  : 								}
; 326  : 							}

	jmp	SHORT $LN3@GetGreatWo@6
$LN7@GetGreatWo@6:

; 327  : 						}
; 328  : 					}
; 329  : 				}
; 330  : 			}

	jmp	$LN9@GetGreatWo@6
$LN8@GetGreatWo@6:

; 331  : 		}

	jmp	$LN12@GetGreatWo@6
$LN11@GetGreatWo@6:

; 332  : 	}

	jmp	$LN15@GetGreatWo@6
$LN14@GetGreatWo@6:

; 333  : 
; 334  : 	return NO_PLAYER;

	or	eax, -1
$LN17@GetGreatWo@6:

; 335  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorkController@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ENDP ; CvGameCulture::GetGreatWorkController
_TEXT	ENDS
PUBLIC	?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonus
PUBLIC	?GetGreatWorkCurrentThemingBonus@CvGameCulture@@QBEHH@Z ; CvGameCulture::GetGreatWorkCurrentThemingBonus
EXTRN	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ:PROC ; CvCity::GetCityCulture
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkCurrentThemingBonus@CvGameCulture@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T232713 = -60						; size = 4
$T232709 = -56						; size = 4
$T232705 = -52						; size = 4
_iGreatWorkIndex$222733 = -48				; size = 4
_iI$222729 = -44					; size = 4
_iNumSlots$222728 = -40					; size = 4
_pkBuilding$222725 = -36				; size = 4
_eBuilding$222722 = -32					; size = 4
_playerCivilizationInfo$222721 = -28			; size = 4
_eBuildingClass$222719 = -24				; size = 4
_iBuildingClassLoop$222715 = -20			; size = 4
_ePlayer$222708 = -16					; size = 4
_iCityLoop$222710 = -12					; size = 4
_pCity$222711 = -8					; size = 4
_uiPlayer$222704 = -4					; size = 4
_iIndex$ = 8						; size = 4
?GetGreatWorkCurrentThemingBonus@CvGameCulture@@QBEHH@Z PROC ; CvGameCulture::GetGreatWorkCurrentThemingBonus, COMDAT
; _this$ = ecx

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 339  : 	CvAssertMsg (iIndex < GetNumGreatWorks(), "Bad Great Work index");
; 340  : 
; 341  : 	// for each player
; 342  : 	//   for each building
; 343  : 	//     for each slot
; 344  : 	//       check to see if it holds this work
; 345  : 
; 346  : 	for (uint uiPlayer = 0; uiPlayer < MAX_MAJOR_CIVS; uiPlayer++)

	mov	DWORD PTR _uiPlayer$222704[ebp], 0
	jmp	SHORT $LN16@GetGreatWo@7
$LN15@GetGreatWo@7:
	mov	eax, DWORD PTR _uiPlayer$222704[ebp]
	add	eax, 1
	mov	DWORD PTR _uiPlayer$222704[ebp], eax
$LN16@GetGreatWo@7:
	cmp	DWORD PTR _uiPlayer$222704[ebp], 22	; 00000016H
	jae	$LN14@GetGreatWo@7

; 347  : 	{
; 348  : 		PlayerTypes ePlayer = (PlayerTypes)uiPlayer;

	mov	ecx, DWORD PTR _uiPlayer$222704[ebp]
	mov	DWORD PTR _ePlayer$222708[ebp], ecx

; 349  : 
; 350  : 		int iCityLoop;
; 351  : 		CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$222711[ebp], 0

; 352  : 		for (pCity = GET_PLAYER(ePlayer).firstCity(&iCityLoop); pCity != NULL; pCity = GET_PLAYER(ePlayer).nextCity(&iCityLoop))

	mov	edx, DWORD PTR _ePlayer$222708[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232705[ebp], edx
	push	0
	lea	eax, DWORD PTR _iCityLoop$222710[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232705[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$222711[ebp], eax
	jmp	SHORT $LN13@GetGreatWo@7
$LN12@GetGreatWo@7:
	mov	ecx, DWORD PTR _ePlayer$222708[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232709[ebp], ecx
	push	0
	lea	edx, DWORD PTR _iCityLoop$222710[ebp]
	push	edx
	mov	ecx, DWORD PTR $T232709[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$222711[ebp], eax
$LN13@GetGreatWo@7:
	cmp	DWORD PTR _pCity$222711[ebp], 0
	je	$LN11@GetGreatWo@7

; 353  : 		{
; 354  : #ifdef AUI_WARNING_FIXES
; 355  : 			for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 356  : #else
; 357  : 			for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$222715[ebp], 0
	jmp	SHORT $LN10@GetGreatWo@7
$LN9@GetGreatWo@7:
	mov	eax, DWORD PTR _iBuildingClassLoop$222715[ebp]
	add	eax, 1
	mov	DWORD PTR _iBuildingClassLoop$222715[ebp], eax
$LN10@GetGreatWo@7:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$222715[ebp], eax
	jge	$LN8@GetGreatWo@7

; 358  : #endif
; 359  : 			{
; 360  : 				BuildingClassTypes eBuildingClass = (BuildingClassTypes)iBuildingClassLoop;

	mov	ecx, DWORD PTR _iBuildingClassLoop$222715[ebp]
	mov	DWORD PTR _eBuildingClass$222719[ebp], ecx

; 361  : 				CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(ePlayer).getCivilizationInfo();

	mov	edx, DWORD PTR _ePlayer$222708[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232713[ebp], edx
	mov	ecx, DWORD PTR $T232713[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$222721[ebp], eax

; 362  : 				BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$222719[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$222721[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$222722[ebp], eax

; 363  : 				if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$222722[ebp], -1
	je	$LN7@GetGreatWo@7

; 364  : 				{
; 365  : 					CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$222722[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$222725[ebp], eax

; 366  : 					if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$222725[ebp], 0
	je	SHORT $LN7@GetGreatWo@7

; 367  : 					{
; 368  : 						if (pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$222722[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$222711[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN7@GetGreatWo@7

; 369  : 						{
; 370  : 							int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$222725[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$222728[ebp], eax

; 371  : 							for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$222729[ebp], 0
	jmp	SHORT $LN4@GetGreatWo@7
$LN3@GetGreatWo@7:
	mov	eax, DWORD PTR _iI$222729[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$222729[ebp], eax
$LN4@GetGreatWo@7:
	mov	ecx, DWORD PTR _iI$222729[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$222728[ebp]
	jge	SHORT $LN7@GetGreatWo@7

; 372  : 							{
; 373  : 								int iGreatWorkIndex = pCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$222729[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$222715[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$222711[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$222733[ebp], eax

; 374  : 								if (iGreatWorkIndex == iIndex)

	mov	ecx, DWORD PTR _iGreatWorkIndex$222733[ebp]
	cmp	ecx, DWORD PTR _iIndex$[ebp]
	jne	SHORT $LN1@GetGreatWo@7

; 375  : 								{
; 376  : 									return pCity->GetCityCulture()->GetThemingBonus(eBuildingClass);

	mov	edx, DWORD PTR _eBuildingClass$222719[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$222711[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonus
	jmp	SHORT $LN17@GetGreatWo@7
$LN1@GetGreatWo@7:

; 377  : 								}
; 378  : 							}

	jmp	SHORT $LN3@GetGreatWo@7
$LN7@GetGreatWo@7:

; 379  : 						}
; 380  : 					}
; 381  : 				}
; 382  : 			}

	jmp	$LN9@GetGreatWo@7
$LN8@GetGreatWo@7:

; 383  : 		}

	jmp	$LN12@GetGreatWo@7
$LN11@GetGreatWo@7:

; 384  : 	}

	jmp	$LN15@GetGreatWo@7
$LN14@GetGreatWo@7:

; 385  : 
; 386  : 	return 0;

	xor	eax, eax
$LN17@GetGreatWo@7:

; 387  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorkCurrentThemingBonus@CvGameCulture@@QBEHH@Z ENDP ; CvGameCulture::GetGreatWorkCurrentThemingBonus
_TEXT	ENDS
PUBLIC	?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableMusicIndex
PUBLIC	?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetSwappableMusicIndex
PUBLIC	?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtifactIndex
PUBLIC	?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtifactIndex
PUBLIC	?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z	; CvPlayerCulture::SetSwappableArtIndex
PUBLIC	?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetSwappableArtIndex
PUBLIC	?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableWritingIndex
PUBLIC	?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableWritingIndex
PUBLIC	??_C@_0BB@FLEDFIEC@GREAT_WORK_MUSIC?$AA@	; `string'
PUBLIC	??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@	; `string'
PUBLIC	??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@		; `string'
PUBLIC	??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@	; `string'
PUBLIC	?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z ; CvGameCulture::SwapGreatWorks
EXTRN	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z:PROC ; CvCityBuildings::SetBuildingGreatWork
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
;	COMDAT ??_C@_0BB@FLEDFIEC@GREAT_WORK_MUSIC?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BB@FLEDFIEC@GREAT_WORK_MUSIC?$AA@ DB 'GREAT_WORK_MUSIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@
CONST	SEGMENT
??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@ DB 'GREAT_WORK_ARTIFACT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@
CONST	SEGMENT
??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@ DB 'GREAT_WORK_ART', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@
CONST	SEGMENT
??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@ DB 'GREAT_WORK_LITERATURE', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
CONST	ENDS
;	COMDAT ?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z
_TEXT	SEGMENT
tv314 = -156						; size = 4
tv213 = -152						; size = 4
_this$ = -148						; size = 4
$T232765 = -144						; size = 4
$T232761 = -140						; size = 4
$T232757 = -136						; size = 4
$T232753 = -132						; size = 4
$T232749 = -128						; size = 4
$T232745 = -124						; size = 4
$T232741 = -117						; size = 1
$T232732 = -116						; size = 4
$T232728 = -109						; size = 1
$T232719 = -108						; size = 4
_iGreatWorkIndex$222830 = -104				; size = 4
_iI$222826 = -100					; size = 4
_iNumSlots$222825 = -96					; size = 4
_pkBuilding$222822 = -92				; size = 4
_eBuilding$222818 = -88					; size = 4
_playerCivilizationInfo$222817 = -84			; size = 4
_iBuildingClassLoop$222813 = -80			; size = 4
_eTempPlayer$222803 = -76				; size = 4
_ui$222799 = -72					; size = 4
_iSwapIndex1$ = -68					; size = 4
_pCulture1$ = -64					; size = 4
_eClass1$ = -60						; size = 4
_pCity1$ = -56						; size = 4
_eArtClass$ = -52					; size = 4
_iCityLoop$ = -48					; size = 4
_bFoundSwappable$ = -41					; size = 1
_eWritingClass$ = -40					; size = 4
_eArtifactsClass$ = -36					; size = 4
_pCity$ = -32						; size = 4
_eMusicClass$ = -28					; size = 4
_eClass2$ = -24						; size = 4
_pCity2$ = -20						; size = 4
_eBuildingClass1$ = -16					; size = 4
_eBuildingClass2$ = -12					; size = 4
_pCulture2$ = -8					; size = 4
_iSwapIndex2$ = -4					; size = 4
_ePlayer1$ = 8						; size = 4
_iWork1$ = 12						; size = 4
_ePlayer2$ = 16						; size = 4
_iWork2$ = 20						; size = 4
?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z PROC ; CvGameCulture::SwapGreatWorks, COMDAT
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	if (ePlayer1 == NO_PLAYER || ePlayer2 == NO_PLAYER)

	cmp	DWORD PTR _ePlayer1$[ebp], -1
	je	SHORT $LN60@SwapGreatW
	cmp	DWORD PTR _ePlayer2$[ebp], -1
	jne	SHORT $LN61@SwapGreatW
$LN60@SwapGreatW:

; 393  : 	{
; 394  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN61@SwapGreatW:

; 395  : 	}
; 396  : 
; 397  : 	if (iWork1 == -1 || iWork2 == -1)

	cmp	DWORD PTR _iWork1$[ebp], -1
	je	SHORT $LN58@SwapGreatW
	cmp	DWORD PTR _iWork2$[ebp], -1
	jne	SHORT $LN59@SwapGreatW
$LN58@SwapGreatW:

; 398  : 	{
; 399  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN59@SwapGreatW:

; 400  : 	}
; 401  : 	
; 402  : 	if (!GET_PLAYER(ePlayer1).isAlive() || !GET_PLAYER(ePlayer2).isAlive())

	mov	eax, DWORD PTR _ePlayer1$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232719[ebp], eax
	mov	ecx, DWORD PTR $T232719[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T232728[ebp], dl
	movzx	eax, BYTE PTR $T232728[ebp]
	test	eax, eax
	je	SHORT $LN56@SwapGreatW
	mov	ecx, DWORD PTR _ePlayer2$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232732[ebp], ecx
	mov	edx, DWORD PTR $T232732[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T232741[ebp], al
	movzx	ecx, BYTE PTR $T232741[ebp]
	test	ecx, ecx
	jne	SHORT $LN57@SwapGreatW
$LN56@SwapGreatW:

; 403  : 	{
; 404  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN57@SwapGreatW:

; 405  : 	}
; 406  : 
; 407  : 	CvPlayerCulture* pCulture1 = GET_PLAYER(ePlayer1).GetCulture();

	mov	edx, DWORD PTR _ePlayer1$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232745[ebp], edx
	mov	ecx, DWORD PTR $T232745[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	DWORD PTR _pCulture1$[ebp], eax

; 408  : 	CvPlayerCulture* pCulture2 = GET_PLAYER(ePlayer2).GetCulture();

	mov	eax, DWORD PTR _ePlayer2$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232749[ebp], eax
	mov	ecx, DWORD PTR $T232749[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	DWORD PTR _pCulture2$[ebp], eax

; 409  : 
; 410  : 	GreatWorkClass eWritingClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_LITERATURE");

	push	0
	push	OFFSET ??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eWritingClass$[ebp], eax

; 411  : 	GreatWorkClass eArtClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ART");

	push	0
	push	OFFSET ??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtClass$[ebp], eax

; 412  : 	GreatWorkClass eArtifactsClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ARTIFACT");

	push	0
	push	OFFSET ??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtifactsClass$[ebp], eax

; 413  : 	GreatWorkClass eMusicClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_MUSIC");

	push	0
	push	OFFSET ??_C@_0BB@FLEDFIEC@GREAT_WORK_MUSIC?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eMusicClass$[ebp], eax

; 414  : 
; 415  : 	GreatWorkClass eClass1 = GetGreatWorkClass(iWork1);

	mov	ecx, DWORD PTR _iWork1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z ; CvGameCulture::GetGreatWorkClass
	mov	DWORD PTR _eClass1$[ebp], eax

; 416  : 	GreatWorkClass eClass2 = GetGreatWorkClass(iWork2);

	mov	edx, DWORD PTR _iWork2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkClass@CvGameCulture@@QBE?AW4GreatWorkClass@@H@Z ; CvGameCulture::GetGreatWorkClass
	mov	DWORD PTR _eClass2$[ebp], eax

; 417  : 
; 418  : 	if (eClass1 != eClass2)

	mov	eax, DWORD PTR _eClass1$[ebp]
	cmp	eax, DWORD PTR _eClass2$[ebp]
	je	SHORT $LN55@SwapGreatW

; 419  : 	{
; 420  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN55@SwapGreatW:

; 421  : 	}
; 422  : 	
; 423  : 	// We can't trade things that aren't in our swappable slots
; 424  : 	bool bFoundSwappable = false;

	mov	BYTE PTR _bFoundSwappable$[ebp], 0

; 425  : 	if (eClass1 == eWritingClass)

	mov	ecx, DWORD PTR _eClass1$[ebp]
	cmp	ecx, DWORD PTR _eWritingClass$[ebp]
	jne	SHORT $LN54@SwapGreatW

; 426  : 	{
; 427  : 		if (pCulture1->GetSwappableWritingIndex() == iWork1)

	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableWritingIndex
	cmp	eax, DWORD PTR _iWork1$[ebp]
	jne	SHORT $LN53@SwapGreatW

; 428  : 		{
; 429  : 			pCulture1->SetSwappableWritingIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableWritingIndex

; 430  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN53@SwapGreatW:

; 431  : 		}
; 432  : 	}

	jmp	SHORT $LN52@SwapGreatW
$LN54@SwapGreatW:

; 433  : 	else if (eClass1 == eArtClass)

	mov	edx, DWORD PTR _eClass1$[ebp]
	cmp	edx, DWORD PTR _eArtClass$[ebp]
	jne	SHORT $LN51@SwapGreatW

; 434  : 	{
; 435  : 		if (pCulture1->GetSwappableArtIndex() == iWork1)

	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtIndex
	cmp	eax, DWORD PTR _iWork1$[ebp]
	jne	SHORT $LN50@SwapGreatW

; 436  : 		{
; 437  : 			pCulture1->SetSwappableArtIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtIndex

; 438  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN50@SwapGreatW:

; 439  : 		}
; 440  : 	}

	jmp	SHORT $LN52@SwapGreatW
$LN51@SwapGreatW:

; 441  : 	else if (eClass1 == eArtifactsClass)

	mov	eax, DWORD PTR _eClass1$[ebp]
	cmp	eax, DWORD PTR _eArtifactsClass$[ebp]
	jne	SHORT $LN48@SwapGreatW

; 442  : 	{
; 443  : 		if (pCulture1->GetSwappableArtifactIndex() == iWork1)

	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtifactIndex
	cmp	eax, DWORD PTR _iWork1$[ebp]
	jne	SHORT $LN47@SwapGreatW

; 444  : 		{
; 445  : 			pCulture1->SetSwappableArtifactIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtifactIndex

; 446  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN47@SwapGreatW:

; 447  : 		}
; 448  : 	}

	jmp	SHORT $LN52@SwapGreatW
$LN48@SwapGreatW:

; 449  : 	else if (eClass1 == eMusicClass)

	mov	ecx, DWORD PTR _eClass1$[ebp]
	cmp	ecx, DWORD PTR _eMusicClass$[ebp]
	jne	SHORT $LN52@SwapGreatW

; 450  : 	{
; 451  : 		if (pCulture1->GetSwappableMusicIndex() == iWork1)

	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableMusicIndex
	cmp	eax, DWORD PTR _iWork1$[ebp]
	jne	SHORT $LN52@SwapGreatW

; 452  : 		{
; 453  : 			pCulture1->SetSwappableMusicIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture1$[ebp]
	call	?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableMusicIndex

; 454  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN52@SwapGreatW:

; 455  : 		}
; 456  : 	}
; 457  : 
; 458  : 	if (!bFoundSwappable)

	movzx	edx, BYTE PTR _bFoundSwappable$[ebp]
	test	edx, edx
	jne	SHORT $LN43@SwapGreatW

; 459  : 	{
; 460  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN43@SwapGreatW:

; 461  : 	}
; 462  : 
; 463  : 	bFoundSwappable = false;

	mov	BYTE PTR _bFoundSwappable$[ebp], 0

; 464  : 	if (eClass2 == eWritingClass)

	mov	eax, DWORD PTR _eClass2$[ebp]
	cmp	eax, DWORD PTR _eWritingClass$[ebp]
	jne	SHORT $LN42@SwapGreatW

; 465  : 	{
; 466  : 		if (pCulture2->GetSwappableWritingIndex() == iWork2)

	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableWritingIndex
	cmp	eax, DWORD PTR _iWork2$[ebp]
	jne	SHORT $LN41@SwapGreatW

; 467  : 		{
; 468  : 			pCulture2->SetSwappableWritingIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableWritingIndex

; 469  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN41@SwapGreatW:

; 470  : 		}
; 471  : 	}

	jmp	SHORT $LN40@SwapGreatW
$LN42@SwapGreatW:

; 472  : 	else if (eClass2 == eArtClass)

	mov	ecx, DWORD PTR _eClass2$[ebp]
	cmp	ecx, DWORD PTR _eArtClass$[ebp]
	jne	SHORT $LN39@SwapGreatW

; 473  : 	{
; 474  : 		if (pCulture2->GetSwappableArtIndex() == iWork2)

	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtIndex
	cmp	eax, DWORD PTR _iWork2$[ebp]
	jne	SHORT $LN38@SwapGreatW

; 475  : 		{
; 476  : 			pCulture2->SetSwappableArtIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtIndex

; 477  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN38@SwapGreatW:

; 478  : 		}
; 479  : 	}

	jmp	SHORT $LN40@SwapGreatW
$LN39@SwapGreatW:

; 480  : 	else if (eClass2 == eArtifactsClass)

	mov	edx, DWORD PTR _eClass2$[ebp]
	cmp	edx, DWORD PTR _eArtifactsClass$[ebp]
	jne	SHORT $LN36@SwapGreatW

; 481  : 	{
; 482  : 		if (pCulture2->GetSwappableArtifactIndex() == iWork2)

	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtifactIndex
	cmp	eax, DWORD PTR _iWork2$[ebp]
	jne	SHORT $LN35@SwapGreatW

; 483  : 		{
; 484  : 			pCulture2->SetSwappableArtifactIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtifactIndex

; 485  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN35@SwapGreatW:

; 486  : 		}
; 487  : 	}

	jmp	SHORT $LN40@SwapGreatW
$LN36@SwapGreatW:

; 488  : 	else if (eClass2 == eMusicClass)

	mov	eax, DWORD PTR _eClass2$[ebp]
	cmp	eax, DWORD PTR _eMusicClass$[ebp]
	jne	SHORT $LN40@SwapGreatW

; 489  : 	{
; 490  : 		if (pCulture2->GetSwappableMusicIndex() == iWork2)

	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableMusicIndex
	cmp	eax, DWORD PTR _iWork2$[ebp]
	jne	SHORT $LN40@SwapGreatW

; 491  : 		{
; 492  : 			pCulture2->SetSwappableMusicIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _pCulture2$[ebp]
	call	?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableMusicIndex

; 493  : 			bFoundSwappable = true;

	mov	BYTE PTR _bFoundSwappable$[ebp], 1
$LN40@SwapGreatW:

; 494  : 		}
; 495  : 	}
; 496  : 
; 497  : 	if (!bFoundSwappable)

	movzx	ecx, BYTE PTR _bFoundSwappable$[ebp]
	test	ecx, ecx
	jne	SHORT $LN31@SwapGreatW

; 498  : 	{
; 499  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN31@SwapGreatW:

; 500  : 	}
; 501  : 
; 502  : 	CvCity* pCity1 = NULL;

	mov	DWORD PTR _pCity1$[ebp], 0

; 503  : 	BuildingClassTypes eBuildingClass1 = NO_BUILDINGCLASS;

	mov	DWORD PTR _eBuildingClass1$[ebp], -1

; 504  : 	int iSwapIndex1 = -1;

	mov	DWORD PTR _iSwapIndex1$[ebp], -1

; 505  : 
; 506  : 	CvCity* pCity2 = NULL;

	mov	DWORD PTR _pCity2$[ebp], 0

; 507  : 	BuildingClassTypes eBuildingClass2 = NO_BUILDINGCLASS;

	mov	DWORD PTR _eBuildingClass2$[ebp], -1

; 508  : 	int iSwapIndex2 = -1;

	mov	DWORD PTR _iSwapIndex2$[ebp], -1

; 509  : 
; 510  : 	int iCityLoop;
; 511  : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 512  : 	for (uint ui = 0; ui < 2; ui++)

	mov	DWORD PTR _ui$222799[ebp], 0
	jmp	SHORT $LN30@SwapGreatW
$LN29@SwapGreatW:
	mov	edx, DWORD PTR _ui$222799[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222799[ebp], edx
$LN30@SwapGreatW:
	cmp	DWORD PTR _ui$222799[ebp], 2
	jae	$LN28@SwapGreatW

; 513  : 	{
; 514  : 		PlayerTypes eTempPlayer = NO_PLAYER;

	mov	DWORD PTR _eTempPlayer$222803[ebp], -1

; 515  : 		switch (ui)

	mov	eax, DWORD PTR _ui$222799[ebp]
	mov	DWORD PTR tv213[ebp], eax
	cmp	DWORD PTR tv213[ebp], 0
	je	SHORT $LN25@SwapGreatW
	cmp	DWORD PTR tv213[ebp], 1
	je	SHORT $LN24@SwapGreatW
	jmp	SHORT $LN26@SwapGreatW
$LN25@SwapGreatW:

; 516  : 		{
; 517  : 		case 0:
; 518  : 			eTempPlayer = ePlayer1;

	mov	ecx, DWORD PTR _ePlayer1$[ebp]
	mov	DWORD PTR _eTempPlayer$222803[ebp], ecx

; 519  : 			break;

	jmp	SHORT $LN26@SwapGreatW
$LN24@SwapGreatW:

; 520  : 		case 1:
; 521  : 			eTempPlayer = ePlayer2;

	mov	edx, DWORD PTR _ePlayer2$[ebp]
	mov	DWORD PTR _eTempPlayer$222803[ebp], edx
$LN26@SwapGreatW:

; 522  : 			break;
; 523  : 		}
; 524  : 
; 525  : 		for (pCity = GET_PLAYER(eTempPlayer).firstCity(&iCityLoop); pCity != NULL; pCity = GET_PLAYER(eTempPlayer).nextCity(&iCityLoop))

	mov	eax, DWORD PTR _eTempPlayer$222803[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232753[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iCityLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232753[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$[ebp], eax
	jmp	SHORT $LN23@SwapGreatW
$LN22@SwapGreatW:
	mov	edx, DWORD PTR _eTempPlayer$222803[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232757[ebp], edx
	push	0
	lea	eax, DWORD PTR _iCityLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232757[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$[ebp], eax
$LN23@SwapGreatW:
	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN21@SwapGreatW

; 526  : 		{
; 527  : #ifdef AUI_WARNING_FIXES
; 528  : 			for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 529  : #else
; 530  : 			for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$222813[ebp], 0
	jmp	SHORT $LN20@SwapGreatW
$LN19@SwapGreatW:
	mov	ecx, DWORD PTR _iBuildingClassLoop$222813[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$222813[ebp], ecx
$LN20@SwapGreatW:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$222813[ebp], eax
	jge	$LN18@SwapGreatW

; 531  : #endif
; 532  : 			{
; 533  : 				CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(eTempPlayer).getCivilizationInfo();

	mov	edx, DWORD PTR _eTempPlayer$222803[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T232761[ebp], edx
	mov	ecx, DWORD PTR $T232761[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$222817[ebp], eax

; 534  : 				BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$222813[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$222817[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$222818[ebp], eax

; 535  : 				if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$222818[ebp], -1
	je	$LN17@SwapGreatW

; 536  : 				{
; 537  : 					CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$222818[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$222822[ebp], eax

; 538  : 					if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$222822[ebp], 0
	je	$LN17@SwapGreatW

; 539  : 					{
; 540  : 						if (pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$222818[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN17@SwapGreatW

; 541  : 						{
; 542  : 							int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$222822[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$222825[ebp], eax

; 543  : 							for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$222826[ebp], 0
	jmp	SHORT $LN14@SwapGreatW
$LN13@SwapGreatW:
	mov	eax, DWORD PTR _iI$222826[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$222826[ebp], eax
$LN14@SwapGreatW:
	mov	ecx, DWORD PTR _iI$222826[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$222825[ebp]
	jge	SHORT $LN17@SwapGreatW

; 544  : 							{
; 545  : 								int iGreatWorkIndex = pCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$222826[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$222813[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$222830[ebp], eax

; 546  : 								if (ui == 0)

	cmp	DWORD PTR _ui$222799[ebp], 0
	jne	SHORT $LN11@SwapGreatW

; 547  : 								{
; 548  : 									if (iGreatWorkIndex == iWork1)

	mov	ecx, DWORD PTR _iGreatWorkIndex$222830[ebp]
	cmp	ecx, DWORD PTR _iWork1$[ebp]
	jne	SHORT $LN10@SwapGreatW

; 549  : 									{
; 550  : 										pCity1 = pCity;

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR _pCity1$[ebp], edx

; 551  : 										eBuildingClass1 = (BuildingClassTypes)iBuildingClassLoop;

	mov	eax, DWORD PTR _iBuildingClassLoop$222813[ebp]
	mov	DWORD PTR _eBuildingClass1$[ebp], eax

; 552  : 										iSwapIndex1 = iI;

	mov	ecx, DWORD PTR _iI$222826[ebp]
	mov	DWORD PTR _iSwapIndex1$[ebp], ecx

; 553  : 										break;

	jmp	SHORT $LN17@SwapGreatW
$LN10@SwapGreatW:

; 554  : 									}
; 555  : 								}

	jmp	SHORT $LN9@SwapGreatW
$LN11@SwapGreatW:

; 556  : 								else if (ui == 1)

	cmp	DWORD PTR _ui$222799[ebp], 1
	jne	SHORT $LN9@SwapGreatW

; 557  : 								{
; 558  : 									if (iGreatWorkIndex == iWork2)

	mov	edx, DWORD PTR _iGreatWorkIndex$222830[ebp]
	cmp	edx, DWORD PTR _iWork2$[ebp]
	jne	SHORT $LN9@SwapGreatW

; 559  : 									{
; 560  : 										pCity2 = pCity;

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR _pCity2$[ebp], eax

; 561  : 										eBuildingClass2 = (BuildingClassTypes)iBuildingClassLoop;

	mov	ecx, DWORD PTR _iBuildingClassLoop$222813[ebp]
	mov	DWORD PTR _eBuildingClass2$[ebp], ecx

; 562  : 										iSwapIndex2 = iI;

	mov	edx, DWORD PTR _iI$222826[ebp]
	mov	DWORD PTR _iSwapIndex2$[ebp], edx

; 563  : 										break;

	jmp	SHORT $LN17@SwapGreatW
$LN9@SwapGreatW:

; 564  : 									}
; 565  : 								}
; 566  : 							}

	jmp	SHORT $LN13@SwapGreatW
$LN17@SwapGreatW:

; 567  : 						}
; 568  : 					}
; 569  : 				}
; 570  : 			}

	jmp	$LN19@SwapGreatW
$LN18@SwapGreatW:

; 571  : 		}

	jmp	$LN22@SwapGreatW
$LN21@SwapGreatW:

; 572  : 	}

	jmp	$LN29@SwapGreatW
$LN28@SwapGreatW:

; 573  : 
; 574  : 	if (pCity1 == NULL || pCity2 == NULL)

	cmp	DWORD PTR _pCity1$[ebp], 0
	je	SHORT $LN5@SwapGreatW
	cmp	DWORD PTR _pCity2$[ebp], 0
	jne	SHORT $LN6@SwapGreatW
$LN5@SwapGreatW:

; 575  : 	{
; 576  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN6@SwapGreatW:

; 577  : 	}
; 578  : 
; 579  : 	if (eBuildingClass1 == NO_BUILDINGCLASS || eBuildingClass2 == NO_BUILDINGCLASS)

	cmp	DWORD PTR _eBuildingClass1$[ebp], -1
	je	SHORT $LN3@SwapGreatW
	cmp	DWORD PTR _eBuildingClass2$[ebp], -1
	jne	SHORT $LN4@SwapGreatW
$LN3@SwapGreatW:

; 580  : 	{
; 581  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN4@SwapGreatW:

; 582  : 	}
; 583  : 
; 584  : 	if (iSwapIndex1 == -1 || iSwapIndex2 == -1)

	cmp	DWORD PTR _iSwapIndex1$[ebp], -1
	je	SHORT $LN1@SwapGreatW
	cmp	DWORD PTR _iSwapIndex2$[ebp], -1
	jne	SHORT $LN2@SwapGreatW
$LN1@SwapGreatW:

; 585  : 	{
; 586  : 		return false;

	xor	al, al
	jmp	$LN62@SwapGreatW
$LN2@SwapGreatW:

; 587  : 	}
; 588  : 
; 589  : 	// remove existing great works
; 590  : 	pCity1->GetCityBuildings()->SetBuildingGreatWork(eBuildingClass1, iSwapIndex1, NO_GREAT_WORK);

	push	-1
	mov	eax, DWORD PTR _iSwapIndex1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eBuildingClass1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity1$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 591  : 	pCity2->GetCityBuildings()->SetBuildingGreatWork(eBuildingClass2, iSwapIndex2, NO_GREAT_WORK);

	push	-1
	mov	edx, DWORD PTR _iSwapIndex2$[ebp]
	push	edx
	mov	eax, DWORD PTR _eBuildingClass2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity2$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 592  : 
; 593  : 	// add in new works
; 594  : 	pCity1->GetCityBuildings()->SetBuildingGreatWork(eBuildingClass1, iSwapIndex1, iWork2);

	mov	ecx, DWORD PTR _iWork2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iSwapIndex1$[ebp]
	push	edx
	mov	eax, DWORD PTR _eBuildingClass1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity1$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 595  : 	pCity2->GetCityBuildings()->SetBuildingGreatWork(eBuildingClass2, iSwapIndex2, iWork1);

	mov	ecx, DWORD PTR _iWork1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iSwapIndex2$[ebp]
	push	edx
	mov	eax, DWORD PTR _eBuildingClass2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity2$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 596  : 	
; 597  : 	GC.GetEngineUserInterface()->setDirty(GreatWorksScreen_DIRTY_BIT, true);

	mov	ecx, DWORD PTR $T232765[ebp]
	mov	DWORD PTR tv314[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv314[ebp], edx
	push	1
	push	36					; 00000024H
	mov	eax, DWORD PTR tv314[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv314[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax

; 598  : 
; 599  : 	return true;

	mov	al, 1
$LN62@SwapGreatW:

; 600  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z ENDP ; CvGameCulture::SwapGreatWorks
_TEXT	ENDS
PUBLIC	?MoveGreatWorks@CvGameCulture@@QAEXW4PlayerTypes@@HHHHHH@Z ; CvGameCulture::MoveGreatWorks
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Odtp
;	COMDAT ?MoveGreatWorks@CvGameCulture@@QAEXW4PlayerTypes@@HHHHHH@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T232779 = -21						; size = 1
_pCity1$ = -20						; size = 4
_workType2$ = -16					; size = 4
_pCity2$ = -12						; size = 4
_workType1$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iCity1$ = 12						; size = 4
_iBuildingClass1$ = 16					; size = 4
_iWorkIndex1$ = 20					; size = 4
_iCity2$ = 24						; size = 4
_iBuildingClass2$ = 28					; size = 4
_iWorkIndex2$ = 32					; size = 4
?MoveGreatWorks@CvGameCulture@@QAEXW4PlayerTypes@@HHHHHH@Z PROC ; CvGameCulture::MoveGreatWorks, COMDAT
; _this$ = ecx

; 604  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 605  : 	if(ePlayer == NO_PLAYER){

	cmp	DWORD PTR _ePlayer$[ebp], -1
	jne	SHORT $LN7@MoveGreatW

; 606  : 		return;

	jmp	$LN5@MoveGreatW

; 607  : 	}
; 608  : 
; 609  : 	CvPlayer& kPlayer = GET_PLAYER(ePlayer);

$LN7@MoveGreatW:
	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 610  : 	if (!kPlayer.isAlive()){

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T232779[ebp], dl
	movzx	eax, BYTE PTR $T232779[ebp]
	test	eax, eax
	jne	SHORT $LN3@MoveGreatW

; 611  : 		return;

	jmp	$LN5@MoveGreatW
$LN3@MoveGreatW:

; 612  : 	}
; 613  : 
; 614  : 	CvCity* pCity1 = kPlayer.getCity(iCity1);

	mov	ecx, DWORD PTR _iCity1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity1$[ebp], eax

; 615  : 	CvCity* pCity2 = kPlayer.getCity(iCity2);

	mov	edx, DWORD PTR _iCity2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity2$[ebp], eax

; 616  : 	if(!pCity1 || !pCity2){

	cmp	DWORD PTR _pCity1$[ebp], 0
	je	SHORT $LN1@MoveGreatW
	cmp	DWORD PTR _pCity2$[ebp], 0
	jne	SHORT $LN2@MoveGreatW
$LN1@MoveGreatW:

; 617  : 		return;

	jmp	SHORT $LN5@MoveGreatW
$LN2@MoveGreatW:

; 618  : 	}
; 619  : 
; 620  : 	int workType1 = pCity1->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClass1, iWorkIndex1);

	mov	eax, DWORD PTR _iWorkIndex1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iBuildingClass1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity1$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _workType1$[ebp], eax

; 621  : 	int workType2 = pCity2->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClass2, iWorkIndex2);

	mov	edx, DWORD PTR _iWorkIndex2$[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClass2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity2$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _workType2$[ebp], eax

; 622  : 	pCity1->GetCityBuildings()->SetBuildingGreatWork((BuildingClassTypes)iBuildingClass1, iWorkIndex1, workType2);

	mov	ecx, DWORD PTR _workType2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iWorkIndex1$[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClass1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity1$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 623  : 	pCity2->GetCityBuildings()->SetBuildingGreatWork((BuildingClassTypes)iBuildingClass2, iWorkIndex2, workType1);

	mov	ecx, DWORD PTR _workType1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iWorkIndex2$[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClass2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity2$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork
$LN5@MoveGreatW:

; 624  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?MoveGreatWorks@CvGameCulture@@QAEXW4PlayerTypes@@HHHHHH@Z ENDP ; CvGameCulture::MoveGreatWorks
_TEXT	ENDS
PUBLIC	?GetNumCivsInfluentialForWin@CvGameCulture@@QBEHXZ ; CvGameCulture::GetNumCivsInfluentialForWin
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
; Function compile flags: /Odtp
;	COMDAT ?GetNumCivsInfluentialForWin@CvGameCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T232793 = -13						; size = 1
_kPlayer$222876 = -12					; size = 4
_iPlayerLoop$222872 = -8				; size = 4
_iAliveMajors$ = -4					; size = 4
?GetNumCivsInfluentialForWin@CvGameCulture@@QBEHXZ PROC	; CvGameCulture::GetNumCivsInfluentialForWin, COMDAT
; _this$ = ecx

; 628  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 629  : 	// How many players are alive?
; 630  : 	int iAliveMajors = 0;

	mov	DWORD PTR _iAliveMajors$[ebp], 0

; 631  : 	for(int iPlayerLoop = 0; iPlayerLoop < MAX_PLAYERS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$222872[ebp], 0
	jmp	SHORT $LN4@GetNumCivs
$LN3@GetNumCivs:
	mov	eax, DWORD PTR _iPlayerLoop$222872[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlayerLoop$222872[ebp], eax
$LN4@GetNumCivs:
	cmp	DWORD PTR _iPlayerLoop$222872[ebp], 64	; 00000040H
	jge	SHORT $LN2@GetNumCivs

; 632  : 	{
; 633  : 		CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iPlayerLoop);

	mov	ecx, DWORD PTR _iPlayerLoop$222872[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$222876[ebp], ecx

; 634  : 		if (kPlayer.isAlive() && !kPlayer.isMinorCiv() && !kPlayer.isBarbarian())

	mov	edx, DWORD PTR _kPlayer$222876[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T232793[ebp], al
	movzx	ecx, BYTE PTR $T232793[ebp]
	test	ecx, ecx
	je	SHORT $LN1@GetNumCivs
	mov	ecx, DWORD PTR _kPlayer$222876[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@GetNumCivs
	mov	ecx, DWORD PTR _kPlayer$222876[ebp]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@GetNumCivs

; 635  : 		{
; 636  : 			iAliveMajors++;

	mov	ecx, DWORD PTR _iAliveMajors$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iAliveMajors$[ebp], ecx
$LN1@GetNumCivs:

; 637  : 		}
; 638  : 	}

	jmp	SHORT $LN3@GetNumCivs
$LN2@GetNumCivs:

; 639  : 
; 640  : 	return iAliveMajors - 1;  // Don't have to be influential over yourself

	mov	eax, DWORD PTR _iAliveMajors$[ebp]
	sub	eax, 1

; 641  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCivsInfluentialForWin@CvGameCulture@@QBEHXZ ENDP	; CvGameCulture::GetNumCivsInfluentialForWin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z	; operator>>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z$0
__ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z
_TEXT	SEGMENT
$T232863 = -109						; size = 1
$T232797 = -84						; size = 4
_bTempBool$222894 = -77					; size = 1
_iI$222886 = -76					; size = 4
_iEntriesToRead$ = -72					; size = 4
_uiVersion$ = -68					; size = 4
_tempItem$ = -64					; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z PROC	; operator>>, COMDAT

; 647  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 648  : 	uint uiVersion;
; 649  : 
; 650  : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 651  : 
; 652  : 	int iEntriesToRead;
; 653  : 	CvGreatWork tempItem;

	lea	ecx, DWORD PTR _tempItem$[ebp]
	call	??0CvGreatWork@@QAE@XZ			; CvGreatWork::CvGreatWork
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 654  : 
; 655  : 	writeTo.m_CurrentGreatWorks.clear();

	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ ; BaseVector<CvGreatWork,0>::clear

; 656  : 	loadFrom >> iEntriesToRead;

	lea	ecx, DWORD PTR _iEntriesToRead$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 657  : 	for(int iI = 0; iI < iEntriesToRead; iI++)

	mov	DWORD PTR _iI$222886[ebp], 0
	jmp	SHORT $LN5@operator@2
$LN4@operator@2:
	mov	edx, DWORD PTR _iI$222886[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$222886[ebp], edx
$LN5@operator@2:
	mov	eax, DWORD PTR _iI$222886[ebp]
	cmp	eax, DWORD PTR _iEntriesToRead$[ebp]
	jge	SHORT $LN3@operator@2

; 658  : 	{
; 659  : 		loadFrom >> tempItem;

	lea	ecx, DWORD PTR _tempItem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAVCvGreatWork@@@Z ; operator>>
	add	esp, 8

; 660  : 		writeTo.m_CurrentGreatWorks.push_back(tempItem);

	lea	eax, DWORD PTR _tempItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z ; FStaticVector<CvGreatWork,22,0,297,0>::push_back

; 661  : 	}

	jmp	SHORT $LN4@operator@2
$LN3@operator@2:

; 662  : 
; 663  : 	if (uiVersion >= 2)

	cmp	DWORD PTR _uiVersion$[ebp], 2
	jb	SHORT $LN2@operator@2

; 664  : 	{
; 665  : 		bool bTempBool;
; 666  : 		loadFrom >> bTempBool;

	lea	ecx, DWORD PTR _bTempBool$222894[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 667  : 		writeTo.SetReportedSomeoneInfluential(bTempBool);

	mov	dl, BYTE PTR _bTempBool$222894[ebp]
	mov	BYTE PTR $T232863[ebp], dl
	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	cl, BYTE PTR $T232863[ebp]
	mov	BYTE PTR [eax+1072], cl

; 668  : 	}
; 669  : 	else

	jmp	SHORT $LN1@operator@2
$LN2@operator@2:

; 670  : 	{
; 671  : 		writeTo.SetReportedSomeoneInfluential(false);

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [edx+1072], 0
$LN1@operator@2:

; 672  : 	}
; 673  : 
; 674  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]
	mov	DWORD PTR $T232797[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tempItem$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T232797[ebp]

; 675  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z$0:
	lea	ecx, DWORD PTR _tempItem$[ebp]
	jmp	??1CvGreatWork@@QAE@XZ
__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5@YAAAVFDataStream@@AAV0@AAVCvGameCulture@@@Z ENDP	; operator>>
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvGameCulture@@@Z	; operator<<
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvGameCulture@@@Z
_TEXT	SEGMENT
$T232906 = -21						; size = 1
$T232893 = -20						; size = 4
$T232886 = -13						; size = 1
$T232885 = -12						; size = 4
_uiVersion$ = -8					; size = 4
_it$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvGameCulture@@@Z PROC	; operator<<, COMDAT

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 680  : 	uint uiVersion = 2;

	mov	DWORD PTR _uiVersion$[ebp], 2

; 681  : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 682  : 
; 683  : 	GreatWorkList::const_iterator it;
; 684  : 	saveTo << readFrom.m_CurrentGreatWorks.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T232893[ebp], edx
	mov	eax, DWORD PTR $T232893[ebp]
	mov	DWORD PTR $T232885[ebp], eax
	lea	ecx, DWORD PTR $T232885[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 685  : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 686  : 	for (it = readFrom.m_CurrentGreatWorks.begin(); it != readFrom.m_CurrentGreatWorks.end(); ++it)
; 687  : #else
; 688  : 	for(it = readFrom.m_CurrentGreatWorks.begin(); it != readFrom.m_CurrentGreatWorks.end(); it++)

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN14@operator@3
$LN2@operator@3:
	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _it$[ebp], ecx
$LN14@operator@3:
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	eax, DWORD PTR [ecx]
	cmp	DWORD PTR _it$[ebp], eax
	je	SHORT $LN1@operator@3

; 689  : #endif
; 690  : 	{
; 691  : 		saveTo << *it;

	mov	edx, DWORD PTR _it$[ebp]
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABVCvGreatWork@@@Z ; operator<<
	add	esp, 8

; 692  : 	}

	jmp	SHORT $LN2@operator@3
$LN1@operator@3:

; 693  : 
; 694  : 	saveTo << readFrom.GetReportedSomeoneInfluential();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	dl, BYTE PTR [ecx+1072]
	mov	BYTE PTR $T232906[ebp], dl
	mov	al, BYTE PTR $T232906[ebp]
	mov	BYTE PTR $T232886[ebp], al
	lea	ecx, DWORD PTR $T232886[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 695  : 
; 696  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 697  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvGameCulture@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??0CvGreatWorkInMyEmpire@@QAE@XZ		; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire
; Function compile flags: /Odtp
;	COMDAT ??0CvGreatWorkInMyEmpire@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvGreatWorkInMyEmpire@@QAE@XZ PROC			; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire, COMDAT
; _this$ = ecx

; 714  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 715  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvGreatWorkInMyEmpire@@QAE@XZ ENDP			; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire
_TEXT	ENDS
PUBLIC	??0CvGreatWorkInMyEmpire@@QAE@HHW4BuildingTypes@@HW4PlayerTypes@@W4EraTypes@@@Z ; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire
; Function compile flags: /Odtp
;	COMDAT ??0CvGreatWorkInMyEmpire@@QAE@HHW4BuildingTypes@@HW4PlayerTypes@@W4EraTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
_iCityID$ = 12						; size = 4
_eBuilding$ = 16					; size = 4
_iSlot$ = 20						; size = 4
_ePlayer$ = 24						; size = 4
_eEra$ = 28						; size = 4
??0CvGreatWorkInMyEmpire@@QAE@HHW4BuildingTypes@@HW4PlayerTypes@@W4EraTypes@@@Z PROC ; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire, COMDAT
; _this$ = ecx

; 729  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iCityID$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eBuilding$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iSlot$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eEra$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 730  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0CvGreatWorkInMyEmpire@@QAE@HHW4BuildingTypes@@HW4PlayerTypes@@W4EraTypes@@@Z ENDP ; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire
_TEXT	ENDS
PUBLIC	??0CvGreatWorkBuildingInMyEmpire@@QAE@XZ	; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire
; Function compile flags: /Odtp
;	COMDAT ??0CvGreatWorkBuildingInMyEmpire@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvGreatWorkBuildingInMyEmpire@@QAE@XZ PROC		; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire, COMDAT
; _this$ = ecx

; 739  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1

; 740  : 	m_bThemed = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 0

; 741  : 	m_bEndangered = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+9], 0

; 742  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvGreatWorkBuildingInMyEmpire@@QAE@XZ ENDP		; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire
_TEXT	ENDS
PUBLIC	??0CvGreatWorkBuildingInMyEmpire@@QAE@HW4BuildingTypes@@@Z ; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire
; Function compile flags: /Odtp
;	COMDAT ??0CvGreatWorkBuildingInMyEmpire@@QAE@HW4BuildingTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iCityID$ = 8						; size = 4
_eBuilding$ = 12					; size = 4
??0CvGreatWorkBuildingInMyEmpire@@QAE@HW4BuildingTypes@@@Z PROC ; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire, COMDAT
; _this$ = ecx

; 748  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iCityID$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eBuilding$[ebp]
	mov	DWORD PTR [edx+4], eax

; 749  : 	m_bThemed = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], 0

; 750  : 	m_bEndangered = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+9], 0

; 751  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CvGreatWorkBuildingInMyEmpire@@QAE@HW4BuildingTypes@@@Z ENDP ; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::~vector<CvPlot *,std::allocator<CvPlot *> >
PUBLIC	??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvPlot *,std::allocator<CvPlot *> >::~_Vector_val<CvPlot *,std::allocator<CvPlot *> >
PUBLIC	?_Buy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Buy
PUBLIC	??0CvPlayerCulture@@QAE@XZ			; CvPlayerCulture::CvPlayerCulture
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??0CvPlayerCulture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$1
__ehfuncinfo$??0CvPlayerCulture@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CvPlayerCulture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvPlayerCulture@@QAE@XZ
_TEXT	SEGMENT
tv139 = -124						; size = 4
tv164 = -120						; size = 4
_this$ = -116						; size = 4
$T233002 = -112						; size = 4
$T232997 = -108						; size = 4
$T232953 = -30						; size = 1
$T232940 = -29						; size = 1
$T232936 = -28						; size = 4
$T232929 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvPlayerCulture@@QAE@XZ PROC				; CvPlayerCulture::CvPlayerCulture, COMDAT
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvPlayerCulture@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T232953[ebp]
	mov	DWORD PTR $T232929[ebp], eax
	lea	ecx, DWORD PTR $T232940[ebp]
	mov	DWORD PTR $T232936[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv164[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAE_NI@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	DWORD PTR $T232997[ebp], ecx
	mov	ecx, DWORD PTR $T232997[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 248				; 000000f8H
	mov	DWORD PTR $T233002[ebp], edx
	mov	ecx, DWORD PTR $T233002[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0

; 760  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::~vector<CvPlot *,std::allocator<CvPlot *> >
__unwindfunclet$??0CvPlayerCulture@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvPlayerCulture@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvPlayerCulture@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvPlayerCulture@@QAE@XZ ENDP				; CvPlayerCulture::CvPlayerCulture
PUBLIC	?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Tidy
PUBLIC	??1CvPlayerCulture@@QAE@XZ			; CvPlayerCulture::~CvPlayerCulture
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvPlayerCulture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$5
__ehfuncinfo$??1CvPlayerCulture@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CvPlayerCulture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvPlayerCulture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T233023 = -20						; size = 4
$T233018 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvPlayerCulture@@QAE@XZ PROC				; CvPlayerCulture::~CvPlayerCulture, COMDAT
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvPlayerCulture@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 765  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 248				; 000000f8H
	mov	DWORD PTR $T233018[ebp], eax
	mov	ecx, DWORD PTR $T233018[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	DWORD PTR $T233023[ebp], ecx
	mov	ecx, DWORD PTR $T233023[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::~vector<CvPlot *,std::allocator<CvPlot *> >
__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvPlayerCulture@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
__ehhandler$??1CvPlayerCulture@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvPlayerCulture@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvPlayerCulture@@QAE@XZ ENDP				; CvPlayerCulture::~CvPlayerCulture
PUBLIC	?ResetDigCompletePlots@CvPlayerCulture@@QAEXXZ	; CvPlayerCulture::ResetDigCompletePlots
PUBLIC	?Init@CvPlayerCulture@@QAEXPAVCvPlayer@@@Z	; CvPlayerCulture::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvPlayerCulture@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iI$222948 = -4						; size = 4
_pPlayer$ = 8						; size = 4
?Init@CvPlayerCulture@@QAEXPAVCvPlayer@@@Z PROC		; CvPlayerCulture::Init, COMDAT
; _this$ = ecx

; 769  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 770  : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [eax+292], ecx

; 771  : 
; 772  : 	ResetDigCompletePlots();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetDigCompletePlots@CvPlayerCulture@@QAEXXZ ; CvPlayerCulture::ResetDigCompletePlots

; 773  : 
; 774  : 	m_iLastTurnLifetimeCulture = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 775  : 	m_iOpinionUnhappiness = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+216], 0

; 776  : 
; 777  : 	for (int iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$222948[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	ecx, DWORD PTR _iI$222948[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$222948[ebp], ecx
$LN3@Init:
	cmp	DWORD PTR _iI$222948[ebp], 22		; 00000016H
	jge	SHORT $LN1@Init

; 778  : 	{
; 779  : 		m_aiCulturalInfluence[iI] = 0;

	mov	edx, DWORD PTR _iI$222948[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+20], 0

; 780  : 		m_aiLastTurnCulturalInfluence[iI] = 0;

	mov	ecx, DWORD PTR _iI$222948[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+108], 0

; 781  : 	}

	jmp	SHORT $LN2@Init
$LN1@Init:

; 782  : 
; 783  : 	m_bReportedTwoCivsAway = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+196], 0

; 784  : 	m_bReportedOneCivAway = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+197], 0

; 785  : 
; 786  : 	m_iSwappableWritingIndex  = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], -1

; 787  : 	m_iSwappableArtIndex      = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], -1

; 788  : 	m_iSwappableArtifactIndex = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], -1

; 789  : 	m_iSwappableMusicIndex    = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], -1

; 790  : 
; 791  : 	m_iTurnIdeologySwitch = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], -1

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvPlayerCulture@@QAEXPAVCvPlayer@@@Z ENDP		; CvPlayerCulture::Init
_TEXT	ENDS
PUBLIC	?HasAvailableGreatWorkSlot@CvPlayerCulture@@QAE_NW4GreatWorkSlotType@@@Z ; CvPlayerCulture::HasAvailableGreatWorkSlot
EXTRN	?HasAvailableGreatWorkSlot@CvCityBuildings@@QBE_NW4GreatWorkSlotType@@@Z:PROC ; CvCityBuildings::HasAvailableGreatWorkSlot
; Function compile flags: /Odtp
;	COMDAT ?HasAvailableGreatWorkSlot@CvPlayerCulture@@QAE_NW4GreatWorkSlotType@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pCity$222957 = -8					; size = 4
_iLoop$ = -4						; size = 4
_eGreatWorkSlot$ = 8					; size = 4
?HasAvailableGreatWorkSlot@CvPlayerCulture@@QAE_NW4GreatWorkSlotType@@@Z PROC ; CvPlayerCulture::HasAvailableGreatWorkSlot, COMDAT
; _this$ = ecx

; 798  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 799  : 	int iLoop;
; 800  : 	for (CvCity* pCity = m_pPlayer->firstCity(&iLoop); pCity != NULL; pCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$222957[ebp], eax
	jmp	SHORT $LN4@HasAvailab
$LN3@HasAvailab:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$222957[ebp], eax
$LN4@HasAvailab:
	cmp	DWORD PTR _pCity$222957[ebp], 0
	je	SHORT $LN2@HasAvailab

; 801  : 	{
; 802  : 		if (pCity->GetCityBuildings()->HasAvailableGreatWorkSlot(eGreatWorkSlot))

	mov	ecx, DWORD PTR _eGreatWorkSlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$222957[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?HasAvailableGreatWorkSlot@CvCityBuildings@@QBE_NW4GreatWorkSlotType@@@Z ; CvCityBuildings::HasAvailableGreatWorkSlot
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@HasAvailab

; 803  : 		{
; 804  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@HasAvailab
$LN1@HasAvailab:

; 805  : 		}
; 806  : 	}

	jmp	SHORT $LN3@HasAvailab
$LN2@HasAvailab:

; 807  : 	return false;

	xor	al, al
$LN5@HasAvailab:

; 808  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasAvailableGreatWorkSlot@CvPlayerCulture@@QAE_NW4GreatWorkSlotType@@@Z ENDP ; CvPlayerCulture::HasAvailableGreatWorkSlot
_TEXT	ENDS
PUBLIC	?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
EXTRN	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z:PROC ; CvCityBuildings::GetNumAvailableGreatWorkSlots
; Function compile flags: /Odtp
;	COMDAT ?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_pCity$222968 = -12					; size = 4
_iCount$ = -8						; size = 4
_iLoop$ = -4						; size = 4
_eGreatWorkSlot$ = 8					; size = 4
?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z PROC ; CvPlayerCulture::GetNumAvailableGreatWorkSlots, COMDAT
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 819  : 	int iLoop;
; 820  : 	int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 821  : #endif
; 822  : 
; 823  : 	for (CvCity* pCity = m_pPlayer->firstCity(&iLoop); pCity != NULL; pCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$222968[ebp], eax
	jmp	SHORT $LN3@GetNumAvai
$LN2@GetNumAvai:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$222968[ebp], eax
$LN3@GetNumAvai:
	cmp	DWORD PTR _pCity$222968[ebp], 0
	je	SHORT $LN1@GetNumAvai

; 824  : 	{
; 825  : 		iCount += pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots(eGreatWorkSlot);

	mov	ecx, DWORD PTR _eGreatWorkSlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$222968[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumAvailableGreatWorkSlots
	add	eax, DWORD PTR _iCount$[ebp]
	mov	DWORD PTR _iCount$[ebp], eax

; 826  : 	}

	jmp	SHORT $LN2@GetNumAvai
$LN1@GetNumAvai:

; 827  : 	return iCount;

	mov	eax, DWORD PTR _iCount$[ebp]

; 828  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ENDP ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
_TEXT	ENDS
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
PUBLIC	?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot
EXTRN	?GetNextAvailableGreatWorkSlot@CvCityBuildings@@QBE_NW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z:PROC ; CvCityBuildings::GetNextAvailableGreatWorkSlot
; Function compile flags: /Odtp
;	COMDAT ?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z
_TEXT	SEGMENT
_this$ = -120						; size = 4
$T233110 = -36						; size = 4
$T233101 = -32						; size = 4
_iDistance$222989 = -28					; size = 4
_pCity$222985 = -24					; size = 4
_eBuildingClassReturned$ = -20				; size = 4
_iBestDistance$ = -16					; size = 4
_iSlotReturned$ = -12					; size = 4
_pBestCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_eGreatWorkSlot$ = 16					; size = 4
_eBuildingClass$ = 20					; size = 4
_iSlot$ = 24						; size = 4
?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z PROC ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot, COMDAT
; _this$ = ecx

; 836  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 	int iLoop;
; 838  : 	int iBestDistance = MAX_INT;

	mov	DWORD PTR _iBestDistance$[ebp], 2147483647 ; 7fffffffH

; 839  : 	CvCity *pBestCity = NULL;

	mov	DWORD PTR _pBestCity$[ebp], 0

; 840  : 	BuildingClassTypes eBuildingClassReturned = NO_BUILDINGCLASS; // Passed by reference below

	mov	DWORD PTR _eBuildingClassReturned$[ebp], -1

; 841  : #ifdef AUI_WARNING_FIXES
; 842  : 	uint iSlotReturned = MAX_UNSIGNED_INT; // Passed by reference below
; 843  : #else
; 844  : 	int iSlotReturned = -1; // Passed by reference below

	mov	DWORD PTR _iSlotReturned$[ebp], -1

; 845  : #endif
; 846  : 
; 847  : 	for (CvCity* pCity = m_pPlayer->firstCity(&iLoop); pCity != NULL; pCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$222985[ebp], eax
	jmp	SHORT $LN5@GetClosest
$LN4@GetClosest:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$222985[ebp], eax
$LN5@GetClosest:
	cmp	DWORD PTR _pCity$222985[ebp], 0
	je	SHORT $LN3@GetClosest

; 848  : 	{
; 849  : 		int iDistance = plotDistance (iX, iY, pCity->getX(), pCity->getY());

	mov	ecx, DWORD PTR _pCity$222985[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR $T233101[ebp], edx
	mov	eax, DWORD PTR _pCity$222985[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR $T233110[ebp], ecx
	mov	edx, DWORD PTR $T233101[ebp]
	push	edx
	mov	eax, DWORD PTR $T233110[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iDistance$222989[ebp], eax

; 850  : 
; 851  : 		if (iDistance < iBestDistance)

	mov	eax, DWORD PTR _iDistance$222989[ebp]
	cmp	eax, DWORD PTR _iBestDistance$[ebp]
	jge	SHORT $LN2@GetClosest

; 852  : 		{
; 853  : 			if (pCity->GetCityBuildings()->GetNextAvailableGreatWorkSlot(eGreatWorkSlot, &eBuildingClassReturned, &iSlotReturned))

	lea	ecx, DWORD PTR _iSlotReturned$[ebp]
	push	ecx
	lea	edx, DWORD PTR _eBuildingClassReturned$[ebp]
	push	edx
	mov	eax, DWORD PTR _eGreatWorkSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$222985[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNextAvailableGreatWorkSlot@CvCityBuildings@@QBE_NW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ; CvCityBuildings::GetNextAvailableGreatWorkSlot
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetClosest

; 854  : 			{
; 855  : 				iBestDistance = iDistance;

	mov	edx, DWORD PTR _iDistance$222989[ebp]
	mov	DWORD PTR _iBestDistance$[ebp], edx

; 856  : 				pBestCity = pCity;

	mov	eax, DWORD PTR _pCity$222985[ebp]
	mov	DWORD PTR _pBestCity$[ebp], eax

; 857  : 				*eBuildingClass = eBuildingClassReturned;

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	mov	edx, DWORD PTR _eBuildingClassReturned$[ebp]
	mov	DWORD PTR [ecx], edx

; 858  : 				*iSlot = iSlotReturned;

	mov	eax, DWORD PTR _iSlot$[ebp]
	mov	ecx, DWORD PTR _iSlotReturned$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@GetClosest:

; 859  : 			}
; 860  : 		}
; 861  : 	}

	jmp	$LN4@GetClosest
$LN3@GetClosest:

; 862  : 
; 863  : 	return pBestCity;

	mov	eax, DWORD PTR _pBestCity$[ebp]

; 864  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ENDP ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot
_TEXT	ENDS
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
tv157 = -92						; size = 4
tv138 = -88						; size = 4
tv135 = -84						; size = 4
$T233279 = -80						; size = 4
$T233252 = -60						; size = 4
_iDY$ = -24						; size = 4
_iDX$ = -20						; size = 4
_iWrappedDX$ = -16					; size = 4
_iHX1$ = -12						; size = 4
_iHX2$ = -8						; size = 4
_iWrappedDY$ = -4					; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[ebp]
	sub	eax, DWORD PTR _iX1$[ebp]
	push	eax
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDX$[ebp], eax

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	ecx, DWORD PTR _iY2$[ebp]
	sub	ecx, DWORD PTR _iY1$[ebp]
	push	ecx
	call	?dyWrap@@YAHH@Z				; dyWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDY$[ebp], eax

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, DWORD PTR _iWrappedDY$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[ebp], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	cmp	DWORD PTR _iY1$[ebp], 0
	jl	SHORT $LN35@plotDistan
	mov	edx, DWORD PTR _iY1$[ebp]
	sar	edx, 1
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN33@plotDistan
$LN35@plotDistan:
	mov	eax, DWORD PTR _iY1$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv135[ebp], eax
$LN33@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	sub	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _iHX1$[ebp], eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	mov	ecx, DWORD PTR _iY1$[ebp]
	add	ecx, DWORD PTR _iWrappedDY$[ebp]
	mov	DWORD PTR $T233252[ebp], ecx
	js	SHORT $LN39@plotDistan
	mov	edx, DWORD PTR $T233252[ebp]
	sar	edx, 1
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN37@plotDistan
$LN39@plotDistan:
	mov	eax, DWORD PTR $T233252[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv138[ebp], eax
$LN37@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	add	eax, DWORD PTR _iWrappedDX$[ebp]
	sub	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _iHX2$[ebp], eax

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	ecx, DWORD PTR _iHX2$[ebp]
	sub	ecx, DWORD PTR _iHX1$[ebp]
	push	ecx
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDX$[ebp], eax

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	mov	edx, DWORD PTR _iHX2$[ebp]
	sub	edx, DWORD PTR _iHX1$[ebp]
	xor	eax, eax
	test	edx, edx
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iWrappedDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	jmp	SHORT $LN3@plotDistan

; 163  : 	}
; 164  : 	else

	jmp	SHORT $LN3@plotDistan
$LN2@plotDistan:

; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	mov	edx, DWORD PTR _iDX$[ebp]
	cmp	edx, DWORD PTR _iDY$[ebp]
	jge	SHORT $LN57@plotDistan
	lea	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN58@plotDistan
$LN57@plotDistan:
	lea	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN58@plotDistan:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T233279[ebp], edx
	mov	eax, DWORD PTR $T233279[ebp]
	mov	eax, DWORD PTR [eax]
$LN3@plotDistan:

; 170  : #endif
; 171  : 	}
; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
$T233302 = -16						; size = 4
$T233294 = -12						; size = 4
$T233290 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T233290[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T233294[ebp], ecx
	movzx	edx, BYTE PTR $T233290[ebp]
	test	edx, edx
	je	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR $T233294[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDX$[ebp], eax
	jle	SHORT $LN11@dxWrap
	mov	ecx, DWORD PTR _iDX$[ebp]
	sub	ecx, DWORD PTR $T233294[ebp]
	mov	DWORD PTR $T233302[ebp], ecx
	jmp	SHORT $LN13@dxWrap
	jmp	SHORT $LN12@dxWrap
$LN11@dxWrap:
	mov	edx, DWORD PTR $T233294[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDX$[ebp], edx
	jge	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR $T233294[ebp]
	mov	DWORD PTR $T233302[ebp], eax
	jmp	SHORT $LN13@dxWrap
$LN12@dxWrap:
	mov	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR $T233302[ebp], ecx
$LN13@dxWrap:
	mov	eax, DWORD PTR $T233302[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
$T233323 = -16						; size = 4
$T233315 = -12						; size = 4
$T233311 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T233311[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T233315[ebp], ecx
	movzx	edx, BYTE PTR $T233311[ebp]
	test	edx, edx
	je	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR $T233315[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDY$[ebp], eax
	jle	SHORT $LN11@dyWrap
	mov	ecx, DWORD PTR _iDY$[ebp]
	sub	ecx, DWORD PTR $T233315[ebp]
	mov	DWORD PTR $T233323[ebp], ecx
	jmp	SHORT $LN13@dyWrap
	jmp	SHORT $LN12@dyWrap
$LN11@dyWrap:
	mov	edx, DWORD PTR $T233315[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDY$[ebp], edx
	jge	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR _iDY$[ebp]
	add	eax, DWORD PTR $T233315[ebp]
	mov	DWORD PTR $T233323[ebp], eax
	jmp	SHORT $LN13@dyWrap
$LN12@dyWrap:
	mov	ecx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR $T233323[ebp], ecx
$LN13@dyWrap:
	mov	eax, DWORD PTR $T233323[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?GetNumGreatWorks@CvCityCulture@@QBEHXZ		; CvCityCulture::GetNumGreatWorks
PUBLIC	?GetNumGreatWorks@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetNumGreatWorks
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
;	COMDAT ?GetNumGreatWorks@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iRtnValue$ = -12					; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
?GetNumGreatWorks@CvPlayerCulture@@QBEHXZ PROC		; CvPlayerCulture::GetNumGreatWorks, COMDAT
; _this$ = ecx

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 873  : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 874  : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 875  : #ifdef AUI_WARNING_FIXES
; 876  : 	uint iRtnValue = 0;
; 877  : #else
; 878  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 879  : #endif
; 880  : 
; 881  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN3@GetNumGrea
$LN2@GetNumGrea:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN3@GetNumGrea:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN1@GetNumGrea

; 882  : 	{
; 883  : 		iRtnValue += pLoopCity->GetCityCulture()->GetNumGreatWorks();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 884  : 	}

	jmp	SHORT $LN2@GetNumGrea
$LN1@GetNumGrea:

; 885  : 
; 886  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 887  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumGreatWorks@CvPlayerCulture@@QBEHXZ ENDP		; CvPlayerCulture::GetNumGreatWorks
_TEXT	ENDS
PUBLIC	?GetNumGreatWorkSlots@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorkSlots
PUBLIC	?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetNumGreatWorkSlots
; Function compile flags: /Odtp
;	COMDAT ?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iRtnValue$ = -12					; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetNumGreatWorkSlots, COMDAT
; _this$ = ecx

; 895  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 896  : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 897  : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 898  : #ifdef AUI_WARNING_FIXES
; 899  : 	uint iRtnValue = 0;
; 900  : #else
; 901  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 902  : #endif
; 903  : 
; 904  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN3@GetNumGrea@2
$LN2@GetNumGrea@2:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN3@GetNumGrea@2:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN1@GetNumGrea@2

; 905  : 	{
; 906  : 		iRtnValue += pLoopCity->GetCityCulture()->GetNumGreatWorkSlots();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumGreatWorkSlots@CvCityCulture@@QBEHXZ ; CvCityCulture::GetNumGreatWorkSlots
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 907  : 	}

	jmp	SHORT $LN2@GetNumGrea@2
$LN1@GetNumGrea@2:

; 908  : 
; 909  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 910  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetNumGreatWorkSlots
_TEXT	ENDS
PUBLIC	?GetNumAvailableGreatWorkSlots@CvCityCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvCityCulture::GetNumAvailableGreatWorkSlots
PUBLIC	?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumGreatWorkSlots
; Function compile flags: /Odtp
;	COMDAT ?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iRtnValue$ = -12					; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
_eSlotType$ = 8						; size = 4
?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z PROC ; CvPlayerCulture::GetNumGreatWorkSlots, COMDAT
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 920  : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 921  : #ifdef AUI_WARNING_FIXES
; 922  : 	uint iRtnValue = 0;
; 923  : #else
; 924  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 925  : #endif
; 926  : 
; 927  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN3@GetNumGrea@3
$LN2@GetNumGrea@3:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN3@GetNumGrea@3:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN1@GetNumGrea@3

; 928  : 	{
; 929  : 		iRtnValue += pLoopCity->GetCityCulture()->GetNumAvailableGreatWorkSlots(eSlotType);

	mov	ecx, DWORD PTR _eSlotType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvCityCulture::GetNumAvailableGreatWorkSlots
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 930  : 	}

	jmp	SHORT $LN2@GetNumGrea@3
$LN1@GetNumGrea@3:

; 931  : 
; 932  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 933  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ENDP ; CvPlayerCulture::GetNumGreatWorkSlots
_TEXT	ENDS
PUBLIC	?ControlsGreatWork@CvPlayerCulture@@QAE_NH@Z	; CvPlayerCulture::ControlsGreatWork
; Function compile flags: /Odtp
;	COMDAT ?ControlsGreatWork@CvPlayerCulture@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_iGreatWorkIndex$223046 = -36				; size = 4
_iI$223042 = -32					; size = 4
_iNumSlots$223041 = -28					; size = 4
_pkBuilding$223038 = -24				; size = 4
_eBuilding$223034 = -20					; size = 4
_playerCivilizationInfo$223033 = -16			; size = 4
_iBuildingClassLoop$223029 = -12			; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?ControlsGreatWork@CvPlayerCulture@@QAE_NH@Z PROC	; CvPlayerCulture::ControlsGreatWork, COMDAT
; _this$ = ecx

; 937  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 938  : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 939  : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 940  : 
; 941  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN13@ControlsGr
$LN12@ControlsGr:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN13@ControlsGr:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN11@ControlsGr

; 942  : 	{
; 943  : #ifdef AUI_WARNING_FIXES
; 944  : 		for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 945  : #else
; 946  : 		for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$223029[ebp], 0
	jmp	SHORT $LN10@ControlsGr
$LN9@ControlsGr:
	mov	ecx, DWORD PTR _iBuildingClassLoop$223029[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$223029[ebp], ecx
$LN10@ControlsGr:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$223029[ebp], eax
	jge	$LN8@ControlsGr

; 947  : #endif
; 948  : 		{
; 949  : 			CvCivilizationInfo& playerCivilizationInfo = m_pPlayer->getCivilizationInfo();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$223033[ebp], eax

; 950  : 			BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$223029[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$223033[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$223034[ebp], eax

; 951  : 			if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$223034[ebp], -1
	je	SHORT $LN7@ControlsGr

; 952  : 			{
; 953  : 				CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$223034[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$223038[ebp], eax

; 954  : 				if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$223038[ebp], 0
	je	SHORT $LN7@ControlsGr

; 955  : 				{
; 956  : 					if (pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$223034[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN7@ControlsGr

; 957  : 					{
; 958  : 						int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$223038[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$223041[ebp], eax

; 959  : 						for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$223042[ebp], 0
	jmp	SHORT $LN4@ControlsGr
$LN3@ControlsGr:
	mov	eax, DWORD PTR _iI$223042[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$223042[ebp], eax
$LN4@ControlsGr:
	mov	ecx, DWORD PTR _iI$223042[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$223041[ebp]
	jge	SHORT $LN7@ControlsGr

; 960  : 						{
; 961  : 							int iGreatWorkIndex = pLoopCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$223042[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$223029[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$223046[ebp], eax

; 962  : 							if (iGreatWorkIndex == iIndex)

	mov	ecx, DWORD PTR _iGreatWorkIndex$223046[ebp]
	cmp	ecx, DWORD PTR _iIndex$[ebp]
	jne	SHORT $LN1@ControlsGr

; 963  : 							{
; 964  : 								return true;

	mov	al, 1
	jmp	SHORT $LN14@ControlsGr
$LN1@ControlsGr:

; 965  : 							}
; 966  : 						}

	jmp	SHORT $LN3@ControlsGr
$LN7@ControlsGr:

; 967  : 					}
; 968  : 				}
; 969  : 			}
; 970  : 		}

	jmp	$LN9@ControlsGr
$LN8@ControlsGr:

; 971  : 	}

	jmp	$LN12@ControlsGr
$LN11@ControlsGr:

; 972  : 
; 973  : 	return false;	

	xor	al, al
$LN14@ControlsGr:

; 974  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ControlsGreatWork@CvPlayerCulture@@QAE_NH@Z ENDP	; CvPlayerCulture::ControlsGreatWork
_TEXT	ENDS
PUBLIC	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T233342 = -40						; size = 4
_iGreatWorkIndex$223078 = -36				; size = 4
_iI$223074 = -32					; size = 4
_iNumSlots$223073 = -28					; size = 4
_pkBuilding$223070 = -24				; size = 4
_eBuilding$223066 = -20					; size = 4
_playerCivilizationInfo$223065 = -16			; size = 4
_iBuildingClassLoop$223061 = -12			; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
_iSearchIndex$ = 8					; size = 4
_iReturnCityID$ = 12					; size = 4
_eReturnBuilding$ = 16					; size = 4
_iReturnSlot$ = 20					; size = 4
?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z PROC ; CvPlayerCulture::GetGreatWorkLocation, COMDAT
; _this$ = ecx

; 981  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 982  : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 983  : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 984  : 
; 985  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN13@GetGreatWo@8
$LN12@GetGreatWo@8:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN13@GetGreatWo@8:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN11@GetGreatWo@8

; 986  : 	{
; 987  : #ifdef AUI_WARNING_FIXES
; 988  : 		for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 989  : #else
; 990  : 		for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$223061[ebp], 0
	jmp	SHORT $LN10@GetGreatWo@8
$LN9@GetGreatWo@8:
	mov	ecx, DWORD PTR _iBuildingClassLoop$223061[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$223061[ebp], ecx
$LN10@GetGreatWo@8:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$223061[ebp], eax
	jge	$LN8@GetGreatWo@8

; 991  : #endif
; 992  : 		{
; 993  : 			CvCivilizationInfo& playerCivilizationInfo = m_pPlayer->getCivilizationInfo();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$223065[ebp], eax

; 994  : 			BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$223061[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$223065[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$223066[ebp], eax

; 995  : 			if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$223066[ebp], -1
	je	$LN7@GetGreatWo@8

; 996  : 			{
; 997  : 				CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$223066[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$223070[ebp], eax

; 998  : 				if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$223070[ebp], 0
	je	$LN7@GetGreatWo@8

; 999  : 				{
; 1000 : 					if (pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$223066[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN7@GetGreatWo@8

; 1001 : 					{
; 1002 : #ifdef AUI_WARNING_FIXES
; 1003 : 						for (uint iI = 0; iI < pkBuilding->GetGreatWorkCount(); iI++)
; 1004 : #else
; 1005 : 						int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$223070[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$223073[ebp], eax

; 1006 : 						for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$223074[ebp], 0
	jmp	SHORT $LN4@GetGreatWo@8
$LN3@GetGreatWo@8:
	mov	eax, DWORD PTR _iI$223074[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$223074[ebp], eax
$LN4@GetGreatWo@8:
	mov	ecx, DWORD PTR _iI$223074[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$223073[ebp]
	jge	SHORT $LN7@GetGreatWo@8

; 1007 : #endif
; 1008 : 						{
; 1009 : 							int iGreatWorkIndex = pLoopCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$223074[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$223061[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$223078[ebp], eax

; 1010 : 							if (iGreatWorkIndex == iSearchIndex)

	mov	ecx, DWORD PTR _iGreatWorkIndex$223078[ebp]
	cmp	ecx, DWORD PTR _iSearchIndex$[ebp]
	jne	SHORT $LN1@GetGreatWo@8

; 1011 : 							{
; 1012 : 								iReturnCityID = pLoopCity->GetID();

	mov	edx, DWORD PTR _pLoopCity$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR $T233342[ebp], eax
	mov	ecx, DWORD PTR _iReturnCityID$[ebp]
	mov	edx, DWORD PTR $T233342[ebp]
	mov	DWORD PTR [ecx], edx

; 1013 : 								eReturnBuilding = eBuilding;

	mov	eax, DWORD PTR _eReturnBuilding$[ebp]
	mov	ecx, DWORD PTR _eBuilding$223066[ebp]
	mov	DWORD PTR [eax], ecx

; 1014 : 								iReturnSlot = iI;

	mov	edx, DWORD PTR _iReturnSlot$[ebp]
	mov	eax, DWORD PTR _iI$223074[ebp]
	mov	DWORD PTR [edx], eax

; 1015 : 								return true;

	mov	al, 1
	jmp	SHORT $LN14@GetGreatWo@8
$LN1@GetGreatWo@8:

; 1016 : 							}
; 1017 : 						}

	jmp	SHORT $LN3@GetGreatWo@8
$LN7@GetGreatWo@8:

; 1018 : 					}
; 1019 : 				}
; 1020 : 			}
; 1021 : 		}

	jmp	$LN9@GetGreatWo@8
$LN8@GetGreatWo@8:

; 1022 : 	}

	jmp	$LN12@GetGreatWo@8
$LN11@GetGreatWo@8:

; 1023 : 
; 1024 : 	return false;	

	xor	al, al
$LN14@GetGreatWo@8:

; 1025 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ENDP ; CvPlayerCulture::GetGreatWorkLocation
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
PUBLIC	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
PUBLIC	??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
PUBLIC	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
PUBLIC	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
PUBLIC	?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy
PUBLIC	?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z ; CvPlayerCulture::MoveWorks
PUBLIC	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
PUBLIC	?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back
PUBLIC	??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
PUBLIC	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
PUBLIC	?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ	; CvPlayerCulture::DoSwapGreatWorks
EXTRN	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ:PROC ; CvGame::GetGameCulture
EXTRN	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ:PROC ; CvTypes::getGREAT_WORK_SLOT_MUSIC
EXTRN	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ:PROC ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
EXTRN	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ:PROC ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
EXTRN	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ:PROC ; CvBuildingEntry::GetGreatWorkSlotType
EXTRN	?getDamage@CvCity@@QBEHXZ:PROC			; CvCity::getDamage
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ DD 019930522H
	DD	010H
	DD	FLAT:__unwindtable$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$16
	DD	05H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$18
	DD	04H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$20
	DD	03H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$22
	DD	02H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$24
	DD	01H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$26
	DD	00H
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$28
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$30
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -576						; size = 4
$T233535 = -388						; size = 4
$T233531 = -384						; size = 4
$T233527 = -380						; size = 4
$T233523 = -376						; size = 4
$T233519 = -372						; size = 4
$T233417 = -308						; size = 4
_eGWClass$223461 = -240					; size = 4
_work$223459 = -236					; size = 24
_eGreatWorkType$223460 = -212				; size = 4
_iGreatWorkIndex$223456 = -208				; size = 4
_iI$223452 = -204					; size = 4
_iNumSlots$223451 = -200				; size = 4
_building$223444 = -196					; size = 12
_eSlotType$223445 = -184				; size = 4
_pkBuilding$223441 = -180				; size = 4
_eBuilding$223437 = -176				; size = 4
_playerCivilizationInfo$223436 = -172			; size = 4
_iBuildingClassLoop$223432 = -168			; size = 4
_eArtClass$ = -164					; size = 4
_aGreatWorksArt$ = -160					; size = 16
_aGreatWorksArtifacts$ = -144				; size = 16
_aNull$ = -128						; size = 16
_eWritingClass$ = -112					; size = 4
_eArtifactsClass$ = -108				; size = 4
_eMusicClass$ = -104					; size = 4
_aGreatWorksWriting$ = -100				; size = 16
_aGreatWorkBuildingsMusic$ = -84			; size = 16
_aGreatWorksMusic$ = -68				; size = 16
_pLoopCity$ = -52					; size = 4
_aGreatWorkBuildingsWriting$ = -48			; size = 16
_aGreatWorkBuildingsArt$ = -32				; size = 16
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ PROC		; CvPlayerCulture::DoSwapGreatWorks, COMDAT
; _this$ = ecx

; 1029 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 564				; 00000234H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 	GreatWorkClass eWritingClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_LITERATURE");

	push	0
	push	OFFSET ??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eWritingClass$[ebp], eax

; 1031 : 	GreatWorkClass eArtClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ART");

	push	0
	push	OFFSET ??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtClass$[ebp], eax

; 1032 : 	GreatWorkClass eArtifactsClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ARTIFACT");

	push	0
	push	OFFSET ??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtifactsClass$[ebp], eax

; 1033 : 	GreatWorkClass eMusicClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_MUSIC");

	push	0
	push	OFFSET ??_C@_0BB@FLEDFIEC@GREAT_WORK_MUSIC?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eMusicClass$[ebp], eax

; 1034 : 
; 1035 : 	vector<CvGreatWorkInMyEmpire> aGreatWorksWriting;

	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1036 : 	vector<CvGreatWorkInMyEmpire> aGreatWorksArt;

	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1037 : 	vector<CvGreatWorkInMyEmpire> aGreatWorksArtifacts;

	lea	ecx, DWORD PTR _aGreatWorksArtifacts$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1038 : 	vector<CvGreatWorkInMyEmpire> aGreatWorksMusic;

	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1039 : 	vector<CvGreatWorkInMyEmpire> aNull;

	lea	ecx, DWORD PTR _aNull$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1040 : 
; 1041 : 	vector<CvGreatWorkBuildingInMyEmpire> aGreatWorkBuildingsWriting;

	lea	ecx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	call	??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 1042 : 	vector<CvGreatWorkBuildingInMyEmpire> aGreatWorkBuildingsArt;

	lea	ecx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	call	??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 1043 : 	vector<CvGreatWorkBuildingInMyEmpire> aGreatWorkBuildingsMusic;

	lea	ecx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	call	??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 1044 : 
; 1045 : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 1046 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 1047 : 
; 1048 : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN25@DoSwapGrea
$LN24@DoSwapGrea:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN25@DoSwapGrea:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN23@DoSwapGrea

; 1049 : 	{
; 1050 : #ifdef AUI_WARNING_FIXES
; 1051 : 		for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 1052 : #else
; 1053 : 		for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$223432[ebp], 0
	jmp	SHORT $LN22@DoSwapGrea
$LN21@DoSwapGrea:
	mov	ecx, DWORD PTR _iBuildingClassLoop$223432[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$223432[ebp], ecx
$LN22@DoSwapGrea:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$223432[ebp], eax
	jge	$LN20@DoSwapGrea

; 1054 : #endif
; 1055 : 		{
; 1056 : 			CvCivilizationInfo& playerCivilizationInfo = m_pPlayer->getCivilizationInfo();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$223436[ebp], eax

; 1057 : 			BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$223432[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$223436[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$223437[ebp], eax

; 1058 : 			if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$223437[ebp], -1
	je	$LN19@DoSwapGrea

; 1059 : 			{
; 1060 : 				CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$223437[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$223441[ebp], eax

; 1061 : 				if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$223441[ebp], 0
	je	$LN19@DoSwapGrea

; 1062 : 				{
; 1063 : 					if (pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$223437[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN19@DoSwapGrea

; 1064 : 					{
; 1065 : 						CvGreatWorkBuildingInMyEmpire building;

	lea	ecx, DWORD PTR _building$223444[ebp]
	call	??0CvGreatWorkBuildingInMyEmpire@@QAE@XZ ; CvGreatWorkBuildingInMyEmpire::CvGreatWorkBuildingInMyEmpire

; 1066 : 						building.m_eBuilding = eBuilding;

	mov	eax, DWORD PTR _eBuilding$223437[ebp]
	mov	DWORD PTR _building$223444[ebp+4], eax

; 1067 : 						building.m_iCityID = pLoopCity->GetID();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR $T233417[ebp], edx
	mov	eax, DWORD PTR $T233417[ebp]
	mov	DWORD PTR _building$223444[ebp], eax

; 1068 : 						building.m_bEndangered = (pLoopCity->getDamage() > 0);

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getDamage@CvCity@@QBEHXZ		; CvCity::getDamage
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	BYTE PTR _building$223444[ebp+9], cl

; 1069 : 
; 1070 : 						GreatWorkSlotType eSlotType = pkBuilding->GetGreatWorkSlotType();

	mov	ecx, DWORD PTR _pkBuilding$223441[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	mov	DWORD PTR _eSlotType$223445[ebp], eax

; 1071 : 						if (eSlotType == CvTypes::getGREAT_WORK_SLOT_LITERATURE())

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	cmp	DWORD PTR _eSlotType$223445[ebp], eax
	jne	SHORT $LN16@DoSwapGrea

; 1072 : 						{
; 1073 : 							aGreatWorkBuildingsWriting.push_back(building);

	lea	edx, DWORD PTR _building$223444[ebp]
	push	edx
	lea	ecx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	call	?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back
	jmp	SHORT $LN15@DoSwapGrea
$LN16@DoSwapGrea:

; 1074 : 						}
; 1075 : 						else if (eSlotType == CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT())

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	cmp	DWORD PTR _eSlotType$223445[ebp], eax
	jne	SHORT $LN14@DoSwapGrea

; 1076 : 						{
; 1077 : 							aGreatWorkBuildingsArt.push_back(building);

	lea	eax, DWORD PTR _building$223444[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	call	?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back
	jmp	SHORT $LN15@DoSwapGrea
$LN14@DoSwapGrea:

; 1078 : 						}
; 1079 : 						else if (eSlotType == CvTypes::getGREAT_WORK_SLOT_MUSIC())

	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	cmp	DWORD PTR _eSlotType$223445[ebp], eax
	jne	SHORT $LN15@DoSwapGrea

; 1080 : 						{
; 1081 : 							aGreatWorkBuildingsMusic.push_back(building);

	lea	ecx, DWORD PTR _building$223444[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	call	?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back
$LN15@DoSwapGrea:

; 1082 : 						}
; 1083 : 
; 1084 : 						int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$223441[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$223451[ebp], eax

; 1085 : 						for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$223452[ebp], 0
	jmp	SHORT $LN11@DoSwapGrea
$LN10@DoSwapGrea:
	mov	edx, DWORD PTR _iI$223452[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$223452[ebp], edx
$LN11@DoSwapGrea:
	mov	eax, DWORD PTR _iI$223452[ebp]
	cmp	eax, DWORD PTR _iNumSlots$223451[ebp]
	jge	$LN19@DoSwapGrea

; 1086 : 						{
; 1087 : 							int iGreatWorkIndex = pLoopCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	ecx, DWORD PTR _iI$223452[ebp]
	push	ecx
	mov	edx, DWORD PTR _iBuildingClassLoop$223432[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$223456[ebp], eax

; 1088 : 							if (iGreatWorkIndex != -1)

	cmp	DWORD PTR _iGreatWorkIndex$223456[ebp], -1
	je	$LN8@DoSwapGrea

; 1089 : 							{
; 1090 : 								CvGreatWorkInMyEmpire work;

	lea	ecx, DWORD PTR _work$223459[ebp]
	call	??0CvGreatWorkInMyEmpire@@QAE@XZ	; CvGreatWorkInMyEmpire::CvGreatWorkInMyEmpire

; 1091 : 								work.m_eBuilding = eBuilding;

	mov	eax, DWORD PTR _eBuilding$223437[ebp]
	mov	DWORD PTR _work$223459[ebp+8], eax

; 1092 : 								work.m_iCityID = pLoopCity->GetID();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR $T233519[ebp], edx
	mov	eax, DWORD PTR $T233519[ebp]
	mov	DWORD PTR _work$223459[ebp+4], eax

; 1093 : 								work.m_iGreatWorkIndex = iGreatWorkIndex;

	mov	ecx, DWORD PTR _iGreatWorkIndex$223456[ebp]
	mov	DWORD PTR _work$223459[ebp], ecx

; 1094 : 								work.m_iSlot = iI;

	mov	edx, DWORD PTR _iI$223452[ebp]
	mov	DWORD PTR _work$223459[ebp+12], edx

; 1095 : 								work.m_ePlayer = GC.getGame().GetGameCulture()->GetGreatWorkCreator(iGreatWorkIndex);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233523[ebp], eax
	mov	ecx, DWORD PTR _iGreatWorkIndex$223456[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233523[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	ecx, eax
	call	?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkCreator
	mov	DWORD PTR _work$223459[ebp+16], eax

; 1096 : 								work.m_eEra = GC.getGame().GetGameCulture()->m_CurrentGreatWorks[iGreatWorkIndex].m_eEra;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233527[ebp], edx
	mov	ecx, DWORD PTR $T233527[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR $T233531[ebp], eax
	mov	eax, DWORD PTR _iGreatWorkIndex$223456[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR $T233531[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+40]
	mov	DWORD PTR _work$223459[ebp+20], eax

; 1097 : 
; 1098 : 								GreatWorkType eGreatWorkType = GC.getGame().GetGameCulture()->GetGreatWorkType(iGreatWorkIndex);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233535[ebp], ecx
	mov	edx, DWORD PTR _iGreatWorkIndex$223456[ebp]
	push	edx
	mov	ecx, DWORD PTR $T233535[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	ecx, eax
	call	?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z ; CvGameCulture::GetGreatWorkType
	mov	DWORD PTR _eGreatWorkType$223460[ebp], eax

; 1099 : 								GreatWorkClass eGWClass = CultureHelpers::GetGreatWorkClass(eGreatWorkType);

	mov	eax, DWORD PTR _eGreatWorkType$223460[ebp]
	push	eax
	call	?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkClass
	add	esp, 4
	mov	DWORD PTR _eGWClass$223461[ebp], eax

; 1100 : 								if (eGWClass == eWritingClass)

	mov	ecx, DWORD PTR _eGWClass$223461[ebp]
	cmp	ecx, DWORD PTR _eWritingClass$[ebp]
	jne	SHORT $LN7@DoSwapGrea

; 1101 : 								{
; 1102 : 									aGreatWorksWriting.push_back(work);

	lea	edx, DWORD PTR _work$223459[ebp]
	push	edx
	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
	jmp	SHORT $LN8@DoSwapGrea
$LN7@DoSwapGrea:

; 1103 : 								}
; 1104 : 								else if (eGWClass == eArtClass)

	mov	eax, DWORD PTR _eGWClass$223461[ebp]
	cmp	eax, DWORD PTR _eArtClass$[ebp]
	jne	SHORT $LN5@DoSwapGrea

; 1105 : 								{
; 1106 : 									aGreatWorksArt.push_back(work);

	lea	ecx, DWORD PTR _work$223459[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
	jmp	SHORT $LN8@DoSwapGrea
$LN5@DoSwapGrea:

; 1107 : 								}
; 1108 : 								else if (eGWClass == eArtifactsClass)

	mov	edx, DWORD PTR _eGWClass$223461[ebp]
	cmp	edx, DWORD PTR _eArtifactsClass$[ebp]
	jne	SHORT $LN3@DoSwapGrea

; 1109 : 								{
; 1110 : 									aGreatWorksArtifacts.push_back(work);

	lea	eax, DWORD PTR _work$223459[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorksArtifacts$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
	jmp	SHORT $LN8@DoSwapGrea
$LN3@DoSwapGrea:

; 1111 : 								}
; 1112 : 								else if (eGWClass == eMusicClass)

	mov	ecx, DWORD PTR _eGWClass$223461[ebp]
	cmp	ecx, DWORD PTR _eMusicClass$[ebp]
	jne	SHORT $LN8@DoSwapGrea

; 1113 : 								{
; 1114 : 									aGreatWorksMusic.push_back(work);

	lea	edx, DWORD PTR _work$223459[ebp]
	push	edx
	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN8@DoSwapGrea:

; 1115 : 								}
; 1116 : 							}
; 1117 : 						}

	jmp	$LN10@DoSwapGrea
$LN19@DoSwapGrea:

; 1118 : 					}
; 1119 : 				}
; 1120 : 			}
; 1121 : 		}

	jmp	$LN21@DoSwapGrea
$LN20@DoSwapGrea:

; 1122 : 	}

	jmp	$LN24@DoSwapGrea
$LN23@DoSwapGrea:

; 1123 : 
; 1124 : 	MoveWorks (CvTypes::getGREAT_WORK_SLOT_LITERATURE(), aGreatWorkBuildingsWriting, aGreatWorksWriting, aNull);

	lea	eax, DWORD PTR _aNull$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	push	edx
	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z ; CvPlayerCulture::MoveWorks

; 1125 : 	MoveWorks (CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT(), aGreatWorkBuildingsArt, aGreatWorksArt, aGreatWorksArtifacts);

	lea	eax, DWORD PTR _aGreatWorksArtifacts$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	push	edx
	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z ; CvPlayerCulture::MoveWorks

; 1126 : 	MoveWorks (CvTypes::getGREAT_WORK_SLOT_MUSIC(), aGreatWorkBuildingsMusic, aGreatWorksMusic, aNull);

	lea	eax, DWORD PTR _aNull$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	push	edx
	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z ; CvPlayerCulture::MoveWorks

; 1127 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _aNull$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _aGreatWorksArtifacts$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$0:
	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$1:
	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$2:
	lea	ecx, DWORD PTR _aGreatWorksArtifacts$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$3:
	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$4:
	lea	ecx, DWORD PTR _aNull$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$5:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	jmp	??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$6:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	jmp	??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$7:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	jmp	??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$16:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsMusic$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$18:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsArt$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$20:
	lea	ecx, DWORD PTR _aGreatWorkBuildingsWriting$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$22:
	lea	ecx, DWORD PTR _aNull$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$24:
	lea	ecx, DWORD PTR _aGreatWorksMusic$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$26:
	lea	ecx, DWORD PTR _aGreatWorksArtifacts$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$28:
	lea	ecx, DWORD PTR _aGreatWorksArt$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ$30:
	lea	ecx, DWORD PTR _aGreatWorksWriting$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoSwapGreatWorks@CvPlayerCulture@@QAEXXZ ENDP		; CvPlayerCulture::DoSwapGreatWorks
PUBLIC	?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z ; CvPlayerCulture::FillBuilding
PUBLIC	?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z ; CvPlayerCulture::ThemeBuilding
PUBLIC	??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
;	COMDAT ?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z
_TEXT	SEGMENT
_this$ = -172						; size = 4
$T234543 = -168						; size = 4
__Tmp$234533 = -164					; size = 4
$T234511 = -160						; size = 4
$T234457 = -156						; size = 4
__Tmp$234442 = -152					; size = 4
$T234425 = -148						; size = 4
$T234338 = -144						; size = 4
__Tmp$234323 = -140					; size = 4
$T234306 = -136						; size = 4
$T234237 = -132						; size = 4
__Tmp$234222 = -128					; size = 4
$T234205 = -124						; size = 4
$T234136 = -120						; size = 4
__Tmp$234121 = -116					; size = 4
$T234104 = -112						; size = 4
$T234086 = -108						; size = 4
$T234085 = -104						; size = 4
$T234063 = -100						; size = 4
$T234047 = -96						; size = 4
$T234037 = -92						; size = 4
$T234036 = -88						; size = 4
$T234035 = -84						; size = 4
$T234034 = -80						; size = 4
$T234033 = -76						; size = 4
$T234032 = -72						; size = 4
$T234031 = -68						; size = 4
$T234030 = -64						; size = 4
$T234029 = -60						; size = 4
$T234028 = -56						; size = 4
$T234027 = -52						; size = 4
$T234026 = -48						; size = 4
$T234025 = -44						; size = 4
$T234024 = -40						; size = 4
$T234023 = -36						; size = 4
$T234022 = -32						; size = 4
$T234021 = -28						; size = 4
$T234020 = -24						; size = 4
$T234019 = -20						; size = 4
$T234018 = -16						; size = 4
$T234017 = -12						; size = 4
$T234016 = -8						; size = 4
_itBuilding$ = -4					; size = 4
_eType$ = 8						; size = 4
_buildings$ = 12					; size = 4
_works1$ = 16						; size = 4
_works2$ = 20						; size = 4
?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z PROC ; CvPlayerCulture::MoveWorks, COMDAT
; _this$ = ecx

; 1155 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	mov	DWORD PTR _this$[ebp], ecx

; 1156 : 	std::sort (buildings.begin(), buildings.end(), SortThemingBonus);

	mov	eax, DWORD PTR _buildings$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234047[ebp], ecx
	mov	edx, DWORD PTR $T234047[ebp]
	mov	DWORD PTR $T234016[ebp], edx
	mov	eax, DWORD PTR _buildings$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234063[ebp], ecx
	mov	edx, DWORD PTR $T234063[ebp]
	mov	DWORD PTR $T234017[ebp], edx
	mov	eax, DWORD PTR $T234016[ebp]
	mov	DWORD PTR $T234086[ebp], eax
	mov	ecx, DWORD PTR $T234017[ebp]
	mov	DWORD PTR $T234085[ebp], ecx
	push	OFFSET ?SortThemingBonus@@YA_NABVCvGreatWorkBuildingInMyEmpire@@0@Z ; SortThemingBonus
	mov	eax, DWORD PTR $T234086[ebp]
	sub	eax, DWORD PTR $T234085[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR $T234086[ebp]
	push	edx
	mov	eax, DWORD PTR $T234085[ebp]
	push	eax
	call	??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 1157 : 
; 1158 : 	// First building that are not endangered
; 1159 : 	vector<CvGreatWorkBuildingInMyEmpire>::iterator itBuilding;

	mov	DWORD PTR _itBuilding$[ebp], 0

; 1160 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1161 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); ++itBuilding)
; 1162 : #else
; 1163 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); itBuilding++)

	mov	ecx, DWORD PTR _buildings$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234104[ebp], edx
	mov	eax, DWORD PTR $T234104[ebp]
	mov	DWORD PTR $T234018[ebp], eax
	mov	ecx, DWORD PTR $T234018[ebp]
	mov	DWORD PTR _itBuilding$[ebp], ecx
	jmp	SHORT $LN34@MoveWorks
$LN33@MoveWorks:
	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR __Tmp$234121[ebp], edx
	mov	eax, DWORD PTR _itBuilding$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _itBuilding$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$234121[ebp]
	mov	DWORD PTR $T234019[ebp], ecx
$LN34@MoveWorks:
	mov	edx, DWORD PTR _buildings$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T234136[ebp], eax
	mov	ecx, DWORD PTR $T234136[ebp]
	mov	DWORD PTR $T234020[ebp], ecx
	mov	edx, DWORD PTR _itBuilding$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234020[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN32@MoveWorks

; 1164 : #endif
; 1165 : 	{
; 1166 : 		if (!itBuilding->m_bEndangered)

	mov	eax, DWORD PTR _itBuilding$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN31@MoveWorks

; 1167 : 		{
; 1168 : 			itBuilding->m_bThemed = false;

	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	BYTE PTR [edx+8], 0

; 1169 : 			if (ThemeBuilding(itBuilding, works1, works2, false /*bConsiderOtherPlayers*/))

	mov	eax, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR $T234021[ebp], eax
	push	0
	mov	ecx, DWORD PTR _works2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _works1$[ebp]
	push	edx
	mov	eax, DWORD PTR $T234021[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z ; CvPlayerCulture::ThemeBuilding
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@MoveWorks

; 1170 : 			{
; 1171 : 				itBuilding->m_bThemed = true;

	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	BYTE PTR [edx+8], 1
$LN31@MoveWorks:

; 1172 : 			}
; 1173 : 		}
; 1174 : 	}

	jmp	$LN33@MoveWorks
$LN32@MoveWorks:

; 1175 : 
; 1176 : 	// Then endangered ones
; 1177 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1178 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); ++itBuilding)
; 1179 : #else
; 1180 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); itBuilding++)

	mov	eax, DWORD PTR _buildings$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234205[ebp], ecx
	mov	edx, DWORD PTR $T234205[ebp]
	mov	DWORD PTR $T234022[ebp], edx
	mov	eax, DWORD PTR $T234022[ebp]
	mov	DWORD PTR _itBuilding$[ebp], eax
	jmp	SHORT $LN29@MoveWorks
$LN28@MoveWorks:
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR __Tmp$234222[ebp], ecx
	mov	edx, DWORD PTR _itBuilding$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _itBuilding$[ebp], edx
	mov	eax, DWORD PTR __Tmp$234222[ebp]
	mov	DWORD PTR $T234023[ebp], eax
$LN29@MoveWorks:
	mov	ecx, DWORD PTR _buildings$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234237[ebp], edx
	mov	eax, DWORD PTR $T234237[ebp]
	mov	DWORD PTR $T234024[ebp], eax
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234024[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN27@MoveWorks

; 1181 : #endif
; 1182 : 	{
; 1183 : 		if (itBuilding->m_bEndangered)

	mov	edx, DWORD PTR _itBuilding$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	je	SHORT $LN26@MoveWorks

; 1184 : 		{
; 1185 : 			itBuilding->m_bThemed = false;

	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	BYTE PTR [ecx+8], 0

; 1186 : 			if (ThemeBuilding(itBuilding, works1, works2, false /*bConsiderOtherPlayers*/))

	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR $T234025[ebp], edx
	push	0
	mov	eax, DWORD PTR _works2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _works1$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234025[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z ; CvPlayerCulture::ThemeBuilding
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@MoveWorks

; 1187 : 			{
; 1188 : 				itBuilding->m_bThemed = true;

	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	BYTE PTR [ecx+8], 1
$LN26@MoveWorks:

; 1189 : 			}
; 1190 : 		}
; 1191 : 	}

	jmp	$LN28@MoveWorks
$LN27@MoveWorks:

; 1192 : 
; 1193 : 	// One more pass through those that are not endangered to see if swapping with another player would help (as long as this isn't Music)
; 1194 : 	if (eType != CvTypes::getGREAT_WORK_SLOT_MUSIC())

	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	cmp	DWORD PTR _eType$[ebp], eax
	je	$LN24@MoveWorks

; 1195 : 	{
; 1196 : 		for (itBuilding = buildings.begin(); itBuilding != buildings.end(); itBuilding++)

	mov	edx, DWORD PTR _buildings$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234306[ebp], eax
	mov	ecx, DWORD PTR $T234306[ebp]
	mov	DWORD PTR $T234026[ebp], ecx
	mov	edx, DWORD PTR $T234026[ebp]
	mov	DWORD PTR _itBuilding$[ebp], edx
	jmp	SHORT $LN23@MoveWorks
$LN22@MoveWorks:
	mov	eax, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR __Tmp$234323[ebp], eax
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _itBuilding$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$234323[ebp]
	mov	DWORD PTR $T234027[ebp], edx
$LN23@MoveWorks:
	mov	eax, DWORD PTR _buildings$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234338[ebp], ecx
	mov	edx, DWORD PTR $T234338[ebp]
	mov	DWORD PTR $T234028[ebp], edx
	mov	eax, DWORD PTR _itBuilding$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T234028[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@MoveWorks

; 1197 : 		{
; 1198 : 			if (!itBuilding->m_bEndangered && !itBuilding->m_bThemed)

	mov	ecx, DWORD PTR _itBuilding$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	jne	SHORT $LN20@MoveWorks
	mov	eax, DWORD PTR _itBuilding$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN20@MoveWorks

; 1199 : 			{
; 1200 : 				if (ThemeBuilding(itBuilding, works1, works2, true /*bConsiderOtherPlayers*/))

	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR $T234029[ebp], edx
	push	1
	mov	eax, DWORD PTR _works2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _works1$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234029[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z ; CvPlayerCulture::ThemeBuilding
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@MoveWorks

; 1201 : 				{
; 1202 : 					itBuilding->m_bThemed = true;

	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	BYTE PTR [ecx+8], 1
$LN20@MoveWorks:

; 1203 : 				}
; 1204 : 			}
; 1205 : 		}

	jmp	$LN22@MoveWorks
$LN24@MoveWorks:

; 1206 : 	}
; 1207 : 
; 1208 : 	// Set the first work left that we haven't themed as something we'd be willing to trade
; 1209 : 	//    for Writing
; 1210 : 	if (eType == CvTypes::getGREAT_WORK_SLOT_LITERATURE())

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	cmp	DWORD PTR _eType$[ebp], eax
	jne	SHORT $LN18@MoveWorks

; 1211 : 	{
; 1212 : 		if (works1.size() > 0)

	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	test	eax, eax
	jbe	SHORT $LN17@MoveWorks

; 1213 : 		{
; 1214 : 			SetSwappableWritingIndex(works1[0].m_iGreatWorkIndex);

	xor	edx, edx
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableWritingIndex

; 1215 : 		}
; 1216 : 		else

	jmp	SHORT $LN16@MoveWorks
$LN17@MoveWorks:

; 1217 : 		{
; 1218 : 			SetSwappableWritingIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableWritingIndex
$LN16@MoveWorks:

; 1219 : 		}
; 1220 : 	}
; 1221 : 
; 1222 : 	//    for Art and Artifacts
; 1223 : 	else

	jmp	$LN15@MoveWorks
$LN18@MoveWorks:

; 1224 : 	{
; 1225 : 		if (eType == CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT())

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	cmp	DWORD PTR _eType$[ebp], eax
	jne	SHORT $LN14@MoveWorks

; 1226 : 		{
; 1227 : 			if (works1.size() > 0)

	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	test	eax, eax
	jbe	SHORT $LN13@MoveWorks

; 1228 : 			{
; 1229 : 				SetSwappableArtIndex(works1[0].m_iGreatWorkIndex);

	xor	edx, edx
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtIndex

; 1230 : 			}
; 1231 : 			else

	jmp	SHORT $LN14@MoveWorks
$LN13@MoveWorks:

; 1232 : 			{
; 1233 : 				SetSwappableArtIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtIndex
$LN14@MoveWorks:

; 1234 : 			}
; 1235 : 		}
; 1236 : 		if (eType == CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT())

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	cmp	DWORD PTR _eType$[ebp], eax
	jne	SHORT $LN15@MoveWorks

; 1237 : 		{
; 1238 : 			if (works2.size() > 0)

	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	test	eax, eax
	jbe	SHORT $LN10@MoveWorks

; 1239 : 			{
; 1240 : 				SetSwappableArtifactIndex(works2[0].m_iGreatWorkIndex);

	xor	edx, edx
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtifactIndex

; 1241 : 			}
; 1242 : 			else

	jmp	SHORT $LN15@MoveWorks
$LN10@MoveWorks:

; 1243 : 			{
; 1244 : 				SetSwappableArtifactIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetSwappableArtifactIndex
$LN15@MoveWorks:

; 1245 : 			}
; 1246 : 		}
; 1247 : 	}
; 1248 : 
; 1249 : 	// Fill unthemed buildings, first those that aren't endangered
; 1250 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1251 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); ++itBuilding)
; 1252 : #else
; 1253 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); itBuilding++)

	mov	eax, DWORD PTR _buildings$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234425[ebp], ecx
	mov	edx, DWORD PTR $T234425[ebp]
	mov	DWORD PTR $T234030[ebp], edx
	mov	eax, DWORD PTR $T234030[ebp]
	mov	DWORD PTR _itBuilding$[ebp], eax
	jmp	SHORT $LN8@MoveWorks
$LN7@MoveWorks:
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR __Tmp$234442[ebp], ecx
	mov	edx, DWORD PTR _itBuilding$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _itBuilding$[ebp], edx
	mov	eax, DWORD PTR __Tmp$234442[ebp]
	mov	DWORD PTR $T234031[ebp], eax
$LN8@MoveWorks:
	mov	ecx, DWORD PTR _buildings$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234457[ebp], edx
	mov	eax, DWORD PTR $T234457[ebp]
	mov	DWORD PTR $T234032[ebp], eax
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234032[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@MoveWorks

; 1254 : #endif
; 1255 : 	{
; 1256 : 		if (!itBuilding->m_bEndangered && !itBuilding->m_bThemed)

	mov	edx, DWORD PTR _itBuilding$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	jne	SHORT $LN5@MoveWorks
	mov	ecx, DWORD PTR _itBuilding$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN5@MoveWorks

; 1257 : 		{
; 1258 : 			FillBuilding(itBuilding, works1, works2);

	mov	eax, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR $T234033[ebp], eax
	mov	ecx, DWORD PTR _works2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _works1$[ebp]
	push	edx
	mov	eax, DWORD PTR $T234033[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z ; CvPlayerCulture::FillBuilding
$LN5@MoveWorks:

; 1259 : 		}
; 1260 : 	}

	jmp	$LN7@MoveWorks
$LN6@MoveWorks:

; 1261 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1262 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); ++itBuilding)
; 1263 : #else
; 1264 : 	for (itBuilding = buildings.begin(); itBuilding != buildings.end(); itBuilding++)

	mov	ecx, DWORD PTR _buildings$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234511[ebp], edx
	mov	eax, DWORD PTR $T234511[ebp]
	mov	DWORD PTR $T234034[ebp], eax
	mov	ecx, DWORD PTR $T234034[ebp]
	mov	DWORD PTR _itBuilding$[ebp], ecx
	jmp	SHORT $LN4@MoveWorks
$LN3@MoveWorks:
	mov	edx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR __Tmp$234533[ebp], edx
	mov	eax, DWORD PTR _itBuilding$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _itBuilding$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$234533[ebp]
	mov	DWORD PTR $T234035[ebp], ecx
$LN4@MoveWorks:
	mov	edx, DWORD PTR _buildings$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T234543[ebp], eax
	mov	ecx, DWORD PTR $T234543[ebp]
	mov	DWORD PTR $T234036[ebp], ecx
	mov	edx, DWORD PTR _itBuilding$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234036[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN35@MoveWorks

; 1265 : #endif
; 1266 : 	{
; 1267 : 		if (itBuilding->m_bEndangered && !itBuilding->m_bThemed)

	mov	eax, DWORD PTR _itBuilding$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	je	SHORT $LN1@MoveWorks
	mov	edx, DWORD PTR _itBuilding$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	jne	SHORT $LN1@MoveWorks

; 1268 : 		{
; 1269 : 			FillBuilding(itBuilding, works1, works2);

	mov	ecx, DWORD PTR _itBuilding$[ebp]
	mov	DWORD PTR $T234037[ebp], ecx
	mov	edx, DWORD PTR _works2$[ebp]
	push	edx
	mov	eax, DWORD PTR _works1$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234037[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z ; CvPlayerCulture::FillBuilding
$LN1@MoveWorks:

; 1270 : 		}

	jmp	$LN3@MoveWorks
$LN35@MoveWorks:

; 1271 : 	}
; 1272 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MoveWorks@CvPlayerCulture@@QAEXW4GreatWorkSlotType@@AAV?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@4@2@Z ENDP ; CvPlayerCulture::MoveWorks
_TEXT	ENDS
EXTRN	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z:PROC ; CvBuildingEntry::GetThemingBonusInfo
EXTRN	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z:PROC ; CvBuildingXMLEntries::GetEntry
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
; Function compile flags: /Odtp
;	COMDAT ?SortThemingBonus@@YA_NABVCvGreatWorkBuildingInMyEmpire@@0@Z
_TEXT	SEGMENT
$T234597 = -24						; size = 4
$T234593 = -20						; size = 4
_pBonus2$223477 = -16					; size = 4
_pBonus1$223476 = -12					; size = 4
_pEntry2$ = -8						; size = 4
_pEntry1$ = -4						; size = 4
_kEntry1$ = 8						; size = 4
_kEntry2$ = 12						; size = 4
?SortThemingBonus@@YA_NABVCvGreatWorkBuildingInMyEmpire@@0@Z PROC ; SortThemingBonus, COMDAT

; 1131 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1132 : 	CvBuildingEntry *pEntry1 = GC.GetGameBuildings()->GetEntry(kEntry1.m_eBuilding);

	mov	eax, DWORD PTR _kEntry1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pEntry1$[ebp], eax

; 1133 : 	CvBuildingEntry *pEntry2 = GC.GetGameBuildings()->GetEntry(kEntry2.m_eBuilding);

	mov	edx, DWORD PTR _kEntry2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pEntry2$[ebp], eax

; 1134 : 
; 1135 : 	if (pEntry1 && pEntry2)

	cmp	DWORD PTR _pEntry1$[ebp], 0
	je	SHORT $LN4@SortThemin
	cmp	DWORD PTR _pEntry2$[ebp], 0
	je	SHORT $LN4@SortThemin

; 1136 : 	{
; 1137 : 		CvThemingBonusInfo *pBonus1 = pEntry1->GetThemingBonusInfo(0);

	push	0
	mov	ecx, DWORD PTR _pEntry1$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR _pBonus1$223476[ebp], eax

; 1138 : 		CvThemingBonusInfo *pBonus2 = pEntry2->GetThemingBonusInfo(0);

	push	0
	mov	ecx, DWORD PTR _pEntry2$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR _pBonus2$223477[ebp], eax

; 1139 : 
; 1140 : 		if (pBonus1 && pBonus2)

	cmp	DWORD PTR _pBonus1$223476[ebp], 0
	je	SHORT $LN3@SortThemin
	cmp	DWORD PTR _pBonus2$223477[ebp], 0
	je	SHORT $LN3@SortThemin

; 1141 : 		{
; 1142 : 			return (pBonus1->GetAIPriority() > pBonus2->GetAIPriority());

	mov	ecx, DWORD PTR _pBonus1$223476[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T234593[ebp], edx
	mov	eax, DWORD PTR _pBonus2$223477[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T234597[ebp], ecx
	mov	edx, DWORD PTR $T234593[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234597[ebp]
	setg	al
	jmp	SHORT $LN5@SortThemin
	jmp	SHORT $LN4@SortThemin
$LN3@SortThemin:

; 1143 : 		}
; 1144 : 		else if (pBonus1)

	cmp	DWORD PTR _pBonus1$223476[ebp], 0
	je	SHORT $LN4@SortThemin

; 1145 : 		{
; 1146 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@SortThemin
$LN4@SortThemin:

; 1147 : 		}
; 1148 : 	}
; 1149 : 
; 1150 : 	return false;

	xor	al, al
$LN5@SortThemin:

; 1151 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SortThemingBonus@@YA_NABVCvGreatWorkBuildingInMyEmpire@@0@Z ENDP ; SortThemingBonus
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >
PUBLIC	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >::~_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >
PUBLIC	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
PUBLIC	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z ; CvPlayerCulture::LogThemedBuilding
PUBLIC	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
PUBLIC	?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ; CvPlayerCulture::MoveWorkIntoSlot
PUBLIC	?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z ; CultureHelpers::SendArtSwapNotification
PUBLIC	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase
PUBLIC	?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z ; CvPlayerCulture::LogSwapWorks
PUBLIC	?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ; CultureHelpers::FindWorkNotChosen
PUBLIC	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
PUBLIC	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
PUBLIC	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
PUBLIC	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase
PUBLIC	?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z ; CvPlayerCulture::ThemeEqualArtArtifact
PUBLIC	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
PUBLIC	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
PUBLIC	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
PUBLIC	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
EXTRN	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z:PROC ; CvDiplomacyAI::IsPlayerValid
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z DD 019930522H
	DD	019H
	DD	FLAT:__unwindtable$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$18
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$20
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$22
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$24
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$28
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$30
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$32
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$34
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$36
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$38
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$40
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$42
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$44
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$46
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$48
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z
_TEXT	SEGMENT
_this$ = -1780						; size = 4
$T237913 = -1684					; size = 4
$T237904 = -1680					; size = 4
$T237675 = -1564					; size = 4
$T237659 = -1560					; size = 4
$T237643 = -1556					; size = 4
$T237624 = -1552					; size = 4
$T237623 = -1548					; size = 4
$T237621 = -1544					; size = 4
$T237611 = -1540					; size = 4
$T237595 = -1536					; size = 4
$T237585 = -1532					; size = 4
$T237563 = -1528					; size = 4
$T237539 = -1524					; size = 4
__Tmp$237524 = -1520					; size = 4
$T237507 = -1516					; size = 4
$T237472 = -1512					; size = 4
$T237456 = -1508					; size = 4
$T237485 = -1504					; size = 4
$T237484 = -1500					; size = 4
$T237483 = -1496					; size = 4
$T237482 = -1492					; size = 4
$T237481 = -1488					; size = 4
$T237215 = -1372					; size = 4
$T237199 = -1368					; size = 4
$T237183 = -1364					; size = 4
$T237164 = -1360					; size = 4
$T237163 = -1356					; size = 4
$T237162 = -1352					; size = 4
$T237151 = -1348					; size = 4
$T237135 = -1344					; size = 4
$T237125 = -1340					; size = 4
$T237103 = -1336					; size = 4
$T237079 = -1332					; size = 4
__Tmp$237064 = -1328					; size = 4
$T237047 = -1324					; size = 4
$T237012 = -1320					; size = 4
$T236996 = -1316					; size = 4
$T237025 = -1312					; size = 4
$T237024 = -1308					; size = 4
$T237023 = -1304					; size = 4
$T237022 = -1300					; size = 4
$T237021 = -1296					; size = 4
$T236977 = -1292					; size = 4
$T236968 = -1288					; size = 4
$T236956 = -1284					; size = 4
$T236946 = -1277					; size = 1
$T236942 = -1276					; size = 4
$T236708 = -1160					; size = 4
$T236692 = -1156					; size = 4
$T236676 = -1152					; size = 4
$T236616 = -1148					; size = 4
__Tmp$236606 = -1144					; size = 4
$T236584 = -1140					; size = 4
$T236349 = -1024					; size = 4
$T236333 = -1020					; size = 4
$T236317 = -1016					; size = 4
$T236257 = -1012					; size = 4
__Tmp$236242 = -1008					; size = 4
$T236225 = -1004					; size = 4
$T236215 = -997						; size = 1
$T236186 = -996						; size = 4
$T236170 = -992						; size = 4
$T236199 = -988						; size = 4
$T236198 = -984						; size = 4
$T236197 = -980						; size = 4
$T236196 = -976						; size = 4
$T236195 = -972						; size = 4
$T236154 = -968						; size = 4
$T236145 = -964						; size = 4
$T236105 = -940						; size = 4
$T236093 = -935						; size = 1
$T236089 = -934						; size = 1
$T236085 = -933						; size = 1
$T236070 = -932						; size = 4
$T235941 = -868						; size = 4
$T235932 = -864						; size = 4
$T235923 = -860						; size = 4
$T235897 = -856						; size = 4
__Tmp$235887 = -852					; size = 4
__Tmp$235878 = -848					; size = 4
$T235727 = -784						; size = 4
$T235711 = -780						; size = 4
$T235739 = -776						; size = 4
$T235738 = -772						; size = 4
$T235737 = -768						; size = 4
$T235736 = -764						; size = 4
$T235735 = -760						; size = 4
$T235670 = -756						; size = 4
$T235654 = -752						; size = 4
$T235682 = -748						; size = 4
$T235681 = -744						; size = 4
$T235680 = -740						; size = 4
$T235679 = -736						; size = 4
$T235678 = -732						; size = 4
$T235613 = -728						; size = 4
$T235597 = -724						; size = 4
$T235625 = -720						; size = 4
$T235624 = -716						; size = 4
$T235623 = -712						; size = 4
$T235622 = -708						; size = 4
$T235621 = -704						; size = 4
$T235581 = -700						; size = 4
$T235572 = -696						; size = 4
$T235563 = -689						; size = 1
$T235559 = -688						; size = 4
$T235550 = -684						; size = 4
$T235541 = -677						; size = 1
$T235523 = -676						; size = 4
__Tmp$235510 = -672					; size = 4
$T235498 = -668						; size = 4
$T235437 = -644						; size = 4
__Tmp$235424 = -640					; size = 4
$T235412 = -636						; size = 4
$T235146 = -540						; size = 4
$T235142 = -533						; size = 1
$T234967 = -437						; size = 1
$T234792 = -341						; size = 1
$T234788 = -340						; size = 4
$T234699 = -336						; size = 4
$T234641 = -292						; size = 4
$T234632 = -286						; size = 1
$T234631 = -285						; size = 1
$T234630 = -284						; size = 4
$T234629 = -280						; size = 4
$T234628 = -276						; size = 4
$T234627 = -272						; size = 4
$T234626 = -268						; size = 4
$T234625 = -264						; size = 4
$T234624 = -260						; size = 4
$T234623 = -256						; size = 4
$T234622 = -252						; size = 4
$T234621 = -248						; size = 4
$T234620 = -244						; size = 4
$T234619 = -240						; size = 4
$T234618 = -236						; size = 4
$T234617 = -232						; size = 4
$T234616 = -228						; size = 4
$T234615 = -224						; size = 4
$T234614 = -220						; size = 4
$T234613 = -216						; size = 4
$T234612 = -212						; size = 4
$T234611 = -208						; size = 4
$T234610 = -204						; size = 4
$T234609 = -200						; size = 4
$T234608 = -196						; size = 4
$T234607 = -192						; size = 4
$T234606 = -188						; size = 4
$T234605 = -184						; size = 4
$T234604 = -180						; size = 4
$T234603 = -176						; size = 4
$T234602 = -172						; size = 4
$T234601 = -166						; size = 1
$T234600 = -165						; size = 1
_kK$224307 = -164					; size = 4
_jJ$224302 = -160					; size = 4
_bSwapSuccess$224283 = -153				; size = 1
_ePlayer$224280 = -152					; size = 4
_eEra$224279 = -148					; size = 4
_iToBeDiscardedWorkIndex$224272 = -144			; size = 4
_iToBeAcquiredWorkIndex$224271 = -140			; size = 4
_kPlayer$224267 = -136					; size = 4
_iLoopPlayer$224263 = -132				; size = 4
_bThemedProperly$224259 = -125				; size = 1
_iCountSlots$224240 = -124				; size = 4
_pkBonusInfo$224225 = -120				; size = 4
_iI$224221 = -116					; size = 4
_worksToConsider$ = -112				; size = 16
_pkEntry$ = -96						; size = 4
_it2$ = -92						; size = 4
_aPlayersSeen$ = -88					; size = 16
_pkGameCulture$ = -72					; size = 4
_aErasSeen$ = -68					; size = 16
_tempWorks$ = -52					; size = 16
_it3$ = -36						; size = 4
_aWorksChosen$ = -32					; size = 16
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_buildingIt$ = 8					; size = 4
_works1$ = 12						; size = 4
_works2$ = 16						; size = 4
_bConsiderOtherPlayers$ = 20				; size = 1
?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z PROC ; CvPlayerCulture::ThemeBuilding, COMDAT
; _this$ = ecx

; 1276 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1768				; 000006e8H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1277 : 	CvGameCulture *pkGameCulture = GC.getGame().GetGameCulture();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234641[ebp], eax
	mov	ecx, DWORD PTR $T234641[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR _pkGameCulture$[ebp], eax

; 1278 : 
; 1279 : 	vector<CvGreatWorkInMyEmpire> worksToConsider;

	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1280 : 	vector<CvGreatWorkInMyEmpire>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 1281 : 	vector<CvGreatWorkInMyEmpire>::const_iterator it2;

	mov	DWORD PTR _it2$[ebp], 0

; 1282 : 	vector<CvGreatWorkInMyEmpire>::iterator it3;

	mov	DWORD PTR _it3$[ebp], 0

; 1283 : 	vector<CvGreatWorkInMyEmpire> tempWorks;

	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1284 : 
; 1285 : 	vector<int> aWorksChosen;

	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1286 : 	vector<PlayerTypes> aPlayersSeen;

	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1287 : 	vector<EraTypes> aErasSeen;

	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1288 : 
; 1289 : 	CvBuildingEntry *pkEntry = GC.getBuildingInfo(buildingIt->m_eBuilding);

	mov	ecx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T234699[ebp], ecx
	mov	edx, DWORD PTR $T234699[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 1290 : 	if (!pkEntry || pkEntry->GetGreatWorkCount() < 2)

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN66@ThemeBuild
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	cmp	eax, 2
	jge	SHORT $LN67@ThemeBuild
$LN66@ThemeBuild:

; 1291 : 	{
; 1292 : 		return false;

	mov	BYTE PTR $T234600[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T234600[ebp]
	jmp	$LN68@ThemeBuild
$LN67@ThemeBuild:

; 1293 : 	}
; 1294 : 
; 1295 : 	// Try each of the theming bonuses for this building
; 1296 : 	for (int iI = 0; iI < pkEntry->GetNumThemingBonuses(); iI++)

	mov	DWORD PTR _iI$224221[ebp], 0
	jmp	SHORT $LN65@ThemeBuild
$LN64@ThemeBuild:
	mov	ecx, DWORD PTR _iI$224221[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$224221[ebp], ecx
$LN65@ThemeBuild:
	mov	edx, DWORD PTR _pkEntry$[ebp]
	mov	eax, DWORD PTR [edx+1008]
	mov	DWORD PTR $T234788[ebp], eax
	mov	ecx, DWORD PTR _iI$224221[ebp]
	cmp	ecx, DWORD PTR $T234788[ebp]
	jge	$LN63@ThemeBuild

; 1297 : 	{
; 1298 : 		CvThemingBonusInfo *pkBonusInfo = pkEntry->GetThemingBonusInfo(iI);

	mov	edx, DWORD PTR _iI$224221[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR _pkBonusInfo$224225[ebp], eax

; 1299 : 		if (pkBonusInfo->IsMustBeArt())

	mov	eax, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	cl, BYTE PTR [eax+34]
	mov	BYTE PTR $T234792[ebp], cl
	movzx	edx, BYTE PTR $T234792[ebp]
	test	edx, edx
	je	SHORT $LN62@ThemeBuild

; 1300 : 		{
; 1301 : 			worksToConsider = works1;

	mov	eax, DWORD PTR _works1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=
	jmp	$LN61@ThemeBuild
$LN62@ThemeBuild:

; 1302 : 		}
; 1303 : 		else if (pkBonusInfo->IsMustBeArtifact())

	mov	ecx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	dl, BYTE PTR [ecx+35]
	mov	BYTE PTR $T234967[ebp], dl
	movzx	eax, BYTE PTR $T234967[ebp]
	test	eax, eax
	je	SHORT $LN60@ThemeBuild

; 1304 : 		{
; 1305 : 			worksToConsider = works2;

	mov	ecx, DWORD PTR _works2$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=
	jmp	$LN61@ThemeBuild
$LN60@ThemeBuild:

; 1306 : 		}
; 1307 : 		// Dedicated routine to handle the equal art/artifact case
; 1308 : 		else if (pkBonusInfo->IsMustBeEqualArtArtifact())

	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	al, BYTE PTR [edx+36]
	mov	BYTE PTR $T235142[ebp], al
	movzx	ecx, BYTE PTR $T235142[ebp]
	test	ecx, ecx
	je	$LN58@ThemeBuild

; 1309 : 		{
; 1310 : 			if (ThemeEqualArtArtifact(*buildingIt, iI, pkEntry->GetGreatWorkCount(), works1, works2, bConsiderOtherPlayers))

	mov	edx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T235146[ebp], edx
	movzx	eax, BYTE PTR _bConsiderOtherPlayers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _works2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _works1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	push	eax
	mov	eax, DWORD PTR _iI$224221[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235146[ebp]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z ; CvPlayerCulture::ThemeEqualArtArtifact
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN57@ThemeBuild

; 1311 : 			{
; 1312 : 				return true;

	mov	BYTE PTR $T234601[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T234601[ebp]
	jmp	$LN68@ThemeBuild
$LN57@ThemeBuild:

; 1313 : 			}
; 1314 : 		}
; 1315 : 		else

	jmp	$LN61@ThemeBuild
$LN58@ThemeBuild:

; 1316 : 		{
; 1317 : 			worksToConsider = works1;

	mov	eax, DWORD PTR _works1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1318 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1319 : 			for (it = works2.begin(); it != works2.end(); ++it)
; 1320 : #else
; 1321 : 			for (it = works2.begin(); it != works2.end(); it++)

	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235412[ebp], edx
	mov	eax, DWORD PTR $T235412[ebp]
	mov	DWORD PTR $T234602[ebp], eax
	mov	ecx, DWORD PTR $T234602[ebp]
	mov	DWORD PTR _it$[ebp], ecx
	jmp	SHORT $LN55@ThemeBuild
$LN54@ThemeBuild:
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$235424[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$235424[ebp]
	mov	DWORD PTR $T234603[ebp], ecx
$LN55@ThemeBuild:
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235437[ebp], eax
	mov	ecx, DWORD PTR $T235437[ebp]
	mov	DWORD PTR $T234604[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234604[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN61@ThemeBuild

; 1322 : #endif
; 1323 : 			{
; 1324 : 				worksToConsider.push_back(*it);

	mov	eax, DWORD PTR _it$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back

; 1325 : 			}

	jmp	SHORT $LN54@ThemeBuild
$LN61@ThemeBuild:

; 1326 : 		}
; 1327 : 
; 1328 : 		// If not enough works, try other theming bonuses
; 1329 : #ifdef AUI_WARNING_FIXES
; 1330 : 		uint iCountSlots = pkEntry->GetGreatWorkCount();
; 1331 : 		if (worksToConsider.size() < iCountSlots)
; 1332 : #else
; 1333 : 		int iCountSlots = pkEntry->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iCountSlots$224240[ebp], eax

; 1334 : 		if (worksToConsider.size() < (unsigned int)iCountSlots)

	mov	eax, DWORD PTR _worksToConsider$[ebp+8]
	sub	eax, DWORD PTR _worksToConsider$[ebp+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, DWORD PTR _iCountSlots$224240[ebp]
	jae	SHORT $LN52@ThemeBuild

; 1335 : #endif
; 1336 : 		{
; 1337 : 			continue;

	jmp	$LN64@ThemeBuild
$LN52@ThemeBuild:

; 1338 : 		}
; 1339 : 
; 1340 : 		// Try each of the works as the starter
; 1341 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1342 : 		for (it = worksToConsider.begin(); it != worksToConsider.end(); ++it)
; 1343 : #else
; 1344 : 		for (it = worksToConsider.begin(); it != worksToConsider.end(); it++)

	mov	edx, DWORD PTR _worksToConsider$[ebp+4]
	mov	DWORD PTR $T235498[ebp], edx
	mov	eax, DWORD PTR $T235498[ebp]
	mov	DWORD PTR $T234605[ebp], eax
	mov	ecx, DWORD PTR $T234605[ebp]
	mov	DWORD PTR _it$[ebp], ecx
	jmp	SHORT $LN51@ThemeBuild
$LN50@ThemeBuild:
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$235510[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$235510[ebp]
	mov	DWORD PTR $T234606[ebp], ecx
$LN51@ThemeBuild:
	mov	edx, DWORD PTR _worksToConsider$[ebp+8]
	mov	DWORD PTR $T235523[ebp], edx
	mov	eax, DWORD PTR $T235523[ebp]
	mov	DWORD PTR $T234607[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234607[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN49@ThemeBuild

; 1345 : #endif
; 1346 : 		{
; 1347 : 			// First, make sure this "starter" is valid
; 1348 : 			if (pkBonusInfo->IsRequiresOwner() && it->m_ePlayer != m_pPlayer->GetID())

	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	al, BYTE PTR [edx+37]
	mov	BYTE PTR $T235541[ebp], al
	movzx	ecx, BYTE PTR $T235541[ebp]
	test	ecx, ecx
	je	SHORT $LN48@ThemeBuild
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T235550[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235559[ebp], edx
	mov	eax, DWORD PTR $T235550[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR $T235559[ebp]
	je	SHORT $LN48@ThemeBuild

; 1349 : 			{
; 1350 : 				continue;

	jmp	$LN50@ThemeBuild
$LN48@ThemeBuild:

; 1351 : 			}
; 1352 : 			if (pkBonusInfo->IsRequiresAnyButOwner() && it->m_ePlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	al, BYTE PTR [edx+38]
	mov	BYTE PTR $T235563[ebp], al
	movzx	ecx, BYTE PTR $T235563[ebp]
	test	ecx, ecx
	je	SHORT $LN47@ThemeBuild
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T235572[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235581[ebp], edx
	mov	eax, DWORD PTR $T235572[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR $T235581[ebp]
	jne	SHORT $LN47@ThemeBuild

; 1353 : 			{
; 1354 : 				continue;

	jmp	$LN50@ThemeBuild
$LN47@ThemeBuild:

; 1355 : 			}
; 1356 : 
; 1357 : 			aWorksChosen.clear();

	mov	edx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T235597[ebp], edx
	mov	eax, DWORD PTR $T235597[ebp]
	mov	DWORD PTR $T235622[ebp], eax
	mov	ecx, DWORD PTR $T235622[ebp]
	mov	DWORD PTR $T235621[ebp], ecx
	mov	edx, DWORD PTR _aWorksChosen$[ebp+4]
	mov	DWORD PTR $T235613[ebp], edx
	mov	eax, DWORD PTR $T235613[ebp]
	mov	DWORD PTR $T235624[ebp], eax
	mov	ecx, DWORD PTR $T235624[ebp]
	mov	DWORD PTR $T235623[ebp], ecx
	mov	edx, DWORD PTR $T235621[ebp]
	push	edx
	mov	eax, DWORD PTR $T235623[ebp]
	push	eax
	lea	ecx, DWORD PTR $T235625[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1358 : 			aPlayersSeen.clear();

	mov	edx, DWORD PTR _aPlayersSeen$[ebp+8]
	mov	DWORD PTR $T235654[ebp], edx
	mov	eax, DWORD PTR $T235654[ebp]
	mov	DWORD PTR $T235679[ebp], eax
	mov	ecx, DWORD PTR $T235679[ebp]
	mov	DWORD PTR $T235678[ebp], ecx
	mov	edx, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	DWORD PTR $T235670[ebp], edx
	mov	eax, DWORD PTR $T235670[ebp]
	mov	DWORD PTR $T235681[ebp], eax
	mov	ecx, DWORD PTR $T235681[ebp]
	mov	DWORD PTR $T235680[ebp], ecx
	mov	edx, DWORD PTR $T235678[ebp]
	push	edx
	mov	eax, DWORD PTR $T235680[ebp]
	push	eax
	lea	ecx, DWORD PTR $T235682[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase

; 1359 : 			aErasSeen.clear();

	mov	edx, DWORD PTR _aErasSeen$[ebp+8]
	mov	DWORD PTR $T235711[ebp], edx
	mov	eax, DWORD PTR $T235711[ebp]
	mov	DWORD PTR $T235736[ebp], eax
	mov	ecx, DWORD PTR $T235736[ebp]
	mov	DWORD PTR $T235735[ebp], ecx
	mov	edx, DWORD PTR _aErasSeen$[ebp+4]
	mov	DWORD PTR $T235727[ebp], edx
	mov	eax, DWORD PTR $T235727[ebp]
	mov	DWORD PTR $T235738[ebp], eax
	mov	ecx, DWORD PTR $T235738[ebp]
	mov	DWORD PTR $T235737[ebp], ecx
	mov	edx, DWORD PTR $T235735[ebp]
	push	edx
	mov	eax, DWORD PTR $T235737[ebp]
	push	eax
	lea	ecx, DWORD PTR $T235739[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase

; 1360 : 
; 1361 : 			aWorksChosen.push_back(it->m_iGreatWorkIndex);

	mov	edx, DWORD PTR _it$[ebp]
	push	edx
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1362 : 			aPlayersSeen.push_back(it->m_ePlayer);

	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1363 : 			aErasSeen.push_back(it->m_eEra);

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back

; 1364 : 
; 1365 : 			// Loop through the rest looking for works that will match up
; 1366 : 			it2 = it;

	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR _it2$[ebp], edx

; 1367 : #ifdef AUI_WARNING_FIXES
; 1368 : 			for (++it2; it2 != worksToConsider.end() && aWorksChosen.size() < iCountSlots; ++it2)
; 1369 : #elif defined(AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS)
; 1370 : 			for (++it2; it2 != worksToConsider.end() && aWorksChosen.size() < (unsigned int)iCountSlots; ++it2)
; 1371 : #else
; 1372 : 			for (it2++; it2 != worksToConsider.end() && aWorksChosen.size() < (unsigned int)iCountSlots; it2++)

	mov	eax, DWORD PTR _it2$[ebp]
	mov	DWORD PTR __Tmp$235878[ebp], eax
	mov	ecx, DWORD PTR _it2$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it2$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$235878[ebp]
	mov	DWORD PTR $T234608[ebp], edx
	jmp	SHORT $LN46@ThemeBuild
$LN45@ThemeBuild:
	mov	eax, DWORD PTR _it2$[ebp]
	mov	DWORD PTR __Tmp$235887[ebp], eax
	mov	ecx, DWORD PTR _it2$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it2$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$235887[ebp]
	mov	DWORD PTR $T234609[ebp], edx
$LN46@ThemeBuild:
	mov	eax, DWORD PTR _worksToConsider$[ebp+8]
	mov	DWORD PTR $T235897[ebp], eax
	mov	ecx, DWORD PTR $T235897[ebp]
	mov	DWORD PTR $T234610[ebp], ecx
	mov	edx, DWORD PTR _it2$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234610[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN44@ThemeBuild
	mov	eax, DWORD PTR _aWorksChosen$[ebp+8]
	sub	eax, DWORD PTR _aWorksChosen$[ebp+4]
	sar	eax, 2
	cmp	eax, DWORD PTR _iCountSlots$224240[ebp]
	jae	$LN44@ThemeBuild

; 1373 : #endif
; 1374 : 			{
; 1375 : 				if (CultureHelpers::IsValidForThemingBonus(pkBonusInfo, it2->m_eEra, aErasSeen, it2->m_ePlayer, aPlayersSeen, m_pPlayer->GetID()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T235923[ebp], eax
	mov	ecx, DWORD PTR _it2$[ebp]
	mov	DWORD PTR $T235932[ebp], ecx
	mov	edx, DWORD PTR _it2$[ebp]
	mov	DWORD PTR $T235941[ebp], edx
	mov	eax, DWORD PTR $T235923[ebp]
	push	eax
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235932[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235941[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _pkBonusInfo$224225[ebp]
	push	ecx
	call	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
	add	esp, 24					; 00000018H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN43@ThemeBuild

; 1376 : 				{
; 1377 : 					aWorksChosen.push_back(it2->m_iGreatWorkIndex);

	mov	eax, DWORD PTR _it2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1378 : 					aPlayersSeen.push_back(it2->m_ePlayer);

	mov	ecx, DWORD PTR _it2$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1379 : 					aErasSeen.push_back(it2->m_eEra);

	mov	edx, DWORD PTR _it2$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
$LN43@ThemeBuild:

; 1380 : 				}
; 1381 : 			}

	jmp	$LN45@ThemeBuild
$LN44@ThemeBuild:

; 1382 : 
; 1383 : 			// Did we theme it properly?
; 1384 : 			bool bThemedProperly = false;

	mov	BYTE PTR _bThemedProperly$224259[ebp], 0

; 1385 : 			if (aWorksChosen.size() == iCountSlots && CultureHelpers::GetThemingBonusIndex(m_pPlayer->GetID(), pkEntry, aWorksChosen) == iI)

	mov	eax, DWORD PTR _aWorksChosen$[ebp+8]
	sub	eax, DWORD PTR _aWorksChosen$[ebp+4]
	sar	eax, 2
	cmp	eax, DWORD PTR _iCountSlots$224240[ebp]
	jne	SHORT $LN42@ThemeBuild
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236070[ebp], eax
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR $T236070[ebp]
	push	eax
	call	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _iI$224221[ebp]
	jne	SHORT $LN42@ThemeBuild

; 1386 : 			{
; 1387 : 				bThemedProperly = true;

	mov	BYTE PTR _bThemedProperly$224259[ebp], 1
	jmp	$LN41@ThemeBuild
$LN42@ThemeBuild:

; 1388 : 			}
; 1389 : 
; 1390 : 			// If we are one work short, let's look to other players
; 1391 : 			else if (bConsiderOtherPlayers && aWorksChosen.size() == (iCountSlots - 1) && (pkEntry->GetGreatWorkSlotType() != CvTypes::getGREAT_WORK_SLOT_MUSIC()))

	movzx	ecx, BYTE PTR _bConsiderOtherPlayers$[ebp]
	test	ecx, ecx
	je	$LN41@ThemeBuild
	mov	edx, DWORD PTR _iCountSlots$224240[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _aWorksChosen$[ebp+8]
	sub	eax, DWORD PTR _aWorksChosen$[ebp+4]
	sar	eax, 2
	cmp	eax, edx
	jne	$LN41@ThemeBuild
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	mov	esi, eax
	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	cmp	esi, eax
	je	$LN41@ThemeBuild

; 1392 : 			{
; 1393 : 				for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$224263[ebp], 0
	jmp	SHORT $LN39@ThemeBuild
$LN38@ThemeBuild:
	mov	ecx, DWORD PTR _iLoopPlayer$224263[ebp]
	add	ecx, 1
	mov	DWORD PTR _iLoopPlayer$224263[ebp], ecx
$LN39@ThemeBuild:
	cmp	DWORD PTR _iLoopPlayer$224263[ebp], 22	; 00000016H
	jge	$LN41@ThemeBuild

; 1394 : 				{
; 1395 : 					CvPlayer& kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	edx, DWORD PTR _iLoopPlayer$224263[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$224267[ebp], edx

; 1396 : 					if (kPlayer.isAlive() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid((PlayerTypes)iLoopPlayer))

	mov	eax, DWORD PTR _kPlayer$224267[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T236085[ebp], cl
	movzx	edx, BYTE PTR $T236085[ebp]
	test	edx, edx
	je	$LN36@ThemeBuild
	push	0
	mov	eax, DWORD PTR _iLoopPlayer$224263[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	edx, al
	test	edx, edx
	je	$LN36@ThemeBuild

; 1397 : 					{
; 1398 : 						int iToBeAcquiredWorkIndex = NO_GREAT_WORK;

	mov	DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp], -1

; 1399 : 						int iToBeDiscardedWorkIndex = NO_GREAT_WORK;

	mov	DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp], -1

; 1400 : 
; 1401 : 						if (pkEntry->GetGreatWorkSlotType() == CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT())

	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	mov	esi, eax
	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	cmp	esi, eax
	jne	$LN35@ThemeBuild

; 1402 : 						{
; 1403 : 							if (pkBonusInfo->IsMustBeArt())

	mov	eax, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	cl, BYTE PTR [eax+34]
	mov	BYTE PTR $T236089[ebp], cl
	movzx	edx, BYTE PTR $T236089[ebp]
	test	edx, edx
	je	SHORT $LN34@ThemeBuild

; 1404 : 							{
; 1405 : 								iToBeAcquiredWorkIndex = kPlayer.GetCulture()->GetSwappableArtIndex();

	mov	ecx, DWORD PTR _kPlayer$224267[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtIndex
	mov	DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp], eax

; 1406 : 								iToBeDiscardedWorkIndex = CultureHelpers::FindWorkNotChosen(works1, aWorksChosen);

	lea	eax, DWORD PTR _aWorksChosen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _works1$[ebp]
	push	ecx
	call	?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ; CultureHelpers::FindWorkNotChosen
	add	esp, 8
	mov	DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp], eax
	jmp	SHORT $LN33@ThemeBuild
$LN34@ThemeBuild:

; 1407 : 							}
; 1408 : 							else if (pkBonusInfo->IsMustBeArtifact())

	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	al, BYTE PTR [edx+35]
	mov	BYTE PTR $T236093[ebp], al
	movzx	ecx, BYTE PTR $T236093[ebp]
	test	ecx, ecx
	je	SHORT $LN33@ThemeBuild

; 1409 : 							{
; 1410 : 								iToBeAcquiredWorkIndex = kPlayer.GetCulture()->GetSwappableArtifactIndex();

	mov	ecx, DWORD PTR _kPlayer$224267[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtifactIndex
	mov	DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp], eax

; 1411 : 								iToBeDiscardedWorkIndex = CultureHelpers::FindWorkNotChosen(works2, aWorksChosen);

	lea	edx, DWORD PTR _aWorksChosen$[ebp]
	push	edx
	mov	eax, DWORD PTR _works2$[ebp]
	push	eax
	call	?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ; CultureHelpers::FindWorkNotChosen
	add	esp, 8
	mov	DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp], eax
$LN33@ThemeBuild:

; 1412 : 							}
; 1413 : 						}
; 1414 : 						else

	jmp	SHORT $LN31@ThemeBuild
$LN35@ThemeBuild:

; 1415 : 						{
; 1416 : 							iToBeAcquiredWorkIndex = kPlayer.GetCulture()->GetSwappableWritingIndex();

	mov	ecx, DWORD PTR _kPlayer$224267[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableWritingIndex
	mov	DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp], eax

; 1417 : 							iToBeDiscardedWorkIndex = CultureHelpers::FindWorkNotChosen(works1, aWorksChosen);

	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _works1$[ebp]
	push	edx
	call	?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ; CultureHelpers::FindWorkNotChosen
	add	esp, 8
	mov	DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp], eax
$LN31@ThemeBuild:

; 1418 : 						}
; 1419 : 
; 1420 : 						// Does this work fit?
; 1421 : 						if (iToBeAcquiredWorkIndex != NO_GREAT_WORK && iToBeDiscardedWorkIndex != NO_GREAT_WORK)

	cmp	DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp], -1
	je	$LN36@ThemeBuild
	cmp	DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp], -1
	je	$LN36@ThemeBuild

; 1422 : 						{
; 1423 : 							EraTypes eEra = pkGameCulture->m_CurrentGreatWorks[iToBeAcquiredWorkIndex].m_eEra;

	mov	eax, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+eax+40]
	mov	DWORD PTR _eEra$224279[ebp], eax

; 1424 : 							PlayerTypes ePlayer = pkGameCulture->GetGreatWorkCreator(iToBeAcquiredWorkIndex);

	mov	ecx, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkCreator
	mov	DWORD PTR _ePlayer$224280[ebp], eax

; 1425 : 							if (CultureHelpers::IsValidForThemingBonus(pkBonusInfo, eEra, aErasSeen, ePlayer, aPlayersSeen, m_pPlayer->GetID()))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T236105[ebp], ecx
	mov	edx, DWORD PTR $T236105[ebp]
	push	edx
	lea	eax, DWORD PTR _aPlayersSeen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$224280[ebp]
	push	ecx
	lea	edx, DWORD PTR _aErasSeen$[ebp]
	push	edx
	mov	eax, DWORD PTR _eEra$224279[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkBonusInfo$224225[ebp]
	push	ecx
	call	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
	add	esp, 24					; 00000018H
	movzx	edx, al
	test	edx, edx
	je	$LN36@ThemeBuild

; 1426 : 							{
; 1427 : 								aWorksChosen.push_back(iToBeAcquiredWorkIndex);

	lea	eax, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	push	eax
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1428 : 								if (CultureHelpers::GetThemingBonusIndex(m_pPlayer->GetID(), pkEntry, aWorksChosen) == iI)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236145[ebp], eax
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR $T236145[ebp]
	push	eax
	call	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _iI$224221[ebp]
	jne	$LN36@ThemeBuild

; 1429 : 								{
; 1430 : 									bool bSwapSuccess = pkGameCulture->SwapGreatWorks(m_pPlayer->GetID(), iToBeDiscardedWorkIndex, ePlayer, iToBeAcquiredWorkIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236154[ebp], eax
	mov	ecx, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$224280[ebp]
	push	edx
	mov	eax, DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236154[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z ; CvGameCulture::SwapGreatWorks
	mov	BYTE PTR _bSwapSuccess$224283[ebp], al

; 1431 : 									if (bSwapSuccess)

	movzx	edx, BYTE PTR _bSwapSuccess$224283[ebp]
	test	edx, edx
	je	$LN36@ThemeBuild

; 1432 : 									{
; 1433 : 										bThemedProperly = true;

	mov	BYTE PTR _bThemedProperly$224259[ebp], 1

; 1434 : 
; 1435 : 										LogSwapWorks(ePlayer, iToBeDiscardedWorkIndex, iToBeAcquiredWorkIndex);

	mov	eax, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	push	eax
	mov	ecx, DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$224280[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z ; CvPlayerCulture::LogSwapWorks

; 1436 : 
; 1437 : 										// Update works list
; 1438 : 										tempWorks.clear();

	mov	eax, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T236170[ebp], eax
	mov	ecx, DWORD PTR $T236170[ebp]
	mov	DWORD PTR $T236196[ebp], ecx
	mov	edx, DWORD PTR $T236196[ebp]
	mov	DWORD PTR $T236195[ebp], edx
	mov	eax, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T236186[ebp], eax
	mov	ecx, DWORD PTR $T236186[ebp]
	mov	DWORD PTR $T236198[ebp], ecx
	mov	edx, DWORD PTR $T236198[ebp]
	mov	DWORD PTR $T236197[ebp], edx
	mov	eax, DWORD PTR $T236195[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236197[ebp]
	push	ecx
	lea	edx, DWORD PTR $T236199[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1439 : 										if (!pkBonusInfo->IsMustBeArtifact())

	mov	eax, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	cl, BYTE PTR [eax+35]
	mov	BYTE PTR $T236215[ebp], cl
	movzx	edx, BYTE PTR $T236215[ebp]
	test	edx, edx
	jne	$LN26@ThemeBuild

; 1440 : 										{
; 1441 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1442 : 											for (it3 = works1.begin(); it3 != works1.end(); ++it3)
; 1443 : #else
; 1444 : 											for (it3 = works1.begin(); it3 != works1.end(); it3++)

	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236225[ebp], ecx
	mov	edx, DWORD PTR $T236225[ebp]
	mov	DWORD PTR $T234611[ebp], edx
	mov	eax, DWORD PTR $T234611[ebp]
	mov	DWORD PTR _it3$[ebp], eax
	jmp	SHORT $LN25@ThemeBuild
$LN24@ThemeBuild:
	mov	ecx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR __Tmp$236242[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it3$[ebp], edx
	mov	eax, DWORD PTR __Tmp$236242[ebp]
	mov	DWORD PTR $T234612[ebp], eax
$LN25@ThemeBuild:
	mov	ecx, DWORD PTR _works1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236257[ebp], edx
	mov	eax, DWORD PTR $T236257[ebp]
	mov	DWORD PTR $T234613[ebp], eax
	mov	ecx, DWORD PTR _it3$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234613[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN23@ThemeBuild

; 1445 : #endif
; 1446 : 											{
; 1447 : 												if (it3->m_iGreatWorkIndex == iToBeDiscardedWorkIndex)

	mov	edx, DWORD PTR _it3$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp]
	jne	SHORT $LN795@ThemeBuild

; 1448 : 												{
; 1449 : 													it3->m_iGreatWorkIndex = iToBeAcquiredWorkIndex;

	mov	ecx, DWORD PTR _it3$[ebp]
	mov	edx, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	mov	DWORD PTR [ecx], edx

; 1450 : 													GetGreatWorkLocation(it3->m_iGreatWorkIndex, it3->m_iCityID, it3->m_eBuilding, it3->m_iSlot);

	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236317[ebp], eax
	mov	ecx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236333[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236349[ebp], edx
	mov	eax, DWORD PTR $T236317[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR $T236333[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR $T236349[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1451 : 												}
; 1452 : 												tempWorks.push_back(*it3);

$LN795@ThemeBuild:
	mov	edx, DWORD PTR _it3$[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back

; 1453 : 											}

	jmp	$LN24@ThemeBuild
$LN23@ThemeBuild:

; 1454 : 											works1 = tempWorks;

	lea	eax, DWORD PTR _tempWorks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _works1$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1455 : 										}
; 1456 : 										else

	jmp	$LN1025@ThemeBuild
$LN26@ThemeBuild:

; 1457 : 										{
; 1458 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1459 : 											for (it3 = works2.begin(); it3 != works2.end(); ++it3)
; 1460 : #else
; 1461 : 											for (it3 = works2.begin(); it3 != works2.end(); it3++)

	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236584[ebp], edx
	mov	eax, DWORD PTR $T236584[ebp]
	mov	DWORD PTR $T234614[ebp], eax
	mov	ecx, DWORD PTR $T234614[ebp]
	mov	DWORD PTR _it3$[ebp], ecx
	jmp	SHORT $LN20@ThemeBuild
$LN19@ThemeBuild:
	mov	edx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR __Tmp$236606[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it3$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$236606[ebp]
	mov	DWORD PTR $T234615[ebp], ecx
$LN20@ThemeBuild:
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T236616[ebp], eax
	mov	ecx, DWORD PTR $T236616[ebp]
	mov	DWORD PTR $T234616[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234616[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN18@ThemeBuild

; 1462 : #endif
; 1463 : 											{
; 1464 : 												if (it3->m_iGreatWorkIndex == iToBeDiscardedWorkIndex)

	mov	eax, DWORD PTR _it3$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp]
	jne	SHORT $LN938@ThemeBuild

; 1465 : 												{
; 1466 : 													it3->m_iGreatWorkIndex = iToBeAcquiredWorkIndex;

	mov	edx, DWORD PTR _it3$[ebp]
	mov	eax, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	mov	DWORD PTR [edx], eax

; 1467 : 													GetGreatWorkLocation(it3->m_iGreatWorkIndex, it3->m_iCityID, it3->m_eBuilding, it3->m_iSlot);

	mov	ecx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236676[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236692[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T236708[ebp], eax
	mov	ecx, DWORD PTR $T236676[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR $T236692[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR $T236708[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _it3$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1468 : 												}
; 1469 : 												tempWorks.push_back(*it3);

$LN938@ThemeBuild:
	mov	eax, DWORD PTR _it3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back

; 1470 : 											}

	jmp	$LN19@ThemeBuild
$LN18@ThemeBuild:

; 1471 : 											works2 = tempWorks;

	lea	ecx, DWORD PTR _tempWorks$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _works2$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1472 : 										}
; 1473 : 
; 1474 : 										CultureHelpers::SendArtSwapNotification(pkEntry->GetGreatWorkSlotType(), pkBonusInfo->IsMustBeArt(), m_pPlayer->GetID(), ePlayer, iToBeDiscardedWorkIndex, iToBeAcquiredWorkIndex);

$LN1025@ThemeBuild:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T236942[ebp], ecx
	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	al, BYTE PTR [edx+34]
	mov	BYTE PTR $T236946[ebp], al
	mov	ecx, DWORD PTR _iToBeAcquiredWorkIndex$224271[ebp]
	push	ecx
	mov	edx, DWORD PTR _iToBeDiscardedWorkIndex$224272[ebp]
	push	edx
	mov	eax, DWORD PTR _ePlayer$224280[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236942[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T236946[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	push	eax
	call	?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z ; CultureHelpers::SendArtSwapNotification
	add	esp, 24					; 00000018H

; 1475 : 										break;  // Themed it through acquisition

	jmp	SHORT $LN41@ThemeBuild
$LN36@ThemeBuild:

; 1476 : 									}
; 1477 : 								}
; 1478 : 							}
; 1479 : 						}
; 1480 : 					}
; 1481 : 				}

	jmp	$LN38@ThemeBuild
$LN41@ThemeBuild:

; 1482 : 			}
; 1483 : 
; 1484 : 			if (bThemedProperly)

	movzx	eax, BYTE PTR _bThemedProperly$224259[ebp]
	test	eax, eax
	je	$LN16@ThemeBuild

; 1485 : 			{
; 1486 : 				for (int jJ = 0; jJ < (int)aWorksChosen.size(); jJ++)

	mov	DWORD PTR _jJ$224302[ebp], 0
	jmp	SHORT $LN1029@ThemeBuild
$LN14@ThemeBuild:
	mov	ecx, DWORD PTR _jJ$224302[ebp]
	add	ecx, 1
	mov	DWORD PTR _jJ$224302[ebp], ecx
$LN1029@ThemeBuild:
	mov	edx, DWORD PTR _aWorksChosen$[ebp+8]
	sub	edx, DWORD PTR _aWorksChosen$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _jJ$224302[ebp], edx
	jge	$LN13@ThemeBuild

; 1487 : 				{
; 1488 : 					for (int kK = 0; kK < (int)worksToConsider.size(); kK++)

	mov	DWORD PTR _kK$224307[ebp], 0
	jmp	SHORT $LN1031@ThemeBuild
$LN11@ThemeBuild:
	mov	eax, DWORD PTR _kK$224307[ebp]
	add	eax, 1
	mov	DWORD PTR _kK$224307[ebp], eax
$LN1031@ThemeBuild:
	mov	eax, DWORD PTR _worksToConsider$[ebp+8]
	sub	eax, DWORD PTR _worksToConsider$[ebp+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR _kK$224307[ebp], eax
	jge	$LN10@ThemeBuild

; 1489 : 					{
; 1490 : 						if (worksToConsider[kK].m_iGreatWorkIndex == aWorksChosen[jJ])

	mov	edx, DWORD PTR _kK$224307[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR _worksToConsider$[ebp+4]
	mov	DWORD PTR $T236956[ebp], edx
	mov	eax, DWORD PTR _aWorksChosen$[ebp+4]
	mov	ecx, DWORD PTR $T236956[ebp]
	mov	edx, DWORD PTR _jJ$224302[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx*4]
	jne	SHORT $LN9@ThemeBuild

; 1491 : 						{
; 1492 : 							MoveWorkIntoSlot(worksToConsider[kK], buildingIt->m_iCityID, buildingIt->m_eBuilding, jJ);

	mov	edx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T236968[ebp], edx
	mov	eax, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T236977[ebp], eax
	mov	ecx, DWORD PTR _jJ$224302[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236968[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR $T236977[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _kK$224307[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _worksToConsider$[ebp+4]
	add	ecx, eax
	sub	esp, 24					; 00000018H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ; CvPlayerCulture::MoveWorkIntoSlot

; 1493 : 							break;

	jmp	SHORT $LN10@ThemeBuild
$LN9@ThemeBuild:

; 1494 : 						}
; 1495 : 					}

	jmp	$LN11@ThemeBuild
$LN10@ThemeBuild:

; 1496 : 				}

	jmp	$LN14@ThemeBuild
$LN13@ThemeBuild:

; 1497 : 
; 1498 : 				// Remove these works from those to consider later
; 1499 : 				tempWorks.clear();

	mov	edx, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T236996[ebp], edx
	mov	eax, DWORD PTR $T236996[ebp]
	mov	DWORD PTR $T237022[ebp], eax
	mov	ecx, DWORD PTR $T237022[ebp]
	mov	DWORD PTR $T237021[ebp], ecx
	mov	edx, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T237012[ebp], edx
	mov	eax, DWORD PTR $T237012[ebp]
	mov	DWORD PTR $T237024[ebp], eax
	mov	ecx, DWORD PTR $T237024[ebp]
	mov	DWORD PTR $T237023[ebp], ecx
	mov	edx, DWORD PTR $T237021[ebp]
	push	edx
	mov	eax, DWORD PTR $T237023[ebp]
	push	eax
	lea	ecx, DWORD PTR $T237025[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1500 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1501 : 				for (it3 = works1.begin(); it3 != works1.end(); ++it3)
; 1502 : #else
; 1503 : 				for (it3 = works1.begin(); it3 != works1.end(); it3++)

	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T237047[ebp], eax
	mov	ecx, DWORD PTR $T237047[ebp]
	mov	DWORD PTR $T234617[ebp], ecx
	mov	edx, DWORD PTR $T234617[ebp]
	mov	DWORD PTR _it3$[ebp], edx
	jmp	SHORT $LN8@ThemeBuild
$LN7@ThemeBuild:
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR __Tmp$237064[ebp], eax
	mov	ecx, DWORD PTR _it3$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it3$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$237064[ebp]
	mov	DWORD PTR $T234618[ebp], edx
$LN8@ThemeBuild:
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T237079[ebp], ecx
	mov	edx, DWORD PTR $T237079[ebp]
	mov	DWORD PTR $T234619[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T234619[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN6@ThemeBuild

; 1504 : #endif
; 1505 : 				{
; 1506 : 					// Copy it over if not chosen, updating its location
; 1507 : 					if (find(aWorksChosen.begin(), aWorksChosen.end(), it3->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T237103[ebp], ecx
	mov	edx, DWORD PTR $T237103[ebp]
	mov	DWORD PTR $T234623[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237125[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T237135[ebp], ecx
	mov	edx, DWORD PTR $T237135[ebp]
	mov	DWORD PTR $T234620[ebp], edx
	mov	eax, DWORD PTR _aWorksChosen$[ebp+4]
	mov	DWORD PTR $T237151[ebp], eax
	mov	ecx, DWORD PTR $T237151[ebp]
	mov	DWORD PTR $T234621[ebp], ecx
	mov	edx, DWORD PTR $T234620[ebp]
	mov	DWORD PTR $T237164[ebp], edx
	mov	eax, DWORD PTR $T234621[ebp]
	mov	DWORD PTR $T237163[ebp], eax
	mov	ecx, DWORD PTR $T237125[ebp]
	push	ecx
	mov	edx, DWORD PTR $T237164[ebp]
	push	edx
	mov	eax, DWORD PTR $T237163[ebp]
	push	eax
	lea	ecx, DWORD PTR $T237162[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T237163[ebp], edx
	mov	eax, DWORD PTR $T237163[ebp]
	mov	DWORD PTR $T234622[ebp], eax
	mov	ecx, DWORD PTR $T234622[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234623[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@ThemeBuild

; 1508 : 					{
; 1509 : 						GetGreatWorkLocation(it3->m_iGreatWorkIndex, it3->m_iCityID, it3->m_eBuilding, it3->m_iSlot);

	mov	ecx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237183[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237199[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237215[ebp], eax
	mov	ecx, DWORD PTR $T237183[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR $T237199[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR $T237215[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _it3$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1510 : 						tempWorks.push_back(*it3);

	mov	eax, DWORD PTR _it3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN5@ThemeBuild:

; 1511 : 					}
; 1512 : 				}

	jmp	$LN7@ThemeBuild
$LN6@ThemeBuild:

; 1513 : 				works1 = tempWorks;

	lea	ecx, DWORD PTR _tempWorks$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _works1$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1514 : 
; 1515 : 				tempWorks.clear();

	mov	edx, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T237456[ebp], edx
	mov	eax, DWORD PTR $T237456[ebp]
	mov	DWORD PTR $T237482[ebp], eax
	mov	ecx, DWORD PTR $T237482[ebp]
	mov	DWORD PTR $T237481[ebp], ecx
	mov	edx, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T237472[ebp], edx
	mov	eax, DWORD PTR $T237472[ebp]
	mov	DWORD PTR $T237484[ebp], eax
	mov	ecx, DWORD PTR $T237484[ebp]
	mov	DWORD PTR $T237483[ebp], ecx
	mov	edx, DWORD PTR $T237481[ebp]
	push	edx
	mov	eax, DWORD PTR $T237483[ebp]
	push	eax
	lea	ecx, DWORD PTR $T237485[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1516 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1517 : 				for (it3 = works2.begin(); it3 != works2.end(); ++it3)
; 1518 : #else
; 1519 : 				for (it3 = works2.begin(); it3 != works2.end(); it3++)

	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T237507[ebp], eax
	mov	ecx, DWORD PTR $T237507[ebp]
	mov	DWORD PTR $T234624[ebp], ecx
	mov	edx, DWORD PTR $T234624[ebp]
	mov	DWORD PTR _it3$[ebp], edx
	jmp	SHORT $LN4@ThemeBuild
$LN3@ThemeBuild:
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR __Tmp$237524[ebp], eax
	mov	ecx, DWORD PTR _it3$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it3$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$237524[ebp]
	mov	DWORD PTR $T234625[ebp], edx
$LN4@ThemeBuild:
	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T237539[ebp], ecx
	mov	edx, DWORD PTR $T237539[ebp]
	mov	DWORD PTR $T234626[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T234626[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN2@ThemeBuild

; 1520 : #endif
; 1521 : 				{
; 1522 : 					// Copy it over if not chosen, updating its location
; 1523 : 					if (find(aWorksChosen.begin(), aWorksChosen.end(), it3->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T237563[ebp], ecx
	mov	edx, DWORD PTR $T237563[ebp]
	mov	DWORD PTR $T234630[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237585[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T237595[ebp], ecx
	mov	edx, DWORD PTR $T237595[ebp]
	mov	DWORD PTR $T234627[ebp], edx
	mov	eax, DWORD PTR _aWorksChosen$[ebp+4]
	mov	DWORD PTR $T237611[ebp], eax
	mov	ecx, DWORD PTR $T237611[ebp]
	mov	DWORD PTR $T234628[ebp], ecx
	mov	edx, DWORD PTR $T234627[ebp]
	mov	DWORD PTR $T237624[ebp], edx
	mov	eax, DWORD PTR $T234628[ebp]
	mov	DWORD PTR $T237623[ebp], eax
	mov	ecx, DWORD PTR $T237585[ebp]
	push	ecx
	mov	edx, DWORD PTR $T237624[ebp]
	push	edx
	mov	eax, DWORD PTR $T237623[ebp]
	push	eax
	lea	ecx, DWORD PTR $T237621[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T237623[ebp], edx
	mov	eax, DWORD PTR $T237623[ebp]
	mov	DWORD PTR $T234629[ebp], eax
	mov	ecx, DWORD PTR $T234629[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T234630[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@ThemeBuild

; 1524 : 					{
; 1525 : 						GetGreatWorkLocation(it3->m_iGreatWorkIndex, it3->m_iCityID, it3->m_eBuilding, it3->m_iSlot);

	mov	ecx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237643[ebp], ecx
	mov	edx, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237659[ebp], edx
	mov	eax, DWORD PTR _it3$[ebp]
	mov	DWORD PTR $T237675[ebp], eax
	mov	ecx, DWORD PTR $T237643[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR $T237659[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR $T237675[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _it3$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1526 : 						tempWorks.push_back(*it3);

	mov	eax, DWORD PTR _it3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN1@ThemeBuild:

; 1527 : 					}
; 1528 : 				}

	jmp	$LN3@ThemeBuild
$LN2@ThemeBuild:

; 1529 : 				works2 = tempWorks;

	lea	ecx, DWORD PTR _tempWorks$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _works2$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1530 : 
; 1531 : 				// All done
; 1532 : 				LogThemedBuilding(buildingIt->m_iCityID, buildingIt->m_eBuilding, pkBonusInfo->GetBonus());

	mov	edx, DWORD PTR _pkBonusInfo$224225[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T237904[ebp], eax
	mov	ecx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T237913[ebp], ecx
	mov	edx, DWORD PTR $T237904[ebp]
	push	edx
	mov	eax, DWORD PTR $T237913[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _buildingIt$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z ; CvPlayerCulture::LogThemedBuilding

; 1533 : 				return true;

	mov	BYTE PTR $T234631[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T234631[ebp]
	jmp	SHORT $LN68@ThemeBuild
$LN16@ThemeBuild:

; 1534 : 			}
; 1535 : 		}

	jmp	$LN50@ThemeBuild
$LN49@ThemeBuild:

; 1536 : 	}

	jmp	$LN64@ThemeBuild
$LN63@ThemeBuild:

; 1537 : 	return false;

	mov	BYTE PTR $T234632[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T234632[ebp]
$LN68@ThemeBuild:

; 1538 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$0:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$1:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$2:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$3:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$4:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$10:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$12:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$14:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$16:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$18:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$20:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$22:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$24:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$26:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$28:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$30:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$32:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$34:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$36:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$38:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$40:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$42:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$44:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$46:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z$48:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1776]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ThemeBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1_N@Z ENDP ; CvPlayerCulture::ThemeBuilding
PUBLIC	??4?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::operator=
PUBLIC	??4?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::operator=
PUBLIC	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=
PUBLIC	??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z ; std::_Find<std::_Vector_iterator<enum EraTypes,std::allocator<enum EraTypes> >,enum EraTypes>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z DD 019930522H
	DD	01dH
	DD	FLAT:__unwindtable$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$17
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$19
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$21
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$25
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$4
	DD	0cH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$5
	DD	0dH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$6
	DD	0dH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$30
	DD	0cH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$32
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$34
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$36
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$38
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$40
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$42
	DD	0dH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$44
	DD	0cH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$46
	DD	03H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$48
	DD	02H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$50
	DD	01H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$52
	DD	00H
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$54
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$56
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z
_TEXT	SEGMENT
_this$ = -1860						; size = 4
$T241516 = -1764					; size = 4
$T241287 = -1648					; size = 4
$T241271 = -1644					; size = 4
$T241255 = -1640					; size = 4
$T241236 = -1636					; size = 4
$T241235 = -1632					; size = 4
$T241234 = -1628					; size = 4
$T241223 = -1624					; size = 4
$T241207 = -1620					; size = 4
$T241197 = -1616					; size = 4
$T241175 = -1612					; size = 4
$T241151 = -1608					; size = 4
__Tmp$241136 = -1604					; size = 4
$T241119 = -1600					; size = 4
$T241084 = -1596					; size = 4
$T241068 = -1592					; size = 4
$T241097 = -1588					; size = 4
$T241096 = -1584					; size = 4
$T241095 = -1580					; size = 4
$T241094 = -1576					; size = 4
$T241093 = -1572					; size = 4
$T240827 = -1456					; size = 4
$T240811 = -1452					; size = 4
$T240795 = -1448					; size = 4
$T240776 = -1444					; size = 4
$T240775 = -1440					; size = 4
$T240773 = -1436					; size = 4
$T240763 = -1432					; size = 4
$T240747 = -1428					; size = 4
$T240737 = -1424					; size = 4
$T240715 = -1420					; size = 4
$T240691 = -1416					; size = 4
__Tmp$240681 = -1412					; size = 4
$T240659 = -1408					; size = 4
$T240624 = -1404					; size = 4
$T240608 = -1400					; size = 4
$T240637 = -1396					; size = 4
$T240636 = -1392					; size = 4
$T240635 = -1388					; size = 4
$T240634 = -1384					; size = 4
$T240633 = -1380					; size = 4
$T240586 = -1376					; size = 4
$T240573 = -1372					; size = 4
$T240563 = -1365					; size = 1
$T240559 = -1364					; size = 4
$T240325 = -1248					; size = 4
$T240309 = -1244					; size = 4
$T240293 = -1240					; size = 4
$T240233 = -1236					; size = 4
__Tmp$240218 = -1232					; size = 4
$T240201 = -1228					; size = 4
$T240166 = -1224					; size = 4
$T240150 = -1220					; size = 4
$T240179 = -1216					; size = 4
$T240178 = -1212					; size = 4
$T240177 = -1208					; size = 4
$T240176 = -1204					; size = 4
$T240175 = -1200					; size = 4
$T240134 = -1196					; size = 4
$T240125 = -1192					; size = 4
$T240085 = -1168					; size = 4
$T240073 = -1161					; size = 1
$T240058 = -1160					; size = 4
$T239929 = -1096					; size = 4
$T239920 = -1092					; size = 4
$T239911 = -1088					; size = 4
$T239885 = -1084					; size = 4
__Tmp$239875 = -1080					; size = 4
__Tmp$239866 = -1076					; size = 4
$T239279 = -744						; size = 4
$T239278 = -740						; size = 4
$T239277 = -736						; size = 4
$T239266 = -732						; size = 4
$T239250 = -728						; size = 4
$T239240 = -724						; size = 4
$T239225 = -720						; size = 4
$T239215 = -713						; size = 1
$T239208 = -712						; size = 4
$T239199 = -705						; size = 1
$T239195 = -704						; size = 4
$T239186 = -700						; size = 4
$T239177 = -693						; size = 1
$T239173 = -692						; size = 4
$T239164 = -688						; size = 4
$T239155 = -681						; size = 1
$T239134 = -680						; size = 4
__Tmp$239121 = -676					; size = 4
$T239109 = -672						; size = 4
$T238955 = -584						; size = 4
$T238946 = -580						; size = 4
$T238937 = -576						; size = 4
$T238911 = -572						; size = 4
__Tmp$238901 = -568					; size = 4
__Tmp$238892 = -564					; size = 4
$T238741 = -500						; size = 4
$T238725 = -496						; size = 4
$T238753 = -492						; size = 4
$T238752 = -488						; size = 4
$T238751 = -484						; size = 4
$T238750 = -480						; size = 4
$T238749 = -476						; size = 4
$T238684 = -472						; size = 4
$T238668 = -468						; size = 4
$T238696 = -464						; size = 4
$T238695 = -460						; size = 4
$T238694 = -456						; size = 4
$T238693 = -452						; size = 4
$T238692 = -448						; size = 4
$T238627 = -444						; size = 4
$T238611 = -440						; size = 4
$T238639 = -436						; size = 4
$T238638 = -432						; size = 4
$T238637 = -428						; size = 4
$T238636 = -424						; size = 4
$T238635 = -420						; size = 4
$T238595 = -416						; size = 4
$T238586 = -412						; size = 4
$T238577 = -405						; size = 1
$T238573 = -404						; size = 4
$T238564 = -400						; size = 4
$T238555 = -393						; size = 1
$T238537 = -392						; size = 4
__Tmp$238524 = -388					; size = 4
$T238512 = -384						; size = 4
$T238321 = -348						; size = 4
$T238310 = -342						; size = 1
$T238309 = -341						; size = 1
$T238308 = -340						; size = 4
$T238307 = -336						; size = 4
$T238306 = -332						; size = 4
$T238305 = -328						; size = 4
$T238304 = -324						; size = 4
$T238303 = -320						; size = 4
$T238302 = -316						; size = 4
$T238301 = -312						; size = 4
$T238300 = -308						; size = 4
$T238299 = -304						; size = 4
$T238298 = -300						; size = 4
$T238297 = -296						; size = 4
$T238296 = -292						; size = 4
$T238295 = -288						; size = 4
$T238294 = -284						; size = 4
$T238293 = -280						; size = 4
$T238292 = -276						; size = 4
$T238291 = -272						; size = 4
$T238290 = -268						; size = 4
$T238289 = -264						; size = 4
$T238288 = -260						; size = 4
$T238287 = -256						; size = 4
$T238286 = -252						; size = 4
$T238285 = -248						; size = 4
$T238284 = -244						; size = 4
$T238283 = -240						; size = 4
$T238282 = -236						; size = 4
$T238281 = -232						; size = 4
$T238280 = -228						; size = 4
$T238279 = -224						; size = 4
$T238278 = -220						; size = 4
$T238277 = -216						; size = 4
$T238276 = -212						; size = 4
$T238275 = -206						; size = 1
$T238274 = -205						; size = 1
_kK$224667 = -204					; size = 4
_kK$224661 = -200					; size = 4
_jJ$224656 = -196					; size = 4
_bSwapSuccessful$224646 = -189				; size = 1
_ePlayer$224643 = -188					; size = 4
_eEra$224642 = -184					; size = 4
_iToBeDiscardedWorkIndex$224640 = -180			; size = 4
_iToBeAcquiredWorkIndex$224639 = -176			; size = 4
_kPlayer$224635 = -172					; size = 4
_iLoopPlayer$224631 = -168				; size = 4
_it4$224618 = -164					; size = 4
_bThemedProperly$224627 = -157				; size = 1
_aPlayersSeen$224434 = -156				; size = 16
_aErasSeen$224439 = -140				; size = 16
_it3$224444 = -124					; size = 4
_aWorksChosen$224429 = -120				; size = 16
_it2$224415 = -104					; size = 4
_aArtifactsErasSeen$ = -100				; size = 16
_aArtifactsChosen$ = -84				; size = 16
_aArtifactsPlayersSeen$ = -68				; size = 16
_pkEntry$ = -52						; size = 4
_pkBonusInfo$ = -48					; size = 4
_pkGameCulture$ = -44					; size = 4
_it5$ = -40						; size = 4
_tempWorks$ = -36					; size = 16
_iWorksInHalf$ = -20					; size = 4
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_kBldg$ = 8						; size = 12
_iThemingBonusIndex$ = 20				; size = 4
_iNumSlots$ = 24					; size = 4
_works1$ = 28						; size = 4
_works2$ = 32						; size = 4
___formal$ = 36						; size = 1
?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z PROC ; CvPlayerCulture::ThemeEqualArtArtifact, COMDAT
; _this$ = ecx

; 1546 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1848				; 00000738H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1547 : 	CvGameCulture *pkGameCulture = GC.getGame().GetGameCulture();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238321[ebp], eax
	mov	ecx, DWORD PTR $T238321[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR _pkGameCulture$[ebp], eax

; 1548 : 
; 1549 : 	vector<CvGreatWorkInMyEmpire>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 1550 : 	vector<CvGreatWorkInMyEmpire>::iterator it5;

	mov	DWORD PTR _it5$[ebp], 0

; 1551 : 	vector<CvGreatWorkInMyEmpire> tempWorks;

	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1552 : 
; 1553 : 	vector<int> aArtifactsChosen;

	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1554 : 	vector<PlayerTypes> aArtifactsPlayersSeen;

	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1555 : 	vector<EraTypes> aArtifactsErasSeen;

	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1556 : 
; 1557 : #ifdef AUI_WARNING_FIXES
; 1558 : 	uint iWorksInHalf = iNumSlots >> 1;
; 1559 : 	if (iWorksInHalf >> 1 != 0 || works1.size() < iWorksInHalf || works2.size() < iWorksInHalf)
; 1560 : #else
; 1561 : 	int iWorksInHalf = iNumSlots / 2;

	mov	eax, DWORD PTR _iNumSlots$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iWorksInHalf$[ebp], eax

; 1562 : 	if (iWorksInHalf % 2 != 0 || (int)works1.size() < iWorksInHalf || (int)works2.size() < iWorksInHalf)

	mov	ecx, DWORD PTR _iWorksInHalf$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN1571@ThemeEqual
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN1571@ThemeEqual:
	test	ecx, ecx
	jne	SHORT $LN59@ThemeEqual
	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, DWORD PTR _iWorksInHalf$[ebp]
	jl	SHORT $LN59@ThemeEqual
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, DWORD PTR _iWorksInHalf$[ebp]
	jge	SHORT $LN60@ThemeEqual
$LN59@ThemeEqual:

; 1563 : #endif
; 1564 : 	{
; 1565 : 		return false;

	mov	BYTE PTR $T238274[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T238274[ebp]
	jmp	$LN61@ThemeEqual
$LN60@ThemeEqual:

; 1566 : 	}
; 1567 : 
; 1568 : 	CvBuildingEntry *pkEntry = GC.getBuildingInfo(kBldg.m_eBuilding);

	mov	edx, DWORD PTR _kBldg$[ebp+4]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 1569 : 	if (!pkEntry || pkEntry->GetGreatWorkCount() < 2)

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN57@ThemeEqual
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	cmp	eax, 2
	jge	SHORT $LN58@ThemeEqual
$LN57@ThemeEqual:

; 1570 : 	{
; 1571 : 		return false;

	mov	BYTE PTR $T238275[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T238275[ebp]
	jmp	$LN61@ThemeEqual
$LN58@ThemeEqual:

; 1572 : 	}
; 1573 : 
; 1574 : 	CvThemingBonusInfo *pkBonusInfo = pkEntry->GetThemingBonusInfo(iThemingBonusIndex);

	mov	eax, DWORD PTR _iThemingBonusIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR _pkBonusInfo$[ebp], eax

; 1575 : 
; 1576 : 	// Try each of the Artifacts as the starter
; 1577 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1578 : 	for (it = works2.begin(); it != works2.end(); ++it)
; 1579 : #else
; 1580 : 	for (it = works2.begin(); it != works2.end(); it++)

	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238512[ebp], edx
	mov	eax, DWORD PTR $T238512[ebp]
	mov	DWORD PTR $T238276[ebp], eax
	mov	ecx, DWORD PTR $T238276[ebp]
	mov	DWORD PTR _it$[ebp], ecx
	jmp	SHORT $LN56@ThemeEqual
$LN55@ThemeEqual:
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$238524[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$238524[ebp]
	mov	DWORD PTR $T238277[ebp], ecx
$LN56@ThemeEqual:
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T238537[ebp], eax
	mov	ecx, DWORD PTR $T238537[ebp]
	mov	DWORD PTR $T238278[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T238278[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN54@ThemeEqual

; 1581 : #endif
; 1582 : 	{
; 1583 : 		// First, make sure this "starter" is valid
; 1584 : 		if (pkBonusInfo->IsRequiresOwner() && it->m_ePlayer != m_pPlayer->GetID())

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+37]
	mov	BYTE PTR $T238555[ebp], cl
	movzx	edx, BYTE PTR $T238555[ebp]
	test	edx, edx
	je	SHORT $LN53@ThemeEqual
	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T238564[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T238573[ebp], eax
	mov	ecx, DWORD PTR $T238564[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR $T238573[ebp]
	je	SHORT $LN53@ThemeEqual

; 1585 : 		{
; 1586 : 			continue;

	jmp	$LN55@ThemeEqual
$LN53@ThemeEqual:

; 1587 : 		}
; 1588 : 		if (pkBonusInfo->IsRequiresAnyButOwner() && it->m_ePlayer == m_pPlayer->GetID())

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+38]
	mov	BYTE PTR $T238577[ebp], cl
	movzx	edx, BYTE PTR $T238577[ebp]
	test	edx, edx
	je	SHORT $LN52@ThemeEqual
	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T238586[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T238595[ebp], eax
	mov	ecx, DWORD PTR $T238586[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR $T238595[ebp]
	jne	SHORT $LN52@ThemeEqual

; 1589 : 		{
; 1590 : 			continue;

	jmp	$LN55@ThemeEqual
$LN52@ThemeEqual:

; 1591 : 		}
; 1592 : 
; 1593 : 		aArtifactsChosen.clear();

	mov	eax, DWORD PTR _aArtifactsChosen$[ebp+8]
	mov	DWORD PTR $T238611[ebp], eax
	mov	ecx, DWORD PTR $T238611[ebp]
	mov	DWORD PTR $T238636[ebp], ecx
	mov	edx, DWORD PTR $T238636[ebp]
	mov	DWORD PTR $T238635[ebp], edx
	mov	eax, DWORD PTR _aArtifactsChosen$[ebp+4]
	mov	DWORD PTR $T238627[ebp], eax
	mov	ecx, DWORD PTR $T238627[ebp]
	mov	DWORD PTR $T238638[ebp], ecx
	mov	edx, DWORD PTR $T238638[ebp]
	mov	DWORD PTR $T238637[ebp], edx
	mov	eax, DWORD PTR $T238635[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238637[ebp]
	push	ecx
	lea	edx, DWORD PTR $T238639[ebp]
	push	edx
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1594 : 		aArtifactsPlayersSeen.clear();

	mov	eax, DWORD PTR _aArtifactsPlayersSeen$[ebp+8]
	mov	DWORD PTR $T238668[ebp], eax
	mov	ecx, DWORD PTR $T238668[ebp]
	mov	DWORD PTR $T238693[ebp], ecx
	mov	edx, DWORD PTR $T238693[ebp]
	mov	DWORD PTR $T238692[ebp], edx
	mov	eax, DWORD PTR _aArtifactsPlayersSeen$[ebp+4]
	mov	DWORD PTR $T238684[ebp], eax
	mov	ecx, DWORD PTR $T238684[ebp]
	mov	DWORD PTR $T238695[ebp], ecx
	mov	edx, DWORD PTR $T238695[ebp]
	mov	DWORD PTR $T238694[ebp], edx
	mov	eax, DWORD PTR $T238692[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238694[ebp]
	push	ecx
	lea	edx, DWORD PTR $T238696[ebp]
	push	edx
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase

; 1595 : 		aArtifactsErasSeen.clear();

	mov	eax, DWORD PTR _aArtifactsErasSeen$[ebp+8]
	mov	DWORD PTR $T238725[ebp], eax
	mov	ecx, DWORD PTR $T238725[ebp]
	mov	DWORD PTR $T238750[ebp], ecx
	mov	edx, DWORD PTR $T238750[ebp]
	mov	DWORD PTR $T238749[ebp], edx
	mov	eax, DWORD PTR _aArtifactsErasSeen$[ebp+4]
	mov	DWORD PTR $T238741[ebp], eax
	mov	ecx, DWORD PTR $T238741[ebp]
	mov	DWORD PTR $T238752[ebp], ecx
	mov	edx, DWORD PTR $T238752[ebp]
	mov	DWORD PTR $T238751[ebp], edx
	mov	eax, DWORD PTR $T238749[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238751[ebp]
	push	ecx
	lea	edx, DWORD PTR $T238753[ebp]
	push	edx
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase

; 1596 : 
; 1597 : 		aArtifactsChosen.push_back(it->m_iGreatWorkIndex);

	mov	eax, DWORD PTR _it$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1598 : 		aArtifactsPlayersSeen.push_back(it->m_ePlayer);

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1599 : 		aArtifactsErasSeen.push_back(it->m_eEra);

	mov	edx, DWORD PTR _it$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back

; 1600 : 
; 1601 : 		// Loop through the rest looking for works that will match up
; 1602 : 		vector<CvGreatWorkInMyEmpire>::const_iterator it2 = it;

	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR _it2$224415[ebp], eax

; 1603 : #ifdef AUI_WARNING_FIXES
; 1604 : 		for (++it2; it2 != works2.end() && aArtifactsChosen.size() < iWorksInHalf; ++it2)
; 1605 : #elif defined(AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS)
; 1606 : 		for (++it2; it2 != works2.end() && aArtifactsChosen.size() < (unsigned int)iWorksInHalf; ++it2)
; 1607 : #else
; 1608 : 		for (it2++; it2 != works2.end() && aArtifactsChosen.size() < (unsigned int)iWorksInHalf; it2++)

	mov	ecx, DWORD PTR _it2$224415[ebp]
	mov	DWORD PTR __Tmp$238892[ebp], ecx
	mov	edx, DWORD PTR _it2$224415[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it2$224415[ebp], edx
	mov	eax, DWORD PTR __Tmp$238892[ebp]
	mov	DWORD PTR $T238279[ebp], eax
	jmp	SHORT $LN51@ThemeEqual
$LN50@ThemeEqual:
	mov	ecx, DWORD PTR _it2$224415[ebp]
	mov	DWORD PTR __Tmp$238901[ebp], ecx
	mov	edx, DWORD PTR _it2$224415[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it2$224415[ebp], edx
	mov	eax, DWORD PTR __Tmp$238901[ebp]
	mov	DWORD PTR $T238280[ebp], eax
$LN51@ThemeEqual:
	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T238911[ebp], edx
	mov	eax, DWORD PTR $T238911[ebp]
	mov	DWORD PTR $T238281[ebp], eax
	mov	ecx, DWORD PTR _it2$224415[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T238281[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN400@ThemeEqual
	mov	edx, DWORD PTR _aArtifactsChosen$[ebp+8]
	sub	edx, DWORD PTR _aArtifactsChosen$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR _iWorksInHalf$[ebp]
	jae	$LN400@ThemeEqual

; 1609 : #endif
; 1610 : 		{
; 1611 : 			if (CultureHelpers::IsValidForThemingBonus(pkBonusInfo, it2->m_eEra, aArtifactsErasSeen, it2->m_ePlayer, aArtifactsPlayersSeen, m_pPlayer->GetID()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T238937[ebp], edx
	mov	eax, DWORD PTR _it2$224415[ebp]
	mov	DWORD PTR $T238946[ebp], eax
	mov	ecx, DWORD PTR _it2$224415[ebp]
	mov	DWORD PTR $T238955[ebp], ecx
	mov	edx, DWORD PTR $T238937[ebp]
	push	edx
	lea	eax, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238946[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	lea	eax, DWORD PTR _aArtifactsErasSeen$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238955[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	push	eax
	call	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
	add	esp, 24					; 00000018H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN48@ThemeEqual

; 1612 : 			{
; 1613 : 				aArtifactsChosen.push_back(it2->m_iGreatWorkIndex);

	mov	edx, DWORD PTR _it2$224415[ebp]
	push	edx
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1614 : 				aArtifactsPlayersSeen.push_back(it2->m_ePlayer);

	mov	eax, DWORD PTR _it2$224415[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1615 : 				aArtifactsErasSeen.push_back(it2->m_eEra);

	mov	ecx, DWORD PTR _it2$224415[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
$LN48@ThemeEqual:

; 1616 : 			}
; 1617 : 		}

	jmp	$LN50@ThemeEqual

; 1618 : 
; 1619 : 		// Do we have the right amount of art?
; 1620 : 		if (aArtifactsChosen.size() == iWorksInHalf)

$LN400@ThemeEqual:
	mov	edx, DWORD PTR _aArtifactsChosen$[ebp+8]
	sub	edx, DWORD PTR _aArtifactsChosen$[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR _iWorksInHalf$[ebp]
	jne	$LN47@ThemeEqual

; 1621 : 		{
; 1622 : 			vector<int> aWorksChosen;

	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 1623 : 			vector<PlayerTypes> aPlayersSeen;

	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 1624 : 			vector<EraTypes> aErasSeen;

	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH

; 1625 : 
; 1626 : 			// Now see if we can get the right number of art works to work as well
; 1627 : 			vector<CvGreatWorkInMyEmpire>::const_iterator it3;

	mov	DWORD PTR _it3$224444[ebp], 0

; 1628 : #ifdef AUI_WARNING_FIXES
; 1629 : 			for (it3 = works1.begin(); it3 != works1.end() && aWorksChosen.size() < iNumSlots; ++it3)
; 1630 : #elif defined(AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS)
; 1631 : 			for (it3 = works1.begin(); it3 != works1.end() && aWorksChosen.size() < (unsigned int)iNumSlots; ++it3)
; 1632 : #else
; 1633 : 			for (it3 = works1.begin(); it3 != works1.end() && aWorksChosen.size() < (unsigned int)iNumSlots; it3++)

	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T239109[ebp], ecx
	mov	edx, DWORD PTR $T239109[ebp]
	mov	DWORD PTR $T238282[ebp], edx
	mov	eax, DWORD PTR $T238282[ebp]
	mov	DWORD PTR _it3$224444[ebp], eax
	jmp	SHORT $LN46@ThemeEqual
$LN45@ThemeEqual:
	mov	ecx, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR __Tmp$239121[ebp], ecx
	mov	edx, DWORD PTR _it3$224444[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it3$224444[ebp], edx
	mov	eax, DWORD PTR __Tmp$239121[ebp]
	mov	DWORD PTR $T238283[ebp], eax
$LN46@ThemeEqual:
	mov	ecx, DWORD PTR _works1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T239134[ebp], edx
	mov	eax, DWORD PTR $T239134[ebp]
	mov	DWORD PTR $T238284[ebp], eax
	mov	ecx, DWORD PTR _it3$224444[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T238284[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN44@ThemeEqual
	mov	edx, DWORD PTR _aWorksChosen$224429[ebp+8]
	sub	edx, DWORD PTR _aWorksChosen$224429[ebp+4]
	sar	edx, 2
	cmp	edx, DWORD PTR _iNumSlots$[ebp]
	jae	$LN44@ThemeEqual

; 1634 : #endif
; 1635 : 			{
; 1636 : 				// First, make sure this "starter" is valid
; 1637 : 				if (pkBonusInfo->IsRequiresOwner() && it3->m_ePlayer != m_pPlayer->GetID())

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+37]
	mov	BYTE PTR $T239155[ebp], cl
	movzx	edx, BYTE PTR $T239155[ebp]
	test	edx, edx
	je	SHORT $LN43@ThemeEqual
	mov	eax, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR $T239164[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T239173[ebp], eax
	mov	ecx, DWORD PTR $T239164[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR $T239173[ebp]
	je	SHORT $LN43@ThemeEqual

; 1638 : 				{
; 1639 : 					continue;

	jmp	$LN45@ThemeEqual
$LN43@ThemeEqual:

; 1640 : 				}
; 1641 : 				if (pkBonusInfo->IsRequiresAnyButOwner() && it3->m_ePlayer == m_pPlayer->GetID())

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+38]
	mov	BYTE PTR $T239177[ebp], cl
	movzx	edx, BYTE PTR $T239177[ebp]
	test	edx, edx
	je	SHORT $LN42@ThemeEqual
	mov	eax, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR $T239186[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T239195[ebp], eax
	mov	ecx, DWORD PTR $T239186[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR $T239195[ebp]
	jne	SHORT $LN42@ThemeEqual

; 1642 : 				{
; 1643 : 					continue;

	jmp	$LN45@ThemeEqual
$LN42@ThemeEqual:

; 1644 : 				}
; 1645 : 				if (pkBonusInfo->IsSameEra() && it3->m_eEra != aArtifactsErasSeen[0])

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+32]
	mov	BYTE PTR $T239199[ebp], cl
	movzx	edx, BYTE PTR $T239199[ebp]
	test	edx, edx
	je	SHORT $LN41@ThemeEqual
	mov	eax, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR $T239208[ebp], eax
	xor	ecx, ecx
	shl	ecx, 2
	mov	edx, DWORD PTR _aArtifactsErasSeen$[ebp+4]
	mov	eax, DWORD PTR $T239208[ebp]
	mov	eax, DWORD PTR [eax+20]
	cmp	eax, DWORD PTR [ecx+edx]
	je	SHORT $LN41@ThemeEqual

; 1646 : 				{
; 1647 : 					continue;

	jmp	$LN45@ThemeEqual
$LN41@ThemeEqual:

; 1648 : 				}
; 1649 : 				if (pkBonusInfo->IsUniqueEras() && find(aArtifactsErasSeen.begin(), aArtifactsErasSeen.end(), it3->m_eEra) != aArtifactsErasSeen.end())

	mov	ecx, DWORD PTR _pkBonusInfo$[ebp]
	mov	dl, BYTE PTR [ecx+33]
	mov	BYTE PTR $T239215[ebp], dl
	movzx	eax, BYTE PTR $T239215[ebp]
	test	eax, eax
	je	$LN40@ThemeEqual
	mov	ecx, DWORD PTR _aArtifactsErasSeen$[ebp+8]
	mov	DWORD PTR $T239225[ebp], ecx
	mov	edx, DWORD PTR $T239225[ebp]
	mov	DWORD PTR $T238288[ebp], edx
	mov	eax, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR $T239240[ebp], eax
	mov	ecx, DWORD PTR _aArtifactsErasSeen$[ebp+8]
	mov	DWORD PTR $T239250[ebp], ecx
	mov	edx, DWORD PTR $T239250[ebp]
	mov	DWORD PTR $T238285[ebp], edx
	mov	eax, DWORD PTR _aArtifactsErasSeen$[ebp+4]
	mov	DWORD PTR $T239266[ebp], eax
	mov	ecx, DWORD PTR $T239266[ebp]
	mov	DWORD PTR $T238286[ebp], ecx
	mov	edx, DWORD PTR $T238285[ebp]
	mov	DWORD PTR $T239279[ebp], edx
	mov	eax, DWORD PTR $T238286[ebp]
	mov	DWORD PTR $T239278[ebp], eax
	mov	ecx, DWORD PTR $T239240[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR $T239279[ebp]
	push	edx
	mov	eax, DWORD PTR $T239278[ebp]
	push	eax
	lea	ecx, DWORD PTR $T239277[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z ; std::_Find<std::_Vector_iterator<enum EraTypes,std::allocator<enum EraTypes> >,enum EraTypes>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T239278[ebp], edx
	mov	eax, DWORD PTR $T239278[ebp]
	mov	DWORD PTR $T238287[ebp], eax
	mov	ecx, DWORD PTR $T238287[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T238288[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN40@ThemeEqual

; 1650 : 				{
; 1651 : 					continue;

	jmp	$LN45@ThemeEqual
$LN40@ThemeEqual:

; 1652 : 				}
; 1653 : 
; 1654 : 				aWorksChosen = aArtifactsChosen;

	lea	edx, DWORD PTR _aArtifactsChosen$[ebp]
	push	edx
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<int,std::allocator<int> >::operator=

; 1655 : 				aPlayersSeen = aArtifactsPlayersSeen;

	lea	eax, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	??4?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::operator=

; 1656 : 				aErasSeen = aArtifactsErasSeen;

	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	??4?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::operator=

; 1657 : 
; 1658 : 				aWorksChosen.push_back(it3->m_iGreatWorkIndex);

	mov	edx, DWORD PTR _it3$224444[ebp]
	push	edx
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1659 : 				aPlayersSeen.push_back(it3->m_ePlayer);

	mov	eax, DWORD PTR _it3$224444[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1660 : 				aErasSeen.push_back(it3->m_eEra);

	mov	ecx, DWORD PTR _it3$224444[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back

; 1661 : 
; 1662 : 				// Loop through the rest looking for works that will match up
; 1663 : 				vector<CvGreatWorkInMyEmpire>::const_iterator it4 = it3;

	mov	edx, DWORD PTR _it3$224444[ebp]
	mov	DWORD PTR _it4$224618[ebp], edx

; 1664 : #ifdef AUI_WARNING_FIXES
; 1665 : 				for (++it4; it4 != works1.end() && aWorksChosen.size() < iNumSlots; ++it4)
; 1666 : #elif defined(AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS)
; 1667 : 				for (++it4; it4 != works1.end() && aWorksChosen.size() < (unsigned int)iNumSlots; ++it4)
; 1668 : #else
; 1669 : 				for (it4++; it4 != works1.end() && aWorksChosen.size() < (unsigned int)iNumSlots; it4++)

	mov	eax, DWORD PTR _it4$224618[ebp]
	mov	DWORD PTR __Tmp$239866[ebp], eax
	mov	ecx, DWORD PTR _it4$224618[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it4$224618[ebp], ecx
	mov	edx, DWORD PTR __Tmp$239866[ebp]
	mov	DWORD PTR $T238289[ebp], edx
	jmp	SHORT $LN39@ThemeEqual
$LN38@ThemeEqual:
	mov	eax, DWORD PTR _it4$224618[ebp]
	mov	DWORD PTR __Tmp$239875[ebp], eax
	mov	ecx, DWORD PTR _it4$224618[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it4$224618[ebp], ecx
	mov	edx, DWORD PTR __Tmp$239875[ebp]
	mov	DWORD PTR $T238290[ebp], edx
$LN39@ThemeEqual:
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T239885[ebp], ecx
	mov	edx, DWORD PTR $T239885[ebp]
	mov	DWORD PTR $T238291[ebp], edx
	mov	eax, DWORD PTR _it4$224618[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T238291[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN37@ThemeEqual
	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+8]
	sub	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	sar	ecx, 2
	cmp	ecx, DWORD PTR _iNumSlots$[ebp]
	jae	$LN37@ThemeEqual

; 1670 : #endif
; 1671 : 				{
; 1672 : 					if (CultureHelpers::IsValidForThemingBonus(pkBonusInfo, it4->m_eEra, aErasSeen, it4->m_ePlayer, aPlayersSeen, m_pPlayer->GetID()))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T239911[ebp], ecx
	mov	edx, DWORD PTR _it4$224618[ebp]
	mov	DWORD PTR $T239920[ebp], edx
	mov	eax, DWORD PTR _it4$224618[ebp]
	mov	DWORD PTR $T239929[ebp], eax
	mov	ecx, DWORD PTR $T239911[ebp]
	push	ecx
	lea	edx, DWORD PTR _aPlayersSeen$224434[ebp]
	push	edx
	mov	eax, DWORD PTR $T239920[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	edx, DWORD PTR _aErasSeen$224439[ebp]
	push	edx
	mov	eax, DWORD PTR $T239929[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _pkBonusInfo$[ebp]
	push	edx
	call	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN36@ThemeEqual

; 1673 : 					{
; 1674 : 						aWorksChosen.push_back(it4->m_iGreatWorkIndex);

	mov	ecx, DWORD PTR _it4$224618[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1675 : 						aPlayersSeen.push_back(it4->m_ePlayer);

	mov	edx, DWORD PTR _it4$224618[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 1676 : 						aErasSeen.push_back(it4->m_eEra);

	mov	eax, DWORD PTR _it4$224618[ebp]
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
$LN36@ThemeEqual:

; 1677 : 					}
; 1678 : 				}

	jmp	$LN38@ThemeEqual
$LN37@ThemeEqual:

; 1679 : 
; 1680 : 				// Did we theme it properly?
; 1681 : 				bool bThemedProperly = false;

	mov	BYTE PTR _bThemedProperly$224627[ebp], 0

; 1682 : 				if (aWorksChosen.size() == iNumSlots && CultureHelpers::GetThemingBonusIndex(m_pPlayer->GetID(), pkEntry, aWorksChosen) == iThemingBonusIndex)

	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+8]
	sub	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	sar	ecx, 2
	cmp	ecx, DWORD PTR _iNumSlots$[ebp]
	jne	SHORT $LN838@ThemeEqual
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T240058[ebp], ecx
	lea	edx, DWORD PTR _aWorksChosen$224429[ebp]
	push	edx
	mov	eax, DWORD PTR _pkEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T240058[ebp]
	push	ecx
	call	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _iThemingBonusIndex$[ebp]
	jne	SHORT $LN838@ThemeEqual

; 1683 : 				{
; 1684 : 					bThemedProperly = true;

	mov	BYTE PTR _bThemedProperly$224627[ebp], 1
	jmp	$LN34@ThemeEqual

; 1685 : 				}
; 1686 : 
; 1687 : 				// If we are one work short, let's look to other players for a last piece of art
; 1688 : 				else if (aWorksChosen.size() == (iNumSlots - 1))

$LN838@ThemeEqual:
	mov	edx, DWORD PTR _iNumSlots$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _aWorksChosen$224429[ebp+8]
	sub	eax, DWORD PTR _aWorksChosen$224429[ebp+4]
	sar	eax, 2
	cmp	eax, edx
	jne	$LN34@ThemeEqual

; 1689 : 				{
; 1690 : 					for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$224631[ebp], 0
	jmp	SHORT $LN32@ThemeEqual
$LN31@ThemeEqual:
	mov	ecx, DWORD PTR _iLoopPlayer$224631[ebp]
	add	ecx, 1
	mov	DWORD PTR _iLoopPlayer$224631[ebp], ecx
$LN32@ThemeEqual:
	cmp	DWORD PTR _iLoopPlayer$224631[ebp], 22	; 00000016H
	jge	$LN34@ThemeEqual

; 1691 : 					{
; 1692 : 						CvPlayer& kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	edx, DWORD PTR _iLoopPlayer$224631[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$224635[ebp], edx

; 1693 : 						if (kPlayer.isAlive() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid((PlayerTypes)iLoopPlayer))

	mov	eax, DWORD PTR _kPlayer$224635[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T240073[ebp], cl
	movzx	edx, BYTE PTR $T240073[ebp]
	test	edx, edx
	je	$LN29@ThemeEqual
	push	0
	mov	eax, DWORD PTR _iLoopPlayer$224631[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	edx, al
	test	edx, edx
	je	$LN29@ThemeEqual

; 1694 : 						{
; 1695 : 							int iToBeAcquiredWorkIndex = kPlayer.GetCulture()->GetSwappableArtIndex();

	mov	ecx, DWORD PTR _kPlayer$224635[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetSwappableArtIndex
	mov	DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp], eax

; 1696 : 							int iToBeDiscardedWorkIndex = CultureHelpers::FindWorkNotChosen(works1, aWorksChosen);

	lea	eax, DWORD PTR _aWorksChosen$224429[ebp]
	push	eax
	mov	ecx, DWORD PTR _works1$[ebp]
	push	ecx
	call	?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ; CultureHelpers::FindWorkNotChosen
	add	esp, 8
	mov	DWORD PTR _iToBeDiscardedWorkIndex$224640[ebp], eax

; 1697 : 
; 1698 : 							// Does this work fit?
; 1699 : 							if (iToBeAcquiredWorkIndex != NO_GREAT_WORK && iToBeDiscardedWorkIndex != NO_GREAT_WORK)

	cmp	DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp], -1
	je	$LN29@ThemeEqual
	cmp	DWORD PTR _iToBeDiscardedWorkIndex$224640[ebp], -1
	je	$LN29@ThemeEqual

; 1700 : 							{
; 1701 : 								EraTypes eEra = pkGameCulture->m_CurrentGreatWorks[iToBeAcquiredWorkIndex].m_eEra;

	mov	edx, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _pkGameCulture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+40]
	mov	DWORD PTR _eEra$224642[ebp], edx

; 1702 : 								PlayerTypes ePlayer = pkGameCulture->GetGreatWorkCreator(iToBeAcquiredWorkIndex);

	mov	eax, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkCreator
	mov	DWORD PTR _ePlayer$224643[ebp], eax

; 1703 : 								if (CultureHelpers::IsValidForThemingBonus(pkBonusInfo, eEra, aErasSeen, ePlayer, aPlayersSeen, m_pPlayer->GetID()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T240085[ebp], eax
	mov	ecx, DWORD PTR $T240085[ebp]
	push	ecx
	lea	edx, DWORD PTR _aPlayersSeen$224434[ebp]
	push	edx
	mov	eax, DWORD PTR _ePlayer$224643[ebp]
	push	eax
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	push	ecx
	mov	edx, DWORD PTR _eEra$224642[ebp]
	push	edx
	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	push	eax
	call	?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ; CultureHelpers::IsValidForThemingBonus
	add	esp, 24					; 00000018H
	movzx	ecx, al
	test	ecx, ecx
	je	$LN29@ThemeEqual

; 1704 : 								{
; 1705 : 									aWorksChosen.push_back(iToBeAcquiredWorkIndex);

	lea	edx, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	push	edx
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1706 : 									if (CultureHelpers::GetThemingBonusIndex(m_pPlayer->GetID(), pkEntry, aWorksChosen) == iThemingBonusIndex)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T240125[ebp], edx
	lea	eax, DWORD PTR _aWorksChosen$224429[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T240125[ebp]
	push	edx
	call	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
	add	esp, 12					; 0000000cH
	cmp	eax, DWORD PTR _iThemingBonusIndex$[ebp]
	jne	$LN29@ThemeEqual

; 1707 : 									{
; 1708 : 										bool bSwapSuccessful = pkGameCulture->SwapGreatWorks(m_pPlayer->GetID(), iToBeDiscardedWorkIndex, ePlayer, iToBeAcquiredWorkIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T240134[ebp], edx
	mov	eax, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$224643[ebp]
	push	ecx
	mov	edx, DWORD PTR _iToBeDiscardedWorkIndex$224640[ebp]
	push	edx
	mov	eax, DWORD PTR $T240134[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?SwapGreatWorks@CvGameCulture@@QAE_NW4PlayerTypes@@H0H@Z ; CvGameCulture::SwapGreatWorks
	mov	BYTE PTR _bSwapSuccessful$224646[ebp], al

; 1709 : 										if (bSwapSuccessful)

	movzx	ecx, BYTE PTR _bSwapSuccessful$224646[ebp]
	test	ecx, ecx
	je	$LN29@ThemeEqual

; 1710 : 										{
; 1711 : 											bThemedProperly = true;

	mov	BYTE PTR _bThemedProperly$224627[ebp], 1

; 1712 : 
; 1713 : 											// Update works list
; 1714 : 											tempWorks.clear();

	mov	edx, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T240150[ebp], edx
	mov	eax, DWORD PTR $T240150[ebp]
	mov	DWORD PTR $T240176[ebp], eax
	mov	ecx, DWORD PTR $T240176[ebp]
	mov	DWORD PTR $T240175[ebp], ecx
	mov	edx, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T240166[ebp], edx
	mov	eax, DWORD PTR $T240166[ebp]
	mov	DWORD PTR $T240178[ebp], eax
	mov	ecx, DWORD PTR $T240178[ebp]
	mov	DWORD PTR $T240177[ebp], ecx
	mov	edx, DWORD PTR $T240175[ebp]
	push	edx
	mov	eax, DWORD PTR $T240177[ebp]
	push	eax
	lea	ecx, DWORD PTR $T240179[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1715 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1716 : 											for (it5 = works1.begin(); it5 != works1.end(); ++it5)
; 1717 : #else
; 1718 : 											for (it5 = works1.begin(); it5 != works1.end(); it5++)

	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T240201[ebp], eax
	mov	ecx, DWORD PTR $T240201[ebp]
	mov	DWORD PTR $T238292[ebp], ecx
	mov	edx, DWORD PTR $T238292[ebp]
	mov	DWORD PTR _it5$[ebp], edx
	jmp	SHORT $LN24@ThemeEqual
$LN23@ThemeEqual:
	mov	eax, DWORD PTR _it5$[ebp]
	mov	DWORD PTR __Tmp$240218[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it5$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$240218[ebp]
	mov	DWORD PTR $T238293[ebp], edx
$LN24@ThemeEqual:
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T240233[ebp], ecx
	mov	edx, DWORD PTR $T240233[ebp]
	mov	DWORD PTR $T238294[ebp], edx
	mov	eax, DWORD PTR _it5$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T238294[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN22@ThemeEqual

; 1719 : #endif
; 1720 : 											{
; 1721 : 												if (it5->m_iGreatWorkIndex == iToBeDiscardedWorkIndex)

	mov	ecx, DWORD PTR _it5$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _iToBeDiscardedWorkIndex$224640[ebp]
	jne	SHORT $LN948@ThemeEqual

; 1722 : 												{
; 1723 : 													it5->m_iGreatWorkIndex = iToBeAcquiredWorkIndex;

	mov	eax, DWORD PTR _it5$[ebp]
	mov	ecx, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	mov	DWORD PTR [eax], ecx

; 1724 : 													GetGreatWorkLocation(it5->m_iGreatWorkIndex, it5->m_iCityID, it5->m_eBuilding, it5->m_iSlot);

	mov	edx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240293[ebp], edx
	mov	eax, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240309[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240325[ebp], ecx
	mov	edx, DWORD PTR $T240293[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR $T240309[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR $T240325[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _it5$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1725 : 												}
; 1726 : 												tempWorks.push_back(*it5);

$LN948@ThemeEqual:
	mov	ecx, DWORD PTR _it5$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back

; 1727 : 											}

	jmp	$LN23@ThemeEqual
$LN22@ThemeEqual:

; 1728 : 											works1 = tempWorks;

	lea	edx, DWORD PTR _tempWorks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _works1$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1729 : 
; 1730 : 											CultureHelpers::SendArtSwapNotification(pkEntry->GetGreatWorkSlotType(), pkBonusInfo->IsMustBeArt(), m_pPlayer->GetID(), ePlayer, iToBeDiscardedWorkIndex, iToBeAcquiredWorkIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T240559[ebp], edx
	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+34]
	mov	BYTE PTR $T240563[ebp], cl
	mov	edx, DWORD PTR _iToBeAcquiredWorkIndex$224639[ebp]
	push	edx
	mov	eax, DWORD PTR _iToBeDiscardedWorkIndex$224640[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$224643[ebp]
	push	ecx
	mov	edx, DWORD PTR $T240559[ebp]
	push	edx
	movzx	eax, BYTE PTR $T240563[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	push	eax
	call	?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z ; CultureHelpers::SendArtSwapNotification
	add	esp, 24					; 00000018H

; 1731 : 											break;  // Themed it through acquisition

	jmp	SHORT $LN34@ThemeEqual
$LN29@ThemeEqual:

; 1732 : 										}
; 1733 : 									}
; 1734 : 								}
; 1735 : 							}
; 1736 : 						}
; 1737 : 					}

	jmp	$LN31@ThemeEqual
$LN34@ThemeEqual:

; 1738 : 				}
; 1739 : 
; 1740 : 				if (bThemedProperly)

	movzx	ecx, BYTE PTR _bThemedProperly$224627[ebp]
	test	ecx, ecx
	je	$LN20@ThemeEqual

; 1741 : 				{
; 1742 : 					for (int jJ = 0; jJ < (int)aWorksChosen.size(); jJ++)

	mov	DWORD PTR _jJ$224656[ebp], 0
	jmp	SHORT $LN1039@ThemeEqual
$LN18@ThemeEqual:
	mov	edx, DWORD PTR _jJ$224656[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$224656[ebp], edx
$LN1039@ThemeEqual:
	mov	eax, DWORD PTR _aWorksChosen$224429[ebp+8]
	sub	eax, DWORD PTR _aWorksChosen$224429[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _jJ$224656[ebp], eax
	jge	$LN17@ThemeEqual

; 1743 : 					{
; 1744 : 						for (int kK = 0; kK < (int)works1.size(); kK++)

	mov	DWORD PTR _kK$224661[ebp], 0
	jmp	SHORT $LN1041@ThemeEqual
$LN15@ThemeEqual:
	mov	ecx, DWORD PTR _kK$224661[ebp]
	add	ecx, 1
	mov	DWORD PTR _kK$224661[ebp], ecx
$LN1041@ThemeEqual:
	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR _kK$224661[ebp], eax
	jge	$LN14@ThemeEqual

; 1745 : 						{
; 1746 : 							if (works1[kK].m_iGreatWorkIndex == aWorksChosen[jJ])

	mov	edx, DWORD PTR _kK$224661[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _works1$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T240573[ebp], edx
	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	mov	edx, DWORD PTR $T240573[ebp]
	mov	eax, DWORD PTR _jJ$224656[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN13@ThemeEqual

; 1747 : 							{
; 1748 : 								MoveWorkIntoSlot(works1[kK], kBldg.m_iCityID, kBldg.m_eBuilding, jJ);

	mov	eax, DWORD PTR _jJ$224656[ebp]
	push	eax
	mov	ecx, DWORD PTR _kBldg$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _kBldg$[ebp]
	push	edx
	mov	eax, DWORD PTR _kK$224661[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _works1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ; CvPlayerCulture::MoveWorkIntoSlot

; 1749 : 								break;

	jmp	SHORT $LN14@ThemeEqual
$LN13@ThemeEqual:

; 1750 : 							}
; 1751 : 						}

	jmp	$LN15@ThemeEqual
$LN14@ThemeEqual:

; 1752 : 						for (int kK = 0; kK < (int)works2.size(); kK++)

	mov	DWORD PTR _kK$224667[ebp], 0
	jmp	SHORT $LN1049@ThemeEqual
$LN11@ThemeEqual:
	mov	eax, DWORD PTR _kK$224667[ebp]
	add	eax, 1
	mov	DWORD PTR _kK$224667[ebp], eax
$LN1049@ThemeEqual:
	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR _kK$224667[ebp], eax
	jge	$LN10@ThemeEqual

; 1753 : 						{
; 1754 : 							if (works2[kK].m_iGreatWorkIndex == aWorksChosen[jJ])

	mov	edx, DWORD PTR _kK$224667[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _works2$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T240586[ebp], edx
	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	mov	edx, DWORD PTR $T240586[ebp]
	mov	eax, DWORD PTR _jJ$224656[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN9@ThemeEqual

; 1755 : 							{
; 1756 : 								MoveWorkIntoSlot(works2[kK], kBldg.m_iCityID, kBldg.m_eBuilding, jJ);

	mov	eax, DWORD PTR _jJ$224656[ebp]
	push	eax
	mov	ecx, DWORD PTR _kBldg$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _kBldg$[ebp]
	push	edx
	mov	eax, DWORD PTR _kK$224667[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ; CvPlayerCulture::MoveWorkIntoSlot

; 1757 : 								break;

	jmp	SHORT $LN10@ThemeEqual
$LN9@ThemeEqual:

; 1758 : 							}
; 1759 : 						}

	jmp	$LN11@ThemeEqual
$LN10@ThemeEqual:

; 1760 : 					}

	jmp	$LN18@ThemeEqual
$LN17@ThemeEqual:

; 1761 : 
; 1762 : 					// Remove these works from those to consider later
; 1763 : 					tempWorks.clear();

	mov	eax, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T240608[ebp], eax
	mov	ecx, DWORD PTR $T240608[ebp]
	mov	DWORD PTR $T240634[ebp], ecx
	mov	edx, DWORD PTR $T240634[ebp]
	mov	DWORD PTR $T240633[ebp], edx
	mov	eax, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T240624[ebp], eax
	mov	ecx, DWORD PTR $T240624[ebp]
	mov	DWORD PTR $T240636[ebp], ecx
	mov	edx, DWORD PTR $T240636[ebp]
	mov	DWORD PTR $T240635[ebp], edx
	mov	eax, DWORD PTR $T240633[ebp]
	push	eax
	mov	ecx, DWORD PTR $T240635[ebp]
	push	ecx
	lea	edx, DWORD PTR $T240637[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1764 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1765 : 					for (it5 = works1.begin(); it5 != works1.end(); ++it5)
; 1766 : #else
; 1767 : 					for (it5 = works1.begin(); it5 != works1.end(); it5++)

	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T240659[ebp], ecx
	mov	edx, DWORD PTR $T240659[ebp]
	mov	DWORD PTR $T238295[ebp], edx
	mov	eax, DWORD PTR $T238295[ebp]
	mov	DWORD PTR _it5$[ebp], eax
	jmp	SHORT $LN8@ThemeEqual
$LN7@ThemeEqual:
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR __Tmp$240681[ebp], ecx
	mov	edx, DWORD PTR _it5$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it5$[ebp], edx
	mov	eax, DWORD PTR __Tmp$240681[ebp]
	mov	DWORD PTR $T238296[ebp], eax
$LN8@ThemeEqual:
	mov	ecx, DWORD PTR _works1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T240691[ebp], edx
	mov	eax, DWORD PTR $T240691[ebp]
	mov	DWORD PTR $T238297[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T238297[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@ThemeEqual

; 1768 : #endif
; 1769 : 					{
; 1770 : 						// Copy it over if not chosen, updating its location
; 1771 : 						if (find(aWorksChosen.begin(), aWorksChosen.end(), it5->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	edx, DWORD PTR _aWorksChosen$224429[ebp+8]
	mov	DWORD PTR $T240715[ebp], edx
	mov	eax, DWORD PTR $T240715[ebp]
	mov	DWORD PTR $T238301[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240737[ebp], ecx
	mov	edx, DWORD PTR _aWorksChosen$224429[ebp+8]
	mov	DWORD PTR $T240747[ebp], edx
	mov	eax, DWORD PTR $T240747[ebp]
	mov	DWORD PTR $T238298[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	mov	DWORD PTR $T240763[ebp], ecx
	mov	edx, DWORD PTR $T240763[ebp]
	mov	DWORD PTR $T238299[ebp], edx
	mov	eax, DWORD PTR $T238298[ebp]
	mov	DWORD PTR $T240776[ebp], eax
	mov	ecx, DWORD PTR $T238299[ebp]
	mov	DWORD PTR $T240775[ebp], ecx
	mov	edx, DWORD PTR $T240737[ebp]
	push	edx
	mov	eax, DWORD PTR $T240776[ebp]
	push	eax
	mov	ecx, DWORD PTR $T240775[ebp]
	push	ecx
	lea	edx, DWORD PTR $T240773[ebp]
	push	edx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T240775[ebp], eax
	mov	ecx, DWORD PTR $T240775[ebp]
	mov	DWORD PTR $T238300[ebp], ecx
	mov	edx, DWORD PTR $T238300[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T238301[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@ThemeEqual

; 1772 : 						{
; 1773 : 							GetGreatWorkLocation(it5->m_iGreatWorkIndex, it5->m_iCityID, it5->m_eBuilding, it5->m_iSlot);

	mov	edx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240795[ebp], edx
	mov	eax, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240811[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T240827[ebp], ecx
	mov	edx, DWORD PTR $T240795[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR $T240811[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR $T240827[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _it5$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1774 : 							tempWorks.push_back(*it5);

	mov	ecx, DWORD PTR _it5$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN5@ThemeEqual:

; 1775 : 						}
; 1776 : 					}

	jmp	$LN7@ThemeEqual
$LN6@ThemeEqual:

; 1777 : 					works1 = tempWorks;

	lea	edx, DWORD PTR _tempWorks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _works1$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1778 : 
; 1779 : 					tempWorks.clear();

	mov	eax, DWORD PTR _tempWorks$[ebp+8]
	mov	DWORD PTR $T241068[ebp], eax
	mov	ecx, DWORD PTR $T241068[ebp]
	mov	DWORD PTR $T241094[ebp], ecx
	mov	edx, DWORD PTR $T241094[ebp]
	mov	DWORD PTR $T241093[ebp], edx
	mov	eax, DWORD PTR _tempWorks$[ebp+4]
	mov	DWORD PTR $T241084[ebp], eax
	mov	ecx, DWORD PTR $T241084[ebp]
	mov	DWORD PTR $T241096[ebp], ecx
	mov	edx, DWORD PTR $T241096[ebp]
	mov	DWORD PTR $T241095[ebp], edx
	mov	eax, DWORD PTR $T241093[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241095[ebp]
	push	ecx
	lea	edx, DWORD PTR $T241097[ebp]
	push	edx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1780 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1781 : 					for (it5 = works2.begin(); it5 != works2.end(); ++it5)
; 1782 : #else
; 1783 : 					for (it5 = works2.begin(); it5 != works2.end(); it5++)

	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T241119[ebp], ecx
	mov	edx, DWORD PTR $T241119[ebp]
	mov	DWORD PTR $T238302[ebp], edx
	mov	eax, DWORD PTR $T238302[ebp]
	mov	DWORD PTR _it5$[ebp], eax
	jmp	SHORT $LN4@ThemeEqual
$LN3@ThemeEqual:
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR __Tmp$241136[ebp], ecx
	mov	edx, DWORD PTR _it5$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR _it5$[ebp], edx
	mov	eax, DWORD PTR __Tmp$241136[ebp]
	mov	DWORD PTR $T238303[ebp], eax
$LN4@ThemeEqual:
	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T241151[ebp], edx
	mov	eax, DWORD PTR $T241151[ebp]
	mov	DWORD PTR $T238304[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T238304[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@ThemeEqual

; 1784 : #endif
; 1785 : 					{
; 1786 : 						// Copy it over if not chosen, updating its location
; 1787 : 						if (find(aWorksChosen.begin(), aWorksChosen.end(), it5->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	edx, DWORD PTR _aWorksChosen$224429[ebp+8]
	mov	DWORD PTR $T241175[ebp], edx
	mov	eax, DWORD PTR $T241175[ebp]
	mov	DWORD PTR $T238308[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T241197[ebp], ecx
	mov	edx, DWORD PTR _aWorksChosen$224429[ebp+8]
	mov	DWORD PTR $T241207[ebp], edx
	mov	eax, DWORD PTR $T241207[ebp]
	mov	DWORD PTR $T238305[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$224429[ebp+4]
	mov	DWORD PTR $T241223[ebp], ecx
	mov	edx, DWORD PTR $T241223[ebp]
	mov	DWORD PTR $T238306[ebp], edx
	mov	eax, DWORD PTR $T238305[ebp]
	mov	DWORD PTR $T241236[ebp], eax
	mov	ecx, DWORD PTR $T238306[ebp]
	mov	DWORD PTR $T241235[ebp], ecx
	mov	edx, DWORD PTR $T241197[ebp]
	push	edx
	mov	eax, DWORD PTR $T241236[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241235[ebp]
	push	ecx
	lea	edx, DWORD PTR $T241234[ebp]
	push	edx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T241235[ebp], eax
	mov	ecx, DWORD PTR $T241235[ebp]
	mov	DWORD PTR $T238307[ebp], ecx
	mov	edx, DWORD PTR $T238307[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T238308[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ThemeEqual

; 1788 : 						{
; 1789 : 							GetGreatWorkLocation(it5->m_iGreatWorkIndex, it5->m_iCityID, it5->m_eBuilding, it5->m_iSlot);

	mov	edx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T241255[ebp], edx
	mov	eax, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T241271[ebp], eax
	mov	ecx, DWORD PTR _it5$[ebp]
	mov	DWORD PTR $T241287[ebp], ecx
	mov	edx, DWORD PTR $T241255[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR $T241271[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR $T241287[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _it5$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1790 : 							tempWorks.push_back(*it5);

	mov	ecx, DWORD PTR _it5$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN1@ThemeEqual:

; 1791 : 						}
; 1792 : 					}

	jmp	$LN3@ThemeEqual
$LN2@ThemeEqual:

; 1793 : 					works2 = tempWorks;

	lea	edx, DWORD PTR _tempWorks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _works2$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1794 : 
; 1795 : 					// All done
; 1796 : 					LogThemedBuilding(kBldg.m_iCityID, kBldg.m_eBuilding, pkBonusInfo->GetBonus());

	mov	eax, DWORD PTR _pkBonusInfo$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T241516[ebp], ecx
	mov	edx, DWORD PTR $T241516[ebp]
	push	edx
	mov	eax, DWORD PTR _kBldg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _kBldg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z ; CvPlayerCulture::LogThemedBuilding

; 1797 : 					return true;

	mov	BYTE PTR $T238309[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T238309[ebp]
	jmp	$LN61@ThemeEqual
$LN20@ThemeEqual:

; 1798 : 				}
; 1799 : 			}

	jmp	$LN45@ThemeEqual
$LN44@ThemeEqual:

; 1800 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
$LN47@ThemeEqual:

; 1801 : 	}

	jmp	$LN55@ThemeEqual
$LN54@ThemeEqual:

; 1802 : 	return false;

	mov	BYTE PTR $T238310[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T238310[ebp]
$LN61@ThemeEqual:

; 1803 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$0:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$1:
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$2:
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	jmp	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$3:
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	jmp	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$11:
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$13:
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$15:
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$17:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$19:
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$21:
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$23:
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$25:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$4:
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$5:
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	jmp	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$6:
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	jmp	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$30:
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$32:
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$34:
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$36:
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$38:
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$40:
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$42:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$44:
	lea	ecx, DWORD PTR _aErasSeen$224439[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$46:
	lea	ecx, DWORD PTR _aPlayersSeen$224434[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$48:
	lea	ecx, DWORD PTR _aWorksChosen$224429[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$50:
	lea	ecx, DWORD PTR _aArtifactsErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$52:
	lea	ecx, DWORD PTR _aArtifactsPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$54:
	lea	ecx, DWORD PTR _aArtifactsChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z$56:
	lea	ecx, DWORD PTR _tempWorks$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1852]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ThemeEqualArtArtifact@CvPlayerCulture@@QAE_NVCvGreatWorkBuildingInMyEmpire@@HHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@1_N@Z ENDP ; CvPlayerCulture::ThemeEqualArtArtifact
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z
_TEXT	SEGMENT
_this$ = -712						; size = 4
$T243058 = -628						; size = 4
$T243042 = -624						; size = 4
$T243026 = -620						; size = 4
$T243007 = -616						; size = 4
$T243006 = -612						; size = 4
$T243005 = -608						; size = 4
$T242994 = -604						; size = 4
$T242978 = -600						; size = 4
$T242968 = -596						; size = 4
$T242946 = -592						; size = 4
$T242922 = -588						; size = 4
__Tmp$242912 = -584					; size = 4
$T242890 = -580						; size = 4
$T242855 = -576						; size = 4
$T242839 = -572						; size = 4
$T242867 = -568						; size = 4
$T242866 = -564						; size = 4
$T242865 = -560						; size = 4
$T242864 = -556						; size = 4
$T242863 = -552						; size = 4
$T242598 = -436						; size = 4
$T242582 = -432						; size = 4
$T242566 = -428						; size = 4
$T242547 = -424						; size = 4
$T242546 = -420						; size = 4
$T242545 = -416						; size = 4
$T242534 = -412						; size = 4
$T242518 = -408						; size = 4
$T242508 = -404						; size = 4
$T242486 = -400						; size = 4
$T242462 = -396						; size = 4
__Tmp$242447 = -392					; size = 4
$T242430 = -388						; size = 4
$T242395 = -384						; size = 4
$T242379 = -380						; size = 4
$T242408 = -376						; size = 4
$T242407 = -372						; size = 4
$T242406 = -368						; size = 4
$T242405 = -364						; size = 4
$T242404 = -360						; size = 4
$T242342 = -348						; size = 4
$T242333 = -344						; size = 4
$T242276 = -320						; size = 4
__Tmp$242263 = -316					; size = 4
$T242251 = -312						; size = 4
$T242193 = -288						; size = 4
__Tmp$242180 = -284					; size = 4
$T242168 = -280						; size = 4
$T241970 = -168						; size = 4
$T241958 = -161						; size = 1
$T241957 = -160						; size = 4
$T241956 = -156						; size = 4
$T241955 = -152						; size = 4
$T241954 = -148						; size = 4
$T241953 = -144						; size = 4
$T241952 = -140						; size = 4
$T241951 = -136						; size = 4
$T241950 = -132						; size = 4
$T241949 = -128						; size = 4
$T241948 = -124						; size = 4
$T241947 = -120						; size = 4
$T241946 = -116						; size = 4
$T241945 = -112						; size = 4
$T241944 = -108						; size = 4
$T241943 = -104						; size = 4
$T241942 = -100						; size = 4
$T241941 = -96						; size = 4
$T241940 = -92						; size = 4
$T241939 = -88						; size = 4
$T241938 = -84						; size = 4
_it2$224752 = -80					; size = 4
_tempWorks$224757 = -76					; size = 16
_iI$224741 = -60					; size = 4
_worksToConsider$ = -56					; size = 16
_pkEntry$ = -40						; size = 4
_iCountSlots$ = -36					; size = 4
_aWorksChosen$ = -32					; size = 16
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_buildingIt$ = 8					; size = 4
_works1$ = 12						; size = 4
_works2$ = 16						; size = 4
?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z PROC ; CvPlayerCulture::FillBuilding, COMDAT
; _this$ = ecx

; 1807 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 700				; 000002bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1808 : 	CvBuildingEntry *pkEntry = GC.getBuildingInfo(buildingIt->m_eBuilding);

	mov	eax, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T241970[ebp], eax
	mov	ecx, DWORD PTR $T241970[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 1809 : 	if (!pkEntry)

	cmp	DWORD PTR _pkEntry$[ebp], 0
	jne	SHORT $LN17@FillBuildi

; 1810 : 	{
; 1811 : 		return false;

	xor	al, al
	jmp	$LN18@FillBuildi
$LN17@FillBuildi:

; 1812 : 	}
; 1813 : 
; 1814 : 	int iCountSlots = pkEntry->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iCountSlots$[ebp], eax

; 1815 : 	if (iCountSlots < 1)

	cmp	DWORD PTR _iCountSlots$[ebp], 1
	jge	SHORT $LN16@FillBuildi

; 1816 : 	{
; 1817 : 		return false;

	xor	al, al
	jmp	$LN18@FillBuildi
$LN16@FillBuildi:

; 1818 : 
; 1819 : 	}
; 1820 : 
; 1821 : 	vector<CvGreatWorkInMyEmpire> worksToConsider;

	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1822 : 	vector<int> aWorksChosen;

	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1823 : 
; 1824 : 	worksToConsider = works1;

	mov	eax, DWORD PTR _works1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1825 : 	vector<CvGreatWorkInMyEmpire>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 1826 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1827 : 	for (it = works2.begin(); it != works2.end(); ++it)
; 1828 : #else
; 1829 : 	for (it = works2.begin(); it != works2.end(); it++)

	mov	ecx, DWORD PTR _works2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T242168[ebp], edx
	mov	eax, DWORD PTR $T242168[ebp]
	mov	DWORD PTR $T241938[ebp], eax
	mov	ecx, DWORD PTR $T241938[ebp]
	mov	DWORD PTR _it$[ebp], ecx
	jmp	SHORT $LN15@FillBuildi
$LN14@FillBuildi:
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$242180[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$242180[ebp]
	mov	DWORD PTR $T241939[ebp], ecx
$LN15@FillBuildi:
	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T242193[ebp], eax
	mov	ecx, DWORD PTR $T242193[ebp]
	mov	DWORD PTR $T241940[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T241940[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN13@FillBuildi

; 1830 : #endif
; 1831 : 	{
; 1832 : 		worksToConsider.push_back(*it);

	mov	eax, DWORD PTR _it$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back

; 1833 : 	}

	jmp	SHORT $LN14@FillBuildi
$LN13@FillBuildi:

; 1834 : 
; 1835 : 	it = worksToConsider.begin();

	mov	ecx, DWORD PTR _worksToConsider$[ebp+4]
	mov	DWORD PTR $T242251[ebp], ecx
	mov	edx, DWORD PTR $T242251[ebp]
	mov	DWORD PTR $T241941[ebp], edx
	mov	eax, DWORD PTR $T241941[ebp]
	mov	DWORD PTR _it$[ebp], eax

; 1836 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1837 : 	for (int iI = 0; iI < iCountSlots && it != worksToConsider.end(); iI++, ++it)
; 1838 : #else
; 1839 : 	for (int iI = 0; iI < iCountSlots && it != worksToConsider.end(); iI++, it++)

	mov	DWORD PTR _iI$224741[ebp], 0
	jmp	SHORT $LN12@FillBuildi
$LN11@FillBuildi:
	mov	ecx, DWORD PTR _iI$224741[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$224741[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$242263[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _it$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$242263[ebp]
	mov	DWORD PTR $T241942[ebp], ecx
$LN12@FillBuildi:
	mov	edx, DWORD PTR _iI$224741[ebp]
	cmp	edx, DWORD PTR _iCountSlots$[ebp]
	jge	$LN190@FillBuildi
	mov	eax, DWORD PTR _worksToConsider$[ebp+8]
	mov	DWORD PTR $T242276[ebp], eax
	mov	ecx, DWORD PTR $T242276[ebp]
	mov	DWORD PTR $T241943[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T241943[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN190@FillBuildi

; 1840 : #endif
; 1841 : 	{
; 1842 : 		aWorksChosen.push_back(worksToConsider[iI].m_iGreatWorkIndex);

	mov	eax, DWORD PTR _iI$224741[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR _worksToConsider$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 1843 : 		MoveWorkIntoSlot(worksToConsider[iI], buildingIt->m_iCityID, buildingIt->m_eBuilding, iI);

	mov	ecx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T242333[ebp], ecx
	mov	edx, DWORD PTR _buildingIt$[ebp]
	mov	DWORD PTR $T242342[ebp], edx
	mov	eax, DWORD PTR _iI$224741[ebp]
	push	eax
	mov	ecx, DWORD PTR $T242333[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR $T242342[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _iI$224741[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _worksToConsider$[ebp+4]
	add	eax, edx
	sub	esp, 24					; 00000018H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ; CvPlayerCulture::MoveWorkIntoSlot

; 1844 : 	}

	jmp	$LN11@FillBuildi

; 1845 : 
; 1846 : 	// Remove these works from those to consider later
; 1847 : 	if (aWorksChosen.size() > 0)

$LN190@FillBuildi:
	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	sub	ecx, DWORD PTR _aWorksChosen$[ebp+4]
	sar	ecx, 2
	test	ecx, ecx
	jbe	$LN9@FillBuildi

; 1848 : 	{
; 1849 : 		vector<CvGreatWorkInMyEmpire>::iterator it2;

	mov	DWORD PTR _it2$224752[ebp], 0

; 1850 : 		vector<CvGreatWorkInMyEmpire> tempWorks;

	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1851 : 
; 1852 : 		tempWorks.clear();

	mov	edx, DWORD PTR _tempWorks$224757[ebp+8]
	mov	DWORD PTR $T242379[ebp], edx
	mov	eax, DWORD PTR $T242379[ebp]
	mov	DWORD PTR $T242405[ebp], eax
	mov	ecx, DWORD PTR $T242405[ebp]
	mov	DWORD PTR $T242404[ebp], ecx
	mov	edx, DWORD PTR _tempWorks$224757[ebp+4]
	mov	DWORD PTR $T242395[ebp], edx
	mov	eax, DWORD PTR $T242395[ebp]
	mov	DWORD PTR $T242407[ebp], eax
	mov	ecx, DWORD PTR $T242407[ebp]
	mov	DWORD PTR $T242406[ebp], ecx
	mov	edx, DWORD PTR $T242404[ebp]
	push	edx
	mov	eax, DWORD PTR $T242406[ebp]
	push	eax
	lea	ecx, DWORD PTR $T242408[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1853 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1854 : 		for (it2 = works1.begin(); it2 != works1.end(); ++it2)
; 1855 : #else
; 1856 : 		for (it2 = works1.begin(); it2 != works1.end(); it2++)

	mov	edx, DWORD PTR _works1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242430[ebp], eax
	mov	ecx, DWORD PTR $T242430[ebp]
	mov	DWORD PTR $T241944[ebp], ecx
	mov	edx, DWORD PTR $T241944[ebp]
	mov	DWORD PTR _it2$224752[ebp], edx
	jmp	SHORT $LN8@FillBuildi
$LN7@FillBuildi:
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR __Tmp$242447[ebp], eax
	mov	ecx, DWORD PTR _it2$224752[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it2$224752[ebp], ecx
	mov	edx, DWORD PTR __Tmp$242447[ebp]
	mov	DWORD PTR $T241945[ebp], edx
$LN8@FillBuildi:
	mov	eax, DWORD PTR _works1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T242462[ebp], ecx
	mov	edx, DWORD PTR $T242462[ebp]
	mov	DWORD PTR $T241946[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T241946[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN6@FillBuildi

; 1857 : #endif
; 1858 : 		{
; 1859 : 			// Copy it over if not chosen, updating its location
; 1860 : 			if (find(aWorksChosen.begin(), aWorksChosen.end(), it2->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T242486[ebp], ecx
	mov	edx, DWORD PTR $T242486[ebp]
	mov	DWORD PTR $T241950[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T242508[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T242518[ebp], ecx
	mov	edx, DWORD PTR $T242518[ebp]
	mov	DWORD PTR $T241947[ebp], edx
	mov	eax, DWORD PTR _aWorksChosen$[ebp+4]
	mov	DWORD PTR $T242534[ebp], eax
	mov	ecx, DWORD PTR $T242534[ebp]
	mov	DWORD PTR $T241948[ebp], ecx
	mov	edx, DWORD PTR $T241947[ebp]
	mov	DWORD PTR $T242547[ebp], edx
	mov	eax, DWORD PTR $T241948[ebp]
	mov	DWORD PTR $T242546[ebp], eax
	mov	ecx, DWORD PTR $T242508[ebp]
	push	ecx
	mov	edx, DWORD PTR $T242547[ebp]
	push	edx
	mov	eax, DWORD PTR $T242546[ebp]
	push	eax
	lea	ecx, DWORD PTR $T242545[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T242546[ebp], edx
	mov	eax, DWORD PTR $T242546[ebp]
	mov	DWORD PTR $T241949[ebp], eax
	mov	ecx, DWORD PTR $T241949[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T241950[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@FillBuildi

; 1861 : 			{
; 1862 : 				GetGreatWorkLocation(it2->m_iGreatWorkIndex, it2->m_iCityID, it2->m_eBuilding, it2->m_iSlot);

	mov	ecx, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T242566[ebp], ecx
	mov	edx, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T242582[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T242598[ebp], eax
	mov	ecx, DWORD PTR $T242566[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR $T242582[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR $T242598[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _it2$224752[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1863 : 				tempWorks.push_back(*it2);

	mov	eax, DWORD PTR _it2$224752[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN5@FillBuildi:

; 1864 : 			}
; 1865 : 		}

	jmp	$LN7@FillBuildi
$LN6@FillBuildi:

; 1866 : 		works1 = tempWorks;

	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	push	ecx
	mov	ecx, DWORD PTR _works1$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1867 : 
; 1868 : 		tempWorks.clear();

	mov	edx, DWORD PTR _tempWorks$224757[ebp+8]
	mov	DWORD PTR $T242839[ebp], edx
	mov	eax, DWORD PTR $T242839[ebp]
	mov	DWORD PTR $T242864[ebp], eax
	mov	ecx, DWORD PTR $T242864[ebp]
	mov	DWORD PTR $T242863[ebp], ecx
	mov	edx, DWORD PTR _tempWorks$224757[ebp+4]
	mov	DWORD PTR $T242855[ebp], edx
	mov	eax, DWORD PTR $T242855[ebp]
	mov	DWORD PTR $T242866[ebp], eax
	mov	ecx, DWORD PTR $T242866[ebp]
	mov	DWORD PTR $T242865[ebp], ecx
	mov	edx, DWORD PTR $T242863[ebp]
	push	edx
	mov	eax, DWORD PTR $T242865[ebp]
	push	eax
	lea	ecx, DWORD PTR $T242867[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 1869 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1870 : 		for (it2 = works2.begin(); it2 != works2.end(); ++it2)
; 1871 : #else
; 1872 : 		for (it2 = works2.begin(); it2 != works2.end(); it2++)

	mov	edx, DWORD PTR _works2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242890[ebp], eax
	mov	ecx, DWORD PTR $T242890[ebp]
	mov	DWORD PTR $T241951[ebp], ecx
	mov	edx, DWORD PTR $T241951[ebp]
	mov	DWORD PTR _it2$224752[ebp], edx
	jmp	SHORT $LN4@FillBuildi
$LN3@FillBuildi:
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR __Tmp$242912[ebp], eax
	mov	ecx, DWORD PTR _it2$224752[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _it2$224752[ebp], ecx
	mov	edx, DWORD PTR __Tmp$242912[ebp]
	mov	DWORD PTR $T241952[ebp], edx
$LN4@FillBuildi:
	mov	eax, DWORD PTR _works2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T242922[ebp], ecx
	mov	edx, DWORD PTR $T242922[ebp]
	mov	DWORD PTR $T241953[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T241953[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN2@FillBuildi

; 1873 : #endif
; 1874 : 		{
; 1875 : 			// Copy it over if not chosen, updating its location
; 1876 : 			if (find(aWorksChosen.begin(), aWorksChosen.end(), it2->m_iGreatWorkIndex) == aWorksChosen.end())

	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T242946[ebp], ecx
	mov	edx, DWORD PTR $T242946[ebp]
	mov	DWORD PTR $T241957[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T242968[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$[ebp+8]
	mov	DWORD PTR $T242978[ebp], ecx
	mov	edx, DWORD PTR $T242978[ebp]
	mov	DWORD PTR $T241954[ebp], edx
	mov	eax, DWORD PTR _aWorksChosen$[ebp+4]
	mov	DWORD PTR $T242994[ebp], eax
	mov	ecx, DWORD PTR $T242994[ebp]
	mov	DWORD PTR $T241955[ebp], ecx
	mov	edx, DWORD PTR $T241954[ebp]
	mov	DWORD PTR $T243007[ebp], edx
	mov	eax, DWORD PTR $T241955[ebp]
	mov	DWORD PTR $T243006[ebp], eax
	mov	ecx, DWORD PTR $T242968[ebp]
	push	ecx
	mov	edx, DWORD PTR $T243007[ebp]
	push	edx
	mov	eax, DWORD PTR $T243006[ebp]
	push	eax
	lea	ecx, DWORD PTR $T243005[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T243006[ebp], edx
	mov	eax, DWORD PTR $T243006[ebp]
	mov	DWORD PTR $T241956[ebp], eax
	mov	ecx, DWORD PTR $T241956[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T241957[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@FillBuildi

; 1877 : 			{
; 1878 : 				GetGreatWorkLocation(it2->m_iGreatWorkIndex, it2->m_iCityID, it2->m_eBuilding, it2->m_iSlot);

	mov	ecx, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T243026[ebp], ecx
	mov	edx, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T243042[ebp], edx
	mov	eax, DWORD PTR _it2$224752[ebp]
	mov	DWORD PTR $T243058[ebp], eax
	mov	ecx, DWORD PTR $T243026[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR $T243042[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR $T243058[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _it2$224752[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1879 : 				tempWorks.push_back(*it2);

	mov	eax, DWORD PTR _it2$224752[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
$LN1@FillBuildi:

; 1880 : 			}
; 1881 : 		}

	jmp	$LN3@FillBuildi
$LN2@FillBuildi:

; 1882 : 		works2 = tempWorks;

	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	push	ecx
	mov	ecx, DWORD PTR _works2$[ebp]
	call	??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=

; 1883 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
$LN9@FillBuildi:

; 1884 : 	return true;

	mov	BYTE PTR $T241958[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	al, BYTE PTR $T241958[ebp]
$LN18@FillBuildi:

; 1885 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$0:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$1:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$2:
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	jmp	??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$6:
	lea	ecx, DWORD PTR _tempWorks$224757[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$8:
	lea	ecx, DWORD PTR _aWorksChosen$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z$10:
	lea	ecx, DWORD PTR _worksToConsider$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-704]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FillBuilding@CvPlayerCulture@@QAE_NV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@AAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@3@1@Z ENDP ; CvPlayerCulture::FillBuilding
EXTRN	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ:PROC ; CvBuildingEntry::GetBuildingClassType
; Function compile flags: /Odtp
;	COMDAT ?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
_eFromBuildingClass$224799 = -40			; size = 4
_iFromWork$224797 = -36					; size = 4
_pFromCity$224798 = -32					; size = 4
_eToBuildingClass$224795 = -28				; size = 4
_pToCity$224794 = -24					; size = 4
_pkToEntry$ = -20					; size = 4
_iFromCityID$ = -16					; size = 4
_iFromSlot$ = -12					; size = 4
_pkFromEntry$ = -8					; size = 4
_eFromBuildingType$ = -4				; size = 4
_kWork$ = 8						; size = 24
_iCityID$ = 32						; size = 4
_eBuilding$ = 36					; size = 4
_iSlot$ = 40						; size = 4
?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z PROC ; CvPlayerCulture::MoveWorkIntoSlot, COMDAT
; _this$ = ecx

; 1893 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1894 : 	CvBuildingEntry *pkToEntry = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkToEntry$[ebp], eax

; 1895 : 
; 1896 : 	int iFromCityID;
; 1897 : 	BuildingTypes eFromBuildingType;
; 1898 : #ifdef AUI_WARNING_FIXES
; 1899 : 	uint iFromSlot;
; 1900 : #else
; 1901 : 	int iFromSlot;
; 1902 : #endif
; 1903 : 	GetGreatWorkLocation(kWork.m_iGreatWorkIndex, iFromCityID, eFromBuildingType, iFromSlot);

	lea	ecx, DWORD PTR _iFromSlot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _eFromBuildingType$[ebp]
	push	edx
	lea	eax, DWORD PTR _iFromCityID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kWork$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGreatWorkLocation@CvPlayerCulture@@QAE_NHAAHAAW4BuildingTypes@@0@Z ; CvPlayerCulture::GetGreatWorkLocation

; 1904 : 
; 1905 : 	CvBuildingEntry *pkFromEntry = GC.getBuildingInfo(eFromBuildingType);

	mov	edx, DWORD PTR _eFromBuildingType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkFromEntry$[ebp], eax

; 1906 : 	if (pkToEntry && pkFromEntry)

	cmp	DWORD PTR _pkToEntry$[ebp], 0
	je	$LN2@MoveWorkIn
	cmp	DWORD PTR _pkFromEntry$[ebp], 0
	je	$LN2@MoveWorkIn

; 1907 : 	{
; 1908 : 		CvCity *pToCity = m_pPlayer->getCity(iCityID);

	mov	eax, DWORD PTR _iCityID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pToCity$224794[ebp], eax

; 1909 : 		BuildingClassTypes eToBuildingClass = (BuildingClassTypes)pkToEntry->GetBuildingClassType();

	mov	ecx, DWORD PTR _pkToEntry$[ebp]
	call	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetBuildingClassType
	mov	DWORD PTR _eToBuildingClass$224795[ebp], eax

; 1910 : 
; 1911 : 		int iFromWork = pToCity->GetCityBuildings()->GetBuildingGreatWork(eToBuildingClass, iSlot);

	mov	edx, DWORD PTR _iSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _eToBuildingClass$224795[ebp]
	push	eax
	mov	ecx, DWORD PTR _pToCity$224794[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iFromWork$224797[ebp], eax

; 1912 : 		CvCity *pFromCity = m_pPlayer->getCity(iFromCityID);

	mov	ecx, DWORD PTR _iFromCityID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pFromCity$224798[ebp], eax

; 1913 : 		BuildingClassTypes eFromBuildingClass = (BuildingClassTypes)pkFromEntry->GetBuildingClassType();

	mov	ecx, DWORD PTR _pkFromEntry$[ebp]
	call	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetBuildingClassType
	mov	DWORD PTR _eFromBuildingClass$224799[ebp], eax

; 1914 : 
; 1915 : 		pToCity->GetCityBuildings()->SetBuildingGreatWork(eToBuildingClass, iSlot, kWork.m_iGreatWorkIndex);

	mov	eax, DWORD PTR _kWork$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eToBuildingClass$224795[ebp]
	push	edx
	mov	ecx, DWORD PTR _pToCity$224794[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 1916 : 		pFromCity->GetCityBuildings()->SetBuildingGreatWork(eFromBuildingClass, iFromSlot, iFromWork);

	mov	eax, DWORD PTR _iFromWork$224797[ebp]
	push	eax
	mov	ecx, DWORD PTR _iFromSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eFromBuildingClass$224799[ebp]
	push	edx
	mov	ecx, DWORD PTR _pFromCity$224798[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork
$LN2@MoveWorkIn:

; 1917 : 	}
; 1918 : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?MoveWorkIntoSlot@CvPlayerCulture@@QAEXVCvGreatWorkInMyEmpire@@HW4BuildingTypes@@H@Z ENDP ; CvPlayerCulture::MoveWorkIntoSlot
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetSwappableWritingIndex, COMDAT
; _this$ = ecx

; 1921 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1922 : 	return m_iSwappableWritingIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 1923 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSwappableWritingIndex@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetSwappableWritingIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetSwappableArtIndex, COMDAT
; _this$ = ecx

; 1926 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 	return m_iSwappableArtIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 1928 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSwappableArtIndex@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetSwappableArtIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetSwappableArtifactIndex, COMDAT
; _this$ = ecx

; 1931 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1932 : 	return m_iSwappableArtifactIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 1933 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSwappableArtifactIndex@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetSwappableArtifactIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetSwappableMusicIndex, COMDAT
; _this$ = ecx

; 1936 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 	return m_iSwappableMusicIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 1938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSwappableMusicIndex@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetSwappableMusicIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z PROC	; CvPlayerCulture::SetSwappableWritingIndex, COMDAT
; _this$ = ecx

; 1941 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1942 : 	m_iSwappableWritingIndex = iIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	DWORD PTR [eax+276], ecx

; 1943 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSwappableWritingIndex@CvPlayerCulture@@QAEXH@Z ENDP	; CvPlayerCulture::SetSwappableWritingIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z PROC	; CvPlayerCulture::SetSwappableArtIndex, COMDAT
; _this$ = ecx

; 1946 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1947 : 	m_iSwappableArtIndex = iIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 1948 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSwappableArtIndex@CvPlayerCulture@@QAEXH@Z ENDP	; CvPlayerCulture::SetSwappableArtIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z PROC ; CvPlayerCulture::SetSwappableArtifactIndex, COMDAT
; _this$ = ecx

; 1951 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1952 : 	m_iSwappableArtifactIndex = iIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	DWORD PTR [eax+284], ecx

; 1953 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSwappableArtifactIndex@CvPlayerCulture@@QAEXH@Z ENDP ; CvPlayerCulture::SetSwappableArtifactIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z PROC	; CvPlayerCulture::SetSwappableMusicIndex, COMDAT
; _this$ = ecx

; 1956 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1957 : 	m_iSwappableMusicIndex = iIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	DWORD PTR [eax+288], ecx

; 1958 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSwappableMusicIndex@CvPlayerCulture@@QAEXH@Z ENDP	; CvPlayerCulture::SetSwappableMusicIndex
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::push_back
PUBLIC	?AddDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z ; CvPlayerCulture::AddDigCompletePlot
; Function compile flags: /Odtp
;	COMDAT ?AddDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -92						; size = 4
_pPlot$ = 8						; size = 4
?AddDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z PROC ; CvPlayerCulture::AddDigCompletePlot, COMDAT
; _this$ = ecx

; 1965 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1966 : 	m_aDigCompletePlots.push_back(pPlot);

	lea	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::push_back

; 1967 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z ENDP ; CvPlayerCulture::AddDigCompletePlot
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase
PUBLIC	?RemoveDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z ; CvPlayerCulture::RemoveDigCompletePlot
; Function compile flags: /Odtp
;	COMDAT ?RemoveDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -80						; size = 4
$T243493 = -32						; size = 4
__Tmp$243480 = -28					; size = 4
$T243468 = -24						; size = 4
$T243455 = -20						; size = 4
$T243454 = -16						; size = 4
$T243453 = -12						; size = 4
$T243452 = -8						; size = 4
_it$ = -4						; size = 4
_pPlot$ = 8						; size = 4
?RemoveDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z PROC ; CvPlayerCulture::RemoveDigCompletePlot, COMDAT
; _this$ = ecx

; 1971 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 1972 : 	vector<CvPlot *>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 1973 : 
; 1974 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 1975 : 	for (it = m_aDigCompletePlots.begin(); it != m_aDigCompletePlots.end(); ++it)
; 1976 : #else
; 1977 : 	for (it = m_aDigCompletePlots.begin(); it != m_aDigCompletePlots.end(); it++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243468[ebp], ecx
	mov	edx, DWORD PTR $T243468[ebp]
	mov	DWORD PTR $T243452[ebp], edx
	mov	eax, DWORD PTR $T243452[ebp]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN4@RemoveDigC
$LN3@RemoveDigC:
	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$243480[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	add	edx, 4
	mov	DWORD PTR _it$[ebp], edx
	mov	eax, DWORD PTR __Tmp$243480[ebp]
	mov	DWORD PTR $T243453[ebp], eax
$LN4@RemoveDigC:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T243493[ebp], edx
	mov	eax, DWORD PTR $T243493[ebp]
	mov	DWORD PTR $T243454[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T243454[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@RemoveDigC

; 1978 : #endif
; 1979 : 	{
; 1980 : 		if (*it == pPlot)

	mov	edx, DWORD PTR _it$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _pPlot$[ebp]
	jne	SHORT $LN1@RemoveDigC

; 1981 : 		{
; 1982 : 			m_aDigCompletePlots.erase(it);

	mov	ecx, DWORD PTR _it$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T243455[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase

; 1983 : 			break;

	jmp	SHORT $LN5@RemoveDigC
$LN1@RemoveDigC:

; 1984 : 		}

	jmp	SHORT $LN3@RemoveDigC
$LN5@RemoveDigC:

; 1985 : 	}
; 1986 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z ENDP ; CvPlayerCulture::RemoveDigCompletePlot
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase
; Function compile flags: /Odtp
;	COMDAT ?ResetDigCompletePlots@CvPlayerCulture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T243614 = -28						; size = 4
$T243598 = -24						; size = 4
$T243719 = -20						; size = 4
$T243718 = -16						; size = 4
$T243717 = -12						; size = 4
$T243716 = -8						; size = 4
$T243715 = -4						; size = 4
?ResetDigCompletePlots@CvPlayerCulture@@QAEXXZ PROC	; CvPlayerCulture::ResetDigCompletePlots, COMDAT
; _this$ = ecx

; 1990 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 1991 : 	m_aDigCompletePlots.clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T243598[ebp], ecx
	mov	edx, DWORD PTR $T243598[ebp]
	mov	DWORD PTR $T243716[ebp], edx
	mov	eax, DWORD PTR $T243716[ebp]
	mov	DWORD PTR $T243715[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T243614[ebp], edx
	mov	eax, DWORD PTR $T243614[ebp]
	mov	DWORD PTR $T243718[ebp], eax
	mov	ecx, DWORD PTR $T243718[ebp]
	mov	DWORD PTR $T243717[ebp], ecx
	mov	edx, DWORD PTR $T243715[ebp]
	push	edx
	mov	eax, DWORD PTR $T243717[ebp]
	push	eax
	lea	ecx, DWORD PTR $T243719[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase

; 1992 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetDigCompletePlots@CvPlayerCulture@@QAEXXZ ENDP	; CvPlayerCulture::ResetDigCompletePlots
_TEXT	ENDS
PUBLIC	?GetNextDigCompletePlot@CvPlayerCulture@@QBEPAVCvPlot@@XZ ; CvPlayerCulture::GetNextDigCompletePlot
; Function compile flags: /Odtp
;	COMDAT ?GetNextDigCompletePlot@CvPlayerCulture@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pRtnValue$ = -4					; size = 4
?GetNextDigCompletePlot@CvPlayerCulture@@QBEPAVCvPlot@@XZ PROC ; CvPlayerCulture::GetNextDigCompletePlot, COMDAT
; _this$ = ecx

; 1996 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1997 : 	CvPlot *pRtnValue = NULL;

	mov	DWORD PTR _pRtnValue$[ebp], 0

; 1998 : 
; 1999 : 	if (m_aDigCompletePlots.size() > 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jbe	SHORT $LN1@GetNextDig

; 2000 : 	{
; 2001 : 		pRtnValue = m_aDigCompletePlots[0];

	xor	eax, eax
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR _pRtnValue$[ebp], eax
$LN1@GetNextDig:

; 2002 : 	}
; 2003 : 
; 2004 : 	return pRtnValue;

	mov	eax, DWORD PTR _pRtnValue$[ebp]

; 2005 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextDigCompletePlot@CvPlayerCulture@@QBEPAVCvPlot@@XZ ENDP ; CvPlayerCulture::GetNextDigCompletePlot
_TEXT	ENDS
PUBLIC	?GetNextDigCompleteArchaeologist@CvPlayerCulture@@QBEPAVCvUnit@@PAPAVCvPlot@@@Z ; CvPlayerCulture::GetNextDigCompleteArchaeologist
EXTRN	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ:PROC ; CvUnit::AI_getUnitAIType
EXTRN	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::nextUnit
EXTRN	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::firstUnit
; Function compile flags: /Odtp
;	COMDAT ?GetNextDigCompleteArchaeologist@CvPlayerCulture@@QBEPAVCvUnit@@PAPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -124						; size = 4
$T243767 = -40						; size = 4
$T243758 = -36						; size = 4
$T243749 = -32						; size = 4
$T243745 = -28						; size = 4
_iDistance$225019 = -24					; size = 4
_pLoopUnit$225014 = -20					; size = 4
_iLoop$225013 = -16					; size = 4
_pPlot$ = -12						; size = 4
_iClosestDistance$ = -8					; size = 4
_pRtnValue$ = -4					; size = 4
_ppPlot$ = 8						; size = 4
?GetNextDigCompleteArchaeologist@CvPlayerCulture@@QBEPAVCvUnit@@PAPAVCvPlot@@@Z PROC ; CvPlayerCulture::GetNextDigCompleteArchaeologist, COMDAT
; _this$ = ecx

; 2009 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 2010 : 	CvUnit *pRtnValue = NULL;

	mov	DWORD PTR _pRtnValue$[ebp], 0

; 2011 : 	CvPlot *pPlot = GetNextDigCompletePlot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextDigCompletePlot@CvPlayerCulture@@QBEPAVCvPlot@@XZ ; CvPlayerCulture::GetNextDigCompletePlot
	mov	DWORD PTR _pPlot$[ebp], eax

; 2012 : 	*ppPlot = pPlot;

	mov	eax, DWORD PTR _ppPlot$[ebp]
	mov	ecx, DWORD PTR _pPlot$[ebp]
	mov	DWORD PTR [eax], ecx

; 2013 : 	int iClosestDistance = MAX_INT;

	mov	DWORD PTR _iClosestDistance$[ebp], 2147483647 ; 7fffffffH

; 2014 : 
; 2015 : 	if (pPlot)

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	$LN7@GetNextDig@2

; 2016 : 	{
; 2017 : 		int iLoop;
; 2018 : 		CvUnit *pLoopUnit;
; 2019 : 		for (pLoopUnit = m_pPlayer->firstUnit(&iLoop); pLoopUnit != NULL; pLoopUnit = m_pPlayer->nextUnit(&iLoop))

	push	0
	lea	edx, DWORD PTR _iLoop$225013[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::firstUnit
	mov	DWORD PTR _pLoopUnit$225014[ebp], eax
	jmp	SHORT $LN6@GetNextDig@2
$LN5@GetNextDig@2:
	push	0
	lea	ecx, DWORD PTR _iLoop$225013[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::nextUnit
	mov	DWORD PTR _pLoopUnit$225014[ebp], eax
$LN6@GetNextDig@2:
	cmp	DWORD PTR _pLoopUnit$225014[ebp], 0
	je	SHORT $LN7@GetNextDig@2

; 2020 : 		{
; 2021 : 			if (pLoopUnit->AI_getUnitAIType() == UNITAI_ARCHAEOLOGIST)

	mov	ecx, DWORD PTR _pLoopUnit$225014[ebp]
	call	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ ; CvUnit::AI_getUnitAIType
	cmp	eax, 39					; 00000027H
	jne	SHORT $LN3@GetNextDig@2

; 2022 : 			{
; 2023 : 				int iDistance = plotDistance(pLoopUnit->getX(), pLoopUnit->getY(), pPlot->getX(), pPlot->getY());

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T243745[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T243749[ebp], eax
	mov	ecx, DWORD PTR _pLoopUnit$225014[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T243758[ebp], edx
	mov	eax, DWORD PTR _pLoopUnit$225014[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T243767[ebp], ecx
	mov	edx, DWORD PTR $T243745[ebp]
	push	edx
	mov	eax, DWORD PTR $T243749[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243758[ebp]
	push	ecx
	mov	edx, DWORD PTR $T243767[ebp]
	push	edx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iDistance$225019[ebp], eax

; 2024 : 				if (iDistance < iClosestDistance)

	mov	eax, DWORD PTR _iDistance$225019[ebp]
	cmp	eax, DWORD PTR _iClosestDistance$[ebp]
	jge	SHORT $LN2@GetNextDig@2

; 2025 : 				{
; 2026 : 					pRtnValue = pLoopUnit;

	mov	ecx, DWORD PTR _pLoopUnit$225014[ebp]
	mov	DWORD PTR _pRtnValue$[ebp], ecx

; 2027 : 					iClosestDistance = iDistance;

	mov	edx, DWORD PTR _iDistance$225019[ebp]
	mov	DWORD PTR _iClosestDistance$[ebp], edx
$LN2@GetNextDig@2:

; 2028 : 				}
; 2029 : 				if (iDistance == 0) break;

	cmp	DWORD PTR _iDistance$225019[ebp], 0
	jne	SHORT $LN3@GetNextDig@2
	jmp	SHORT $LN7@GetNextDig@2
$LN3@GetNextDig@2:

; 2030 : 			}
; 2031 : 		}

	jmp	$LN5@GetNextDig@2
$LN7@GetNextDig@2:

; 2032 : 	}
; 2033 : 
; 2034 : 	return pRtnValue;

	mov	eax, DWORD PTR _pRtnValue$[ebp]

; 2035 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNextDigCompleteArchaeologist@CvPlayerCulture@@QBEPAVCvUnit@@PAPAVCvPlot@@@Z ENDP ; CvPlayerCulture::GetNextDigCompleteArchaeologist
_TEXT	ENDS
PUBLIC	?HasDigCompleteHere@CvPlayerCulture@@QBE_NPAVCvPlot@@@Z ; CvPlayerCulture::HasDigCompleteHere
; Function compile flags: /Odtp
;	COMDAT ?HasDigCompleteHere@CvPlayerCulture@@QBE_NPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T243883 = -28						; size = 4
__Tmp$243878 = -24					; size = 4
$T243865 = -20						; size = 4
$T243857 = -16						; size = 4
$T243856 = -12						; size = 4
$T243855 = -8						; size = 4
_it$ = -4						; size = 4
_pPlot$ = 8						; size = 4
?HasDigCompleteHere@CvPlayerCulture@@QBE_NPAVCvPlot@@@Z PROC ; CvPlayerCulture::HasDigCompleteHere, COMDAT
; _this$ = ecx

; 2039 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 2040 : 	vector<CvPlot *>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 2041 : 
; 2042 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 2043 : 	for (it = m_aDigCompletePlots.begin(); it != m_aDigCompletePlots.end(); ++it)
; 2044 : #else
; 2045 : 	for (it = m_aDigCompletePlots.begin(); it != m_aDigCompletePlots.end(); it++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243865[ebp], ecx
	mov	edx, DWORD PTR $T243865[ebp]
	mov	DWORD PTR $T243855[ebp], edx
	mov	eax, DWORD PTR $T243855[ebp]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN4@HasDigComp
$LN3@HasDigComp:
	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$243878[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	add	edx, 4
	mov	DWORD PTR _it$[ebp], edx
	mov	eax, DWORD PTR __Tmp$243878[ebp]
	mov	DWORD PTR $T243856[ebp], eax
$LN4@HasDigComp:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T243883[ebp], edx
	mov	eax, DWORD PTR $T243883[ebp]
	mov	DWORD PTR $T243857[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T243857[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@HasDigComp

; 2046 : #endif
; 2047 : 	{
; 2048 : 		if (*it == pPlot)

	mov	edx, DWORD PTR _it$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _pPlot$[ebp]
	jne	SHORT $LN1@HasDigComp

; 2049 : 		{
; 2050 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@HasDigComp
$LN1@HasDigComp:

; 2051 : 		}
; 2052 : 	}

	jmp	SHORT $LN3@HasDigComp
$LN2@HasDigComp:

; 2053 : 
; 2054 : 	return false;

	xor	al, al
$LN5@HasDigComp:

; 2055 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasDigCompleteHere@CvPlayerCulture@@QBE_NPAVCvPlot@@@Z ENDP ; CvPlayerCulture::HasDigCompleteHere
_TEXT	ENDS
PUBLIC	?GetWrittenArtifactCulture@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetWrittenArtifactCulture
EXTRN	?getCulturePercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getCulturePercent
EXTRN	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ:PROC ; CvGame::getGameSpeedInfo
EXTRN	?GetCultureYieldFromPreviousTurns@CvPlayer@@QAEHHH@Z:PROC ; CvPlayer::GetCultureYieldFromPreviousTurns
; Function compile flags: /Odtp
;	COMDAT ?GetWrittenArtifactCulture@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T243908 = -12						; size = 4
$T243904 = -8						; size = 4
_iValue$ = -4						; size = 4
?GetWrittenArtifactCulture@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetWrittenArtifactCulture, COMDAT
; _this$ = ecx

; 2059 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2060 : 	// Culture boost based on 8 previous turns; same as GREAT_WRITER; move to XML?
; 2061 : 	int iValue = m_pPlayer->GetCultureYieldFromPreviousTurns(GC.getGame().getGameTurn(), 8 /*iPreviousTurnsToCount */);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T243904[ebp], eax
	push	8
	mov	ecx, DWORD PTR $T243904[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetCultureYieldFromPreviousTurns@CvPlayer@@QAEHHH@Z ; CvPlayer::GetCultureYieldFromPreviousTurns
	mov	DWORD PTR _iValue$[ebp], eax

; 2062 : 
; 2063 : 	// Modify based on game speed
; 2064 : 	iValue *= GC.getGame().getGameSpeedInfo().getCulturePercent();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T243908[ebp], edx
	mov	ecx, DWORD PTR $T243908[ebp]
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getCulturePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getCulturePercent
	imul	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR _iValue$[ebp], eax

; 2065 : 	iValue /= 100;

	mov	eax, DWORD PTR _iValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iValue$[ebp], eax

; 2066 : 
; 2067 : 	return iValue;

	mov	eax, DWORD PTR _iValue$[ebp]

; 2068 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWrittenArtifactCulture@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetWrittenArtifactCulture
_TEXT	ENDS
PUBLIC	??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@ ; `string'
PUBLIC	?GetArchaeologyChoice@CvPlayerCulture@@QAE?AW4ArchaeologyChoiceType@@PAVCvPlot@@@Z ; CvPlayerCulture::GetArchaeologyChoice
EXTRN	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ:PROC ; CvPlayer::GetEconomicAI
EXTRN	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z:PROC ; CvPlayer::GetNumUnitsWithUnitAI
EXTRN	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ:PROC ; CvPlot::GetArchaeologicalRecord
EXTRN	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ:PROC	; CvPlot::getWorkingCity
EXTRN	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetMinorCivApproach
EXTRN	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ:PROC ; CvGrandStrategyAI::GetActiveGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
EXTRN	?HasWrittenArtifact@CvPlot@@QBE_NXZ:PROC	; CvPlot::HasWrittenArtifact
;	COMDAT ??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fautovariable.h
CONST	SEGMENT
??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@ DB 'AIGRANDSTRATEG'
	DB	'Y_UNITED_NATIONS', 00H			; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
CONST	ENDS
;	COMDAT ?GetArchaeologyChoice@CvPlayerCulture@@QAE?AW4ArchaeologyChoiceType@@PAVCvPlot@@@Z
_TEXT	SEGMENT
tv202 = -108						; size = 4
_this$ = -104						; size = 4
$T243963 = -100						; size = 4
$T243951 = -96						; size = 4
$T243945 = -92						; size = 4
$T243944 = -88						; size = 4
$T243940 = -84						; size = 4
$T243936 = -80						; size = 4
$T243932 = -76						; size = 4
$T243925 = -72						; size = 4
$T243916 = -68						; size = 4
$T243912 = -64						; size = 20
$T243911 = -44						; size = 20
_iNumGreatWorkSlots$225067 = -24			; size = 4
_iLimitingFactor$225068 = -20				; size = 4
_iNumArchaeologists$225065 = -16			; size = 4
_iNumSites$225066 = -12					; size = 4
_eArtArtifactSlot$ = -8					; size = 4
_eRtnValue$ = -4					; size = 4
_pPlot$ = 8						; size = 4
?GetArchaeologyChoice@CvPlayerCulture@@QAE?AW4ArchaeologyChoiceType@@PAVCvPlot@@@Z PROC ; CvPlayerCulture::GetArchaeologyChoice, COMDAT
; _this$ = ecx

; 2072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2073 : 	ArchaeologyChoiceType eRtnValue = ARCHAEOLOGY_DO_NOTHING;

	mov	DWORD PTR _eRtnValue$[ebp], 0

; 2074 : 
; 2075 : 	GreatWorkSlotType eArtArtifactSlot = CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT();

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	mov	DWORD PTR _eArtArtifactSlot$[ebp], eax

; 2076 : 
; 2077 : 	if (pPlot->HasWrittenArtifact())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?HasWrittenArtifact@CvPlot@@QBE_NXZ	; CvPlot::HasWrittenArtifact
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@GetArchaeo

; 2078 : 	{
; 2079 : 		eRtnValue = ARCHAEOLOGY_ARTIFACT_WRITING;

	mov	DWORD PTR _eRtnValue$[ebp], 5
$LN20@GetArchaeo:

; 2080 : 	}
; 2081 : 	
; 2082 : 	// No slots? Definitely go for Landmark or Cultural Renaissance
; 2083 : 	if (!HasAvailableGreatWorkSlot(eArtArtifactSlot))

	mov	ecx, DWORD PTR _eArtArtifactSlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasAvailableGreatWorkSlot@CvPlayerCulture@@QAE_NW4GreatWorkSlotType@@@Z ; CvPlayerCulture::HasAvailableGreatWorkSlot
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN19@GetArchaeo

; 2084 : 	{
; 2085 : 		if (pPlot->HasWrittenArtifact())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?HasWrittenArtifact@CvPlot@@QBE_NXZ	; CvPlot::HasWrittenArtifact
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@GetArchaeo

; 2086 : 		{
; 2087 : 			eRtnValue = ARCHAEOLOGY_CULTURE_BOOST;

	mov	DWORD PTR _eRtnValue$[ebp], 4

; 2088 : 		}
; 2089 : 		else

	jmp	SHORT $LN17@GetArchaeo
$LN18@GetArchaeo:

; 2090 : 		{
; 2091 : 			eRtnValue = ARCHAEOLOGY_LANDMARK;

	mov	DWORD PTR _eRtnValue$[ebp], 1
$LN17@GetArchaeo:

; 2092 : 		}

	jmp	$LN16@GetArchaeo
$LN19@GetArchaeo:

; 2093 : 	}
; 2094 : 
; 2095 : 	// Outside territory? Go for artifact ...
; 2096 : 	else if (pPlot->getOwner() != m_pPlayer->GetID())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR $T243916[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T243925[ebp], edx
	mov	eax, DWORD PTR $T243916[ebp]
	cmp	eax, DWORD PTR $T243925[ebp]
	je	$LN15@GetArchaeo

; 2097 : 	{
; 2098 : 		eRtnValue = ARCHAEOLOGY_ARTIFACT_PLAYER1;

	mov	DWORD PTR _eRtnValue$[ebp], 2

; 2099 : 
; 2100 : 		// ... unless this is a city state we want to influence to help with diplo victory
; 2101 : 		if (pPlot->getOwner() != NO_PLAYER && GET_PLAYER(pPlot->getOwner()).isMinorCiv())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	edx, -1
	je	$LN14@GetArchaeo
	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T243932[ebp], ecx
	mov	edx, DWORD PTR $T243932[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243936[ebp], edx
	mov	ecx, DWORD PTR $T243936[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@GetArchaeo

; 2102 : 		{
; 2103 : 			if (m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy() == (AIGrandStrategyTypes) GC.getInfoTypeForString("AIGRANDSTRATEGY_UNITED_NATIONS"))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	mov	esi, eax
	push	0
	push	OFFSET ??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	cmp	esi, eax
	jne	SHORT $LN14@GetArchaeo

; 2104 : 			{
; 2105 : 				if (m_pPlayer->GetDiplomacyAI()->GetMinorCivApproach(pPlot->getOwner()) != MINOR_CIV_APPROACH_CONQUEST)

	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T243940[ebp], eax
	mov	ecx, DWORD PTR $T243940[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z ; CvDiplomacyAI::GetMinorCivApproach
	cmp	eax, 3
	je	SHORT $LN14@GetArchaeo

; 2106 : 				{
; 2107 : 					eRtnValue = ARCHAEOLOGY_LANDMARK;

	mov	DWORD PTR _eRtnValue$[ebp], 1
$LN14@GetArchaeo:

; 2108 : 				}
; 2109 : 			}
; 2110 : 		}
; 2111 : 	}

	jmp	$LN16@GetArchaeo
$LN15@GetArchaeo:

; 2112 : 
; 2113 : 	// Not a tile a city can work?  Go for artifact
; 2114 : 	else if (pPlot->getWorkingCity() == NULL)

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	test	eax, eax
	jne	SHORT $LN10@GetArchaeo

; 2115 : 	{
; 2116 : 		eRtnValue = ARCHAEOLOGY_ARTIFACT_PLAYER1;

	mov	DWORD PTR _eRtnValue$[ebp], 2
	jmp	$LN16@GetArchaeo
$LN10@GetArchaeo:

; 2117 : 	}
; 2118 : 
; 2119 : 	// Otherwise go for Landmark if from Ancient Era, or if have enough other Archaeologists and Antiquity sites to fill all slots
; 2120 : 	else if (pPlot->GetArchaeologicalRecord().m_eEra == 0)

	lea	eax, DWORD PTR $T243911[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@GetArchaeo

; 2121 : 	{
; 2122 : 		eRtnValue = ARCHAEOLOGY_LANDMARK;

	mov	DWORD PTR _eRtnValue$[ebp], 1

; 2123 : 	}
; 2124 : 
; 2125 : 	else

	jmp	$LN16@GetArchaeo
$LN8@GetArchaeo:

; 2126 : 	{
; 2127 : 		int iNumArchaeologists = m_pPlayer->GetNumUnitsWithUnitAI(UNITAI_ARCHAEOLOGIST, true) - 1 /* For this one that just completed work */;

	push	1
	push	1
	push	39					; 00000027H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z ; CvPlayer::GetNumUnitsWithUnitAI
	sub	eax, 1
	mov	DWORD PTR _iNumArchaeologists$225065[ebp], eax

; 2128 : 		int iNumSites = m_pPlayer->GetEconomicAI()->GetVisibleAntiquitySites() - 1 /* For this one then just was completed */;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ ; CvPlayer::GetEconomicAI
	mov	DWORD PTR $T243944[ebp], eax
	mov	eax, DWORD PTR $T243944[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T243945[ebp], ecx
	mov	edx, DWORD PTR $T243945[ebp]
	sub	edx, 1
	mov	DWORD PTR _iNumSites$225066[ebp], edx

; 2129 : 		int iNumGreatWorkSlots = m_pPlayer->GetCulture()->GetNumAvailableGreatWorkSlots(eArtArtifactSlot);

	mov	eax, DWORD PTR _eArtArtifactSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
	mov	DWORD PTR _iNumGreatWorkSlots$225067[ebp], eax

; 2130 : 		int iLimitingFactor = min(iNumArchaeologists, iNumSites);

	mov	edx, DWORD PTR _iNumSites$225066[ebp]
	cmp	edx, DWORD PTR _iNumArchaeologists$225065[ebp]
	jge	SHORT $LN41@GetArchaeo
	lea	eax, DWORD PTR _iNumSites$225066[ebp]
	mov	DWORD PTR tv202[ebp], eax
	jmp	SHORT $LN42@GetArchaeo
$LN41@GetArchaeo:
	lea	ecx, DWORD PTR _iNumArchaeologists$225065[ebp]
	mov	DWORD PTR tv202[ebp], ecx
$LN42@GetArchaeo:
	mov	edx, DWORD PTR tv202[ebp]
	mov	DWORD PTR $T243951[ebp], edx
	mov	eax, DWORD PTR $T243951[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iLimitingFactor$225068[ebp], ecx

; 2131 : 
; 2132 : 		if (iNumGreatWorkSlots <= iLimitingFactor)

	mov	edx, DWORD PTR _iNumGreatWorkSlots$225067[ebp]
	cmp	edx, DWORD PTR _iLimitingFactor$225068[ebp]
	jg	SHORT $LN6@GetArchaeo

; 2133 : 		{
; 2134 : 			if (pPlot->HasWrittenArtifact())

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?HasWrittenArtifact@CvPlot@@QBE_NXZ	; CvPlot::HasWrittenArtifact
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@GetArchaeo

; 2135 : 			{
; 2136 : 				eRtnValue = ARCHAEOLOGY_CULTURE_BOOST;

	mov	DWORD PTR _eRtnValue$[ebp], 4

; 2137 : 			}
; 2138 : 			else

	jmp	SHORT $LN4@GetArchaeo
$LN5@GetArchaeo:

; 2139 : 			{
; 2140 : 				eRtnValue = ARCHAEOLOGY_LANDMARK;

	mov	DWORD PTR _eRtnValue$[ebp], 1
$LN4@GetArchaeo:

; 2141 : 			}
; 2142 : 		}
; 2143 : 		else

	jmp	SHORT $LN16@GetArchaeo
$LN6@GetArchaeo:

; 2144 : 		{
; 2145 : 			eRtnValue = ARCHAEOLOGY_ARTIFACT_PLAYER1;

	mov	DWORD PTR _eRtnValue$[ebp], 2
$LN16@GetArchaeo:

; 2146 : 		}
; 2147 : 	}
; 2148 : 
; 2149 : 	// If chose an artifact, would player 2's be better?
; 2150 : 	if (eRtnValue == ARCHAEOLOGY_ARTIFACT_PLAYER1)

	cmp	DWORD PTR _eRtnValue$[ebp], 2
	jne	SHORT $LN2@GetArchaeo

; 2151 : 	{
; 2152 : 		if (pPlot->GetArchaeologicalRecord().m_ePlayer2 == m_pPlayer->GetID())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T243963[ebp], eax
	lea	ecx, DWORD PTR $T243912[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR $T243963[ebp]
	jne	SHORT $LN2@GetArchaeo

; 2153 : 		{
; 2154 : 			// For now have AI player try to collect their own artifacts
; 2155 : 			eRtnValue = ARCHAEOLOGY_ARTIFACT_PLAYER2;

	mov	DWORD PTR _eRtnValue$[ebp], 3
$LN2@GetArchaeo:

; 2156 : 		}
; 2157 : 	}
; 2158 : 
; 2159 : 	return eRtnValue;

	mov	eax, DWORD PTR _eRtnValue$[ebp]

; 2160 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetArchaeologyChoice@CvPlayerCulture@@QAE?AW4ArchaeologyChoiceType@@PAVCvPlot@@@Z ENDP ; CvPlayerCulture::GetArchaeologyChoice
_TEXT	ENDS
PUBLIC	??_C@_0BF@OIICPAEJ@IMPROVEMENT_LANDMARK?$AA@	; `string'
PUBLIC	?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z ; CultureHelpers::GetArtifact
PUBLIC	?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z ; CvPlayerCulture::DoArchaeologyChoice
EXTRN	?SetNumArchaeologyChoices@CvPlayer@@QAEXH@Z:PROC ; CvPlayer::SetNumArchaeologyChoices
EXTRN	?GetNumArchaeologyChoices@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumArchaeologyChoices
EXTRN	?changeJONSCulture@CvPlayer@@QAEXH@Z:PROC	; CvPlayer::changeJONSCulture
EXTRN	?ChangeNegativeArchaeologyPoints@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z:PROC ; CvDiplomacyAI::ChangeNegativeArchaeologyPoints
EXTRN	?ChangeNumLandmarksBuiltForMe@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z:PROC ; CvDiplomacyAI::ChangeNumLandmarksBuiltForMe
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
EXTRN	?ChangeFriendshipWithMajor@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z:PROC ; CvMinorCivAI::ChangeFriendshipWithMajor
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z:PROC	; CvUnit::kill
EXTRN	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z:PROC ; CvPlot::setImprovementType
;	COMDAT ??_C@_0BF@OIICPAEJ@IMPROVEMENT_LANDMARK?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BF@OIICPAEJ@IMPROVEMENT_LANDMARK?$AA@ DB 'IMPROVEMENT_LANDMARK', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$2
__ehfuncinfo$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z
_TEXT	SEGMENT
tv471 = -400						; size = 4
tv470 = -396						; size = 4
tv581 = -392						; size = 4
tv468 = -388						; size = 4
tv467 = -384						; size = 4
tv556 = -380						; size = 4
tv465 = -376						; size = 4
tv464 = -372						; size = 4
tv531 = -368						; size = 4
tv80 = -364						; size = 4
_this$ = -360						; size = 4
$T244242 = -356						; size = 4
$T244238 = -352						; size = 4
$T244234 = -348						; size = 4
$T244230 = -344						; size = 4
$T244226 = -340						; size = 4
$T244214 = -336						; size = 4
$T244205 = -332						; size = 4
$T244201 = -328						; size = 4
$T244192 = -324						; size = 4
$T244183 = -320						; size = 4
$T244174 = -316						; size = 4
$T244170 = -312						; size = 4
$T244166 = -308						; size = 4
$T244154 = -304						; size = 4
$T244145 = -300						; size = 4
$T244141 = -296						; size = 4
$T244132 = -292						; size = 4
$T244123 = -288						; size = 4
$T244114 = -284						; size = 4
$T244110 = -280						; size = 4
$T244106 = -276						; size = 4
$T244094 = -272						; size = 4
$T244085 = -268						; size = 4
$T244081 = -264						; size = 4
$T244072 = -260						; size = 4
$T244063 = -256						; size = 4
$T244054 = -252						; size = 4
$T244050 = -248						; size = 4
$T244046 = -244						; size = 4
$T244034 = -240						; size = 4
$T244025 = -236						; size = 4
$T244021 = -232						; size = 4
$T244012 = -228						; size = 4
$T243997 = -224						; size = 4
$T243990 = -220						; size = 4
$T243981 = -216						; size = 4
$T243974 = -212						; size = 20
$T243973 = -192						; size = 20
$T243972 = -172						; size = 4
$T243971 = -168						; size = 20
$T243970 = -148						; size = 20
$T243969 = -128						; size = 4
$T243968 = -124						; size = 20
$T243967 = -104						; size = 20
$T243966 = -84						; size = 4
_iValue$225134 = -80					; size = 4
_iGWindex$225127 = -76					; size = 4
_iGWindex$225121 = -72					; size = 4
_iGWindex$225115 = -68					; size = 4
_iFriendship$225110 = -64				; size = 4
_kOwner$225108 = -60					; size = 4
_eLandmarkImprovement$225103 = -56			; size = 4
_eArtArtifactSlot$225092 = -52				; size = 4
_eClass$225095 = -48					; size = 4
_eWritingSlot$225093 = -44				; size = 4
_eGreatArtifact$225094 = -40				; size = 4
_pUnit$ = -36						; size = 4
_iSlot$ = -32						; size = 4
_pHousingCity$ = -28					; size = 4
_pPlot$ = -24						; size = 4
_pCulture$ = -20					; size = 4
_eBuildingToHouse$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_eChoice$ = 8						; size = 4
?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z PROC ; CvPlayerCulture::DoArchaeologyChoice, COMDAT
; _this$ = ecx

; 2164 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 388				; 00000184H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2165 : 	CvGameCulture *pCulture = GC.getGame().GetGameCulture();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T243981[ebp], eax
	mov	ecx, DWORD PTR $T243981[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR _pCulture$[ebp], eax

; 2166 : 	BuildingClassTypes eBuildingToHouse;
; 2167 : #ifdef AUI_WARNING_FIXES
; 2168 : 	uint iSlot;
; 2169 : #else
; 2170 : 	int iSlot;
; 2171 : #endif
; 2172 : 	CvCity *pHousingCity;
; 2173 : 	CvPlot *pPlot;
; 2174 : 	CvUnit *pUnit = GetNextDigCompleteArchaeologist(&pPlot);

	lea	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextDigCompleteArchaeologist@CvPlayerCulture@@QBEPAVCvUnit@@PAPAVCvPlot@@@Z ; CvPlayerCulture::GetNextDigCompleteArchaeologist
	mov	DWORD PTR _pUnit$[ebp], eax

; 2175 : 	if (pUnit)

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	$LN19@DoArchaeol

; 2176 : 	{
; 2177 : 		GreatWorkSlotType eArtArtifactSlot = CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT();

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	mov	DWORD PTR _eArtArtifactSlot$225092[ebp], eax

; 2178 : 		GreatWorkSlotType eWritingSlot = CvTypes::getGREAT_WORK_SLOT_LITERATURE();

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	mov	DWORD PTR _eWritingSlot$225093[ebp], eax

; 2179 : 		GreatWorkType eGreatArtifact = CultureHelpers::GetArtifact(pPlot);

	mov	edx, DWORD PTR _pPlot$[ebp]
	push	edx
	call	?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z ; CultureHelpers::GetArtifact
	add	esp, 4
	mov	DWORD PTR _eGreatArtifact$225094[ebp], eax

; 2180 : 		GreatWorkClass eClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ARTIFACT");

	push	0
	push	OFFSET ??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eClass$225095[ebp], eax

; 2181 : 
; 2182 : 		switch (eChoice)

	mov	eax, DWORD PTR _eChoice$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv80[ebp], ecx
	cmp	DWORD PTR tv80[ebp], 4
	ja	$LN16@DoArchaeol
	mov	edx, DWORD PTR tv80[ebp]
	jmp	DWORD PTR $LN154@DoArchaeol[edx*4]

; 2183 : 		{
; 2184 : 		case ARCHAEOLOGY_DO_NOTHING:
; 2185 : 			break;

	jmp	$LN16@DoArchaeol
$LN14@DoArchaeol:

; 2186 : 		case ARCHAEOLOGY_LANDMARK:
; 2187 : 			{
; 2188 : 				ImprovementTypes eLandmarkImprovement = (ImprovementTypes)GC.getInfoTypeForString("IMPROVEMENT_LANDMARK");

	push	0
	push	OFFSET ??_C@_0BF@OIICPAEJ@IMPROVEMENT_LANDMARK?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eLandmarkImprovement$225103[ebp], eax

; 2189 : 				if (eLandmarkImprovement != NO_IMPROVEMENT)

	cmp	DWORD PTR _eLandmarkImprovement$225103[ebp], -1
	je	$LN13@DoArchaeol

; 2190 : 				{
; 2191 : 					pPlot->setImprovementType(eLandmarkImprovement, m_pPlayer->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T243990[ebp], edx
	mov	eax, DWORD PTR $T243990[ebp]
	push	eax
	mov	ecx, DWORD PTR _eLandmarkImprovement$225103[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 2192 : 					pUnit->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 2193 : 
; 2194 : 					if (pPlot->getOwner() != NO_PLAYER)

	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, -1
	je	$LN13@DoArchaeol

; 2195 : 					{
; 2196 : 						CvPlayer &kOwner = GET_PLAYER(pPlot->getOwner());

	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR $T243997[ebp], edx
	mov	eax, DWORD PTR $T243997[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOwner$225108[ebp], eax

; 2197 : 
; 2198 : 						// City-state owned territory?
; 2199 : 						if (kOwner.isMinorCiv())

	mov	ecx, DWORD PTR _kOwner$225108[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@DoArchaeol

; 2200 : 						{
; 2201 : 							int iFriendship = GC.getLANDMARK_MINOR_FRIENDSHIP_CHANGE();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7120
	mov	DWORD PTR _iFriendship$225110[ebp], edx

; 2202 : 							kOwner.GetMinorCivAI()->ChangeFriendshipWithMajor(m_pPlayer->GetID(), iFriendship);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244012[ebp], edx
	push	0
	mov	eax, DWORD PTR _iFriendship$225110[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244012[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kOwner$225108[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?ChangeFriendshipWithMajor@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z ; CvMinorCivAI::ChangeFriendshipWithMajor
	jmp	SHORT $LN13@DoArchaeol
$LN11@DoArchaeol:

; 2203 : 						}
; 2204 : 
; 2205 : 						// AI major civ owned territory?
; 2206 : 						else if (!kOwner.isHuman())

	mov	ecx, DWORD PTR _kOwner$225108[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@DoArchaeol

; 2207 : 						{
; 2208 : 							kOwner.GetDiplomacyAI()->ChangeNumLandmarksBuiltForMe(m_pPlayer->GetID(), 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244021[ebp], edx
	push	1
	mov	eax, DWORD PTR $T244021[ebp]
	push	eax
	mov	ecx, DWORD PTR _kOwner$225108[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNumLandmarksBuiltForMe@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNumLandmarksBuiltForMe
$LN13@DoArchaeol:

; 2209 : 						}
; 2210 : 					}
; 2211 : 				}
; 2212 : 			}
; 2213 : 			break;

	jmp	$LN16@DoArchaeol
$LN8@DoArchaeol:

; 2214 : 		case ARCHAEOLOGY_ARTIFACT_PLAYER1:
; 2215 : 			{
; 2216 : 				if (pPlot->getOwner() != pUnit->getOwner() && pPlot->getOwner() != NO_PLAYER)

	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR $T244025[ebp], edx
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T244034[ebp], ecx
	mov	edx, DWORD PTR $T244025[ebp]
	cmp	edx, DWORD PTR $T244034[ebp]
	je	SHORT $LN64@DoArchaeol
	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	cmp	ecx, -1
	je	SHORT $LN64@DoArchaeol

; 2217 : 				{
; 2218 : 					GET_PLAYER(pPlot->getOwner()).GetDiplomacyAI()->ChangeNegativeArchaeologyPoints(pUnit->getOwner(), 10);

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T244046[ebp], eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	mov	DWORD PTR $T244050[ebp], edx
	mov	eax, DWORD PTR $T244050[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244054[ebp], eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR $T244046[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T244054[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNegativeArchaeologyPoints@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNegativeArchaeologyPoints

; 2219 : 				}
; 2220 : 				pHousingCity = m_pPlayer->GetCulture()->GetClosestAvailableGreatWorkSlot(pUnit->getX(),pUnit->getY(), eArtArtifactSlot, &eBuildingToHouse, &iSlot);

$LN64@DoArchaeol:
	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T244063[ebp], eax
	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T244072[ebp], edx
	lea	eax, DWORD PTR _iSlot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _eBuildingToHouse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eArtArtifactSlot$225092[ebp]
	push	edx
	mov	eax, DWORD PTR $T244063[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244072[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot
	mov	DWORD PTR _pHousingCity$[ebp], eax

; 2221 : 				int iGWindex = 	pCulture->CreateGreatWork(eGreatArtifact, eClass, pPlot->GetArchaeologicalRecord().m_ePlayer1, pPlot->GetArchaeologicalRecord().m_eEra, "");

	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T243966[ebp], esp
	mov	DWORD PTR $T244081[ebp], eax
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN72@DoArchaeol
	mov	DWORD PTR tv531[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN73@DoArchaeol
$LN72@DoArchaeol:
	mov	DWORD PTR tv531[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN73@DoArchaeol:
	mov	edx, DWORD PTR tv531[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244081[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T244081[ebp]
	mov	DWORD PTR tv464[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T243967[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	edx, DWORD PTR [eax+4]
	push	edx
	lea	eax, DWORD PTR $T243968[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _eClass$225095[ebp]
	push	edx
	mov	eax, DWORD PTR _eGreatArtifact$225094[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pCulture$[ebp]
	call	?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z ; CvGameCulture::CreateGreatWork
	mov	DWORD PTR tv465[ebp], eax
	mov	ecx, DWORD PTR tv465[ebp]
	mov	DWORD PTR _iGWindex$225115[ebp], ecx

; 2222 : 				pHousingCity->GetCityBuildings()->SetBuildingGreatWork(eBuildingToHouse, iSlot, iGWindex);

	mov	edx, DWORD PTR _iGWindex$225115[ebp]
	push	edx
	mov	eax, DWORD PTR _iSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eBuildingToHouse$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pHousingCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 2223 : 				pPlot->setImprovementType(NO_IMPROVEMENT);

	push	-1
	push	-1
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 2224 : 				pUnit->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 2225 : 			}
; 2226 : 			break;

	jmp	$LN16@DoArchaeol
$LN6@DoArchaeol:

; 2227 : 		case ARCHAEOLOGY_ARTIFACT_PLAYER2:
; 2228 : 			{
; 2229 : 				if (pPlot->getOwner() != pUnit->getOwner() && pPlot->getOwner() != NO_PLAYER)

	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T244085[ebp], eax
	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T244094[ebp], edx
	mov	eax, DWORD PTR $T244085[ebp]
	cmp	eax, DWORD PTR $T244094[ebp]
	je	SHORT $LN93@DoArchaeol
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	edx, -1
	je	SHORT $LN93@DoArchaeol

; 2230 : 				{
; 2231 : 					GET_PLAYER(pPlot->getOwner()).GetDiplomacyAI()->ChangeNegativeArchaeologyPoints(pUnit->getOwner(), 10);

	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T244106[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T244110[ebp], eax
	mov	ecx, DWORD PTR $T244110[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244114[ebp], ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR $T244106[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244114[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNegativeArchaeologyPoints@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNegativeArchaeologyPoints

; 2232 : 				}
; 2233 : 				pHousingCity = m_pPlayer->GetCulture()->GetClosestAvailableGreatWorkSlot(pUnit->getX(),pUnit->getY(), eArtArtifactSlot, &eBuildingToHouse, &iSlot);

$LN93@DoArchaeol:
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T244123[ebp], ecx
	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T244132[ebp], eax
	lea	ecx, DWORD PTR _iSlot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _eBuildingToHouse$[ebp]
	push	edx
	mov	eax, DWORD PTR _eArtArtifactSlot$225092[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244123[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244132[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot
	mov	DWORD PTR _pHousingCity$[ebp], eax

; 2234 : 				int iGWindex = 	pCulture->CreateGreatWork(eGreatArtifact, eClass, pPlot->GetArchaeologicalRecord().m_ePlayer2, pPlot->GetArchaeologicalRecord().m_eEra, "");

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T243969[ebp], esp
	mov	DWORD PTR $T244141[ebp], ecx
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN101@DoArchaeol
	mov	DWORD PTR tv556[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN102@DoArchaeol
$LN101@DoArchaeol:
	mov	DWORD PTR tv556[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN102@DoArchaeol:
	mov	eax, DWORD PTR tv556[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244141[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T244141[ebp]
	mov	DWORD PTR tv467[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR $T243970[ebp]
	push	edx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	eax, DWORD PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR $T243971[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	eax, DWORD PTR _eClass$225095[ebp]
	push	eax
	mov	ecx, DWORD PTR _eGreatArtifact$225094[ebp]
	push	ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pCulture$[ebp]
	call	?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z ; CvGameCulture::CreateGreatWork
	mov	DWORD PTR tv468[ebp], eax
	mov	edx, DWORD PTR tv468[ebp]
	mov	DWORD PTR _iGWindex$225121[ebp], edx

; 2235 : 				pHousingCity->GetCityBuildings()->SetBuildingGreatWork(eBuildingToHouse, iSlot, iGWindex);

	mov	eax, DWORD PTR _iGWindex$225121[ebp]
	push	eax
	mov	ecx, DWORD PTR _iSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eBuildingToHouse$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pHousingCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 2236 : 				pPlot->setImprovementType(NO_IMPROVEMENT);

	push	-1
	push	-1
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 2237 : 				pUnit->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 2238 : 			}
; 2239 : 			break;

	jmp	$LN16@DoArchaeol
$LN4@DoArchaeol:

; 2240 : 
; 2241 : 		case ARCHAEOLOGY_ARTIFACT_WRITING:
; 2242 : 			{
; 2243 : 				if (pPlot->getOwner() != pUnit->getOwner() && pPlot->getOwner() != NO_PLAYER)

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T244145[ebp], ecx
	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T244154[ebp], eax
	mov	ecx, DWORD PTR $T244145[ebp]
	cmp	ecx, DWORD PTR $T244154[ebp]
	je	SHORT $LN122@DoArchaeol
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, -1
	je	SHORT $LN122@DoArchaeol

; 2244 : 				{
; 2245 : 					GET_PLAYER(pPlot->getOwner()).GetDiplomacyAI()->ChangeNegativeArchaeologyPoints(pUnit->getOwner(), 10);

	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T244166[ebp], edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T244170[ebp], ecx
	mov	edx, DWORD PTR $T244170[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244174[ebp], edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR $T244166[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244174[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNegativeArchaeologyPoints@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNegativeArchaeologyPoints

; 2246 : 				}
; 2247 : 				pHousingCity = m_pPlayer->GetCulture()->GetClosestAvailableGreatWorkSlot(pUnit->getX(),pUnit->getY(), eWritingSlot, &eBuildingToHouse, &iSlot);

$LN122@DoArchaeol:
	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T244183[ebp], edx
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T244192[ebp], ecx
	lea	edx, DWORD PTR _iSlot$[ebp]
	push	edx
	lea	eax, DWORD PTR _eBuildingToHouse$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eWritingSlot$225093[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244183[ebp]
	push	edx
	mov	eax, DWORD PTR $T244192[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetClosestAvailableGreatWorkSlot@CvPlayerCulture@@QBEPAVCvCity@@HHW4GreatWorkSlotType@@PAW4BuildingClassTypes@@PAH@Z ; CvPlayerCulture::GetClosestAvailableGreatWorkSlot
	mov	DWORD PTR _pHousingCity$[ebp], eax

; 2248 : 				int iGWindex = 	pCulture->CreateGreatWork(eGreatArtifact, (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_LITERATURE"), pPlot->GetArchaeologicalRecord().m_ePlayer1, pPlot->GetArchaeologicalRecord().m_eEra, "");

	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T243972[ebp], esp
	mov	DWORD PTR $T244201[ebp], edx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN130@DoArchaeol
	mov	DWORD PTR tv581[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN131@DoArchaeol
$LN130@DoArchaeol:
	mov	DWORD PTR tv581[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN131@DoArchaeol:
	mov	ecx, DWORD PTR tv581[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T244201[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T244201[ebp]
	mov	DWORD PTR tv470[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	eax, DWORD PTR $T243973[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T243974[ebp]
	push	edx
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord
	mov	eax, DWORD PTR [eax+8]
	push	eax
	push	0
	push	OFFSET ??_C@_0BG@BOBAMEPE@GREAT_WORK_LITERATURE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _eGreatArtifact$225094[ebp]
	push	ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pCulture$[ebp]
	call	?CreateGreatWork@CvGameCulture@@QAEHW4GreatWorkType@@W4GreatWorkClass@@W4PlayerTypes@@W4EraTypes@@VCvString@@@Z ; CvGameCulture::CreateGreatWork
	mov	DWORD PTR tv471[ebp], eax
	mov	edx, DWORD PTR tv471[ebp]
	mov	DWORD PTR _iGWindex$225127[ebp], edx

; 2249 : 				pHousingCity->GetCityBuildings()->SetBuildingGreatWork(eBuildingToHouse, iSlot, iGWindex);

	mov	eax, DWORD PTR _iGWindex$225127[ebp]
	push	eax
	mov	ecx, DWORD PTR _iSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eBuildingToHouse$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pHousingCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 2250 : 				pPlot->setImprovementType(NO_IMPROVEMENT);

	push	-1
	push	-1
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 2251 : 				pUnit->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 2252 : 			}
; 2253 : 			break;

	jmp	$LN16@DoArchaeol
$LN2@DoArchaeol:

; 2254 : 
; 2255 : 		case ARCHAEOLOGY_CULTURE_BOOST:
; 2256 : 			{
; 2257 : 				if (pPlot->getOwner() != pUnit->getOwner() && pPlot->getOwner() != NO_PLAYER)

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T244205[ebp], ecx
	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T244214[ebp], eax
	mov	ecx, DWORD PTR $T244205[ebp]
	cmp	ecx, DWORD PTR $T244214[ebp]
	je	SHORT $LN1@DoArchaeol
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, -1
	je	SHORT $LN1@DoArchaeol

; 2258 : 				{
; 2259 : 					GET_PLAYER(pPlot->getOwner()).GetDiplomacyAI()->ChangeNegativeArchaeologyPoints(pUnit->getOwner(), 10);

	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T244226[ebp], edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T244230[ebp], ecx
	mov	edx, DWORD PTR $T244230[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244234[ebp], edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR $T244226[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244234[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?ChangeNegativeArchaeologyPoints@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNegativeArchaeologyPoints
$LN1@DoArchaeol:

; 2260 : 				}
; 2261 : 
; 2262 : 				// Culture boost based on 8 previous turns; same as GREAT_WRITER; move to XML?
; 2263 : 				int iValue = m_pPlayer->GetCultureYieldFromPreviousTurns(GC.getGame().getGameTurn(), 8 /*iPreviousTurnsToCount */);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244238[ebp], ecx
	push	8
	mov	ecx, DWORD PTR $T244238[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetCultureYieldFromPreviousTurns@CvPlayer@@QAEHHH@Z ; CvPlayer::GetCultureYieldFromPreviousTurns
	mov	DWORD PTR _iValue$225134[ebp], eax

; 2264 : 
; 2265 : 				// Modify based on game speed
; 2266 : 				iValue *= GC.getGame().getGameSpeedInfo().getCulturePercent();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244242[ebp], eax
	mov	ecx, DWORD PTR $T244242[ebp]
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getCulturePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getCulturePercent
	imul	eax, DWORD PTR _iValue$225134[ebp]
	mov	DWORD PTR _iValue$225134[ebp], eax

; 2267 : 				iValue /= 100;

	mov	eax, DWORD PTR _iValue$225134[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iValue$225134[ebp], eax

; 2268 : 
; 2269 : 				m_pPlayer->changeJONSCulture(iValue);

	mov	edx, DWORD PTR _iValue$225134[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?changeJONSCulture@CvPlayer@@QAEXH@Z	; CvPlayer::changeJONSCulture

; 2270 : 
; 2271 : 				pPlot->setImprovementType(NO_IMPROVEMENT);

	push	-1
	push	-1
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 2272 : 				pUnit->kill(true);

	push	-1
	push	1
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill
$LN16@DoArchaeol:

; 2273 : 			}
; 2274 : 			break;
; 2275 : 		}
; 2276 : 
; 2277 : 		m_pPlayer->SetNumArchaeologyChoices(m_pPlayer->GetNumArchaeologyChoices() - 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetNumArchaeologyChoices@CvPlayer@@QBEHXZ ; CvPlayer::GetNumArchaeologyChoices
	sub	eax, 1
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?SetNumArchaeologyChoices@CvPlayer@@QAEXH@Z ; CvPlayer::SetNumArchaeologyChoices

; 2278 : 		m_pPlayer->GetCulture()->RemoveDigCompletePlot(pPlot);

	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?RemoveDigCompletePlot@CvPlayerCulture@@QAEXPAVCvPlot@@@Z ; CvPlayerCulture::RemoveDigCompletePlot
$LN19@DoArchaeol:

; 2279 : 	}
; 2280 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN154@DoArchaeol:
	DD	$LN14@DoArchaeol
	DD	$LN8@DoArchaeol
	DD	$LN6@DoArchaeol
	DD	$LN2@DoArchaeol
	DD	$LN4@DoArchaeol
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$0:
	mov	ecx, DWORD PTR $T243966[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$1:
	mov	ecx, DWORD PTR $T243969[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z$2:
	mov	ecx, DWORD PTR $T243972[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-392]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoArchaeologyChoice@CvPlayerCulture@@QAEXW4ArchaeologyChoiceType@@@Z ENDP ; CvPlayerCulture::DoArchaeologyChoice
PUBLIC	?LogCultureData@CvPlayerCulture@@AAEXXZ		; CvPlayerCulture::LogCultureData
PUBLIC	??_C@_0BJ@EHIIJGMN@BUILDING_BROADCAST_TOWER?$AA@ ; `string'
PUBLIC	??_C@_0DJ@CFALKGH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DD@MDBAAENC@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DA@IKBHEIHO@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0EB@KBLMAIGN@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DO@GFCAHEJO@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DJ@CCIACMPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DD@MIKAIHBE@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DA@OEBHOIJF@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0EB@NBNLMMLB@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DO@DEAAPMGE@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DO@IBBHOAD@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DL@IFMKHDHH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
PUBLIC	??_C@_0DK@IFLLEEPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0DM@BIKJOJCL@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0EK@EKHKDIDH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	?GetLocalizedText@@YA?AVCvString@@PBD@Z		; GetLocalizedText
PUBLIC	??_C@_0DJ@FPHAMGJI@TXT_KEY_NOTIFICATION_CULTURE_VIC@ ; `string'
PUBLIC	??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@	; `string'
PUBLIC	?DoPublicOpinion@CvPlayerCulture@@QAEXXZ	; CvPlayerCulture::DoPublicOpinion
PUBLIC	?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluencePerTurn
PUBLIC	?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumCivsInfluentialOn
PUBLIC	__$ArrayPad$
EXTRN	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ:PROC ; CvPlayerPolicies::GetLateGamePolicyTree
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
EXTRN	?countMajorCivsEverAlive@CvGame@@QBEHXZ:PROC	; CvGame::countMajorCivsEverAlive
EXTRN	__imp_??0String@Localization@@QAE@XZ:PROC
EXTRN	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z:PROC ; CvNotifications::Add
EXTRN	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescriptionKey
EXTRN	__imp_??0String@Localization@@QAE@ABV01@@Z:PROC
EXTRN	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z:PROC ; CvGame::isVictoryValid
EXTRN	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ:PROC ; CvPlayer::GetNotifications
EXTRN	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isHasMet
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
;	COMDAT ??_C@_0BJ@EHIIJGMN@BUILDING_BROADCAST_TOWER?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BJ@EHIIJGMN@BUILDING_BROADCAST_TOWER?$AA@ DB 'BUILDING_BROADCAST_T'
	DB	'OWER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CFALKGH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DJ@CFALKGH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_CULTURE_VICTORY_WITHIN_ONE_UNMET_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MDBAAENC@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DD@MDBAAENC@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_ONE_TT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IKBHEIHO@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DA@IKBHEIHO@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_ONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KBLMAIGN@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0EB@KBLMAIGN@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@GFCAHEJO@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DO@GFCAHEJO@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CCIACMPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DJ@CCIACMPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_TWO_UNMET_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MIKAIHBE@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DD@MIKAIHBE@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_TWO_TT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OEBHOIJF@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DA@OEBHOIJF@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_TWO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NBNLMMLB@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0EB@NBNLMMLB@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@DEAAPMGE@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DO@DEAAPMGE@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IBBHOAD@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DO@IBBHOAD@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IFMKHDHH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DL@IFMKHDHH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IFLLEEPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DK@IFLLEEPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_UNMET_INFLUENTIAL_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BIKJOJCL@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DM@BIKJOJCL@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@EKHKDIDH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0EK@EKHKDIDH@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL_ACTIVE_PLAYER_TT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@FPHAMGJI@TXT_KEY_NOTIFICATION_CULTURE_VIC@
CONST	SEGMENT
??_C@_0DJ@FPHAMGJI@TXT_KEY_NOTIFICATION_CULTURE_VIC@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@
CONST	SEGMENT
??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@ DB 'VICTORY_CULTURAL', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DoTurn@CvPlayerCulture@@QAEXXZ DD 019930522H
	DD	01aH
	DD	FLAT:__unwindtable$?DoTurn@CvPlayerCulture@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DoTurn@CvPlayerCulture@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$6
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$8
	DD	07H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$9
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$15
	DD	0eH
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$16
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$18
	DD	012H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$19
	DD	013H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$20
	DD	014H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$21
	DD	015H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$22
	DD	015H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$23
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$24
	DD	01H
	DD	FLAT:__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$41
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoTurn@CvPlayerCulture@@QAEXXZ
_TEXT	SEGMENT
tv810 = -1968						; size = 4
tv780 = -1964						; size = 4
tv1712 = -1960						; size = 4
tv1707 = -1954						; size = 1
tv1700 = -1953						; size = 1
tv1696 = -1952						; size = 4
tv1697 = -1948						; size = 4
tv733 = -1944						; size = 4
tv234 = -1940						; size = 4
tv279 = -1936						; size = 4
tv873 = -1932						; size = 4
tv176 = -1925						; size = 1
_this$ = -1924						; size = 4
$T244918 = -1892					; size = 4
$T244911 = -1888					; size = 4
$T244907 = -1884					; size = 4
$T244752 = -1812					; size = 4
$T244748 = -1808					; size = 4
$T244689 = -1712					; size = 4
$T244673 = -1708					; size = 4
$T244669 = -1704					; size = 4
$T244665 = -1700					; size = 4
$T244653 = -1696					; size = 4
$T244647 = -1692					; size = 4
$T244646 = -1688					; size = 4
$T244634 = -1684					; size = 4
$T244622 = -1680					; size = 4
$T244618 = -1676					; size = 4
$T244614 = -1672					; size = 4
$T244605 = -1668					; size = 4
$T244596 = -1664					; size = 4
$T244584 = -1660					; size = 4
$T244568 = -1656					; size = 4
$T244564 = -1652					; size = 4
$T244560 = -1648					; size = 4
$T244548 = -1644					; size = 4
$T244542 = -1640					; size = 4
$T244541 = -1636					; size = 4
$T244529 = -1632					; size = 4
$T244517 = -1628					; size = 4
$T244513 = -1624					; size = 4
$T244509 = -1620					; size = 4
$T244500 = -1616					; size = 4
$T244491 = -1612					; size = 4
$T244479 = -1608					; size = 4
$T244472 = -1604					; size = 4
$T244468 = -1600					; size = 4
$T244455 = -1596					; size = 4
$T244447 = -1592					; size = 4
$T244443 = -1588					; size = 4
$T244439 = -1584					; size = 4
$T244427 = -1580					; size = 4
$T244423 = -1576					; size = 4
$T244419 = -1572					; size = 4
$T244407 = -1568					; size = 4
$T244401 = -1564					; size = 4
$T244400 = -1560					; size = 4
$T244388 = -1556					; size = 4
$T244376 = -1552					; size = 4
$T244360 = -1548					; size = 4
$T244356 = -1541					; size = 1
$T244355 = -1540					; size = 4
$T244351 = -1536					; size = 4
$T244347 = -1532					; size = 4
$T244335 = -1528					; size = 4
$T244334 = -1524					; size = 4
$T244325 = -1517					; size = 1
$T244316 = -1516					; size = 4
$T244304 = -1512					; size = 4
$T244292 = -1508					; size = 4
$T244263 = -1504					; size = 4
$T244262 = -1500					; size = 4
$T244261 = -1496					; size = 4
$T244260 = -1492					; size = 4
$T244259 = -1488					; size = 4
$T244258 = -1484					; size = 28
$T244257 = -1456					; size = 28
$T244256 = -1428					; size = 4
$T244255 = -1424					; size = 28
_iGreatWorkIndex$225329 = -1396				; size = 4
_iI$225325 = -1392					; size = 4
_iNumSlots$225323 = -1388				; size = 4
_bAnySlotEmpty$225324 = -1381				; size = 1
_pkBuilding$225319 = -1380				; size = 4
_eBuilding$225315 = -1376				; size = 4
_playerCivilizationInfo$225314 = -1372			; size = 4
_iBuildingClassLoop$225310 = -1368			; size = 4
_iNumWorksInBroadcastTowers$225306 = -1364		; size = 4
_ui$225295 = -1360					; size = 4
_eCreatingPlayer$225293 = -1356				; size = 4
_bDupe$225292 = -1349					; size = 1
_iGreatWorkIndex$225289 = -1348				; size = 4
_iI$225285 = -1344					; size = 4
_iNumSlots$225284 = -1340				; size = 4
_pkBuilding$225281 = -1336				; size = 4
_eBuilding$225277 = -1332				; size = 4
_playerCivilizationInfo$225276 = -1328			; size = 4
_iBuildingClassLoop$225272 = -1324			; size = 4
_aiCityStateArtifact$225266 = -1320			; size = 16
_eCurrentBranchType$225303 = -1304			; size = 4
_pLoopCity$225268 = -1300				; size = 4
_iLoop$225267 = -1296					; size = 4
_strTemp$225258 = -1292					; size = 80
_kCurTeam$225256 = -1208				; size = 4
_strTemp$225253 = -1204					; size = 80
_eCurPlayer$225249 = -1120				; size = 4
_kCurPlayer$225251 = -1116				; size = 4
_iNotifyLoop$225245 = -1112				; size = 4
_targCloseOneInfo$225233 = -1108			; size = 80
_unmetCloseOneInfo$225242 = -1028			; size = 28
_someoneCloseOneSummary$225236 = -1000			; size = 28
_someoneCloseOneInfo$225239 = -972			; size = 80
_targCloseOneSummary$225230 = -888			; size = 28
_strTemp$225225 = -860					; size = 80
_kCurTeam$225223 = -776					; size = 4
_strTemp$225220 = -772					; size = 80
_eCurPlayer$225216 = -688				; size = 4
_kCurPlayer$225218 = -684				; size = 4
_iNotifyLoop$225212 = -680				; size = 4
_someoneCloseTwoInfo$225206 = -676			; size = 80
_unmetCloseTwoInfo$225209 = -596			; size = 28
_targCloseTwoSummary$225197 = -568			; size = 28
_targCloseTwoInfo$225200 = -540				; size = 80
_someoneCloseTwoSummary$225203 = -456			; size = 28
_strTemp$225190 = -428					; size = 80
_strTemp$225181 = -348					; size = 80
_kCurTeam$225179 = -264					; size = 4
_eNotifyPlayer$225174 = -260				; size = 4
_kNotifyPlayer$225176 = -256				; size = 4
_iNotifyPlayerID$225170 = -252				; size = 4
_targFirstInfluentialInfo$225161 = -248			; size = 28
_someoneFirstInfluentialInfo$225164 = -220		; size = 80
_unmetFirstInfluentialInfo$225167 = -136		; size = 28
_kOtherPlayer$225144 = -108				; size = 4
_kOtherTeam$225146 = -104				; size = 4
_iLoopPlayer$225140 = -100				; size = 4
_iLastTurnInfluentialCivs$ = -96			; size = 4
_pTargetNotifications$ = -92				; size = 4
_eVictory$ = -88					; size = 4
_strSummary$ = -84					; size = 28
_strInfo$ = -56						; size = 28
__$ArrayPad$ = -28					; size = 4
_bCultureVictoryValid$ = -21				; size = 1
_iInfluentialCivsForWin$ = -20				; size = 4
_iThisTurnInfluentialCivs$ = -16			; size = 4
__$EHRec$ = -12						; size = 12
?DoTurn@CvPlayerCulture@@QAEXXZ PROC			; CvPlayerCulture::DoTurn, COMDAT
; _this$ = ecx

; 2286 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoTurn@CvPlayerCulture@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1956				; 000007a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2287 : 	int iInfluentialCivsForWin = GC.getGame().GetGameCulture()->GetNumCivsInfluentialForWin();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244292[ebp], eax
	mov	ecx, DWORD PTR $T244292[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	ecx, eax
	call	?GetNumCivsInfluentialForWin@CvGameCulture@@QBEHXZ ; CvGameCulture::GetNumCivsInfluentialForWin
	mov	DWORD PTR _iInfluentialCivsForWin$[ebp], eax

; 2288 : 	int iLastTurnInfluentialCivs = GetNumCivsInfluentialOn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumCivsInfluentialOn
	mov	DWORD PTR _iLastTurnInfluentialCivs$[ebp], eax

; 2289 : 
; 2290 : 	for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225140[ebp], 0
	jmp	SHORT $LN69@DoTurn@2
$LN68@DoTurn@2:
	mov	ecx, DWORD PTR _iLoopPlayer$225140[ebp]
	add	ecx, 1
	mov	DWORD PTR _iLoopPlayer$225140[ebp], ecx
$LN69@DoTurn@2:
	cmp	DWORD PTR _iLoopPlayer$225140[ebp], 22	; 00000016H
	jge	$LN67@DoTurn@2

; 2291 : 	{
; 2292 : 		// Move over last turn's numbers
; 2293 : 		m_aiLastTurnCulturalInfluence[iLoopPlayer] = m_aiCulturalInfluence[iLoopPlayer];

	mov	edx, DWORD PTR _iLoopPlayer$225140[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iLoopPlayer$225140[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+20]
	mov	DWORD PTR [eax+edx*4+108], ecx

; 2294 : 
; 2295 : 		CvPlayer &kOtherPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	edx, DWORD PTR _iLoopPlayer$225140[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$225144[ebp], edx

; 2296 : 		CvTeam &kOtherTeam = GET_TEAM(kOtherPlayer.getTeam());

	mov	eax, DWORD PTR _kOtherPlayer$225144[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244304[ebp], eax
	mov	edx, DWORD PTR $T244304[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kOtherTeam$225146[ebp], edx

; 2297 : 		if (iLoopPlayer != m_pPlayer->GetID() && kOtherPlayer.isAlive() && !kOtherPlayer.isMinorCiv() && kOtherTeam.isHasMet(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244316[ebp], edx
	mov	eax, DWORD PTR _iLoopPlayer$225140[ebp]
	cmp	eax, DWORD PTR $T244316[ebp]
	je	$LN66@DoTurn@2
	mov	ecx, DWORD PTR _kOtherPlayer$225144[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T244325[ebp], dl
	movzx	eax, BYTE PTR $T244325[ebp]
	test	eax, eax
	je	SHORT $LN66@DoTurn@2
	mov	ecx, DWORD PTR _kOtherPlayer$225144[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN66@DoTurn@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	DWORD PTR $T244334[ebp], eax
	mov	ecx, DWORD PTR $T244334[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244335[ebp], eax
	mov	eax, DWORD PTR $T244335[ebp]
	push	eax
	mov	ecx, DWORD PTR _kOtherTeam$225146[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN66@DoTurn@2

; 2298 : 		{
; 2299 : 			m_aiCulturalInfluence[iLoopPlayer] += GetInfluencePerTurn((PlayerTypes)iLoopPlayer);

	mov	edx, DWORD PTR _iLoopPlayer$225140[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluencePerTurn
	mov	ecx, DWORD PTR _iLoopPlayer$225140[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+20]
	mov	ecx, DWORD PTR _iLoopPlayer$225140[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+20], eax
$LN66@DoTurn@2:

; 2300 : 		}
; 2301 : 	}

	jmp	$LN68@DoTurn@2
$LN67@DoTurn@2:

; 2302 : 	
; 2303 : 	DoPublicOpinion();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoPublicOpinion@CvPlayerCulture@@QAEXXZ ; CvPlayerCulture::DoPublicOpinion

; 2304 : 
; 2305 : 	CvString strSummary;

	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2306 : 	CvString strInfo;

	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2307 : 	CvNotifications* pTargetNotifications = m_pPlayer->GetNotifications();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pTargetNotifications$[ebp], eax

; 2308 : 	int iThisTurnInfluentialCivs = GetNumCivsInfluentialOn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumCivsInfluentialOn
	mov	DWORD PTR _iThisTurnInfluentialCivs$[ebp], eax

; 2309 : 
; 2310 : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_CULTURAL", true);

	push	1
	push	OFFSET ??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 2311 : 	const bool bCultureVictoryValid = (eVictory == NO_VICTORY || GC.getGame().isVictoryValid(eVictory));

	cmp	DWORD PTR _eVictory$[ebp], -1
	je	SHORT $LN72@DoTurn@2
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244347[ebp], ecx
	mov	edx, DWORD PTR _eVictory$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244347[ebp]
	call	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z ; CvGame::isVictoryValid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN72@DoTurn@2
	mov	BYTE PTR tv176[ebp], 0
	jmp	SHORT $LN73@DoTurn@2
$LN72@DoTurn@2:
	mov	BYTE PTR tv176[ebp], 1
$LN73@DoTurn@2:
	mov	cl, BYTE PTR tv176[ebp]
	mov	BYTE PTR _bCultureVictoryValid$[ebp], cl

; 2312 : 
; 2313 : 	if (iThisTurnInfluentialCivs > 0 && !GC.getGame().GetGameCulture()->GetReportedSomeoneInfluential())

	cmp	DWORD PTR _iThisTurnInfluentialCivs$[ebp], 0
	jle	$LN65@DoTurn@2
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244351[ebp], edx
	mov	ecx, DWORD PTR $T244351[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR $T244355[ebp], eax
	mov	eax, DWORD PTR $T244355[ebp]
	mov	cl, BYTE PTR [eax+1072]
	mov	BYTE PTR $T244356[ebp], cl
	movzx	edx, BYTE PTR $T244356[ebp]
	test	edx, edx
	jne	$LN65@DoTurn@2

; 2314 : 	{
; 2315 : 		if(bCultureVictoryValid)

	movzx	eax, BYTE PTR _bCultureVictoryValid$[ebp]
	test	eax, eax
	je	$LN64@DoTurn@2

; 2316 : 		{//This civilization is the first civ to be influential over another civs.  Notify the masses!
; 2317 : 			strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL");

	push	OFFSET ??_C@_0DJ@FPHAMGJI@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR $T244255[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv873[ebp], eax
	mov	edx, DWORD PTR tv873[ebp]
	mov	DWORD PTR $T244360[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T244360[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T244255[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2318 : 			CvString							targFirstInfluentialInfo = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL_ACTIVE_PLAYER_TT");

	push	OFFSET ??_C@_0EK@EKHKDIDH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR _targFirstInfluentialInfo$225161[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 2319 : 			Localization::String	someoneFirstInfluentialInfo = Localization::Lookup("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL_TT");

	push	OFFSET ??_C@_0DM@BIKJOJCL@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	edx, DWORD PTR _someoneFirstInfluentialInfo$225164[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 2320 : 			CvString							unmetFirstInfluentialInfo = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_UNMET_INFLUENTIAL_TT");

	push	OFFSET ??_C@_0DK@IFLLEEPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	eax, DWORD PTR _unmetFirstInfluentialInfo$225167[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 2321 : 
; 2322 : 			for(int iNotifyPlayerID = 0; iNotifyPlayerID < MAX_MAJOR_CIVS; ++iNotifyPlayerID){

	mov	DWORD PTR _iNotifyPlayerID$225170[ebp], 0
	jmp	SHORT $LN63@DoTurn@2
$LN62@DoTurn@2:
	mov	ecx, DWORD PTR _iNotifyPlayerID$225170[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNotifyPlayerID$225170[ebp], ecx
$LN63@DoTurn@2:
	cmp	DWORD PTR _iNotifyPlayerID$225170[ebp], 22 ; 00000016H
	jge	$LN61@DoTurn@2

; 2323 : 				PlayerTypes eNotifyPlayer = (PlayerTypes) iNotifyPlayerID;

	mov	edx, DWORD PTR _iNotifyPlayerID$225170[ebp]
	mov	DWORD PTR _eNotifyPlayer$225174[ebp], edx

; 2324 : 				CvPlayerAI& kNotifyPlayer = GET_PLAYER(eNotifyPlayer);

	mov	eax, DWORD PTR _eNotifyPlayer$225174[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kNotifyPlayer$225176[ebp], eax

; 2325 : 
; 2326 : 				if (m_pPlayer->GetID() == eNotifyPlayer){	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244376[ebp], eax
	mov	ecx, DWORD PTR $T244376[ebp]
	cmp	ecx, DWORD PTR _eNotifyPlayer$225174[ebp]
	jne	SHORT $LN148@DoTurn@2

; 2327 : 					strInfo = targFirstInfluentialInfo;

	lea	edx, DWORD PTR _targFirstInfluentialInfo$225161[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2328 : 				}
; 2329 : 				else

	jmp	$LN164@DoTurn@2

; 2330 : 				{
; 2331 : 					CvTeam& kCurTeam = GET_TEAM(kNotifyPlayer.getTeam());

$LN148@DoTurn@2:
	mov	eax, DWORD PTR _kNotifyPlayer$225176[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244388[ebp], eax
	mov	edx, DWORD PTR $T244388[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kCurTeam$225179[ebp], edx

; 2332 : 					if(kCurTeam.isHasMet(m_pPlayer->getTeam())){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T244400[ebp], ecx
	mov	edx, DWORD PTR $T244400[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244401[ebp], eax
	mov	ecx, DWORD PTR $T244401[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kCurTeam$225179[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	$LN58@DoTurn@2

; 2333 : 						Localization::String strTemp = someoneFirstInfluentialInfo;

	lea	eax, DWORD PTR _someoneFirstInfluentialInfo$225164[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTemp$225181[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 2334 : 						strTemp << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T244256[ebp], eax
	lea	edx, DWORD PTR $T244256[ebp]
	push	edx
	lea	eax, DWORD PTR _strTemp$225181[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2335 : 						strInfo = strTemp.toUTF8();

	lea	ecx, DWORD PTR _strTemp$225181[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T244407[ebp], eax
	cmp	DWORD PTR $T244407[ebp], 0
	je	SHORT $LN157@DoTurn@2
	mov	ecx, DWORD PTR $T244407[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN158@DoTurn@2
$LN157@DoTurn@2:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN158@DoTurn@2:

; 2336 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strTemp$225181[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2337 : 					else

	jmp	SHORT $LN164@DoTurn@2
$LN58@DoTurn@2:

; 2338 : 					{
; 2339 : 						strInfo = unmetFirstInfluentialInfo;

	lea	edx, DWORD PTR _unmetFirstInfluentialInfo$225167[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2340 : 					}					
; 2341 : 				}
; 2342 : 				kNotifyPlayer.GetNotifications()->Add(NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

$LN164@DoTurn@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244419[ebp], edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244423[ebp], eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244427[ebp], eax
	push	-1
	mov	eax, DWORD PTR $T244419[ebp]
	push	eax
	push	-1
	push	-1
	mov	ecx, DWORD PTR $T244423[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244427[ebp]
	push	edx
	push	359132113				; 1567ebd1H
	mov	ecx, DWORD PTR _kNotifyPlayer$225176[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2343 : 			}

	jmp	$LN62@DoTurn@2
$LN61@DoTurn@2:

; 2344 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _unmetFirstInfluentialInfo$225167[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _someoneFirstInfluentialInfo$225164[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _targFirstInfluentialInfo$225161[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN64@DoTurn@2:

; 2345 : 
; 2346 : 		GC.getGame().GetGameCulture()->SetReportedSomeoneInfluential(true);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244439[ebp], eax
	mov	ecx, DWORD PTR $T244439[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR $T244443[ebp], eax
	mov	ecx, DWORD PTR $T244443[ebp]
	mov	BYTE PTR [ecx+1072], 1
$LN65@DoTurn@2:

; 2347 : 	}
; 2348 : 
; 2349 : 	if (iThisTurnInfluentialCivs < iLastTurnInfluentialCivs && bCultureVictoryValid)

	mov	edx, DWORD PTR _iThisTurnInfluentialCivs$[ebp]
	cmp	edx, DWORD PTR _iLastTurnInfluentialCivs$[ebp]
	jge	$LN56@DoTurn@2
	movzx	eax, BYTE PTR _bCultureVictoryValid$[ebp]
	test	eax, eax
	je	$LN56@DoTurn@2

; 2350 : 	{
; 2351 : 		Localization::String strTemp;

	lea	ecx, DWORD PTR _strTemp$225190[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 2352 : 		strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL");

	push	OFFSET ??_C@_0DL@IFMKHDHH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR $T244257[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv279[ebp], eax
	mov	edx, DWORD PTR tv279[ebp]
	mov	DWORD PTR $T244447[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR $T244447[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T244257[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2353 : 		strInfo = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL_TT");

	push	OFFSET ??_C@_0DO@IBBHOAD@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR $T244258[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv234[ebp], eax
	mov	edx, DWORD PTR tv234[ebp]
	mov	DWORD PTR $T244455[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR $T244455[ebp]
	push	eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T244258[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2354 : 		pTargetNotifications->Add(NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244468[ebp], eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244472[ebp], eax
	push	-1
	mov	ecx, DWORD PTR $T244468[ebp]
	push	ecx
	push	-1
	push	-1
	mov	edx, DWORD PTR $T244472[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	-30204373				; fe331e2bH
	mov	ecx, DWORD PTR _pTargetNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2355 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$225190[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN56@DoTurn@2:

; 2356 : 
; 2357 : 	if (!m_bReportedTwoCivsAway && iThisTurnInfluentialCivs > 0 && iThisTurnInfluentialCivs == iInfluentialCivsForWin - 2 && GC.getGame().countMajorCivsEverAlive() >= 4)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+196]
	test	ecx, ecx
	jne	$LN55@DoTurn@2
	cmp	DWORD PTR _iThisTurnInfluentialCivs$[ebp], 0
	jle	$LN55@DoTurn@2
	mov	edx, DWORD PTR _iInfluentialCivsForWin$[ebp]
	sub	edx, 2
	cmp	DWORD PTR _iThisTurnInfluentialCivs$[ebp], edx
	jne	$LN55@DoTurn@2
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244479[ebp], eax
	mov	ecx, DWORD PTR $T244479[ebp]
	call	?countMajorCivsEverAlive@CvGame@@QBEHXZ	; CvGame::countMajorCivsEverAlive
	cmp	eax, 4
	jl	$LN55@DoTurn@2

; 2358 : 	{
; 2359 : 		if(bCultureVictoryValid)

	movzx	ecx, BYTE PTR _bCultureVictoryValid$[ebp]
	test	ecx, ecx
	je	$LN54@DoTurn@2

; 2360 : 		{//This civilization is the first civ to be two civilizations away from getting a cultural victory.  Notify the masses!
; 2361 : 			CvString							targCloseTwoSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER");

	push	OFFSET ??_C@_0DO@DEAAPMGE@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	edx, DWORD PTR _targCloseTwoSummary$225197[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 2362 : 			Localization::String	targCloseTwoInfo = Localization::Lookup("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER_TT");

	push	OFFSET ??_C@_0EB@NBNLMMLB@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	eax, DWORD PTR _targCloseTwoInfo$225200[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 2363 : 			CvString							someoneCloseTwoSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO");

	push	OFFSET ??_C@_0DA@OEBHOIJF@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR _someoneCloseTwoSummary$225203[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 2364 : 			Localization::String	someoneCloseTwoInfo = Localization::Lookup("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_TT");

	push	OFFSET ??_C@_0DD@MIKAIHBE@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	edx, DWORD PTR _someoneCloseTwoInfo$225206[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 2365 : 			CvString							unmetCloseTwoInfo = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_UNMET_TT");

	push	OFFSET ??_C@_0DJ@CCIACMPH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	eax, DWORD PTR _unmetCloseTwoInfo$225209[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH

; 2366 : 			for(int iNotifyLoop = 0; iNotifyLoop < MAX_MAJOR_CIVS; ++iNotifyLoop){

	mov	DWORD PTR _iNotifyLoop$225212[ebp], 0
	jmp	SHORT $LN53@DoTurn@2
$LN52@DoTurn@2:
	mov	ecx, DWORD PTR _iNotifyLoop$225212[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNotifyLoop$225212[ebp], ecx
$LN53@DoTurn@2:
	cmp	DWORD PTR _iNotifyLoop$225212[ebp], 22	; 00000016H
	jge	$LN51@DoTurn@2

; 2367 : 				PlayerTypes eCurPlayer = (PlayerTypes) iNotifyLoop;

	mov	edx, DWORD PTR _iNotifyLoop$225212[ebp]
	mov	DWORD PTR _eCurPlayer$225216[ebp], edx

; 2368 : 				CvPlayerAI& kCurPlayer = GET_PLAYER(eCurPlayer);

	mov	eax, DWORD PTR _eCurPlayer$225216[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCurPlayer$225218[ebp], eax

; 2369 : 
; 2370 : 				if (eCurPlayer == m_pPlayer->GetID()){	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244491[ebp], eax
	mov	ecx, DWORD PTR _eCurPlayer$225216[ebp]
	cmp	ecx, DWORD PTR $T244491[ebp]
	jne	$LN50@DoTurn@2

; 2371 : 					strSummary = targCloseTwoSummary;

	lea	edx, DWORD PTR _targCloseTwoSummary$225197[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2372 : 					Localization::String strTemp = targCloseTwoInfo;

	lea	eax, DWORD PTR _targCloseTwoInfo$225200[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTemp$225220[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 2373 : 					strTemp << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T244259[ebp], eax
	lea	edx, DWORD PTR $T244259[ebp]
	push	edx
	lea	eax, DWORD PTR _strTemp$225220[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2374 : 					strInfo = strTemp.toUTF8();

	lea	ecx, DWORD PTR _strTemp$225220[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T244500[ebp], eax
	cmp	DWORD PTR $T244500[ebp], 0
	je	SHORT $LN209@DoTurn@2
	mov	ecx, DWORD PTR $T244500[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN214@DoTurn@2
$LN209@DoTurn@2:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ

; 2375 : 					kCurPlayer.GetNotifications()->Add(NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

$LN214@DoTurn@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T244509[ebp], ecx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244513[ebp], eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244517[ebp], eax
	push	-1
	mov	edx, DWORD PTR $T244509[ebp]
	push	edx
	push	-1
	push	-1
	mov	eax, DWORD PTR $T244513[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244517[ebp]
	push	ecx
	push	-1730271966				; 98de2522H
	mov	ecx, DWORD PTR _kCurPlayer$225218[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2376 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _strTemp$225220[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2377 : 				else{

	jmp	$LN49@DoTurn@2
$LN50@DoTurn@2:

; 2378 : 					strSummary = someoneCloseTwoSummary;

	lea	edx, DWORD PTR _someoneCloseTwoSummary$225203[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2379 : 					CvTeam& kCurTeam = GET_TEAM(kCurPlayer.getTeam());

	mov	eax, DWORD PTR _kCurPlayer$225218[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244529[ebp], eax
	mov	edx, DWORD PTR $T244529[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kCurTeam$225223[ebp], edx

; 2380 : 					if(kCurTeam.isHasMet(m_pPlayer->getTeam())){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T244541[ebp], ecx
	mov	edx, DWORD PTR $T244541[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244542[ebp], eax
	mov	ecx, DWORD PTR $T244542[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kCurTeam$225223[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	$LN48@DoTurn@2

; 2381 : 						Localization::String strTemp = someoneCloseTwoInfo;

	lea	eax, DWORD PTR _someoneCloseTwoInfo$225206[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTemp$225225[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H

; 2382 : 						strTemp << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T244260[ebp], eax
	lea	edx, DWORD PTR $T244260[ebp]
	push	edx
	lea	eax, DWORD PTR _strTemp$225225[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2383 : 						strInfo = strTemp.toUTF8();

	lea	ecx, DWORD PTR _strTemp$225225[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T244548[ebp], eax
	cmp	DWORD PTR $T244548[ebp], 0
	je	SHORT $LN233@DoTurn@2
	mov	ecx, DWORD PTR $T244548[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN234@DoTurn@2
$LN233@DoTurn@2:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN234@DoTurn@2:

; 2384 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _strTemp$225225[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2385 : 					else{

	jmp	SHORT $LN240@DoTurn@2
$LN48@DoTurn@2:

; 2386 : 						strInfo = unmetCloseTwoInfo;

	lea	edx, DWORD PTR _unmetCloseTwoInfo$225209[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2387 : 					}
; 2388 : 
; 2389 : 					kCurPlayer.GetNotifications()->Add(NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

$LN240@DoTurn@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244560[ebp], edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244564[ebp], eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244568[ebp], eax
	push	-1
	mov	eax, DWORD PTR $T244560[ebp]
	push	eax
	push	-1
	push	-1
	mov	ecx, DWORD PTR $T244564[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244568[ebp]
	push	edx
	push	301374463				; 11f69bffH
	mov	ecx, DWORD PTR _kCurPlayer$225218[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
$LN49@DoTurn@2:

; 2390 : 				}
; 2391 : 			}

	jmp	$LN52@DoTurn@2
$LN51@DoTurn@2:

; 2392 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _unmetCloseTwoInfo$225209[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _someoneCloseTwoInfo$225206[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _someoneCloseTwoSummary$225203[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _targCloseTwoInfo$225200[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _targCloseTwoSummary$225197[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN54@DoTurn@2:

; 2393 : 
; 2394 : 		m_bReportedTwoCivsAway = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+196], 1
$LN55@DoTurn@2:

; 2395 : 	}
; 2396 : 
; 2397 : 	if (!m_bReportedOneCivAway && iThisTurnInfluentialCivs == iInfluentialCivsForWin - 1 && GC.getGame().countMajorCivsEverAlive() >= 3)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+197]
	test	edx, edx
	jne	$LN46@DoTurn@2
	mov	eax, DWORD PTR _iInfluentialCivsForWin$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _iThisTurnInfluentialCivs$[ebp], eax
	jne	$LN46@DoTurn@2
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244584[ebp], ecx
	mov	ecx, DWORD PTR $T244584[ebp]
	call	?countMajorCivsEverAlive@CvGame@@QBEHXZ	; CvGame::countMajorCivsEverAlive
	cmp	eax, 3
	jl	$LN46@DoTurn@2

; 2398 : 	{
; 2399 : 		if(bCultureVictoryValid)

	movzx	edx, BYTE PTR _bCultureVictoryValid$[ebp]
	test	edx, edx
	je	$LN45@DoTurn@2

; 2400 : 		{//This civilization is the first civ to be one civilizations away from getting a cultural victory.  Notify the masses!
; 2401 : 			CvString							targCloseOneSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER");

	push	OFFSET ??_C@_0DO@GFCAHEJO@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	eax, DWORD PTR _targCloseOneSummary$225230[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H

; 2402 : 			Localization::String	targCloseOneInfo = Localization::Lookup("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER_TT");

	push	OFFSET ??_C@_0EB@KBLMAIGN@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR _targCloseOneInfo$225233[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H

; 2403 : 			CvString							someoneCloseOneSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE");

	push	OFFSET ??_C@_0DA@IKBHEIHO@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	edx, DWORD PTR _someoneCloseOneSummary$225236[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H

; 2404 : 			Localization::String	someoneCloseOneInfo = Localization::Lookup("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_TT");

	push	OFFSET ??_C@_0DD@MDBAAENC@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	eax, DWORD PTR _someoneCloseOneInfo$225239[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H

; 2405 : 			CvString							unmetCloseOneInfo = GetLocalizedText("TXT_KEY_NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_UNMET_TT");

	push	OFFSET ??_C@_0DJ@CFALKGH@TXT_KEY_NOTIFICATION_CULTURE_VIC@
	lea	ecx, DWORD PTR _unmetCloseOneInfo$225242[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H

; 2406 : 			for(int iNotifyLoop = 0; iNotifyLoop < MAX_MAJOR_CIVS; ++iNotifyLoop){

	mov	DWORD PTR _iNotifyLoop$225245[ebp], 0
	jmp	SHORT $LN44@DoTurn@2
$LN43@DoTurn@2:
	mov	edx, DWORD PTR _iNotifyLoop$225245[ebp]
	add	edx, 1
	mov	DWORD PTR _iNotifyLoop$225245[ebp], edx
$LN44@DoTurn@2:
	cmp	DWORD PTR _iNotifyLoop$225245[ebp], 22	; 00000016H
	jge	$LN42@DoTurn@2

; 2407 : 				PlayerTypes eCurPlayer = (PlayerTypes) iNotifyLoop;

	mov	eax, DWORD PTR _iNotifyLoop$225245[ebp]
	mov	DWORD PTR _eCurPlayer$225249[ebp], eax

; 2408 : 				CvPlayerAI& kCurPlayer = GET_PLAYER(eCurPlayer);

	mov	ecx, DWORD PTR _eCurPlayer$225249[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCurPlayer$225251[ebp], ecx

; 2409 : 
; 2410 : 				if (eCurPlayer == m_pPlayer->GetID()){	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T244596[ebp], ecx
	mov	edx, DWORD PTR _eCurPlayer$225249[ebp]
	cmp	edx, DWORD PTR $T244596[ebp]
	jne	$LN41@DoTurn@2

; 2411 : 					strSummary = targCloseOneSummary;

	lea	eax, DWORD PTR _targCloseOneSummary$225230[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2412 : 					Localization::String strTemp = targCloseOneInfo;

	lea	ecx, DWORD PTR _targCloseOneInfo$225233[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strTemp$225253[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H

; 2413 : 					strTemp << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T244261[ebp], eax
	lea	eax, DWORD PTR $T244261[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTemp$225253[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2414 : 					strInfo = strTemp.toUTF8();

	lea	ecx, DWORD PTR _strTemp$225253[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T244605[ebp], eax
	cmp	DWORD PTR $T244605[ebp], 0
	je	SHORT $LN266@DoTurn@2
	mov	edx, DWORD PTR $T244605[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN271@DoTurn@2
$LN266@DoTurn@2:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ

; 2415 : 					kCurPlayer.GetNotifications()->Add(NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

$LN271@DoTurn@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244614[ebp], edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244618[ebp], eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244622[ebp], eax
	push	-1
	mov	eax, DWORD PTR $T244614[ebp]
	push	eax
	push	-1
	push	-1
	mov	ecx, DWORD PTR $T244618[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244622[ebp]
	push	edx
	push	1716970771				; 6656e513H
	mov	ecx, DWORD PTR _kCurPlayer$225251[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2416 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _strTemp$225253[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2417 : 				else

	jmp	$LN40@DoTurn@2
$LN41@DoTurn@2:

; 2418 : 				{
; 2419 : 					strSummary = someoneCloseOneSummary;

	lea	eax, DWORD PTR _someoneCloseOneSummary$225236[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2420 : 					CvTeam& kCurTeam = GET_TEAM(kCurPlayer.getTeam());

	mov	ecx, DWORD PTR _kCurPlayer$225251[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244634[ebp], eax
	mov	eax, DWORD PTR $T244634[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kCurTeam$225256[ebp], eax

; 2421 : 					if(kCurTeam.isHasMet(m_pPlayer->getTeam())){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR $T244646[ebp], edx
	mov	eax, DWORD PTR $T244646[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244647[ebp], eax
	mov	edx, DWORD PTR $T244647[ebp]
	push	edx
	mov	ecx, DWORD PTR _kCurTeam$225256[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	eax, al
	test	eax, eax
	je	$LN39@DoTurn@2

; 2422 : 						Localization::String strTemp = someoneCloseOneInfo;

	lea	ecx, DWORD PTR _someoneCloseOneInfo$225239[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strTemp$225258[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H

; 2423 : 						strTemp << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T244262[ebp], eax
	lea	eax, DWORD PTR $T244262[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTemp$225258[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2424 : 						strInfo = strTemp.toUTF8();

	lea	ecx, DWORD PTR _strTemp$225258[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T244653[ebp], eax
	cmp	DWORD PTR $T244653[ebp], 0
	je	SHORT $LN290@DoTurn@2
	mov	edx, DWORD PTR $T244653[ebp]
	push	edx
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN291@DoTurn@2
$LN290@DoTurn@2:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN291@DoTurn@2:

; 2425 : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _strTemp$225258[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2426 : 					else{

	jmp	SHORT $LN297@DoTurn@2
$LN39@DoTurn@2:

; 2427 : 						strInfo = unmetCloseOneInfo;

	lea	eax, DWORD PTR _unmetCloseOneInfo$225242[ebp]
	push	eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 2428 : 					}
; 2429 : 					kCurPlayer.GetNotifications()->Add(NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE, strInfo, strSummary, -1, -1, m_pPlayer->GetID());

$LN297@DoTurn@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244665[ebp], eax
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244669[ebp], eax
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T244673[ebp], eax
	push	-1
	mov	ecx, DWORD PTR $T244665[ebp]
	push	ecx
	push	-1
	push	-1
	mov	edx, DWORD PTR $T244669[ebp]
	push	edx
	mov	eax, DWORD PTR $T244673[ebp]
	push	eax
	push	2052101992				; 7a509768H
	mov	ecx, DWORD PTR _kCurPlayer$225251[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
$LN40@DoTurn@2:

; 2430 : 				}
; 2431 : 			}

	jmp	$LN43@DoTurn@2
$LN42@DoTurn@2:

; 2432 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _unmetCloseOneInfo$225242[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _someoneCloseOneInfo$225239[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _someoneCloseOneSummary$225236[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _targCloseOneInfo$225233[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _targCloseOneSummary$225230[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN45@DoTurn@2:

; 2433 : 
; 2434 : 		m_bReportedOneCivAway = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+197], 1
$LN46@DoTurn@2:

; 2435 : 	}
; 2436 : 
; 2437 : 	if (m_pPlayer->isHuman() && !GC.getGame().isGameMultiPlayer())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	$LN37@DoTurn@2
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244689[ebp], ecx
	mov	ecx, DWORD PTR $T244689[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	jne	$LN37@DoTurn@2

; 2438 : 	{
; 2439 : 		// check for having city-state artifacts
; 2440 : 		std::vector<int> aiCityStateArtifact;

	lea	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H

; 2441 : 		int iLoop;
; 2442 : 		CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$225268[ebp], 0

; 2443 : 		for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$225267[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$225268[ebp], eax
	jmp	SHORT $LN36@DoTurn@2
$LN35@DoTurn@2:
	push	0
	lea	edx, DWORD PTR _iLoop$225267[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$225268[ebp], eax
$LN36@DoTurn@2:
	cmp	DWORD PTR _pLoopCity$225268[ebp], 0
	je	$LN34@DoTurn@2

; 2444 : 		{
; 2445 : #ifdef AUI_WARNING_FIXES
; 2446 : 			for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 2447 : #else
; 2448 : 			for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$225272[ebp], 0
	jmp	SHORT $LN33@DoTurn@2
$LN32@DoTurn@2:
	mov	ecx, DWORD PTR _iBuildingClassLoop$225272[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$225272[ebp], ecx
$LN33@DoTurn@2:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$225272[ebp], eax
	jge	$LN31@DoTurn@2

; 2449 : #endif
; 2450 : 			{
; 2451 : 				CvCivilizationInfo& playerCivilizationInfo = m_pPlayer->getCivilizationInfo();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$225276[ebp], eax

; 2452 : 				BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$225272[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$225276[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$225277[ebp], eax

; 2453 : 				if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$225277[ebp], -1
	je	$LN30@DoTurn@2

; 2454 : 				{
; 2455 : 					CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$225277[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$225281[ebp], eax

; 2456 : 					if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$225281[ebp], 0
	je	$LN30@DoTurn@2

; 2457 : 					{
; 2458 : 						if (pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$225277[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$225268[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN30@DoTurn@2

; 2459 : 						{
; 2460 : 							int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$225281[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$225284[ebp], eax

; 2461 : 							for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$225285[ebp], 0
	jmp	SHORT $LN27@DoTurn@2
$LN26@DoTurn@2:
	mov	eax, DWORD PTR _iI$225285[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$225285[ebp], eax
$LN27@DoTurn@2:
	mov	ecx, DWORD PTR _iI$225285[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$225284[ebp]
	jge	$LN30@DoTurn@2

; 2462 : 							{
; 2463 : 								int iGreatWorkIndex = pLoopCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$225285[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$225272[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$225268[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$225289[ebp], eax

; 2464 : 								if (iGreatWorkIndex != NO_GREAT_WORK)

	cmp	DWORD PTR _iGreatWorkIndex$225289[ebp], -1
	je	$LN24@DoTurn@2

; 2465 : 								{
; 2466 : 									bool bDupe = false;

	mov	BYTE PTR _bDupe$225292[ebp], 0

; 2467 : 									PlayerTypes eCreatingPlayer = GC.getGame().GetGameCulture()->GetGreatWorkCreator(iGreatWorkIndex);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T244748[ebp], ecx
	mov	edx, DWORD PTR _iGreatWorkIndex$225289[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244748[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	ecx, eax
	call	?GetGreatWorkCreator@CvGameCulture@@QBE?AW4PlayerTypes@@H@Z ; CvGameCulture::GetGreatWorkCreator
	mov	DWORD PTR _eCreatingPlayer$225293[ebp], eax

; 2468 : 									if (GET_PLAYER(eCreatingPlayer).isMinorCiv())

	mov	eax, DWORD PTR _eCreatingPlayer$225293[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244752[ebp], eax
	mov	ecx, DWORD PTR $T244752[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	je	$LN24@DoTurn@2

; 2469 : 									{
; 2470 : 										for (uint ui = 0; ui < aiCityStateArtifact.size(); ui++)

	mov	DWORD PTR _ui$225295[ebp], 0
	jmp	SHORT $LN349@DoTurn@2
$LN21@DoTurn@2:
	mov	edx, DWORD PTR _ui$225295[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225295[ebp], edx
$LN349@DoTurn@2:
	mov	eax, DWORD PTR _aiCityStateArtifact$225266[ebp+8]
	sub	eax, DWORD PTR _aiCityStateArtifact$225266[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _ui$225295[ebp], eax
	jae	SHORT $LN20@DoTurn@2

; 2471 : 										{
; 2472 : 											if (aiCityStateArtifact[ui] == eCreatingPlayer)

	mov	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp+4]
	mov	edx, DWORD PTR _ui$225295[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _eCreatingPlayer$225293[ebp]
	jne	SHORT $LN19@DoTurn@2

; 2473 : 											{
; 2474 : 												bDupe = true;

	mov	BYTE PTR _bDupe$225292[ebp], 1

; 2475 : 												break;

	jmp	SHORT $LN20@DoTurn@2
$LN19@DoTurn@2:

; 2476 : 											}
; 2477 : 										}

	jmp	SHORT $LN21@DoTurn@2
$LN20@DoTurn@2:

; 2478 : 
; 2479 : 										if (!bDupe)

	movzx	ecx, BYTE PTR _bDupe$225292[ebp]
	test	ecx, ecx
	jne	SHORT $LN24@DoTurn@2

; 2480 : 										{
; 2481 : 											aiCityStateArtifact.push_back(eCreatingPlayer);

	mov	edx, DWORD PTR _eCreatingPlayer$225293[ebp]
	mov	DWORD PTR $T244263[ebp], edx
	lea	eax, DWORD PTR $T244263[ebp]
	push	eax
	lea	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 2482 : 											if (aiCityStateArtifact.size() >= 10)

	mov	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp+8]
	sub	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp+4]
	sar	ecx, 2
	cmp	ecx, 10					; 0000000aH
	jb	SHORT $LN24@DoTurn@2

; 2483 : 											{
; 2484 : 												gDLL->UnlockAchievement(ACHIEVEMENT_XP2_35);

	mov	edx, DWORD PTR $T244907[ebp]
	mov	DWORD PTR tv733[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv733[ebp], eax
	push	277					; 00000115H
	mov	ecx, DWORD PTR tv733[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv733[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax

; 2485 : 												break;

	jmp	SHORT $LN30@DoTurn@2
$LN24@DoTurn@2:

; 2486 : 											}
; 2487 : 										}
; 2488 : 									}
; 2489 : 								}
; 2490 : 							}

	jmp	$LN26@DoTurn@2
$LN30@DoTurn@2:

; 2491 : 						}
; 2492 : 					}
; 2493 : 				}
; 2494 : 			}

	jmp	$LN32@DoTurn@2
$LN31@DoTurn@2:

; 2495 : 		}

	jmp	$LN35@DoTurn@2
$LN34@DoTurn@2:

; 2496 : 
; 2497 : 		// check for having broadcast towers filled
; 2498 : 		PolicyBranchTypes eCurrentBranchType = m_pPlayer->GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eCurrentBranchType$225303[ebp], eax

; 2499 : 
; 2500 : 		if (eCurrentBranchType == (PolicyBranchTypes)GC.getPOLICY_BRANCH_FREEDOM())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8376
	mov	DWORD PTR $T244911[ebp], edx
	mov	eax, DWORD PTR _eCurrentBranchType$225303[ebp]
	cmp	eax, DWORD PTR $T244911[ebp]
	jne	$LN16@DoTurn@2

; 2501 : 		{
; 2502 : 			int iNumWorksInBroadcastTowers = 0;

	mov	DWORD PTR _iNumWorksInBroadcastTowers$225306[ebp], 0

; 2503 : 			for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	ecx, DWORD PTR _iLoop$225267[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$225268[ebp], eax
	jmp	SHORT $LN15@DoTurn@2
$LN14@DoTurn@2:
	push	0
	lea	eax, DWORD PTR _iLoop$225267[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$225268[ebp], eax
$LN15@DoTurn@2:
	cmp	DWORD PTR _pLoopCity$225268[ebp], 0
	je	$LN13@DoTurn@2

; 2504 : 			{
; 2505 : #ifdef AUI_WARNING_FIXES
; 2506 : 				for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 2507 : #else
; 2508 : 				for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$225310[ebp], 0
	jmp	SHORT $LN12@DoTurn@2
$LN11@DoTurn@2:
	mov	edx, DWORD PTR _iBuildingClassLoop$225310[ebp]
	add	edx, 1
	mov	DWORD PTR _iBuildingClassLoop$225310[ebp], edx
$LN12@DoTurn@2:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$225310[ebp], eax
	jge	$LN10@DoTurn@2

; 2509 : #endif
; 2510 : 				{
; 2511 : 					CvCivilizationInfo& playerCivilizationInfo = m_pPlayer->getCivilizationInfo();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$225314[ebp], eax

; 2512 : 					BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	ecx, DWORD PTR _iBuildingClassLoop$225310[ebp]
	push	ecx
	mov	ecx, DWORD PTR _playerCivilizationInfo$225314[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$225315[ebp], eax

; 2513 : 					if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$225315[ebp], -1
	je	$LN9@DoTurn@2

; 2514 : 					{
; 2515 : 						CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	edx, DWORD PTR _eBuilding$225315[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$225319[ebp], eax

; 2516 : 						if (pkBuilding && strcmp(pkBuilding->GetType(), "BUILDING_BROADCAST_TOWER") == 0)

	cmp	DWORD PTR _pkBuilding$225319[ebp], 0
	je	$LN9@DoTurn@2
	mov	DWORD PTR tv1697[ebp], OFFSET ??_C@_0BJ@EHIIJGMN@BUILDING_BROADCAST_TOWER?$AA@
	mov	ecx, DWORD PTR _pkBuilding$225319[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv1696[ebp], eax
$LL444@DoTurn@2:
	mov	eax, DWORD PTR tv1696[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv1700[ebp], cl
	mov	edx, DWORD PTR tv1697[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN445@DoTurn@2
	cmp	BYTE PTR tv1700[ebp], 0
	je	SHORT $LN446@DoTurn@2
	mov	eax, DWORD PTR tv1696[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv1707[ebp], cl
	mov	edx, DWORD PTR tv1697[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN445@DoTurn@2
	add	DWORD PTR tv1696[ebp], 2
	add	DWORD PTR tv1697[ebp], 2
	cmp	BYTE PTR tv1707[ebp], 0
	jne	SHORT $LL444@DoTurn@2
$LN446@DoTurn@2:
	mov	DWORD PTR tv1712[ebp], 0
	jmp	SHORT $LN447@DoTurn@2
$LN445@DoTurn@2:
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv1712[ebp], eax
$LN447@DoTurn@2:
	mov	ecx, DWORD PTR tv1712[ebp]
	mov	DWORD PTR tv780[ebp], ecx
	cmp	DWORD PTR tv780[ebp], 0
	jne	$LN9@DoTurn@2

; 2517 : 						{
; 2518 : 							if (pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$225315[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$225268[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN9@DoTurn@2

; 2519 : 							{
; 2520 : 								int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$225319[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$225323[ebp], eax

; 2521 : 								bool bAnySlotEmpty = false;

	mov	BYTE PTR _bAnySlotEmpty$225324[ebp], 0

; 2522 : 								for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$225325[ebp], 0
	jmp	SHORT $LN6@DoTurn@2
$LN5@DoTurn@2:
	mov	eax, DWORD PTR _iI$225325[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$225325[ebp], eax
$LN6@DoTurn@2:
	mov	ecx, DWORD PTR _iI$225325[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$225323[ebp]
	jge	SHORT $LN4@DoTurn@2

; 2523 : 								{
; 2524 : 									int iGreatWorkIndex = pLoopCity->GetCityBuildings()->GetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI);

	mov	edx, DWORD PTR _iI$225325[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$225310[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$225268[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWorkIndex$225329[ebp], eax

; 2525 : 									if (iGreatWorkIndex == NO_GREAT_WORK)

	cmp	DWORD PTR _iGreatWorkIndex$225329[ebp], -1
	jne	SHORT $LN3@DoTurn@2

; 2526 : 									{
; 2527 : 										bAnySlotEmpty = true;

	mov	BYTE PTR _bAnySlotEmpty$225324[ebp], 1
$LN3@DoTurn@2:

; 2528 : 									}
; 2529 : 								}

	jmp	SHORT $LN5@DoTurn@2
$LN4@DoTurn@2:

; 2530 : 
; 2531 : 								if (!bAnySlotEmpty)

	movzx	ecx, BYTE PTR _bAnySlotEmpty$225324[ebp]
	test	ecx, ecx
	jne	SHORT $LN9@DoTurn@2

; 2532 : 								{
; 2533 : 									iNumWorksInBroadcastTowers++;

	mov	edx, DWORD PTR _iNumWorksInBroadcastTowers$225306[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumWorksInBroadcastTowers$225306[ebp], edx
$LN9@DoTurn@2:

; 2534 : 								}
; 2535 : 							}
; 2536 : 						}
; 2537 : 					}
; 2538 : 				}

	jmp	$LN11@DoTurn@2
$LN10@DoTurn@2:

; 2539 : 			}

	jmp	$LN14@DoTurn@2
$LN13@DoTurn@2:

; 2540 : 
; 2541 : 			if (iNumWorksInBroadcastTowers >= 10)

	cmp	DWORD PTR _iNumWorksInBroadcastTowers$225306[ebp], 10 ; 0000000aH
	jl	SHORT $LN16@DoTurn@2

; 2542 : 			{
; 2543 : 				gDLL->UnlockAchievement(ACHIEVEMENT_XP2_38);

	mov	eax, DWORD PTR $T244918[ebp]
	mov	DWORD PTR tv810[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv810[ebp], ecx
	push	280					; 00000118H
	mov	edx, DWORD PTR tv810[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv810[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN16@DoTurn@2:

; 2544 : 			}
; 2545 : 		}
; 2546 : 	}	

	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
$LN37@DoTurn@2:

; 2547 : 
; 2548 : 	LogCultureData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogCultureData@CvPlayerCulture@@AAEXXZ	; CvPlayerCulture::LogCultureData

; 2549 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strSummary$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strInfo$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T244255[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$3:
	lea	ecx, DWORD PTR _targFirstInfluentialInfo$225161[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$4:
	lea	ecx, DWORD PTR _someoneFirstInfluentialInfo$225164[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$5:
	lea	ecx, DWORD PTR _unmetFirstInfluentialInfo$225167[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strTemp$225181[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$7:
	lea	ecx, DWORD PTR _strTemp$225190[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T244257[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$9:
	lea	ecx, DWORD PTR $T244258[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$10:
	lea	ecx, DWORD PTR _targCloseTwoSummary$225197[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$11:
	lea	ecx, DWORD PTR _targCloseTwoInfo$225200[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$12:
	lea	ecx, DWORD PTR _someoneCloseTwoSummary$225203[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$13:
	lea	ecx, DWORD PTR _someoneCloseTwoInfo$225206[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$14:
	lea	ecx, DWORD PTR _unmetCloseTwoInfo$225209[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$15:
	lea	ecx, DWORD PTR _strTemp$225220[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$16:
	lea	ecx, DWORD PTR _strTemp$225225[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$17:
	lea	ecx, DWORD PTR _targCloseOneSummary$225230[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$18:
	lea	ecx, DWORD PTR _targCloseOneInfo$225233[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$19:
	lea	ecx, DWORD PTR _someoneCloseOneSummary$225236[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$20:
	lea	ecx, DWORD PTR _someoneCloseOneInfo$225239[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$21:
	lea	ecx, DWORD PTR _unmetCloseOneInfo$225242[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$22:
	lea	ecx, DWORD PTR _strTemp$225253[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$23:
	lea	ecx, DWORD PTR _strTemp$225258[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$24:
	lea	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?DoTurn@CvPlayerCulture@@QAEXXZ$41:
	lea	ecx, DWORD PTR _aiCityStateArtifact$225266[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?DoTurn@CvPlayerCulture@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1964]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoTurn@CvPlayerCulture@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoTurn@CvPlayerCulture@@QAEXXZ ENDP			; CvPlayerCulture::DoTurn
PUBLIC	__$ArrayPad$
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1
__ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ?GetLocalizedText@@YA?AVCvString@@PBD@Z
_TEXT	SEGMENT
$T244998 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
?GetLocalizedText@@YA?AVCvString@@PBD@Z PROC		; GetLocalizedText, COMDAT

; 489  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T244998[ebp], 0

; 490  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 491  : 
; 492  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 493  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 494  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 495  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 496  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T244998[ebp]
	or	eax, 1
	mov	DWORD PTR $T244998[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 497  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2:
	mov	eax, DWORD PTR $T244998[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz
	and	DWORD PTR $T244998[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz:
	ret	0
__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLocalizedText@@YA?AVCvString@@PBD@Z ENDP		; GetLocalizedText
PUBLIC	?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetLastTurnLifetimeCulture
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
;	COMDAT ?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetLastTurnLifetimeCulture, COMDAT
; _this$ = ecx

; 2553 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2554 : 	return m_iLastTurnLifetimeCulture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 2555 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetLastTurnLifetimeCulture
_TEXT	ENDS
PUBLIC	?SetLastTurnLifetimeCulture@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::SetLastTurnLifetimeCulture
; Function compile flags: /Odtp
;	COMDAT ?SetLastTurnLifetimeCulture@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iValue$ = 8						; size = 4
?SetLastTurnLifetimeCulture@CvPlayerCulture@@QAEXH@Z PROC ; CvPlayerCulture::SetLastTurnLifetimeCulture, COMDAT
; _this$ = ecx

; 2559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2560 : 	m_iLastTurnLifetimeCulture = iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2561 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLastTurnLifetimeCulture@CvPlayerCulture@@QAEXH@Z ENDP ; CvPlayerCulture::SetLastTurnLifetimeCulture
_TEXT	ENDS
PUBLIC	?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceOn
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIndex$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceOn, COMDAT
; _this$ = ecx

; 2565 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2566 : 	CvAssertMsg (ePlayer >= 0, "Invalid player index");
; 2567 : 	CvAssertMsg (ePlayer < MAX_MAJOR_CIVS, "Invalid player index");
; 2568 : 
; 2569 : 	int iIndex = (int)ePlayer;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR _iIndex$[ebp], eax

; 2570 : 	if (iIndex < 0 || iIndex >= MAX_MAJOR_CIVS) return 0;

	cmp	DWORD PTR _iIndex$[ebp], 0
	jl	SHORT $LN1@GetInfluen
	cmp	DWORD PTR _iIndex$[ebp], 22		; 00000016H
	jl	SHORT $LN2@GetInfluen
$LN1@GetInfluen:
	xor	eax, eax
	jmp	SHORT $LN3@GetInfluen
$LN2@GetInfluen:

; 2571 : 	return m_aiCulturalInfluence[iIndex];

	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
$LN3@GetInfluen:

; 2572 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceOn
_TEXT	ENDS
PUBLIC	?ChangeInfluenceOn@CvPlayerCulture@@QAEXW4PlayerTypes@@H@Z ; CvPlayerCulture::ChangeInfluenceOn
; Function compile flags: /Odtp
;	COMDAT ?ChangeInfluenceOn@CvPlayerCulture@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIndex$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iValue$ = 12						; size = 4
?ChangeInfluenceOn@CvPlayerCulture@@QAEXW4PlayerTypes@@H@Z PROC ; CvPlayerCulture::ChangeInfluenceOn, COMDAT
; _this$ = ecx

; 2576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2577 : 	CvAssertMsg (ePlayer >= 0, "Invalid player index");
; 2578 : 	CvAssertMsg (ePlayer < MAX_MAJOR_CIVS, "Invalid player index");
; 2579 : 
; 2580 : 	int iIndex = (int)ePlayer;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR _iIndex$[ebp], eax

; 2581 : 	if (iIndex < 0 || iIndex >= MAX_MAJOR_CIVS) return;

	cmp	DWORD PTR _iIndex$[ebp], 0
	jl	SHORT $LN1@ChangeInfl
	cmp	DWORD PTR _iIndex$[ebp], 22		; 00000016H
	jl	SHORT $LN2@ChangeInfl
$LN1@ChangeInfl:
	jmp	SHORT $LN3@ChangeInfl
$LN2@ChangeInfl:

; 2582 : 	m_aiCulturalInfluence[iIndex] = m_aiCulturalInfluence[iIndex] + iValue;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+20]
	add	eax, DWORD PTR _iValue$[ebp]
	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+20], eax
$LN3@ChangeInfl:

; 2583 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeInfluenceOn@CvPlayerCulture@@QAEXW4PlayerTypes@@H@Z ENDP ; CvPlayerCulture::ChangeInfluenceOn
_TEXT	ENDS
PUBLIC	?GetLastTurnInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetLastTurnInfluenceOn
; Function compile flags: /Odtp
;	COMDAT ?GetLastTurnInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIndex$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetLastTurnInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetLastTurnInfluenceOn, COMDAT
; _this$ = ecx

; 2587 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2588 : 	CvAssertMsg (ePlayer >= 0, "Invalid player index");
; 2589 : 	CvAssertMsg (ePlayer < MAX_MAJOR_CIVS, "Invalid player index");
; 2590 : 
; 2591 : 	int iIndex = (int)ePlayer;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR _iIndex$[ebp], eax

; 2592 : 	if (iIndex < 0 || iIndex >= MAX_MAJOR_CIVS) return 0;

	cmp	DWORD PTR _iIndex$[ebp], 0
	jl	SHORT $LN1@GetLastTur
	cmp	DWORD PTR _iIndex$[ebp], 22		; 00000016H
	jl	SHORT $LN2@GetLastTur
$LN1@GetLastTur:
	xor	eax, eax
	jmp	SHORT $LN3@GetLastTur
$LN2@GetLastTur:

; 2593 : 	return m_aiLastTurnCulturalInfluence[iIndex];

	mov	ecx, DWORD PTR _iIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+108]
$LN3@GetLastTur:

; 2594 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLastTurnInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetLastTurnInfluenceOn
_TEXT	ENDS
PUBLIC	?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ ; CvCityCulture::GetBaseTourismBeforeModifiers
PUBLIC	?GetBaseTourism@CvCityCulture@@QAEHXZ		; CvCityCulture::GetBaseTourism
PUBLIC	?GetTourismMultiplier@CvCityCulture@@QBEHW4PlayerTypes@@_N1111@Z ; CvCityCulture::GetTourismMultiplier
EXTRN	?isCapital@CvCity@@QBE_NXZ:PROC			; CvCity::isCapital
EXTRN	?NullifyInfluenceModifier@CvBuildingEntry@@QBE_NXZ:PROC ; CvBuildingEntry::NullifyInfluenceModifier
EXTRN	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z:PROC ; CvGlobals::getBuildingClassInfo
EXTRN	?GetInfluenceSpreadModifier@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetInfluenceSpreadModifier
; Function compile flags: /Odtp
;	COMDAT ?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T245102 = -108						; size = 4
$T245093 = -104						; size = 4
$T245089 = -100						; size = 4
$T245080 = -96						; size = 4
$T245076 = -92						; size = 4
$T245072 = -88						; size = 4
$T245071 = -84						; size = 4
$T245062 = -77						; size = 1
$T245053 = -76						; size = 4
$T245041 = -72						; size = 4
_iInfluenceWithTechModifier$225407 = -68		; size = 4
_iInfluenceWithoutModifier$225406 = -64			; size = 4
_iInfluenceToAdd$225404 = -60				; size = 4
_pBuildingEntry$225396 = -56				; size = 4
_eBuilding$225393 = -52					; size = 4
_playerCivilizationInfo$225392 = -48			; size = 4
_pkBuildingClassInfo$225390 = -44			; size = 4
_eBuildingClass$225388 = -40				; size = 4
_jJ$225384 = -36					; size = 4
_iLoopCity$225377 = -32					; size = 4
_iTechSpreadModifier$225379 = -28			; size = 4
_bTargetHasGreatFirewall$225376 = -21			; size = 1
_pLoopCity$225378 = -20					; size = 4
_iRtnValue$ = -16					; size = 4
_kOtherPlayer$ = -12					; size = 4
_kOtherTeam$ = -8					; size = 4
_iModifier$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluencePerTurn, COMDAT
; _this$ = ecx

; 2598 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	DWORD PTR _this$[ebp], ecx

; 2599 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2600 : 	int iModifier = 0;

	mov	DWORD PTR _iModifier$[ebp], 0

; 2601 : 
; 2602 : 	CvPlayer &kOtherPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$[ebp], eax

; 2603 : 	CvTeam &kOtherTeam = GET_TEAM(kOtherPlayer.getTeam());

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245041[ebp], eax
	mov	eax, DWORD PTR $T245041[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kOtherTeam$[ebp], eax

; 2604 : 
; 2605 : 	if ((int)ePlayer != m_pPlayer->GetID() && kOtherPlayer.isAlive() && !kOtherPlayer.isMinorCiv() && kOtherTeam.isHasMet(m_pPlayer->getTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T245053[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	cmp	ecx, DWORD PTR $T245053[ebp]
	je	$LN18@GetInfluen@2
	mov	edx, DWORD PTR _kOtherPlayer$[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T245062[ebp], al
	movzx	ecx, BYTE PTR $T245062[ebp]
	test	ecx, ecx
	je	$LN18@GetInfluen@2
	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	$LN18@GetInfluen@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T245071[ebp], ecx
	mov	edx, DWORD PTR $T245071[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245072[ebp], eax
	mov	ecx, DWORD PTR $T245072[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kOtherTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	$LN18@GetInfluen@2

; 2606 : 	{
; 2607 : 		// check to see if the other player has the Great Firewall
; 2608 : 		bool bTargetHasGreatFirewall = false;

	mov	BYTE PTR _bTargetHasGreatFirewall$225376[ebp], 0

; 2609 : 
; 2610 : 		int iLoopCity;
; 2611 : 		CvCity *pLoopCity;
; 2612 : 
; 2613 : 		// only check for firewall if the internet influence spread modifier is > 0
; 2614 : 		int iTechSpreadModifier = m_pPlayer->GetInfluenceSpreadModifier();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetInfluenceSpreadModifier@CvPlayer@@QBEHXZ ; CvPlayer::GetInfluenceSpreadModifier
	mov	DWORD PTR _iTechSpreadModifier$225379[ebp], eax

; 2615 : 		if (iTechSpreadModifier > 0) 

	cmp	DWORD PTR _iTechSpreadModifier$225379[ebp], 0
	jle	$LN17@GetInfluen@2

; 2616 : 		{
; 2617 : 			for (pLoopCity = GET_PLAYER(ePlayer).firstCity(&iLoopCity); pLoopCity != NULL; pLoopCity = GET_PLAYER(ePlayer).nextCity(&iLoopCity))

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T245076[ebp], ecx
	push	0
	lea	edx, DWORD PTR _iLoopCity$225377[ebp]
	push	edx
	mov	ecx, DWORD PTR $T245076[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$225378[ebp], eax
	jmp	SHORT $LN16@GetInfluen@2
$LN15@GetInfluen@2:
	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T245080[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iLoopCity$225377[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T245080[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$225378[ebp], eax
$LN16@GetInfluen@2:
	cmp	DWORD PTR _pLoopCity$225378[ebp], 0
	je	$LN17@GetInfluen@2

; 2618 : 			{
; 2619 : 				// Buildings
; 2620 : #ifdef AUI_WARNING_FIXES
; 2621 : 				for (uint jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)
; 2622 : #else
; 2623 : 				for(int jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)

	mov	DWORD PTR _jJ$225384[ebp], 0
	jmp	SHORT $LN13@GetInfluen@2
$LN12@GetInfluen@2:
	mov	edx, DWORD PTR _jJ$225384[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$225384[ebp], edx
$LN13@GetInfluen@2:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _jJ$225384[ebp], eax
	jge	$LN11@GetInfluen@2

; 2624 : #endif
; 2625 : 				{
; 2626 : 					BuildingClassTypes eBuildingClass = (BuildingClassTypes)jJ;

	mov	eax, DWORD PTR _jJ$225384[ebp]
	mov	DWORD PTR _eBuildingClass$225388[ebp], eax

; 2627 : 
; 2628 : 					CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$225388[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$225390[ebp], eax

; 2629 : 					if(!pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$225390[ebp], 0
	jne	SHORT $LN47@GetInfluen@2

; 2630 : 					{
; 2631 : 						continue;

	jmp	SHORT $LN12@GetInfluen@2

; 2632 : 					}
; 2633 : 
; 2634 : 					CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(pLoopCity->getOwner()).getCivilizationInfo();

$LN47@GetInfluen@2:
	mov	edx, DWORD PTR _pLoopCity$225378[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T245089[ebp], eax
	mov	ecx, DWORD PTR $T245089[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T245093[ebp], ecx
	mov	ecx, DWORD PTR $T245093[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$225392[ebp], eax

; 2635 : 					BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	edx, DWORD PTR _eBuildingClass$225388[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerCivilizationInfo$225392[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$225393[ebp], eax

; 2636 : 					if(eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$225393[ebp], -1
	je	SHORT $LN9@GetInfluen@2

; 2637 : 					{
; 2638 : 
; 2639 : 						CvBuildingEntry* pBuildingEntry = GC.GetGameBuildings()->GetEntry(eBuilding);

	mov	eax, DWORD PTR _eBuilding$225393[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pBuildingEntry$225396[ebp], eax

; 2640 : 						if (!pBuildingEntry || !pBuildingEntry->NullifyInfluenceModifier())

	cmp	DWORD PTR _pBuildingEntry$225396[ebp], 0
	je	SHORT $LN7@GetInfluen@2
	mov	ecx, DWORD PTR _pBuildingEntry$225396[ebp]
	call	?NullifyInfluenceModifier@CvBuildingEntry@@QBE_NXZ ; CvBuildingEntry::NullifyInfluenceModifier
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@GetInfluen@2
$LN7@GetInfluen@2:

; 2641 : 						{
; 2642 : 							continue;

	jmp	$LN12@GetInfluen@2
$LN8@GetInfluen@2:

; 2643 : 						}
; 2644 : 
; 2645 : 						if(pLoopCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$225393[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$225378[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN9@GetInfluen@2

; 2646 : 						{
; 2647 : 							bTargetHasGreatFirewall = true;				

	mov	BYTE PTR _bTargetHasGreatFirewall$225376[ebp], 1
$LN9@GetInfluen@2:

; 2648 : 						}
; 2649 : 					}
; 2650 : 				}

	jmp	$LN12@GetInfluen@2
$LN11@GetInfluen@2:

; 2651 : 			}

	jmp	$LN15@GetInfluen@2
$LN17@GetInfluen@2:

; 2652 : 		}
; 2653 : 
; 2654 : 		// Loop through each of our cities
; 2655 : 		for (pLoopCity = m_pPlayer->firstCity(&iLoopCity); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoopCity))

	push	0
	lea	eax, DWORD PTR _iLoopCity$225377[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$225378[ebp], eax
	jmp	SHORT $LN5@GetInfluen@2
$LN4@GetInfluen@2:
	push	0
	lea	edx, DWORD PTR _iLoopCity$225377[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$225378[ebp], eax
$LN5@GetInfluen@2:
	cmp	DWORD PTR _pLoopCity$225378[ebp], 0
	je	$LN3@GetInfluen@2

; 2656 : 		{
; 2657 : 			// Design has changed so modifier is always player-to-player so only need to get it once and can apply it at the end
; 2658 : 			if (pLoopCity->isCapital())

	mov	ecx, DWORD PTR _pLoopCity$225378[ebp]
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetInfluen@2

; 2659 : 			{
; 2660 : 				iModifier = pLoopCity->GetCityCulture()->GetTourismMultiplier(kOtherPlayer.GetID(), false, false, false, false, false);

	mov	edx, DWORD PTR _kOtherPlayer$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T245102[ebp], eax
	push	0
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR $T245102[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopCity$225378[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetTourismMultiplier@CvCityCulture@@QBEHW4PlayerTypes@@_N1111@Z ; CvCityCulture::GetTourismMultiplier
	mov	DWORD PTR _iModifier$[ebp], eax
$LN2@GetInfluen@2:

; 2661 : 			}
; 2662 : 
; 2663 : 			int iInfluenceToAdd = pLoopCity->GetCityCulture()->GetBaseTourism();

	mov	ecx, DWORD PTR _pLoopCity$225378[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetBaseTourism@CvCityCulture@@QAEHXZ	; CvCityCulture::GetBaseTourism
	mov	DWORD PTR _iInfluenceToAdd$225404[ebp], eax

; 2664 : 
; 2665 : 			// if we have the internet online, check to see if the opponent has the firewall
; 2666 : 			// if they have the firewall, deduct the internet bonus from them
; 2667 : 			if (iTechSpreadModifier > 0 && bTargetHasGreatFirewall)

	cmp	DWORD PTR _iTechSpreadModifier$225379[ebp], 0
	jle	SHORT $LN1@GetInfluen@2
	movzx	edx, BYTE PTR _bTargetHasGreatFirewall$225376[ebp]
	test	edx, edx
	je	SHORT $LN1@GetInfluen@2

; 2668 : 			{
; 2669 : 				int iInfluenceWithoutModifier = pLoopCity->GetCityCulture()->GetBaseTourismBeforeModifiers();

	mov	ecx, DWORD PTR _pLoopCity$225378[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ ; CvCityCulture::GetBaseTourismBeforeModifiers
	mov	DWORD PTR _iInfluenceWithoutModifier$225406[ebp], eax

; 2670 : 				int iInfluenceWithTechModifier = iInfluenceWithoutModifier * iTechSpreadModifier;

	mov	eax, DWORD PTR _iInfluenceWithoutModifier$225406[ebp]
	imul	eax, DWORD PTR _iTechSpreadModifier$225379[ebp]
	mov	DWORD PTR _iInfluenceWithTechModifier$225407[ebp], eax

; 2671 : 				iInfluenceToAdd -= (iInfluenceWithTechModifier / 100);

	mov	eax, DWORD PTR _iInfluenceWithTechModifier$225407[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _iInfluenceToAdd$225404[ebp]
	sub	edx, eax
	mov	DWORD PTR _iInfluenceToAdd$225404[ebp], edx
$LN1@GetInfluen@2:

; 2672 : 			}
; 2673 : 			
; 2674 : 			iRtnValue += iInfluenceToAdd;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
	add	eax, DWORD PTR _iInfluenceToAdd$225404[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 2675 : 		}

	jmp	$LN4@GetInfluen@2
$LN3@GetInfluen@2:

; 2676 : 		iRtnValue = iRtnValue * (100 + iModifier) / 100;

	mov	ecx, DWORD PTR _iModifier$[ebp]
	add	ecx, 100				; 00000064H
	mov	eax, ecx
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN18@GetInfluen@2:

; 2677 : 	}
; 2678 : 
; 2679 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2680 : 
; 2681 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluencePerTurn
_TEXT	ENDS
PUBLIC	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
EXTRN	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetJONSCultureEverGenerated
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T245149 = -56						; size = 4
$T245145 = -52						; size = 4
$T245141 = -48						; size = 4
$T245137 = -44						; size = 4
$T245133 = -40						; size = 4
$T245129 = -36						; size = 4
$T245128 = -32						; size = 4
$T245116 = -28						; size = 4
_iInfluenceOn$225417 = -24				; size = 4
_iLifetimeCulture$225418 = -20				; size = 4
_iPercent$225419 = -16					; size = 4
_eRtnValue$ = -12					; size = 4
_kOtherPlayer$ = -8					; size = 4
_kOtherTeam$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceLevel, COMDAT
; _this$ = ecx

; 2685 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 2686 : 	InfluenceLevelTypes eRtnValue;
; 2687 : 
; 2688 : 	CvPlayer &kOtherPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$[ebp], eax

; 2689 : 	CvTeam &kOtherTeam = GET_TEAM(kOtherPlayer.getTeam());

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245116[ebp], eax
	mov	eax, DWORD PTR $T245116[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kOtherTeam$[ebp], eax

; 2690 : 
; 2691 : 	if (!kOtherTeam.isHasMet(m_pPlayer->getTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR $T245128[ebp], edx
	mov	eax, DWORD PTR $T245128[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245129[ebp], eax
	mov	edx, DWORD PTR $T245129[ebp]
	push	edx
	mov	ecx, DWORD PTR _kOtherTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@GetInfluen@3

; 2692 : 	{
; 2693 : 		eRtnValue = NO_INFLUENCE_LEVEL;

	mov	DWORD PTR _eRtnValue$[ebp], -1

; 2694 : 	}
; 2695 : 	else

	jmp	$LN11@GetInfluen@3
$LN12@GetInfluen@3:

; 2696 : 	{
; 2697 : 		int iInfluenceOn = GetInfluenceOn(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceOn
	mov	DWORD PTR _iInfluenceOn$225417[ebp], eax

; 2698 : 		int iLifetimeCulture = kOtherPlayer.GetJONSCultureEverGenerated();

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	mov	DWORD PTR _iLifetimeCulture$225418[ebp], eax

; 2699 : 		int iPercent = 0;

	mov	DWORD PTR _iPercent$225419[ebp], 0

; 2700 : 
; 2701 : 		if (iLifetimeCulture > 0)

	cmp	DWORD PTR _iLifetimeCulture$225418[ebp], 0
	jle	SHORT $LN10@GetInfluen@3

; 2702 : 		{
; 2703 : 			iPercent = iInfluenceOn * 100 / iLifetimeCulture;

	mov	eax, DWORD PTR _iInfluenceOn$225417[ebp]
	imul	eax, 100				; 00000064H
	cdq
	idiv	DWORD PTR _iLifetimeCulture$225418[ebp]
	mov	DWORD PTR _iPercent$225419[ebp], eax
$LN10@GetInfluen@3:

; 2704 : 		}
; 2705 : 
; 2706 : 		eRtnValue = INFLUENCE_LEVEL_UNKNOWN;

	mov	DWORD PTR _eRtnValue$[ebp], 0

; 2707 : 
; 2708 : 		if (iPercent >= GC.getCULTURE_LEVEL_DOMINANT())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8256
	mov	DWORD PTR $T245133[ebp], edx
	mov	eax, DWORD PTR _iPercent$225419[ebp]
	cmp	eax, DWORD PTR $T245133[ebp]
	jl	SHORT $LN9@GetInfluen@3

; 2709 : 		{
; 2710 : 			eRtnValue = INFLUENCE_LEVEL_DOMINANT;

	mov	DWORD PTR _eRtnValue$[ebp], 5
	jmp	SHORT $LN11@GetInfluen@3
$LN9@GetInfluen@3:

; 2711 : 		}
; 2712 : 		else if (iPercent >= GC.getCULTURE_LEVEL_INFLUENTIAL())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8252
	mov	DWORD PTR $T245137[ebp], ecx
	mov	edx, DWORD PTR _iPercent$225419[ebp]
	cmp	edx, DWORD PTR $T245137[ebp]
	jl	SHORT $LN7@GetInfluen@3

; 2713 : 		{
; 2714 : 			eRtnValue = INFLUENCE_LEVEL_INFLUENTIAL;

	mov	DWORD PTR _eRtnValue$[ebp], 4
	jmp	SHORT $LN11@GetInfluen@3
$LN7@GetInfluen@3:

; 2715 : 		}
; 2716 : 		else if (iPercent >= GC.getCULTURE_LEVEL_POPULAR())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8248
	mov	DWORD PTR $T245141[ebp], eax
	mov	ecx, DWORD PTR _iPercent$225419[ebp]
	cmp	ecx, DWORD PTR $T245141[ebp]
	jl	SHORT $LN5@GetInfluen@3

; 2717 : 		{
; 2718 : 			eRtnValue = INFLUENCE_LEVEL_POPULAR;

	mov	DWORD PTR _eRtnValue$[ebp], 3
	jmp	SHORT $LN11@GetInfluen@3
$LN5@GetInfluen@3:

; 2719 : 		}
; 2720 : 		else if (iPercent >= GC.getCULTURE_LEVEL_FAMILIAR())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8244
	mov	DWORD PTR $T245145[ebp], edx
	mov	eax, DWORD PTR _iPercent$225419[ebp]
	cmp	eax, DWORD PTR $T245145[ebp]
	jl	SHORT $LN3@GetInfluen@3

; 2721 : 		{
; 2722 : 			eRtnValue = INFLUENCE_LEVEL_FAMILIAR;

	mov	DWORD PTR _eRtnValue$[ebp], 2
	jmp	SHORT $LN11@GetInfluen@3
$LN3@GetInfluen@3:

; 2723 : 		}
; 2724 : 		else if (iPercent >= GC.getCULTURE_LEVEL_EXOTIC())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8240
	mov	DWORD PTR $T245149[ebp], ecx
	mov	edx, DWORD PTR _iPercent$225419[ebp]
	cmp	edx, DWORD PTR $T245149[ebp]
	jl	SHORT $LN11@GetInfluen@3

; 2725 : 		{
; 2726 : 			eRtnValue = INFLUENCE_LEVEL_EXOTIC;

	mov	DWORD PTR _eRtnValue$[ebp], 1
$LN11@GetInfluen@3:

; 2727 : 		}
; 2728 : 	}
; 2729 : 
; 2730 : 	return eRtnValue;

	mov	eax, DWORD PTR _eRtnValue$[ebp]

; 2731 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceLevel
_TEXT	ENDS
PUBLIC	?GetInfluenceTrend@CvPlayerCulture@@QBE?AW4InfluenceLevelTrend@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceTrend
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceTrend@CvPlayerCulture@@QBE?AW4InfluenceLevelTrend@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_iRHS$ = -16						; size = 4
_eRtnValue$ = -12					; size = 4
_iLHS$ = -8						; size = 4
_kOtherPlayer$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceTrend@CvPlayerCulture@@QBE?AW4InfluenceLevelTrend@@W4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceTrend, COMDAT
; _this$ = ecx

; 2735 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2736 : 	InfluenceLevelTrend eRtnValue = INFLUENCE_TREND_STATIC;

	mov	DWORD PTR _eRtnValue$[ebp], 0

; 2737 : 
; 2738 : 	CvPlayer &kOtherPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$[ebp], eax

; 2739 : 
; 2740 : 	// PctTurn1 = InfluenceT1 / LifetimeCultureT1
; 2741 : 	// PctTurn2 = InfluenceT2 / LifetimeCultureT2
; 2742 : 	
; 2743 : 	// So if looking at is PctT2 > PctT1, can see if  (InfluenceT2 * LifetimeCultureT1) > (InfluenceT1 * LifetimeCultureT2)
; 2744 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 2745 : 	int iOtherPlayerLastTurnLifetimeCulture = kOtherPlayer.GetCulture()->GetLastTurnLifetimeCulture();
; 2746 : 	int iOtherPlayerThisTurnLifetimeCulture = kOtherPlayer.GetJONSCultureEverGenerated();
; 2747 : #ifdef AUI_GAME_BETTER_HYBRID_MODE
; 2748 : 	if (kOtherPlayer.getTurnOrder() > m_pPlayer->getTurnOrder())
; 2749 : #else
; 2750 : 	if (ePlayer > m_pPlayer->GetID())
; 2751 : #endif
; 2752 : 	{
; 2753 : 		iOtherPlayerLastTurnLifetimeCulture = iOtherPlayerThisTurnLifetimeCulture;
; 2754 : 		iOtherPlayerThisTurnLifetimeCulture += m_pPlayer->GetTotalJONSCulturePerTurn();
; 2755 : 	}
; 2756 : 	int iLHS = GetInfluenceOn(ePlayer) * iOtherPlayerLastTurnLifetimeCulture;
; 2757 : 	int iRHS = GetLastTurnInfluenceOn(ePlayer) * iOtherPlayerThisTurnLifetimeCulture;
; 2758 : #else
; 2759 : 	int iLHS = GetInfluenceOn(ePlayer) * kOtherPlayer.GetCulture()->GetLastTurnLifetimeCulture();

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceOn
	mov	esi, eax
	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetLastTurnLifetimeCulture
	imul	esi, eax
	mov	DWORD PTR _iLHS$[ebp], esi

; 2760 : 	int iRHS = GetLastTurnInfluenceOn(ePlayer) * kOtherPlayer.GetJONSCultureEverGenerated();

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLastTurnInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetLastTurnInfluenceOn
	mov	esi, eax
	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	imul	esi, eax
	mov	DWORD PTR _iRHS$[ebp], esi

; 2761 : #endif
; 2762 : 
; 2763 : 	if (kOtherPlayer.GetCulture()->GetLastTurnLifetimeCulture() > 0 && kOtherPlayer.GetJONSCultureEverGenerated() > 0)

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetLastTurnLifetimeCulture@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetLastTurnLifetimeCulture
	test	eax, eax
	jle	SHORT $LN4@GetInfluen@4
	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	test	eax, eax
	jle	SHORT $LN4@GetInfluen@4

; 2764 : 	{
; 2765 : 		if (iLHS > iRHS)

	mov	eax, DWORD PTR _iLHS$[ebp]
	cmp	eax, DWORD PTR _iRHS$[ebp]
	jle	SHORT $LN3@GetInfluen@4

; 2766 : 		{
; 2767 : 			eRtnValue = INFLUENCE_TREND_RISING;

	mov	DWORD PTR _eRtnValue$[ebp], 1
	jmp	SHORT $LN4@GetInfluen@4
$LN3@GetInfluen@4:

; 2768 : 		}
; 2769 : 		else if (iLHS < iRHS)

	mov	ecx, DWORD PTR _iLHS$[ebp]
	cmp	ecx, DWORD PTR _iRHS$[ebp]
	jge	SHORT $LN4@GetInfluen@4

; 2770 : 		{
; 2771 : 			eRtnValue = INFLUENCE_TREND_FALLING;

	mov	DWORD PTR _eRtnValue$[ebp], -1
$LN4@GetInfluen@4:

; 2772 : 		}
; 2773 : 	}
; 2774 : 		
; 2775 : 	return eRtnValue;

	mov	eax, DWORD PTR _eRtnValue$[ebp]

; 2776 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceTrend@CvPlayerCulture@@QBE?AW4InfluenceLevelTrend@@W4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceTrend
_TEXT	ENDS
PUBLIC	?GetTurnsToInfluential@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetTurnsToInfluential
EXTRN	?GetTotalJONSCulturePerTurnTimes100@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetTotalJONSCulturePerTurnTimes100
EXTRN	?GetJONSCultureEverGeneratedTimes100@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetJONSCultureEverGeneratedTimes100
; Function compile flags: /Odtp
;	COMDAT ?GetTurnsToInfluential@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T245167 = -40						; size = 4
$T245163 = -36						; size = 4
_iCulture$225453 = -32					; size = 4
_iInfluence$225451 = -28				; size = 4
_iDivisor$225456 = -24					; size = 4
_iNumerator$225455 = -20				; size = 4
_iCultPerTurn$225454 = -16				; size = 4
_iInflPerTurn$225452 = -12				; size = 4
_iRtnValue$ = -8					; size = 4
_kOtherPlayer$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetTurnsToInfluential@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetTurnsToInfluential, COMDAT
; _this$ = ecx

; 2780 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 2781 : 	CvPlayer &kOtherPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$[ebp], eax

; 2782 : 	int iRtnValue = 999;

	mov	DWORD PTR _iRtnValue$[ebp], 999		; 000003e7H

; 2783 : 
; 2784 : 	if (GetInfluenceLevel(ePlayer) >= INFLUENCE_LEVEL_INFLUENTIAL)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	cmp	eax, 4
	jl	SHORT $LN5@GetTurnsTo

; 2785 : 	{
; 2786 : 		return 0;

	xor	eax, eax
	jmp	$LN6@GetTurnsTo
	jmp	$LN4@GetTurnsTo
$LN5@GetTurnsTo:

; 2787 : 	}
; 2788 : 	else if (GetInfluenceTrend(ePlayer) == INFLUENCE_TREND_RISING)

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceTrend@CvPlayerCulture@@QBE?AW4InfluenceLevelTrend@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceTrend
	cmp	eax, 1
	jne	$LN4@GetTurnsTo

; 2789 : 	{
; 2790 : 		int iInfluence = GetInfluenceOn(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceOn
	mov	DWORD PTR _iInfluence$225451[ebp], eax

; 2791 : 		int iInflPerTurn = GetInfluencePerTurn(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluencePerTurn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluencePerTurn
	mov	DWORD PTR _iInflPerTurn$225452[ebp], eax

; 2792 : #ifdef AUI_PLAYER_FIX_JONS_CULTURE_IS_T100
; 2793 : 		iInfluence *= 100;

	mov	edx, DWORD PTR _iInfluence$225451[ebp]
	imul	edx, 100				; 00000064H
	mov	DWORD PTR _iInfluence$225451[ebp], edx

; 2794 : 		iInflPerTurn *= 100;

	mov	eax, DWORD PTR _iInflPerTurn$225452[ebp]
	imul	eax, 100				; 00000064H
	mov	DWORD PTR _iInflPerTurn$225452[ebp], eax

; 2795 : 		int iCulture = kOtherPlayer.GetJONSCultureEverGeneratedTimes100();

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetJONSCultureEverGeneratedTimes100@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGeneratedTimes100
	mov	DWORD PTR _iCulture$225453[ebp], eax

; 2796 : 		int iCultPerTurn = kOtherPlayer.GetTotalJONSCulturePerTurnTimes100();

	mov	ecx, DWORD PTR _kOtherPlayer$[ebp]
	call	?GetTotalJONSCulturePerTurnTimes100@CvPlayer@@QBEHXZ ; CvPlayer::GetTotalJONSCulturePerTurnTimes100
	mov	DWORD PTR _iCultPerTurn$225454[ebp], eax

; 2797 : #else
; 2798 : 		int iCulture = kOtherPlayer.GetJONSCultureEverGenerated();
; 2799 : 		int iCultPerTurn = kOtherPlayer.GetTotalJONSCulturePerTurn();
; 2800 : #endif
; 2801 : 
; 2802 : 		int iNumerator = (GC.getCULTURE_LEVEL_INFLUENTIAL() * iCulture / 100) -  iInfluence;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8252
	mov	DWORD PTR $T245163[ebp], ecx
	mov	eax, DWORD PTR $T245163[ebp]
	imul	eax, DWORD PTR _iCulture$225453[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	sub	eax, DWORD PTR _iInfluence$225451[ebp]
	mov	DWORD PTR _iNumerator$225455[ebp], eax

; 2803 : 		int iDivisor = iInflPerTurn - (GC.getCULTURE_LEVEL_INFLUENTIAL() * iCultPerTurn / 100);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8252
	mov	DWORD PTR $T245167[ebp], edx
	mov	eax, DWORD PTR $T245167[ebp]
	imul	eax, DWORD PTR _iCultPerTurn$225454[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _iInflPerTurn$225452[ebp]
	sub	edx, eax
	mov	DWORD PTR _iDivisor$225456[ebp], edx

; 2804 : 
; 2805 : 		if (iDivisor > 0)

	cmp	DWORD PTR _iDivisor$225456[ebp], 0
	jle	SHORT $LN4@GetTurnsTo

; 2806 : 		{
; 2807 : 			iRtnValue = iNumerator / iDivisor;

	mov	eax, DWORD PTR _iNumerator$225455[ebp]
	cdq
	idiv	DWORD PTR _iDivisor$225456[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 2808 : 
; 2809 : 			// Round up
; 2810 : 			if (iNumerator % iDivisor != 0)

	mov	eax, DWORD PTR _iNumerator$225455[ebp]
	cdq
	idiv	DWORD PTR _iDivisor$225456[ebp]
	test	edx, edx
	je	SHORT $LN4@GetTurnsTo

; 2811 : 			{
; 2812 : 				iRtnValue++;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN4@GetTurnsTo:

; 2813 : 			}
; 2814 : 		}
; 2815 : 	}
; 2816 : 
; 2817 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
$LN6@GetTurnsTo:

; 2818 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTurnsToInfluential@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetTurnsToInfluential
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T245199 = -24						; size = 4
$T245190 = -17						; size = 1
$T245181 = -16						; size = 4
_kPlayer$225467 = -12					; size = 4
_iLoopPlayer$225463 = -8				; size = 4
_iRtnValue$ = -4					; size = 4
?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetNumCivsInfluentialOn, COMDAT
; _this$ = ecx

; 2822 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 2823 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2824 : 
; 2825 : 	for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225463[ebp], 0
	jmp	SHORT $LN5@GetNumCivs@2
$LN4@GetNumCivs@2:
	mov	eax, DWORD PTR _iLoopPlayer$225463[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$225463[ebp], eax
$LN5@GetNumCivs@2:
	cmp	DWORD PTR _iLoopPlayer$225463[ebp], 22	; 00000016H
	jge	SHORT $LN3@GetNumCivs@2

; 2826 : 	{
; 2827 : 		CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$225463[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225467[ebp], ecx

; 2828 : 		if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245181[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$225463[ebp]
	cmp	edx, DWORD PTR $T245181[ebp]
	je	SHORT $LN2@GetNumCivs@2
	mov	eax, DWORD PTR _kPlayer$225467[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T245190[ebp], cl
	movzx	edx, BYTE PTR $T245190[ebp]
	test	edx, edx
	je	SHORT $LN2@GetNumCivs@2
	mov	ecx, DWORD PTR _kPlayer$225467[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@GetNumCivs@2

; 2829 : 		{
; 2830 : 			if (GetInfluenceLevel(kPlayer.GetID()) >= INFLUENCE_LEVEL_INFLUENTIAL)

	mov	ecx, DWORD PTR _kPlayer$225467[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245199[ebp], edx
	mov	eax, DWORD PTR $T245199[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	cmp	eax, 4
	jl	SHORT $LN2@GetNumCivs@2

; 2831 : 			{
; 2832 : 				iRtnValue++;

	mov	ecx, DWORD PTR _iRtnValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iRtnValue$[ebp], ecx
$LN2@GetNumCivs@2:

; 2833 : 			}
; 2834 : 		}
; 2835 : 	}

	jmp	SHORT $LN4@GetNumCivs@2
$LN3@GetNumCivs@2:

; 2836 : 
; 2837 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2838 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetNumCivsInfluentialOn
_TEXT	ENDS
PUBLIC	?GetNumCivsToBeInfluentialOn@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumCivsToBeInfluentialOn
; Function compile flags: /Odtp
;	COMDAT ?GetNumCivsToBeInfluentialOn@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T245222 = -17						; size = 1
$T245213 = -16						; size = 4
_kPlayer$225479 = -12					; size = 4
_iLoopPlayer$225475 = -8				; size = 4
_iRtnValue$ = -4					; size = 4
?GetNumCivsToBeInfluentialOn@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetNumCivsToBeInfluentialOn, COMDAT
; _this$ = ecx

; 2842 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2843 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2844 : 
; 2845 : 	for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225475[ebp], 0
	jmp	SHORT $LN4@GetNumCivs@3
$LN3@GetNumCivs@3:
	mov	eax, DWORD PTR _iLoopPlayer$225475[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$225475[ebp], eax
$LN4@GetNumCivs@3:
	cmp	DWORD PTR _iLoopPlayer$225475[ebp], 22	; 00000016H
	jge	SHORT $LN2@GetNumCivs@3

; 2846 : 	{
; 2847 : 		CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$225475[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225479[ebp], ecx

; 2848 : 		if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245213[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$225475[ebp]
	cmp	edx, DWORD PTR $T245213[ebp]
	je	SHORT $LN1@GetNumCivs@3
	mov	eax, DWORD PTR _kPlayer$225479[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T245222[ebp], cl
	movzx	edx, BYTE PTR $T245222[ebp]
	test	edx, edx
	je	SHORT $LN1@GetNumCivs@3
	mov	ecx, DWORD PTR _kPlayer$225479[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@GetNumCivs@3

; 2849 : 		{
; 2850 : 			iRtnValue++;

	mov	ecx, DWORD PTR _iRtnValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iRtnValue$[ebp], ecx
$LN1@GetNumCivs@3:

; 2851 : 		}
; 2852 : 	}

	jmp	SHORT $LN3@GetNumCivs@3
$LN2@GetNumCivs@3:

; 2853 : 
; 2854 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2855 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCivsToBeInfluentialOn@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetNumCivsToBeInfluentialOn
_TEXT	ENDS
PUBLIC	?GetCivLowestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@_N@Z ; CvPlayerCulture::GetCivLowestInfluence
EXTRN	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsAllowsOpenBordersToTeam
EXTRN	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isAtWar
; Function compile flags: /Odtp
;	COMDAT ?GetCivLowestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T245280 = -60						; size = 4
$T245279 = -56						; size = 4
$T245270 = -52						; size = 4
$T245269 = -48						; size = 4
$T245260 = -41						; size = 1
$T245251 = -40						; size = 4
$T245239 = -36						; size = 4
_iInfluenceOn$225498 = -32				; size = 4
_iLifetimeCulture$225500 = -28				; size = 4
_iPercent$225501 = -24					; size = 4
_kTeam$225494 = -20					; size = 4
_kPlayer$225492 = -16					; size = 4
_iLoopPlayer$225488 = -12				; size = 4
_iLowestPercent$ = -8					; size = 4
_eRtnValue$ = -4					; size = 4
_bCheckOpenBorders$ = 8					; size = 1
?GetCivLowestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@_N@Z PROC ; CvPlayerCulture::GetCivLowestInfluence, COMDAT
; _this$ = ecx

; 2859 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 2860 : 	PlayerTypes eRtnValue = NO_PLAYER;

	mov	DWORD PTR _eRtnValue$[ebp], -1

; 2861 : 	int iLowestPercent = GC.getCULTURE_LEVEL_INFLUENTIAL();   // Don't want to target civs if already influential

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8252
	mov	DWORD PTR _iLowestPercent$[ebp], eax

; 2862 : 
; 2863 : 	for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225488[ebp], 0
	jmp	SHORT $LN8@GetCivLowe
$LN7@GetCivLowe:
	mov	ecx, DWORD PTR _iLoopPlayer$225488[ebp]
	add	ecx, 1
	mov	DWORD PTR _iLoopPlayer$225488[ebp], ecx
$LN8@GetCivLowe:
	cmp	DWORD PTR _iLoopPlayer$225488[ebp], 22	; 00000016H
	jge	$LN6@GetCivLowe

; 2864 : 	{
; 2865 : 		CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	edx, DWORD PTR _iLoopPlayer$225488[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225492[ebp], edx

; 2866 : 		CvTeam &kTeam = GET_TEAM(kPlayer.getTeam());

	mov	eax, DWORD PTR _kPlayer$225492[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245239[ebp], eax
	mov	edx, DWORD PTR $T245239[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$225494[ebp], edx

; 2867 : 		if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv() && !kTeam.isAtWar(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245251[ebp], edx
	mov	eax, DWORD PTR _iLoopPlayer$225488[ebp]
	cmp	eax, DWORD PTR $T245251[ebp]
	je	$LN5@GetCivLowe
	mov	ecx, DWORD PTR _kPlayer$225492[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T245260[ebp], dl
	movzx	eax, BYTE PTR $T245260[ebp]
	test	eax, eax
	je	$LN5@GetCivLowe
	mov	ecx, DWORD PTR _kPlayer$225492[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN5@GetCivLowe
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	DWORD PTR $T245269[ebp], eax
	mov	ecx, DWORD PTR $T245269[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245270[ebp], eax
	mov	eax, DWORD PTR $T245270[ebp]
	push	eax
	mov	ecx, DWORD PTR _kTeam$225494[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN5@GetCivLowe

; 2868 : 		{
; 2869 : 			if (!bCheckOpenBorders || kTeam.IsAllowsOpenBordersToTeam(m_pPlayer->getTeam()))

	movzx	edx, BYTE PTR _bCheckOpenBorders$[ebp]
	test	edx, edx
	je	SHORT $LN3@GetCivLowe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T245279[ebp], ecx
	mov	edx, DWORD PTR $T245279[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245280[ebp], eax
	mov	ecx, DWORD PTR $T245280[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kTeam$225494[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@GetCivLowe
$LN3@GetCivLowe:

; 2870 : 			{
; 2871 : 				int iInfluenceOn = GetInfluenceOn((PlayerTypes)iLoopPlayer);

	mov	eax, DWORD PTR _iLoopPlayer$225488[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceOn@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceOn
	mov	DWORD PTR _iInfluenceOn$225498[ebp], eax

; 2872 : 				int iLifetimeCulture = kPlayer.GetJONSCultureEverGenerated();

	mov	ecx, DWORD PTR _kPlayer$225492[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	mov	DWORD PTR _iLifetimeCulture$225500[ebp], eax

; 2873 : 				int iPercent = 0;

	mov	DWORD PTR _iPercent$225501[ebp], 0

; 2874 : 
; 2875 : 				if (iLifetimeCulture > 0)

	cmp	DWORD PTR _iLifetimeCulture$225500[ebp], 0
	jle	SHORT $LN2@GetCivLowe

; 2876 : 				{
; 2877 : 					iPercent = iInfluenceOn * 100 / iLifetimeCulture;

	mov	eax, DWORD PTR _iInfluenceOn$225498[ebp]
	imul	eax, 100				; 00000064H
	cdq
	idiv	DWORD PTR _iLifetimeCulture$225500[ebp]
	mov	DWORD PTR _iPercent$225501[ebp], eax
$LN2@GetCivLowe:

; 2878 : 				}
; 2879 : 
; 2880 : 				if (iPercent < iLowestPercent)

	mov	ecx, DWORD PTR _iPercent$225501[ebp]
	cmp	ecx, DWORD PTR _iLowestPercent$[ebp]
	jge	SHORT $LN5@GetCivLowe

; 2881 : 				{
; 2882 : 					iLowestPercent = iPercent;

	mov	edx, DWORD PTR _iPercent$225501[ebp]
	mov	DWORD PTR _iLowestPercent$[ebp], edx

; 2883 : 					eRtnValue = (PlayerTypes)iLoopPlayer;

	mov	eax, DWORD PTR _iLoopPlayer$225488[ebp]
	mov	DWORD PTR _eRtnValue$[ebp], eax
$LN5@GetCivLowe:

; 2884 : 				}
; 2885 : 			}
; 2886 : 		}
; 2887 : 	}

	jmp	$LN7@GetCivLowe
$LN6@GetCivLowe:

; 2888 : 
; 2889 : 	return eRtnValue;

	mov	eax, DWORD PTR _eRtnValue$[ebp]

; 2890 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCivLowestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@_N@Z ENDP ; CvPlayerCulture::GetCivLowestInfluence
_TEXT	ENDS
PUBLIC	?GetInfluenceTradeRouteScienceBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceTradeRouteScienceBonus
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceTradeRouteScienceBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv68 = -16						; size = 4
_this$ = -12						; size = 4
_eLevel$225511 = -8					; size = 4
_iRtnValue$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceTradeRouteScienceBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceTradeRouteScienceBonus, COMDAT
; _this$ = ecx

; 2896 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2897 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2898 : 
; 2899 : 	if (ePlayer < MAX_MAJOR_CIVS)

	cmp	DWORD PTR _ePlayer$[ebp], 22		; 00000016H
	jge	SHORT $LN7@GetInfluen@5

; 2900 : 	{
; 2901 : 		InfluenceLevelTypes eLevel = GetInfluenceLevel(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$225511[ebp], eax

; 2902 : 		switch (eLevel)

	mov	ecx, DWORD PTR _eLevel$225511[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 2
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 3
	ja	SHORT $LN7@GetInfluen@5
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN10@GetInfluen@5[eax*4]
$LN4@GetInfluen@5:

; 2903 : 		{
; 2904 : 		case INFLUENCE_LEVEL_FAMILIAR:
; 2905 : 			iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1

; 2906 : 			break;

	jmp	SHORT $LN7@GetInfluen@5
$LN3@GetInfluen@5:

; 2907 : 		case INFLUENCE_LEVEL_POPULAR:
; 2908 : 			iRtnValue = 2;

	mov	DWORD PTR _iRtnValue$[ebp], 2

; 2909 : 			break;

	jmp	SHORT $LN7@GetInfluen@5
$LN2@GetInfluen@5:

; 2910 : 		case INFLUENCE_LEVEL_INFLUENTIAL:
; 2911 : 			iRtnValue = 3;

	mov	DWORD PTR _iRtnValue$[ebp], 3

; 2912 : 			break;

	jmp	SHORT $LN7@GetInfluen@5
$LN1@GetInfluen@5:

; 2913 : 		case INFLUENCE_LEVEL_DOMINANT:
; 2914 : 			iRtnValue = 4;

	mov	DWORD PTR _iRtnValue$[ebp], 4
$LN7@GetInfluen@5:

; 2915 : 			break;
; 2916 : 		}
; 2917 : 	}
; 2918 : 
; 2919 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2920 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN10@GetInfluen@5:
	DD	$LN4@GetInfluen@5
	DD	$LN3@GetInfluen@5
	DD	$LN2@GetInfluen@5
	DD	$LN1@GetInfluen@5
?GetInfluenceTradeRouteScienceBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceTradeRouteScienceBonus
_TEXT	ENDS
PUBLIC	?GetInfluenceCityConquestReduction@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityConquestReduction
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceCityConquestReduction@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv68 = -16						; size = 4
_this$ = -12						; size = 4
_eLevel$225526 = -8					; size = 4
_iRtnValue$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceCityConquestReduction@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceCityConquestReduction, COMDAT
; _this$ = ecx

; 2924 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2925 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2926 : 
; 2927 : 	if (ePlayer < MAX_MAJOR_CIVS)

	cmp	DWORD PTR _ePlayer$[ebp], 22		; 00000016H
	jge	SHORT $LN7@GetInfluen@6

; 2928 : 	{
; 2929 : 		InfluenceLevelTypes eLevel = GetInfluenceLevel(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$225526[ebp], eax

; 2930 : 		switch (eLevel)

	mov	ecx, DWORD PTR _eLevel$225526[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 2
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 3
	ja	SHORT $LN7@GetInfluen@6
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN10@GetInfluen@6[eax*4]
$LN4@GetInfluen@6:

; 2931 : 		{
; 2932 : 		case INFLUENCE_LEVEL_FAMILIAR:
; 2933 : 			iRtnValue = 25;

	mov	DWORD PTR _iRtnValue$[ebp], 25		; 00000019H

; 2934 : 			break;

	jmp	SHORT $LN7@GetInfluen@6
$LN3@GetInfluen@6:

; 2935 : 		case INFLUENCE_LEVEL_POPULAR:
; 2936 : 			iRtnValue = 50;

	mov	DWORD PTR _iRtnValue$[ebp], 50		; 00000032H

; 2937 : 			break;

	jmp	SHORT $LN7@GetInfluen@6
$LN2@GetInfluen@6:

; 2938 : 		case INFLUENCE_LEVEL_INFLUENTIAL:
; 2939 : 			iRtnValue = 75;

	mov	DWORD PTR _iRtnValue$[ebp], 75		; 0000004bH

; 2940 : 			break;

	jmp	SHORT $LN7@GetInfluen@6
$LN1@GetInfluen@6:

; 2941 : 		case INFLUENCE_LEVEL_DOMINANT:
; 2942 : 			iRtnValue = 100;

	mov	DWORD PTR _iRtnValue$[ebp], 100		; 00000064H
$LN7@GetInfluen@6:

; 2943 : 			break;
; 2944 : 		}
; 2945 : 	}
; 2946 : 	
; 2947 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2948 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN10@GetInfluen@6:
	DD	$LN4@GetInfluen@6
	DD	$LN3@GetInfluen@6
	DD	$LN2@GetInfluen@6
	DD	$LN1@GetInfluen@6
?GetInfluenceCityConquestReduction@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceCityConquestReduction
_TEXT	ENDS
PUBLIC	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSurveillanceTime
EXTRN	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ:PROC ; CvMinorCivAI::GetAlly
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_eLevel$225548 = -20					; size = 4
_eAlly$225546 = -16					; size = 4
_kCityState$225544 = -12				; size = 4
_eLevel$225541 = -8					; size = 4
_iRtnValue$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceSurveillanceTime, COMDAT
; _this$ = ecx

; 2952 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2953 : 	int iRtnValue = 3;

	mov	DWORD PTR _iRtnValue$[ebp], 3

; 2954 : 
; 2955 : 	if (ePlayer < MAX_MAJOR_CIVS)

	cmp	DWORD PTR _ePlayer$[ebp], 22		; 00000016H
	jge	SHORT $LN9@GetInfluen@7

; 2956 : 	{
; 2957 : 		InfluenceLevelTypes eLevel = GetInfluenceLevel(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$225541[ebp], eax

; 2958 : 
; 2959 : 		if (eLevel >= INFLUENCE_LEVEL_FAMILIAR)

	cmp	DWORD PTR _eLevel$225541[ebp], 2
	jl	SHORT $LN5@GetInfluen@7

; 2960 : 		{
; 2961 : 			iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1
$LN5@GetInfluen@7:

; 2962 : 		}
; 2963 : 	}
; 2964 : 	else

	jmp	SHORT $LN4@GetInfluen@7

; 2965 : 	{
; 2966 : 		// Have a major power ally?
; 2967 : 		CvPlayer &kCityState = GET_PLAYER(ePlayer);

$LN9@GetInfluen@7:
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityState$225544[ebp], ecx

; 2968 : 		if (kCityState.isMinorCiv())

	mov	ecx, DWORD PTR _kCityState$225544[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@GetInfluen@7

; 2969 : 		{
; 2970 : 			PlayerTypes eAlly = kCityState.GetMinorCivAI()->GetAlly();

	mov	ecx, DWORD PTR _kCityState$225544[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eAlly$225546[ebp], eax

; 2971 : 			if (eAlly != NO_PLAYER)

	cmp	DWORD PTR _eAlly$225546[ebp], -1
	je	SHORT $LN4@GetInfluen@7

; 2972 : 			{
; 2973 : 				InfluenceLevelTypes eLevel = GetInfluenceLevel(eAlly);

	mov	eax, DWORD PTR _eAlly$225546[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$225548[ebp], eax

; 2974 : 				if (eLevel >= INFLUENCE_LEVEL_FAMILIAR)

	cmp	DWORD PTR _eLevel$225548[ebp], 2
	jl	SHORT $LN4@GetInfluen@7

; 2975 : 				{
; 2976 : 					iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1
$LN4@GetInfluen@7:

; 2977 : 				}
; 2978 : 			}
; 2979 : 		}
; 2980 : 	}
; 2981 : 
; 2982 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 2983 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceSurveillanceTime
_TEXT	ENDS
PUBLIC	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv82 = -24						; size = 4
_this$ = -20						; size = 4
_eLevel$225559 = -16					; size = 4
_eAlly$225557 = -12					; size = 4
_iRtnValue$ = -8					; size = 4
_kCityState$ = -4					; size = 4
_eCityStatePlayer$ = 8					; size = 4
?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus, COMDAT
; _this$ = ecx

; 2987 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2988 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 2989 : 
; 2990 : 	// Have a major power ally?
; 2991 : 	CvPlayer &kCityState = GET_PLAYER(eCityStatePlayer);

	mov	eax, DWORD PTR _eCityStatePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityState$[ebp], eax

; 2992 : 	if (kCityState.isMinorCiv())

	mov	ecx, DWORD PTR _kCityState$[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@GetInfluen@8

; 2993 : 	{
; 2994 : 		PlayerTypes eAlly = kCityState.GetMinorCivAI()->GetAlly();

	mov	ecx, DWORD PTR _kCityState$[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eAlly$225557[ebp], eax

; 2995 : 		if (eAlly != NO_PLAYER)

	cmp	DWORD PTR _eAlly$225557[ebp], -1
	je	SHORT $LN7@GetInfluen@8

; 2996 : 		{
; 2997 : 			InfluenceLevelTypes eLevel = GetInfluenceLevel(eAlly);

	mov	edx, DWORD PTR _eAlly$225557[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$225559[ebp], eax

; 2998 : 			switch (eLevel)

	mov	eax, DWORD PTR _eLevel$225559[ebp]
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 3
	je	SHORT $LN3@GetInfluen@8
	cmp	DWORD PTR tv82[ebp], 4
	je	SHORT $LN2@GetInfluen@8
	cmp	DWORD PTR tv82[ebp], 5
	je	SHORT $LN1@GetInfluen@8
	jmp	SHORT $LN7@GetInfluen@8
$LN3@GetInfluen@8:

; 2999 : 			{
; 3000 : 			case INFLUENCE_LEVEL_POPULAR:
; 3001 : 				iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1

; 3002 : 				break;

	jmp	SHORT $LN7@GetInfluen@8
$LN2@GetInfluen@8:

; 3003 : 			case INFLUENCE_LEVEL_INFLUENTIAL:
; 3004 : 				iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1

; 3005 : 				break;

	jmp	SHORT $LN7@GetInfluen@8
$LN1@GetInfluen@8:

; 3006 : 			case INFLUENCE_LEVEL_DOMINANT:
; 3007 : 				iRtnValue = 2;

	mov	DWORD PTR _iRtnValue$[ebp], 2
$LN7@GetInfluen@8:

; 3008 : 				break;
; 3009 : 			}
; 3010 : 		}
; 3011 : 	}
; 3012 : 
; 3013 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 3014 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
_TEXT	ENDS
PUBLIC	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
; Function compile flags: /Odtp
;	COMDAT ?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv67 = -16						; size = 4
_this$ = -12						; size = 4
_eLevel$ = -8						; size = 4
_iRtnValue$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus, COMDAT
; _this$ = ecx

; 3018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3019 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 3020 : 
; 3021 : 	InfluenceLevelTypes eLevel = GetInfluenceLevel(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _eLevel$[ebp], eax

; 3022 : 	switch (eLevel)

	mov	ecx, DWORD PTR _eLevel$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 4
	je	SHORT $LN2@GetInfluen@9
	cmp	DWORD PTR tv67[ebp], 5
	je	SHORT $LN1@GetInfluen@9
	jmp	SHORT $LN3@GetInfluen@9
$LN2@GetInfluen@9:

; 3023 : 	{
; 3024 : 	case INFLUENCE_LEVEL_INFLUENTIAL:
; 3025 : 		iRtnValue = 1;

	mov	DWORD PTR _iRtnValue$[ebp], 1

; 3026 : 		break;

	jmp	SHORT $LN3@GetInfluen@9
$LN1@GetInfluen@9:

; 3027 : 	case INFLUENCE_LEVEL_DOMINANT:
; 3028 : 		iRtnValue = 2;

	mov	DWORD PTR _iRtnValue$[ebp], 2
$LN3@GetInfluen@9:

; 3029 : 		break;
; 3030 : 	}
; 3031 : 
; 3032 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 3033 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
_TEXT	ENDS
PUBLIC	??_C@_0BM@PMOJAPDL@TXT_KEY_SPY_BONUS_MAJOR_CIV?$AA@ ; `string'
PUBLIC	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z	; GetLocalizedText<int>
PUBLIC	??_C@_0BN@KBGLGHHO@TXT_KEY_SPY_BONUS_CITY_STATE?$AA@ ; `string'
PUBLIC	??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ; GetLocalizedText<CvString,CvString>
PUBLIC	??_C@_0BH@FBJOKAFN@TXT_KEY_EO_SPY_RANK_TT?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSpyRankTooltip
;	COMDAT ??_C@_0BM@PMOJAPDL@TXT_KEY_SPY_BONUS_MAJOR_CIV?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BM@PMOJAPDL@TXT_KEY_SPY_BONUS_MAJOR_CIV?$AA@ DB 'TXT_KEY_SPY_BONUS'
	DB	'_MAJOR_CIV', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KBGLGHHO@TXT_KEY_SPY_BONUS_CITY_STATE?$AA@
CONST	SEGMENT
??_C@_0BN@KBGLGHHO@TXT_KEY_SPY_BONUS_CITY_STATE?$AA@ DB 'TXT_KEY_SPY_BONU'
	DB	'S_CITY_STATE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FBJOKAFN@TXT_KEY_EO_SPY_RANK_TT?$AA@
CONST	SEGMENT
??_C@_0BH@FBJOKAFN@TXT_KEY_EO_SPY_RANK_TT?$AA@ DB 'TXT_KEY_EO_SPY_RANK_TT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z
_TEXT	SEGMENT
tv165 = -132						; size = 4
tv189 = -128						; size = 4
tv163 = -124						; size = 4
tv66 = -120						; size = 4
_this$ = -116						; size = 4
$T245310 = -112						; size = 4
$T245303 = -108						; size = 28
$T245302 = -80						; size = 28
_iRankBonus$225598 = -52				; size = 4
_kOtherPlayer$225597 = -48				; size = 4
_szRtnValue$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szName$ = 12						; size = 28
_szRank$ = 40						; size = 28
_ePlayer$ = 68						; size = 4
?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetInfluenceSpyRankTooltip, COMDAT
; _this$ = ecx

; 3037 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T245310[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3038 : 	CvString szRtnValue = GetLocalizedText("TXT_KEY_EO_SPY_RANK_TT", szName, szRank);

	lea	eax, DWORD PTR _szRank$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@FBJOKAFN@TXT_KEY_EO_SPY_RANK_TT?$AA@
	lea	edx, DWORD PTR _szRtnValue$[ebp]
	push	edx
	call	??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ; GetLocalizedText<CvString,CvString>
	add	esp, 16					; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 3039 : 
; 3040 : 	if (ePlayer != NO_PLAYER)

	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	$LN5@GetInfluen@10

; 3041 : 	{
; 3042 : 		CvPlayer &kOtherPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOtherPlayer$225597[ebp], eax

; 3043 : 
; 3044 : 		int iRankBonus = 0;

	mov	DWORD PTR _iRankBonus$225598[ebp], 0

; 3045 : 		if (kOtherPlayer.isMinorCiv())

	mov	ecx, DWORD PTR _kOtherPlayer$225597[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetInfluen@10

; 3046 : 		{
; 3047 : 			iRankBonus = GetInfluenceCityStateSpyRankBonus(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	mov	DWORD PTR _iRankBonus$225598[ebp], eax

; 3048 : 
; 3049 : 			if (iRankBonus > 0)

	cmp	DWORD PTR _iRankBonus$225598[ebp], 0
	jle	SHORT $LN3@GetInfluen@10

; 3050 : 			{
; 3051 : 				szRtnValue += GetLocalizedText("TXT_KEY_SPY_BONUS_CITY_STATE", iRankBonus);

	mov	eax, DWORD PTR _iRankBonus$225598[ebp]
	push	eax
	push	OFFSET ??_C@_0BN@KBGLGHHO@TXT_KEY_SPY_BONUS_CITY_STATE?$AA@
	lea	ecx, DWORD PTR $T245302[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv163[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T245302[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@GetInfluen@10:

; 3052 : 			}
; 3053 : 		}
; 3054 : 		else

	jmp	SHORT $LN5@GetInfluen@10
$LN4@GetInfluen@10:

; 3055 : 		{
; 3056 : 			iRankBonus = GetInfluenceMajorCivSpyRankBonus(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
	mov	DWORD PTR _iRankBonus$225598[ebp], eax

; 3057 : 
; 3058 : 			if (iRankBonus > 0)

	cmp	DWORD PTR _iRankBonus$225598[ebp], 0
	jle	SHORT $LN5@GetInfluen@10

; 3059 : 			{
; 3060 : 				szRtnValue += GetLocalizedText("TXT_KEY_SPY_BONUS_MAJOR_CIV", iRankBonus);

	mov	edx, DWORD PTR _iRankBonus$225598[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@PMOJAPDL@TXT_KEY_SPY_BONUS_MAJOR_CIV?$AA@
	lea	eax, DWORD PTR $T245303[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv189[ebp], eax
	mov	ecx, DWORD PTR tv189[ebp]
	mov	DWORD PTR tv165[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv165[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T245303[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@GetInfluen@10:

; 3061 : 			}
; 3062 : 		}
; 3063 : 	}
; 3064 : 
; 3065 : 	return szRtnValue;

	lea	eax, DWORD PTR _szRtnValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T245310[ebp]
	or	ecx, 1
	mov	DWORD PTR $T245310[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _szName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szRank$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3066 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _szRank$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR _szName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$2:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$3:
	lea	ecx, DWORD PTR $T245302[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$4:
	lea	ecx, DWORD PTR $T245303[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z$5:
	mov	eax, DWORD PTR $T245310[ebp]
	and	eax, 1
	je	$LN14@GetInfluen@10
	and	DWORD PTR $T245310[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN14@GetInfluen@10:
	ret	0
__ehhandler$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetInfluenceSpyRankTooltip@CvPlayerCulture@@QAE?AVCvString@@V2@0W4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetInfluenceSpyRankTooltip
PUBLIC	?GetTourism@CvPlayerCulture@@QAEHXZ		; CvPlayerCulture::GetTourism
; Function compile flags: /Odtp
;	COMDAT ?GetTourism@CvPlayerCulture@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iRtnValue$ = -12					; size = 4
_pCity$ = -8						; size = 4
_iLoop$ = -4						; size = 4
?GetTourism@CvPlayerCulture@@QAEHXZ PROC		; CvPlayerCulture::GetTourism, COMDAT
; _this$ = ecx

; 3074 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3075 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 3076 : 
; 3077 : 	CvCity *pCity;
; 3078 : 	int iLoop;
; 3079 : 	for(pCity = m_pPlayer->firstCity(&iLoop); pCity != NULL; pCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$[ebp], eax
	jmp	SHORT $LN3@GetTourism
$LN2@GetTourism:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$[ebp], eax
$LN3@GetTourism:
	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN1@GetTourism

; 3080 : 	{
; 3081 : 		iRtnValue += pCity->GetCityCulture()->GetBaseTourism();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetBaseTourism@CvCityCulture@@QAEHXZ	; CvCityCulture::GetBaseTourism
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 3082 : 	}

	jmp	SHORT $LN2@GetTourism
$LN1@GetTourism:

; 3083 : 
; 3084 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 3085 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTourism@CvPlayerCulture@@QAEHXZ ENDP		; CvPlayerCulture::GetTourism
_TEXT	ENDS
PUBLIC	?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierSharedReligion
PUBLIC	?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierTradeRoute
PUBLIC	?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierOpenBorders
PUBLIC	?GetTourismModifierWith@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetTourismModifierWith
EXTRN	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z:PROC ; CvPlayerReligions::HasReligionInMostCities
EXTRN	?GetReligionInMostCities@CvPlayerReligions@@QBE?AW4ReligionTypes@@XZ:PROC ; CvPlayerReligions::GetReligionInMostCities
EXTRN	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ:PROC ; CvPlayer::GetReligions
EXTRN	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ:PROC ; CvPlayer::GetPlayerTraits
EXTRN	?isGoldenAge@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isGoldenAge
EXTRN	?GetMilitaryMight@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetMilitaryMight
EXTRN	?GetExcessHappiness@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetExcessHappiness
EXTRN	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z:PROC ; CvPlayerEspionage::IsMyDiplomatVisitingThem
EXTRN	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ:PROC ; CvPlayer::GetEspionage
EXTRN	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z:PROC ; CvGameTrade::IsPlayerConnectedToPlayer
EXTRN	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ:PROC ; CvGame::GetGameTrade
; Function compile flags: /Odtp
;	COMDAT ?GetTourismModifierWith@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T245417 = -108						; size = 4
$T245416 = -104						; size = 4
$T245412 = -100						; size = 4
$T245411 = -96						; size = 4
$T245407 = -92						; size = 4
$T245403 = -88						; size = 4
$T245394 = -84						; size = 4
$T245390 = -80						; size = 4
$T245386 = -76						; size = 4
$T245382 = -72						; size = 4
$T245373 = -68						; size = 4
$T245372 = -64						; size = 4
$T245360 = -60						; size = 4
_iPlayerLoop$225643 = -56				; size = 4
_totalEnemies$225640 = -52				; size = 4
_rank$225639 = -48					; size = 4
_eLoopPlayer$225642 = -44				; size = 4
_myStrength$225641 = -40				; size = 4
_eTheirIdeology$ = -36					; size = 4
_eMyIdeology$ = -32					; size = 4
_iSharedIdeologyMod$ = -28				; size = 4
_iLessHappyMod$ = -24					; size = 4
_kTeam$ = -20						; size = 4
_ePlayerReligion$ = -16					; size = 4
_iCommonFoeMod$ = -12					; size = 4
_iMultiplier$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetTourismModifierWith@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetTourismModifierWith, COMDAT
; _this$ = ecx

; 3089 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3090 : 	int iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 3091 : 	CvPlayer &kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 3092 : 	CvTeam &kTeam = GET_TEAM(kPlayer.getTeam());

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245360[ebp], eax
	mov	eax, DWORD PTR $T245360[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$[ebp], eax

; 3093 : 	PolicyBranchTypes eMyIdeology = m_pPlayer->GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eMyIdeology$[ebp], eax

; 3094 : 	PolicyBranchTypes eTheirIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eTheirIdeology$[ebp], eax

; 3095 : 
; 3096 : 	// Open borders with this player
; 3097 : 	if (kTeam.IsAllowsOpenBordersToTeam(m_pPlayer->getTeam()))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	DWORD PTR $T245372[ebp], eax
	mov	ecx, DWORD PTR $T245372[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245373[ebp], eax
	mov	eax, DWORD PTR $T245373[ebp]
	push	eax
	mov	ecx, DWORD PTR _kTeam$[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@GetTourism@2

; 3098 : 	{
; 3099 : 		iMultiplier += GetTourismModifierOpenBorders();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierOpenBorders
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax

; 3100 : 	}
; 3101 : 
; 3102 : 	// Trade route to one of this player's cities from here
; 3103 : 	if (GC.getGame().GetGameTrade()->IsPlayerConnectedToPlayer(m_pPlayer->GetID(), ePlayer))

$LN34@GetTourism@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245382[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245386[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245382[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T245386[ebp]
	call	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ ; CvGame::GetGameTrade
	mov	ecx, eax
	call	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z ; CvGameTrade::IsPlayerConnectedToPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@GetTourism@2

; 3104 : 	{
; 3105 : 		iMultiplier += GetTourismModifierTradeRoute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierTradeRoute
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN16@GetTourism@2:

; 3106 : 	}
; 3107 : 
; 3108 : 	if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN15@GetTourism@2
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	SHORT $LN15@GetTourism@2
	mov	eax, DWORD PTR _eMyIdeology$[ebp]
	cmp	eax, DWORD PTR _eTheirIdeology$[ebp]
	je	SHORT $LN15@GetTourism@2

; 3109 : 	{
; 3110 : 		iMultiplier += GC.getTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8228
	mov	DWORD PTR $T245390[ebp], ecx
	mov	edx, DWORD PTR _iMultiplier$[ebp]
	add	edx, DWORD PTR $T245390[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx

; 3111 : 
; 3112 : 		if (m_pPlayer->GetEspionage()->IsMyDiplomatVisitingThem(ePlayer))

	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@GetTourism@2

; 3113 : 		{
; 3114 : 			iMultiplier += GC.getTOURISM_MODIFIER_DIPLOMAT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8232
	mov	DWORD PTR $T245394[ebp], eax
	mov	ecx, DWORD PTR _iMultiplier$[ebp]
	add	ecx, DWORD PTR $T245394[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
$LN15@GetTourism@2:

; 3115 : 		}
; 3116 : 	}
; 3117 : 
; 3118 : 	int iLessHappyMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_LESS_HAPPY);

	push	29					; 0000001dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iLessHappyMod$[ebp], eax

; 3119 : 	if (iLessHappyMod > 0)

	cmp	DWORD PTR _iLessHappyMod$[ebp], 0
	jle	SHORT $LN13@GetTourism@2

; 3120 : 	{
; 3121 : 		if (m_pPlayer->GetExcessHappiness() > kPlayer.GetExcessHappiness())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	mov	esi, eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	cmp	esi, eax
	jle	SHORT $LN13@GetTourism@2

; 3122 : 		{
; 3123 : 			iMultiplier += iLessHappyMod;

	mov	ecx, DWORD PTR _iMultiplier$[ebp]
	add	ecx, DWORD PTR _iLessHappyMod$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
$LN13@GetTourism@2:

; 3124 : 		}
; 3125 : 	}
; 3126 : 	int iCommonFoeMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_COMMON_FOE);

	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax

; 3127 : 	if (iCommonFoeMod > 0)

	cmp	DWORD PTR _iCommonFoeMod$[ebp], 0
	jle	$LN11@GetTourism@2

; 3128 : 	{
; 3129 : 		// NQMP GJS - new Cult of Personality BEGIN
; 3130 : 		int rank = 0;

	mov	DWORD PTR _rank$225639[ebp], 0

; 3131 : 		int totalEnemies = 0;

	mov	DWORD PTR _totalEnemies$225640[ebp], 0

; 3132 : 		int myStrength = m_pPlayer->GetMilitaryMight();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	mov	DWORD PTR _myStrength$225641[ebp], eax

; 3133 : 
; 3134 : 		PlayerTypes eLoopPlayer;
; 3135 : 		for (int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$225643[ebp], 0
	jmp	SHORT $LN10@GetTourism@2
$LN9@GetTourism@2:
	mov	ecx, DWORD PTR _iPlayerLoop$225643[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPlayerLoop$225643[ebp], ecx
$LN10@GetTourism@2:
	cmp	DWORD PTR _iPlayerLoop$225643[ebp], 22	; 00000016H
	jge	SHORT $LN8@GetTourism@2

; 3136 : 		{
; 3137 : 			eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	edx, DWORD PTR _iPlayerLoop$225643[ebp]
	mov	DWORD PTR _eLoopPlayer$225642[ebp], edx

; 3138 : 			if (eLoopPlayer != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245403[ebp], edx
	mov	eax, DWORD PTR _eLoopPlayer$225642[ebp]
	cmp	eax, DWORD PTR $T245403[ebp]
	je	SHORT $LN7@GetTourism@2
	push	0
	mov	ecx, DWORD PTR _eLoopPlayer$225642[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@GetTourism@2

; 3139 : 			{
; 3140 : 				totalEnemies++;

	mov	ecx, DWORD PTR _totalEnemies$225640[ebp]
	add	ecx, 1
	mov	DWORD PTR _totalEnemies$225640[ebp], ecx

; 3141 : 				if (GET_PLAYER(eLoopPlayer).GetMilitaryMight() > myStrength)

	mov	edx, DWORD PTR _eLoopPlayer$225642[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T245407[ebp], edx
	mov	ecx, DWORD PTR $T245407[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	cmp	eax, DWORD PTR _myStrength$225641[ebp]
	jle	SHORT $LN7@GetTourism@2

; 3142 : 				{
; 3143 : 					rank++;

	mov	eax, DWORD PTR _rank$225639[ebp]
	add	eax, 1
	mov	DWORD PTR _rank$225639[ebp], eax
$LN7@GetTourism@2:

; 3144 : 				}
; 3145 : 			}
; 3146 : 		}

	jmp	$LN9@GetTourism@2
$LN8@GetTourism@2:

; 3147 : 
; 3148 : 		// divide the tourism boost into chunks, so that lowest player gets 0%, highest gets 100%, and the rest are evenly distributed in between
; 3149 : 		// so for example in a 6 player game, based on the player being 6th/5th/4th/3rd/2nd/1st in military strength they get 0%/20%/40%/60%/80%/100% boost
; 3150 : 		if (totalEnemies > 0)

	cmp	DWORD PTR _totalEnemies$225640[ebp], 0
	jle	SHORT $LN11@GetTourism@2

; 3151 : 		{
; 3152 : 			iCommonFoeMod = iCommonFoeMod * (totalEnemies - rank) / totalEnemies;

	mov	ecx, DWORD PTR _totalEnemies$225640[ebp]
	sub	ecx, DWORD PTR _rank$225639[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iCommonFoeMod$[ebp]
	cdq
	idiv	DWORD PTR _totalEnemies$225640[ebp]
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax

; 3153 : 			iMultiplier += iCommonFoeMod;

	mov	edx, DWORD PTR _iMultiplier$[ebp]
	add	edx, DWORD PTR _iCommonFoeMod$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx
$LN11@GetTourism@2:

; 3154 : 		}
; 3155 : 		/*
; 3156 : 		// old code
; 3157 : 		PlayerTypes eLoopPlayer;
; 3158 : 		for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)
; 3159 : 		{
; 3160 : 			eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 3161 : 
; 3162 : 			if (eLoopPlayer != ePlayer && eLoopPlayer != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))
; 3163 : 			{
; 3164 : 				// Are they at war with me too?
; 3165 : 				if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()) && GET_TEAM(kPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()))
; 3166 : 				{
; 3167 : 					iMultiplier += iCommonFoeMod;
; 3168 : 				}
; 3169 : 			}
; 3170 : 		}
; 3171 : 		*/
; 3172 : 		// NQMP GJS - new Cult of Personality END
; 3173 : 	}
; 3174 : 	int iSharedIdeologyMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_SHARED_IDEOLOGY);

	push	30					; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iSharedIdeologyMod$[ebp], eax

; 3175 : 	if (iSharedIdeologyMod > 0)

	cmp	DWORD PTR _iSharedIdeologyMod$[ebp], 0
	jle	SHORT $LN4@GetTourism@2

; 3176 : 	{
; 3177 : 		if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology == eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN4@GetTourism@2
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	SHORT $LN4@GetTourism@2
	mov	ecx, DWORD PTR _eMyIdeology$[ebp]
	cmp	ecx, DWORD PTR _eTheirIdeology$[ebp]
	jne	SHORT $LN4@GetTourism@2

; 3178 : 		{
; 3179 : 			iMultiplier += iSharedIdeologyMod;

	mov	edx, DWORD PTR _iMultiplier$[ebp]
	add	edx, DWORD PTR _iSharedIdeologyMod$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx
$LN4@GetTourism@2:

; 3180 : 		}
; 3181 : 	}
; 3182 : 
; 3183 : 	if (m_pPlayer->isGoldenAge() && m_pPlayer->GetPlayerTraits()->GetGoldenAgeTourismModifier())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?isGoldenAge@CvPlayer@@QBE_NXZ		; CvPlayer::isGoldenAge
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetTourism@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T245411[ebp], eax
	mov	eax, DWORD PTR $T245411[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR $T245412[ebp], ecx
	cmp	DWORD PTR $T245412[ebp], 0
	je	SHORT $LN2@GetTourism@2

; 3184 : 	{
; 3185 : 		iMultiplier += m_pPlayer->GetPlayerTraits()->GetGoldenAgeTourismModifier();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T245416[ebp], eax
	mov	eax, DWORD PTR $T245416[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR $T245417[ebp], ecx
	mov	edx, DWORD PTR _iMultiplier$[ebp]
	add	edx, DWORD PTR $T245417[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx
$LN2@GetTourism@2:

; 3186 : 	}
; 3187 : 
; 3188 : 	ReligionTypes ePlayerReligion = m_pPlayer->GetReligions()->GetReligionInMostCities();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?GetReligionInMostCities@CvPlayerReligions@@QBE?AW4ReligionTypes@@XZ ; CvPlayerReligions::GetReligionInMostCities
	mov	DWORD PTR _ePlayerReligion$[ebp], eax

; 3189 : 	if (ePlayerReligion != NO_RELIGION && kPlayer.GetReligions()->HasReligionInMostCities(ePlayerReligion))

	cmp	DWORD PTR _ePlayerReligion$[ebp], -1
	je	SHORT $LN1@GetTourism@2
	mov	ecx, DWORD PTR _ePlayerReligion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z ; CvPlayerReligions::HasReligionInMostCities
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetTourism@2

; 3190 : 	{
; 3191 : 		iMultiplier += GetTourismModifierSharedReligion();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierSharedReligion
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN1@GetTourism@2:

; 3192 : 	}
; 3193 : 
; 3194 : 	return iMultiplier;

	mov	eax, DWORD PTR _iMultiplier$[ebp]

; 3195 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTourismModifierWith@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetTourismModifierWith
_TEXT	ENDS
PUBLIC	??_C@_0BG@LALIDOFE@?$FLCOLOR_NEGATIVE_TEXT?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CP@BNFOJDPF@TXT_KEY_CO_PLAYER_TOURISM_DIFFER@ ; `string'
PUBLIC	??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@	; `string'
PUBLIC	??_C@_0CD@NNAONCMJ@TXT_KEY_CO_PLAYER_TOURISM_CARNIV@ ; `string'
PUBLIC	??_C@_0CF@DIOLIMGB@TXT_KEY_CO_PLAYER_TOURISM_LESS_H@ ; `string'
PUBLIC	??_C@_0CF@FLCKLFPH@TXT_KEY_CO_PLAYER_TOURISM_COMMON@ ; `string'
PUBLIC	??_C@_0CK@EMBEPNKK@TXT_KEY_CO_PLAYER_TOURISM_SHARED@ ; `string'
PUBLIC	??_C@_0CF@HCELBAGF@TXT_KEY_CO_PLAYER_TOURISM_PROPAG@ ; `string'
PUBLIC	??_C@_0CI@HBDEGGEI@TXT_KEY_CO_PLAYER_TOURISM_RELIGI@ ; `string'
PUBLIC	??_C@_0CG@MGFGKJIB@TXT_KEY_CO_PLAYER_TOURISM_TRADE_@ ; `string'
PUBLIC	??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@		; `string'
PUBLIC	??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CH@NILMLEEG@TXT_KEY_CO_PLAYER_TOURISM_OPEN_B@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetTourismModifierWithTooltip
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
;	COMDAT ??_C@_0BG@LALIDOFE@?$FLCOLOR_NEGATIVE_TEXT?$FN?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BG@LALIDOFE@?$FLCOLOR_NEGATIVE_TEXT?$FN?$AA@ DB '[COLOR_NEGATIVE_T'
	DB	'EXT]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BNFOJDPF@TXT_KEY_CO_PLAYER_TOURISM_DIFFER@
CONST	SEGMENT
??_C@_0CP@BNFOJDPF@TXT_KEY_CO_PLAYER_TOURISM_DIFFER@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_DIFFERENT_IDEOLOGIES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@
CONST	SEGMENT
??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@ DB '[COLOR_GREY]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@NNAONCMJ@TXT_KEY_CO_PLAYER_TOURISM_CARNIV@
CONST	SEGMENT
??_C@_0CD@NNAONCMJ@TXT_KEY_CO_PLAYER_TOURISM_CARNIV@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_CARNIVAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DIOLIMGB@TXT_KEY_CO_PLAYER_TOURISM_LESS_H@
CONST	SEGMENT
??_C@_0CF@DIOLIMGB@TXT_KEY_CO_PLAYER_TOURISM_LESS_H@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_LESS_HAPPY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FLCKLFPH@TXT_KEY_CO_PLAYER_TOURISM_COMMON@
CONST	SEGMENT
??_C@_0CF@FLCKLFPH@TXT_KEY_CO_PLAYER_TOURISM_COMMON@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_COMMON_FOE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EMBEPNKK@TXT_KEY_CO_PLAYER_TOURISM_SHARED@
CONST	SEGMENT
??_C@_0CK@EMBEPNKK@TXT_KEY_CO_PLAYER_TOURISM_SHARED@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_SHARED_IDEOLOGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HCELBAGF@TXT_KEY_CO_PLAYER_TOURISM_PROPAG@
CONST	SEGMENT
??_C@_0CF@HCELBAGF@TXT_KEY_CO_PLAYER_TOURISM_PROPAG@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_PROPAGANDA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HBDEGGEI@TXT_KEY_CO_PLAYER_TOURISM_RELIGI@
CONST	SEGMENT
??_C@_0CI@HBDEGGEI@TXT_KEY_CO_PLAYER_TOURISM_RELIGI@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_RELIGION_NOTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MGFGKJIB@TXT_KEY_CO_PLAYER_TOURISM_TRADE_@
CONST	SEGMENT
??_C@_0CG@MGFGKJIB@TXT_KEY_CO_PLAYER_TOURISM_TRADE_@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_TRADE_ROUTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
CONST	SEGMENT
??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@ DB '[ENDCOLOR]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
CONST	SEGMENT
??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@ DB '[COLOR_POSITIVE_T'
	DB	'EXT]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NILMLEEG@TXT_KEY_CO_PLAYER_TOURISM_OPEN_B@
CONST	SEGMENT
??_C@_0CH@NILMLEEG@TXT_KEY_CO_PLAYER_TOURISM_OPEN_B@ DB 'TXT_KEY_CO_PLAYE'
	DB	'R_TOURISM_OPEN_BORDERS', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z DD 019930522H
	DD	029H
	DD	FLAT:__unwindtable$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$40
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$7
	DD	08H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$8
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$10
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$11
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$13
	DD	0eH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$14
	DD	0fH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$16
	DD	011H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$17
	DD	012H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$18
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$19
	DD	014H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$20
	DD	015H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$21
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$22
	DD	017H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$23
	DD	018H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$24
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$25
	DD	01aH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$26
	DD	01bH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$27
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$28
	DD	01dH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$29
	DD	01eH
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$30
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$31
	DD	020H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$32
	DD	021H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$33
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$34
	DD	023H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$35
	DD	024H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$36
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$37
	DD	026H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$38
	DD	027H
	DD	FLAT:__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$39
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
tv776 = -1580						; size = 4
tv969 = -1576						; size = 4
tv774 = -1572						; size = 4
tv968 = -1568						; size = 4
tv772 = -1564						; size = 4
tv967 = -1560						; size = 4
tv770 = -1556						; size = 4
tv966 = -1552						; size = 4
tv768 = -1548						; size = 4
tv965 = -1544						; size = 4
tv766 = -1540						; size = 4
tv964 = -1536						; size = 4
tv764 = -1532						; size = 4
tv963 = -1528						; size = 4
tv762 = -1524						; size = 4
tv962 = -1520						; size = 4
tv760 = -1516						; size = 4
tv961 = -1512						; size = 4
tv758 = -1508						; size = 4
tv960 = -1504						; size = 4
tv756 = -1500						; size = 4
tv959 = -1496						; size = 4
tv754 = -1492						; size = 4
tv958 = -1488						; size = 4
tv752 = -1484						; size = 4
tv957 = -1480						; size = 4
tv750 = -1476						; size = 4
tv956 = -1472						; size = 4
tv748 = -1468						; size = 4
tv955 = -1464						; size = 4
tv746 = -1460						; size = 4
tv954 = -1456						; size = 4
tv744 = -1452						; size = 4
tv953 = -1448						; size = 4
tv742 = -1444						; size = 4
tv952 = -1440						; size = 4
tv740 = -1436						; size = 4
tv951 = -1432						; size = 4
tv738 = -1428						; size = 4
tv950 = -1424						; size = 4
tv736 = -1420						; size = 4
tv949 = -1416						; size = 4
tv734 = -1412						; size = 4
tv948 = -1408						; size = 4
tv732 = -1404						; size = 4
tv947 = -1400						; size = 4
tv730 = -1396						; size = 4
tv946 = -1392						; size = 4
tv728 = -1388						; size = 4
tv945 = -1384						; size = 4
tv726 = -1380						; size = 4
tv944 = -1376						; size = 4
tv724 = -1372						; size = 4
tv943 = -1368						; size = 4
tv722 = -1364						; size = 4
tv942 = -1360						; size = 4
tv720 = -1356						; size = 4
tv941 = -1352						; size = 4
tv718 = -1348						; size = 4
tv940 = -1344						; size = 4
tv716 = -1340						; size = 4
tv939 = -1336						; size = 4
tv714 = -1332						; size = 4
tv938 = -1328						; size = 4
tv712 = -1324						; size = 4
tv937 = -1320						; size = 4
tv710 = -1316						; size = 4
tv936 = -1312						; size = 4
tv708 = -1308						; size = 4
tv935 = -1304						; size = 4
tv706 = -1300						; size = 4
tv934 = -1296						; size = 4
tv704 = -1292						; size = 4
tv781 = -1288						; size = 4
tv702 = -1284						; size = 4
tv787 = -1280						; size = 4
tv700 = -1276						; size = 4
tv918 = -1272						; size = 4
tv789 = -1268						; size = 4
_this$ = -1264						; size = 4
$T245650 = -1260					; size = 4
$T245634 = -1256					; size = 4
$T245630 = -1252					; size = 4
$T245617 = -1248					; size = 4
$T245616 = -1244					; size = 4
$T245603 = -1240					; size = 4
$T245602 = -1236					; size = 4
$T245598 = -1232					; size = 4
$T245597 = -1228					; size = 4
$T245585 = -1224					; size = 4
$T245581 = -1220					; size = 4
$T245564 = -1216					; size = 4
$T245552 = -1212					; size = 4
$T245548 = -1208					; size = 4
$T245535 = -1204					; size = 4
$T245534 = -1200					; size = 4
$T245522 = -1196					; size = 4
$T245501 = -1192					; size = 4
$T245459 = -1188					; size = 28
$T245458 = -1160					; size = 28
$T245457 = -1132					; size = 28
$T245456 = -1104					; size = 28
$T245455 = -1076					; size = 28
$T245454 = -1048					; size = 28
$T245453 = -1020					; size = 28
$T245452 = -992						; size = 28
$T245451 = -964						; size = 28
$T245450 = -936						; size = 28
$T245449 = -908						; size = 28
$T245448 = -880						; size = 28
$T245447 = -852						; size = 28
$T245446 = -824						; size = 28
$T245445 = -796						; size = 28
$T245444 = -768						; size = 28
$T245443 = -740						; size = 28
$T245442 = -712						; size = 28
$T245441 = -684						; size = 28
$T245440 = -656						; size = 28
$T245439 = -628						; size = 28
$T245438 = -600						; size = 28
$T245437 = -572						; size = 28
$T245436 = -544						; size = 28
$T245435 = -516						; size = 28
$T245434 = -488						; size = 28
$T245433 = -460						; size = 28
$T245432 = -432						; size = 28
$T245431 = -404						; size = 28
$T245430 = -376						; size = 28
$T245429 = -348						; size = 28
$T245428 = -320						; size = 28
$T245427 = -292						; size = 28
$T245426 = -264						; size = 28
$T245425 = -236						; size = 28
$T245424 = -208						; size = 28
$T245423 = -180						; size = 28
$T245422 = -152						; size = 28
$T245421 = -124						; size = 28
_iPlayerLoop$225704 = -96				; size = 4
_totalEnemies$225701 = -92				; size = 4
_rank$225700 = -88					; size = 4
_eLoopPlayer$225703 = -84				; size = 4
_myStrength$225702 = -80				; size = 4
_eTheirIdeology$ = -76					; size = 4
_eMyIdeology$ = -72					; size = 4
_iSharedIdeologyMod$ = -68				; size = 4
_szRtnValue$ = -64					; size = 28
__$ArrayPad$ = -36					; size = 4
_iLessHappyMod$ = -32					; size = 4
_kTeam$ = -28						; size = 4
_ePlayerReligion$ = -24					; size = 4
_iCommonFoeMod$ = -20					; size = 4
_kPlayer$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_ePlayer$ = 12						; size = 4
?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z PROC ; CvPlayerCulture::GetTourismModifierWithTooltip, COMDAT
; _this$ = ecx

; 3199 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1568				; 00000620H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T245501[ebp], 0

; 3200 : 	CvString szRtnValue = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN71@GetTourism@3
	mov	DWORD PTR tv789[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN72@GetTourism@3
$LN71@GetTourism@3:
	mov	DWORD PTR tv789[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN72@GetTourism@3:
	mov	ecx, DWORD PTR tv789[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 3201 : 	CvPlayer &kPlayer = GET_PLAYER(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], edx

; 3202 : 	CvTeam &kTeam = GET_TEAM(kPlayer.getTeam());

	mov	eax, DWORD PTR _kPlayer$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245522[ebp], eax
	mov	edx, DWORD PTR $T245522[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$[ebp], edx

; 3203 : 	PolicyBranchTypes eMyIdeology = m_pPlayer->GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eMyIdeology$[ebp], eax

; 3204 : 	PolicyBranchTypes eTheirIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eTheirIdeology$[ebp], eax

; 3205 : 
; 3206 : 	// POSITIVE MODIFIERS
; 3207 : 
; 3208 : 	// Open borders with this player
; 3209 : 	if (kTeam.IsAllowsOpenBordersToTeam(m_pPlayer->getTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR $T245534[ebp], edx
	mov	eax, DWORD PTR $T245534[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245535[ebp], eax
	mov	edx, DWORD PTR $T245535[ebp]
	push	edx
	mov	ecx, DWORD PTR _kTeam$[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	eax, al
	test	eax, eax
	je	$LN91@GetTourism@3

; 3210 : 	{
; 3211 : 		szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_OPEN_BORDERS", GetTourismModifierOpenBorders()) + "[ENDCOLOR]";

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierOpenBorders
	push	eax
	push	OFFSET ??_C@_0CH@NILMLEEG@TXT_KEY_CO_PLAYER_TOURISM_OPEN_B@
	lea	ecx, DWORD PTR $T245421[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv918[ebp], eax
	mov	edx, DWORD PTR tv918[ebp]
	mov	DWORD PTR tv700[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv700[ebp]
	push	eax
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	ecx, DWORD PTR $T245422[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv787[ebp], eax
	mov	edx, DWORD PTR tv787[ebp]
	mov	DWORD PTR tv702[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	eax, DWORD PTR tv702[ebp]
	push	eax
	lea	ecx, DWORD PTR $T245423[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv781[ebp], eax
	mov	edx, DWORD PTR tv781[ebp]
	mov	DWORD PTR tv704[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv704[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T245423[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T245422[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245421[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3212 : 	}
; 3213 : 
; 3214 : 	// Trade route to one of this player's cities from here
; 3215 : 	if (GC.getGame().GetGameTrade()->IsPlayerConnectedToPlayer(m_pPlayer->GetID(), ePlayer))

$LN91@GetTourism@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T245548[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245552[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	eax, DWORD PTR $T245548[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245552[ebp]
	call	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ ; CvGame::GetGameTrade
	mov	ecx, eax
	call	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z ; CvGameTrade::IsPlayerConnectedToPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN23@GetTourism@3

; 3216 : 	{
; 3217 : 		szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_TRADE_ROUTE", GetTourismModifierTradeRoute()) + "[ENDCOLOR]";

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierTradeRoute
	push	eax
	push	OFFSET ??_C@_0CG@MGFGKJIB@TXT_KEY_CO_PLAYER_TOURISM_TRADE_@
	lea	edx, DWORD PTR $T245424[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv934[ebp], eax
	mov	eax, DWORD PTR tv934[ebp]
	mov	DWORD PTR tv706[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv706[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	edx, DWORD PTR $T245425[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv935[ebp], eax
	mov	eax, DWORD PTR tv935[ebp]
	mov	DWORD PTR tv708[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	ecx, DWORD PTR tv708[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245426[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv936[ebp], eax
	mov	eax, DWORD PTR tv936[ebp]
	mov	DWORD PTR tv710[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv710[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T245426[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T245425[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245424[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN23@GetTourism@3:

; 3218 : 	}
; 3219 : 
; 3220 : 	ReligionTypes ePlayerReligion = m_pPlayer->GetReligions()->GetReligionInMostCities();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?GetReligionInMostCities@CvPlayerReligions@@QBE?AW4ReligionTypes@@XZ ; CvPlayerReligions::GetReligionInMostCities
	mov	DWORD PTR _ePlayerReligion$[ebp], eax

; 3221 : 	if (ePlayerReligion != NO_RELIGION && kPlayer.GetReligions()->HasReligionInMostCities(ePlayerReligion))

	cmp	DWORD PTR _ePlayerReligion$[ebp], -1
	je	$LN22@GetTourism@3
	mov	eax, DWORD PTR _ePlayerReligion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z ; CvPlayerReligions::HasReligionInMostCities
	movzx	ecx, al
	test	ecx, ecx
	je	$LN22@GetTourism@3

; 3222 : 	{
; 3223 : 		szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_RELIGION_NOTE", GetTourismModifierSharedReligion()) + "[ENDCOLOR]";

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierSharedReligion
	push	eax
	push	OFFSET ??_C@_0CI@HBDEGGEI@TXT_KEY_CO_PLAYER_TOURISM_RELIGI@
	lea	edx, DWORD PTR $T245427[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv937[ebp], eax
	mov	eax, DWORD PTR tv937[ebp]
	mov	DWORD PTR tv712[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv712[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	edx, DWORD PTR $T245428[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv938[ebp], eax
	mov	eax, DWORD PTR tv938[ebp]
	mov	DWORD PTR tv714[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	ecx, DWORD PTR tv714[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245429[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv939[ebp], eax
	mov	eax, DWORD PTR tv939[ebp]
	mov	DWORD PTR tv716[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR tv716[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T245429[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T245428[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245427[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN22@GetTourism@3:

; 3224 : 	}
; 3225 : 
; 3226 : 	if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	$LN21@GetTourism@3
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	$LN21@GetTourism@3
	mov	edx, DWORD PTR _eMyIdeology$[ebp]
	cmp	edx, DWORD PTR _eTheirIdeology$[ebp]
	je	$LN21@GetTourism@3

; 3227 : 	{
; 3228 : 		if (m_pPlayer->GetEspionage()->IsMyDiplomatVisitingThem(ePlayer))

	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
	movzx	edx, al
	test	edx, edx
	je	$LN21@GetTourism@3

; 3229 : 		{
; 3230 : 			szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_PROPAGANDA", GC.getTOURISM_MODIFIER_DIPLOMAT()) + "[ENDCOLOR]";

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8232
	mov	DWORD PTR $T245564[ebp], eax
	mov	ecx, DWORD PTR $T245564[ebp]
	push	ecx
	push	OFFSET ??_C@_0CF@HCELBAGF@TXT_KEY_CO_PLAYER_TOURISM_PROPAG@
	lea	edx, DWORD PTR $T245430[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv940[ebp], eax
	mov	eax, DWORD PTR tv940[ebp]
	mov	DWORD PTR tv718[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR tv718[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	edx, DWORD PTR $T245431[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv941[ebp], eax
	mov	eax, DWORD PTR tv941[ebp]
	mov	DWORD PTR tv720[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	ecx, DWORD PTR tv720[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245432[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv942[ebp], eax
	mov	eax, DWORD PTR tv942[ebp]
	mov	DWORD PTR tv722[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR tv722[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T245432[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T245431[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245430[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN21@GetTourism@3:

; 3231 : 		}
; 3232 : 	}
; 3233 : 
; 3234 : 	int iSharedIdeologyMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_SHARED_IDEOLOGY);

	push	30					; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iSharedIdeologyMod$[ebp], eax

; 3235 : 	if (iSharedIdeologyMod > 0)

	cmp	DWORD PTR _iSharedIdeologyMod$[ebp], 0
	jle	$LN19@GetTourism@3

; 3236 : 	{
; 3237 : 		if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology == eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	$LN19@GetTourism@3
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	$LN19@GetTourism@3
	mov	eax, DWORD PTR _eMyIdeology$[ebp]
	cmp	eax, DWORD PTR _eTheirIdeology$[ebp]
	jne	$LN19@GetTourism@3

; 3238 : 		{
; 3239 : 			szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_SHARED_IDEOLOGY", iSharedIdeologyMod) + "[ENDCOLOR]";

	mov	ecx, DWORD PTR _iSharedIdeologyMod$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@EMBEPNKK@TXT_KEY_CO_PLAYER_TOURISM_SHARED@
	lea	edx, DWORD PTR $T245433[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv943[ebp], eax
	mov	eax, DWORD PTR tv943[ebp]
	mov	DWORD PTR tv724[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR tv724[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	edx, DWORD PTR $T245434[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv944[ebp], eax
	mov	eax, DWORD PTR tv944[ebp]
	mov	DWORD PTR tv726[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	ecx, DWORD PTR tv726[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245435[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv945[ebp], eax
	mov	eax, DWORD PTR tv945[ebp]
	mov	DWORD PTR tv728[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv728[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T245435[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR $T245434[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245433[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN19@GetTourism@3:

; 3240 : 		}
; 3241 : 	}
; 3242 : 
; 3243 : 	int iCommonFoeMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_COMMON_FOE);

	push	28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax

; 3244 : 	if (iCommonFoeMod > 0)

	cmp	DWORD PTR _iCommonFoeMod$[ebp], 0
	jle	$LN17@GetTourism@3

; 3245 : 	{
; 3246 : 		// NQMP GJS - new Cult of Personality BEGIN
; 3247 : 		int rank = 0;

	mov	DWORD PTR _rank$225700[ebp], 0

; 3248 : 		int totalEnemies = 0;

	mov	DWORD PTR _totalEnemies$225701[ebp], 0

; 3249 : 		int myStrength = m_pPlayer->GetMilitaryMight();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	mov	DWORD PTR _myStrength$225702[ebp], eax

; 3250 : 
; 3251 : 		PlayerTypes eLoopPlayer;
; 3252 : 		for (int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$225704[ebp], 0
	jmp	SHORT $LN16@GetTourism@3
$LN15@GetTourism@3:
	mov	ecx, DWORD PTR _iPlayerLoop$225704[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPlayerLoop$225704[ebp], ecx
$LN16@GetTourism@3:
	cmp	DWORD PTR _iPlayerLoop$225704[ebp], 22	; 00000016H
	jge	$LN14@GetTourism@3

; 3253 : 		{
; 3254 : 			eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	edx, DWORD PTR _iPlayerLoop$225704[ebp]
	mov	DWORD PTR _eLoopPlayer$225703[ebp], edx

; 3255 : 			if (eLoopPlayer != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245581[ebp], edx
	mov	eax, DWORD PTR _eLoopPlayer$225703[ebp]
	cmp	eax, DWORD PTR $T245581[ebp]
	je	SHORT $LN13@GetTourism@3
	push	0
	mov	ecx, DWORD PTR _eLoopPlayer$225703[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@GetTourism@3

; 3256 : 			{
; 3257 : 				totalEnemies++;

	mov	ecx, DWORD PTR _totalEnemies$225701[ebp]
	add	ecx, 1
	mov	DWORD PTR _totalEnemies$225701[ebp], ecx

; 3258 : 				if (GET_PLAYER(eLoopPlayer).GetMilitaryMight() > myStrength)

	mov	edx, DWORD PTR _eLoopPlayer$225703[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T245585[ebp], edx
	mov	ecx, DWORD PTR $T245585[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	cmp	eax, DWORD PTR _myStrength$225702[ebp]
	jle	SHORT $LN13@GetTourism@3

; 3259 : 				{
; 3260 : 					rank++;

	mov	eax, DWORD PTR _rank$225700[ebp]
	add	eax, 1
	mov	DWORD PTR _rank$225700[ebp], eax
$LN13@GetTourism@3:

; 3261 : 				}
; 3262 : 			}
; 3263 : 		}

	jmp	$LN15@GetTourism@3
$LN14@GetTourism@3:

; 3264 : 
; 3265 : 		// divide the tourism boost into chunks, so that lowest player gets 0%, highest gets 100%, and the rest are evenly distributed in between
; 3266 : 		// so for example in a 6 player game, based on the player being 6th/5th/4th/3rd/2nd/1st in military strength they get 0%/20%/40%/60%/80%/100% boost
; 3267 : 		if (totalEnemies > 0)

	cmp	DWORD PTR _totalEnemies$225701[ebp], 0
	jle	$LN17@GetTourism@3

; 3268 : 		{
; 3269 : 			iCommonFoeMod = iCommonFoeMod * (totalEnemies - rank) / totalEnemies;

	mov	ecx, DWORD PTR _totalEnemies$225701[ebp]
	sub	ecx, DWORD PTR _rank$225700[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iCommonFoeMod$[ebp]
	cdq
	idiv	DWORD PTR _totalEnemies$225701[ebp]
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax

; 3270 : 			szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_COMMON_FOE", iCommonFoeMod) + "[ENDCOLOR]";

	mov	edx, DWORD PTR _iCommonFoeMod$[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@FLCKLFPH@TXT_KEY_CO_PLAYER_TOURISM_COMMON@
	lea	eax, DWORD PTR $T245436[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv946[ebp], eax
	mov	ecx, DWORD PTR tv946[ebp]
	mov	DWORD PTR tv730[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	edx, DWORD PTR tv730[ebp]
	push	edx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	eax, DWORD PTR $T245437[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv947[ebp], eax
	mov	ecx, DWORD PTR tv947[ebp]
	mov	DWORD PTR tv732[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	edx, DWORD PTR tv732[ebp]
	push	edx
	lea	eax, DWORD PTR $T245438[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv948[ebp], eax
	mov	ecx, DWORD PTR tv948[ebp]
	mov	DWORD PTR tv734[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	edx, DWORD PTR tv734[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR $T245438[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T245437[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245436[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@GetTourism@3:

; 3271 : 		}
; 3272 : 
; 3273 : 		/*
; 3274 : 		// old code
; 3275 : 		PlayerTypes eLoopPlayer;
; 3276 : 		for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)
; 3277 : 		{
; 3278 : 			eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 3279 : 
; 3280 : 			if (eLoopPlayer != ePlayer && eLoopPlayer != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))
; 3281 : 			{
; 3282 : 				// Are they at war with me too?
; 3283 : 				if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()) && GET_TEAM(kPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()))
; 3284 : 				{
; 3285 : 					szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_COMMON_FOE", iCommonFoeMod) + "[ENDCOLOR]";
; 3286 : 				}
; 3287 : 			}
; 3288 : 		}
; 3289 : 		*/
; 3290 : 		// NQMP GJS - new Cult of Personality END
; 3291 : 	}
; 3292 : 
; 3293 : 	int iLessHappyMod = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_LESS_HAPPY);

	push	29					; 0000001dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iLessHappyMod$[ebp], eax

; 3294 : 	if (iLessHappyMod > 0)

	cmp	DWORD PTR _iLessHappyMod$[ebp], 0
	jle	$LN10@GetTourism@3

; 3295 : 	{
; 3296 : 		if (m_pPlayer->GetExcessHappiness() > kPlayer.GetExcessHappiness())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	mov	esi, eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	cmp	esi, eax
	jle	$LN10@GetTourism@3

; 3297 : 		{
; 3298 : 			szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_LESS_HAPPY", iLessHappyMod) + "[ENDCOLOR]";

	mov	edx, DWORD PTR _iLessHappyMod$[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@DIOLIMGB@TXT_KEY_CO_PLAYER_TOURISM_LESS_H@
	lea	eax, DWORD PTR $T245439[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv949[ebp], eax
	mov	ecx, DWORD PTR tv949[ebp]
	mov	DWORD PTR tv736[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	edx, DWORD PTR tv736[ebp]
	push	edx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	eax, DWORD PTR $T245440[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv950[ebp], eax
	mov	ecx, DWORD PTR tv950[ebp]
	mov	DWORD PTR tv738[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	edx, DWORD PTR tv738[ebp]
	push	edx
	lea	eax, DWORD PTR $T245441[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv951[ebp], eax
	mov	ecx, DWORD PTR tv951[ebp]
	mov	DWORD PTR tv740[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	edx, DWORD PTR tv740[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR $T245441[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245440[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245439[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN10@GetTourism@3:

; 3299 : 		}
; 3300 : 	}
; 3301 : 
; 3302 : 	if (m_pPlayer->isGoldenAge() && m_pPlayer->GetPlayerTraits()->GetGoldenAgeTourismModifier())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?isGoldenAge@CvPlayer@@QBE_NXZ		; CvPlayer::isGoldenAge
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@GetTourism@3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T245597[ebp], eax
	mov	eax, DWORD PTR $T245597[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR $T245598[ebp], ecx
	cmp	DWORD PTR $T245598[ebp], 0
	je	$LN8@GetTourism@3

; 3303 : 	{
; 3304 : 		szRtnValue += "[COLOR_POSITIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_CARNIVAL", m_pPlayer->GetPlayerTraits()->GetGoldenAgeTourismModifier()) + "[ENDCOLOR]";

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T245602[ebp], eax
	mov	eax, DWORD PTR $T245602[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR $T245603[ebp], ecx
	mov	edx, DWORD PTR $T245603[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@NNAONCMJ@TXT_KEY_CO_PLAYER_TOURISM_CARNIV@
	lea	eax, DWORD PTR $T245442[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv952[ebp], eax
	mov	ecx, DWORD PTR tv952[ebp]
	mov	DWORD PTR tv742[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	edx, DWORD PTR tv742[ebp]
	push	edx
	push	OFFSET ??_C@_0BG@LJCMNJEH@?$FLCOLOR_POSITIVE_TEXT?$FN?$AA@
	lea	eax, DWORD PTR $T245443[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv953[ebp], eax
	mov	ecx, DWORD PTR tv953[ebp]
	mov	DWORD PTR tv744[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	edx, DWORD PTR tv744[ebp]
	push	edx
	lea	eax, DWORD PTR $T245444[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv954[ebp], eax
	mov	ecx, DWORD PTR tv954[ebp]
	mov	DWORD PTR tv746[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	edx, DWORD PTR tv746[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR $T245444[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR $T245443[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245442[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN8@GetTourism@3:

; 3305 : 	}
; 3306 : 
; 3307 : 	// NEUTRAL MODIFIERS
; 3308 : 	if (!kTeam.IsAllowsOpenBordersToTeam(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T245616[ebp], ecx
	mov	edx, DWORD PTR $T245616[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T245617[ebp], eax
	mov	ecx, DWORD PTR $T245617[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kTeam$[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	edx, al
	test	edx, edx
	jne	$LN137@GetTourism@3

; 3309 : 	{
; 3310 : 		szRtnValue += "[COLOR_GREY]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_OPEN_BORDERS", 0) + "[ENDCOLOR]";		

	push	0
	push	OFFSET ??_C@_0CH@NILMLEEG@TXT_KEY_CO_PLAYER_TOURISM_OPEN_B@
	lea	eax, DWORD PTR $T245445[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv955[ebp], eax
	mov	ecx, DWORD PTR tv955[ebp]
	mov	DWORD PTR tv748[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR tv748[ebp]
	push	edx
	push	OFFSET ??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@
	lea	eax, DWORD PTR $T245446[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv956[ebp], eax
	mov	ecx, DWORD PTR tv956[ebp]
	mov	DWORD PTR tv750[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	edx, DWORD PTR tv750[ebp]
	push	edx
	lea	eax, DWORD PTR $T245447[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv957[ebp], eax
	mov	ecx, DWORD PTR tv957[ebp]
	mov	DWORD PTR tv752[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	edx, DWORD PTR tv752[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR $T245447[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR $T245446[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245445[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3311 : 	}
; 3312 : 	if (!GC.getGame().GetGameTrade()->IsPlayerConnectedToPlayer(m_pPlayer->GetID(), ePlayer))

$LN137@GetTourism@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245630[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245634[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245630[ebp]
	push	edx
	mov	ecx, DWORD PTR $T245634[ebp]
	call	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ ; CvGame::GetGameTrade
	mov	ecx, eax
	call	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z ; CvGameTrade::IsPlayerConnectedToPlayer
	movzx	eax, al
	test	eax, eax
	jne	$LN6@GetTourism@3

; 3313 : 	{
; 3314 : 		szRtnValue += "[COLOR_GREY]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_TRADE_ROUTE", 0) + "[ENDCOLOR]";		

	push	0
	push	OFFSET ??_C@_0CG@MGFGKJIB@TXT_KEY_CO_PLAYER_TOURISM_TRADE_@
	lea	ecx, DWORD PTR $T245448[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv958[ebp], eax
	mov	edx, DWORD PTR tv958[ebp]
	mov	DWORD PTR tv754[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	eax, DWORD PTR tv754[ebp]
	push	eax
	push	OFFSET ??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@
	lea	ecx, DWORD PTR $T245449[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv959[ebp], eax
	mov	edx, DWORD PTR tv959[ebp]
	mov	DWORD PTR tv756[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	eax, DWORD PTR tv756[ebp]
	push	eax
	lea	ecx, DWORD PTR $T245450[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv960[ebp], eax
	mov	edx, DWORD PTR tv960[ebp]
	mov	DWORD PTR tv758[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	mov	eax, DWORD PTR tv758[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	lea	ecx, DWORD PTR $T245450[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	lea	ecx, DWORD PTR $T245449[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245448[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@GetTourism@3:

; 3315 : 	}
; 3316 : 	if (ePlayerReligion == NO_RELIGION || !kPlayer.GetReligions()->HasReligionInMostCities(ePlayerReligion))

	cmp	DWORD PTR _ePlayerReligion$[ebp], -1
	je	SHORT $LN4@GetTourism@3
	mov	ecx, DWORD PTR _ePlayerReligion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z ; CvPlayerReligions::HasReligionInMostCities
	movzx	edx, al
	test	edx, edx
	jne	$LN5@GetTourism@3
$LN4@GetTourism@3:

; 3317 : 	{
; 3318 : 		szRtnValue += "[COLOR_GREY]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_RELIGION_NOTE", 0) + "[ENDCOLOR]";

	push	0
	push	OFFSET ??_C@_0CI@HBDEGGEI@TXT_KEY_CO_PLAYER_TOURISM_RELIGI@
	lea	eax, DWORD PTR $T245451[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv961[ebp], eax
	mov	ecx, DWORD PTR tv961[ebp]
	mov	DWORD PTR tv760[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	mov	edx, DWORD PTR tv760[ebp]
	push	edx
	push	OFFSET ??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@
	lea	eax, DWORD PTR $T245452[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv962[ebp], eax
	mov	ecx, DWORD PTR tv962[ebp]
	mov	DWORD PTR tv762[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	edx, DWORD PTR tv762[ebp]
	push	edx
	lea	eax, DWORD PTR $T245453[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv963[ebp], eax
	mov	ecx, DWORD PTR tv963[ebp]
	mov	DWORD PTR tv764[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	edx, DWORD PTR tv764[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T245453[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	lea	ecx, DWORD PTR $T245452[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245451[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@GetTourism@3:

; 3319 : 	}
; 3320 : 	if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	$LN3@GetTourism@3
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	$LN3@GetTourism@3
	mov	eax, DWORD PTR _eMyIdeology$[ebp]
	cmp	eax, DWORD PTR _eTheirIdeology$[ebp]
	je	$LN3@GetTourism@3

; 3321 : 	{
; 3322 : 		if (!m_pPlayer->GetEspionage()->IsMyDiplomatVisitingThem(ePlayer))

	push	0
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
	movzx	eax, al
	test	eax, eax
	jne	$LN3@GetTourism@3

; 3323 : 		{
; 3324 : 			szRtnValue += "[COLOR_GREY]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_PROPAGANDA", 0) + "[ENDCOLOR]";

	push	0
	push	OFFSET ??_C@_0CF@HCELBAGF@TXT_KEY_CO_PLAYER_TOURISM_PROPAG@
	lea	ecx, DWORD PTR $T245454[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv964[ebp], eax
	mov	edx, DWORD PTR tv964[ebp]
	mov	DWORD PTR tv766[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	mov	eax, DWORD PTR tv766[ebp]
	push	eax
	push	OFFSET ??_C@_0N@MLIKMHMN@?$FLCOLOR_GREY?$FN?$AA@
	lea	ecx, DWORD PTR $T245455[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv965[ebp], eax
	mov	edx, DWORD PTR tv965[ebp]
	mov	DWORD PTR tv768[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	eax, DWORD PTR tv768[ebp]
	push	eax
	lea	ecx, DWORD PTR $T245456[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv966[ebp], eax
	mov	edx, DWORD PTR tv966[ebp]
	mov	DWORD PTR tv770[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	mov	eax, DWORD PTR tv770[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	lea	ecx, DWORD PTR $T245456[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	lea	ecx, DWORD PTR $T245455[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245454[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@GetTourism@3:

; 3325 : 		}
; 3326 : #ifndef AUI_WARNING_FIXES
; 3327 : 	}
; 3328 : 
; 3329 : 	// NEGATIVE MODIFIERS
; 3330 : 	if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	$LN1@GetTourism@3
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	$LN1@GetTourism@3
	mov	ecx, DWORD PTR _eMyIdeology$[ebp]
	cmp	ecx, DWORD PTR _eTheirIdeology$[ebp]
	je	$LN1@GetTourism@3

; 3331 : 	{
; 3332 : #endif
; 3333 : 		szRtnValue += "[COLOR_NEGATIVE_TEXT]" + GetLocalizedText("TXT_KEY_CO_PLAYER_TOURISM_DIFFERENT_IDEOLOGIES", GC.getTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES()) + "[ENDCOLOR]";

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8228
	mov	DWORD PTR $T245650[ebp], edx
	mov	eax, DWORD PTR $T245650[ebp]
	push	eax
	push	OFFSET ??_C@_0CP@BNFOJDPF@TXT_KEY_CO_PLAYER_TOURISM_DIFFER@
	lea	ecx, DWORD PTR $T245457[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv967[ebp], eax
	mov	edx, DWORD PTR tv967[ebp]
	mov	DWORD PTR tv772[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	mov	eax, DWORD PTR tv772[ebp]
	push	eax
	push	OFFSET ??_C@_0BG@LALIDOFE@?$FLCOLOR_NEGATIVE_TEXT?$FN?$AA@
	lea	ecx, DWORD PTR $T245458[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv968[ebp], eax
	mov	edx, DWORD PTR tv968[ebp]
	mov	DWORD PTR tv774[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	push	OFFSET ??_C@_0L@LJEHDPKM@?$FLENDCOLOR?$FN?$AA@
	mov	eax, DWORD PTR tv774[ebp]
	push	eax
	lea	ecx, DWORD PTR $T245459[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv969[ebp], eax
	mov	edx, DWORD PTR tv969[ebp]
	mov	DWORD PTR tv776[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	mov	eax, DWORD PTR tv776[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	lea	ecx, DWORD PTR $T245459[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	lea	ecx, DWORD PTR $T245458[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T245457[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@GetTourism@3:

; 3334 : 	}
; 3335 : 
; 3336 : 	return szRtnValue;

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T245501[ebp]
	or	edx, 1
	mov	DWORD PTR $T245501[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3337 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR $T245421[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$2:
	lea	ecx, DWORD PTR $T245422[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$3:
	lea	ecx, DWORD PTR $T245423[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$4:
	lea	ecx, DWORD PTR $T245424[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$5:
	lea	ecx, DWORD PTR $T245425[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$6:
	lea	ecx, DWORD PTR $T245426[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$7:
	lea	ecx, DWORD PTR $T245427[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$8:
	lea	ecx, DWORD PTR $T245428[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$9:
	lea	ecx, DWORD PTR $T245429[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$10:
	lea	ecx, DWORD PTR $T245430[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$11:
	lea	ecx, DWORD PTR $T245431[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$12:
	lea	ecx, DWORD PTR $T245432[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$13:
	lea	ecx, DWORD PTR $T245433[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$14:
	lea	ecx, DWORD PTR $T245434[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$15:
	lea	ecx, DWORD PTR $T245435[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$16:
	lea	ecx, DWORD PTR $T245436[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$17:
	lea	ecx, DWORD PTR $T245437[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$18:
	lea	ecx, DWORD PTR $T245438[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$19:
	lea	ecx, DWORD PTR $T245439[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$20:
	lea	ecx, DWORD PTR $T245440[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$21:
	lea	ecx, DWORD PTR $T245441[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$22:
	lea	ecx, DWORD PTR $T245442[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$23:
	lea	ecx, DWORD PTR $T245443[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$24:
	lea	ecx, DWORD PTR $T245444[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$25:
	lea	ecx, DWORD PTR $T245445[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$26:
	lea	ecx, DWORD PTR $T245446[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$27:
	lea	ecx, DWORD PTR $T245447[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$28:
	lea	ecx, DWORD PTR $T245448[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$29:
	lea	ecx, DWORD PTR $T245449[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$30:
	lea	ecx, DWORD PTR $T245450[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$31:
	lea	ecx, DWORD PTR $T245451[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$32:
	lea	ecx, DWORD PTR $T245452[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$33:
	lea	ecx, DWORD PTR $T245453[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$34:
	lea	ecx, DWORD PTR $T245454[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$35:
	lea	ecx, DWORD PTR $T245455[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$36:
	lea	ecx, DWORD PTR $T245456[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$37:
	lea	ecx, DWORD PTR $T245457[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$38:
	lea	ecx, DWORD PTR $T245458[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$39:
	lea	ecx, DWORD PTR $T245459[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z$40:
	mov	eax, DWORD PTR $T245501[ebp]
	and	eax, 1
	je	$LN68@GetTourism@3
	and	DWORD PTR $T245501[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN68@GetTourism@3:
	ret	0
__ehhandler$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1576]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTourismModifierWithTooltip@CvPlayerCulture@@QBE?AVCvString@@W4PlayerTypes@@@Z ENDP ; CvPlayerCulture::GetTourismModifierWithTooltip
; Function compile flags: /Odtp
;	COMDAT ?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T245674 = -4						; size = 4
?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetTourismModifierSharedReligion, COMDAT
; _this$ = ecx

; 3341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3342 : 	return GC.getTOURISM_MODIFIER_SHARED_RELIGION() + m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_SHARED_RELIGION_TOURISM_MODIFIER);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8216
	mov	DWORD PTR $T245674[ebp], eax
	push	55					; 00000037H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR $T245674[ebp]

; 3343 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetTourismModifierSharedReligion
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T245680 = -4						; size = 4
?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetTourismModifierTradeRoute, COMDAT
; _this$ = ecx

; 3347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3348 : 	return GC.getTOURISM_MODIFIER_SHARED_RELIGION() + m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TRADE_ROUTE_TOURISM_MODIFIER);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8216
	mov	DWORD PTR $T245680[ebp], eax
	push	56					; 00000038H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR $T245680[ebp]

; 3349 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetTourismModifierTradeRoute
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T245686 = -4						; size = 4
?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetTourismModifierOpenBorders, COMDAT
; _this$ = ecx

; 3353 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3354 : 	return GC.getTOURISM_MODIFIER_SHARED_RELIGION() + m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_OPEN_BORDERS_TOURISM_MODIFIER);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8216
	mov	DWORD PTR $T245686[ebp], eax
	push	57					; 00000039H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR $T245686[ebp]

; 3355 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetTourismModifierOpenBorders
_TEXT	ENDS
PUBLIC	?GetPublicOpinionType@CvPlayerCulture@@QBE?AW4PublicOpinionTypes@@XZ ; CvPlayerCulture::GetPublicOpinionType
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionType@CvPlayerCulture@@QBE?AW4PublicOpinionTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPublicOpinionType@CvPlayerCulture@@QBE?AW4PublicOpinionTypes@@XZ PROC ; CvPlayerCulture::GetPublicOpinionType, COMDAT
; _this$ = ecx

; 3359 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3360 : 	return m_eOpinion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+200]

; 3361 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPublicOpinionType@CvPlayerCulture@@QBE?AW4PublicOpinionTypes@@XZ ENDP ; CvPlayerCulture::GetPublicOpinionType
_TEXT	ENDS
PUBLIC	?GetPublicOpinionPreferredIdeology@CvPlayerCulture@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerCulture::GetPublicOpinionPreferredIdeology
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionPreferredIdeology@CvPlayerCulture@@QBE?AW4PolicyBranchTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPublicOpinionPreferredIdeology@CvPlayerCulture@@QBE?AW4PolicyBranchTypes@@XZ PROC ; CvPlayerCulture::GetPublicOpinionPreferredIdeology, COMDAT
; _this$ = ecx

; 3365 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3366 : 	return m_ePreferredIdeology;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+212]

; 3367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPublicOpinionPreferredIdeology@CvPlayerCulture@@QBE?AW4PolicyBranchTypes@@XZ ENDP ; CvPlayerCulture::GetPublicOpinionPreferredIdeology
_TEXT	ENDS
PUBLIC	?GetPublicOpinionTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ ; CvPlayerCulture::GetPublicOpinionTooltip
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T245694 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPublicOpinionTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ PROC ; CvPlayerCulture::GetPublicOpinionTooltip, COMDAT
; _this$ = ecx

; 3371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T245694[ebp], 0

; 3372 : 	return m_strOpinionTooltip;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T245694[ebp]
	or	ecx, 1
	mov	DWORD PTR $T245694[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3373 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPublicOpinionTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ ENDP ; CvPlayerCulture::GetPublicOpinionTooltip
_TEXT	ENDS
PUBLIC	?GetPublicOpinionUnhappiness@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetPublicOpinionUnhappiness
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionUnhappiness@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPublicOpinionUnhappiness@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetPublicOpinionUnhappiness, COMDAT
; _this$ = ecx

; 3377 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3378 : 	return m_iOpinionUnhappiness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+216]

; 3379 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPublicOpinionUnhappiness@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetPublicOpinionUnhappiness
_TEXT	ENDS
PUBLIC	?GetPublicOpinionUnhappinessTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ ; CvPlayerCulture::GetPublicOpinionUnhappinessTooltip
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionUnhappinessTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T245705 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPublicOpinionUnhappinessTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ PROC ; CvPlayerCulture::GetPublicOpinionUnhappinessTooltip, COMDAT
; _this$ = ecx

; 3383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T245705[ebp], 0

; 3384 : 	return m_strOpinionUnhappinessTooltip;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 248				; 000000f8H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T245705[ebp]
	or	ecx, 1
	mov	DWORD PTR $T245705[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3385 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPublicOpinionUnhappinessTooltip@CvPlayerCulture@@QBE?AVCvString@@XZ ENDP ; CvPlayerCulture::GetPublicOpinionUnhappinessTooltip
_TEXT	ENDS
PUBLIC	?GetPublicOpinionBiggestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@XZ ; CvPlayerCulture::GetPublicOpinionBiggestInfluence
; Function compile flags: /Odtp
;	COMDAT ?GetPublicOpinionBiggestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPublicOpinionBiggestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@XZ PROC ; CvPlayerCulture::GetPublicOpinionBiggestInfluence, COMDAT
; _this$ = ecx

; 3389 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3390 : 	return m_eOpinionBiggestInfluence;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]

; 3391 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPublicOpinionBiggestInfluence@CvPlayerCulture@@QBE?AW4PlayerTypes@@XZ ENDP ; CvPlayerCulture::GetPublicOpinionBiggestInfluence
_TEXT	ENDS
PUBLIC	?GetTurnIdeologySwitch@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetTurnIdeologySwitch
; Function compile flags: /Odtp
;	COMDAT ?GetTurnIdeologySwitch@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTurnIdeologySwitch@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetTurnIdeologySwitch, COMDAT
; _this$ = ecx

; 3395 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3396 : 	return m_iTurnIdeologySwitch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+208]

; 3397 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTurnIdeologySwitch@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetTurnIdeologySwitch
_TEXT	ENDS
PUBLIC	?SetTurnIdeologySwitch@CvPlayerCulture@@QAEXH@Z	; CvPlayerCulture::SetTurnIdeologySwitch
; Function compile flags: /Odtp
;	COMDAT ?SetTurnIdeologySwitch@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iValue$ = 8						; size = 4
?SetTurnIdeologySwitch@CvPlayerCulture@@QAEXH@Z PROC	; CvPlayerCulture::SetTurnIdeologySwitch, COMDAT
; _this$ = ecx

; 3399 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3400 : 	m_iTurnIdeologySwitch = iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [eax+208], ecx

; 3401 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTurnIdeologySwitch@CvPlayerCulture@@QAEXH@Z ENDP	; CvPlayerCulture::SetTurnIdeologySwitch
_TEXT	ENDS
PUBLIC	?GetTourismBlastStrength@CvPlayerCulture@@QAEHH@Z ; CvPlayerCulture::GetTourismBlastStrength
; Function compile flags: /Odtp
;	COMDAT ?GetTourismBlastStrength@CvPlayerCulture@@QAEHH@Z
_TEXT	SEGMENT
tv81 = -28						; size = 4
_this$ = -24						; size = 4
$T245734 = -20						; size = 4
$T245727 = -16						; size = 4
$T245723 = -12						; size = 4
$T245719 = -8						; size = 4
_iStrength$ = -4					; size = 4
_iMultiplier$ = 8					; size = 4
?GetTourismBlastStrength@CvPlayerCulture@@QAEHH@Z PROC	; CvPlayerCulture::GetTourismBlastStrength, COMDAT
; _this$ = ecx

; 3405 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 3406 : 	int iStrength = iMultiplier * GetTourism();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	imul	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iStrength$[ebp], eax

; 3407 : 	
; 3408 : 	// Scale by game speed
; 3409 : 	iStrength *= GC.getGame().getGameSpeedInfo().getCulturePercent();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245723[ebp], eax
	mov	ecx, DWORD PTR $T245723[ebp]
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getCulturePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getCulturePercent
	imul	eax, DWORD PTR _iStrength$[ebp]
	mov	DWORD PTR _iStrength$[ebp], eax

; 3410 : 	iStrength /= 100;

	mov	eax, DWORD PTR _iStrength$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iStrength$[ebp], eax

; 3411 : 
; 3412 : 	return max(iStrength, GC.getMINIUMUM_TOURISM_BLAST_STRENGTH());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8236
	mov	DWORD PTR $T245727[ebp], edx
	mov	eax, DWORD PTR $T245727[ebp]
	mov	DWORD PTR $T245719[ebp], eax
	mov	ecx, DWORD PTR _iStrength$[ebp]
	cmp	ecx, DWORD PTR $T245719[ebp]
	jge	SHORT $LN9@GetTourism@4
	lea	edx, DWORD PTR $T245719[ebp]
	mov	DWORD PTR tv81[ebp], edx
	jmp	SHORT $LN10@GetTourism@4
$LN9@GetTourism@4:
	lea	eax, DWORD PTR _iStrength$[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN10@GetTourism@4:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T245734[ebp], ecx
	mov	edx, DWORD PTR $T245734[ebp]
	mov	eax, DWORD PTR [edx]

; 3413 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTourismBlastStrength@CvPlayerCulture@@QAEHH@Z ENDP	; CvPlayerCulture::GetTourismBlastStrength
_TEXT	ENDS
PUBLIC	?AddTourismAllKnownCivs@CvPlayerCulture@@QAEXH@Z ; CvPlayerCulture::AddTourismAllKnownCivs
; Function compile flags: /Odtp
;	COMDAT ?AddTourismAllKnownCivs@CvPlayerCulture@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T245747 = -12						; size = 4
_iPlayerLoop$225800 = -8				; size = 4
_eLoopPlayer$ = -4					; size = 4
_iTourism$ = 8						; size = 4
?AddTourismAllKnownCivs@CvPlayerCulture@@QAEXH@Z PROC	; CvPlayerCulture::AddTourismAllKnownCivs, COMDAT
; _this$ = ecx

; 3417 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3418 : 	PlayerTypes eLoopPlayer;
; 3419 : 	for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$225800[ebp], 0
	jmp	SHORT $LN4@AddTourism
$LN3@AddTourism:
	mov	eax, DWORD PTR _iPlayerLoop$225800[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlayerLoop$225800[ebp], eax
$LN4@AddTourism:
	cmp	DWORD PTR _iPlayerLoop$225800[ebp], 22	; 00000016H
	jge	SHORT $LN5@AddTourism

; 3420 : 	{
; 3421 : 		eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	ecx, DWORD PTR _iPlayerLoop$225800[ebp]
	mov	DWORD PTR _eLoopPlayer$[ebp], ecx

; 3422 : 
; 3423 : 		if (eLoopPlayer != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245747[ebp], ecx
	mov	edx, DWORD PTR _eLoopPlayer$[ebp]
	cmp	edx, DWORD PTR $T245747[ebp]
	je	SHORT $LN1@AddTourism
	push	0
	mov	eax, DWORD PTR _eLoopPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@AddTourism

; 3424 : 		{
; 3425 : 			ChangeInfluenceOn(eLoopPlayer, iTourism);

	mov	eax, DWORD PTR _iTourism$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eLoopPlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeInfluenceOn@CvPlayerCulture@@QAEXW4PlayerTypes@@H@Z ; CvPlayerCulture::ChangeInfluenceOn
$LN1@AddTourism:

; 3426 : 		}

	jmp	SHORT $LN3@AddTourism
$LN5@AddTourism:

; 3427 : 	}
; 3428 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddTourismAllKnownCivs@CvPlayerCulture@@QAEXH@Z ENDP	; CvPlayerCulture::AddTourismAllKnownCivs
_TEXT	ENDS
PUBLIC	??_C@_0CI@LDHPIODO@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ ; `string'
PUBLIC	??_C@_0CI@KKGELPHP@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ ; `string'
PUBLIC	??_C@_0CI@OFCFCJLI@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ ; `string'
PUBLIC	??_C@_0CI@PMDOBIPJ@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ ; `string'
PUBLIC	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z	; operator<<<int>
PUBLIC	??_C@_0CI@NHBDELDK@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ ; `string'
PUBLIC	??_C@_0CJ@DPKPFMMB@TXT_KEY_CO_OPINION_TT_PREFERRED_@ ; `string'
PUBLIC	??_C@_0CE@MMHJBKIK@TXT_KEY_CO_OPINION_TT_INFLUENCED@ ; `string'
PUBLIC	??_C@_0CF@FCBBIKLD@TXT_KEY_CO_OPINION_TT_NOT_INFLUE@ ; `string'
PUBLIC	??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@ ; `string'
PUBLIC	??_C@_0DA@HOKBMHGK@TXT_KEY_CO_OPINION_TT_INFLUENCED@ ; `string'
PUBLIC	?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z ; CvPlayerCulture::ComputePublicOpinionUnhappiness
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_0BG@GBNCFEJM@?$FLICON_IDEOLOGY_ORDER?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CA@HANNLGBB@TXT_KEY_CO_OPINION_TT_FOR_ORDER?$AA@ ; `string'
PUBLIC	??_C@_0BK@CIIHNFEG@?$FLICON_IDEOLOGY_AUTOCRACY?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CE@FPNCOMGA@TXT_KEY_CO_OPINION_TT_FOR_AUTOCR@ ; `string'
PUBLIC	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
PUBLIC	??_C@_0BI@NJMBEMHK@?$FLICON_IDEOLOGY_FREEDOM?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CC@OOKLHOAM@TXT_KEY_CO_OPINION_TT_FOR_FREEDO@ ; `string'
PUBLIC	??_C@_0BP@HAEJLMJB@TXT_KEY_CO_OPINION_TT_OVERVIEW?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4String@Localization@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z:PROC ; CvGlobals::getPolicyBranchInfo
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z:PROC ; CvGameLeagues::GetPressureForIdeology
EXTRN	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ:PROC ; CvGame::GetGameLeagues
;	COMDAT ??_C@_0CI@LDHPIODO@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CI@LDHPIODO@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_UNHAPPINESS_LINE5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KKGELPHP@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
CONST	SEGMENT
??_C@_0CI@KKGELPHP@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_UNHAPPINESS_LINE4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OFCFCJLI@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
CONST	SEGMENT
??_C@_0CI@OFCFCJLI@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_UNHAPPINESS_LINE3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PMDOBIPJ@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
CONST	SEGMENT
??_C@_0CI@PMDOBIPJ@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_UNHAPPINESS_LINE2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NHBDELDK@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
CONST	SEGMENT
??_C@_0CI@NHBDELDK@TXT_KEY_CO_OPINION_TT_UNHAPPINES@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_UNHAPPINESS_LINE1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DPKPFMMB@TXT_KEY_CO_OPINION_TT_PREFERRED_@
CONST	SEGMENT
??_C@_0CJ@DPKPFMMB@TXT_KEY_CO_OPINION_TT_PREFERRED_@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_PREFERRED_IDEOLOGY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMHJBKIK@TXT_KEY_CO_OPINION_TT_INFLUENCED@
CONST	SEGMENT
??_C@_0CE@MMHJBKIK@TXT_KEY_CO_OPINION_TT_INFLUENCED@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_INFLUENCED_BY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FCBBIKLD@TXT_KEY_CO_OPINION_TT_NOT_INFLUE@
CONST	SEGMENT
??_C@_0CF@FCBBIKLD@TXT_KEY_CO_OPINION_TT_NOT_INFLUE@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_NOT_INFLUENCED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
CONST	SEGMENT
??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@ DB '[NEWLINE][NEWL'
	DB	'INE]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HOKBMHGK@TXT_KEY_CO_OPINION_TT_INFLUENCED@
CONST	SEGMENT
??_C@_0DA@HOKBMHGK@TXT_KEY_CO_OPINION_TT_INFLUENCED@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_INFLUENCED_WORLD_IDEOLOGY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GBNCFEJM@?$FLICON_IDEOLOGY_ORDER?$FN?$AA@
CONST	SEGMENT
??_C@_0BG@GBNCFEJM@?$FLICON_IDEOLOGY_ORDER?$FN?$AA@ DB '[ICON_IDEOLOGY_OR'
	DB	'DER]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HANNLGBB@TXT_KEY_CO_OPINION_TT_FOR_ORDER?$AA@
CONST	SEGMENT
??_C@_0CA@HANNLGBB@TXT_KEY_CO_OPINION_TT_FOR_ORDER?$AA@ DB 'TXT_KEY_CO_OP'
	DB	'INION_TT_FOR_ORDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CIIHNFEG@?$FLICON_IDEOLOGY_AUTOCRACY?$FN?$AA@
CONST	SEGMENT
??_C@_0BK@CIIHNFEG@?$FLICON_IDEOLOGY_AUTOCRACY?$FN?$AA@ DB '[ICON_IDEOLOG'
	DB	'Y_AUTOCRACY]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FPNCOMGA@TXT_KEY_CO_OPINION_TT_FOR_AUTOCR@
CONST	SEGMENT
??_C@_0CE@FPNCOMGA@TXT_KEY_CO_OPINION_TT_FOR_AUTOCR@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_FOR_AUTOCRACY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NJMBEMHK@?$FLICON_IDEOLOGY_FREEDOM?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@NJMBEMHK@?$FLICON_IDEOLOGY_FREEDOM?$FN?$AA@ DB '[ICON_IDEOLOGY_'
	DB	'FREEDOM]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OOKLHOAM@TXT_KEY_CO_OPINION_TT_FOR_FREEDO@
CONST	SEGMENT
??_C@_0CC@OOKLHOAM@TXT_KEY_CO_OPINION_TT_FOR_FREEDO@ DB 'TXT_KEY_CO_OPINI'
	DB	'ON_TT_FOR_FREEDOM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HAEJLMJB@TXT_KEY_CO_OPINION_TT_OVERVIEW?$AA@
CONST	SEGMENT
??_C@_0BP@HAEJLMJB@TXT_KEY_CO_OPINION_TT_OVERVIEW?$AA@ DB 'TXT_KEY_CO_OPI'
	DB	'NION_TT_OVERVIEW', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ DD 019930522H
	DD	01aH
	DD	FLAT:__unwindtable$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$8
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$10
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$11
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$12
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$13
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$14
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$15
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$18
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$19
	DD	04H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$20
	DD	014H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$21
	DD	014H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$22
	DD	014H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$23
	DD	014H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$24
	DD	014H
	DD	FLAT:__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$25
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoPublicOpinion@CvPlayerCulture@@QAEXXZ
_TEXT	SEGMENT
tv852 = -1916						; size = 4
tv549 = -1912						; size = 4
tv850 = -1908						; size = 4
tv566 = -1904						; size = 4
tv848 = -1900						; size = 4
tv583 = -1896						; size = 4
tv846 = -1892						; size = 4
tv694 = -1888						; size = 4
tv844 = -1884						; size = 4
tv722 = -1880						; size = 4
tv840 = -1876						; size = 4
tv635 = -1872						; size = 4
tv838 = -1868						; size = 4
tv645 = -1864						; size = 4
tv1003 = -1860						; size = 4
tv951 = -1856						; size = 4
tv931 = -1852						; size = 4
tv916 = -1848						; size = 4
tv903 = -1844						; size = 4
tv890 = -1840						; size = 4
tv877 = -1836						; size = 4
_this$ = -1832						; size = 4
$T245995 = -1828					; size = 4
$T245991 = -1824					; size = 4
$T245985 = -1820					; size = 4
$T245979 = -1816					; size = 4
$T245973 = -1812					; size = 4
$T245964 = -1805					; size = 1
$T245955 = -1804					; size = 4
$T245943 = -1800					; size = 4
$T245934 = -1793					; size = 1
$T245925 = -1792					; size = 4
$T245901 = -1788					; size = 4
$T245897 = -1784					; size = 4
$T245876 = -1780					; size = 4
$T245872 = -1776					; size = 4
$T245851 = -1772					; size = 4
$T245847 = -1768					; size = 4
$T245797 = -1764					; size = 4
$T245791 = -1760					; size = 4
$T245759 = -1756					; size = 4
$T245758 = -1752					; size = 80
$T245757 = -1672					; size = 80
$T245756 = -1592					; size = 80
$T245755 = -1512					; size = 80
$T245754 = -1432					; size = 80
$T245753 = -1352					; size = 4
$T245752 = -1348					; size = 28
$T245751 = -1320					; size = 28
_locText$225964 = -1292					; size = 80
_iUnhappinessModifier$225973 = -1208			; size = 4
_locText$225959 = -1204					; size = 80
_locText$225953 = -1124					; size = 80
_locText$225949 = -1044					; size = 80
_locText$225944 = -964					; size = 80
_locText$225941 = -884					; size = 80
_locText$225938 = -804					; size = 80
_locText$225935 = -724					; size = 80
_iCulturalDominanceOverUs$225929 = -640			; size = 4
_eOtherCivIdeology$225927 = -636			; size = 4
_kPlayer$225924 = -632					; size = 4
_iLoopPlayer$225920 = -628				; size = 4
_iUnhappinessModifier$225918 = -624			; size = 4
_iGreatestDominance$225919 = -620			; size = 4
_iI$225887 = -616					; size = 4
_iI$225881 = -612					; size = 4
_iI$225874 = -608					; size = 4
_iCulturalDominanceOverUs$225868 = -604			; size = 4
_eOtherCivIdeology$225866 = -600			; size = 4
_kPlayer$225863 = -596					; size = 4
_iLoopPlayer$225859 = -592				; size = 4
_i$225854 = -588					; size = 4
_sIcons$225853 = -584					; size = 28
_sTemp$225850 = -556					; size = 80
_i$225844 = -476					; size = 4
_sIcons$225843 = -472					; size = 28
_sTemp$225840 = -444					; size = 80
_i$225834 = -364					; size = 4
_sIcons$225833 = -360					; size = 28
_sTemp$225830 = -332					; size = 80
_iPressureForAutocracy$225823 = -248			; size = 4
_iPressureForFreedom$225822 = -244			; size = 4
_strAutocracyPressureString$225827 = -240		; size = 28
_strFreedomPressureString$225826 = -212			; size = 28
_iDissatisfaction$225891 = -184				; size = 4
_iPerCityUnhappy$225911 = -180				; size = 4
_iUnhappyPerXPop$225912 = -176				; size = 4
_strWorldIdeologyPressureString$225825 = -172		; size = 28
_strOrderPressureString$225828 = -144			; size = 28
__$ArrayPad$ = -116					; size = 4
_iPressureForOrder$225824 = -112			; size = 4
_eCurrentIdeology$ = -108				; size = 4
_eFreedomBranch$ = -104					; size = 4
_locOverview$ = -100					; size = 80
_eOrderBranch$ = -20					; size = 4
_eAutocracyBranch$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
?DoPublicOpinion@CvPlayerCulture@@QAEXXZ PROC		; CvPlayerCulture::DoPublicOpinion, COMDAT
; _this$ = ecx

; 3434 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1904				; 00000770H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3435 : 	m_eOpinion = NO_PUBLIC_OPINION;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], -1

; 3436 : 	m_ePreferredIdeology = NO_POLICY_BRANCH_TYPE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], -1

; 3437 : 	m_iOpinionUnhappiness = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 0

; 3438 : 	m_strOpinionTooltip = "";

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	mov	DWORD PTR $T245791[ebp], eax
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN106@DoPublicOp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T245791[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN107@DoPublicOp
$LN106@DoPublicOp:
	mov	ecx, DWORD PTR $T245791[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN107@DoPublicOp:

; 3439 : 	m_strOpinionUnhappinessTooltip = "";

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 248				; 000000f8H
	mov	DWORD PTR $T245797[ebp], edx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN110@DoPublicOp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T245797[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN111@DoPublicOp
$LN110@DoPublicOp:
	mov	ecx, DWORD PTR $T245797[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN111@DoPublicOp:

; 3440 : 	m_eOpinionBiggestInfluence = NO_PLAYER;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], -1

; 3441 : 
; 3442 : 	PolicyBranchTypes eFreedomBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_FREEDOM();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8376
	mov	DWORD PTR _eFreedomBranch$[ebp], edx

; 3443 : 	PolicyBranchTypes eAutocracyBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_AUTOCRACY();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8380
	mov	DWORD PTR _eAutocracyBranch$[ebp], eax

; 3444 : 	PolicyBranchTypes eOrderBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_ORDER();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8384
	mov	DWORD PTR _eOrderBranch$[ebp], ecx

; 3445 : 
; 3446 : 	if (eFreedomBranch == NO_POLICY_BRANCH_TYPE || eAutocracyBranch == NO_POLICY_BRANCH_TYPE || eOrderBranch == NO_POLICY_BRANCH_TYPE)

	cmp	DWORD PTR _eFreedomBranch$[ebp], -1
	je	SHORT $LN75@DoPublicOp
	cmp	DWORD PTR _eAutocracyBranch$[ebp], -1
	je	SHORT $LN75@DoPublicOp
	cmp	DWORD PTR _eOrderBranch$[ebp], -1
	jne	SHORT $LN76@DoPublicOp
$LN75@DoPublicOp:

; 3447 : 	{
; 3448 : 		return;

	jmp	$LN77@DoPublicOp
$LN76@DoPublicOp:

; 3449 : 	}
; 3450 : 
; 3451 : 	Localization::String locOverview = Localization::Lookup("TXT_KEY_CO_OPINION_TT_OVERVIEW");

	push	OFFSET ??_C@_0BP@HAEJLMJB@TXT_KEY_CO_OPINION_TT_OVERVIEW?$AA@
	lea	edx, DWORD PTR _locOverview$[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3452 : 	m_strOpinionTooltip += locOverview.toUTF8();

	lea	ecx, DWORD PTR _locOverview$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3453 : 
; 3454 : 	PolicyBranchTypes eCurrentIdeology = m_pPlayer->GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eCurrentIdeology$[ebp], eax

; 3455 : 
; 3456 : 	// We have an ideology, so public opinion matters
; 3457 : 	if (eCurrentIdeology != NO_POLICY_BRANCH_TYPE)

	cmp	DWORD PTR _eCurrentIdeology$[ebp], -1
	je	$LN74@DoPublicOp

; 3458 : 	{
; 3459 : 		int iPressureForFreedom = 0;

	mov	DWORD PTR _iPressureForFreedom$225822[ebp], 0

; 3460 : 		int iPressureForAutocracy = 0;

	mov	DWORD PTR _iPressureForAutocracy$225823[ebp], 0

; 3461 : 		int iPressureForOrder = 0;

	mov	DWORD PTR _iPressureForOrder$225824[ebp], 0

; 3462 : 		CvString strWorldIdeologyPressureString = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN121@DoPublicOp
	mov	DWORD PTR tv877[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN122@DoPublicOp
$LN121@DoPublicOp:
	mov	DWORD PTR tv877[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN122@DoPublicOp:
	mov	edx, DWORD PTR tv877[ebp]
	push	edx
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 3463 : 		CvString strFreedomPressureString = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN126@DoPublicOp
	mov	DWORD PTR tv890[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN127@DoPublicOp
$LN126@DoPublicOp:
	mov	DWORD PTR tv890[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN127@DoPublicOp:
	mov	ecx, DWORD PTR tv890[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 3464 : 		CvString strAutocracyPressureString = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN131@DoPublicOp
	mov	DWORD PTR tv903[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN132@DoPublicOp
$LN131@DoPublicOp:
	mov	DWORD PTR tv903[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN132@DoPublicOp:
	mov	eax, DWORD PTR tv903[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 3465 : 		CvString strOrderPressureString = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN136@DoPublicOp
	mov	DWORD PTR tv916[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN137@DoPublicOp
$LN136@DoPublicOp:
	mov	DWORD PTR tv916[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN137@DoPublicOp:
	mov	edx, DWORD PTR tv916[ebp]
	push	edx
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 3466 : 
; 3467 : 		// Look at World Congress
; 3468 : 		iPressureForFreedom += GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eFreedomBranch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245847[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245851[ebp], eax
	mov	ecx, DWORD PTR _eFreedomBranch$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245847[ebp]
	push	edx
	mov	ecx, DWORD PTR $T245851[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	add	eax, DWORD PTR _iPressureForFreedom$225822[ebp]
	mov	DWORD PTR _iPressureForFreedom$225822[ebp], eax

; 3469 : 		if (iPressureForFreedom > 0)

	cmp	DWORD PTR _iPressureForFreedom$225822[ebp], 0
	jle	$LN155@DoPublicOp

; 3470 : 		{
; 3471 : 			Localization::String sTemp = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_FREEDOM");

	push	OFFSET ??_C@_0CC@OOKLHOAM@TXT_KEY_CO_OPINION_TT_FOR_FREEDO@
	lea	eax, DWORD PTR _sTemp$225830[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 3472 : 			CvString sIcons = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN147@DoPublicOp
	mov	DWORD PTR tv931[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN148@DoPublicOp
$LN147@DoPublicOp:
	mov	DWORD PTR tv931[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN148@DoPublicOp:
	mov	edx, DWORD PTR tv931[ebp]
	push	edx
	lea	ecx, DWORD PTR _sIcons$225833[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 3473 : 			for (int i = 0; i < iPressureForFreedom; i++)

	mov	DWORD PTR _i$225834[ebp], 0
	jmp	SHORT $LN72@DoPublicOp
$LN71@DoPublicOp:
	mov	eax, DWORD PTR _i$225834[ebp]
	add	eax, 1
	mov	DWORD PTR _i$225834[ebp], eax
$LN72@DoPublicOp:
	mov	ecx, DWORD PTR _i$225834[ebp]
	cmp	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	jge	SHORT $LN70@DoPublicOp

; 3474 : 			{
; 3475 : 				sIcons += "[ICON_IDEOLOGY_FREEDOM]";

	push	OFFSET ??_C@_0BI@NJMBEMHK@?$FLICON_IDEOLOGY_FREEDOM?$FN?$AA@
	lea	ecx, DWORD PTR _sIcons$225833[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3476 : 			}

	jmp	SHORT $LN71@DoPublicOp
$LN70@DoPublicOp:

; 3477 : 			sTemp << sIcons;

	lea	edx, DWORD PTR _sIcons$225833[ebp]
	push	edx
	lea	eax, DWORD PTR _sTemp$225830[ebp]
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3478 : 			strWorldIdeologyPressureString += sTemp.toUTF8();

	lea	ecx, DWORD PTR _sTemp$225830[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3479 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _sIcons$225833[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sTemp$225830[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3480 : 		iPressureForAutocracy += GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eAutocracyBranch);

$LN155@DoPublicOp:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T245872[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245876[ebp], ecx
	mov	edx, DWORD PTR _eAutocracyBranch$[ebp]
	push	edx
	mov	eax, DWORD PTR $T245872[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245876[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	add	eax, DWORD PTR _iPressureForAutocracy$225823[ebp]
	mov	DWORD PTR _iPressureForAutocracy$225823[ebp], eax

; 3481 : 		if (iPressureForAutocracy > 0)

	cmp	DWORD PTR _iPressureForAutocracy$225823[ebp], 0
	jle	$LN169@DoPublicOp

; 3482 : 		{
; 3483 : 			Localization::String sTemp = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_AUTOCRACY");

	push	OFFSET ??_C@_0CE@FPNCOMGA@TXT_KEY_CO_OPINION_TT_FOR_AUTOCR@
	lea	ecx, DWORD PTR _sTemp$225840[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 3484 : 			CvString sIcons = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN161@DoPublicOp
	mov	DWORD PTR tv951[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN162@DoPublicOp
$LN161@DoPublicOp:
	mov	DWORD PTR tv951[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN162@DoPublicOp:
	mov	eax, DWORD PTR tv951[ebp]
	push	eax
	lea	ecx, DWORD PTR _sIcons$225843[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 3485 : 			for (int i = 0; i < iPressureForAutocracy; i++)

	mov	DWORD PTR _i$225844[ebp], 0
	jmp	SHORT $LN68@DoPublicOp
$LN67@DoPublicOp:
	mov	ecx, DWORD PTR _i$225844[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$225844[ebp], ecx
$LN68@DoPublicOp:
	mov	edx, DWORD PTR _i$225844[ebp]
	cmp	edx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	jge	SHORT $LN66@DoPublicOp

; 3486 : 			{
; 3487 : 				sIcons += "[ICON_IDEOLOGY_AUTOCRACY]";

	push	OFFSET ??_C@_0BK@CIIHNFEG@?$FLICON_IDEOLOGY_AUTOCRACY?$FN?$AA@
	lea	ecx, DWORD PTR _sIcons$225843[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3488 : 			}

	jmp	SHORT $LN67@DoPublicOp
$LN66@DoPublicOp:

; 3489 : 			sTemp << sIcons;

	lea	eax, DWORD PTR _sIcons$225843[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTemp$225840[ebp]
	push	ecx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3490 : 			strWorldIdeologyPressureString += sTemp.toUTF8();

	lea	ecx, DWORD PTR _sTemp$225840[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3491 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sIcons$225843[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sTemp$225840[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3492 : 		iPressureForOrder += GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eOrderBranch);

$LN169@DoPublicOp:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245897[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T245901[ebp], edx
	mov	eax, DWORD PTR _eOrderBranch$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245897[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T245901[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	add	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	mov	DWORD PTR _iPressureForOrder$225824[ebp], eax

; 3493 : 		if (iPressureForOrder > 0)

	cmp	DWORD PTR _iPressureForOrder$225824[ebp], 0
	jle	$LN65@DoPublicOp

; 3494 : 		{
; 3495 : 			Localization::String sTemp = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_ORDER");

	push	OFFSET ??_C@_0CA@HANNLGBB@TXT_KEY_CO_OPINION_TT_FOR_ORDER?$AA@
	lea	edx, DWORD PTR _sTemp$225850[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 3496 : 			CvString sIcons = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN175@DoPublicOp
	mov	DWORD PTR tv1003[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN176@DoPublicOp
$LN175@DoPublicOp:
	mov	DWORD PTR tv1003[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN176@DoPublicOp:
	mov	ecx, DWORD PTR tv1003[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sIcons$225853[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 3497 : 			for (int i = 0; i < iPressureForOrder; i++)

	mov	DWORD PTR _i$225854[ebp], 0
	jmp	SHORT $LN64@DoPublicOp
$LN63@DoPublicOp:
	mov	edx, DWORD PTR _i$225854[ebp]
	add	edx, 1
	mov	DWORD PTR _i$225854[ebp], edx
$LN64@DoPublicOp:
	mov	eax, DWORD PTR _i$225854[ebp]
	cmp	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	jge	SHORT $LN62@DoPublicOp

; 3498 : 			{
; 3499 : 				sIcons += "[ICON_IDEOLOGY_ORDER]";

	push	OFFSET ??_C@_0BG@GBNCFEJM@?$FLICON_IDEOLOGY_ORDER?$FN?$AA@
	lea	ecx, DWORD PTR _sIcons$225853[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3500 : 			}

	jmp	SHORT $LN63@DoPublicOp
$LN62@DoPublicOp:

; 3501 : 			sTemp << sIcons;

	lea	ecx, DWORD PTR _sIcons$225853[ebp]
	push	ecx
	lea	edx, DWORD PTR _sTemp$225850[ebp]
	push	edx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3502 : 			strWorldIdeologyPressureString += sTemp.toUTF8();

	lea	ecx, DWORD PTR _sTemp$225850[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3503 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _sIcons$225853[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sTemp$225850[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN65@DoPublicOp:

; 3504 : 
; 3505 : 		// Look at each civ
; 3506 : 		for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225859[ebp], 0
	jmp	SHORT $LN61@DoPublicOp
$LN60@DoPublicOp:
	mov	eax, DWORD PTR _iLoopPlayer$225859[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$225859[ebp], eax
$LN61@DoPublicOp:
	cmp	DWORD PTR _iLoopPlayer$225859[ebp], 22	; 00000016H
	jge	$LN59@DoPublicOp

; 3507 : 		{
; 3508 : 			CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$225859[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225863[ebp], ecx

; 3509 : 			if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245925[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$225859[ebp]
	cmp	edx, DWORD PTR $T245925[ebp]
	je	$LN58@DoPublicOp
	mov	eax, DWORD PTR _kPlayer$225863[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T245934[ebp], cl
	movzx	edx, BYTE PTR $T245934[ebp]
	test	edx, edx
	je	$LN58@DoPublicOp
	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	$LN58@DoPublicOp

; 3510 : 			{
; 3511 : 				PolicyBranchTypes eOtherCivIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eOtherCivIdeology$225866[ebp], eax

; 3512 : 				if (eOtherCivIdeology != NO_POLICY_BRANCH_TYPE)

	cmp	DWORD PTR _eOtherCivIdeology$225866[ebp], -1
	je	$LN58@DoPublicOp

; 3513 : 				{
; 3514 : 					int iCulturalDominanceOverUs = kPlayer.GetCulture()->GetInfluenceLevel(m_pPlayer->GetID()) - m_pPlayer->GetCulture()->GetInfluenceLevel((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T245943[ebp], eax
	mov	ecx, DWORD PTR $T245943[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	esi, eax
	mov	edx, DWORD PTR _iLoopPlayer$225859[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	sub	esi, eax
	mov	DWORD PTR _iCulturalDominanceOverUs$225868[ebp], esi

; 3515 : 					if (iCulturalDominanceOverUs > 0)

	cmp	DWORD PTR _iCulturalDominanceOverUs$225868[ebp], 0
	jle	$LN58@DoPublicOp

; 3516 : 					{
; 3517 : 						if (eOtherCivIdeology == eFreedomBranch)

	mov	ecx, DWORD PTR _eOtherCivIdeology$225866[ebp]
	cmp	ecx, DWORD PTR _eFreedomBranch$[ebp]
	jne	$LN55@DoPublicOp

; 3518 : 						{
; 3519 : 							iPressureForFreedom += iCulturalDominanceOverUs;

	mov	edx, DWORD PTR _iPressureForFreedom$225822[ebp]
	add	edx, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	mov	DWORD PTR _iPressureForFreedom$225822[ebp], edx

; 3520 : 							if (strFreedomPressureString.size() > 0)

	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN54@DoPublicOp

; 3521 : 							{
; 3522 : 								strFreedomPressureString += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN54@DoPublicOp:

; 3523 : 							}
; 3524 : 							strFreedomPressureString += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3525 : 							for (int iI = 0; iI < iCulturalDominanceOverUs; iI++)

	mov	DWORD PTR _iI$225874[ebp], 0
	jmp	SHORT $LN53@DoPublicOp
$LN52@DoPublicOp:
	mov	eax, DWORD PTR _iI$225874[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$225874[ebp], eax
$LN53@DoPublicOp:
	mov	ecx, DWORD PTR _iI$225874[ebp]
	cmp	ecx, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	jge	SHORT $LN51@DoPublicOp

; 3526 : 							{
; 3527 : 								strFreedomPressureString += "[ICON_IDEOLOGY_FREEDOM]";

	push	OFFSET ??_C@_0BI@NJMBEMHK@?$FLICON_IDEOLOGY_FREEDOM?$FN?$AA@
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3528 : 							}

	jmp	SHORT $LN52@DoPublicOp
$LN51@DoPublicOp:

; 3529 : 						}
; 3530 : 						else if (eOtherCivIdeology == eAutocracyBranch)

	jmp	$LN58@DoPublicOp
$LN55@DoPublicOp:
	mov	edx, DWORD PTR _eOtherCivIdeology$225866[ebp]
	cmp	edx, DWORD PTR _eAutocracyBranch$[ebp]
	jne	$LN49@DoPublicOp

; 3531 : 						{
; 3532 : 							iPressureForAutocracy += iCulturalDominanceOverUs;

	mov	eax, DWORD PTR _iPressureForAutocracy$225823[ebp]
	add	eax, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	mov	DWORD PTR _iPressureForAutocracy$225823[ebp], eax

; 3533 : 							if (strAutocracyPressureString.size() > 0)

	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN48@DoPublicOp

; 3534 : 							{
; 3535 : 								strAutocracyPressureString += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN48@DoPublicOp:

; 3536 : 							}
; 3537 : 							strAutocracyPressureString += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3538 : 							for (int iI = 0; iI < iCulturalDominanceOverUs; iI++)

	mov	DWORD PTR _iI$225881[ebp], 0
	jmp	SHORT $LN47@DoPublicOp
$LN46@DoPublicOp:
	mov	ecx, DWORD PTR _iI$225881[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$225881[ebp], ecx
$LN47@DoPublicOp:
	mov	edx, DWORD PTR _iI$225881[ebp]
	cmp	edx, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	jge	SHORT $LN45@DoPublicOp

; 3539 : 							{
; 3540 : 								strAutocracyPressureString += "[ICON_IDEOLOGY_AUTOCRACY]";

	push	OFFSET ??_C@_0BK@CIIHNFEG@?$FLICON_IDEOLOGY_AUTOCRACY?$FN?$AA@
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3541 : 							}

	jmp	SHORT $LN46@DoPublicOp
$LN45@DoPublicOp:

; 3542 : 						}
; 3543 : 						else

	jmp	$LN58@DoPublicOp
$LN49@DoPublicOp:

; 3544 : 						{
; 3545 : 							iPressureForOrder += iCulturalDominanceOverUs;

	mov	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	add	eax, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	mov	DWORD PTR _iPressureForOrder$225824[ebp], eax

; 3546 : 							if (strOrderPressureString.size() > 0)

	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN43@DoPublicOp

; 3547 : 							{
; 3548 : 								strOrderPressureString += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN43@DoPublicOp:

; 3549 : 							}
; 3550 : 							strOrderPressureString += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$225863[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3551 : 							for (int iI = 0; iI < iCulturalDominanceOverUs; iI++)

	mov	DWORD PTR _iI$225887[ebp], 0
	jmp	SHORT $LN42@DoPublicOp
$LN41@DoPublicOp:
	mov	ecx, DWORD PTR _iI$225887[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$225887[ebp], ecx
$LN42@DoPublicOp:
	mov	edx, DWORD PTR _iI$225887[ebp]
	cmp	edx, DWORD PTR _iCulturalDominanceOverUs$225868[ebp]
	jge	SHORT $LN58@DoPublicOp

; 3552 : 							{
; 3553 : 								strOrderPressureString += "[ICON_IDEOLOGY_ORDER]";

	push	OFFSET ??_C@_0BG@GBNCFEJM@?$FLICON_IDEOLOGY_ORDER?$FN?$AA@
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3554 : 							}

	jmp	SHORT $LN41@DoPublicOp
$LN58@DoPublicOp:

; 3555 : 						}
; 3556 : 					}
; 3557 : 				}
; 3558 : 			}
; 3559 : 		}

	jmp	$LN60@DoPublicOp
$LN59@DoPublicOp:

; 3560 : 
; 3561 : 		// Now compute satisfaction with this branch compared to two other ones
; 3562 : 		int iDissatisfaction = 0;

	mov	DWORD PTR _iDissatisfaction$225891[ebp], 0

; 3563 : 		if (eCurrentIdeology == eFreedomBranch)

	mov	eax, DWORD PTR _eCurrentIdeology$[ebp]
	cmp	eax, DWORD PTR _eFreedomBranch$[ebp]
	jne	SHORT $LN39@DoPublicOp

; 3564 : 		{
; 3565 : 			if (iPressureForFreedom >= (iPressureForAutocracy + iPressureForOrder))

	mov	ecx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	add	ecx, DWORD PTR _iPressureForOrder$225824[ebp]
	cmp	DWORD PTR _iPressureForFreedom$225822[ebp], ecx
	jl	SHORT $LN38@DoPublicOp

; 3566 : 			{
; 3567 : 				m_eOpinion = PUBLIC_OPINION_CONTENT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], 0

; 3568 : 			}
; 3569 : 			else

	jmp	SHORT $LN37@DoPublicOp
$LN38@DoPublicOp:

; 3570 : 			{
; 3571 : 				if (iPressureForAutocracy > iPressureForOrder)

	mov	eax, DWORD PTR _iPressureForAutocracy$225823[ebp]
	cmp	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	jle	SHORT $LN36@DoPublicOp

; 3572 : 				{
; 3573 : 					m_ePreferredIdeology = eAutocracyBranch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eAutocracyBranch$[ebp]
	mov	DWORD PTR [ecx+212], edx
	jmp	SHORT $LN35@DoPublicOp
$LN36@DoPublicOp:

; 3574 : 				}
; 3575 : 				else if (iPressureForOrder >= iPressureForAutocracy)

	mov	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	cmp	eax, DWORD PTR _iPressureForAutocracy$225823[ebp]
	jl	SHORT $LN35@DoPublicOp

; 3576 : 				{
; 3577 : 					m_ePreferredIdeology = eOrderBranch;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eOrderBranch$[ebp]
	mov	DWORD PTR [ecx+212], edx
$LN35@DoPublicOp:

; 3578 : 				}
; 3579 : 				iDissatisfaction = (iPressureForAutocracy + iPressureForOrder) - iPressureForFreedom;

	mov	eax, DWORD PTR _iPressureForAutocracy$225823[ebp]
	add	eax, DWORD PTR _iPressureForOrder$225824[ebp]
	sub	eax, DWORD PTR _iPressureForFreedom$225822[ebp]
	mov	DWORD PTR _iDissatisfaction$225891[ebp], eax
$LN37@DoPublicOp:

; 3580 : 			}

	jmp	$LN33@DoPublicOp
$LN39@DoPublicOp:

; 3581 : 		}
; 3582 : 		else if (eCurrentIdeology == eAutocracyBranch)

	mov	ecx, DWORD PTR _eCurrentIdeology$[ebp]
	cmp	ecx, DWORD PTR _eAutocracyBranch$[ebp]
	jne	SHORT $LN32@DoPublicOp

; 3583 : 		{
; 3584 : 			if (iPressureForAutocracy >= (iPressureForFreedom + iPressureForOrder))

	mov	edx, DWORD PTR _iPressureForFreedom$225822[ebp]
	add	edx, DWORD PTR _iPressureForOrder$225824[ebp]
	cmp	DWORD PTR _iPressureForAutocracy$225823[ebp], edx
	jl	SHORT $LN31@DoPublicOp

; 3585 : 			{
; 3586 : 				m_eOpinion = PUBLIC_OPINION_CONTENT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], 0

; 3587 : 			}
; 3588 : 			else

	jmp	SHORT $LN30@DoPublicOp
$LN31@DoPublicOp:

; 3589 : 			{
; 3590 : 				if (iPressureForFreedom >= iPressureForOrder)

	mov	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	cmp	ecx, DWORD PTR _iPressureForOrder$225824[ebp]
	jl	SHORT $LN29@DoPublicOp

; 3591 : 				{
; 3592 : 					m_ePreferredIdeology = eFreedomBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eFreedomBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
	jmp	SHORT $LN28@DoPublicOp
$LN29@DoPublicOp:

; 3593 : 				}
; 3594 : 				else if (iPressureForOrder > iPressureForFreedom)

	mov	ecx, DWORD PTR _iPressureForOrder$225824[ebp]
	cmp	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	jle	SHORT $LN28@DoPublicOp

; 3595 : 				{
; 3596 : 					m_ePreferredIdeology = eOrderBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eOrderBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
$LN28@DoPublicOp:

; 3597 : 				}
; 3598 : 				iDissatisfaction = (iPressureForFreedom + iPressureForOrder) - iPressureForAutocracy;

	mov	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	add	ecx, DWORD PTR _iPressureForOrder$225824[ebp]
	sub	ecx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	mov	DWORD PTR _iDissatisfaction$225891[ebp], ecx
$LN30@DoPublicOp:

; 3599 : 			}
; 3600 : 		}
; 3601 : 		else

	jmp	SHORT $LN33@DoPublicOp
$LN32@DoPublicOp:

; 3602 : 		{
; 3603 : 			if (iPressureForOrder >= (iPressureForFreedom + iPressureForAutocracy))

	mov	edx, DWORD PTR _iPressureForFreedom$225822[ebp]
	add	edx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	cmp	DWORD PTR _iPressureForOrder$225824[ebp], edx
	jl	SHORT $LN25@DoPublicOp

; 3604 : 			{
; 3605 : 				m_eOpinion = PUBLIC_OPINION_CONTENT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], 0

; 3606 : 			}
; 3607 : 			else

	jmp	SHORT $LN33@DoPublicOp
$LN25@DoPublicOp:

; 3608 : 			{
; 3609 : 				if (iPressureForFreedom > iPressureForAutocracy)

	mov	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	cmp	ecx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	jle	SHORT $LN23@DoPublicOp

; 3610 : 				{
; 3611 : 					m_ePreferredIdeology = eFreedomBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eFreedomBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
	jmp	SHORT $LN22@DoPublicOp
$LN23@DoPublicOp:

; 3612 : 				}
; 3613 : 				else if (iPressureForAutocracy >= iPressureForFreedom)

	mov	ecx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	cmp	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	jl	SHORT $LN22@DoPublicOp

; 3614 : 				{
; 3615 : 					m_ePreferredIdeology = eAutocracyBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eAutocracyBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
$LN22@DoPublicOp:

; 3616 : 				}
; 3617 : 				iDissatisfaction = (iPressureForFreedom + iPressureForAutocracy) - iPressureForOrder;

	mov	ecx, DWORD PTR _iPressureForFreedom$225822[ebp]
	add	ecx, DWORD PTR _iPressureForAutocracy$225823[ebp]
	sub	ecx, DWORD PTR _iPressureForOrder$225824[ebp]
	mov	DWORD PTR _iDissatisfaction$225891[ebp], ecx
$LN33@DoPublicOp:

; 3618 : 			}
; 3619 : 		}
; 3620 : 
; 3621 : 		// Compute effects of dissatisfaction
; 3622 : 		int iPerCityUnhappy = 1;

	mov	DWORD PTR _iPerCityUnhappy$225911[ebp], 1

; 3623 : 		int iUnhappyPerXPop = 10;

	mov	DWORD PTR _iUnhappyPerXPop$225912[ebp], 10 ; 0000000aH

; 3624 : 		if (m_eOpinion != PUBLIC_OPINION_CONTENT)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	$LN20@DoPublicOp

; 3625 : 		{
; 3626 : 			if (iDissatisfaction < 3)

	cmp	DWORD PTR _iDissatisfaction$225891[ebp], 3
	jge	SHORT $LN19@DoPublicOp

; 3627 : 			{
; 3628 : 				m_eOpinion = PUBLIC_OPINION_DISSIDENTS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], 1
	jmp	SHORT $LN18@DoPublicOp
$LN19@DoPublicOp:

; 3629 : 			}
; 3630 : 			else if (iDissatisfaction < 5)

	cmp	DWORD PTR _iDissatisfaction$225891[ebp], 5
	jge	SHORT $LN17@DoPublicOp

; 3631 : 			{
; 3632 : 				m_eOpinion = PUBLIC_OPINION_CIVIL_RESISTANCE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], 2

; 3633 : 			}
; 3634 : 			else

	jmp	SHORT $LN18@DoPublicOp
$LN17@DoPublicOp:

; 3635 : 			{
; 3636 : 				m_eOpinion = PUBLIC_OPINION_REVOLUTIONARY_WAVE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], 3
$LN18@DoPublicOp:

; 3637 : 			}
; 3638 : #ifdef NQ_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER_FROM_POLICIES
; 3639 : 			int iUnhappinessModifier = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER);

	push	66					; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iUnhappinessModifier$225918[ebp], eax

; 3640 : 			m_iOpinionUnhappiness = ComputePublicOpinionUnhappiness(iDissatisfaction, iPerCityUnhappy, iUnhappyPerXPop, iUnhappinessModifier);

	mov	ecx, DWORD PTR _iUnhappinessModifier$225918[ebp]
	push	ecx
	lea	edx, DWORD PTR _iUnhappyPerXPop$225912[ebp]
	push	edx
	lea	eax, DWORD PTR _iPerCityUnhappy$225911[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDissatisfaction$225891[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z ; CvPlayerCulture::ComputePublicOpinionUnhappiness
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], eax

; 3641 : #else
; 3642 : 			m_iOpinionUnhappiness = ComputePublicOpinionUnhappiness(iDissatisfaction, iPerCityUnhappy, iUnhappyPerXPop);
; 3643 : #endif
; 3644 : 
; 3645 : 
; 3646 : 			// Find civ exerting greatest pressure
; 3647 : 			int iGreatestDominance = -1;

	mov	DWORD PTR _iGreatestDominance$225919[ebp], -1

; 3648 : 			for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225920[ebp], 0
	jmp	SHORT $LN15@DoPublicOp
$LN14@DoPublicOp:
	mov	eax, DWORD PTR _iLoopPlayer$225920[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$225920[ebp], eax
$LN15@DoPublicOp:
	cmp	DWORD PTR _iLoopPlayer$225920[ebp], 22	; 00000016H
	jge	$LN20@DoPublicOp

; 3649 : 			{
; 3650 : 				CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$225920[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225924[ebp], ecx

; 3651 : 				if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245955[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$225920[ebp]
	cmp	edx, DWORD PTR $T245955[ebp]
	je	$LN12@DoPublicOp
	mov	eax, DWORD PTR _kPlayer$225924[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T245964[ebp], cl
	movzx	edx, BYTE PTR $T245964[ebp]
	test	edx, edx
	je	$LN12@DoPublicOp
	mov	ecx, DWORD PTR _kPlayer$225924[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	$LN12@DoPublicOp

; 3652 : 				{
; 3653 : 					PolicyBranchTypes eOtherCivIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$225924[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eOtherCivIdeology$225927[ebp], eax

; 3654 : 					if (eOtherCivIdeology == m_ePreferredIdeology)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eOtherCivIdeology$225927[ebp]
	cmp	edx, DWORD PTR [ecx+212]
	jne	$LN12@DoPublicOp

; 3655 : 					{
; 3656 : 						int iCulturalDominanceOverUs = kPlayer.GetCulture()->GetInfluenceLevel(m_pPlayer->GetID()) - m_pPlayer->GetCulture()->GetInfluenceLevel((PlayerTypes)iLoopPlayer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T245973[ebp], edx
	mov	eax, DWORD PTR $T245973[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$225924[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	esi, eax
	mov	ecx, DWORD PTR _iLoopPlayer$225920[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	sub	esi, eax
	mov	DWORD PTR _iCulturalDominanceOverUs$225929[ebp], esi

; 3657 : 						if (iCulturalDominanceOverUs > 0)

	cmp	DWORD PTR _iCulturalDominanceOverUs$225929[ebp], 0
	jle	SHORT $LN12@DoPublicOp

; 3658 : 						{
; 3659 : 							if (iCulturalDominanceOverUs > iGreatestDominance)

	mov	eax, DWORD PTR _iCulturalDominanceOverUs$225929[ebp]
	cmp	eax, DWORD PTR _iGreatestDominance$225919[ebp]
	jle	SHORT $LN12@DoPublicOp

; 3660 : 							{
; 3661 : 								iGreatestDominance = iCulturalDominanceOverUs;

	mov	ecx, DWORD PTR _iCulturalDominanceOverUs$225929[ebp]
	mov	DWORD PTR _iGreatestDominance$225919[ebp], ecx

; 3662 : 								m_eOpinionBiggestInfluence = (PlayerTypes)iLoopPlayer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iLoopPlayer$225920[ebp]
	mov	DWORD PTR [edx+204], eax
$LN12@DoPublicOp:

; 3663 : 							}
; 3664 : 						}
; 3665 : 					}
; 3666 : 				}
; 3667 : 			}

	jmp	$LN14@DoPublicOp
$LN20@DoPublicOp:

; 3668 : 		}
; 3669 : 
; 3670 : 		// Build tooltip
; 3671 : 		if (strFreedomPressureString.size() > 0)

	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN8@DoPublicOp

; 3672 : 		{
; 3673 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_FREEDOM");

	push	OFFSET ??_C@_0CC@OOKLHOAM@TXT_KEY_CO_OPINION_TT_FOR_FREEDO@
	lea	ecx, DWORD PTR _locText$225935[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 3674 : 			locText << strFreedomPressureString;

	lea	edx, DWORD PTR _strFreedomPressureString$225826[ebp]
	push	edx
	lea	eax, DWORD PTR _locText$225935[ebp]
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3675 : 			strFreedomPressureString = locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225935[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T245979[ebp], eax
	cmp	DWORD PTR $T245979[ebp], 0
	je	SHORT $LN210@DoPublicOp
	mov	ecx, DWORD PTR $T245979[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN211@DoPublicOp
$LN210@DoPublicOp:
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN211@DoPublicOp:

; 3676 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225935[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN8@DoPublicOp:

; 3677 : 		if (strAutocracyPressureString.size() > 0)

	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN7@DoPublicOp

; 3678 : 		{
; 3679 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_AUTOCRACY");

	push	OFFSET ??_C@_0CE@FPNCOMGA@TXT_KEY_CO_OPINION_TT_FOR_AUTOCR@
	lea	edx, DWORD PTR _locText$225938[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 3680 : 			locText << strAutocracyPressureString;

	lea	eax, DWORD PTR _strAutocracyPressureString$225827[ebp]
	push	eax
	lea	ecx, DWORD PTR _locText$225938[ebp]
	push	ecx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3681 : 			strAutocracyPressureString = locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225938[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T245985[ebp], eax
	cmp	DWORD PTR $T245985[ebp], 0
	je	SHORT $LN214@DoPublicOp
	mov	edx, DWORD PTR $T245985[ebp]
	push	edx
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN215@DoPublicOp
$LN214@DoPublicOp:
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN215@DoPublicOp:

; 3682 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225938[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN7@DoPublicOp:

; 3683 : 		if (strOrderPressureString.size() > 0)

	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN6@DoPublicOp

; 3684 : 		{
; 3685 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_FOR_ORDER");

	push	OFFSET ??_C@_0CA@HANNLGBB@TXT_KEY_CO_OPINION_TT_FOR_ORDER?$AA@
	lea	eax, DWORD PTR _locText$225941[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 3686 : 			locText << strOrderPressureString;

	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	push	ecx
	lea	edx, DWORD PTR _locText$225941[ebp]
	push	edx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 3687 : 			strOrderPressureString = locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225941[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T245991[ebp], eax
	cmp	DWORD PTR $T245991[ebp], 0
	je	SHORT $LN218@DoPublicOp
	mov	eax, DWORD PTR $T245991[ebp]
	push	eax
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN219@DoPublicOp
$LN218@DoPublicOp:
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN219@DoPublicOp:

; 3688 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225941[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN6@DoPublicOp:

; 3689 : 
; 3690 : 		if (strWorldIdeologyPressureString.size() != 0)

	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	je	SHORT $LN5@DoPublicOp

; 3691 : 		{
; 3692 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_INFLUENCED_WORLD_IDEOLOGY");

	push	OFFSET ??_C@_0DA@HOKBMHGK@TXT_KEY_CO_OPINION_TT_INFLUENCED@
	lea	ecx, DWORD PTR _locText$225944[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH

; 3693 : 			m_strOpinionTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225944[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3694 : 			m_strOpinionTooltip += strWorldIdeologyPressureString;

	lea	edx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 3695 : 			m_strOpinionTooltip += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3696 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225944[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN5@DoPublicOp:

; 3697 : 
; 3698 : 		if ((strFreedomPressureString.size() + strAutocracyPressureString.size() + strOrderPressureString.size()) == 0)

	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	mov	esi, eax
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	add	esi, eax
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	add	esi, eax
	jne	SHORT $LN4@DoPublicOp

; 3699 : 		{
; 3700 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_NOT_INFLUENCED");

	push	OFFSET ??_C@_0CF@FCBBIKLD@TXT_KEY_CO_OPINION_TT_NOT_INFLUE@
	lea	eax, DWORD PTR _locText$225949[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 3701 : 			m_strOpinionTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225949[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3702 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225949[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3703 : 		else

	jmp	$LN3@DoPublicOp
$LN4@DoPublicOp:

; 3704 : 		{
; 3705 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_INFLUENCED_BY");

	push	OFFSET ??_C@_0CE@MMHJBKIK@TXT_KEY_CO_OPINION_TT_INFLUENCED@
	lea	ecx, DWORD PTR _locText$225953[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H

; 3706 : 			m_strOpinionTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225953[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3707 : 			m_strOpinionTooltip += strFreedomPressureString + strAutocracyPressureString + strOrderPressureString;

	lea	edx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	push	edx
	lea	eax, DWORD PTR _strFreedomPressureString$225826[ebp]
	push	eax
	lea	ecx, DWORD PTR $T245751[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv645[ebp], eax
	mov	edx, DWORD PTR tv645[ebp]
	mov	DWORD PTR tv838[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	eax, DWORD PTR _strOrderPressureString$225828[ebp]
	push	eax
	mov	ecx, DWORD PTR tv838[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245752[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv635[ebp], eax
	mov	eax, DWORD PTR tv635[ebp]
	mov	DWORD PTR tv840[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR tv840[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T245752[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR $T245751[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3708 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225953[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN3@DoPublicOp:

; 3709 : 
; 3710 : 		if (m_ePreferredIdeology != NO_POLICY_BRANCH_TYPE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], -1
	je	$LN2@DoPublicOp

; 3711 : 		{
; 3712 : 			Localization::String locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_PREFERRED_IDEOLOGY");

	push	OFFSET ??_C@_0CJ@DPKPFMMB@TXT_KEY_CO_OPINION_TT_PREFERRED_@
	lea	eax, DWORD PTR _locText$225959[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H

; 3713 : 			locText << GC.getPolicyBranchInfo(m_ePreferredIdeology)->GetDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPolicyBranchInfo@CvGlobals@@QAEPAVCvPolicyBranchEntry@@W4PolicyBranchTypes@@@Z ; CvGlobals::getPolicyBranchInfo
	mov	DWORD PTR $T245995[ebp], eax
	mov	ecx, DWORD PTR $T245995[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T245753[ebp], eax
	lea	eax, DWORD PTR $T245753[ebp]
	push	eax
	lea	ecx, DWORD PTR _locText$225959[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3714 : 			m_strOpinionTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225959[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3715 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225959[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN2@DoPublicOp:

; 3716 :  
; 3717 : 		if (m_iOpinionUnhappiness > 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+216], 0
	jle	$LN1@DoPublicOp

; 3718 : 		{
; 3719 : 			Localization::String locText;

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H

; 3720 : 			locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_UNHAPPINESS_LINE1");

	push	OFFSET ??_C@_0CI@NHBDELDK@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
	lea	eax, DWORD PTR $T245754[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv722[ebp], eax
	mov	ecx, DWORD PTR tv722[ebp]
	mov	DWORD PTR tv844[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	edx, DWORD PTR tv844[ebp]
	push	edx
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245754[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3721 : 			locText << m_iOpinionUnhappiness;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	push	eax
	lea	ecx, DWORD PTR _locText$225964[ebp]
	push	ecx
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 3722 : 			m_strOpinionUnhappinessTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3723 : 
; 3724 : 			locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_UNHAPPINESS_LINE2");

	push	OFFSET ??_C@_0CI@PMDOBIPJ@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
	lea	edx, DWORD PTR $T245755[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv694[ebp], eax
	mov	eax, DWORD PTR tv694[ebp]
	mov	DWORD PTR tv846[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	ecx, DWORD PTR tv846[ebp]
	push	ecx
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245755[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3725 : 			m_strOpinionUnhappinessTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3726 : 
; 3727 : 			locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_UNHAPPINESS_LINE3");

	push	OFFSET ??_C@_0CI@OFCFCJLI@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
	lea	edx, DWORD PTR $T245756[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv583[ebp], eax
	mov	eax, DWORD PTR tv583[ebp]
	mov	DWORD PTR tv848[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR tv848[ebp]
	push	ecx
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245756[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3728 : 			locText << iPerCityUnhappy;

	lea	edx, DWORD PTR _iPerCityUnhappy$225911[ebp]
	push	edx
	lea	eax, DWORD PTR _locText$225964[ebp]
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 3729 : 			m_strOpinionUnhappinessTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3730 : 
; 3731 : 			locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_UNHAPPINESS_LINE4");

	push	OFFSET ??_C@_0CI@KKGELPHP@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
	lea	ecx, DWORD PTR $T245757[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv566[ebp], eax
	mov	edx, DWORD PTR tv566[ebp]
	mov	DWORD PTR tv850[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	eax, DWORD PTR tv850[ebp]
	push	eax
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245757[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3732 : 			locText << iUnhappyPerXPop;

	lea	ecx, DWORD PTR _iUnhappyPerXPop$225912[ebp]
	push	ecx
	lea	edx, DWORD PTR _locText$225964[ebp]
	push	edx
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 3733 : 			m_strOpinionUnhappinessTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3734 : 
; 3735 : #ifdef NQ_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER_FROM_POLICIES
; 3736 : 			int iUnhappinessModifier = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER);

	push	66					; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iUnhappinessModifier$225973[ebp], eax

; 3737 : 			locText = Localization::Lookup("TXT_KEY_CO_OPINION_TT_UNHAPPINESS_LINE5");

	push	OFFSET ??_C@_0CI@LDHPIODO@TXT_KEY_CO_OPINION_TT_UNHAPPINES@
	lea	ecx, DWORD PTR $T245758[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv549[ebp], eax
	mov	edx, DWORD PTR tv549[ebp]
	mov	DWORD PTR tv852[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	eax, DWORD PTR tv852[ebp]
	push	eax
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR $T245758[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3738 : 			locText << -iUnhappinessModifier;

	mov	ecx, DWORD PTR _iUnhappinessModifier$225973[ebp]
	neg	ecx
	mov	DWORD PTR $T245759[ebp], ecx
	lea	edx, DWORD PTR $T245759[ebp]
	push	edx
	lea	eax, DWORD PTR _locText$225964[ebp]
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 3739 : 			m_strOpinionUnhappinessTooltip += locText.toUTF8();

	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 248				; 000000f8H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3740 : #endif
; 3741 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _locText$225964[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN1@DoPublicOp:

; 3742 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN74@DoPublicOp:

; 3743 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _locOverview$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN77@DoPublicOp:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$0:
	lea	ecx, DWORD PTR _locOverview$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strWorldIdeologyPressureString$225825[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strFreedomPressureString$225826[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$3:
	lea	ecx, DWORD PTR _strAutocracyPressureString$225827[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$4:
	lea	ecx, DWORD PTR _strOrderPressureString$225828[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$5:
	lea	ecx, DWORD PTR _sTemp$225830[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$6:
	lea	ecx, DWORD PTR _sIcons$225833[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$7:
	lea	ecx, DWORD PTR _sTemp$225840[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$8:
	lea	ecx, DWORD PTR _sIcons$225843[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$9:
	lea	ecx, DWORD PTR _sTemp$225850[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$10:
	lea	ecx, DWORD PTR _sIcons$225853[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$11:
	lea	ecx, DWORD PTR _locText$225935[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$12:
	lea	ecx, DWORD PTR _locText$225938[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$13:
	lea	ecx, DWORD PTR _locText$225941[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$14:
	lea	ecx, DWORD PTR _locText$225944[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$15:
	lea	ecx, DWORD PTR _locText$225949[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$16:
	lea	ecx, DWORD PTR _locText$225953[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$17:
	lea	ecx, DWORD PTR $T245751[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$18:
	lea	ecx, DWORD PTR $T245752[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$19:
	lea	ecx, DWORD PTR _locText$225959[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$20:
	lea	ecx, DWORD PTR _locText$225964[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$21:
	lea	ecx, DWORD PTR $T245754[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$22:
	lea	ecx, DWORD PTR $T245755[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$23:
	lea	ecx, DWORD PTR $T245756[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$24:
	lea	ecx, DWORD PTR $T245757[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ$25:
	lea	ecx, DWORD PTR $T245758[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1912]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoPublicOpinion@CvPlayerCulture@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoPublicOpinion@CvPlayerCulture@@QAEXXZ ENDP		; CvPlayerCulture::DoPublicOpinion
PUBLIC	?ComputeHypotheticalPublicOpinionUnhappiness@CvPlayerCulture@@QAEHW4PolicyBranchTypes@@@Z ; CvPlayerCulture::ComputeHypotheticalPublicOpinionUnhappiness
; Function compile flags: /Odtp
;	COMDAT ?ComputeHypotheticalPublicOpinionUnhappiness@CvPlayerCulture@@QAEHW4PolicyBranchTypes@@@Z
_TEXT	SEGMENT
_this$ = -96						; size = 4
$T246097 = -92						; size = 4
$T246088 = -85						; size = 1
$T246079 = -84						; size = 4
$T246067 = -80						; size = 4
$T246063 = -76						; size = 4
$T246054 = -72						; size = 4
$T246050 = -68						; size = 4
$T246041 = -64						; size = 4
$T246037 = -60						; size = 4
_iUnhappinessModifier$226029 = -56			; size = 4
_iCulturalDominanceOverUs$226002 = -52			; size = 4
_eOtherCivIdeology$226000 = -48				; size = 4
_kPlayer$225997 = -44					; size = 4
_iLoopPlayer$225993 = -40				; size = 4
_iPressureForAutocracy$ = -36				; size = 4
_iPressureForFreedom$ = -32				; size = 4
_iDissatisfaction$ = -28				; size = 4
_iPerCityUnhappy$ = -24					; size = 4
_eFreedomBranch$ = -20					; size = 4
_iUnhappyPerXPop$ = -16					; size = 4
_eOrderBranch$ = -12					; size = 4
_iPressureForOrder$ = -8				; size = 4
_eAutocracyBranch$ = -4					; size = 4
_eBranch$ = 8						; size = 4
?ComputeHypotheticalPublicOpinionUnhappiness@CvPlayerCulture@@QAEHW4PolicyBranchTypes@@@Z PROC ; CvPlayerCulture::ComputeHypotheticalPublicOpinionUnhappiness, COMDAT
; _this$ = ecx

; 3747 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 3748 : 	int iDissatisfaction = 0;

	mov	DWORD PTR _iDissatisfaction$[ebp], 0

; 3749 : 
; 3750 : 	PolicyBranchTypes eFreedomBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_FREEDOM();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8376
	mov	DWORD PTR _eFreedomBranch$[ebp], eax

; 3751 : 	PolicyBranchTypes eAutocracyBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_AUTOCRACY();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8380
	mov	DWORD PTR _eAutocracyBranch$[ebp], ecx

; 3752 : 	PolicyBranchTypes eOrderBranch = (PolicyBranchTypes)GC.getPOLICY_BRANCH_ORDER();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8384
	mov	DWORD PTR _eOrderBranch$[ebp], edx

; 3753 : 
; 3754 : 	if (eFreedomBranch == NO_POLICY_BRANCH_TYPE || eAutocracyBranch == NO_POLICY_BRANCH_TYPE || eOrderBranch == NO_POLICY_BRANCH_TYPE)

	cmp	DWORD PTR _eFreedomBranch$[ebp], -1
	je	SHORT $LN29@ComputeHyp
	cmp	DWORD PTR _eAutocracyBranch$[ebp], -1
	je	SHORT $LN29@ComputeHyp
	cmp	DWORD PTR _eOrderBranch$[ebp], -1
	jne	SHORT $LN41@ComputeHyp
$LN29@ComputeHyp:

; 3755 : 	{
; 3756 : 		return 0;

	xor	eax, eax
	jmp	$LN31@ComputeHyp

; 3757 : 	}
; 3758 : 
; 3759 : 	// Start with World Congress
; 3760 : 	int iPressureForFreedom = GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eFreedomBranch);

$LN41@ComputeHyp:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T246037[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246041[ebp], eax
	mov	ecx, DWORD PTR _eFreedomBranch$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246037[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246041[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	mov	DWORD PTR _iPressureForFreedom$[ebp], eax

; 3761 : 	int iPressureForAutocracy = GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eAutocracyBranch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T246050[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246054[ebp], eax
	mov	ecx, DWORD PTR _eAutocracyBranch$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246050[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246054[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	mov	DWORD PTR _iPressureForAutocracy$[ebp], eax

; 3762 : 	int iPressureForOrder = GC.getGame().GetGameLeagues()->GetPressureForIdeology(m_pPlayer->GetID(), eOrderBranch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T246063[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246067[ebp], eax
	mov	ecx, DWORD PTR _eOrderBranch$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246063[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246067[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetPressureForIdeology@CvGameLeagues@@QAEHW4PlayerTypes@@W4PolicyBranchTypes@@@Z ; CvGameLeagues::GetPressureForIdeology
	mov	DWORD PTR _iPressureForOrder$[ebp], eax

; 3763 : 
; 3764 : 	// Look at each civ
; 3765 : 	for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$225993[ebp], 0
	jmp	SHORT $LN28@ComputeHyp
$LN27@ComputeHyp:
	mov	eax, DWORD PTR _iLoopPlayer$225993[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$225993[ebp], eax
$LN28@ComputeHyp:
	cmp	DWORD PTR _iLoopPlayer$225993[ebp], 22	; 00000016H
	jge	$LN26@ComputeHyp

; 3766 : 	{
; 3767 : 		CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$225993[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$225997[ebp], ecx

; 3768 : 		if (iLoopPlayer != m_pPlayer->GetID() && kPlayer.isAlive() && !kPlayer.isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T246079[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$225993[ebp]
	cmp	edx, DWORD PTR $T246079[ebp]
	je	$LN25@ComputeHyp
	mov	eax, DWORD PTR _kPlayer$225997[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T246088[ebp], cl
	movzx	edx, BYTE PTR $T246088[ebp]
	test	edx, edx
	je	$LN25@ComputeHyp
	mov	ecx, DWORD PTR _kPlayer$225997[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	$LN25@ComputeHyp

; 3769 : 		{
; 3770 : 			PolicyBranchTypes eOtherCivIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$225997[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eOtherCivIdeology$226000[ebp], eax

; 3771 : 			if (eOtherCivIdeology != NO_POLICY_BRANCH_TYPE)

	cmp	DWORD PTR _eOtherCivIdeology$226000[ebp], -1
	je	SHORT $LN25@ComputeHyp

; 3772 : 			{
; 3773 : 				int iCulturalDominanceOverUs = kPlayer.GetCulture()->GetInfluenceLevel(m_pPlayer->GetID()) - m_pPlayer->GetCulture()->GetInfluenceLevel((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T246097[ebp], eax
	mov	ecx, DWORD PTR $T246097[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$225997[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	esi, eax
	mov	edx, DWORD PTR _iLoopPlayer$225993[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	sub	esi, eax
	mov	DWORD PTR _iCulturalDominanceOverUs$226002[ebp], esi

; 3774 : 				if (iCulturalDominanceOverUs > 0)

	cmp	DWORD PTR _iCulturalDominanceOverUs$226002[ebp], 0
	jle	SHORT $LN25@ComputeHyp

; 3775 : 				{
; 3776 : 					if (eOtherCivIdeology == eFreedomBranch)

	mov	ecx, DWORD PTR _eOtherCivIdeology$226000[ebp]
	cmp	ecx, DWORD PTR _eFreedomBranch$[ebp]
	jne	SHORT $LN22@ComputeHyp

; 3777 : 					{
; 3778 : 						iPressureForFreedom += iCulturalDominanceOverUs;

	mov	edx, DWORD PTR _iPressureForFreedom$[ebp]
	add	edx, DWORD PTR _iCulturalDominanceOverUs$226002[ebp]
	mov	DWORD PTR _iPressureForFreedom$[ebp], edx
	jmp	SHORT $LN25@ComputeHyp
$LN22@ComputeHyp:

; 3779 : 					}
; 3780 : 					else if (eOtherCivIdeology == eAutocracyBranch)

	mov	eax, DWORD PTR _eOtherCivIdeology$226000[ebp]
	cmp	eax, DWORD PTR _eAutocracyBranch$[ebp]
	jne	SHORT $LN20@ComputeHyp

; 3781 : 					{
; 3782 : 						iPressureForAutocracy += iCulturalDominanceOverUs;

	mov	ecx, DWORD PTR _iPressureForAutocracy$[ebp]
	add	ecx, DWORD PTR _iCulturalDominanceOverUs$226002[ebp]
	mov	DWORD PTR _iPressureForAutocracy$[ebp], ecx

; 3783 : 					}
; 3784 : 					else

	jmp	SHORT $LN25@ComputeHyp
$LN20@ComputeHyp:

; 3785 : 					{
; 3786 : 						iPressureForOrder += iCulturalDominanceOverUs;

	mov	edx, DWORD PTR _iPressureForOrder$[ebp]
	add	edx, DWORD PTR _iCulturalDominanceOverUs$226002[ebp]
	mov	DWORD PTR _iPressureForOrder$[ebp], edx
$LN25@ComputeHyp:

; 3787 : 					}
; 3788 : 				}
; 3789 : 			}
; 3790 : 		}
; 3791 : 	}

	jmp	$LN27@ComputeHyp
$LN26@ComputeHyp:

; 3792 : 
; 3793 : 	if (eBranch == eFreedomBranch)

	mov	eax, DWORD PTR _eBranch$[ebp]
	cmp	eax, DWORD PTR _eFreedomBranch$[ebp]
	jne	SHORT $LN18@ComputeHyp

; 3794 : 	{
; 3795 : 		if (iPressureForFreedom < (iPressureForAutocracy + iPressureForOrder))

	mov	ecx, DWORD PTR _iPressureForAutocracy$[ebp]
	add	ecx, DWORD PTR _iPressureForOrder$[ebp]
	cmp	DWORD PTR _iPressureForFreedom$[ebp], ecx
	jge	SHORT $LN17@ComputeHyp

; 3796 : 		{
; 3797 : 			if (iPressureForAutocracy > iPressureForOrder)

	mov	edx, DWORD PTR _iPressureForAutocracy$[ebp]
	cmp	edx, DWORD PTR _iPressureForOrder$[ebp]
	jle	SHORT $LN16@ComputeHyp

; 3798 : 			{
; 3799 : 				m_ePreferredIdeology = eAutocracyBranch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eAutocracyBranch$[ebp]
	mov	DWORD PTR [eax+212], ecx
	jmp	SHORT $LN15@ComputeHyp
$LN16@ComputeHyp:

; 3800 : 			}
; 3801 : 			else if (iPressureForOrder >= iPressureForAutocracy)

	mov	edx, DWORD PTR _iPressureForOrder$[ebp]
	cmp	edx, DWORD PTR _iPressureForAutocracy$[ebp]
	jl	SHORT $LN15@ComputeHyp

; 3802 : 			{
; 3803 : 				m_ePreferredIdeology = eOrderBranch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eOrderBranch$[ebp]
	mov	DWORD PTR [eax+212], ecx
$LN15@ComputeHyp:

; 3804 : 			}
; 3805 : 			iDissatisfaction = (iPressureForAutocracy + iPressureForOrder) - iPressureForFreedom;

	mov	edx, DWORD PTR _iPressureForAutocracy$[ebp]
	add	edx, DWORD PTR _iPressureForOrder$[ebp]
	sub	edx, DWORD PTR _iPressureForFreedom$[ebp]
	mov	DWORD PTR _iDissatisfaction$[ebp], edx
$LN17@ComputeHyp:

; 3806 : 		}
; 3807 : 	}

	jmp	$LN13@ComputeHyp
$LN18@ComputeHyp:

; 3808 : 	else if (eBranch == eAutocracyBranch)

	mov	eax, DWORD PTR _eBranch$[ebp]
	cmp	eax, DWORD PTR _eAutocracyBranch$[ebp]
	jne	SHORT $LN12@ComputeHyp

; 3809 : 	{
; 3810 : 		if (iPressureForAutocracy < (iPressureForFreedom + iPressureForOrder))

	mov	ecx, DWORD PTR _iPressureForFreedom$[ebp]
	add	ecx, DWORD PTR _iPressureForOrder$[ebp]
	cmp	DWORD PTR _iPressureForAutocracy$[ebp], ecx
	jge	SHORT $LN11@ComputeHyp

; 3811 : 		{
; 3812 : 			if (iPressureForFreedom >= iPressureForOrder)

	mov	edx, DWORD PTR _iPressureForFreedom$[ebp]
	cmp	edx, DWORD PTR _iPressureForOrder$[ebp]
	jl	SHORT $LN10@ComputeHyp

; 3813 : 			{
; 3814 : 				m_ePreferredIdeology = eFreedomBranch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eFreedomBranch$[ebp]
	mov	DWORD PTR [eax+212], ecx
	jmp	SHORT $LN9@ComputeHyp
$LN10@ComputeHyp:

; 3815 : 			}
; 3816 : 			else if (iPressureForOrder > iPressureForFreedom)

	mov	edx, DWORD PTR _iPressureForOrder$[ebp]
	cmp	edx, DWORD PTR _iPressureForFreedom$[ebp]
	jle	SHORT $LN9@ComputeHyp

; 3817 : 			{
; 3818 : 				m_ePreferredIdeology = eOrderBranch;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eOrderBranch$[ebp]
	mov	DWORD PTR [eax+212], ecx
$LN9@ComputeHyp:

; 3819 : 			}
; 3820 : 			iDissatisfaction = (iPressureForFreedom + iPressureForOrder) - iPressureForAutocracy;

	mov	edx, DWORD PTR _iPressureForFreedom$[ebp]
	add	edx, DWORD PTR _iPressureForOrder$[ebp]
	sub	edx, DWORD PTR _iPressureForAutocracy$[ebp]
	mov	DWORD PTR _iDissatisfaction$[ebp], edx
$LN11@ComputeHyp:

; 3821 : 		}
; 3822 : 	}
; 3823 : 	else

	jmp	SHORT $LN13@ComputeHyp
$LN12@ComputeHyp:

; 3824 : 	{
; 3825 : 		if (iPressureForOrder < (iPressureForFreedom + iPressureForAutocracy))

	mov	eax, DWORD PTR _iPressureForFreedom$[ebp]
	add	eax, DWORD PTR _iPressureForAutocracy$[ebp]
	cmp	DWORD PTR _iPressureForOrder$[ebp], eax
	jge	SHORT $LN13@ComputeHyp

; 3826 : 		{
; 3827 : 			if (iPressureForFreedom > iPressureForAutocracy)

	mov	ecx, DWORD PTR _iPressureForFreedom$[ebp]
	cmp	ecx, DWORD PTR _iPressureForAutocracy$[ebp]
	jle	SHORT $LN5@ComputeHyp

; 3828 : 			{
; 3829 : 				m_ePreferredIdeology = eFreedomBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eFreedomBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
	jmp	SHORT $LN4@ComputeHyp
$LN5@ComputeHyp:

; 3830 : 			}
; 3831 : 			else if (iPressureForAutocracy >= iPressureForFreedom)

	mov	ecx, DWORD PTR _iPressureForAutocracy$[ebp]
	cmp	ecx, DWORD PTR _iPressureForFreedom$[ebp]
	jl	SHORT $LN4@ComputeHyp

; 3832 : 			{
; 3833 : 				m_ePreferredIdeology = eAutocracyBranch;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eAutocracyBranch$[ebp]
	mov	DWORD PTR [edx+212], eax
$LN4@ComputeHyp:

; 3834 : 			}
; 3835 : 			iDissatisfaction = (iPressureForFreedom + iPressureForAutocracy) - iPressureForOrder;

	mov	ecx, DWORD PTR _iPressureForFreedom$[ebp]
	add	ecx, DWORD PTR _iPressureForAutocracy$[ebp]
	sub	ecx, DWORD PTR _iPressureForOrder$[ebp]
	mov	DWORD PTR _iDissatisfaction$[ebp], ecx
$LN13@ComputeHyp:

; 3836 : 		}
; 3837 : 	}
; 3838 : 
; 3839 : 	int iPerCityUnhappy = 1;

	mov	DWORD PTR _iPerCityUnhappy$[ebp], 1

; 3840 : 	int iUnhappyPerXPop = 10;

	mov	DWORD PTR _iUnhappyPerXPop$[ebp], 10	; 0000000aH

; 3841 : 
; 3842 : 	if (iDissatisfaction == 0)

	cmp	DWORD PTR _iDissatisfaction$[ebp], 0
	jne	SHORT $LN2@ComputeHyp

; 3843 : 	{
; 3844 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN31@ComputeHyp

; 3845 : 	}
; 3846 : 	else

	jmp	SHORT $LN31@ComputeHyp
$LN2@ComputeHyp:

; 3847 : 	{
; 3848 : #ifdef NQ_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER_FROM_POLICIES
; 3849 : 		int iUnhappinessModifier = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER);

	push	66					; 00000042H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iUnhappinessModifier$226029[ebp], eax

; 3850 : 		return ComputePublicOpinionUnhappiness(iDissatisfaction, iPerCityUnhappy, iUnhappyPerXPop, iUnhappinessModifier);

	mov	eax, DWORD PTR _iUnhappinessModifier$226029[ebp]
	push	eax
	lea	ecx, DWORD PTR _iUnhappyPerXPop$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iPerCityUnhappy$[ebp]
	push	edx
	mov	eax, DWORD PTR _iDissatisfaction$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z ; CvPlayerCulture::ComputePublicOpinionUnhappiness
$LN31@ComputeHyp:

; 3851 : #else
; 3852 : 		return ComputePublicOpinionUnhappiness(iDissatisfaction, iPerCityUnhappy, iUnhappyPerXPop);
; 3853 : #endif
; 3854 : 	}
; 3855 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?ComputeHypotheticalPublicOpinionUnhappiness@CvPlayerCulture@@QAEHW4PolicyBranchTypes@@@Z ENDP ; CvPlayerCulture::ComputeHypotheticalPublicOpinionUnhappiness
_TEXT	ENDS
PUBLIC	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z ; CvPlayerCulture::WantsDiplomatDoingPropaganda
; Function compile flags: /Odtp
;	COMDAT ?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv89 = -48						; size = 4
_this$ = -44						; size = 4
$T246123 = -37						; size = 1
$T246114 = -36						; size = 4
$T246110 = -32						; size = 4
_ePlayer$226042 = -28					; size = 4
_iInfluenceLevel$226046 = -24				; size = 4
_ui$226038 = -20					; size = 4
_eSecondPlayer$ = -16					; size = 4
_iFirstValue$ = -12					; size = 4
_iSecondValue$ = -8					; size = 4
_eFirstPlayer$ = -4					; size = 4
_eTargetPlayer$ = 8					; size = 4
?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z PROC ; CvPlayerCulture::WantsDiplomatDoingPropaganda, COMDAT
; _this$ = ecx

; 3858 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 3859 : 	// only return the top two
; 3860 : 	int iFirstValue = NO_INFLUENCE_LEVEL;

	mov	DWORD PTR _iFirstValue$[ebp], -1

; 3861 : 	int iSecondValue = NO_INFLUENCE_LEVEL;

	mov	DWORD PTR _iSecondValue$[ebp], -1

; 3862 : 	PlayerTypes eFirstPlayer = NO_PLAYER;

	mov	DWORD PTR _eFirstPlayer$[ebp], -1

; 3863 : 	PlayerTypes eSecondPlayer = NO_PLAYER;

	mov	DWORD PTR _eSecondPlayer$[ebp], -1

; 3864 : 
; 3865 : 	// only do this if everybody is exotic
; 3866 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$226038[ebp], 0
	jmp	SHORT $LN10@WantsDiplo
$LN9@WantsDiplo:
	mov	eax, DWORD PTR _ui$226038[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226038[ebp], eax
$LN10@WantsDiplo:
	cmp	DWORD PTR _ui$226038[ebp], 22		; 00000016H
	jae	$LN8@WantsDiplo

; 3867 : 	{
; 3868 : 		PlayerTypes ePlayer = (PlayerTypes)ui;

	mov	ecx, DWORD PTR _ui$226038[ebp]
	mov	DWORD PTR _ePlayer$226042[ebp], ecx

; 3869 : 		if (ePlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T246110[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$226042[ebp]
	cmp	edx, DWORD PTR $T246110[ebp]
	jne	SHORT $LN7@WantsDiplo

; 3870 : 		{
; 3871 : 			continue;

	jmp	SHORT $LN9@WantsDiplo
$LN7@WantsDiplo:

; 3872 : 		}
; 3873 : 
; 3874 : 		if (!GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR _ePlayer$226042[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T246114[ebp], eax
	mov	ecx, DWORD PTR $T246114[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T246123[ebp], dl
	movzx	eax, BYTE PTR $T246123[ebp]
	test	eax, eax
	jne	SHORT $LN6@WantsDiplo

; 3875 : 		{
; 3876 : 			continue;

	jmp	SHORT $LN9@WantsDiplo
$LN6@WantsDiplo:

; 3877 : 		}
; 3878 : 
; 3879 : 		int iInfluenceLevel = GetInfluenceLevel(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$226042[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfluenceLevel@CvPlayerCulture@@QBE?AW4InfluenceLevelTypes@@W4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceLevel
	mov	DWORD PTR _iInfluenceLevel$226046[ebp], eax

; 3880 : 		if (iInfluenceLevel < INFLUENCE_LEVEL_EXOTIC)

	cmp	DWORD PTR _iInfluenceLevel$226046[ebp], 1
	jge	SHORT $LN5@WantsDiplo

; 3881 : 		{
; 3882 : 			return false;

	xor	al, al
	jmp	SHORT $LN11@WantsDiplo
	jmp	SHORT $LN4@WantsDiplo
$LN5@WantsDiplo:

; 3883 : 		}
; 3884 : 		else if (iInfluenceLevel > iFirstValue && iInfluenceLevel > iSecondValue)

	mov	edx, DWORD PTR _iInfluenceLevel$226046[ebp]
	cmp	edx, DWORD PTR _iFirstValue$[ebp]
	jle	SHORT $LN3@WantsDiplo
	mov	eax, DWORD PTR _iInfluenceLevel$226046[ebp]
	cmp	eax, DWORD PTR _iSecondValue$[ebp]
	jle	SHORT $LN3@WantsDiplo

; 3885 : 		{
; 3886 : 			iSecondValue = iFirstValue;

	mov	ecx, DWORD PTR _iFirstValue$[ebp]
	mov	DWORD PTR _iSecondValue$[ebp], ecx

; 3887 : 			eSecondPlayer = eFirstPlayer;

	mov	edx, DWORD PTR _eFirstPlayer$[ebp]
	mov	DWORD PTR _eSecondPlayer$[ebp], edx

; 3888 : 			iFirstValue = iInfluenceLevel;

	mov	eax, DWORD PTR _iInfluenceLevel$226046[ebp]
	mov	DWORD PTR _iFirstValue$[ebp], eax

; 3889 : 			eFirstPlayer = ePlayer;

	mov	ecx, DWORD PTR _ePlayer$226042[ebp]
	mov	DWORD PTR _eFirstPlayer$[ebp], ecx
	jmp	SHORT $LN4@WantsDiplo
$LN3@WantsDiplo:

; 3890 : 		}
; 3891 : 		else if (iInfluenceLevel > iSecondValue)

	mov	edx, DWORD PTR _iInfluenceLevel$226046[ebp]
	cmp	edx, DWORD PTR _iSecondValue$[ebp]
	jle	SHORT $LN4@WantsDiplo

; 3892 : 		{
; 3893 : 			iSecondValue = iInfluenceLevel;

	mov	eax, DWORD PTR _iInfluenceLevel$226046[ebp]
	mov	DWORD PTR _iSecondValue$[ebp], eax

; 3894 : 			eSecondPlayer = ePlayer;

	mov	ecx, DWORD PTR _ePlayer$226042[ebp]
	mov	DWORD PTR _eSecondPlayer$[ebp], ecx
$LN4@WantsDiplo:

; 3895 : 		}
; 3896 : 	}

	jmp	$LN9@WantsDiplo
$LN8@WantsDiplo:

; 3897 : 
; 3898 : 	return (eFirstPlayer == eTargetPlayer || eSecondPlayer == eTargetPlayer);

	mov	edx, DWORD PTR _eFirstPlayer$[ebp]
	cmp	edx, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN13@WantsDiplo
	mov	eax, DWORD PTR _eSecondPlayer$[ebp]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN13@WantsDiplo
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN14@WantsDiplo
$LN13@WantsDiplo:
	mov	DWORD PTR tv89[ebp], 1
$LN14@WantsDiplo:
	mov	al, BYTE PTR tv89[ebp]
$LN11@WantsDiplo:

; 3899 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z ENDP ; CvPlayerCulture::WantsDiplomatDoingPropaganda
_TEXT	ENDS
PUBLIC	?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
; Function compile flags: /Odtp
;	COMDAT ?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T246134 = -16						; size = 4
_eOtherPlayer$226060 = -12				; size = 4
_ui$226056 = -8						; size = 4
_iRtnValue$ = -4					; size = 4
?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ PROC ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted, COMDAT
; _this$ = ecx

; 3903 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3904 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 3905 : 
; 3906 : 	// determine which civs have run out of techs to steal
; 3907 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$226056[ebp], 0
	jmp	SHORT $LN5@GetMaxProp
$LN4@GetMaxProp:
	mov	eax, DWORD PTR _ui$226056[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226056[ebp], eax
$LN5@GetMaxProp:
	cmp	DWORD PTR _ui$226056[ebp], 22		; 00000016H
	jae	SHORT $LN3@GetMaxProp

; 3908 : 	{
; 3909 : 		PlayerTypes eOtherPlayer = (PlayerTypes)ui;

	mov	ecx, DWORD PTR _ui$226056[ebp]
	mov	DWORD PTR _eOtherPlayer$226060[ebp], ecx

; 3910 : 
; 3911 : 		if (m_pPlayer->GetID() == eOtherPlayer)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T246134[ebp], ecx
	mov	edx, DWORD PTR $T246134[ebp]
	cmp	edx, DWORD PTR _eOtherPlayer$226060[ebp]
	jne	SHORT $LN2@GetMaxProp

; 3912 : 		{
; 3913 : 			continue;

	jmp	SHORT $LN4@GetMaxProp
$LN2@GetMaxProp:

; 3914 : 		}
; 3915 : 		
; 3916 : 		if (WantsDiplomatDoingPropaganda(eOtherPlayer))

	mov	eax, DWORD PTR _eOtherPlayer$226060[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z ; CvPlayerCulture::WantsDiplomatDoingPropaganda
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetMaxProp

; 3917 : 		{
; 3918 : 			iRtnValue++;

	mov	edx, DWORD PTR _iRtnValue$[ebp]
	add	edx, 1
	mov	DWORD PTR _iRtnValue$[ebp], edx
$LN1@GetMaxProp:

; 3919 : 		}
; 3920 : 	}

	jmp	SHORT $LN4@GetMaxProp
$LN3@GetMaxProp:

; 3921 : 
; 3922 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 3923 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ ENDP ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
_TEXT	ENDS
PUBLIC	?GetTotalThemingBonuses@CvPlayerCulture@@QBEHXZ	; CvPlayerCulture::GetTotalThemingBonuses
EXTRN	?GetThemingBonuses@CvCityBuildings@@QBEHXZ:PROC	; CvCityBuildings::GetThemingBonuses
; Function compile flags: /Odtp
;	COMDAT ?GetTotalThemingBonuses@CvPlayerCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iRtnValue$ = -12					; size = 4
_pCity$ = -8						; size = 4
_iLoop$ = -4						; size = 4
?GetTotalThemingBonuses@CvPlayerCulture@@QBEHXZ PROC	; CvPlayerCulture::GetTotalThemingBonuses, COMDAT
; _this$ = ecx

; 3927 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3928 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 3929 : 
; 3930 : 	CvCity *pCity;
; 3931 : 	int iLoop;
; 3932 : 	for(pCity = m_pPlayer->firstCity(&iLoop); pCity != NULL; pCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$[ebp], eax
	jmp	SHORT $LN3@GetTotalTh
$LN2@GetTotalTh:
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pCity$[ebp], eax
$LN3@GetTotalTh:
	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN1@GetTotalTh

; 3933 : 	{
; 3934 : 		iRtnValue += pCity->GetCityBuildings()->GetThemingBonuses();;

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetThemingBonuses@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetThemingBonuses
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 3935 : 	}

	jmp	SHORT $LN2@GetTotalTh
$LN1@GetTotalTh:

; 3936 : 
; 3937 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 3938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalThemingBonuses@CvPlayerCulture@@QBEHXZ ENDP	; CvPlayerCulture::GetTotalThemingBonuses
_TEXT	ENDS
EXTRN	?getNumCities@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumCities
EXTRN	?getTotalPopulation@CvPlayer@@QBEHXZ:PROC	; CvPlayer::getTotalPopulation
; Function compile flags: /Odtp
;	COMDAT ?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z
_TEXT	SEGMENT
tv82 = -24						; size = 4
_this$ = -20						; size = 4
$T246147 = -16						; size = 4
$T246140 = -12						; size = 4
$T246139 = -8						; size = 4
_totalUnhappiness$ = -4					; size = 4
_iDissatisfaction$ = 8					; size = 4
_iPerCityUnhappy$ = 12					; size = 4
_iUnhappyPerXPop$ = 16					; size = 4
_iUnhappinessModifier$ = 20				; size = 4
?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z PROC ; CvPlayerCulture::ComputePublicOpinionUnhappiness, COMDAT
; _this$ = ecx

; 3948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3949 : 	if (iDissatisfaction < 3)

	cmp	DWORD PTR _iDissatisfaction$[ebp], 3
	jge	SHORT $LN5@ComputePub

; 3950 : 	{
; 3951 : 		iPerCityUnhappy = 1;

	mov	eax, DWORD PTR _iPerCityUnhappy$[ebp]
	mov	DWORD PTR [eax], 1

; 3952 : 		iUnhappyPerXPop = 10;

	mov	ecx, DWORD PTR _iUnhappyPerXPop$[ebp]
	mov	DWORD PTR [ecx], 10			; 0000000aH
	jmp	SHORT $LN4@ComputePub
$LN5@ComputePub:

; 3953 : 	}
; 3954 : 	else if (iDissatisfaction < 5)

	cmp	DWORD PTR _iDissatisfaction$[ebp], 5
	jge	SHORT $LN3@ComputePub

; 3955 : 	{
; 3956 : 		iPerCityUnhappy = 2;

	mov	edx, DWORD PTR _iPerCityUnhappy$[ebp]
	mov	DWORD PTR [edx], 2

; 3957 : 		iUnhappyPerXPop = 5;

	mov	eax, DWORD PTR _iUnhappyPerXPop$[ebp]
	mov	DWORD PTR [eax], 5

; 3958 : 	}
; 3959 : 	else

	jmp	SHORT $LN4@ComputePub
$LN3@ComputePub:

; 3960 : 	{
; 3961 : 		iPerCityUnhappy = 4;

	mov	ecx, DWORD PTR _iPerCityUnhappy$[ebp]
	mov	DWORD PTR [ecx], 4

; 3962 : 		iUnhappyPerXPop = 3;

	mov	edx, DWORD PTR _iUnhappyPerXPop$[ebp]
	mov	DWORD PTR [edx], 3
$LN4@ComputePub:

; 3963 : 	}
; 3964 : #ifdef NQ_IDEOLOGY_PRESSURE_UNHAPPINESS_MODIFIER_FROM_POLICIES
; 3965 : 	int totalUnhappiness = max(m_pPlayer->getNumCities() * iPerCityUnhappy, m_pPlayer->getTotalPopulation() / iUnhappyPerXPop);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?getTotalPopulation@CvPlayer@@QBEHXZ	; CvPlayer::getTotalPopulation
	mov	ecx, DWORD PTR _iUnhappyPerXPop$[ebp]
	cdq
	idiv	DWORD PTR [ecx]
	mov	DWORD PTR $T246139[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	ecx, DWORD PTR _iPerCityUnhappy$[ebp]
	imul	eax, DWORD PTR [ecx]
	mov	DWORD PTR $T246140[ebp], eax
	mov	edx, DWORD PTR $T246140[ebp]
	cmp	edx, DWORD PTR $T246139[ebp]
	jge	SHORT $LN10@ComputePub
	lea	eax, DWORD PTR $T246139[ebp]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN11@ComputePub
$LN10@ComputePub:
	lea	ecx, DWORD PTR $T246140[ebp]
	mov	DWORD PTR tv82[ebp], ecx
$LN11@ComputePub:
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T246147[ebp], edx
	mov	eax, DWORD PTR $T246147[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _totalUnhappiness$[ebp], ecx

; 3966 : 	if (iUnhappinessModifier != 0)

	cmp	DWORD PTR _iUnhappinessModifier$[ebp], 0
	je	SHORT $LN1@ComputePub

; 3967 : 	{
; 3968 : 		totalUnhappiness *= (100 + iUnhappinessModifier);

	mov	edx, DWORD PTR _iUnhappinessModifier$[ebp]
	add	edx, 100				; 00000064H
	imul	edx, DWORD PTR _totalUnhappiness$[ebp]
	mov	DWORD PTR _totalUnhappiness$[ebp], edx

; 3969 : 		totalUnhappiness /= 100;

	mov	eax, DWORD PTR _totalUnhappiness$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _totalUnhappiness$[ebp], eax
$LN1@ComputePub:

; 3970 : 	}
; 3971 : 	return totalUnhappiness;

	mov	eax, DWORD PTR _totalUnhappiness$[ebp]

; 3972 : #else
; 3973 : 	return max(m_pPlayer->getNumCities() * iPerCityUnhappy, m_pPlayer->getTotalPopulation() / iUnhappyPerXPop);
; 3974 : #endif
; 3975 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ComputePublicOpinionUnhappiness@CvPlayerCulture@@AAEHHAAH0H@Z ENDP ; CvPlayerCulture::ComputePublicOpinionUnhappiness
_TEXT	ENDS
PUBLIC	?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z ; CvCityCulture::LogGreatWorks
PUBLIC	??_C@_0BA@ODKHEAMB@Theming?5Bonuses?$AA@	; `string'
PUBLIC	??_C@_07COHILFBB@Tourism?$AA@			; `string'
PUBLIC	??_C@_0M@HGKBMOMI@Great?5Works?$AA@		; `string'
PUBLIC	??_C@_0BB@GBPGCHOD@Musicians?8?5Guild?$AA@	; `string'
PUBLIC	??_C@_09DGDBNFEI@Acoustics?$AA@			; `string'
PUBLIC	??_C@_0P@NHMEKGDI@Artists?8?5Guild?$AA@		; `string'
PUBLIC	??_C@_06BGMOODEK@Guilds?$AA@			; `string'
PUBLIC	??_C@_05KMEKLDKF@Slots?$AA@			; `string'
PUBLIC	??_C@_07FBNOAGOL@Spclsts?$AA@			; `string'
PUBLIC	??_C@_0P@JLJNLJPM@Writers?8?5Guild?$AA@		; `string'
PUBLIC	??_C@_05OGJFDHHK@Drama?$AA@			; `string'
PUBLIC	??_C@_02KAJCLHKP@no?$AA@			; `string'
PUBLIC	??_C@_03ICICOMAL@yes?$AA@			; `string'
PUBLIC	??_C@_0BJ@IJMHMMBH@BUILDING_MUSICIANS_GUILD?$AA@ ; `string'
PUBLIC	??_C@_0BH@KLLIOJFG@BUILDING_ARTISTS_GUILD?$AA@	; `string'
PUBLIC	??_C@_0BH@JLLHHDHH@BUILDING_WRITERS_GUILD?$AA@	; `string'
PUBLIC	??_C@_0BO@COGLGIHN@BUILDINGCLASS_MUSICIANS_GUILD?$AA@ ; `string'
PUBLIC	??_C@_0BM@EIAAIBOG@BUILDINGCLASS_ARTISTS_GUILD?$AA@ ; `string'
PUBLIC	??_C@_0BM@HIAPBLMH@BUILDINGCLASS_WRITERS_GUILD?$AA@ ; `string'
PUBLIC	??_C@_0P@GBFFINLK@TECH_ACOUSTICS?$AA@		; `string'
PUBLIC	??_C@_0M@DPECDFBN@TECH_GUILDS?$AA@		; `string'
PUBLIC	??_C@_0L@IIOENIML@TECH_DRAMA?$AA@		; `string'
PUBLIC	??_C@_08BJGNLGP@?$CD?5Cities?$AA@		; `string'
PUBLIC	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog
PUBLIC	??_C@_04EKEMLFA@Turn?$AA@			; `string'
PUBLIC	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog
PUBLIC	??_C@_08IFIFDOPL@Civ?5Name?$AA@			; `string'
PUBLIC	?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z ; CvPlayerCulture::GetLogFileName
PUBLIC	__$ArrayPad$
EXTRN	?GetNumSpecialistsInBuilding@CvCityCitizens@@QBEHW4BuildingTypes@@@Z:PROC ; CvCityCitizens::GetNumSpecialistsInBuilding
EXTRN	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ:PROC ; CvCity::GetCityCitizens
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	?GetFirstCityWithBuildingClass@CvPlayer@@QAEPAVCvCity@@W4BuildingClassTypes@@@Z:PROC ; CvPlayer::GetFirstCityWithBuildingClass
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0BA@ODKHEAMB@Theming?5Bonuses?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BA@ODKHEAMB@Theming?5Bonuses?$AA@ DB 'Theming Bonuses', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07COHILFBB@Tourism?$AA@
CONST	SEGMENT
??_C@_07COHILFBB@Tourism?$AA@ DB 'Tourism', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGKBMOMI@Great?5Works?$AA@
CONST	SEGMENT
??_C@_0M@HGKBMOMI@Great?5Works?$AA@ DB 'Great Works', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBPGCHOD@Musicians?8?5Guild?$AA@
CONST	SEGMENT
??_C@_0BB@GBPGCHOD@Musicians?8?5Guild?$AA@ DB 'Musicians'' Guild', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DGDBNFEI@Acoustics?$AA@
CONST	SEGMENT
??_C@_09DGDBNFEI@Acoustics?$AA@ DB 'Acoustics', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NHMEKGDI@Artists?8?5Guild?$AA@
CONST	SEGMENT
??_C@_0P@NHMEKGDI@Artists?8?5Guild?$AA@ DB 'Artists'' Guild', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGMOODEK@Guilds?$AA@
CONST	SEGMENT
??_C@_06BGMOODEK@Guilds?$AA@ DB 'Guilds', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KMEKLDKF@Slots?$AA@
CONST	SEGMENT
??_C@_05KMEKLDKF@Slots?$AA@ DB 'Slots', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FBNOAGOL@Spclsts?$AA@
CONST	SEGMENT
??_C@_07FBNOAGOL@Spclsts?$AA@ DB 'Spclsts', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JLJNLJPM@Writers?8?5Guild?$AA@
CONST	SEGMENT
??_C@_0P@JLJNLJPM@Writers?8?5Guild?$AA@ DB 'Writers'' Guild', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OGJFDHHK@Drama?$AA@
CONST	SEGMENT
??_C@_05OGJFDHHK@Drama?$AA@ DB 'Drama', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KAJCLHKP@no?$AA@
CONST	SEGMENT
??_C@_02KAJCLHKP@no?$AA@ DB 'no', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICICOMAL@yes?$AA@
CONST	SEGMENT
??_C@_03ICICOMAL@yes?$AA@ DB 'yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IJMHMMBH@BUILDING_MUSICIANS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BJ@IJMHMMBH@BUILDING_MUSICIANS_GUILD?$AA@ DB 'BUILDING_MUSICIANS_G'
	DB	'UILD', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KLLIOJFG@BUILDING_ARTISTS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BH@KLLIOJFG@BUILDING_ARTISTS_GUILD?$AA@ DB 'BUILDING_ARTISTS_GUILD'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JLLHHDHH@BUILDING_WRITERS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BH@JLLHHDHH@BUILDING_WRITERS_GUILD?$AA@ DB 'BUILDING_WRITERS_GUILD'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@COGLGIHN@BUILDINGCLASS_MUSICIANS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BO@COGLGIHN@BUILDINGCLASS_MUSICIANS_GUILD?$AA@ DB 'BUILDINGCLASS_M'
	DB	'USICIANS_GUILD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EIAAIBOG@BUILDINGCLASS_ARTISTS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BM@EIAAIBOG@BUILDINGCLASS_ARTISTS_GUILD?$AA@ DB 'BUILDINGCLASS_ART'
	DB	'ISTS_GUILD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HIAPBLMH@BUILDINGCLASS_WRITERS_GUILD?$AA@
CONST	SEGMENT
??_C@_0BM@HIAPBLMH@BUILDINGCLASS_WRITERS_GUILD?$AA@ DB 'BUILDINGCLASS_WRI'
	DB	'TERS_GUILD', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GBFFINLK@TECH_ACOUSTICS?$AA@
CONST	SEGMENT
??_C@_0P@GBFFINLK@TECH_ACOUSTICS?$AA@ DB 'TECH_ACOUSTICS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DPECDFBN@TECH_GUILDS?$AA@
CONST	SEGMENT
??_C@_0M@DPECDFBN@TECH_GUILDS?$AA@ DB 'TECH_GUILDS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IIOENIML@TECH_DRAMA?$AA@
CONST	SEGMENT
??_C@_0L@IIOENIML@TECH_DRAMA?$AA@ DB 'TECH_DRAMA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BJGNLGP@?$CD?5Cities?$AA@
CONST	SEGMENT
??_C@_08BJGNLGP@?$CD?5Cities?$AA@ DB '# Cities', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKEMLFA@Turn?$AA@
CONST	SEGMENT
??_C@_04EKEMLFA@Turn?$AA@ DB 'Turn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFIFDOPL@Civ?5Name?$AA@
CONST	SEGMENT
??_C@_08IFIFDOPL@Civ?5Name?$AA@ DB 'Civ Name', 00H	; `string'
CONST	ENDS
;	COMDAT ?bFirstRun@?4??LogCultureData@CvPlayerCulture@@AAEXXZ@4_NA
_DATA	SEGMENT
?bFirstRun@?4??LogCultureData@CvPlayerCulture@@AAEXXZ@4_NA DB 01H ; `CvPlayerCulture::LogCultureData'::`5'::bFirstRun
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogCultureData@CvPlayerCulture@@AAEXXZ DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?LogCultureData@CvPlayerCulture@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogCultureData@CvPlayerCulture@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$11
	DD	07H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$12
	DD	08H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$13
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$17
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$19
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$20
	DD	0cH
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$21
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$25
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$27
	DD	0fH
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$28
	DD	010H
	DD	FLAT:__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$29
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogCultureData@CvPlayerCulture@@AAEXXZ
_TEXT	SEGMENT
tv893 = -920						; size = 4
tv1383 = -916						; size = 4
tv890 = -912						; size = 4
tv1370 = -908						; size = 4
tv887 = -904						; size = 4
tv1357 = -900						; size = 4
tv884 = -896						; size = 4
tv1344 = -892						; size = 4
tv881 = -888						; size = 4
tv1331 = -884						; size = 4
tv643 = -880						; size = 4
tv874 = -876						; size = 4
tv1308 = -872						; size = 4
tv871 = -868						; size = 4
tv869 = -864						; size = 4
tv1280 = -860						; size = 4
tv615 = -856						; size = 4
tv864 = -852						; size = 4
tv1188 = -848						; size = 4
tv859 = -844						; size = 4
tv1267 = -840						; size = 4
tv856 = -836						; size = 4
tv1254 = -832						; size = 4
tv854 = -828						; size = 4
tv1241 = -824						; size = 4
tv851 = -820						; size = 4
tv1228 = -816						; size = 4
tv510 = -812						; size = 4
tv844 = -808						; size = 4
tv1205 = -804						; size = 4
tv841 = -800						; size = 4
tv839 = -796						; size = 4
tv1177 = -792						; size = 4
tv482 = -788						; size = 4
tv834 = -784						; size = 4
tv1265 = -780						; size = 4
tv829 = -776						; size = 4
tv1164 = -772						; size = 4
tv826 = -768						; size = 4
tv1151 = -764						; size = 4
tv824 = -760						; size = 4
tv1138 = -756						; size = 4
tv821 = -752						; size = 4
tv1125 = -748						; size = 4
tv345 = -744						; size = 4
tv814 = -740						; size = 4
tv1102 = -736						; size = 4
tv811 = -732						; size = 4
tv809 = -728						; size = 4
tv1074 = -724						; size = 4
tv317 = -720						; size = 4
tv804 = -716						; size = 4
tv1342 = -712						; size = 4
tv799 = -708						; size = 4
tv1061 = -704						; size = 4
tv796 = -700						; size = 4
tv1048 = -696						; size = 4
tv794 = -692						; size = 4
tv1035 = -688						; size = 4
tv791 = -684						; size = 4
tv1022 = -680						; size = 4
tv788 = -676						; size = 4
tv1009 = -672						; size = 4
tv785 = -668						; size = 4
tv1381 = -664						; size = 4
tv94 = -660						; size = 4
tv928 = -656						; size = 4
_this$ = -652						; size = 4
$T246569 = -648						; size = 4
$T246565 = -644						; size = 4
$T246561 = -640						; size = 4
$T246552 = -636						; size = 4
$T246543 = -632						; size = 4
$T246534 = -628						; size = 4
$T246525 = -624						; size = 4
$T246508 = -620						; size = 4
$T246499 = -616						; size = 4
$T246486 = -612						; size = 4
$T246477 = -608						; size = 4
$T246476 = -604						; size = 4
$T246467 = -600						; size = 4
$T246458 = -596						; size = 4
$T246441 = -592						; size = 4
$T246432 = -588						; size = 4
$T246419 = -584						; size = 4
$T246410 = -580						; size = 4
$T246409 = -576						; size = 4
$T246400 = -572						; size = 4
$T246391 = -568						; size = 4
$T246374 = -564						; size = 4
$T246365 = -560						; size = 4
$T246352 = -556						; size = 4
$T246343 = -552						; size = 4
$T246342 = -548						; size = 4
$T246333 = -544						; size = 4
$T246324 = -540						; size = 4
$T246315 = -536						; size = 4
$T246311 = -532						; size = 4
$T246302 = -528						; size = 4
$T246289 = -524						; size = 4
$T246288 = -520						; size = 4
$T246284 = -516						; size = 4
$T246264 = -512						; size = 4
$T246263 = -508						; size = 4
$T246217 = -504						; size = 4
$T246205 = -500						; size = 4
$T246204 = -496						; size = 4
$T246203 = -492						; size = 4
$T246202 = -488						; size = 4
$T246201 = -484						; size = 4
$T246198 = -480						; size = 4
$T246195 = -476						; size = 28
$T246194 = -448						; size = 28
$T246193 = -420						; size = 4
$T246192 = -416						; size = 4
$T246191 = -412						; size = 4
$T246188 = -408						; size = 4
$T246187 = -404						; size = 4
$T246186 = -400						; size = 4
$T246183 = -396						; size = 4
$T246180 = -392						; size = 28
$T246179 = -364						; size = 28
$T246178 = -336						; size = 4
$T246177 = -332						; size = 4
$T246176 = -328						; size = 4
$T246173 = -324						; size = 4
$T246172 = -320						; size = 4
$T246171 = -316						; size = 4
$T246168 = -312						; size = 4
$T246165 = -308						; size = 28
$T246164 = -280						; size = 28
$T246163 = -252						; size = 4
$T246162 = -248						; size = 4
$T246161 = -244						; size = 4
$T246158 = -240						; size = 4
$T246157 = -236						; size = 4
$T246156 = -232						; size = 4
$T246155 = -228						; size = 4
$T246154 = -224						; size = 4
$T246153 = -220						; size = 28
_str$ = -192						; size = 28
_eArtistsGuildClass$ = -164				; size = 4
_eArtistsGuild$ = -160					; size = 4
_eMusiciansGuild$ = -156				; size = 4
_pTeam$ = -152						; size = 4
_iSpecialists$ = -148					; size = 4
_eTechGuilds$ = -144					; size = 4
_strLog$ = -140						; size = 28
_bBuildHeader$ = -109					; size = 1
_strPlayerName$ = -108					; size = 28
_pCity$ = -80						; size = 4
_eWritersGuildClass$ = -76				; size = 4
_eTechDrama$ = -72					; size = 4
_eWritersGuild$ = -68					; size = 4
_pLog$ = -64						; size = 4
_eTechAcoustics$ = -60					; size = 4
_eMusiciansGuildClass$ = -56				; size = 4
_strHeader$ = -52					; size = 28
__$ArrayPad$ = -24					; size = 4
_pLoopCity$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?LogCultureData@CvPlayerCulture@@AAEXXZ PROC		; CvPlayerCulture::LogCultureData, COMDAT
; _this$ = ecx

; 3981 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogCultureData@CvPlayerCulture@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 908				; 0000038cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T246217[ebp], 0

; 3982 : 	CvTeam &pTeam = GET_TEAM(m_pPlayer->getTeam());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T246263[ebp], ecx
	mov	edx, DWORD PTR $T246263[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T246264[ebp], eax
	mov	ecx, DWORD PTR $T246264[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _pTeam$[ebp], ecx

; 3983 : 
; 3984 : 	if(!(GC.getLogging() && GC.getAILogging()))

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@LogCulture
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@LogCulture
$LN10@LogCulture:

; 3985 : 	{
; 3986 : 		return;

	jmp	$LN12@LogCulture
$LN11@LogCulture:

; 3987 : 	}
; 3988 : 
; 3989 : 	static bool bFirstRun = true;
; 3990 : 	bool bBuildHeader = false;

	mov	BYTE PTR _bBuildHeader$[ebp], 0

; 3991 : 	CvString strHeader;

	lea	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3992 : 	if(bFirstRun)

	movzx	ecx, BYTE PTR ?bFirstRun@?4??LogCultureData@CvPlayerCulture@@AAEXXZ@4_NA
	test	ecx, ecx
	je	SHORT $LN9@LogCulture

; 3993 : 	{
; 3994 : 		bFirstRun = false;

	mov	BYTE PTR ?bFirstRun@?4??LogCultureData@CvPlayerCulture@@AAEXXZ@4_NA, 0

; 3995 : 		bBuildHeader = true;

	mov	BYTE PTR _bBuildHeader$[ebp], 1
$LN9@LogCulture:

; 3996 : 	}
; 3997 : 
; 3998 : 	CvString strLog;

	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 3999 : 	FILogFile* pLog;
; 4000 : 	CvString strPlayerName = m_pPlayer->getCivilizationShortDescription();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T246284[ebp], eax
	cmp	DWORD PTR $T246284[ebp], 0
	je	SHORT $LN94@LogCulture
	mov	eax, DWORD PTR $T246284[ebp]
	mov	DWORD PTR tv928[ebp], eax
	jmp	SHORT $LN95@LogCulture
$LN94@LogCulture:
	mov	DWORD PTR tv928[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN95@LogCulture:
	mov	ecx, DWORD PTR tv928[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 4001 : 	pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv94[ebp], eax
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	lea	eax, DWORD PTR $T246153[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z ; CvPlayerCulture::GetLogFileName
	mov	DWORD PTR tv1381[ebp], eax
	mov	ecx, DWORD PTR tv1381[ebp]
	mov	DWORD PTR $T246288[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T246288[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246289[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T246289[ebp]
	push	edx
	mov	eax, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T246153[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4002 : 
; 4003 : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 4004 : 	CvCity *pCity;
; 4005 : 	int iSpecialists = 0;

	mov	DWORD PTR _iSpecialists$[ebp], 0

; 4006 : 
; 4007 : 	// civ name
; 4008 : 	AppendToLog(strHeader, strLog, "Civ Name", strPlayerName);

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246154[ebp], esp
	mov	DWORD PTR $T246302[ebp], ecx
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246302[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T246302[ebp]
	mov	DWORD PTR tv785[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246155[ebp], esp
	mov	DWORD PTR $T246311[ebp], ecx
	mov	edx, OFFSET ??_C@_08IFIFDOPL@Civ?5Name?$AA@
	test	edx, edx
	je	SHORT $LN110@LogCulture
	mov	DWORD PTR tv1009[ebp], OFFSET ??_C@_08IFIFDOPL@Civ?5Name?$AA@
	jmp	SHORT $LN111@LogCulture
$LN110@LogCulture:
	mov	DWORD PTR tv1009[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN111@LogCulture:
	mov	eax, DWORD PTR tv1009[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246311[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246311[ebp]
	mov	DWORD PTR tv788[ebp], ecx
	lea	edx, DWORD PTR _strLog$[ebp]
	push	edx
	lea	eax, DWORD PTR _strHeader$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog

; 4009 : 
; 4010 : 	// turn
; 4011 : 	AppendToLog(strHeader, strLog, "Turn", GC.getGame().getGameTurn());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246315[ebp], ecx
	mov	ecx, DWORD PTR $T246315[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	push	eax
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246156[ebp], esp
	mov	DWORD PTR $T246324[ebp], edx
	mov	eax, OFFSET ??_C@_04EKEMLFA@Turn?$AA@
	test	eax, eax
	je	SHORT $LN117@LogCulture
	mov	DWORD PTR tv1022[ebp], OFFSET ??_C@_04EKEMLFA@Turn?$AA@
	jmp	SHORT $LN118@LogCulture
$LN117@LogCulture:
	mov	DWORD PTR tv1022[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN118@LogCulture:
	mov	ecx, DWORD PTR tv1022[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246324[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246324[ebp]
	mov	DWORD PTR tv791[ebp], edx
	lea	eax, DWORD PTR _strLog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHeader$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4012 : 
; 4013 : 	// # cities
; 4014 : 	AppendToLog(strHeader, strLog, "# Cities", m_pPlayer->getNumCities());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246157[ebp], esp
	mov	DWORD PTR $T246333[ebp], eax
	mov	ecx, OFFSET ??_C@_08BJGNLGP@?$CD?5Cities?$AA@
	test	ecx, ecx
	je	SHORT $LN122@LogCulture
	mov	DWORD PTR tv1035[ebp], OFFSET ??_C@_08BJGNLGP@?$CD?5Cities?$AA@
	jmp	SHORT $LN123@LogCulture
$LN122@LogCulture:
	mov	DWORD PTR tv1035[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN123@LogCulture:
	mov	edx, DWORD PTR tv1035[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246333[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246333[ebp]
	mov	DWORD PTR tv794[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4015 : 
; 4016 : 	// Guilds
; 4017 : 	TechTypes eTechDrama = (TechTypes)GC.getInfoTypeForString("TECH_DRAMA", true);

	push	1
	push	OFFSET ??_C@_0L@IIOENIML@TECH_DRAMA?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eTechDrama$[ebp], eax

; 4018 : 	TechTypes eTechGuilds = (TechTypes)GC.getInfoTypeForString("TECH_GUILDS", true);

	push	1
	push	OFFSET ??_C@_0M@DPECDFBN@TECH_GUILDS?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eTechGuilds$[ebp], eax

; 4019 : 	TechTypes eTechAcoustics = (TechTypes)GC.getInfoTypeForString("TECH_ACOUSTICS", true);

	push	1
	push	OFFSET ??_C@_0P@GBFFINLK@TECH_ACOUSTICS?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eTechAcoustics$[ebp], eax

; 4020 : 	BuildingClassTypes eWritersGuildClass = (BuildingClassTypes)GC.getInfoTypeForString("BUILDINGCLASS_WRITERS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BM@HIAPBLMH@BUILDINGCLASS_WRITERS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eWritersGuildClass$[ebp], eax

; 4021 : 	BuildingClassTypes eArtistsGuildClass = (BuildingClassTypes)GC.getInfoTypeForString("BUILDINGCLASS_ARTISTS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BM@EIAAIBOG@BUILDINGCLASS_ARTISTS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtistsGuildClass$[ebp], eax

; 4022 : 	BuildingClassTypes eMusiciansGuildClass = (BuildingClassTypes)GC.getInfoTypeForString("BUILDINGCLASS_MUSICIANS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BO@COGLGIHN@BUILDINGCLASS_MUSICIANS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eMusiciansGuildClass$[ebp], eax

; 4023 : 	BuildingTypes eWritersGuild = (BuildingTypes)GC.getInfoTypeForString("BUILDING_WRITERS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BH@JLLHHDHH@BUILDING_WRITERS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eWritersGuild$[ebp], eax

; 4024 : 	BuildingTypes eArtistsGuild = (BuildingTypes)GC.getInfoTypeForString("BUILDING_ARTISTS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BH@KLLIOJFG@BUILDING_ARTISTS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtistsGuild$[ebp], eax

; 4025 : 	BuildingTypes eMusiciansGuild = (BuildingTypes)GC.getInfoTypeForString("BUILDING_MUSICIANS_GUILD", true);

	push	1
	push	OFFSET ??_C@_0BJ@IJMHMMBH@BUILDING_MUSICIANS_GUILD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eMusiciansGuild$[ebp], eax

; 4026 : 
; 4027 : 	if (eWritersGuildClass != NO_BUILDINGCLASS && eWritersGuild != NO_BUILDING)

	cmp	DWORD PTR _eWritersGuildClass$[ebp], -1
	je	$LN8@LogCulture
	cmp	DWORD PTR _eWritersGuild$[ebp], -1
	je	$LN8@LogCulture

; 4028 : 	{
; 4029 : 		AppendToLog(strHeader, strLog, "Drama", pTeam.GetTeamTechs()->HasTech(eTechDrama) ? "yes" : "no");

	mov	eax, DWORD PTR _eTechDrama$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@LogCulture
	mov	DWORD PTR $T246343[ebp], OFFSET ??_C@_03ICICOMAL@yes?$AA@
	jmp	SHORT $LN15@LogCulture
$LN14@LogCulture:
	mov	DWORD PTR $T246343[ebp], OFFSET ??_C@_02KAJCLHKP@no?$AA@
$LN15@LogCulture:
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246158[ebp], esp
	mov	DWORD PTR $T246342[ebp], edx
	cmp	DWORD PTR $T246343[ebp], 0
	je	SHORT $LN127@LogCulture
	mov	eax, DWORD PTR $T246343[ebp]
	mov	DWORD PTR tv1048[ebp], eax
	jmp	SHORT $LN128@LogCulture
$LN127@LogCulture:
	mov	DWORD PTR tv1048[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN128@LogCulture:
	mov	ecx, DWORD PTR tv1048[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246342[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246342[ebp]
	mov	DWORD PTR tv796[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246161[ebp], esp
	mov	DWORD PTR $T246352[ebp], eax
	mov	ecx, OFFSET ??_C@_05OGJFDHHK@Drama?$AA@
	test	ecx, ecx
	je	SHORT $LN132@LogCulture
	mov	DWORD PTR tv1061[ebp], OFFSET ??_C@_05OGJFDHHK@Drama?$AA@
	jmp	SHORT $LN133@LogCulture
$LN132@LogCulture:
	mov	DWORD PTR tv1061[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN133@LogCulture:
	mov	edx, DWORD PTR tv1061[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246352[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246352[ebp]
	mov	DWORD PTR tv799[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog

; 4030 : 		pCity = m_pPlayer->GetFirstCityWithBuildingClass(eWritersGuildClass);

	mov	eax, DWORD PTR _eWritersGuildClass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+292]
	call	?GetFirstCityWithBuildingClass@CvPlayer@@QAEPAVCvCity@@W4BuildingClassTypes@@@Z ; CvPlayer::GetFirstCityWithBuildingClass
	mov	DWORD PTR _pCity$[ebp], eax

; 4031 : 		AppendToLog(strHeader, strLog, "Writers' Guild", (pCity != NULL ? pCity->getName() : ""));

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN16@LogCulture
	lea	edx, DWORD PTR $T246164[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv1342[ebp], eax
	mov	eax, DWORD PTR tv1342[ebp]
	mov	DWORD PTR tv804[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T246217[ebp]
	or	ecx, 1
	mov	DWORD PTR $T246217[ebp], ecx
	mov	edx, DWORD PTR tv804[ebp]
	mov	DWORD PTR tv317[ebp], edx
	jmp	SHORT $LN17@LogCulture
$LN16@LogCulture:
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN137@LogCulture
	mov	DWORD PTR tv1074[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN138@LogCulture
$LN137@LogCulture:
	mov	DWORD PTR tv1074[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN138@LogCulture:
	mov	ecx, DWORD PTR tv1074[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T246165[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	edx, DWORD PTR $T246165[ebp]
	mov	DWORD PTR tv809[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR $T246217[ebp]
	or	eax, 2
	mov	DWORD PTR $T246217[ebp], eax
	mov	ecx, DWORD PTR tv809[ebp]
	mov	DWORD PTR tv317[ebp], ecx
$LN17@LogCulture:
	mov	edx, DWORD PTR tv317[ebp]
	mov	DWORD PTR $T246163[ebp], edx
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246162[ebp], esp
	mov	DWORD PTR $T246365[ebp], eax
	mov	ecx, DWORD PTR $T246163[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246365[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T246365[ebp]
	mov	DWORD PTR tv811[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246168[ebp], esp
	mov	DWORD PTR $T246374[ebp], eax
	mov	ecx, OFFSET ??_C@_0P@JLJNLJPM@Writers?8?5Guild?$AA@
	test	ecx, ecx
	je	SHORT $LN145@LogCulture
	mov	DWORD PTR tv1102[ebp], OFFSET ??_C@_0P@JLJNLJPM@Writers?8?5Guild?$AA@
	jmp	SHORT $LN146@LogCulture
$LN145@LogCulture:
	mov	DWORD PTR tv1102[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN146@LogCulture:
	mov	edx, DWORD PTR tv1102[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246374[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246374[ebp]
	mov	DWORD PTR tv814[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 2
	je	SHORT $LN49@LogCulture
	and	DWORD PTR $T246217[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T246165[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN49@LogCulture:
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T246217[ebp]
	and	ecx, 1
	je	SHORT $LN50@LogCulture
	and	DWORD PTR $T246217[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T246164[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN50@LogCulture:

; 4032 : 		iSpecialists = (pCity != NULL) ? pCity->GetCityCitizens()->GetNumSpecialistsInBuilding(eWritersGuild) : 0;

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN18@LogCulture
	mov	edx, DWORD PTR _eWritersGuild$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?GetNumSpecialistsInBuilding@CvCityCitizens@@QBEHW4BuildingTypes@@@Z ; CvCityCitizens::GetNumSpecialistsInBuilding
	mov	DWORD PTR tv345[ebp], eax
	jmp	SHORT $LN19@LogCulture
$LN18@LogCulture:
	mov	DWORD PTR tv345[ebp], 0
$LN19@LogCulture:
	mov	eax, DWORD PTR tv345[ebp]
	mov	DWORD PTR _iSpecialists$[ebp], eax

; 4033 : 		AppendToLog(strHeader, strLog, "Spclsts", iSpecialists);

	mov	ecx, DWORD PTR _iSpecialists$[ebp]
	push	ecx
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246171[ebp], esp
	mov	DWORD PTR $T246391[ebp], edx
	mov	eax, OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	test	eax, eax
	je	SHORT $LN156@LogCulture
	mov	DWORD PTR tv1125[ebp], OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	jmp	SHORT $LN157@LogCulture
$LN156@LogCulture:
	mov	DWORD PTR tv1125[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN157@LogCulture:
	mov	ecx, DWORD PTR tv1125[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246391[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246391[ebp]
	mov	DWORD PTR tv821[ebp], edx
	lea	eax, DWORD PTR _strLog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHeader$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4034 : #ifdef AUI_WARNING_FIXES
; 4035 : 		AppendToLog(strHeader, strLog, "Slots", (int)GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_LITERATURE()));
; 4036 : #else
; 4037 : 		AppendToLog(strHeader, strLog, "Slots", GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_LITERATURE()));

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
	push	eax
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246172[ebp], esp
	mov	DWORD PTR $T246400[ebp], edx
	mov	eax, OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	test	eax, eax
	je	SHORT $LN161@LogCulture
	mov	DWORD PTR tv1138[ebp], OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	jmp	SHORT $LN162@LogCulture
$LN161@LogCulture:
	mov	DWORD PTR tv1138[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN162@LogCulture:
	mov	ecx, DWORD PTR tv1138[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246400[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246400[ebp]
	mov	DWORD PTR tv824[ebp], edx
	lea	eax, DWORD PTR _strLog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHeader$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog
$LN8@LogCulture:

; 4038 : #endif
; 4039 : 	}
; 4040 : 
; 4041 : 	if (eArtistsGuildClass != NO_BUILDINGCLASS && eArtistsGuild != NO_BUILDING)

	cmp	DWORD PTR _eArtistsGuildClass$[ebp], -1
	je	$LN7@LogCulture
	cmp	DWORD PTR _eArtistsGuild$[ebp], -1
	je	$LN7@LogCulture

; 4042 : 	{
; 4043 : 		AppendToLog(strHeader, strLog, "Guilds", pTeam.GetTeamTechs()->HasTech(eTechGuilds) ? "yes" : "no");

	mov	edx, DWORD PTR _eTechGuilds$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@LogCulture
	mov	DWORD PTR $T246410[ebp], OFFSET ??_C@_03ICICOMAL@yes?$AA@
	jmp	SHORT $LN21@LogCulture
$LN20@LogCulture:
	mov	DWORD PTR $T246410[ebp], OFFSET ??_C@_02KAJCLHKP@no?$AA@
$LN21@LogCulture:
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246173[ebp], esp
	mov	DWORD PTR $T246409[ebp], ecx
	cmp	DWORD PTR $T246410[ebp], 0
	je	SHORT $LN166@LogCulture
	mov	edx, DWORD PTR $T246410[ebp]
	mov	DWORD PTR tv1151[ebp], edx
	jmp	SHORT $LN167@LogCulture
$LN166@LogCulture:
	mov	DWORD PTR tv1151[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN167@LogCulture:
	mov	eax, DWORD PTR tv1151[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246409[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246409[ebp]
	mov	DWORD PTR tv826[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246176[ebp], esp
	mov	DWORD PTR $T246419[ebp], edx
	mov	eax, OFFSET ??_C@_06BGMOODEK@Guilds?$AA@
	test	eax, eax
	je	SHORT $LN171@LogCulture
	mov	DWORD PTR tv1164[ebp], OFFSET ??_C@_06BGMOODEK@Guilds?$AA@
	jmp	SHORT $LN172@LogCulture
$LN171@LogCulture:
	mov	DWORD PTR tv1164[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN172@LogCulture:
	mov	ecx, DWORD PTR tv1164[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246419[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246419[ebp]
	mov	DWORD PTR tv829[ebp], edx
	lea	eax, DWORD PTR _strLog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHeader$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog

; 4044 : 		pCity = m_pPlayer->GetFirstCityWithBuildingClass(eArtistsGuildClass);

	mov	edx, DWORD PTR _eArtistsGuildClass$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?GetFirstCityWithBuildingClass@CvPlayer@@QAEPAVCvCity@@W4BuildingClassTypes@@@Z ; CvPlayer::GetFirstCityWithBuildingClass
	mov	DWORD PTR _pCity$[ebp], eax

; 4045 : 		AppendToLog(strHeader, strLog, "Artists' Guild", (pCity != NULL ? pCity->getName() : ""));

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN22@LogCulture
	lea	ecx, DWORD PTR $T246179[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv1265[ebp], eax
	mov	edx, DWORD PTR tv1265[ebp]
	mov	DWORD PTR tv834[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR $T246217[ebp]
	or	eax, 4
	mov	DWORD PTR $T246217[ebp], eax
	mov	ecx, DWORD PTR tv834[ebp]
	mov	DWORD PTR tv482[ebp], ecx
	jmp	SHORT $LN23@LogCulture
$LN22@LogCulture:
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN176@LogCulture
	mov	DWORD PTR tv1177[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN177@LogCulture
$LN176@LogCulture:
	mov	DWORD PTR tv1177[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN177@LogCulture:
	mov	eax, DWORD PTR tv1177[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246180[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T246180[ebp]
	mov	DWORD PTR tv839[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR $T246217[ebp]
	or	edx, 8
	mov	DWORD PTR $T246217[ebp], edx
	mov	eax, DWORD PTR tv839[ebp]
	mov	DWORD PTR tv482[ebp], eax
$LN23@LogCulture:
	mov	ecx, DWORD PTR tv482[ebp]
	mov	DWORD PTR $T246178[ebp], ecx
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246177[ebp], esp
	mov	DWORD PTR $T246432[ebp], edx
	mov	eax, DWORD PTR $T246178[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246432[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T246432[ebp]
	mov	DWORD PTR tv841[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	sub	esp, 28					; 0000001cH
	mov	edx, esp
	mov	DWORD PTR $T246183[ebp], esp
	mov	DWORD PTR $T246441[ebp], edx
	mov	eax, OFFSET ??_C@_0P@NHMEKGDI@Artists?8?5Guild?$AA@
	test	eax, eax
	je	SHORT $LN184@LogCulture
	mov	DWORD PTR tv1205[ebp], OFFSET ??_C@_0P@NHMEKGDI@Artists?8?5Guild?$AA@
	jmp	SHORT $LN185@LogCulture
$LN184@LogCulture:
	mov	DWORD PTR tv1205[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN185@LogCulture:
	mov	ecx, DWORD PTR tv1205[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246441[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T246441[ebp]
	mov	DWORD PTR tv844[ebp], edx
	lea	eax, DWORD PTR _strLog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHeader$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR $T246217[ebp]
	and	edx, 8
	je	SHORT $LN61@LogCulture
	and	DWORD PTR $T246217[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T246180[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN61@LogCulture:
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 4
	je	SHORT $LN62@LogCulture
	and	DWORD PTR $T246217[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T246179[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN62@LogCulture:

; 4046 : 		iSpecialists = (pCity != NULL) ? pCity->GetCityCitizens()->GetNumSpecialistsInBuilding(eArtistsGuild) : 0;

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN24@LogCulture
	mov	ecx, DWORD PTR _eArtistsGuild$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?GetNumSpecialistsInBuilding@CvCityCitizens@@QBEHW4BuildingTypes@@@Z ; CvCityCitizens::GetNumSpecialistsInBuilding
	mov	DWORD PTR tv510[ebp], eax
	jmp	SHORT $LN25@LogCulture
$LN24@LogCulture:
	mov	DWORD PTR tv510[ebp], 0
$LN25@LogCulture:
	mov	edx, DWORD PTR tv510[ebp]
	mov	DWORD PTR _iSpecialists$[ebp], edx

; 4047 : 		AppendToLog(strHeader, strLog, "Spclsts", iSpecialists);

	mov	eax, DWORD PTR _iSpecialists$[ebp]
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246186[ebp], esp
	mov	DWORD PTR $T246458[ebp], ecx
	mov	edx, OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	test	edx, edx
	je	SHORT $LN195@LogCulture
	mov	DWORD PTR tv1228[ebp], OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	jmp	SHORT $LN196@LogCulture
$LN195@LogCulture:
	mov	DWORD PTR tv1228[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN196@LogCulture:
	mov	eax, DWORD PTR tv1228[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246458[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246458[ebp]
	mov	DWORD PTR tv851[ebp], ecx
	lea	edx, DWORD PTR _strLog$[ebp]
	push	edx
	lea	eax, DWORD PTR _strHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4048 : #ifdef AUI_WARNING_FIXES
; 4049 : 		AppendToLog(strHeader, strLog, "Slots", (int)GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT()));
; 4050 : #else
; 4051 : 		AppendToLog(strHeader, strLog, "Slots", GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT()));

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
	push	eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246187[ebp], esp
	mov	DWORD PTR $T246467[ebp], ecx
	mov	edx, OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	test	edx, edx
	je	SHORT $LN200@LogCulture
	mov	DWORD PTR tv1241[ebp], OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	jmp	SHORT $LN201@LogCulture
$LN200@LogCulture:
	mov	DWORD PTR tv1241[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN201@LogCulture:
	mov	eax, DWORD PTR tv1241[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246467[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246467[ebp]
	mov	DWORD PTR tv854[ebp], ecx
	lea	edx, DWORD PTR _strLog$[ebp]
	push	edx
	lea	eax, DWORD PTR _strHeader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog
$LN7@LogCulture:

; 4052 : #endif
; 4053 : 	}
; 4054 : 
; 4055 : 	if (eMusiciansGuildClass != NO_BUILDINGCLASS && eMusiciansGuild != NO_BUILDING)

	cmp	DWORD PTR _eMusiciansGuildClass$[ebp], -1
	je	$LN6@LogCulture
	cmp	DWORD PTR _eMusiciansGuild$[ebp], -1
	je	$LN6@LogCulture

; 4056 : 	{
; 4057 : 		AppendToLog(strHeader, strLog, "Acoustics", pTeam.GetTeamTechs()->HasTech(eTechAcoustics) ? "yes" : "no");

	mov	ecx, DWORD PTR _eTechAcoustics$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN26@LogCulture
	mov	DWORD PTR $T246477[ebp], OFFSET ??_C@_03ICICOMAL@yes?$AA@
	jmp	SHORT $LN27@LogCulture
$LN26@LogCulture:
	mov	DWORD PTR $T246477[ebp], OFFSET ??_C@_02KAJCLHKP@no?$AA@
$LN27@LogCulture:
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246188[ebp], esp
	mov	DWORD PTR $T246476[ebp], eax
	cmp	DWORD PTR $T246477[ebp], 0
	je	SHORT $LN205@LogCulture
	mov	ecx, DWORD PTR $T246477[ebp]
	mov	DWORD PTR tv1254[ebp], ecx
	jmp	SHORT $LN206@LogCulture
$LN205@LogCulture:
	mov	DWORD PTR tv1254[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN206@LogCulture:
	mov	edx, DWORD PTR tv1254[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246476[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246476[ebp]
	mov	DWORD PTR tv856[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246191[ebp], esp
	mov	DWORD PTR $T246486[ebp], ecx
	mov	edx, OFFSET ??_C@_09DGDBNFEI@Acoustics?$AA@
	test	edx, edx
	je	SHORT $LN210@LogCulture
	mov	DWORD PTR tv1267[ebp], OFFSET ??_C@_09DGDBNFEI@Acoustics?$AA@
	jmp	SHORT $LN211@LogCulture
$LN210@LogCulture:
	mov	DWORD PTR tv1267[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN211@LogCulture:
	mov	eax, DWORD PTR tv1267[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246486[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246486[ebp]
	mov	DWORD PTR tv859[ebp], ecx
	lea	edx, DWORD PTR _strLog$[ebp]
	push	edx
	lea	eax, DWORD PTR _strHeader$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog

; 4058 : 		pCity = m_pPlayer->GetFirstCityWithBuildingClass(eMusiciansGuildClass);

	mov	ecx, DWORD PTR _eMusiciansGuildClass$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?GetFirstCityWithBuildingClass@CvPlayer@@QAEPAVCvCity@@W4BuildingClassTypes@@@Z ; CvPlayer::GetFirstCityWithBuildingClass
	mov	DWORD PTR _pCity$[ebp], eax

; 4059 : 		AppendToLog(strHeader, strLog, "Musicians' Guild", (pCity != NULL ? pCity->getName() : ""));

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN28@LogCulture
	lea	eax, DWORD PTR $T246194[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv1188[ebp], eax
	mov	ecx, DWORD PTR tv1188[ebp]
	mov	DWORD PTR tv864[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	edx, DWORD PTR $T246217[ebp]
	or	edx, 16					; 00000010H
	mov	DWORD PTR $T246217[ebp], edx
	mov	eax, DWORD PTR tv864[ebp]
	mov	DWORD PTR tv615[ebp], eax
	jmp	SHORT $LN29@LogCulture
$LN28@LogCulture:
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN215@LogCulture
	mov	DWORD PTR tv1280[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN216@LogCulture
$LN215@LogCulture:
	mov	DWORD PTR tv1280[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN216@LogCulture:
	mov	edx, DWORD PTR tv1280[ebp]
	push	edx
	lea	ecx, DWORD PTR $T246195[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	eax, DWORD PTR $T246195[ebp]
	mov	DWORD PTR tv869[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR $T246217[ebp]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR $T246217[ebp], ecx
	mov	edx, DWORD PTR tv869[ebp]
	mov	DWORD PTR tv615[ebp], edx
$LN29@LogCulture:
	mov	eax, DWORD PTR tv615[ebp]
	mov	DWORD PTR $T246193[ebp], eax
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246192[ebp], esp
	mov	DWORD PTR $T246499[ebp], ecx
	mov	edx, DWORD PTR $T246193[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246499[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T246499[ebp]
	mov	DWORD PTR tv871[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T246198[ebp], esp
	mov	DWORD PTR $T246508[ebp], ecx
	mov	edx, OFFSET ??_C@_0BB@GBPGCHOD@Musicians?8?5Guild?$AA@
	test	edx, edx
	je	SHORT $LN223@LogCulture
	mov	DWORD PTR tv1308[ebp], OFFSET ??_C@_0BB@GBPGCHOD@Musicians?8?5Guild?$AA@
	jmp	SHORT $LN224@LogCulture
$LN223@LogCulture:
	mov	DWORD PTR tv1308[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN224@LogCulture:
	mov	eax, DWORD PTR tv1308[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246508[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR $T246508[ebp]
	mov	DWORD PTR tv874[ebp], ecx
	lea	edx, DWORD PTR _strLog$[ebp]
	push	edx
	lea	eax, DWORD PTR _strHeader$[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ; CvPlayerCulture::AppendToLog
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR $T246217[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN73@LogCulture
	and	DWORD PTR $T246217[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T246195[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN73@LogCulture:
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T246217[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN74@LogCulture
	and	DWORD PTR $T246217[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T246194[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN74@LogCulture:

; 4060 : 		iSpecialists = (pCity != NULL) ? pCity->GetCityCitizens()->GetNumSpecialistsInBuilding(eMusiciansGuild) : 0;

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN30@LogCulture
	mov	eax, DWORD PTR _eMusiciansGuild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?GetNumSpecialistsInBuilding@CvCityCitizens@@QBEHW4BuildingTypes@@@Z ; CvCityCitizens::GetNumSpecialistsInBuilding
	mov	DWORD PTR tv643[ebp], eax
	jmp	SHORT $LN31@LogCulture
$LN30@LogCulture:
	mov	DWORD PTR tv643[ebp], 0
$LN31@LogCulture:
	mov	ecx, DWORD PTR tv643[ebp]
	mov	DWORD PTR _iSpecialists$[ebp], ecx

; 4061 : 		AppendToLog(strHeader, strLog, "Spclsts", iSpecialists);

	mov	edx, DWORD PTR _iSpecialists$[ebp]
	push	edx
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246201[ebp], esp
	mov	DWORD PTR $T246525[ebp], eax
	mov	ecx, OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	test	ecx, ecx
	je	SHORT $LN234@LogCulture
	mov	DWORD PTR tv1331[ebp], OFFSET ??_C@_07FBNOAGOL@Spclsts?$AA@
	jmp	SHORT $LN235@LogCulture
$LN234@LogCulture:
	mov	DWORD PTR tv1331[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN235@LogCulture:
	mov	edx, DWORD PTR tv1331[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246525[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246525[ebp]
	mov	DWORD PTR tv881[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4062 : #ifdef AUI_WARNING_FIXES
; 4063 : 		AppendToLog(strHeader, strLog, "Slots", (int)GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_MUSIC()));
; 4064 : #else
; 4065 : 		AppendToLog(strHeader, strLog, "Slots", GetNumAvailableGreatWorkSlots(CvTypes::getGREAT_WORK_SLOT_MUSIC()));

	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumAvailableGreatWorkSlots@CvPlayerCulture@@QBEHW4GreatWorkSlotType@@@Z ; CvPlayerCulture::GetNumAvailableGreatWorkSlots
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246202[ebp], esp
	mov	DWORD PTR $T246534[ebp], eax
	mov	ecx, OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	test	ecx, ecx
	je	SHORT $LN239@LogCulture
	mov	DWORD PTR tv1344[ebp], OFFSET ??_C@_05KMEKLDKF@Slots?$AA@
	jmp	SHORT $LN240@LogCulture
$LN239@LogCulture:
	mov	DWORD PTR tv1344[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN240@LogCulture:
	mov	edx, DWORD PTR tv1344[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246534[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246534[ebp]
	mov	DWORD PTR tv884[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog
$LN6@LogCulture:

; 4066 : #endif
; 4067 : 	}
; 4068 : 
; 4069 : #ifdef AUI_WARNING_FIXES
; 4070 : 	AppendToLog(strHeader, strLog, "Great Works", (int)GetNumGreatWorks());
; 4071 : #else
; 4072 : 	AppendToLog(strHeader, strLog, "Great Works", GetNumGreatWorks());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumGreatWorks@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumGreatWorks
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246203[ebp], esp
	mov	DWORD PTR $T246543[ebp], eax
	mov	ecx, OFFSET ??_C@_0M@HGKBMOMI@Great?5Works?$AA@
	test	ecx, ecx
	je	SHORT $LN244@LogCulture
	mov	DWORD PTR tv1357[ebp], OFFSET ??_C@_0M@HGKBMOMI@Great?5Works?$AA@
	jmp	SHORT $LN245@LogCulture
$LN244@LogCulture:
	mov	DWORD PTR tv1357[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN245@LogCulture:
	mov	edx, DWORD PTR tv1357[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246543[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246543[ebp]
	mov	DWORD PTR tv887[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4073 : #endif
; 4074 : 	AppendToLog(strHeader, strLog, "Tourism", GetTourism());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246204[ebp], esp
	mov	DWORD PTR $T246552[ebp], eax
	mov	ecx, OFFSET ??_C@_07COHILFBB@Tourism?$AA@
	test	ecx, ecx
	je	SHORT $LN249@LogCulture
	mov	DWORD PTR tv1370[ebp], OFFSET ??_C@_07COHILFBB@Tourism?$AA@
	jmp	SHORT $LN250@LogCulture
$LN249@LogCulture:
	mov	DWORD PTR tv1370[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN250@LogCulture:
	mov	edx, DWORD PTR tv1370[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246552[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246552[ebp]
	mov	DWORD PTR tv890[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4075 : 	AppendToLog(strHeader, strLog, "Theming Bonuses", GetTotalThemingBonuses());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTotalThemingBonuses@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTotalThemingBonuses
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T246205[ebp], esp
	mov	DWORD PTR $T246561[ebp], eax
	mov	ecx, OFFSET ??_C@_0BA@ODKHEAMB@Theming?5Bonuses?$AA@
	test	ecx, ecx
	je	SHORT $LN254@LogCulture
	mov	DWORD PTR tv1383[ebp], OFFSET ??_C@_0BA@ODKHEAMB@Theming?5Bonuses?$AA@
	jmp	SHORT $LN255@LogCulture
$LN254@LogCulture:
	mov	DWORD PTR tv1383[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN255@LogCulture:
	mov	edx, DWORD PTR tv1383[ebp]
	push	edx
	mov	ecx, DWORD PTR $T246561[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T246561[ebp]
	mov	DWORD PTR tv893[ebp], eax
	lea	ecx, DWORD PTR _strLog$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strHeader$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ; CvPlayerCulture::AppendToLog

; 4076 : 
; 4077 : 	if(bBuildHeader)

	movzx	eax, BYTE PTR _bBuildHeader$[ebp]
	test	eax, eax
	je	SHORT $LN5@LogCulture

; 4078 : 	{
; 4079 : 		pLog->Msg(strHeader);

	lea	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246565[ebp], eax
	mov	ecx, DWORD PTR $T246565[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
$LN5@LogCulture:

; 4080 : 	}
; 4081 : 	pLog->Msg(strLog);

	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246569[ebp], eax
	mov	eax, DWORD PTR $T246569[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 4082 : 
; 4083 : 	CvCity *pLoopCity;
; 4084 : 	int iLoop;
; 4085 : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN4@LogCulture
$LN3@LogCulture:
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN4@LogCulture:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN2@LogCulture

; 4086 : 	{
; 4087 : 		if (pLoopCity->GetCityCulture()->GetNumGreatWorks() > 0)

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	test	eax, eax
	jle	SHORT $LN1@LogCulture

; 4088 : 		{
; 4089 : 			pLoopCity->GetCityCulture()->LogGreatWorks(pLog);

	mov	eax, DWORD PTR _pLog$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z ; CvCityCulture::LogGreatWorks
$LN1@LogCulture:

; 4090 : 		}
; 4091 : 	}

	jmp	SHORT $LN3@LogCulture
$LN2@LogCulture:

; 4092 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN12@LogCulture:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$0:
	lea	ecx, DWORD PTR _strHeader$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$1:
	lea	ecx, DWORD PTR _strLog$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$2:
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$3:
	lea	ecx, DWORD PTR $T246153[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$4:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$5:
	mov	ecx, DWORD PTR $T246154[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$9:
	mov	ecx, DWORD PTR $T246158[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$11:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 1
	je	$LN44@LogCulture
	and	DWORD PTR $T246217[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T246164[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN44@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$12:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 2
	je	$LN46@LogCulture
	and	DWORD PTR $T246217[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T246165[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN46@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$13:
	mov	ecx, DWORD PTR $T246162[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$17:
	mov	ecx, DWORD PTR $T246173[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$19:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 4
	je	$LN56@LogCulture
	and	DWORD PTR $T246217[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T246179[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN56@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$20:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 8
	je	$LN58@LogCulture
	and	DWORD PTR $T246217[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T246180[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN58@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$21:
	mov	ecx, DWORD PTR $T246177[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$25:
	mov	ecx, DWORD PTR $T246188[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$27:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 16					; 00000010H
	je	$LN68@LogCulture
	and	DWORD PTR $T246217[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T246194[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN68@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$28:
	mov	eax, DWORD PTR $T246217[ebp]
	and	eax, 32					; 00000020H
	je	$LN70@LogCulture
	and	DWORD PTR $T246217[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T246195[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN70@LogCulture:
	ret	0
__unwindfunclet$?LogCultureData@CvPlayerCulture@@AAEXXZ$29:
	mov	ecx, DWORD PTR $T246192[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LogCultureData@CvPlayerCulture@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-912]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogCultureData@CvPlayerCulture@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogCultureData@CvPlayerCulture@@AAEXXZ ENDP		; CvPlayerCulture::LogCultureData
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z$1
__ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_strHeader$ = 8						; size = 4
_strLog$ = 12						; size = 4
_strHeaderValue$ = 16					; size = 28
_strValue$ = 44						; size = 28
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z PROC ; CvPlayerCulture::AppendToLog, COMDAT
; _this$ = ecx

; 4096 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 4097 : 	strHeader += strHeaderValue;

	lea	eax, DWORD PTR _strHeaderValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4098 : 	strHeader += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4099 : 	strLog += strValue;

	lea	ecx, DWORD PTR _strValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4100 : 	strLog += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4101 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z$0:
	lea	ecx, DWORD PTR _strValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z$1:
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@1@Z ENDP ; CvPlayerCulture::AppendToLog
PUBLIC	??_C@_03DPLIHHLN@?$CFd?0?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_03DPLIHHLN@?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_03DPLIHHLN@?$CFd?0?$AA@ DB '%d,', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z$1
__ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
_str$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strHeader$ = 8						; size = 4
_strLog$ = 12						; size = 4
_strHeaderValue$ = 16					; size = 28
_iValue$ = 44						; size = 4
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z PROC ; CvPlayerCulture::AppendToLog, COMDAT
; _this$ = ecx

; 4104 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4105 : 	strHeader += strHeaderValue;

	lea	eax, DWORD PTR _strHeaderValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4106 : 	strHeader += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4107 : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4108 : 	str.Format("%d,", iValue);

	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	push	OFFSET ??_C@_03DPLIHHLN@?$CFd?0?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 4109 : 	strLog += str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4110 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z$0:
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@H@Z ENDP ; CvPlayerCulture::AppendToLog
PUBLIC	??_C@_05EIOELHKK@?$CF?42f?0?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z ; CvPlayerCulture::AppendToLog
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_05EIOELHKK@?$CF?42f?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_05EIOELHKK@?$CF?42f?0?$AA@ DB '%.2f,', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z$1
__ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
_str$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strHeader$ = 8						; size = 4
_strLog$ = 12						; size = 4
_strHeaderValue$ = 16					; size = 28
_fValue$ = 44						; size = 4
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z PROC ; CvPlayerCulture::AppendToLog, COMDAT
; _this$ = ecx

; 4113 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4114 : 	strHeader += strHeaderValue;

	lea	eax, DWORD PTR _strHeaderValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4115 : 	strHeader += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	ecx, DWORD PTR _strHeader$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4116 : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4117 : 	str.Format("%.2f,", fValue);

	cvtss2sd xmm0, DWORD PTR _fValue$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05EIOELHKK@?$CF?42f?0?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 4118 : 	strLog += str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 4119 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z$0:
	lea	ecx, DWORD PTR _strHeaderValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AppendToLog@CvPlayerCulture@@AAEXAAVCvString@@0V2@M@Z ENDP ; CvPlayerCulture::AppendToLog
PUBLIC	??_C@_0BF@KFGBOFPK@Themed?5Building?5in?0?5?$AA@ ; `string'
PUBLIC	??_C@_0M@IECLKOAN@?0?5Bonus?3?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_05BOJBODEL@?0?5?$CFd?0?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BF@KFGBOFPK@Themed?5Building?5in?0?5?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BF@KFGBOFPK@Themed?5Building?5in?0?5?$AA@ DB 'Themed Building in, '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IECLKOAN@?0?5Bonus?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@IECLKOAN@?0?5Bonus?3?5?$CFd?$AA@ DB ', Bonus: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOJBODEL@?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_05BOJBODEL@?0?5?$CFd?0?$AA@ DB ', %d,', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$12
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z
_TEXT	SEGMENT
tv366 = -484						; size = 4
tv247 = -480						; size = 4
tv365 = -476						; size = 4
tv245 = -472						; size = 4
tv74 = -468						; size = 4
tv243 = -464						; size = 4
tv255 = -460						; size = 4
tv241 = -456						; size = 4
tv266 = -452						; size = 4
tv239 = -448						; size = 4
tv289 = -444						; size = 4
tv237 = -440						; size = 4
tv300 = -436						; size = 4
tv311 = -432						; size = 4
tv84 = -428						; size = 4
tv268 = -424						; size = 4
_this$ = -420						; size = 4
$T246735 = -416						; size = 4
$T246727 = -412						; size = 4
$T246723 = -408						; size = 4
$T246719 = -404						; size = 4
$T246699 = -400						; size = 4
$T246698 = -396						; size = 4
$T246694 = -392						; size = 4
$T246668 = -388						; size = 28
$T246667 = -360						; size = 28
$T246666 = -332						; size = 28
$T246665 = -304						; size = 28
$T246664 = -276						; size = 28
$T246663 = -248						; size = 28
$T246662 = -220						; size = 28
$T246661 = -192						; size = 28
_pkBldg$ = -164						; size = 4
_strLog$ = -160						; size = 28
_strTurn$ = -132					; size = 28
_strPlayerName$ = -104					; size = 28
_pLog$ = -76						; size = 4
_strLine$ = -72						; size = 28
_strBonus$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iCityID$ = 8						; size = 4
_eBuilding$ = 12					; size = 4
_iBonus$ = 16						; size = 4
?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z PROC ; CvPlayerCulture::LogThemedBuilding, COMDAT
; _this$ = ecx

; 4122 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 472				; 000001d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4123 : 	if(!(GC.getLogging() && GC.getAILogging()))

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@LogThemedB
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@LogThemedB
$LN2@LogThemedB:

; 4124 : 	{
; 4125 : 		return;

	jmp	$LN4@LogThemedB
$LN3@LogThemedB:

; 4126 : 	}
; 4127 : 
; 4128 : 	CvString strLog;

	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4129 : 	FILogFile* pLog;
; 4130 : 	CvString strPlayerName = m_pPlayer->getCivilizationShortDescription();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T246694[ebp], eax
	cmp	DWORD PTR $T246694[ebp], 0
	je	SHORT $LN24@LogThemedB
	mov	eax, DWORD PTR $T246694[ebp]
	mov	DWORD PTR tv268[ebp], eax
	jmp	SHORT $LN25@LogThemedB
$LN24@LogThemedB:
	mov	DWORD PTR tv268[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN25@LogThemedB:
	mov	ecx, DWORD PTR tv268[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4131 : 	pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv84[ebp], eax
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	lea	eax, DWORD PTR $T246661[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z ; CvPlayerCulture::GetLogFileName
	mov	DWORD PTR tv311[ebp], eax
	mov	ecx, DWORD PTR tv311[ebp]
	mov	DWORD PTR $T246698[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T246698[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246699[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T246699[ebp]
	push	edx
	mov	eax, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T246661[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4132 : 
; 4133 : 	CvString strLine;

	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 4134 : 	CvString strTurn;

	lea	ecx, DWORD PTR _strTurn$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 4135 : 	CvString strBonus;

	lea	ecx, DWORD PTR _strBonus$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 4136 : 	CvBuildingEntry *pkBldg = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBldg$[ebp], eax

; 4137 : 	if (pkBldg)

	cmp	DWORD PTR _pkBldg$[ebp], 0
	je	$LN1@LogThemedB

; 4138 : 	{
; 4139 : 		strTurn.Format (", %d,", GC.getGame().getGameTurn());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246719[ebp], edx
	mov	ecx, DWORD PTR $T246719[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	push	eax
	push	OFFSET ??_C@_05BOJBODEL@?0?5?$CFd?0?$AA@
	lea	eax, DWORD PTR _strTurn$[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 4140 : 		strBonus.Format (", Bonus: %d", iBonus);

	mov	ecx, DWORD PTR _iBonus$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@IECLKOAN@?0?5Bonus?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _strBonus$[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 4141 : 		strLine = strPlayerName + strTurn + "Themed Building in, " + m_pPlayer->getCity(iCityID)->getName() + ", " + pkBldg->GetDescription() + strBonus;

	lea	eax, DWORD PTR $T246662[ebp]
	push	eax
	mov	ecx, DWORD PTR _iCityID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	ecx, eax
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv300[ebp], eax
	mov	eax, DWORD PTR tv300[ebp]
	mov	DWORD PTR tv237[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _strTurn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	lea	eax, DWORD PTR $T246663[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv289[ebp], eax
	mov	ecx, DWORD PTR tv289[ebp]
	mov	DWORD PTR tv239[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	OFFSET ??_C@_0BF@KFGBOFPK@Themed?5Building?5in?0?5?$AA@
	mov	edx, DWORD PTR tv239[ebp]
	push	edx
	lea	eax, DWORD PTR $T246664[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv266[ebp], eax
	mov	ecx, DWORD PTR tv266[ebp]
	mov	DWORD PTR tv241[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv237[ebp]
	push	edx
	mov	eax, DWORD PTR tv241[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246665[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv255[ebp], eax
	mov	edx, DWORD PTR tv255[ebp]
	mov	DWORD PTR tv243[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	eax, DWORD PTR tv243[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246666[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv74[ebp], eax
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv245[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _pkBldg$[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246723[ebp], eax
	mov	eax, DWORD PTR $T246723[ebp]
	push	eax
	mov	ecx, DWORD PTR tv245[ebp]
	push	ecx
	lea	edx, DWORD PTR $T246667[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv365[ebp], eax
	mov	eax, DWORD PTR tv365[ebp]
	mov	DWORD PTR tv247[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _strBonus$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv247[ebp]
	push	edx
	lea	eax, DWORD PTR $T246668[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv366[ebp], eax
	mov	ecx, DWORD PTR tv366[ebp]
	mov	DWORD PTR $T246727[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T246727[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T246668[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T246667[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T246666[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T246665[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T246664[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T246663[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T246662[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4142 : 
; 4143 : 		pLog->Msg(strLine);

	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246735[ebp], eax
	mov	edx, DWORD PTR $T246735[ebp]
	push	edx
	mov	eax, DWORD PTR _pLog$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pLog$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	add	esp, 8
$LN1@LogThemedB:

; 4144 : 	}
; 4145 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strBonus$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strTurn$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@LogThemedB:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$0:
	lea	ecx, DWORD PTR _strLog$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$1:
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$2:
	lea	ecx, DWORD PTR $T246661[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$3:
	lea	ecx, DWORD PTR _strLine$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$4:
	lea	ecx, DWORD PTR _strTurn$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$5:
	lea	ecx, DWORD PTR _strBonus$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$6:
	lea	ecx, DWORD PTR $T246662[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$7:
	lea	ecx, DWORD PTR $T246663[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$8:
	lea	ecx, DWORD PTR $T246664[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$9:
	lea	ecx, DWORD PTR $T246665[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$10:
	lea	ecx, DWORD PTR $T246666[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$11:
	lea	ecx, DWORD PTR $T246667[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z$12:
	lea	ecx, DWORD PTR $T246668[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-476]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogThemedBuilding@CvPlayerCulture@@AAEXHW4BuildingTypes@@H@Z ENDP ; CvPlayerCulture::LogThemedBuilding
PUBLIC	??_C@_0DL@HFCBALIA@Acquired?5Work?5from?5Player?3?5?$CFd?0?5D@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0DL@HFCBALIA@Acquired?5Work?5from?5Player?3?5?$CFd?0?5D@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0DL@HFCBALIA@Acquired?5Work?5from?5Player?3?5?$CFd?0?5D@ DB 'Acquir'
	DB	'ed Work from Player: %d, Discarded: %d, Acquired: %d', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z
_TEXT	SEGMENT
tv207 = -268						; size = 4
tv188 = -264						; size = 4
tv230 = -260						; size = 4
tv241 = -256						; size = 4
tv84 = -252						; size = 4
tv209 = -248						; size = 4
_this$ = -244						; size = 4
$T246816 = -240						; size = 4
$T246812 = -236						; size = 4
$T246808 = -232						; size = 4
$T246792 = -228						; size = 4
$T246791 = -224						; size = 4
$T246787 = -220						; size = 4
$T246767 = -216						; size = 28
$T246766 = -188						; size = 28
$T246765 = -160						; size = 28
_strLog$ = -132						; size = 28
_strTurn$ = -104					; size = 28
_strPlayerName$ = -76					; size = 28
_pLog$ = -48						; size = 4
_strLine$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eOtherPlayer$ = 8					; size = 4
_iWorkDiscarded$ = 12					; size = 4
_iWorkAcquired$ = 16					; size = 4
?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z PROC ; CvPlayerCulture::LogSwapWorks, COMDAT
; _this$ = ecx

; 4148 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4149 : 	if(!(GC.getLogging() && GC.getAILogging()))

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@LogSwapWor
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@LogSwapWor
$LN1@LogSwapWor:

; 4150 : 	{
; 4151 : 		return;

	jmp	$LN3@LogSwapWor
$LN2@LogSwapWor:

; 4152 : 	}
; 4153 : 
; 4154 : 	CvString strLog;

	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4155 : 	FILogFile* pLog;
; 4156 : 	CvString strPlayerName = m_pPlayer->getCivilizationShortDescription();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+292]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T246787[ebp], eax
	cmp	DWORD PTR $T246787[ebp], 0
	je	SHORT $LN17@LogSwapWor
	mov	eax, DWORD PTR $T246787[ebp]
	mov	DWORD PTR tv209[ebp], eax
	jmp	SHORT $LN18@LogSwapWor
$LN17@LogSwapWor:
	mov	DWORD PTR tv209[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@LogSwapWor:
	mov	ecx, DWORD PTR tv209[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4157 : 	pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv84[ebp], eax
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	lea	eax, DWORD PTR $T246765[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z ; CvPlayerCulture::GetLogFileName
	mov	DWORD PTR tv241[ebp], eax
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR $T246791[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T246791[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246792[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T246792[ebp]
	push	edx
	mov	eax, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T246765[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4158 : 
; 4159 : 	CvString strLine;

	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 4160 : 	strLine.Format ("Acquired Work from Player: %d, Discarded: %d, Acquired: %d", (int)eOtherPlayer, iWorkDiscarded, iWorkAcquired);

	mov	ecx, DWORD PTR _iWorkAcquired$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iWorkDiscarded$[ebp]
	push	edx
	mov	eax, DWORD PTR _eOtherPlayer$[ebp]
	push	eax
	push	OFFSET ??_C@_0DL@HFCBALIA@Acquired?5Work?5from?5Player?3?5?$CFd?0?5D@
	lea	ecx, DWORD PTR _strLine$[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 20					; 00000014H

; 4161 : 	CvString strTurn;

	lea	ecx, DWORD PTR _strTurn$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 4162 : 	strTurn.Format (", %d,", GC.getGame().getGameTurn());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246808[ebp], edx
	mov	ecx, DWORD PTR $T246808[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	push	eax
	push	OFFSET ??_C@_05BOJBODEL@?0?5?$CFd?0?$AA@
	lea	eax, DWORD PTR _strTurn$[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 4163 : 	strLine = strPlayerName + strTurn + strLine;

	lea	ecx, DWORD PTR _strTurn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strPlayerName$[ebp]
	push	edx
	lea	eax, DWORD PTR $T246766[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR tv230[ebp]
	mov	DWORD PTR tv188[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	edx, DWORD PTR _strLine$[ebp]
	push	edx
	mov	eax, DWORD PTR tv188[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246767[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv207[ebp], eax
	mov	edx, DWORD PTR tv207[ebp]
	mov	DWORD PTR $T246812[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T246812[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T246767[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T246766[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4164 : 
; 4165 : 	pLog->Msg(strLine);

	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T246816[ebp], eax
	mov	eax, DWORD PTR $T246816[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 4166 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strTurn$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strLine$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strLog$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@LogSwapWor:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$0:
	lea	ecx, DWORD PTR _strLog$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$1:
	lea	ecx, DWORD PTR _strPlayerName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$2:
	lea	ecx, DWORD PTR $T246765[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$3:
	lea	ecx, DWORD PTR _strLine$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$4:
	lea	ecx, DWORD PTR _strTurn$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$5:
	lea	ecx, DWORD PTR $T246766[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z$6:
	lea	ecx, DWORD PTR $T246767[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSwapWorks@CvPlayerCulture@@AAEXW4PlayerTypes@@HH@Z ENDP ; CvPlayerCulture::LogSwapWorks
PUBLIC	??_C@_0BB@EKBGKIJN@CultureAILog?4csv?$AA@	; `string'
PUBLIC	??_C@_04EBGNMJBD@?4csv?$AA@			; `string'
PUBLIC	??_C@_0O@MFAMHLGH@CultureAILog_?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
;	COMDAT ??_C@_0BB@EKBGKIJN@CultureAILog?4csv?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BB@EKBGKIJN@CultureAILog?4csv?$AA@ DB 'CultureAILog.csv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBGNMJBD@?4csv?$AA@
CONST	SEGMENT
??_C@_04EBGNMJBD@?4csv?$AA@ DB '.csv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MFAMHLGH@CultureAILog_?$AA@
CONST	SEGMENT
??_C@_0O@MFAMHLGH@CultureAILog_?$AA@ DB 'CultureAILog_', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$2
__ehfuncinfo$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z
_TEXT	SEGMENT
tv142 = -124						; size = 4
tv129 = -120						; size = 4
tv169 = -116						; size = 4
_this$ = -112						; size = 4
$T246857 = -108						; size = 4
$T246848 = -104						; size = 4
$T246843 = -100						; size = 28
$T246842 = -72						; size = 28
_strLogName$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_playerName$ = 12					; size = 4
?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z PROC ; CvPlayerCulture::GetLogFileName, COMDAT
; _this$ = ecx

; 4170 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T246848[ebp], 0

; 4171 : 	CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 4172 : 
; 4173 : 	// Open the log file
; 4174 : 	if(GC.getPlayerAndCityAILogSplit())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetLogFile

; 4175 : 	{
; 4176 : 		strLogName = "CultureAILog_" + playerName + ".csv";

	mov	ecx, DWORD PTR _playerName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0O@MFAMHLGH@CultureAILog_?$AA@
	lea	edx, DWORD PTR $T246842[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv169[ebp], eax
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	OFFSET ??_C@_04EBGNMJBD@?4csv?$AA@
	mov	ecx, DWORD PTR tv129[ebp]
	push	ecx
	lea	edx, DWORD PTR $T246843[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T246857[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T246857[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T246843[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T246842[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4177 : 	}
; 4178 : 	else

	jmp	SHORT $LN1@GetLogFile
$LN2@GetLogFile:

; 4179 : 	{
; 4180 : 		strLogName = "CultureAILog.csv";

	mov	ecx, OFFSET ??_C@_0BB@EKBGKIJN@CultureAILog?4csv?$AA@
	test	ecx, ecx
	je	SHORT $LN16@GetLogFile
	push	OFFSET ??_C@_0BB@EKBGKIJN@CultureAILog?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@GetLogFile
$LN16@GetLogFile:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@GetLogFile:

; 4181 : 	}
; 4182 : 
; 4183 : 	return strLogName;

	lea	edx, DWORD PTR _strLogName$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T246848[ebp]
	or	eax, 1
	mov	DWORD PTR $T246848[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4184 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$0:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$1:
	lea	ecx, DWORD PTR $T246842[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$2:
	lea	ecx, DWORD PTR $T246843[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z$3:
	mov	eax, DWORD PTR $T246848[ebp]
	and	eax, 1
	je	$LN9@GetLogFile
	and	DWORD PTR $T246848[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN9@GetLogFile:
	ret	0
__ehhandler$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLogFileName@CvPlayerCulture@@ABE?AVCvString@@AAV2@@Z ENDP ; CvPlayerCulture::GetLogFileName
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvPlayerCulture@@@Z ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PolicyBranchTypes@@@Z:PROC ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvPlayerCulture@@@Z
_TEXT	SEGMENT
tv248 = -152						; size = 4
tv257 = -148						; size = 4
$T247106 = -144						; size = 4
$T247097 = -140						; size = 4
$T247029 = -112						; size = 4
$T247028 = -108						; size = 4
$T247027 = -104						; size = 4
$T246994 = -100						; size = 4
$T246981 = -96						; size = 4
$T246977 = -92						; size = 4
$T246970 = -88						; size = 4
$T246966 = -81						; size = 1
$T246962 = -80						; size = 4
$T246958 = -73						; size = 1
_iMapY$247026 = -72					; size = 4
_iMapX$247025 = -68					; size = 4
$T246951 = -64						; size = 4
$T246913 = -60						; size = 4
$T246897 = -56						; size = 4
$T246925 = -52						; size = 4
$T246924 = -48						; size = 4
$T246923 = -44						; size = 4
$T246922 = -40						; size = 4
$T246921 = -36						; size = 4
_iTemp$226296 = -32					; size = 4
_iI$226289 = -28					; size = 4
_iI$226285 = -24					; size = 4
_iEntriesToRead$ = -20					; size = 4
_iTempX$ = -16						; size = 4
_pPlot$ = -12						; size = 4
_uiVersion$ = -8					; size = 4
_iTempY$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerCulture@@@Z PROC	; operator>>, COMDAT

; 4190 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H

; 4191 : 	uint uiVersion;
; 4192 : 
; 4193 : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4194 : 
; 4195 : 	int iEntriesToRead;
; 4196 : 	int iTempX;
; 4197 : 	int iTempY;
; 4198 : 	CvPlot *pPlot;
; 4199 : 
; 4200 : 	writeTo.m_aDigCompletePlots.clear();

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T246897[ebp], edx
	mov	eax, DWORD PTR $T246897[ebp]
	mov	DWORD PTR $T246922[ebp], eax
	mov	ecx, DWORD PTR $T246922[ebp]
	mov	DWORD PTR $T246921[ebp], ecx
	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T246913[ebp], eax
	mov	ecx, DWORD PTR $T246913[ebp]
	mov	DWORD PTR $T246924[ebp], ecx
	mov	edx, DWORD PTR $T246924[ebp]
	mov	DWORD PTR $T246923[ebp], edx
	mov	eax, DWORD PTR $T246921[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246923[ebp]
	push	ecx
	lea	edx, DWORD PTR $T246925[ebp]
	push	edx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase

; 4201 : 	loadFrom >> iEntriesToRead;

	lea	eax, DWORD PTR _iEntriesToRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4202 : 	for(int iI = 0; iI < iEntriesToRead; iI++)

	mov	DWORD PTR _iI$226285[ebp], 0
	jmp	SHORT $LN16@operator@4
$LN15@operator@4:
	mov	ecx, DWORD PTR _iI$226285[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226285[ebp], ecx
$LN16@operator@4:
	mov	edx, DWORD PTR _iI$226285[ebp]
	cmp	edx, DWORD PTR _iEntriesToRead$[ebp]
	jge	$LN14@operator@4

; 4203 : 	{
; 4204 : 		loadFrom >> iTempX;

	lea	eax, DWORD PTR _iTempX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4205 : 		loadFrom >> iTempY;

	lea	ecx, DWORD PTR _iTempY$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4206 : 		pPlot = GC.getMap().plot(iTempX, iTempY);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T246951[ebp], edx
	mov	eax, DWORD PTR _iTempY$[ebp]
	mov	DWORD PTR $T247028[ebp], eax
	mov	ecx, DWORD PTR _iTempX$[ebp]
	mov	DWORD PTR $T247027[ebp], ecx
	cmp	DWORD PTR $T247027[ebp], -2147483647	; 80000001H
	je	SHORT $LN43@operator@4
	cmp	DWORD PTR $T247028[ebp], -2147483647	; 80000001H
	jne	SHORT $LN44@operator@4
$LN43@operator@4:
	mov	DWORD PTR $T247029[ebp], 0
	jmp	$LN45@operator@4
$LN44@operator@4:
	mov	edx, DWORD PTR $T246951[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T246958[ebp], al
	mov	ecx, DWORD PTR $T246951[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T246962[ebp], edx
	movzx	eax, BYTE PTR $T246958[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246962[ebp]
	push	ecx
	mov	edx, DWORD PTR $T247027[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$247025[ebp], eax
	mov	eax, DWORD PTR $T246951[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T246966[ebp], cl
	mov	edx, DWORD PTR $T246951[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T246970[ebp], eax
	movzx	ecx, BYTE PTR $T246966[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246970[ebp]
	push	edx
	mov	eax, DWORD PTR $T247028[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$247026[ebp], eax
	cmp	DWORD PTR _iMapX$247025[ebp], 0
	jl	SHORT $LN59@operator@4
	mov	ecx, DWORD PTR $T246951[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T246977[ebp], edx
	mov	eax, DWORD PTR _iMapX$247025[ebp]
	cmp	eax, DWORD PTR $T246977[ebp]
	jge	SHORT $LN59@operator@4
	cmp	DWORD PTR _iMapY$247026[ebp], 0
	jl	SHORT $LN59@operator@4
	mov	ecx, DWORD PTR $T246951[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T246981[ebp], edx
	mov	eax, DWORD PTR _iMapY$247026[ebp]
	cmp	eax, DWORD PTR $T246981[ebp]
	jge	SHORT $LN59@operator@4
	mov	DWORD PTR tv257[ebp], 1
	jmp	SHORT $LN57@operator@4
$LN59@operator@4:
	mov	DWORD PTR tv257[ebp], 0
$LN57@operator@4:
	cmp	DWORD PTR tv257[ebp], 0
	je	SHORT $LN47@operator@4
	mov	ecx, DWORD PTR $T246951[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T246994[ebp], edx
	mov	eax, DWORD PTR _iMapY$247026[ebp]
	imul	eax, DWORD PTR $T246994[ebp]
	add	eax, DWORD PTR _iMapX$247025[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T246951[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv248[ebp], eax
	jmp	SHORT $LN48@operator@4
$LN47@operator@4:
	mov	DWORD PTR tv248[ebp], 0
$LN48@operator@4:
	mov	edx, DWORD PTR tv248[ebp]
	mov	DWORD PTR $T247029[ebp], edx
$LN45@operator@4:
	mov	eax, DWORD PTR $T247029[ebp]
	mov	DWORD PTR _pPlot$[ebp], eax

; 4207 : 		writeTo.m_aDigCompletePlots.push_back(pPlot);

	lea	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::push_back

; 4208 : 	}

	jmp	$LN15@operator@4
$LN14@operator@4:

; 4209 : 
; 4210 : 	loadFrom >> writeTo.m_iLastTurnLifetimeCulture;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4211 : 	loadFrom >> iEntriesToRead;

	lea	eax, DWORD PTR _iEntriesToRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4212 : 	for(int iI = 0; iI < iEntriesToRead; iI++)

	mov	DWORD PTR _iI$226289[ebp], 0
	jmp	SHORT $LN13@operator@4
$LN12@operator@4:
	mov	ecx, DWORD PTR _iI$226289[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226289[ebp], ecx
$LN13@operator@4:
	mov	edx, DWORD PTR _iI$226289[ebp]
	cmp	edx, DWORD PTR _iEntriesToRead$[ebp]
	jge	SHORT $LN11@operator@4

; 4213 : 	{
; 4214 : 		loadFrom >> writeTo.m_aiCulturalInfluence[iI];

	mov	eax, DWORD PTR _iI$226289[ebp]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4215 : 		loadFrom >> writeTo.m_aiLastTurnCulturalInfluence[iI];

	mov	eax, DWORD PTR _iI$226289[ebp]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+108]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4216 : 	}

	jmp	SHORT $LN12@operator@4
$LN11@operator@4:

; 4217 : 
; 4218 : 	if (uiVersion >= 2)

	cmp	DWORD PTR _uiVersion$[ebp], 2
	jb	SHORT $LN10@operator@4

; 4219 : 	{
; 4220 : 		loadFrom >> writeTo.m_bReportedTwoCivsAway;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 4221 : 		loadFrom >> writeTo.m_bReportedOneCivAway;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 197				; 000000c5H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 4222 : 	}
; 4223 : 	else

	jmp	SHORT $LN9@operator@4
$LN10@operator@4:

; 4224 : 	{
; 4225 : 		writeTo.m_bReportedTwoCivsAway = false;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [edx+196], 0

; 4226 : 		writeTo.m_bReportedOneCivAway = false;

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [eax+197], 0
$LN9@operator@4:

; 4227 : 	}
; 4228 : 
; 4229 : 	if (uiVersion >= 3)

	cmp	DWORD PTR _uiVersion$[ebp], 3
	jb	SHORT $LN8@operator@4

; 4230 : 	{
; 4231 : 		int iTemp;
; 4232 : 		loadFrom >> iTemp;

	lea	ecx, DWORD PTR _iTemp$226296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4233 : 		writeTo.m_eOpinion = (PublicOpinionTypes)iTemp;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR _iTemp$226296[ebp]
	mov	DWORD PTR [edx+200], eax

; 4234 : 		loadFrom >> writeTo.m_ePreferredIdeology;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 212				; 000000d4H
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PolicyBranchTypes@@@Z ; operator>>
	add	esp, 8

; 4235 : 		loadFrom >> writeTo.m_iOpinionUnhappiness;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 216				; 000000d8H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4236 : 		loadFrom >> writeTo.m_strOpinionTooltip;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 220				; 000000dcH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 4237 : 	}
; 4238 : 	else

	jmp	SHORT $LN7@operator@4
$LN8@operator@4:

; 4239 : 	{
; 4240 : 		writeTo.m_eOpinion = NO_PUBLIC_OPINION;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [edx+200], -1

; 4241 : 		writeTo.m_ePreferredIdeology = NO_POLICY_BRANCH_TYPE;

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [eax+212], -1

; 4242 : 		writeTo.m_iOpinionUnhappiness = 0;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [ecx+216], 0

; 4243 : 		writeTo.m_strOpinionTooltip = "";

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 220				; 000000dcH
	mov	DWORD PTR $T247097[ebp], edx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN106@operator@4
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T247097[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN7@operator@4
$LN106@operator@4:
	mov	ecx, DWORD PTR $T247097[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN7@operator@4:

; 4244 : 	}
; 4245 : 
; 4246 : 	if (uiVersion >= 5)

	cmp	DWORD PTR _uiVersion$[ebp], 5
	jb	SHORT $LN6@operator@4

; 4247 : 	{
; 4248 : 		loadFrom >> writeTo.m_strOpinionUnhappinessTooltip;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 248				; 000000f8H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 4249 : 	}
; 4250 : 	else

	jmp	SHORT $LN5@operator@4
$LN6@operator@4:

; 4251 : 	{
; 4252 : 		writeTo.m_strOpinionUnhappinessTooltip = "";

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 248				; 000000f8H
	mov	DWORD PTR $T247106[ebp], edx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN112@operator@4
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T247106[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN5@operator@4
$LN112@operator@4:
	mov	ecx, DWORD PTR $T247106[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN5@operator@4:

; 4253 : 	}
; 4254 : 
; 4255 : 	if (uiVersion >= 6)

	cmp	DWORD PTR _uiVersion$[ebp], 6
	jb	SHORT $LN4@operator@4

; 4256 : 	{
; 4257 : 		loadFrom >> writeTo.m_eOpinionBiggestInfluence;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 4258 : 		loadFrom >> writeTo.m_iTurnIdeologySwitch;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4259 : 	}
; 4260 : 	else

	jmp	SHORT $LN3@operator@4
$LN4@operator@4:

; 4261 : 	{
; 4262 : 		writeTo.m_eOpinionBiggestInfluence = NO_PLAYER;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [ecx+204], -1

; 4263 : 		writeTo.m_iTurnIdeologySwitch = -1;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [edx+208], -1
$LN3@operator@4:

; 4264 : 
; 4265 : 	}
; 4266 : 	if (uiVersion >= 4)

	cmp	DWORD PTR _uiVersion$[ebp], 4
	jb	SHORT $LN2@operator@4

; 4267 : 	{
; 4268 : 		loadFrom >> writeTo.m_iSwappableWritingIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4269 : 		loadFrom >> writeTo.m_iSwappableArtIndex;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4270 : 		loadFrom >> writeTo.m_iSwappableArtifactIndex;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4271 : 		loadFrom >> writeTo.m_iSwappableMusicIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4272 : 	}
; 4273 : 	else

	jmp	SHORT $LN1@operator@4
$LN2@operator@4:

; 4274 : 	{
; 4275 : 		writeTo.m_iSwappableWritingIndex = -1;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [ecx+276], -1

; 4276 : 		writeTo.m_iSwappableArtIndex = -1;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [edx+280], -1

; 4277 : 		writeTo.m_iSwappableArtifactIndex = -1;

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [eax+284], -1

; 4278 : 		writeTo.m_iSwappableMusicIndex = -1;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	DWORD PTR [ecx+288], -1
$LN1@operator@4:

; 4279 : 	}
; 4280 : 
; 4281 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 4282 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerCulture@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvPlayerCulture@@@Z ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PolicyBranchTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvPlayerCulture@@@Z
_TEXT	SEGMENT
$T247215 = -60						; size = 4
$T247165 = -56						; size = 4
__Tmp$247160 = -52					; size = 4
$T247147 = -48						; size = 4
$T247130 = -44						; size = 4
$T247129 = -40						; size = 4
$T247128 = -36						; size = 4
$T247127 = -32						; size = 4
$T247126 = -28						; size = 4
$T247125 = -24						; size = 4
$T247124 = -20						; size = 4
_iI$226329 = -16					; size = 4
_pPlot$226325 = -12					; size = 4
_uiVersion$ = -8					; size = 4
_it$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerCulture@@@Z PROC	; operator<<, COMDAT

; 4286 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 4287 : 	uint uiVersion = 6;

	mov	DWORD PTR _uiVersion$[ebp], 6

; 4288 : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 4289 : 
; 4290 : 	vector<CvPlot *>::const_iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 4291 : 	saveTo << readFrom.m_aDigCompletePlots.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T247124[ebp], eax
	lea	ecx, DWORD PTR $T247124[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 4292 : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 4293 : 	for (it = readFrom.m_aDigCompletePlots.begin(); it != readFrom.m_aDigCompletePlots.end(); ++it)
; 4294 : #else
; 4295 : 	for(it = readFrom.m_aDigCompletePlots.begin(); it != readFrom.m_aDigCompletePlots.end(); it++)

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247147[ebp], eax
	mov	ecx, DWORD PTR $T247147[ebp]
	mov	DWORD PTR $T247125[ebp], ecx
	mov	edx, DWORD PTR $T247125[ebp]
	mov	DWORD PTR _it$[ebp], edx
	jmp	SHORT $LN6@operator@5
$LN5@operator@5:
	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR __Tmp$247160[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 4
	mov	DWORD PTR _it$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$247160[ebp]
	mov	DWORD PTR $T247126[ebp], edx
$LN6@operator@5:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247165[ebp], ecx
	mov	edx, DWORD PTR $T247165[ebp]
	mov	DWORD PTR $T247127[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T247127[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@operator@5

; 4296 : #endif
; 4297 : 	{
; 4298 : 		CvPlot *pPlot = *it;

	mov	ecx, DWORD PTR _it$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pPlot$226325[ebp], edx

; 4299 : 		saveTo << pPlot->getX();

	mov	eax, DWORD PTR _pPlot$226325[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR $T247128[ebp], ecx
	lea	edx, DWORD PTR $T247128[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4300 : 		saveTo << pPlot->getY();

	mov	eax, DWORD PTR _pPlot$226325[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T247129[ebp], ecx
	lea	edx, DWORD PTR $T247129[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4301 : 	}

	jmp	SHORT $LN5@operator@5
$LN4@operator@5:

; 4302 : 
; 4303 : 	saveTo << readFrom.m_iLastTurnLifetimeCulture;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4304 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T247130[ebp], 22		; 00000016H
	lea	ecx, DWORD PTR $T247130[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4305 : 	for(int iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$226329[ebp], 0
	jmp	SHORT $LN3@operator@5
$LN2@operator@5:
	mov	edx, DWORD PTR _iI$226329[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$226329[ebp], edx
$LN3@operator@5:
	cmp	DWORD PTR _iI$226329[ebp], 22		; 00000016H
	jge	SHORT $LN1@operator@5

; 4306 : 	{
; 4307 : 		saveTo << readFrom.m_aiCulturalInfluence[iI];

	mov	eax, DWORD PTR _iI$226329[ebp]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+20]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4308 : 		saveTo << readFrom.m_aiLastTurnCulturalInfluence[iI];

	mov	eax, DWORD PTR _iI$226329[ebp]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+108]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4309 : 	}

	jmp	SHORT $LN2@operator@5
$LN1@operator@5:

; 4310 : 
; 4311 : 	saveTo << readFrom.m_bReportedTwoCivsAway;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 196				; 000000c4H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 4312 : 	saveTo << readFrom.m_bReportedOneCivAway;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 197				; 000000c5H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 4313 : 
; 4314 : 	saveTo << readFrom.m_eOpinion;

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	DWORD PTR $T247215[ebp], eax
	lea	ecx, DWORD PTR $T247215[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4315 : 	saveTo << readFrom.m_ePreferredIdeology;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PolicyBranchTypes@@@Z ; operator<<
	add	esp, 8

; 4316 : 	saveTo << readFrom.m_iOpinionUnhappiness;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 216				; 000000d8H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4317 : 	saveTo << readFrom.m_strOpinionTooltip;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 220				; 000000dcH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 4318 : 	saveTo << readFrom.m_strOpinionUnhappinessTooltip;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 248				; 000000f8H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 4319 : 	saveTo << readFrom.m_eOpinionBiggestInfluence;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	edx, DWORD PTR _saveTo$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 4320 : 	saveTo << readFrom.m_iTurnIdeologySwitch;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4321 : 
; 4322 : 	saveTo << readFrom.m_iSwappableWritingIndex;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 276				; 00000114H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4323 : 	saveTo << readFrom.m_iSwappableArtIndex;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 280				; 00000118H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4324 : 	saveTo << readFrom.m_iSwappableArtifactIndex;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 284				; 0000011cH
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4325 : 	saveTo << readFrom.m_iSwappableMusicIndex;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4326 : 
; 4327 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 4328 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerCulture@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??0CvCityCulture@@QAE@XZ			; CvCityCulture::CvCityCulture
; Function compile flags: /Odtp
;	COMDAT ??0CvCityCulture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCityCulture@@QAE@XZ PROC				; CvCityCulture::CvCityCulture, COMDAT
; _this$ = ecx

; 4341 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 4342 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCityCulture@@QAE@XZ ENDP				; CvCityCulture::CvCityCulture
_TEXT	ENDS
PUBLIC	??1CvCityCulture@@QAE@XZ			; CvCityCulture::~CvCityCulture
; Function compile flags: /Odtp
;	COMDAT ??1CvCityCulture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvCityCulture@@QAE@XZ PROC				; CvCityCulture::~CvCityCulture, COMDAT
; _this$ = ecx

; 4346 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4347 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvCityCulture@@QAE@XZ ENDP				; CvCityCulture::~CvCityCulture
_TEXT	ENDS
PUBLIC	?Init@CvCityCulture@@QAEXPAVCvCity@@@Z		; CvCityCulture::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvCityCulture@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pCity$ = 8						; size = 4
?Init@CvCityCulture@@QAEXPAVCvCity@@@Z PROC		; CvCityCulture::Init, COMDAT
; _this$ = ecx

; 4351 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4352 : 	m_pCity = pCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [eax], ecx

; 4353 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvCityCulture@@QAEXPAVCvCity@@@Z ENDP		; CvCityCulture::Init
_TEXT	ENDS
EXTRN	?GetNumGreatWorks@CvCityBuildings@@QBEHXZ:PROC	; CvCityBuildings::GetNumGreatWorks
; Function compile flags: /Odtp
;	COMDAT ?GetNumGreatWorks@CvCityCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumGreatWorks@CvCityCulture@@QBEHXZ PROC		; CvCityCulture::GetNumGreatWorks, COMDAT
; _this$ = ecx

; 4361 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4362 : 	return m_pCity->GetCityBuildings()->GetNumGreatWorks();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetNumGreatWorks

; 4363 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumGreatWorks@CvCityCulture@@QBEHXZ ENDP		; CvCityCulture::GetNumGreatWorks
_TEXT	ENDS
EXTRN	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHXZ:PROC ; CvCityBuildings::GetNumAvailableGreatWorkSlots
; Function compile flags: /Odtp
;	COMDAT ?GetNumGreatWorkSlots@CvCityCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumGreatWorkSlots@CvCityCulture@@QBEHXZ PROC	; CvCityCulture::GetNumGreatWorkSlots, COMDAT
; _this$ = ecx

; 4371 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 4372 : 	return (m_pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots() + GetNumGreatWorks());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetNumAvailableGreatWorkSlots
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	add	eax, esi

; 4373 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumGreatWorkSlots@CvCityCulture@@QBEHXZ ENDP	; CvCityCulture::GetNumGreatWorkSlots
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNumAvailableGreatWorkSlots@CvCityCulture@@QBEHW4GreatWorkSlotType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eSlotType$ = 8						; size = 4
?GetNumAvailableGreatWorkSlots@CvCityCulture@@QBEHW4GreatWorkSlotType@@@Z PROC ; CvCityCulture::GetNumAvailableGreatWorkSlots, COMDAT
; _this$ = ecx

; 4381 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4382 : 	return (m_pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots(eSlotType));

	mov	eax, DWORD PTR _eSlotType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumAvailableGreatWorkSlots

; 4383 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumAvailableGreatWorkSlots@CvCityCulture@@QBEHW4GreatWorkSlotType@@@Z ENDP ; CvCityCulture::GetNumAvailableGreatWorkSlots
_TEXT	ENDS
PUBLIC	?ClearGreatWorks@CvCityCulture@@QAEXXZ		; CvCityCulture::ClearGreatWorks
; Function compile flags: /Odtp
;	COMDAT ?ClearGreatWorks@CvCityCulture@@QAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T247262 = -32						; size = 4
_iI$226388 = -28					; size = 4
_iNumSlots$226387 = -24					; size = 4
_pkBuilding$226384 = -20				; size = 4
_eBuilding$226380 = -16					; size = 4
_playerCivilizationInfo$226379 = -12			; size = 4
_iBuildingClassLoop$226375 = -8				; size = 4
_kCityPlayer$ = -4					; size = 4
?ClearGreatWorks@CvCityCulture@@QAEXXZ PROC		; CvCityCulture::ClearGreatWorks, COMDAT
; _this$ = ecx

; 4387 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 4388 : 	CvPlayer &kCityPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247262[ebp], edx
	mov	eax, DWORD PTR $T247262[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityPlayer$[ebp], eax

; 4389 : #ifdef AUI_WARNING_FIXES
; 4390 : 	for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 4391 : #else
; 4392 : 	for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$226375[ebp], 0
	jmp	SHORT $LN9@ClearGreat
$LN8@ClearGreat:
	mov	ecx, DWORD PTR _iBuildingClassLoop$226375[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$226375[ebp], ecx
$LN9@ClearGreat:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$226375[ebp], eax
	jge	$LN10@ClearGreat

; 4393 : #endif
; 4394 : 	{
; 4395 : 		CvCivilizationInfo& playerCivilizationInfo = kCityPlayer.getCivilizationInfo();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226379[ebp], eax

; 4396 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	edx, DWORD PTR _iBuildingClassLoop$226375[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerCivilizationInfo$226379[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226380[ebp], eax

; 4397 : 		if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226380[ebp], -1
	je	SHORT $LN6@ClearGreat

; 4398 : 		{
; 4399 : 			CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$226380[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$226384[ebp], eax

; 4400 : 			if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$226384[ebp], 0
	je	SHORT $LN6@ClearGreat

; 4401 : 			{
; 4402 : 				if (m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	ecx, DWORD PTR _eBuilding$226380[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN6@ClearGreat

; 4403 : 				{
; 4404 : #ifdef AUI_WARNING_FIXES
; 4405 : 					for (uint iI = 0; iI < pkBuilding->GetGreatWorkCount(); iI++)
; 4406 : #else
; 4407 : 					int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$226384[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$226387[ebp], eax

; 4408 : 					for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$226388[ebp], 0
	jmp	SHORT $LN3@ClearGreat
$LN2@ClearGreat:
	mov	eax, DWORD PTR _iI$226388[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226388[ebp], eax
$LN3@ClearGreat:
	mov	ecx, DWORD PTR _iI$226388[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$226387[ebp]
	jge	SHORT $LN6@ClearGreat

; 4409 : #endif
; 4410 : 					{
; 4411 : 						m_pCity->GetCityBuildings()->SetBuildingGreatWork((BuildingClassTypes)iBuildingClassLoop, iI, -1);

	push	-1
	mov	edx, DWORD PTR _iI$226388[ebp]
	push	edx
	mov	eax, DWORD PTR _iBuildingClassLoop$226375[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?SetBuildingGreatWork@CvCityBuildings@@QAEXW4BuildingClassTypes@@HH@Z ; CvCityBuildings::SetBuildingGreatWork

; 4412 : 					}

	jmp	SHORT $LN2@ClearGreat
$LN6@ClearGreat:

; 4413 : 				}
; 4414 : 			}
; 4415 : 		}

	jmp	$LN8@ClearGreat
$LN10@ClearGreat:

; 4416 : 	}
; 4417 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearGreatWorks@CvCityCulture@@QAEXXZ ENDP		; CvCityCulture::ClearGreatWorks
_TEXT	ENDS
PUBLIC	?GetSlotTypeFirstAvailableCultureBuilding@CvCityCulture@@QBE?AW4GreatWorkSlotType@@XZ ; CvCityCulture::GetSlotTypeFirstAvailableCultureBuilding
EXTRN	?GetProductionCost@CvBuildingEntry@@QBEHXZ:PROC	; CvBuildingEntry::GetProductionCost
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isWorldWonderClass
; Function compile flags: /Odtp
;	COMDAT ?GetSlotTypeFirstAvailableCultureBuilding@CvCityCulture@@QBE?AW4GreatWorkSlotType@@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T247276 = -44						; size = 4
_iCost$226415 = -40					; size = 4
_iNumSlots$226412 = -36					; size = 4
_pkBuilding$226408 = -32				; size = 4
_pkBuildingClass$226409 = -28				; size = 4
_eBuilding$226404 = -24					; size = 4
_playerCivilizationInfo$226403 = -20			; size = 4
_iBuildingClassLoop$226399 = -16			; size = 4
_iCheapest$ = -12					; size = 4
_eRtnValue$ = -8					; size = 4
_kCityPlayer$ = -4					; size = 4
?GetSlotTypeFirstAvailableCultureBuilding@CvCityCulture@@QBE?AW4GreatWorkSlotType@@XZ PROC ; CvCityCulture::GetSlotTypeFirstAvailableCultureBuilding, COMDAT
; _this$ = ecx

; 4421 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 4422 : 	int iCheapest = MAX_INT;

	mov	DWORD PTR _iCheapest$[ebp], 2147483647	; 7fffffffH

; 4423 : 	GreatWorkSlotType eRtnValue = NO_GREAT_WORK_SLOT;

	mov	DWORD PTR _eRtnValue$[ebp], -1

; 4424 : 	CvPlayer &kCityPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247276[ebp], edx
	mov	eax, DWORD PTR $T247276[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityPlayer$[ebp], eax

; 4425 : 
; 4426 : #ifdef AUI_WARNING_FIXES
; 4427 : 	for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 4428 : #else
; 4429 : 	for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$226399[ebp], 0
	jmp	SHORT $LN8@GetSlotTyp
$LN7@GetSlotTyp:
	mov	ecx, DWORD PTR _iBuildingClassLoop$226399[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$226399[ebp], ecx
$LN8@GetSlotTyp:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$226399[ebp], eax
	jge	$LN6@GetSlotTyp

; 4430 : #endif
; 4431 : 	{
; 4432 : 		CvCivilizationInfo& playerCivilizationInfo = kCityPlayer.getCivilizationInfo();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226403[ebp], eax

; 4433 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	edx, DWORD PTR _iBuildingClassLoop$226399[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerCivilizationInfo$226403[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226404[ebp], eax

; 4434 : 		if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226404[ebp], -1
	je	$LN5@GetSlotTyp

; 4435 : 		{
; 4436 : 			CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$226404[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$226408[ebp], eax

; 4437 : 			CvBuildingClassInfo *pkBuildingClass = GC.getBuildingClassInfo((BuildingClassTypes)iBuildingClassLoop);

	mov	ecx, DWORD PTR _iBuildingClassLoop$226399[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClass$226409[ebp], eax

; 4438 : 			if (pkBuilding && pkBuildingClass && !isWorldWonderClass(*pkBuildingClass))

	cmp	DWORD PTR _pkBuilding$226408[ebp], 0
	je	$LN5@GetSlotTyp
	cmp	DWORD PTR _pkBuildingClass$226409[ebp], 0
	je	SHORT $LN5@GetSlotTyp
	mov	edx, DWORD PTR _pkBuildingClass$226409[ebp]
	push	edx
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@GetSlotTyp

; 4439 : 			{
; 4440 : 				int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$226408[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$226412[ebp], eax

; 4441 : 				if (iNumSlots > 0 && m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) == 0)

	cmp	DWORD PTR _iNumSlots$226412[ebp], 0
	jle	SHORT $LN5@GetSlotTyp
	mov	ecx, DWORD PTR _eBuilding$226404[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jne	SHORT $LN5@GetSlotTyp

; 4442 : 				{
; 4443 : 					if (m_pCity->canConstruct(eBuilding))

	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _eBuilding$226404[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@GetSlotTyp

; 4444 : 					{
; 4445 : 						int iCost = pkBuilding->GetProductionCost();

	mov	ecx, DWORD PTR _pkBuilding$226408[ebp]
	call	?GetProductionCost@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetProductionCost
	mov	DWORD PTR _iCost$226415[ebp], eax

; 4446 : 						if (iCost < iCheapest)

	mov	eax, DWORD PTR _iCost$226415[ebp]
	cmp	eax, DWORD PTR _iCheapest$[ebp]
	jge	SHORT $LN5@GetSlotTyp

; 4447 : 						{
; 4448 : 							iCheapest = iCost;

	mov	ecx, DWORD PTR _iCost$226415[ebp]
	mov	DWORD PTR _iCheapest$[ebp], ecx

; 4449 : 							eRtnValue = pkBuilding->GetGreatWorkSlotType();

	mov	ecx, DWORD PTR _pkBuilding$226408[ebp]
	call	?GetGreatWorkSlotType@CvBuildingEntry@@QBE?AW4GreatWorkSlotType@@XZ ; CvBuildingEntry::GetGreatWorkSlotType
	mov	DWORD PTR _eRtnValue$[ebp], eax
$LN5@GetSlotTyp:

; 4450 : 						}
; 4451 : 					}
; 4452 : 				}
; 4453 : 			}
; 4454 : 		}
; 4455 : 	}

	jmp	$LN7@GetSlotTyp
$LN6@GetSlotTyp:

; 4456 : 	return eRtnValue;

	mov	eax, DWORD PTR _eRtnValue$[ebp]

; 4457 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSlotTypeFirstAvailableCultureBuilding@CvCityCulture@@QBE?AW4GreatWorkSlotType@@XZ ENDP ; CvCityCulture::GetSlotTypeFirstAvailableCultureBuilding
_TEXT	ENDS
PUBLIC	?GetCultureFromImprovements@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromImprovements
PUBLIC	?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromNaturalWonders
PUBLIC	?GetCultureFromWonders@CvCityCulture@@QBEHXZ	; CvCityCulture::GetCultureFromWonders
EXTRN	?GetEnhancedYieldTech@CvBuildingEntry@@QBEHXZ:PROC ; CvBuildingEntry::GetEnhancedYieldTech
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
EXTRN	?GetTechEnhancedTourism@CvBuildingEntry@@QBEHXZ:PROC ; CvBuildingEntry::GetTechEnhancedTourism
EXTRN	?GetBuildingClassTourism@CvReligionBeliefs@@QBEHW4BuildingClassTypes@@@Z:PROC ; CvReligionBeliefs::GetBuildingClassTourism
EXTRN	?GetNumBuildingsFromFaith@CvCityBuildings@@QBEHXZ:PROC ; CvCityBuildings::GetNumBuildingsFromFaith
EXTRN	?GetReligion@CvGameReligions@@QBEPBVCvReligion@@W4ReligionTypes@@W4PlayerTypes@@@Z:PROC ; CvGameReligions::GetReligion
EXTRN	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ:PROC ; CvGame::GetGameReligions
EXTRN	?GetReligiousMajority@CvCityReligions@@QAE?AW4ReligionTypes@@XZ:PROC ; CvCityReligions::GetReligiousMajority
EXTRN	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ:PROC ; CvCity::GetCityReligions
EXTRN	?GetLandmarksTourismPercent@CvCityBuildings@@QBEHXZ:PROC ; CvCityBuildings::GetLandmarksTourismPercent
EXTRN	?GetGreatWorksTourismModifier@CvCityBuildings@@QBEHXZ:PROC ; CvCityBuildings::GetGreatWorksTourismModifier
EXTRN	?getNumWorldWonders@CvCity@@QBEHXZ:PROC		; CvCity::getNumWorldWonders
EXTRN	?IsRazing@CvCity@@QBE_NXZ:PROC			; CvCity::IsRazing
EXTRN	?IsResistance@CvCity@@QBE_NXZ:PROC		; CvCity::IsResistance
; Function compile flags: /Odtp
;	COMDAT ?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ
_TEXT	SEGMENT
_this$ = -160						; size = 4
$T247371 = -156						; size = 4
$T247367 = -152						; size = 4
$T247358 = -148						; size = 4
$T247357 = -144						; size = 4
$T247353 = -140						; size = 4
$T247349 = -136						; size = 4
$T247340 = -132						; size = 4
$T247336 = -128						; size = 4
$T247324 = -124						; size = 4
$T247320 = -120						; size = 4
$T247311 = -116						; size = 4
$T247307 = -112						; size = 4
$T247303 = -108						; size = 4
$T247294 = -104						; size = 4
$T247290 = -100						; size = 4
_iTourism$226464 = -96					; size = 4
_pkEntry$226462 = -92					; size = 4
_eBuilding$226459 = -88					; size = 4
_playerCivilizationInfo$226458 = -84			; size = 4
_pkBuildingClassInfo$226456 = -80			; size = 4
_eBuildingClass$226454 = -76				; size = 4
_jJ$226450 = -72					; size = 4
_eBuilding$226446 = -68					; size = 4
_playerCivilizationInfo$226445 = -64			; size = 4
_pkBuildingClassInfo$226443 = -60			; size = 4
_eBuildingClass$226441 = -56				; size = 4
_jJ$226437 = -52					; size = 4
_iFaithBuildingTourism$226435 = -48			; size = 4
_iFromImprovements$226431 = -44				; size = 4
_iFromWonders$226429 = -40				; size = 4
_iFromNaturalWonders$226430 = -36			; size = 4
_iTotalBonusTourismForWonders$ = -32			; size = 4
_eMajority$ = -28					; size = 4
_iBonusTourismPerGreatWork$ = -24			; size = 4
_iBonus$ = -20						; size = 4
_iBase$ = -16						; size = 4
_iBonusTourismPerWonder$ = -12				; size = 4
_pReligion$ = -8					; size = 4
_iPercent$ = -4						; size = 4
?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ PROC ; CvCityCulture::GetBaseTourismBeforeModifiers, COMDAT
; _this$ = ecx

; 4465 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	DWORD PTR _this$[ebp], ecx

; 4466 : 	// If we're in Resistance, then no Tourism!
; 4467 : 	if(m_pCity->IsResistance() || m_pCity->IsRazing())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsResistance@CvCity@@QBE_NXZ		; CvCity::IsResistance
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN17@GetBaseTou
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsRazing@CvCity@@QBE_NXZ		; CvCity::IsRazing
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@GetBaseTou
$LN17@GetBaseTou:

; 4468 : 	{
; 4469 : 		return 0;

	xor	eax, eax
	jmp	$LN19@GetBaseTou

; 4470 : 	}
; 4471 : 
; 4472 : 	int iBonusTourismPerGreatWork = GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_EXTRA_TOURISM_PER_GREAT_WORK); // NQMP GJS - Cultural Exchange

$LN23@GetBaseTou:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247290[ebp], eax
	mov	ecx, DWORD PTR $T247290[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247294[ebp], ecx
	push	63					; 0000003fH
	mov	ecx, DWORD PTR $T247294[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iBonusTourismPerGreatWork$[ebp], eax

; 4473 : 
; 4474 : 	int iBonusTourismPerWonder = GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_PER_WONDER); // NQMP GJS - Flourishing of the Arts

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247303[ebp], ecx
	mov	edx, DWORD PTR $T247303[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247307[ebp], edx
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T247307[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iBonusTourismPerWonder$[ebp], eax

; 4475 : 	int iTotalBonusTourismForWonders = m_pCity->getNumWorldWonders() * iBonusTourismPerWonder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getNumWorldWonders@CvCity@@QBEHXZ	; CvCity::getNumWorldWonders
	imul	eax, DWORD PTR _iBonusTourismPerWonder$[ebp]
	mov	DWORD PTR _iTotalBonusTourismForWonders$[ebp], eax

; 4476 : 
; 4477 : 	int iBase = GetNumGreatWorks() * (GC.getBASE_TOURISM_PER_GREAT_WORK() + iBonusTourismPerGreatWork) + iTotalBonusTourismForWonders; // NQMP GJS - Cultural Exchange

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8212
	mov	DWORD PTR $T247311[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	mov	edx, DWORD PTR $T247311[ebp]
	add	edx, DWORD PTR _iBonusTourismPerGreatWork$[ebp]
	imul	eax, edx
	add	eax, DWORD PTR _iTotalBonusTourismForWonders$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax

; 4478 : 
; 4479 : 	int iBonus = (m_pCity->GetCityBuildings()->GetGreatWorksTourismModifier() * iBase / 100);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetGreatWorksTourismModifier@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetGreatWorksTourismModifier
	imul	eax, DWORD PTR _iBase$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iBonus$[ebp], eax

; 4480 : 	iBase += iBonus;

	mov	edx, DWORD PTR _iBase$[ebp]
	add	edx, DWORD PTR _iBonus$[ebp]
	mov	DWORD PTR _iBase$[ebp], edx

; 4481 : 
; 4482 : 	iBase += m_pCity->GetCityBuildings()->GetThemingBonuses();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetThemingBonuses@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetThemingBonuses
	add	eax, DWORD PTR _iBase$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax

; 4483 : 
; 4484 : 	int iPercent = m_pCity->GetCityBuildings()->GetLandmarksTourismPercent();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetLandmarksTourismPercent@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetLandmarksTourismPercent
	mov	DWORD PTR _iPercent$[ebp], eax

; 4485 : 	if (iPercent > 0)

	cmp	DWORD PTR _iPercent$[ebp], 0
	jle	SHORT $LN16@GetBaseTou

; 4486 : 	{
; 4487 : 		int iFromWonders = GetCultureFromWonders();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromWonders@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromWonders
	mov	DWORD PTR _iFromWonders$226429[ebp], eax

; 4488 : 		int iFromNaturalWonders = GetCultureFromNaturalWonders();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromNaturalWonders
	mov	DWORD PTR _iFromNaturalWonders$226430[ebp], eax

; 4489 : 		int iFromImprovements = GetCultureFromImprovements();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromImprovements@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromImprovements
	mov	DWORD PTR _iFromImprovements$226431[ebp], eax

; 4490 : 		iBase += ((iFromWonders + iFromNaturalWonders + iFromImprovements) * iPercent / 100);

	mov	eax, DWORD PTR _iFromWonders$226429[ebp]
	add	eax, DWORD PTR _iFromNaturalWonders$226430[ebp]
	add	eax, DWORD PTR _iFromImprovements$226431[ebp]
	imul	eax, DWORD PTR _iPercent$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iBase$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax
$LN16@GetBaseTou:

; 4491 : 	}
; 4492 : 
; 4493 : 	ReligionTypes eMajority = m_pCity->GetCityReligions()->GetReligiousMajority();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ ; CvCity::GetCityReligions
	mov	ecx, eax
	call	?GetReligiousMajority@CvCityReligions@@QAE?AW4ReligionTypes@@XZ ; CvCityReligions::GetReligiousMajority
	mov	DWORD PTR _eMajority$[ebp], eax

; 4494 : 	const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(eMajority, m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247320[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247324[ebp], eax
	mov	ecx, DWORD PTR $T247320[ebp]
	push	ecx
	mov	edx, DWORD PTR _eMajority$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T247324[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	ecx, eax
	call	?GetReligion@CvGameReligions@@QBEPBVCvReligion@@W4ReligionTypes@@W4PlayerTypes@@@Z ; CvGameReligions::GetReligion
	mov	DWORD PTR _pReligion$[ebp], eax

; 4495 : 	if(pReligion)

	cmp	DWORD PTR _pReligion$[ebp], 0
	je	$LN15@GetBaseTou

; 4496 : 	{
; 4497 : 		int iFaithBuildingTourism = pReligion->m_Beliefs.GetFaithBuildingTourism();

	mov	eax, DWORD PTR _pReligion$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR _iFaithBuildingTourism$226435[ebp], ecx

; 4498 : 		if (iFaithBuildingTourism > 0)

	cmp	DWORD PTR _iFaithBuildingTourism$226435[ebp], 0
	jle	SHORT $LN14@GetBaseTou

; 4499 : 		{
; 4500 : 			iBase += m_pCity->GetCityBuildings()->GetNumBuildingsFromFaith() * iFaithBuildingTourism;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuildingsFromFaith@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetNumBuildingsFromFaith
	imul	eax, DWORD PTR _iFaithBuildingTourism$226435[ebp]
	add	eax, DWORD PTR _iBase$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax
$LN14@GetBaseTou:

; 4501 : 		}
; 4502 : 
; 4503 : 		// Buildings
; 4504 : #ifdef AUI_WARNING_FIXES
; 4505 : 		for (uint jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)
; 4506 : #else
; 4507 : 		for(int jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)

	mov	DWORD PTR _jJ$226437[ebp], 0
	jmp	SHORT $LN13@GetBaseTou
$LN12@GetBaseTou:
	mov	eax, DWORD PTR _jJ$226437[ebp]
	add	eax, 1
	mov	DWORD PTR _jJ$226437[ebp], eax
$LN13@GetBaseTou:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _jJ$226437[ebp], eax
	jge	$LN15@GetBaseTou

; 4508 : #endif
; 4509 : 		{
; 4510 : 			BuildingClassTypes eBuildingClass = (BuildingClassTypes)jJ;

	mov	ecx, DWORD PTR _jJ$226437[ebp]
	mov	DWORD PTR _eBuildingClass$226441[ebp], ecx

; 4511 : 
; 4512 : 			CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	edx, DWORD PTR _eBuildingClass$226441[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$226443[ebp], eax

; 4513 : 			if(!pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$226443[ebp], 0
	jne	SHORT $LN45@GetBaseTou

; 4514 : 			{
; 4515 : 				continue;

	jmp	SHORT $LN12@GetBaseTou

; 4516 : 			}
; 4517 : 
; 4518 : 			CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(m_pCity->getOwner()).getCivilizationInfo();

$LN45@GetBaseTou:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247336[ebp], edx
	mov	eax, DWORD PTR $T247336[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247340[ebp], eax
	mov	ecx, DWORD PTR $T247340[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226445[ebp], eax

; 4519 : 			BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$226441[ebp]
	push	ecx
	mov	ecx, DWORD PTR _playerCivilizationInfo$226445[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226446[ebp], eax

; 4520 : 
; 4521 : 			if(eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226446[ebp], -1
	je	SHORT $LN9@GetBaseTou

; 4522 : 			{
; 4523 : 				if(m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$226446[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN9@GetBaseTou

; 4524 : 				{
; 4525 : 					iBase += pReligion->m_Beliefs.GetBuildingClassTourism(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$226441[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pReligion$[ebp]
	add	ecx, 152				; 00000098H
	call	?GetBuildingClassTourism@CvReligionBeliefs@@QBEHW4BuildingClassTypes@@@Z ; CvReligionBeliefs::GetBuildingClassTourism
	add	eax, DWORD PTR _iBase$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax
$LN9@GetBaseTou:

; 4526 : 				}
; 4527 : 			}
; 4528 : 		}

	jmp	$LN12@GetBaseTou
$LN15@GetBaseTou:

; 4529 : 	}
; 4530 : 
; 4531 : 	// Tech enhanced Tourism
; 4532 : #ifdef AUI_WARNING_FIXES
; 4533 : 	for (uint jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)
; 4534 : #else
; 4535 : 	for(int jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)

	mov	DWORD PTR _jJ$226450[ebp], 0
	jmp	SHORT $LN7@GetBaseTou
$LN6@GetBaseTou:
	mov	edx, DWORD PTR _jJ$226450[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$226450[ebp], edx
$LN7@GetBaseTou:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _jJ$226450[ebp], eax
	jge	$LN59@GetBaseTou

; 4536 : #endif
; 4537 : 	{
; 4538 : 		BuildingClassTypes eBuildingClass = (BuildingClassTypes)jJ;

	mov	eax, DWORD PTR _jJ$226450[ebp]
	mov	DWORD PTR _eBuildingClass$226454[ebp], eax

; 4539 : 
; 4540 : 		CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$226454[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$226456[ebp], eax

; 4541 : 		if(!pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$226456[ebp], 0
	jne	SHORT $LN51@GetBaseTou

; 4542 : 		{
; 4543 : 			continue;

	jmp	SHORT $LN6@GetBaseTou

; 4544 : 		}
; 4545 : 
; 4546 : 		CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(m_pCity->getOwner()).getCivilizationInfo();

$LN51@GetBaseTou:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247349[ebp], ecx
	mov	edx, DWORD PTR $T247349[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247353[ebp], edx
	mov	ecx, DWORD PTR $T247353[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226458[ebp], eax

; 4547 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$226454[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$226458[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226459[ebp], eax

; 4548 : 
; 4549 : 		if(eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226459[ebp], -1
	je	$LN3@GetBaseTou

; 4550 : 		{
; 4551 : 			CvBuildingEntry *pkEntry = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$226459[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$226462[ebp], eax

; 4552 : 			if(pkEntry && m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	cmp	DWORD PTR _pkEntry$226462[ebp], 0
	je	$LN3@GetBaseTou
	mov	edx, DWORD PTR _eBuilding$226459[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN3@GetBaseTou

; 4553 : 			{
; 4554 : 				int iTourism = pkEntry->GetTechEnhancedTourism();

	mov	ecx, DWORD PTR _pkEntry$226462[ebp]
	call	?GetTechEnhancedTourism@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetTechEnhancedTourism
	mov	DWORD PTR _iTourism$226464[ebp], eax

; 4555 : 				if (iTourism > 0 && GET_TEAM(m_pCity->getTeam()).GetTeamTechs()->HasTech((TechTypes)pkEntry->GetEnhancedYieldTech()))

	cmp	DWORD PTR _iTourism$226464[ebp], 0
	jle	SHORT $LN3@GetBaseTou
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	DWORD PTR $T247357[ebp], eax
	mov	edx, DWORD PTR $T247357[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T247358[ebp], edx
	mov	ecx, DWORD PTR _pkEntry$226462[ebp]
	call	?GetEnhancedYieldTech@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetEnhancedYieldTech
	push	eax
	mov	ecx, DWORD PTR $T247358[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetBaseTou

; 4556 : 				{
; 4557 : 					iBase += iTourism;

	mov	ecx, DWORD PTR _iBase$[ebp]
	add	ecx, DWORD PTR _iTourism$226464[ebp]
	mov	DWORD PTR _iBase$[ebp], ecx
$LN3@GetBaseTou:

; 4558 : 				}
; 4559 : 			}
; 4560 : 		}
; 4561 : 	}

	jmp	$LN6@GetBaseTou

; 4562 : 
; 4563 : #ifdef NQ_TOURISM_PER_CITY
; 4564 : 	iBase += GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_PER_CITY);

$LN59@GetBaseTou:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247367[ebp], ecx
	mov	edx, DWORD PTR $T247367[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247371[ebp], edx
	push	65					; 00000041H
	mov	ecx, DWORD PTR $T247371[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR _iBase$[ebp]
	mov	DWORD PTR _iBase$[ebp], eax

; 4565 : #endif
; 4566 : 
; 4567 : 	return iBase;

	mov	eax, DWORD PTR _iBase$[ebp]
$LN19@GetBaseTou:

; 4568 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ ENDP ; CvCityCulture::GetBaseTourismBeforeModifiers
_TEXT	ENDS
EXTRN	?GetBuildingClassTourismModifier@CvPlayerPolicies@@QAEHW4BuildingClassTypes@@@Z:PROC ; CvPlayerPolicies::GetBuildingClassTourismModifier
EXTRN	?GetCityTourismModifier@CvGameLeagues@@QAEHW4PlayerTypes@@PBVCvCity@@@Z:PROC ; CvGameLeagues::GetCityTourismModifier
EXTRN	?GetTourismBonusTurns@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetTourismBonusTurns
; Function compile flags: /Odtp
;	COMDAT ?GetBaseTourism@CvCityCulture@@QAEHXZ
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T247407 = -64						; size = 4
$T247406 = -60						; size = 4
$T247402 = -56						; size = 4
$T247398 = -52						; size = 4
$T247389 = -48						; size = 4
$T247382 = -44						; size = 4
_pkEntry$226489 = -40					; size = 4
_eBuilding$226485 = -36					; size = 4
_playerCivilizationInfo$226484 = -32			; size = 4
_iBuildingClassLoop$226480 = -28			; size = 4
_iTechSpreadModifier$ = -24				; size = 4
_iLeagueCityModifier$ = -20				; size = 4
_iBase$ = -16						; size = 4
_iBuildingMod$ = -12					; size = 4
_iModifier$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
?GetBaseTourism@CvCityCulture@@QAEHXZ PROC		; CvCityCulture::GetBaseTourism, COMDAT
; _this$ = ecx

; 4576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 4577 : 	int iBase = GetBaseTourismBeforeModifiers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBaseTourismBeforeModifiers@CvCityCulture@@QAEHXZ ; CvCityCulture::GetBaseTourismBeforeModifiers
	mov	DWORD PTR _iBase$[ebp], eax

; 4578 : 
; 4579 : 	int iModifier = 0;

	mov	DWORD PTR _iModifier$[ebp], 0

; 4580 : 
; 4581 : 	CvPlayer &kPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247382[ebp], edx
	mov	eax, DWORD PTR $T247382[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 4582 : 	int iTechSpreadModifier = kPlayer.GetInfluenceSpreadModifier();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetInfluenceSpreadModifier@CvPlayer@@QBEHXZ ; CvPlayer::GetInfluenceSpreadModifier
	mov	DWORD PTR _iTechSpreadModifier$[ebp], eax

; 4583 : 	if (iTechSpreadModifier > 0)

	cmp	DWORD PTR _iTechSpreadModifier$[ebp], 0
	jle	SHORT $LN11@GetBaseTou@2

; 4584 : 	{
; 4585 : 		iModifier += iTechSpreadModifier;

	mov	ecx, DWORD PTR _iModifier$[ebp]
	add	ecx, DWORD PTR _iTechSpreadModifier$[ebp]
	mov	DWORD PTR _iModifier$[ebp], ecx
$LN11@GetBaseTou@2:

; 4586 : 	}
; 4587 : 
; 4588 : 	if (kPlayer.GetTourismBonusTurns() > 0)

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetTourismBonusTurns@CvPlayer@@QBEHXZ	; CvPlayer::GetTourismBonusTurns
	test	eax, eax
	jle	SHORT $LN24@GetBaseTou@2

; 4589 : 	{
; 4590 : 		iModifier += GC.getTEMPORARY_TOURISM_BOOST_MOD();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8304
	mov	DWORD PTR $T247389[ebp], edx
	mov	eax, DWORD PTR _iModifier$[ebp]
	add	eax, DWORD PTR $T247389[ebp]
	mov	DWORD PTR _iModifier$[ebp], eax

; 4591 : 	}
; 4592 : 
; 4593 : 	int iLeagueCityModifier = GC.getGame().GetGameLeagues()->GetCityTourismModifier(m_pCity->getOwner(), m_pCity);

$LN24@GetBaseTou@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247398[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247402[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T247398[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T247402[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetCityTourismModifier@CvGameLeagues@@QAEHW4PlayerTypes@@PBVCvCity@@@Z ; CvGameLeagues::GetCityTourismModifier
	mov	DWORD PTR _iLeagueCityModifier$[ebp], eax

; 4594 : 	if (iLeagueCityModifier > 0)

	cmp	DWORD PTR _iLeagueCityModifier$[ebp], 0
	jle	SHORT $LN9@GetBaseTou@2

; 4595 : 	{
; 4596 : 		iModifier += iLeagueCityModifier;

	mov	edx, DWORD PTR _iModifier$[ebp]
	add	edx, DWORD PTR _iLeagueCityModifier$[ebp]
	mov	DWORD PTR _iModifier$[ebp], edx
$LN9@GetBaseTou@2:

; 4597 : 	}
; 4598 : 
; 4599 : 	if (kPlayer.isGoldenAge())

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?isGoldenAge@CvPlayer@@QBE_NXZ		; CvPlayer::isGoldenAge
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@GetBaseTou@2

; 4600 : 	{
; 4601 : 		iModifier += kPlayer.GetPlayerTraits()->GetGoldenAgeTourismModifier();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T247406[ebp], eax
	mov	ecx, DWORD PTR $T247406[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	DWORD PTR $T247407[ebp], edx
	mov	eax, DWORD PTR _iModifier$[ebp]
	add	eax, DWORD PTR $T247407[ebp]
	mov	DWORD PTR _iModifier$[ebp], eax
$LN8@GetBaseTou@2:

; 4602 : 	}
; 4603 : 	
; 4604 : 
; 4605 : 	int iBuildingMod = 0;

	mov	DWORD PTR _iBuildingMod$[ebp], 0

; 4606 : #ifdef AUI_WARNING_FIXES
; 4607 : 	for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 4608 : #else
; 4609 : 	for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$226480[ebp], 0
	jmp	SHORT $LN7@GetBaseTou@2
$LN6@GetBaseTou@2:
	mov	ecx, DWORD PTR _iBuildingClassLoop$226480[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuildingClassLoop$226480[ebp], ecx
$LN7@GetBaseTou@2:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$226480[ebp], eax
	jge	SHORT $LN5@GetBaseTou@2

; 4610 : #endif
; 4611 : 	{
; 4612 : 		CvCivilizationInfo& playerCivilizationInfo = kPlayer.getCivilizationInfo();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226484[ebp], eax

; 4613 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	edx, DWORD PTR _iBuildingClassLoop$226480[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerCivilizationInfo$226484[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226485[ebp], eax

; 4614 : 		if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226485[ebp], -1
	je	SHORT $LN4@GetBaseTou@2

; 4615 : 		{
; 4616 : 			CvBuildingEntry *pkEntry = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$226485[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$226489[ebp], eax

; 4617 : 			if (pkEntry)

	cmp	DWORD PTR _pkEntry$226489[ebp], 0
	je	SHORT $LN4@GetBaseTou@2

; 4618 : 			{
; 4619 : 				iBuildingMod = kPlayer.GetPlayerPolicies()->GetBuildingClassTourismModifier((BuildingClassTypes)iBuildingClassLoop);

	mov	ecx, DWORD PTR _iBuildingClassLoop$226480[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetBuildingClassTourismModifier@CvPlayerPolicies@@QAEHW4BuildingClassTypes@@@Z ; CvPlayerPolicies::GetBuildingClassTourismModifier
	mov	DWORD PTR _iBuildingMod$[ebp], eax

; 4620 : 				if (iBuildingMod != 0 && m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	cmp	DWORD PTR _iBuildingMod$[ebp], 0
	je	SHORT $LN4@GetBaseTou@2
	mov	edx, DWORD PTR _eBuilding$226485[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN4@GetBaseTou@2

; 4621 : 				{
; 4622 : 					iModifier += iBuildingMod;

	mov	ecx, DWORD PTR _iModifier$[ebp]
	add	ecx, DWORD PTR _iBuildingMod$[ebp]
	mov	DWORD PTR _iModifier$[ebp], ecx
$LN4@GetBaseTou@2:

; 4623 : 				}
; 4624 : 			}
; 4625 : 		}
; 4626 : 	}

	jmp	$LN6@GetBaseTou@2
$LN5@GetBaseTou@2:

; 4627 : 
; 4628 : 	if (iModifier > 0)

	cmp	DWORD PTR _iModifier$[ebp], 0
	jle	SHORT $LN1@GetBaseTou@2

; 4629 : 	{
; 4630 : 		iBase = iBase * (100 + iModifier) / 100;

	mov	edx, DWORD PTR _iModifier$[ebp]
	add	edx, 100				; 00000064H
	mov	eax, edx
	imul	eax, DWORD PTR _iBase$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iBase$[ebp], eax
$LN1@GetBaseTou@2:

; 4631 : 	}
; 4632 : 
; 4633 : 	return iBase;

	mov	eax, DWORD PTR _iBase$[ebp]

; 4634 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseTourism@CvCityCulture@@QAEHXZ ENDP		; CvCityCulture::GetBaseTourism
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetTourismMultiplier@CvCityCulture@@QBEHW4PlayerTypes@@_N1111@Z
_TEXT	SEGMENT
_this$ = -100						; size = 4
$T247479 = -96						; size = 4
$T247475 = -92						; size = 4
$T247466 = -88						; size = 4
$T247462 = -84						; size = 4
$T247458 = -80						; size = 4
$T247454 = -76						; size = 4
$T247445 = -72						; size = 4
$T247433 = -68						; size = 4
$T247421 = -64						; size = 4
_iPlayerLoop$226529 = -60				; size = 4
_totalEnemies$226526 = -56				; size = 4
_rank$226525 = -52					; size = 4
_eLoopPlayer$226528 = -48				; size = 4
_myStrength$226527 = -44				; size = 4
_iSharedIdeologyMod$226537 = -40			; size = 4
_iLessHappyMod$226520 = -36				; size = 4
_iCommonFoeMod$226523 = -32				; size = 4
_ePlayerReligion$226510 = -28				; size = 4
_eTheirIdeology$ = -24					; size = 4
_eMyIdeology$ = -20					; size = 4
_kTeam$ = -16						; size = 4
_kCityPlayer$ = -12					; size = 4
_iMultiplier$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_bIgnoreReligion$ = 12					; size = 1
_bIgnoreOpenBorders$ = 16				; size = 1
_bIgnoreTrade$ = 20					; size = 1
_bIgnorePolicies$ = 24					; size = 1
_bIgnoreIdeologies$ = 28				; size = 1
?GetTourismMultiplier@CvCityCulture@@QBEHW4PlayerTypes@@_N1111@Z PROC ; CvCityCulture::GetTourismMultiplier, COMDAT
; _this$ = ecx

; 4638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 4639 : 	int iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 4640 : 	CvPlayer &kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 4641 : 	CvTeam &kTeam = GET_TEAM(kPlayer.getTeam());

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T247421[ebp], eax
	mov	eax, DWORD PTR $T247421[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$[ebp], eax

; 4642 : 	CvPlayer &kCityPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247433[ebp], eax
	mov	ecx, DWORD PTR $T247433[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityPlayer$[ebp], ecx

; 4643 : 	PolicyBranchTypes eMyIdeology = kCityPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eMyIdeology$[ebp], eax

; 4644 : 	PolicyBranchTypes eTheirIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eTheirIdeology$[ebp], eax

; 4645 : 
; 4646 : 	if (!bIgnoreReligion)

	movzx	edx, BYTE PTR _bIgnoreReligion$[ebp]
	test	edx, edx
	jne	SHORT $LN21@GetTourism@5

; 4647 : 	{
; 4648 : 		// City shares religion with this player
; 4649 : 		ReligionTypes ePlayerReligion = kCityPlayer.GetReligions()->GetReligionInMostCities();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?GetReligionInMostCities@CvPlayerReligions@@QBE?AW4ReligionTypes@@XZ ; CvPlayerReligions::GetReligionInMostCities
	mov	DWORD PTR _ePlayerReligion$226510[ebp], eax

; 4650 : 		if (ePlayerReligion != NO_RELIGION && kPlayer.GetReligions()->HasReligionInMostCities(ePlayerReligion))

	cmp	DWORD PTR _ePlayerReligion$226510[ebp], -1
	je	SHORT $LN21@GetTourism@5
	mov	eax, DWORD PTR _ePlayerReligion$226510[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z ; CvPlayerReligions::HasReligionInMostCities
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN21@GetTourism@5

; 4651 : 		{
; 4652 : 			iMultiplier += kCityPlayer.GetCulture()->GetTourismModifierSharedReligion();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierSharedReligion
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN21@GetTourism@5:

; 4653 : 		}
; 4654 : 	}
; 4655 : 
; 4656 : 	if (!bIgnoreOpenBorders)

	movzx	edx, BYTE PTR _bIgnoreOpenBorders$[ebp]
	test	edx, edx
	jne	SHORT $LN19@GetTourism@5

; 4657 : 	{
; 4658 : 		// Open borders with this player
; 4659 : 		if (kTeam.IsAllowsOpenBordersToTeam(kCityPlayer.getTeam()))

	mov	eax, DWORD PTR _kCityPlayer$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T247445[ebp], eax
	mov	edx, DWORD PTR $T247445[ebp]
	push	edx
	mov	ecx, DWORD PTR _kTeam$[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@GetTourism@5

; 4660 : 		{
; 4661 : 			iMultiplier += kCityPlayer.GetCulture()->GetTourismModifierOpenBorders();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierOpenBorders
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN19@GetTourism@5:

; 4662 : 		}
; 4663 : 	}
; 4664 : 
; 4665 : 	if (!bIgnoreTrade)

	movzx	ecx, BYTE PTR _bIgnoreTrade$[ebp]
	test	ecx, ecx
	jne	SHORT $LN17@GetTourism@5

; 4666 : 	{
; 4667 : 		// Trade route to one of this player's cities from here
; 4668 : 		if (GC.getGame().GetGameTrade()->IsPlayerConnectedToPlayer(m_pCity->getOwner(), ePlayer))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247454[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247458[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247454[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T247458[ebp]
	call	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ ; CvGame::GetGameTrade
	mov	ecx, eax
	call	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z ; CvGameTrade::IsPlayerConnectedToPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@GetTourism@5

; 4669 : 		{
; 4670 : 			iMultiplier += kCityPlayer.GetCulture()->GetTourismModifierTradeRoute();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierTradeRoute
	add	eax, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN17@GetTourism@5:

; 4671 : 		}
; 4672 : 	}
; 4673 : 
; 4674 : 	if (!bIgnoreIdeologies)

	movzx	eax, BYTE PTR _bIgnoreIdeologies$[ebp]
	test	eax, eax
	jne	SHORT $LN15@GetTourism@5

; 4675 : 	{
; 4676 : 		if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN15@GetTourism@5
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	SHORT $LN15@GetTourism@5
	mov	ecx, DWORD PTR _eMyIdeology$[ebp]
	cmp	ecx, DWORD PTR _eTheirIdeology$[ebp]
	je	SHORT $LN15@GetTourism@5

; 4677 : 		{
; 4678 : 			iMultiplier += GC.getTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8228
	mov	DWORD PTR $T247462[ebp], edx
	mov	eax, DWORD PTR _iMultiplier$[ebp]
	add	eax, DWORD PTR $T247462[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax

; 4679 : 
; 4680 : 			if (kCityPlayer.GetEspionage()->IsMyDiplomatVisitingThem(ePlayer))

	push	0
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@GetTourism@5

; 4681 : 			{
; 4682 : 				iMultiplier += GC.getTOURISM_MODIFIER_DIPLOMAT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8232
	mov	DWORD PTR $T247466[ebp], eax
	mov	ecx, DWORD PTR _iMultiplier$[ebp]
	add	ecx, DWORD PTR $T247466[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
$LN15@GetTourism@5:

; 4683 : 			}
; 4684 : 		}
; 4685 : 	}
; 4686 : 
; 4687 : 	if (!bIgnorePolicies)

	movzx	edx, BYTE PTR _bIgnorePolicies$[ebp]
	test	edx, edx
	jne	$LN12@GetTourism@5

; 4688 : 	{
; 4689 : 		int iLessHappyMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_LESS_HAPPY);

	push	29					; 0000001dH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iLessHappyMod$226520[ebp], eax

; 4690 : 		if (iLessHappyMod > 0)

	cmp	DWORD PTR _iLessHappyMod$226520[ebp], 0
	jle	SHORT $LN11@GetTourism@5

; 4691 : 		{
; 4692 : 			if (kCityPlayer.GetExcessHappiness() > kPlayer.GetExcessHappiness())

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	mov	esi, eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	cmp	esi, eax
	jle	SHORT $LN11@GetTourism@5

; 4693 : 			{
; 4694 : 				iMultiplier += iLessHappyMod;

	mov	eax, DWORD PTR _iMultiplier$[ebp]
	add	eax, DWORD PTR _iLessHappyMod$226520[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN11@GetTourism@5:

; 4695 : 			}
; 4696 : 		}
; 4697 : 		int iCommonFoeMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_COMMON_FOE);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iCommonFoeMod$226523[ebp], eax

; 4698 : 		if (iCommonFoeMod > 0)

	cmp	DWORD PTR _iCommonFoeMod$226523[ebp], 0
	jle	$LN9@GetTourism@5

; 4699 : 		{
; 4700 : 			// NQMP GJS - new Cult of Personality BEGIN
; 4701 : 			int rank = 0;

	mov	DWORD PTR _rank$226525[ebp], 0

; 4702 : 			int totalEnemies = 0;

	mov	DWORD PTR _totalEnemies$226526[ebp], 0

; 4703 : 			int myStrength = kCityPlayer.GetMilitaryMight();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	mov	DWORD PTR _myStrength$226527[ebp], eax

; 4704 : 
; 4705 : 			PlayerTypes eLoopPlayer;
; 4706 : 			for (int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$226529[ebp], 0
	jmp	SHORT $LN8@GetTourism@5
$LN7@GetTourism@5:
	mov	ecx, DWORD PTR _iPlayerLoop$226529[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPlayerLoop$226529[ebp], ecx
$LN8@GetTourism@5:
	cmp	DWORD PTR _iPlayerLoop$226529[ebp], 22	; 00000016H
	jge	SHORT $LN6@GetTourism@5

; 4707 : 			{
; 4708 : 				eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	edx, DWORD PTR _iPlayerLoop$226529[ebp]
	mov	DWORD PTR _eLoopPlayer$226528[ebp], edx

; 4709 : 				if(eLoopPlayer != m_pCity->getOwner() && kCityPlayer.GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247475[ebp], edx
	mov	eax, DWORD PTR _eLoopPlayer$226528[ebp]
	cmp	eax, DWORD PTR $T247475[ebp]
	je	SHORT $LN5@GetTourism@5
	push	0
	mov	ecx, DWORD PTR _eLoopPlayer$226528[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@GetTourism@5

; 4710 : 				{
; 4711 : 					totalEnemies++;

	mov	eax, DWORD PTR _totalEnemies$226526[ebp]
	add	eax, 1
	mov	DWORD PTR _totalEnemies$226526[ebp], eax

; 4712 : 					if (GET_PLAYER(eLoopPlayer).GetMilitaryMight() > myStrength)

	mov	ecx, DWORD PTR _eLoopPlayer$226528[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247479[ebp], ecx
	mov	ecx, DWORD PTR $T247479[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	cmp	eax, DWORD PTR _myStrength$226527[ebp]
	jle	SHORT $LN5@GetTourism@5

; 4713 : 					{
; 4714 : 						rank++;

	mov	edx, DWORD PTR _rank$226525[ebp]
	add	edx, 1
	mov	DWORD PTR _rank$226525[ebp], edx
$LN5@GetTourism@5:

; 4715 : 					}
; 4716 : 				}
; 4717 : 			}

	jmp	SHORT $LN7@GetTourism@5
$LN6@GetTourism@5:

; 4718 : 
; 4719 : 			// divide the tourism boost into chunks, so that lowest player gets 0%, highest gets 100%, and the rest are evenly distributed in between
; 4720 : 			// so for example in a 6 player game, based on the player being 6th/5th/4th/3rd/2nd/1st in military strength they get 0%/20%/40%/60%/80%/100% boost
; 4721 : 			if (totalEnemies > 0)

	cmp	DWORD PTR _totalEnemies$226526[ebp], 0
	jle	SHORT $LN9@GetTourism@5

; 4722 : 			{
; 4723 : 				iCommonFoeMod = iCommonFoeMod * (totalEnemies - rank) / totalEnemies;

	mov	eax, DWORD PTR _totalEnemies$226526[ebp]
	sub	eax, DWORD PTR _rank$226525[ebp]
	imul	eax, DWORD PTR _iCommonFoeMod$226523[ebp]
	cdq
	idiv	DWORD PTR _totalEnemies$226526[ebp]
	mov	DWORD PTR _iCommonFoeMod$226523[ebp], eax

; 4724 : 				iMultiplier += iCommonFoeMod;

	mov	ecx, DWORD PTR _iMultiplier$[ebp]
	add	ecx, DWORD PTR _iCommonFoeMod$226523[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
$LN9@GetTourism@5:

; 4725 : 			}
; 4726 : 
; 4727 : 			/*
; 4728 : 			// old code
; 4729 : 			PlayerTypes eLoopPlayer;
; 4730 : 			for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)
; 4731 : 			{
; 4732 : 				eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 4733 : 
; 4734 : 				if(eLoopPlayer != ePlayer && eLoopPlayer != m_pCity->getOwner() && kCityPlayer.GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))
; 4735 : 				{
; 4736 : 					// Are they at war with me too?
; 4737 : 					if (GET_TEAM(kCityPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()) && GET_TEAM(kPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()))
; 4738 : 					{
; 4739 : 						iMultiplier += iCommonFoeMod;
; 4740 : 					}
; 4741 : 				}
; 4742 : 			}
; 4743 : 			*/
; 4744 : 			// NQMP GJS - new Cult of Personality END
; 4745 : 		}
; 4746 : 
; 4747 : 		int iSharedIdeologyMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_SHARED_IDEOLOGY);

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iSharedIdeologyMod$226537[ebp], eax

; 4748 : 		if (iSharedIdeologyMod > 0)

	cmp	DWORD PTR _iSharedIdeologyMod$226537[ebp], 0
	jle	SHORT $LN12@GetTourism@5

; 4749 : 		{
; 4750 : 			if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology == eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN12@GetTourism@5
	cmp	DWORD PTR _eTheirIdeology$[ebp], -1
	je	SHORT $LN12@GetTourism@5
	mov	edx, DWORD PTR _eMyIdeology$[ebp]
	cmp	edx, DWORD PTR _eTheirIdeology$[ebp]
	jne	SHORT $LN12@GetTourism@5

; 4751 : 			{
; 4752 : 				iMultiplier += iSharedIdeologyMod;

	mov	eax, DWORD PTR _iMultiplier$[ebp]
	add	eax, DWORD PTR _iSharedIdeologyMod$226537[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
$LN12@GetTourism@5:

; 4753 : 			}
; 4754 : 		}
; 4755 : 	}
; 4756 : 
; 4757 : 	// LATER add top science city and research agreement with this player???
; 4758 : 
; 4759 : 	return iMultiplier;

	mov	eax, DWORD PTR _iMultiplier$[ebp]

; 4760 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?GetTourismMultiplier@CvCityCulture@@QBEHW4PlayerTypes@@_N1111@Z ENDP ; CvCityCulture::GetTourismMultiplier
_TEXT	ENDS
PUBLIC	??_C@_0CH@EANAOGLL@TXT_KEY_CO_CITY_TOURISM_CARNIVAL@ ; `string'
PUBLIC	??_C@_0CG@BCFDPEBM@TXT_KEY_CO_CITY_TOURISM_LEAGUES_@ ; `string'
PUBLIC	??_C@_0CD@JGJDDHFJ@TXT_KEY_CO_CITY_TOURISM_TECH_BON@ ; `string'
PUBLIC	??_C@_0DD@KFIJANLH@TXT_KEY_CO_CITY_TOURISM_DIFFEREN@ ; `string'
PUBLIC	??_C@_0CO@DPNLKNEO@TXT_KEY_CO_CITY_TOURISM_SHARED_I@ ; `string'
PUBLIC	??_C@_0CJ@IGNJDBOH@TXT_KEY_CO_CITY_TOURISM_COMMON_F@ ; `string'
PUBLIC	??_C@_0CJ@GFLHOCFE@TXT_KEY_CO_CITY_TOURISM_LESS_HAP@ ; `string'
PUBLIC	??_C@_0CK@IICGJDNK@TXT_KEY_CO_CITY_TOURISM_TRADE_RO@ ; `string'
PUBLIC	??_C@_0CL@GDADGBDG@TXT_KEY_CO_CITY_TOURISM_OPEN_BOR@ ; `string'
PUBLIC	??_C@_0CH@JAKIEDGO@TXT_KEY_CO_CITY_TOURISM_RELIGION@ ; `string'
PUBLIC	??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z ; GetLocalizedText<int,char const *>
PUBLIC	??_C@_0CH@KGCCENCH@TXT_KEY_CO_CITY_TOURISM_BUILDING@ ; `string'
PUBLIC	??_C@_0CG@DKKFAOEJ@TXT_KEY_CO_CITY_TOURISM_TECH_ENH@ ; `string'
PUBLIC	??_C@_0CG@IDKPLIFL@TXT_KEY_CO_CITY_TOURISM_RELIGIOU@ ; `string'
PUBLIC	??_C@_0CI@LFGJCHMN@TXT_KEY_CO_CITY_TOURISM_FAITH_BU@ ; `string'
PUBLIC	??_C@_0BM@OLNPIDLP@TXT_KEY_CO_TOURISM_PER_CITY?$AA@ ; `string'
PUBLIC	??_C@_0BO@HIFMPCNI@TXT_KEY_CO_CITY_TOURISM_TILES?$AA@ ; `string'
PUBLIC	??_C@_0CI@PFNPAEPM@TXT_KEY_CO_CITY_TOURISM_THEMING_@ ; `string'
PUBLIC	??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z ; GetLocalizedText<int,int,int,int>
PUBLIC	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
PUBLIC	??_C@_0CE@NICFNOMH@TXT_KEY_CO_CITY_TOURISM_GREAT_WO@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ ; CvCityCulture::GetTourismTooltip
EXTRN	__imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
;	COMDAT ??_C@_0CH@EANAOGLL@TXT_KEY_CO_CITY_TOURISM_CARNIVAL@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CH@EANAOGLL@TXT_KEY_CO_CITY_TOURISM_CARNIVAL@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_CARNIVAL_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BCFDPEBM@TXT_KEY_CO_CITY_TOURISM_LEAGUES_@
CONST	SEGMENT
??_C@_0CG@BCFDPEBM@TXT_KEY_CO_CITY_TOURISM_LEAGUES_@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_LEAGUES_BONUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JGJDDHFJ@TXT_KEY_CO_CITY_TOURISM_TECH_BON@
CONST	SEGMENT
??_C@_0CD@JGJDDHFJ@TXT_KEY_CO_CITY_TOURISM_TECH_BON@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_TECH_BONUS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KFIJANLH@TXT_KEY_CO_CITY_TOURISM_DIFFEREN@
CONST	SEGMENT
??_C@_0DD@KFIJANLH@TXT_KEY_CO_CITY_TOURISM_DIFFEREN@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_DIFFERENT_IDEOLOGY_PENALTY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DPNLKNEO@TXT_KEY_CO_CITY_TOURISM_SHARED_I@
CONST	SEGMENT
??_C@_0CO@DPNLKNEO@TXT_KEY_CO_CITY_TOURISM_SHARED_I@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_SHARED_IDEOLOGY_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IGNJDBOH@TXT_KEY_CO_CITY_TOURISM_COMMON_F@
CONST	SEGMENT
??_C@_0CJ@IGNJDBOH@TXT_KEY_CO_CITY_TOURISM_COMMON_F@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_COMMON_FOE_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GFLHOCFE@TXT_KEY_CO_CITY_TOURISM_LESS_HAP@
CONST	SEGMENT
??_C@_0CJ@GFLHOCFE@TXT_KEY_CO_CITY_TOURISM_LESS_HAP@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_LESS_HAPPY_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IICGJDNK@TXT_KEY_CO_CITY_TOURISM_TRADE_RO@
CONST	SEGMENT
??_C@_0CK@IICGJDNK@TXT_KEY_CO_CITY_TOURISM_TRADE_RO@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_TRADE_ROUTE_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GDADGBDG@TXT_KEY_CO_CITY_TOURISM_OPEN_BOR@
CONST	SEGMENT
??_C@_0CL@GDADGBDG@TXT_KEY_CO_CITY_TOURISM_OPEN_BOR@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_OPEN_BORDERS_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JAKIEDGO@TXT_KEY_CO_CITY_TOURISM_RELIGION@
CONST	SEGMENT
??_C@_0CH@JAKIEDGO@TXT_KEY_CO_CITY_TOURISM_RELIGION@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_RELIGION_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KGCCENCH@TXT_KEY_CO_CITY_TOURISM_BUILDING@
CONST	SEGMENT
??_C@_0CH@KGCCENCH@TXT_KEY_CO_CITY_TOURISM_BUILDING@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_BUILDING_BONUS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DKKFAOEJ@TXT_KEY_CO_CITY_TOURISM_TECH_ENH@
CONST	SEGMENT
??_C@_0CG@DKKFAOEJ@TXT_KEY_CO_CITY_TOURISM_TECH_ENH@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_TECH_ENHANCED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IDKPLIFL@TXT_KEY_CO_CITY_TOURISM_RELIGIOU@
CONST	SEGMENT
??_C@_0CG@IDKPLIFL@TXT_KEY_CO_CITY_TOURISM_RELIGIOU@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_RELIGIOUS_ART', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LFGJCHMN@TXT_KEY_CO_CITY_TOURISM_FAITH_BU@
CONST	SEGMENT
??_C@_0CI@LFGJCHMN@TXT_KEY_CO_CITY_TOURISM_FAITH_BU@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_FAITH_BUILDINGS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OLNPIDLP@TXT_KEY_CO_TOURISM_PER_CITY?$AA@
CONST	SEGMENT
??_C@_0BM@OLNPIDLP@TXT_KEY_CO_TOURISM_PER_CITY?$AA@ DB 'TXT_KEY_CO_TOURIS'
	DB	'M_PER_CITY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HIFMPCNI@TXT_KEY_CO_CITY_TOURISM_TILES?$AA@
CONST	SEGMENT
??_C@_0BO@HIFMPCNI@TXT_KEY_CO_CITY_TOURISM_TILES?$AA@ DB 'TXT_KEY_CO_CITY'
	DB	'_TOURISM_TILES', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PFNPAEPM@TXT_KEY_CO_CITY_TOURISM_THEMING_@
CONST	SEGMENT
??_C@_0CI@PFNPAEPM@TXT_KEY_CO_CITY_TOURISM_THEMING_@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_THEMING_BONUSES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NICFNOMH@TXT_KEY_CO_CITY_TOURISM_GREAT_WO@
CONST	SEGMENT
??_C@_0CE@NICFNOMH@TXT_KEY_CO_CITY_TOURISM_GREAT_WO@ DB 'TXT_KEY_CO_CITY_'
	DB	'TOURISM_GREAT_WORKS', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 019930522H
	DD	023H
	DD	FLAT:__unwindtable$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$34
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$5
	DD	06H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$7
	DD	08H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$8
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$10
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$11
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$12
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$13
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$14
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$15
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$16
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$17
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$18
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$19
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$20
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$21
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$22
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$23
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$24
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$25
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$26
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$27
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$28
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$29
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$30
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$31
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$32
	DD	09H
	DD	FLAT:__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$33
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ
_TEXT	SEGMENT
tv1959 = -1560						; size = 4
tv1958 = -1556						; size = 4
tv1957 = -1552						; size = 4
tv1434 = -1548						; size = 4
tv1956 = -1544						; size = 4
tv1955 = -1540						; size = 4
tv1430 = -1536						; size = 4
tv1954 = -1532						; size = 4
tv1953 = -1528						; size = 4
tv1952 = -1524						; size = 4
tv1424 = -1520						; size = 4
tv1951 = -1516						; size = 4
tv1950 = -1512						; size = 4
tv1420 = -1508						; size = 4
tv1949 = -1504						; size = 4
tv1948 = -1500						; size = 4
tv1416 = -1496						; size = 4
tv1947 = -1492						; size = 4
tv1946 = -1488						; size = 4
tv1412 = -1484						; size = 4
tv1453 = -1480						; size = 4
tv1459 = -1476						; size = 4
tv1472 = -1472						; size = 4
tv1406 = -1468						; size = 4
tv1483 = -1464						; size = 4
tv1404 = -1460						; size = 4
tv1496 = -1456						; size = 4
tv1402 = -1452						; size = 4
tv1509 = -1448						; size = 4
tv1400 = -1444						; size = 4
tv1522 = -1440						; size = 4
tv1398 = -1436						; size = 4
tv1535 = -1432						; size = 4
tv1396 = -1428						; size = 4
tv1548 = -1424						; size = 4
tv1561 = -1420						; size = 4
tv1890 = -1416						; size = 4
tv1563 = -1412						; size = 4
tv1550 = -1408						; size = 4
tv1537 = -1404						; size = 4
tv1524 = -1400						; size = 4
tv1511 = -1396						; size = 4
tv1498 = -1392						; size = 4
tv1485 = -1388						; size = 4
tv1461 = -1384						; size = 4
_this$ = -1380						; size = 4
$T247956 = -1376					; size = 4
$T247952 = -1372					; size = 4
$T247951 = -1368					; size = 4
$T247947 = -1364					; size = 4
$T247946 = -1360					; size = 4
$T247938 = -1356					; size = 4
$T247934 = -1352					; size = 4
$T247930 = -1348					; size = 4
$T247917 = -1344					; size = 4
$T247909 = -1340					; size = 4
$T247905 = -1336					; size = 4
$T247897 = -1332					; size = 4
$T247889 = -1328					; size = 4
$T247881 = -1324					; size = 4
$T247873 = -1320					; size = 4
$T247865 = -1316					; size = 4
$T247857 = -1312					; size = 4
$T247853 = -1308					; size = 4
$T247849 = -1304					; size = 4
$T247840 = -1300					; size = 4
$T247836 = -1296					; size = 4
$T247824 = -1292					; size = 4
$T247815 = -1288					; size = 4
$T247811 = -1284					; size = 4
$T247802 = -1280					; size = 4
$T247793 = -1276					; size = 4
$T247789 = -1272					; size = 4
$T247780 = -1265					; size = 1
$T247764 = -1264					; size = 4
$T247753 = -1260					; size = 4
$T247752 = -1256					; size = 4
$T247748 = -1252					; size = 4
$T247744 = -1248					; size = 4
$T247731 = -1244					; size = 4
$T247727 = -1240					; size = 4
$T247711 = -1236					; size = 4
$T247707 = -1232					; size = 4
$T247694 = -1228					; size = 4
$T247690 = -1224					; size = 4
$T247669 = -1220					; size = 4
$T247665 = -1216					; size = 4
$T247661 = -1212					; size = 4
$T247648 = -1208					; size = 4
$T247644 = -1204					; size = 4
$T247640 = -1200					; size = 4
$T247636 = -1196					; size = 4
$T247624 = -1192					; size = 4
$T247546 = -1188					; size = 4
$T247510 = -1184					; size = 28
$T247509 = -1156					; size = 28
$T247508 = -1128					; size = 28
$T247507 = -1100					; size = 28
$T247506 = -1072					; size = 28
$T247505 = -1044					; size = 28
$T247504 = -1016					; size = 28
$T247503 = -988						; size = 28
$T247502 = -960						; size = 28
$T247501 = -932						; size = 28
$T247500 = -904						; size = 28
$T247499 = -876						; size = 28
$T247498 = -848						; size = 28
$T247497 = -820						; size = 28
$T247496 = -792						; size = 28
$T247495 = -764						; size = 28
$T247494 = -736						; size = 28
$T247493 = -708						; size = 4
$T247492 = -704						; size = 28
$T247491 = -676						; size = 28
$T247490 = -648						; size = 28
$T247489 = -620						; size = 28
$T247488 = -592						; size = 28
$T247487 = -564						; size = 28
$T247486 = -536						; size = 28
$T247485 = -508						; size = 4
$T247484 = -504						; size = 28
$T247483 = -476						; size = 4
_iPlayerLoop$226704 = -472				; size = 4
_totalEnemies$226701 = -468				; size = 4
_rank$226700 = -464					; size = 4
_eLoopPlayer$226703 = -460				; size = 4
_myStrength$226702 = -456				; size = 4
_kTeam$226690 = -452					; size = 4
_eTheirIdeology$226685 = -448				; size = 4
_kPlayer$226683 = -444					; size = 4
_iLoopPlayer$226679 = -440				; size = 4
_pkEntry$226659 = -436					; size = 4
_eBuilding$226655 = -432				; size = 4
_playerCivilizationInfo$226654 = -428			; size = 4
_iBuildingClassLoop$226650 = -424			; size = 4
_iTechEnhancedTourism$226643 = -420			; size = 4
_eBuilding$226639 = -416				; size = 4
_playerCivilizationInfo$226638 = -412			; size = 4
_pkBuildingClassInfo$226636 = -408			; size = 4
_eBuildingClass$226634 = -404				; size = 4
_jJ$226630 = -400					; size = 4
_eBuilding$226623 = -396				; size = 4
_playerCivilizationInfo$226622 = -392			; size = 4
_pkBuildingClassInfo$226620 = -388			; size = 4
_eBuildingClass$226618 = -384				; size = 4
_jJ$226614 = -380					; size = 4
_iFaithBuildingTourism$226609 = -376			; size = 4
_iFromImprovements$226595 = -372			; size = 4
_iFromWonders$226593 = -368				; size = 4
_iFromNaturalWonders$226594 = -364			; size = 4
_iTotalBonusTourismForWonders$ = -360			; size = 4
_iReligiousArtTourism$ = -356				; size = 4
_iTechSpreadModifier$ = -352				; size = 4
_openBordersCivs$ = -348				; size = 28
_eMajority$ = -320					; size = 4
_sharedIdeologyCivs$ = -316				; size = 28
_iBonusTourismPerGreatWork$ = -288			; size = 4
_commonFoeCivs$ = -284					; size = 28
_differentIdeologyCivs$ = -256				; size = 28
_szTemp$ = -228						; size = 28
_eMyIdeology$ = -200					; size = 4
_iSharedIdeologyMod$ = -196				; size = 4
_iLeagueCityModifier$ = -192				; size = 4
_szRtnValue$ = -188					; size = 28
_iLessHappyMod$ = -160					; size = 4
_iFromTourismPerCity$ = -156				; size = 4
_iBuildingMod$ = -152					; size = 4
_ePlayerReligion$ = -148				; size = 4
_sharedReligionCivs$ = -144				; size = 28
_lessHappyCivs$ = -116					; size = 28
_kCityPlayer$ = -88					; size = 4
_eTeam$ = -84						; size = 4
_iCommonFoeMod$ = -80					; size = 4
_iGWTourism$ = -76					; size = 4
_iBonusTourismPerWonder$ = -72				; size = 4
_iSacredSitesTourism$ = -68				; size = 4
_pReligion$ = -64					; size = 4
_tradeRouteCivs$ = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_iNumWorldWonders$ = -28				; size = 4
_iThemingBonuses$ = -24					; size = 4
_iPercent$ = -20					; size = 4
_iTileTourism$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ PROC ; CvCityCulture::GetTourismTooltip, COMDAT
; _this$ = ecx

; 4764 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1548				; 0000060cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T247546[ebp], 0

; 4765 : 	CvString szRtnValue = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN118@GetTourism@6
	mov	DWORD PTR tv1461[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN119@GetTourism@6
$LN118@GetTourism@6:
	mov	DWORD PTR tv1461[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN119@GetTourism@6:
	mov	ecx, DWORD PTR tv1461[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 4766 : 	CvString szTemp;

	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 4767 :  	CvString sharedReligionCivs = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN126@GetTourism@6
	mov	DWORD PTR tv1485[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN127@GetTourism@6
$LN126@GetTourism@6:
	mov	DWORD PTR tv1485[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN127@GetTourism@6:
	mov	eax, DWORD PTR tv1485[ebp]
	push	eax
	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 4768 : 	CvString openBordersCivs = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN131@GetTourism@6
	mov	DWORD PTR tv1498[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN132@GetTourism@6
$LN131@GetTourism@6:
	mov	DWORD PTR tv1498[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN132@GetTourism@6:
	mov	edx, DWORD PTR tv1498[ebp]
	push	edx
	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 4769 : 	CvString tradeRouteCivs = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN136@GetTourism@6
	mov	DWORD PTR tv1511[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN137@GetTourism@6
$LN136@GetTourism@6:
	mov	DWORD PTR tv1511[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN137@GetTourism@6:
	mov	ecx, DWORD PTR tv1511[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 4770 : 	CvString lessHappyCivs = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN141@GetTourism@6
	mov	DWORD PTR tv1524[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN142@GetTourism@6
$LN141@GetTourism@6:
	mov	DWORD PTR tv1524[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN142@GetTourism@6:
	mov	eax, DWORD PTR tv1524[ebp]
	push	eax
	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 4771 : 	CvString commonFoeCivs = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN146@GetTourism@6
	mov	DWORD PTR tv1537[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN147@GetTourism@6
$LN146@GetTourism@6:
	mov	DWORD PTR tv1537[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN147@GetTourism@6:
	mov	edx, DWORD PTR tv1537[ebp]
	push	edx
	lea	ecx, DWORD PTR _commonFoeCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 4772 : 	CvString sharedIdeologyCivs = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN151@GetTourism@6
	mov	DWORD PTR tv1550[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN152@GetTourism@6
$LN151@GetTourism@6:
	mov	DWORD PTR tv1550[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN152@GetTourism@6:
	mov	ecx, DWORD PTR tv1550[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 4773 : 	CvString differentIdeologyCivs = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN156@GetTourism@6
	mov	DWORD PTR tv1563[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN157@GetTourism@6
$LN156@GetTourism@6:
	mov	DWORD PTR tv1563[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN157@GetTourism@6:
	mov	eax, DWORD PTR tv1563[ebp]
	push	eax
	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 4774 : 	TeamTypes eTeam = m_pCity->getTeam();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	DWORD PTR _eTeam$[ebp], eax

; 4775 : 	CvPlayer &kCityPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247624[ebp], ecx
	mov	edx, DWORD PTR $T247624[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityPlayer$[ebp], edx

; 4776 : 	PolicyBranchTypes eMyIdeology = kCityPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eMyIdeology$[ebp], eax

; 4777 : 	ReligionTypes ePlayerReligion = kCityPlayer.GetReligions()->GetReligionInMostCities();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?GetReligionInMostCities@CvPlayerReligions@@QBE?AW4ReligionTypes@@XZ ; CvPlayerReligions::GetReligionInMostCities
	mov	DWORD PTR _ePlayerReligion$[ebp], eax

; 4778 : 
; 4779 : 	// Great Works
; 4780 : 	int iBonusTourismPerGreatWork = GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_EXTRA_TOURISM_PER_GREAT_WORK); // NQMP GJS - Cultural Exchange

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247636[ebp], edx
	mov	eax, DWORD PTR $T247636[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247640[ebp], eax
	push	63					; 0000003fH
	mov	ecx, DWORD PTR $T247640[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iBonusTourismPerGreatWork$[ebp], eax

; 4781 : #ifdef AUI_WARNING_FIXES
; 4782 : 	int iGWTourism = (int)GetNumGreatWorks() * (GC.getBASE_TOURISM_PER_GREAT_WORK() + iBonusTourismPerGreatWork); // NQMP GJS - Cultural Exchange
; 4783 : 	iGWTourism += (m_pCity->GetCityBuildings()->GetGreatWorksTourismModifier() * iGWTourism / 100);
; 4784 : 	szRtnValue = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_GREAT_WORKS", iGWTourism, (int)m_pCity->GetCityCulture()->GetNumGreatWorks());
; 4785 : #else
; 4786 : 	int iGWTourism = GetNumGreatWorks() * (GC.getBASE_TOURISM_PER_GREAT_WORK() + iBonusTourismPerGreatWork); // NQMP GJS - Cultural Exchange

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8212
	mov	DWORD PTR $T247644[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	mov	edx, DWORD PTR $T247644[ebp]
	add	edx, DWORD PTR _iBonusTourismPerGreatWork$[ebp]
	imul	eax, edx
	mov	DWORD PTR _iGWTourism$[ebp], eax

; 4787 : 	iGWTourism += (m_pCity->GetCityBuildings()->GetGreatWorksTourismModifier() * iGWTourism / 100);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetGreatWorksTourismModifier@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetGreatWorksTourismModifier
	imul	eax, DWORD PTR _iGWTourism$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iGWTourism$[ebp]
	mov	DWORD PTR _iGWTourism$[ebp], eax

; 4788 : 	szRtnValue = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_GREAT_WORKS", iGWTourism, m_pCity->GetCityCulture()->GetNumGreatWorks());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	mov	DWORD PTR $T247483[ebp], eax
	lea	eax, DWORD PTR $T247483[ebp]
	push	eax
	lea	ecx, DWORD PTR _iGWTourism$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@NICFNOMH@TXT_KEY_CO_CITY_TOURISM_GREAT_WO@
	lea	edx, DWORD PTR $T247484[ebp]
	push	edx
	call	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1890[ebp], eax
	mov	eax, DWORD PTR tv1890[ebp]
	mov	DWORD PTR $T247648[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T247648[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247484[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4789 : #endif
; 4790 : 
; 4791 : 	// NQMP GJS - Flourishing of the Arts BEGIN
; 4792 : 	int iBonusTourismPerWonder = GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_PER_WONDER);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247661[ebp], ecx
	mov	edx, DWORD PTR $T247661[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247665[ebp], edx
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T247665[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iBonusTourismPerWonder$[ebp], eax

; 4793 : 	int iNumWorldWonders = m_pCity->getNumWorldWonders();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getNumWorldWonders@CvCity@@QBEHXZ	; CvCity::getNumWorldWonders
	mov	DWORD PTR _iNumWorldWonders$[ebp], eax

; 4794 : 	int iTotalBonusTourismForWonders = iNumWorldWonders * iBonusTourismPerWonder; 

	mov	ecx, DWORD PTR _iNumWorldWonders$[ebp]
	imul	ecx, DWORD PTR _iBonusTourismPerWonder$[ebp]
	mov	DWORD PTR _iTotalBonusTourismForWonders$[ebp], ecx

; 4795 : 	iTotalBonusTourismForWonders += (m_pCity->GetCityBuildings()->GetGreatWorksTourismModifier() * iTotalBonusTourismForWonders / 100);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetGreatWorksTourismModifier@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetGreatWorksTourismModifier
	imul	eax, DWORD PTR _iTotalBonusTourismForWonders$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iTotalBonusTourismForWonders$[ebp]
	mov	DWORD PTR _iTotalBonusTourismForWonders$[ebp], eax

; 4796 : 	szRtnValue = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_GREAT_WORKS", iGWTourism, (int)m_pCity->GetCityCulture()->GetNumGreatWorks(), iTotalBonusTourismForWonders, iNumWorldWonders); // edited

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityCulture@CvCity@@QBEPAVCvCityCulture@@XZ ; CvCity::GetCityCulture
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityCulture@@QBEHXZ	; CvCityCulture::GetNumGreatWorks
	mov	DWORD PTR $T247485[ebp], eax
	lea	eax, DWORD PTR _iNumWorldWonders$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iTotalBonusTourismForWonders$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T247485[ebp]
	push	edx
	lea	eax, DWORD PTR _iGWTourism$[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@NICFNOMH@TXT_KEY_CO_CITY_TOURISM_GREAT_WO@
	lea	ecx, DWORD PTR $T247486[ebp]
	push	ecx
	call	??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z ; GetLocalizedText<int,int,int,int>
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv1561[ebp], eax
	mov	edx, DWORD PTR tv1561[ebp]
	mov	DWORD PTR $T247669[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR $T247669[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247486[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4797 : 	// NQMP GJS - Flourishing of the Arts END
; 4798 : 
; 4799 : 	int iThemingBonuses = m_pCity->GetCityBuildings()->GetThemingBonuses();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetThemingBonuses@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetThemingBonuses
	mov	DWORD PTR _iThemingBonuses$[ebp], eax

; 4800 : 	if (iThemingBonuses > 0)

	cmp	DWORD PTR _iThemingBonuses$[ebp], 0
	jle	SHORT $LN77@GetTourism@6

; 4801 : 	{
; 4802 : 		szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4803 : 		szRtnValue += GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_THEMING_BONUSES", iThemingBonuses);

	mov	edx, DWORD PTR _iThemingBonuses$[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@PFNPAEPM@TXT_KEY_CO_CITY_TOURISM_THEMING_@
	lea	eax, DWORD PTR $T247487[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1548[ebp], eax
	mov	ecx, DWORD PTR tv1548[ebp]
	mov	DWORD PTR tv1396[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR tv1396[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247487[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN77@GetTourism@6:

; 4804 : 	}
; 4805 : 
; 4806 : 	// Landmarks, Wonders, Natural Wonders, Improvements
; 4807 : 	int iTileTourism = 0;

	mov	DWORD PTR _iTileTourism$[ebp], 0

; 4808 : 	int iPercent = m_pCity->GetCityBuildings()->GetLandmarksTourismPercent();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetLandmarksTourismPercent@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetLandmarksTourismPercent
	mov	DWORD PTR _iPercent$[ebp], eax

; 4809 : 	if (iPercent > 0)

	cmp	DWORD PTR _iPercent$[ebp], 0
	jle	$LN197@GetTourism@6

; 4810 : 	{
; 4811 : 		int iFromWonders = GetCultureFromWonders();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromWonders@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromWonders
	mov	DWORD PTR _iFromWonders$226593[ebp], eax

; 4812 : 		int iFromNaturalWonders = GetCultureFromNaturalWonders();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromNaturalWonders
	mov	DWORD PTR _iFromNaturalWonders$226594[ebp], eax

; 4813 : 		int iFromImprovements = GetCultureFromImprovements();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCultureFromImprovements@CvCityCulture@@QBEHXZ ; CvCityCulture::GetCultureFromImprovements
	mov	DWORD PTR _iFromImprovements$226595[ebp], eax

; 4814 : 		iTileTourism = ((iFromWonders + iFromNaturalWonders + iFromImprovements) * iPercent / 100);

	mov	eax, DWORD PTR _iFromWonders$226593[ebp]
	add	eax, DWORD PTR _iFromNaturalWonders$226594[ebp]
	add	eax, DWORD PTR _iFromImprovements$226595[ebp]
	imul	eax, DWORD PTR _iPercent$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTileTourism$[ebp], eax

; 4815 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN75@GetTourism@6

; 4816 : 		{
; 4817 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN75@GetTourism@6:

; 4818 : 		}
; 4819 : 		szRtnValue += GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_TILES", iTileTourism, iPercent);

	lea	edx, DWORD PTR _iPercent$[ebp]
	push	edx
	lea	eax, DWORD PTR _iTileTourism$[ebp]
	push	eax
	push	OFFSET ??_C@_0BO@HIFMPCNI@TXT_KEY_CO_CITY_TOURISM_TILES?$AA@
	lea	ecx, DWORD PTR $T247488[ebp]
	push	ecx
	call	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1535[ebp], eax
	mov	edx, DWORD PTR tv1535[ebp]
	mov	DWORD PTR tv1398[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv1398[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247488[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4820 : 	}
; 4821 : 
; 4822 : #ifdef NQ_TOURISM_PER_CITY
; 4823 : 	int iFromTourismPerCity = GET_PLAYER(m_pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_PER_CITY);

$LN197@GetTourism@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247690[ebp], eax
	mov	ecx, DWORD PTR $T247690[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247694[ebp], ecx
	push	65					; 00000041H
	mov	ecx, DWORD PTR $T247694[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iFromTourismPerCity$[ebp], eax

; 4824 : 	if (iFromTourismPerCity > 0)

	cmp	DWORD PTR _iFromTourismPerCity$[ebp], 0
	jle	SHORT $LN74@GetTourism@6

; 4825 : 	{
; 4826 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN73@GetTourism@6

; 4827 : 		{
; 4828 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN73@GetTourism@6:

; 4829 : 		}
; 4830 : 		szRtnValue += GetLocalizedText("TXT_KEY_CO_TOURISM_PER_CITY", iFromTourismPerCity);

	mov	edx, DWORD PTR _iFromTourismPerCity$[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@OLNPIDLP@TXT_KEY_CO_TOURISM_PER_CITY?$AA@
	lea	eax, DWORD PTR $T247489[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1522[ebp], eax
	mov	ecx, DWORD PTR tv1522[ebp]
	mov	DWORD PTR tv1400[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR tv1400[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247489[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN74@GetTourism@6:

; 4831 : 	}
; 4832 : #endif
; 4833 : 
; 4834 : 	// Beliefs
; 4835 : 	int iSacredSitesTourism = 0;

	mov	DWORD PTR _iSacredSitesTourism$[ebp], 0

; 4836 : 	int iReligiousArtTourism = 0;

	mov	DWORD PTR _iReligiousArtTourism$[ebp], 0

; 4837 : 	ReligionTypes eMajority = m_pCity->GetCityReligions()->GetReligiousMajority();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ ; CvCity::GetCityReligions
	mov	ecx, eax
	call	?GetReligiousMajority@CvCityReligions@@QAE?AW4ReligionTypes@@XZ ; CvCityReligions::GetReligiousMajority
	mov	DWORD PTR _eMajority$[ebp], eax

; 4838 : 	const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(eMajority, m_pCity->getOwner());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247707[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247711[ebp], ecx
	mov	edx, DWORD PTR $T247707[ebp]
	push	edx
	mov	eax, DWORD PTR _eMajority$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247711[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	ecx, eax
	call	?GetReligion@CvGameReligions@@QBEPBVCvReligion@@W4ReligionTypes@@W4PlayerTypes@@@Z ; CvGameReligions::GetReligion
	mov	DWORD PTR _pReligion$[ebp], eax

; 4839 : 	if(pReligion)

	cmp	DWORD PTR _pReligion$[ebp], 0
	je	$LN72@GetTourism@6

; 4840 : 	{
; 4841 : 		int iFaithBuildingTourism = pReligion->m_Beliefs.GetFaithBuildingTourism();

	mov	ecx, DWORD PTR _pReligion$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _iFaithBuildingTourism$226609[ebp], edx

; 4842 : 		if (iFaithBuildingTourism > 0)

	cmp	DWORD PTR _iFaithBuildingTourism$226609[ebp], 0
	jle	SHORT $LN71@GetTourism@6

; 4843 : 		{
; 4844 : 			iSacredSitesTourism = m_pCity->GetCityBuildings()->GetNumBuildingsFromFaith() * iFaithBuildingTourism;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuildingsFromFaith@CvCityBuildings@@QBEHXZ ; CvCityBuildings::GetNumBuildingsFromFaith
	imul	eax, DWORD PTR _iFaithBuildingTourism$226609[ebp]
	mov	DWORD PTR _iSacredSitesTourism$[ebp], eax
$LN71@GetTourism@6:

; 4845 : 		}
; 4846 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN70@GetTourism@6

; 4847 : 		{
; 4848 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN70@GetTourism@6:

; 4849 : 		}
; 4850 : 		szRtnValue += GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_FAITH_BUILDINGS", iSacredSitesTourism);

	mov	ecx, DWORD PTR _iSacredSitesTourism$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@LFGJCHMN@TXT_KEY_CO_CITY_TOURISM_FAITH_BU@
	lea	edx, DWORD PTR $T247490[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1509[ebp], eax
	mov	eax, DWORD PTR tv1509[ebp]
	mov	DWORD PTR tv1402[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR tv1402[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247490[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4851 : 
; 4852 : #ifdef AUI_WARNING_FIXES
; 4853 : 		for (uint jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)
; 4854 : #else
; 4855 : 		for(int jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)

	mov	DWORD PTR _jJ$226614[ebp], 0
	jmp	SHORT $LN69@GetTourism@6
$LN68@GetTourism@6:
	mov	edx, DWORD PTR _jJ$226614[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$226614[ebp], edx
$LN69@GetTourism@6:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _jJ$226614[ebp], eax
	jge	$LN67@GetTourism@6

; 4856 : #endif
; 4857 : 		{
; 4858 : 			BuildingClassTypes eBuildingClass = (BuildingClassTypes)jJ;

	mov	eax, DWORD PTR _jJ$226614[ebp]
	mov	DWORD PTR _eBuildingClass$226618[ebp], eax

; 4859 : 
; 4860 : 			CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$226618[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$226620[ebp], eax

; 4861 : 			if(!pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$226620[ebp], 0
	jne	SHORT $LN217@GetTourism@6

; 4862 : 			{
; 4863 : 				continue;

	jmp	SHORT $LN68@GetTourism@6

; 4864 : 			}
; 4865 : 
; 4866 : 			CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(m_pCity->getOwner()).getCivilizationInfo();

$LN217@GetTourism@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247727[ebp], ecx
	mov	edx, DWORD PTR $T247727[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247731[ebp], edx
	mov	ecx, DWORD PTR $T247731[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226622[ebp], eax

; 4867 : 			BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$226618[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$226622[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226623[ebp], eax

; 4868 : 
; 4869 : 			if(eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226623[ebp], -1
	je	SHORT $LN65@GetTourism@6

; 4870 : 			{
; 4871 : 				if(m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	ecx, DWORD PTR _eBuilding$226623[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN65@GetTourism@6

; 4872 : 				{
; 4873 : 					iReligiousArtTourism += pReligion->m_Beliefs.GetBuildingClassTourism(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$226618[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReligion$[ebp]
	add	ecx, 152				; 00000098H
	call	?GetBuildingClassTourism@CvReligionBeliefs@@QBEHW4BuildingClassTypes@@@Z ; CvReligionBeliefs::GetBuildingClassTourism
	add	eax, DWORD PTR _iReligiousArtTourism$[ebp]
	mov	DWORD PTR _iReligiousArtTourism$[ebp], eax
$LN65@GetTourism@6:

; 4874 : 				}
; 4875 : 			}
; 4876 : 		}

	jmp	$LN68@GetTourism@6
$LN67@GetTourism@6:

; 4877 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN63@GetTourism@6

; 4878 : 		{
; 4879 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN63@GetTourism@6:

; 4880 : 		}
; 4881 : 		szRtnValue += GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_RELIGIOUS_ART", iReligiousArtTourism);

	mov	ecx, DWORD PTR _iReligiousArtTourism$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@IDKPLIFL@TXT_KEY_CO_CITY_TOURISM_RELIGIOU@
	lea	edx, DWORD PTR $T247491[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1496[ebp], eax
	mov	eax, DWORD PTR tv1496[ebp]
	mov	DWORD PTR tv1404[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv1404[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247491[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN72@GetTourism@6:

; 4882 : 	}
; 4883 : 
; 4884 : 	// Tech enhanced Tourism
; 4885 : #ifdef AUI_WARNING_FIXES
; 4886 : 	for (uint jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)
; 4887 : #else
; 4888 : 	for(int jJ = 0; jJ < GC.getNumBuildingClassInfos(); jJ++)

	mov	DWORD PTR _jJ$226630[ebp], 0
	jmp	SHORT $LN62@GetTourism@6
$LN61@GetTourism@6:
	mov	edx, DWORD PTR _jJ$226630[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$226630[ebp], edx
$LN62@GetTourism@6:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _jJ$226630[ebp], eax
	jge	$LN60@GetTourism@6

; 4889 : #endif
; 4890 : 	{
; 4891 : 		BuildingClassTypes eBuildingClass = (BuildingClassTypes)jJ;

	mov	eax, DWORD PTR _jJ$226630[ebp]
	mov	DWORD PTR _eBuildingClass$226634[ebp], eax

; 4892 : 
; 4893 : 		CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$226634[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$226636[ebp], eax

; 4894 : 		if(!pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$226636[ebp], 0
	jne	SHORT $LN226@GetTourism@6

; 4895 : 		{
; 4896 : 			continue;

	jmp	SHORT $LN61@GetTourism@6

; 4897 : 		}
; 4898 : 
; 4899 : 		CvCivilizationInfo& playerCivilizationInfo = GET_PLAYER(m_pCity->getOwner()).getCivilizationInfo();

$LN226@GetTourism@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T247744[ebp], ecx
	mov	edx, DWORD PTR $T247744[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247748[ebp], edx
	mov	ecx, DWORD PTR $T247748[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226638[ebp], eax

; 4900 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$226634[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerCivilizationInfo$226638[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226639[ebp], eax

; 4901 : 
; 4902 : 		if(eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226639[ebp], -1
	je	$LN58@GetTourism@6

; 4903 : 		{
; 4904 : 			if(m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	ecx, DWORD PTR _eBuilding$226639[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN58@GetTourism@6

; 4905 : 			{
; 4906 : 				int iTechEnhancedTourism = GC.getBuildingInfo(eBuilding)->GetTechEnhancedTourism();

	mov	eax, DWORD PTR _eBuilding$226639[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	ecx, eax
	call	?GetTechEnhancedTourism@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetTechEnhancedTourism
	mov	DWORD PTR _iTechEnhancedTourism$226643[ebp], eax

; 4907 : 				if (iTechEnhancedTourism > 0 && GET_TEAM(m_pCity->getTeam()).GetTeamTechs()->HasTech((TechTypes)GC.getBuildingInfo(eBuilding)->GetEnhancedYieldTech()))

	cmp	DWORD PTR _iTechEnhancedTourism$226643[ebp], 0
	jle	$LN58@GetTourism@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	DWORD PTR $T247752[ebp], eax
	mov	edx, DWORD PTR $T247752[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T247753[ebp], edx
	mov	eax, DWORD PTR _eBuilding$226639[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	ecx, eax
	call	?GetEnhancedYieldTech@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetEnhancedYieldTech
	push	eax
	mov	ecx, DWORD PTR $T247753[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN58@GetTourism@6

; 4908 : 				{
; 4909 : 					if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN55@GetTourism@6

; 4910 : 					{
; 4911 : 						szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN55@GetTourism@6:

; 4912 : 					}
; 4913 : 					szRtnValue += GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_TECH_ENHANCED", iTechEnhancedTourism);

	mov	edx, DWORD PTR _iTechEnhancedTourism$226643[ebp]
	push	edx
	push	OFFSET ??_C@_0CG@DKKFAOEJ@TXT_KEY_CO_CITY_TOURISM_TECH_ENH@
	lea	eax, DWORD PTR $T247492[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1483[ebp], eax
	mov	ecx, DWORD PTR tv1483[ebp]
	mov	DWORD PTR tv1406[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	edx, DWORD PTR tv1406[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247492[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN58@GetTourism@6:

; 4914 : 				}
; 4915 : 			}
; 4916 : 		}
; 4917 : 	}

	jmp	$LN61@GetTourism@6
$LN60@GetTourism@6:

; 4918 : 
; 4919 : 	int iBuildingMod = 0;

	mov	DWORD PTR _iBuildingMod$[ebp], 0

; 4920 : #ifdef AUI_WARNING_FIXES
; 4921 : 	for (uint iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)
; 4922 : #else
; 4923 : 	for(int iBuildingClassLoop = 0; iBuildingClassLoop < GC.getNumBuildingClassInfos(); iBuildingClassLoop++)

	mov	DWORD PTR _iBuildingClassLoop$226650[ebp], 0
	jmp	SHORT $LN54@GetTourism@6
$LN53@GetTourism@6:
	mov	eax, DWORD PTR _iBuildingClassLoop$226650[ebp]
	add	eax, 1
	mov	DWORD PTR _iBuildingClassLoop$226650[ebp], eax
$LN54@GetTourism@6:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iBuildingClassLoop$226650[ebp], eax
	jge	$LN52@GetTourism@6

; 4924 : #endif
; 4925 : 	{
; 4926 : 		CvCivilizationInfo& playerCivilizationInfo = kCityPlayer.getCivilizationInfo();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	DWORD PTR _playerCivilizationInfo$226654[ebp], eax

; 4927 : 		BuildingTypes eBuilding = (BuildingTypes)playerCivilizationInfo.getCivilizationBuildings((BuildingClassTypes)iBuildingClassLoop);

	mov	ecx, DWORD PTR _iBuildingClassLoop$226650[ebp]
	push	ecx
	mov	ecx, DWORD PTR _playerCivilizationInfo$226654[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226655[ebp], eax

; 4928 : 		if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$226655[ebp], -1
	je	$LN51@GetTourism@6

; 4929 : 		{
; 4930 : 			CvBuildingEntry *pkEntry = GC.getBuildingInfo(eBuilding);

	mov	edx, DWORD PTR _eBuilding$226655[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$226659[ebp], eax

; 4931 : 			if (pkEntry)

	cmp	DWORD PTR _pkEntry$226659[ebp], 0
	je	$LN51@GetTourism@6

; 4932 : 			{
; 4933 : 				iBuildingMod = kCityPlayer.GetPlayerPolicies()->GetBuildingClassTourismModifier((BuildingClassTypes)iBuildingClassLoop);

	mov	eax, DWORD PTR _iBuildingClassLoop$226650[ebp]
	push	eax
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetBuildingClassTourismModifier@CvPlayerPolicies@@QAEHW4BuildingClassTypes@@@Z ; CvPlayerPolicies::GetBuildingClassTourismModifier
	mov	DWORD PTR _iBuildingMod$[ebp], eax

; 4934 : 				if (iBuildingMod != 0 && m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	cmp	DWORD PTR _iBuildingMod$[ebp], 0
	je	$LN51@GetTourism@6
	mov	ecx, DWORD PTR _eBuilding$226655[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN51@GetTourism@6

; 4935 : 				{
; 4936 : 					if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN235@GetTourism@6

; 4937 : 					{
; 4938 : 						szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4939 : 					}
; 4940 : 					szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_BUILDING_BONUS", iBuildingMod, pkEntry->GetDescription());

$LN235@GetTourism@6:
	mov	ecx, DWORD PTR _pkEntry$226659[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T247493[ebp], eax
	lea	eax, DWORD PTR $T247493[ebp]
	push	eax
	lea	ecx, DWORD PTR _iBuildingMod$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CH@KGCCENCH@TXT_KEY_CO_CITY_TOURISM_BUILDING@
	lea	edx, DWORD PTR $T247494[ebp]
	push	edx
	call	??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z ; GetLocalizedText<int,char const *>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1472[ebp], eax
	mov	eax, DWORD PTR tv1472[ebp]
	mov	DWORD PTR $T247764[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR $T247764[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247494[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4941 : 					szRtnValue += szTemp;

	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN51@GetTourism@6:

; 4942 : 				}
; 4943 : 			}
; 4944 : 		}
; 4945 : 	}

	jmp	$LN53@GetTourism@6
$LN52@GetTourism@6:

; 4946 : 
; 4947 : 	// Get policy bonuses
; 4948 : 	int iLessHappyMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_LESS_HAPPY);

	push	29					; 0000001dH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iLessHappyMod$[ebp], eax

; 4949 : 	int iCommonFoeMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_COMMON_FOE);

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax

; 4950 : 	int iSharedIdeologyMod = kCityPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_TOURISM_MOD_SHARED_IDEOLOGY);

	push	30					; 0000001eH
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iSharedIdeologyMod$[ebp], eax

; 4951 : 
; 4952 : 	// If generating any, itemize which players we have bonuses with
; 4953 : 	if (iGWTourism > 0 || iTileTourism > 0)

	cmp	DWORD PTR _iGWTourism$[ebp], 0
	jg	SHORT $LN46@GetTourism@6
	cmp	DWORD PTR _iTileTourism$[ebp], 0
	jle	$LN47@GetTourism@6
$LN46@GetTourism@6:

; 4954 : 	{
; 4955 : 		for (int iLoopPlayer = 0; iLoopPlayer < MAX_MAJOR_CIVS; iLoopPlayer++)

	mov	DWORD PTR _iLoopPlayer$226679[ebp], 0
	jmp	SHORT $LN45@GetTourism@6
$LN44@GetTourism@6:
	mov	eax, DWORD PTR _iLoopPlayer$226679[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoopPlayer$226679[ebp], eax
$LN45@GetTourism@6:
	cmp	DWORD PTR _iLoopPlayer$226679[ebp], 22	; 00000016H
	jge	$LN43@GetTourism@6

; 4956 : 		{
; 4957 : 			CvPlayer &kPlayer = GET_PLAYER((PlayerTypes)iLoopPlayer);

	mov	ecx, DWORD PTR _iLoopPlayer$226679[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$226683[ebp], ecx

; 4958 : 			PolicyBranchTypes eTheirIdeology = kPlayer.GetPlayerPolicies()->GetLateGamePolicyTree();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	mov	DWORD PTR _eTheirIdeology$226685[ebp], eax

; 4959 : 			if (kPlayer.isAlive() && !kPlayer.isMinorCiv() && iLoopPlayer != m_pCity->getOwner() && GET_TEAM(kCityPlayer.getTeam()).isHasMet(GET_PLAYER((PlayerTypes)iLoopPlayer).getTeam()))

	mov	edx, DWORD PTR _kPlayer$226683[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T247780[ebp], al
	movzx	ecx, BYTE PTR $T247780[ebp]
	test	ecx, ecx
	je	$LN42@GetTourism@6
	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	$LN42@GetTourism@6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247789[ebp], edx
	mov	eax, DWORD PTR _iLoopPlayer$226679[ebp]
	cmp	eax, DWORD PTR $T247789[ebp]
	je	$LN42@GetTourism@6
	mov	ecx, DWORD PTR _iLoopPlayer$226679[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247793[ebp], ecx
	mov	edx, DWORD PTR $T247793[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T247802[ebp], eax
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T247811[ebp], eax
	mov	eax, DWORD PTR $T247811[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T247815[ebp], eax
	mov	ecx, DWORD PTR $T247802[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T247815[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	$LN42@GetTourism@6

; 4960 : 			{
; 4961 : 				// City shares religion with this player
; 4962 : 				if (kPlayer.GetReligions()->HasReligionInMostCities(ePlayerReligion))

	mov	eax, DWORD PTR _ePlayerReligion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?GetReligions@CvPlayer@@QBEPAVCvPlayerReligions@@XZ ; CvPlayer::GetReligions
	mov	ecx, eax
	call	?HasReligionInMostCities@CvPlayerReligions@@QBE_NW4ReligionTypes@@@Z ; CvPlayerReligions::HasReligionInMostCities
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN266@GetTourism@6

; 4963 : 				{
; 4964 : 					if (sharedReligionCivs.length() > 0)

	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN40@GetTourism@6

; 4965 : 					{
; 4966 : 						sharedReligionCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN40@GetTourism@6:

; 4967 : 					}
; 4968 : 					sharedReligionCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4969 : 				}
; 4970 : 
; 4971 : 				// Open borders with this player
; 4972 : 				CvTeam &kTeam = GET_TEAM(kPlayer.getTeam());

$LN266@GetTourism@6:
	mov	edx, DWORD PTR _kPlayer$226683[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T247824[ebp], eax
	mov	ecx, DWORD PTR $T247824[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$226690[ebp], ecx

; 4973 : 				if (kTeam.IsAllowsOpenBordersToTeam(eTeam))

	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kTeam$226690[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN272@GetTourism@6

; 4974 : 				{
; 4975 : 					if (openBordersCivs.length() > 0)

	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN38@GetTourism@6

; 4976 : 					{
; 4977 : 						openBordersCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN38@GetTourism@6:

; 4978 : 					}
; 4979 : 					openBordersCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4980 : 				}
; 4981 : 
; 4982 : 				// Trade route with this player
; 4983 : 				if (GC.getGame().GetGameTrade()->IsPlayerConnectedToPlayer(m_pCity->getOwner(), (PlayerTypes)iLoopPlayer))

$LN272@GetTourism@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247836[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247840[ebp], ecx
	mov	edx, DWORD PTR _iLoopPlayer$226679[ebp]
	push	edx
	mov	eax, DWORD PTR $T247836[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247840[ebp]
	call	?GetGameTrade@CvGame@@QAEPAVCvGameTrade@@XZ ; CvGame::GetGameTrade
	mov	ecx, eax
	call	?IsPlayerConnectedToPlayer@CvGameTrade@@QAE_NW4PlayerTypes@@0@Z ; CvGameTrade::IsPlayerConnectedToPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN37@GetTourism@6

; 4984 : 				{
; 4985 : 					if (tradeRouteCivs.length() > 0)

	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN36@GetTourism@6

; 4986 : 					{
; 4987 : 						tradeRouteCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN36@GetTourism@6:

; 4988 : 					}
; 4989 : 					tradeRouteCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN37@GetTourism@6:

; 4990 : 				}
; 4991 : 
; 4992 : 				// POLICY BONUSES
; 4993 : 				if (iLessHappyMod > 0)

	cmp	DWORD PTR _iLessHappyMod$[ebp], 0
	jle	SHORT $LN35@GetTourism@6

; 4994 : 				{
; 4995 : 					if (kCityPlayer.GetExcessHappiness() > kPlayer.GetExcessHappiness())

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	mov	esi, eax
	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?GetExcessHappiness@CvPlayer@@QBEHXZ	; CvPlayer::GetExcessHappiness
	cmp	esi, eax
	jle	SHORT $LN35@GetTourism@6

; 4996 : 					{
; 4997 : 						if (lessHappyCivs.length() > 0)

	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN33@GetTourism@6

; 4998 : 						{
; 4999 : 							lessHappyCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN33@GetTourism@6:

; 5000 : 						}
; 5001 : 						lessHappyCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN35@GetTourism@6:

; 5002 : 					}
; 5003 : 				}
; 5004 : 				if (iCommonFoeMod > 0)

	cmp	DWORD PTR _iCommonFoeMod$[ebp], 0
	jle	$LN32@GetTourism@6

; 5005 : 				{
; 5006 : 					// NQMP GJS - new Cult of Personality BEGIN
; 5007 : 					int rank = 0;

	mov	DWORD PTR _rank$226700[ebp], 0

; 5008 : 					int totalEnemies = 0;

	mov	DWORD PTR _totalEnemies$226701[ebp], 0

; 5009 : 					int myStrength = kCityPlayer.GetMilitaryMight();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	mov	DWORD PTR _myStrength$226702[ebp], eax

; 5010 : 
; 5011 : 					PlayerTypes eLoopPlayer;
; 5012 : 					for (int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$226704[ebp], 0
	jmp	SHORT $LN31@GetTourism@6
$LN30@GetTourism@6:
	mov	edx, DWORD PTR _iPlayerLoop$226704[ebp]
	add	edx, 1
	mov	DWORD PTR _iPlayerLoop$226704[ebp], edx
$LN31@GetTourism@6:
	cmp	DWORD PTR _iPlayerLoop$226704[ebp], 22	; 00000016H
	jge	$LN29@GetTourism@6

; 5013 : 					{
; 5014 : 						eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	eax, DWORD PTR _iPlayerLoop$226704[ebp]
	mov	DWORD PTR _eLoopPlayer$226703[ebp], eax

; 5015 : 						if(eLoopPlayer != m_pCity->getOwner() && kCityPlayer.GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T247849[ebp], eax
	mov	ecx, DWORD PTR _eLoopPlayer$226703[ebp]
	cmp	ecx, DWORD PTR $T247849[ebp]
	je	SHORT $LN28@GetTourism@6
	push	0
	mov	edx, DWORD PTR _eLoopPlayer$226703[ebp]
	push	edx
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsPlayerValid@CvDiplomacyAI@@QAE_NW4PlayerTypes@@_N@Z ; CvDiplomacyAI::IsPlayerValid
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN28@GetTourism@6

; 5016 : 						{
; 5017 : 							totalEnemies++;

	mov	ecx, DWORD PTR _totalEnemies$226701[ebp]
	add	ecx, 1
	mov	DWORD PTR _totalEnemies$226701[ebp], ecx

; 5018 : 							if (GET_PLAYER(eLoopPlayer).GetMilitaryMight() > myStrength)

	mov	edx, DWORD PTR _eLoopPlayer$226703[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T247853[ebp], edx
	mov	ecx, DWORD PTR $T247853[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	cmp	eax, DWORD PTR _myStrength$226702[ebp]
	jle	SHORT $LN28@GetTourism@6

; 5019 : 							{
; 5020 : 								rank++;

	mov	eax, DWORD PTR _rank$226700[ebp]
	add	eax, 1
	mov	DWORD PTR _rank$226700[ebp], eax
$LN28@GetTourism@6:

; 5021 : 							}
; 5022 : 						}
; 5023 : 					}

	jmp	$LN30@GetTourism@6
$LN29@GetTourism@6:

; 5024 : 
; 5025 : 					// divide the tourism boost into chunks, so that lowest player gets 0%, highest gets 100%, and the rest are evenly distributed in between
; 5026 : 					// so for example in a 6 player game, based on the player being 6th/5th/4th/3rd/2nd/1st in military strength they get 0%/20%/40%/60%/80%/100% boost
; 5027 : 					if (totalEnemies > 0)

	cmp	DWORD PTR _totalEnemies$226701[ebp], 0
	jle	SHORT $LN32@GetTourism@6

; 5028 : 					{
; 5029 : 						iCommonFoeMod = iCommonFoeMod * (totalEnemies - rank) / totalEnemies;

	mov	ecx, DWORD PTR _totalEnemies$226701[ebp]
	sub	ecx, DWORD PTR _rank$226700[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iCommonFoeMod$[ebp]
	cdq
	idiv	DWORD PTR _totalEnemies$226701[ebp]
	mov	DWORD PTR _iCommonFoeMod$[ebp], eax
$LN32@GetTourism@6:

; 5030 : 					}
; 5031 : 
; 5032 : 					/*
; 5033 : 					// old code
; 5034 : 					PlayerTypes eLoopPlayer;
; 5035 : 					for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)
; 5036 : 					{
; 5037 : 						eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 5038 : 						if(eLoopPlayer !=(PlayerTypes) iLoopPlayer && eLoopPlayer != m_pCity->getOwner() && kCityPlayer.GetDiplomacyAI()->IsPlayerValid(eLoopPlayer))
; 5039 : 						{
; 5040 : 							// Are they at war with me too?
; 5041 : 							if (GET_TEAM(kCityPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()) && GET_TEAM(kPlayer.getTeam()).isAtWar(GET_PLAYER(eLoopPlayer).getTeam()))
; 5042 : 							{
; 5043 : 								if (commonFoeCivs.length() > 0)
; 5044 : 								{
; 5045 : 									commonFoeCivs += ", ";
; 5046 : 								}
; 5047 : 								commonFoeCivs += kPlayer.getCivilizationShortDescription();
; 5048 : 							}
; 5049 : 						}
; 5050 : 					}
; 5051 : 					*/
; 5052 : 					// NQMP GJS - new Cult of Personality END
; 5053 : 				}
; 5054 : 
; 5055 : 				// Shared ideology bonus (comes from a policy)
; 5056 : 				if (iSharedIdeologyMod > 0)

	cmp	DWORD PTR _iSharedIdeologyMod$[ebp], 0
	jle	SHORT $LN25@GetTourism@6

; 5057 : 				{
; 5058 : 					if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology == eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN25@GetTourism@6
	cmp	DWORD PTR _eTheirIdeology$226685[ebp], -1
	je	SHORT $LN25@GetTourism@6
	mov	edx, DWORD PTR _eMyIdeology$[ebp]
	cmp	edx, DWORD PTR _eTheirIdeology$226685[ebp]
	jne	SHORT $LN25@GetTourism@6

; 5059 : 					{
; 5060 : 						if (sharedIdeologyCivs.length() > 0)

	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN23@GetTourism@6

; 5061 : 						{
; 5062 : 							sharedIdeologyCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN23@GetTourism@6:

; 5063 : 						}
; 5064 : 						sharedIdeologyCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN25@GetTourism@6:

; 5065 : 					}
; 5066 : 				}
; 5067 : 
; 5068 : 				// Different ideology penalty (applies all the time)
; 5069 : 				if (eMyIdeology != NO_POLICY_BRANCH_TYPE && eTheirIdeology != NO_POLICY_BRANCH_TYPE && eMyIdeology != eTheirIdeology)

	cmp	DWORD PTR _eMyIdeology$[ebp], -1
	je	SHORT $LN42@GetTourism@6
	cmp	DWORD PTR _eTheirIdeology$226685[ebp], -1
	je	SHORT $LN42@GetTourism@6
	mov	eax, DWORD PTR _eMyIdeology$[ebp]
	cmp	eax, DWORD PTR _eTheirIdeology$226685[ebp]
	je	SHORT $LN42@GetTourism@6

; 5070 : 				{
; 5071 : 					if (differentIdeologyCivs.length() > 0)

	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN21@GetTourism@6

; 5072 : 					{
; 5073 : 						differentIdeologyCivs += ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN21@GetTourism@6:

; 5074 : 					}
; 5075 : 					differentIdeologyCivs += kPlayer.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kPlayer$226683[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN42@GetTourism@6:

; 5076 : 				}
; 5077 : 			}
; 5078 : 		}

	jmp	$LN44@GetTourism@6
$LN43@GetTourism@6:

; 5079 : 
; 5080 : 		// Build the strings
; 5081 : 		if (sharedReligionCivs.length() > 0)

	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN20@GetTourism@6

; 5082 : 		{
; 5083 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN19@GetTourism@6

; 5084 : 			{
; 5085 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN19@GetTourism@6:

; 5086 : 			}
; 5087 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_RELIGION_BONUS", kCityPlayer.GetCulture()->GetTourismModifierSharedReligion());

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierSharedReligion@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierSharedReligion
	push	eax
	push	OFFSET ??_C@_0CH@JAKIEDGO@TXT_KEY_CO_CITY_TOURISM_RELIGION@
	lea	ecx, DWORD PTR $T247495[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1459[ebp], eax
	mov	edx, DWORD PTR tv1459[ebp]
	mov	DWORD PTR $T247857[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	eax, DWORD PTR $T247857[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247495[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5088 : 			szRtnValue += szTemp + sharedReligionCivs;

	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	eax, DWORD PTR $T247496[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1453[ebp], eax
	mov	ecx, DWORD PTR tv1453[ebp]
	mov	DWORD PTR tv1412[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	edx, DWORD PTR tv1412[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247496[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN20@GetTourism@6:

; 5089 : 		}
; 5090 : 		if (openBordersCivs.length() > 0)

	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN18@GetTourism@6

; 5091 : 		{
; 5092 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN17@GetTourism@6

; 5093 : 			{
; 5094 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN17@GetTourism@6:

; 5095 : 			}
; 5096 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_OPEN_BORDERS_BONUS", kCityPlayer.GetCulture()->GetTourismModifierOpenBorders());

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierOpenBorders@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierOpenBorders
	push	eax
	push	OFFSET ??_C@_0CL@GDADGBDG@TXT_KEY_CO_CITY_TOURISM_OPEN_BOR@
	lea	eax, DWORD PTR $T247497[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1946[ebp], eax
	mov	ecx, DWORD PTR tv1946[ebp]
	mov	DWORD PTR $T247865[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	edx, DWORD PTR $T247865[ebp]
	push	edx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247497[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5097 : 			szRtnValue += szTemp + openBordersCivs;

	lea	eax, DWORD PTR _openBordersCivs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T247498[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1947[ebp], eax
	mov	eax, DWORD PTR tv1947[ebp]
	mov	DWORD PTR tv1416[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	ecx, DWORD PTR tv1416[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247498[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN18@GetTourism@6:

; 5098 : 		}
; 5099 : 		if (tradeRouteCivs.length() > 0)

	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN16@GetTourism@6

; 5100 : 		{
; 5101 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN15@GetTourism@6

; 5102 : 			{
; 5103 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN15@GetTourism@6:

; 5104 : 			}
; 5105 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_TRADE_ROUTE_BONUS", kCityPlayer.GetCulture()->GetTourismModifierTradeRoute());

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourismModifierTradeRoute@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetTourismModifierTradeRoute
	push	eax
	push	OFFSET ??_C@_0CK@IICGJDNK@TXT_KEY_CO_CITY_TOURISM_TRADE_RO@
	lea	edx, DWORD PTR $T247499[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1948[ebp], eax
	mov	eax, DWORD PTR tv1948[ebp]
	mov	DWORD PTR $T247873[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR $T247873[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247499[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5106 : 			szRtnValue += szTemp + tradeRouteCivs;

	lea	edx, DWORD PTR _tradeRouteCivs$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T247500[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1949[ebp], eax
	mov	edx, DWORD PTR tv1949[ebp]
	mov	DWORD PTR tv1420[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	eax, DWORD PTR tv1420[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247500[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@GetTourism@6:

; 5107 : 		}
; 5108 : 		if (lessHappyCivs.length() > 0)

	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN14@GetTourism@6

; 5109 : 		{
; 5110 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN13@GetTourism@6

; 5111 : 			{
; 5112 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN13@GetTourism@6:

; 5113 : 			}
; 5114 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_LESS_HAPPY_BONUS", iLessHappyMod);

	mov	ecx, DWORD PTR _iLessHappyMod$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@GFLHOCFE@TXT_KEY_CO_CITY_TOURISM_LESS_HAP@
	lea	edx, DWORD PTR $T247501[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1950[ebp], eax
	mov	eax, DWORD PTR tv1950[ebp]
	mov	DWORD PTR $T247881[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	ecx, DWORD PTR $T247881[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247501[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5115 : 			szRtnValue += szTemp + lessHappyCivs;

	lea	edx, DWORD PTR _lessHappyCivs$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T247502[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1951[ebp], eax
	mov	edx, DWORD PTR tv1951[ebp]
	mov	DWORD PTR tv1424[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR tv1424[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247502[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN14@GetTourism@6:

; 5116 : 		}
; 5117 : 		if (commonFoeCivs.length() > 0)

	lea	ecx, DWORD PTR _commonFoeCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN12@GetTourism@6

; 5118 : 		{
; 5119 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN11@GetTourism@6

; 5120 : 			{
; 5121 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN11@GetTourism@6:

; 5122 : 			}
; 5123 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_COMMON_FOE_BONUS", iCommonFoeMod);

	mov	ecx, DWORD PTR _iCommonFoeMod$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CJ@IGNJDBOH@TXT_KEY_CO_CITY_TOURISM_COMMON_F@
	lea	edx, DWORD PTR $T247503[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1952[ebp], eax
	mov	eax, DWORD PTR tv1952[ebp]
	mov	DWORD PTR $T247889[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	ecx, DWORD PTR $T247889[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247503[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5124 : 			szRtnValue += szTemp /*+ commonFoeCivs*/; // NQMP GJS - new Cult of Personality - commented out this bit

	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN12@GetTourism@6:

; 5125 : 		}
; 5126 : 		if (sharedIdeologyCivs.length() > 0)

	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN10@GetTourism@6

; 5127 : 		{
; 5128 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN9@GetTourism@6

; 5129 : 			{
; 5130 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN9@GetTourism@6:

; 5131 : 			}
; 5132 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_SHARED_IDEOLOGY_BONUS", iSharedIdeologyMod);

	mov	eax, DWORD PTR _iSharedIdeologyMod$[ebp]
	push	eax
	push	OFFSET ??_C@_0CO@DPNLKNEO@TXT_KEY_CO_CITY_TOURISM_SHARED_I@
	lea	ecx, DWORD PTR $T247504[ebp]
	push	ecx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1953[ebp], eax
	mov	edx, DWORD PTR tv1953[ebp]
	mov	DWORD PTR $T247897[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	eax, DWORD PTR $T247897[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247504[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5133 : 			szRtnValue += szTemp + sharedIdeologyCivs;

	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	eax, DWORD PTR $T247505[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1954[ebp], eax
	mov	ecx, DWORD PTR tv1954[ebp]
	mov	DWORD PTR tv1430[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	edx, DWORD PTR tv1430[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247505[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN10@GetTourism@6:

; 5134 : 		}
; 5135 : 		if (differentIdeologyCivs.length() > 0)

	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	$LN47@GetTourism@6

; 5136 : 		{
; 5137 : 			if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN7@GetTourism@6

; 5138 : 			{
; 5139 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN7@GetTourism@6:

; 5140 : 			}
; 5141 : 			szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_DIFFERENT_IDEOLOGY_PENALTY", GC.getTOURISM_MODIFIER_DIFFERENT_IDEOLOGIES());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8228
	mov	DWORD PTR $T247905[ebp], eax
	mov	ecx, DWORD PTR $T247905[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@KFIJANLH@TXT_KEY_CO_CITY_TOURISM_DIFFEREN@
	lea	edx, DWORD PTR $T247506[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1955[ebp], eax
	mov	eax, DWORD PTR tv1955[ebp]
	mov	DWORD PTR $T247909[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	ecx, DWORD PTR $T247909[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247506[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5142 : 			szRtnValue += szTemp + differentIdeologyCivs;

	lea	edx, DWORD PTR _differentIdeologyCivs$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T247507[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1956[ebp], eax
	mov	edx, DWORD PTR tv1956[ebp]
	mov	DWORD PTR tv1434[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	mov	eax, DWORD PTR tv1434[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247507[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN47@GetTourism@6:

; 5143 : 		}
; 5144 : 	}
; 5145 : 
; 5146 : 	int iTechSpreadModifier = kCityPlayer.GetInfluenceSpreadModifier();

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetInfluenceSpreadModifier@CvPlayer@@QBEHXZ ; CvPlayer::GetInfluenceSpreadModifier
	mov	DWORD PTR _iTechSpreadModifier$[ebp], eax

; 5147 : 	if (iTechSpreadModifier > 0)

	cmp	DWORD PTR _iTechSpreadModifier$[ebp], 0
	jle	$LN326@GetTourism@6

; 5148 : 	{
; 5149 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN5@GetTourism@6

; 5150 : 		{
; 5151 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN5@GetTourism@6:

; 5152 : 		}
; 5153 : 		szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_TECH_BONUS", iTechSpreadModifier);

	mov	ecx, DWORD PTR _iTechSpreadModifier$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@JGJDDHFJ@TXT_KEY_CO_CITY_TOURISM_TECH_BON@
	lea	edx, DWORD PTR $T247508[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1957[ebp], eax
	mov	eax, DWORD PTR tv1957[ebp]
	mov	DWORD PTR $T247917[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	mov	ecx, DWORD PTR $T247917[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247508[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5154 : 		szRtnValue += szTemp;

	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 5155 : 	}
; 5156 : 	int iLeagueCityModifier = GC.getGame().GetGameLeagues()->GetCityTourismModifier(m_pCity->getOwner(), m_pCity);

$LN326@GetTourism@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T247930[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T247934[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR $T247930[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247934[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetCityTourismModifier@CvGameLeagues@@QAEHW4PlayerTypes@@PBVCvCity@@@Z ; CvGameLeagues::GetCityTourismModifier
	mov	DWORD PTR _iLeagueCityModifier$[ebp], eax

; 5157 : 	if (iLeagueCityModifier > 0)

	cmp	DWORD PTR _iLeagueCityModifier$[ebp], 0
	jle	$LN4@GetTourism@6

; 5158 : 	{
; 5159 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN3@GetTourism@6

; 5160 : 		{
; 5161 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN3@GetTourism@6:

; 5162 : 		}
; 5163 : 		szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_LEAGUES_BONUS", iLeagueCityModifier);

	mov	ecx, DWORD PTR _iLeagueCityModifier$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@BCFDPEBM@TXT_KEY_CO_CITY_TOURISM_LEAGUES_@
	lea	edx, DWORD PTR $T247509[ebp]
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1958[ebp], eax
	mov	eax, DWORD PTR tv1958[ebp]
	mov	DWORD PTR $T247938[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	mov	ecx, DWORD PTR $T247938[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247509[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5164 : 		szRtnValue += szTemp;

	lea	edx, DWORD PTR _szTemp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN4@GetTourism@6:

; 5165 : 	}
; 5166 : 
; 5167 : 	if (kCityPlayer.isGoldenAge() && kCityPlayer.GetPlayerTraits()->GetGoldenAgeTourismModifier())

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?isGoldenAge@CvPlayer@@QBE_NXZ		; CvPlayer::isGoldenAge
	movzx	eax, al
	test	eax, eax
	je	$LN2@GetTourism@6
	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T247946[ebp], eax
	mov	ecx, DWORD PTR $T247946[ebp]
	mov	edx, DWORD PTR [ecx+184]
	mov	DWORD PTR $T247947[ebp], edx
	cmp	DWORD PTR $T247947[ebp], 0
	je	$LN2@GetTourism@6

; 5168 : 	{
; 5169 : 		if (szRtnValue.length() > 0)

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	test	eax, eax
	jbe	SHORT $LN1@GetTourism@6

; 5170 : 		{
; 5171 : 			szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@GetTourism@6:

; 5172 : 		}
; 5173 : 		szTemp = GetLocalizedText("TXT_KEY_CO_CITY_TOURISM_CARNIVAL_BONUS", kCityPlayer.GetPlayerTraits()->GetGoldenAgeTourismModifier());

	mov	ecx, DWORD PTR _kCityPlayer$[ebp]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T247951[ebp], eax
	mov	eax, DWORD PTR $T247951[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR $T247952[ebp], ecx
	mov	edx, DWORD PTR $T247952[ebp]
	push	edx
	push	OFFSET ??_C@_0CH@EANAOGLL@TXT_KEY_CO_CITY_TOURISM_CARNIVAL@
	lea	eax, DWORD PTR $T247510[ebp]
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv1959[ebp], eax
	mov	ecx, DWORD PTR tv1959[ebp]
	mov	DWORD PTR $T247956[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	edx, DWORD PTR $T247956[ebp]
	push	edx
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T247510[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5174 : 		szRtnValue += szTemp;

	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN2@GetTourism@6:

; 5175 : 	}
; 5176 : 
; 5177 : 	return szRtnValue;

	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T247546[ebp]
	or	edx, 1
	mov	DWORD PTR $T247546[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _commonFoeCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _szTemp$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5178 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1:
	lea	ecx, DWORD PTR _szTemp$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2:
	lea	ecx, DWORD PTR _sharedReligionCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$3:
	lea	ecx, DWORD PTR _openBordersCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$4:
	lea	ecx, DWORD PTR _tradeRouteCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$5:
	lea	ecx, DWORD PTR _lessHappyCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$6:
	lea	ecx, DWORD PTR _commonFoeCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$7:
	lea	ecx, DWORD PTR _sharedIdeologyCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$8:
	lea	ecx, DWORD PTR _differentIdeologyCivs$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$9:
	lea	ecx, DWORD PTR $T247484[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$10:
	lea	ecx, DWORD PTR $T247486[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$11:
	lea	ecx, DWORD PTR $T247487[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$12:
	lea	ecx, DWORD PTR $T247488[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$13:
	lea	ecx, DWORD PTR $T247489[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$14:
	lea	ecx, DWORD PTR $T247490[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$15:
	lea	ecx, DWORD PTR $T247491[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$16:
	lea	ecx, DWORD PTR $T247492[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$17:
	lea	ecx, DWORD PTR $T247494[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$18:
	lea	ecx, DWORD PTR $T247495[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$19:
	lea	ecx, DWORD PTR $T247496[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$20:
	lea	ecx, DWORD PTR $T247497[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$21:
	lea	ecx, DWORD PTR $T247498[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$22:
	lea	ecx, DWORD PTR $T247499[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$23:
	lea	ecx, DWORD PTR $T247500[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$24:
	lea	ecx, DWORD PTR $T247501[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$25:
	lea	ecx, DWORD PTR $T247502[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$26:
	lea	ecx, DWORD PTR $T247503[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$27:
	lea	ecx, DWORD PTR $T247504[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$28:
	lea	ecx, DWORD PTR $T247505[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$29:
	lea	ecx, DWORD PTR $T247506[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$30:
	lea	ecx, DWORD PTR $T247507[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$31:
	lea	ecx, DWORD PTR $T247508[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$32:
	lea	ecx, DWORD PTR $T247509[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$33:
	lea	ecx, DWORD PTR $T247510[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ$34:
	mov	eax, DWORD PTR $T247546[ebp]
	and	eax, 1
	je	$LN115@GetTourism@6
	and	DWORD PTR $T247546[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN115@GetTourism@6:
	ret	0
__ehhandler$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1556]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTourismTooltip@CvCityCulture@@QAE?AVCvString@@XZ ENDP ; CvCityCulture::GetTourismTooltip
PUBLIC	??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z ; GetLocalizedText<int,int,int>
PUBLIC	??_C@_0BJ@FGMNECOM@TXT_KEY_CO_GREAT_WORK_TT?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ ; CvCityCulture::GetFilledSlotsTooltip
EXTRN	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z:PROC ; CvCityBuildings::GetNumGreatWorks
;	COMDAT ??_C@_0BJ@FGMNECOM@TXT_KEY_CO_GREAT_WORK_TT?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BJ@FGMNECOM@TXT_KEY_CO_GREAT_WORK_TT?$AA@ DB 'TXT_KEY_CO_GREAT_WOR'
	DB	'K_TT', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1
__ehfuncinfo$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
_TEXT	SEGMENT
tv171 = -104						; size = 4
tv147 = -100						; size = 4
_this$ = -96						; size = 4
$T248027 = -92						; size = 4
$T248014 = -88						; size = 4
$T248010 = -84						; size = 28
_iGWWriting$ = -56					; size = 4
_iGWArt$ = -52						; size = 4
_szRtnValue$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_iGWMusic$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ PROC ; CvCityCulture::GetFilledSlotsTooltip, COMDAT
; _this$ = ecx

; 5182 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T248014[ebp], 0

; 5183 : 	CvString szRtnValue = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN9@GetFilledS
	mov	DWORD PTR tv147[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN10@GetFilledS
$LN9@GetFilledS:
	mov	DWORD PTR tv147[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN10@GetFilledS:
	mov	ecx, DWORD PTR tv147[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5184 : #ifdef AUI_WARNING_FIXES
; 5185 : 	const CvCityBuildings* pCityBuildings = m_pCity->GetCityBuildings();
; 5186 : 	const int iGWWriting = pCityBuildings->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_LITERATURE());
; 5187 : 	const int iGWArt = pCityBuildings->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT());
; 5188 : 	const int iGWMusic = pCityBuildings->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_MUSIC());
; 5189 : #else
; 5190 : 	const int iGWWriting = m_pCity->GetCityBuildings()->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_LITERATURE());

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iGWWriting$[ebp], eax

; 5191 : 	const int iGWArt = m_pCity->GetCityBuildings()->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT());

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iGWArt$[ebp], eax

; 5192 : 	const int iGWMusic = m_pCity->GetCityBuildings()->GetNumGreatWorks(CvTypes::getGREAT_WORK_SLOT_MUSIC());

	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iGWMusic$[ebp], eax

; 5193 : #endif
; 5194 : 	szRtnValue = GetLocalizedText("TXT_KEY_CO_GREAT_WORK_TT", iGWWriting, iGWArt, iGWMusic);

	lea	edx, DWORD PTR _iGWMusic$[ebp]
	push	edx
	lea	eax, DWORD PTR _iGWArt$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iGWWriting$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BJ@FGMNECOM@TXT_KEY_CO_GREAT_WORK_TT?$AA@
	lea	edx, DWORD PTR $T248010[ebp]
	push	edx
	call	??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z ; GetLocalizedText<int,int,int>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv171[ebp], eax
	mov	eax, DWORD PTR tv171[ebp]
	mov	DWORD PTR $T248027[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T248027[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T248010[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5195 : 
; 5196 : 	return szRtnValue;

	lea	edx, DWORD PTR _szRtnValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T248014[ebp]
	or	eax, 1
	mov	DWORD PTR $T248014[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5197 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1:
	lea	ecx, DWORD PTR $T248010[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2:
	mov	eax, DWORD PTR $T248014[ebp]
	and	eax, 1
	je	$LN6@GetFilledS
	and	DWORD PTR $T248014[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetFilledS:
	ret	0
__ehhandler$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFilledSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ ENDP ; CvCityCulture::GetFilledSlotsTooltip
PUBLIC	??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z ; GetLocalizedText<CvString,CvString,CvString>
PUBLIC	??_C@_0BP@BIHPAIPM@TXT_KEY_CO_GREAT_WORK_SLOTS_TT?$AA@ ; `string'
PUBLIC	??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ ; CvCityCulture::GetTotalSlotsTooltip
;	COMDAT ??_C@_0BP@BIHPAIPM@TXT_KEY_CO_GREAT_WORK_SLOTS_TT?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BP@BIHPAIPM@TXT_KEY_CO_GREAT_WORK_SLOTS_TT?$AA@ DB 'TXT_KEY_CO_GRE'
	DB	'AT_WORK_SLOTS_TT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@
CONST	SEGMENT
??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@ DB 'TXT_KEY_CO_GREAT'
	DB	'_WORK_SLOTS_TT_ENTRY', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$8
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
_TEXT	SEGMENT
tv224 = -320						; size = 4
tv235 = -316						; size = 4
tv246 = -312						; size = 4
tv309 = -308						; size = 4
tv213 = -304						; size = 4
_this$ = -300						; size = 4
$T248111 = -296						; size = 4
$T248103 = -292						; size = 4
$T248095 = -288						; size = 4
$T248087 = -284						; size = 4
$T248062 = -280						; size = 4
$T248052 = -276						; size = 28
$T248051 = -248						; size = 28
$T248050 = -220						; size = 28
$T248049 = -192						; size = 28
_eArtArtifactSlot$ = -164				; size = 4
_iFilledArt$ = -160					; size = 4
_iGWWriting$ = -156					; size = 4
_iFilledMusic$ = -152					; size = 4
_szTemp2$ = -148					; size = 28
_iGWArt$ = -120						; size = 4
_szRtnValue$ = -116					; size = 28
_szTemp1$ = -88						; size = 28
_szTemp3$ = -60						; size = 28
__$ArrayPad$ = -32					; size = 4
_iFilledWriting$ = -28					; size = 4
_iGWMusic$ = -24					; size = 4
_eMusicSlot$ = -20					; size = 4
_eLiteratureSlot$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ PROC ; CvCityCulture::GetTotalSlotsTooltip, COMDAT
; _this$ = ecx

; 5201 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T248062[ebp], 0

; 5202 : 	CvString szRtnValue = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN15@GetTotalSl
	mov	DWORD PTR tv213[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN16@GetTotalSl
$LN15@GetTotalSl:
	mov	DWORD PTR tv213[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN16@GetTotalSl:
	mov	ecx, DWORD PTR tv213[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5203 : 	CvString szTemp1, szTemp2, szTemp3;

	lea	ecx, DWORD PTR _szTemp1$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _szTemp2$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _szTemp3$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 5204 : 	
; 5205 : 	GreatWorkSlotType eLiteratureSlot = CvTypes::getGREAT_WORK_SLOT_LITERATURE();

	call	?getGREAT_WORK_SLOT_LITERATURE@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_LITERATURE
	mov	DWORD PTR _eLiteratureSlot$[ebp], eax

; 5206 : #ifdef AUI_WARNING_FIXES
; 5207 : 	const CvCityBuildings* pCityBuildings = m_pCity->GetCityBuildings();
; 5208 : 	int iFilledWriting = pCityBuildings->GetNumGreatWorks(eLiteratureSlot);
; 5209 : 	int iGWWriting = iFilledWriting + pCityBuildings->GetNumAvailableGreatWorkSlots(eLiteratureSlot);
; 5210 : 
; 5211 : 	GreatWorkSlotType eArtArtifactSlot = CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT();
; 5212 : 	int iFilledArt = pCityBuildings->GetNumGreatWorks(eArtArtifactSlot);
; 5213 : 	int iGWArt = iFilledArt + pCityBuildings->GetNumAvailableGreatWorkSlots(eArtArtifactSlot);
; 5214 : 
; 5215 : 	GreatWorkSlotType eMusicSlot = CvTypes::getGREAT_WORK_SLOT_MUSIC();
; 5216 : 	int iFilledMusic = pCityBuildings->GetNumGreatWorks(eMusicSlot);
; 5217 : 	int iGWMusic = iFilledMusic + pCityBuildings->GetNumAvailableGreatWorkSlots(eMusicSlot);
; 5218 : #else
; 5219 : 	int iFilledWriting = m_pCity->GetCityBuildings()->GetNumGreatWorks(eLiteratureSlot);

	mov	edx, DWORD PTR _eLiteratureSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iFilledWriting$[ebp], eax

; 5220 : 	int iGWWriting = iFilledWriting + m_pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots(eLiteratureSlot);

	mov	ecx, DWORD PTR _eLiteratureSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumAvailableGreatWorkSlots
	add	eax, DWORD PTR _iFilledWriting$[ebp]
	mov	DWORD PTR _iGWWriting$[ebp], eax

; 5221 : 
; 5222 : 	GreatWorkSlotType eArtArtifactSlot = CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT();

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	mov	DWORD PTR _eArtArtifactSlot$[ebp], eax

; 5223 : 	int iFilledArt = m_pCity->GetCityBuildings()->GetNumGreatWorks(eArtArtifactSlot);

	mov	eax, DWORD PTR _eArtArtifactSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iFilledArt$[ebp], eax

; 5224 : 	int iGWArt = iFilledArt + m_pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots(eArtArtifactSlot);

	mov	edx, DWORD PTR _eArtArtifactSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumAvailableGreatWorkSlots
	add	eax, DWORD PTR _iFilledArt$[ebp]
	mov	DWORD PTR _iGWArt$[ebp], eax

; 5225 : 
; 5226 : 	GreatWorkSlotType eMusicSlot = CvTypes::getGREAT_WORK_SLOT_MUSIC();

	call	?getGREAT_WORK_SLOT_MUSIC@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_MUSIC
	mov	DWORD PTR _eMusicSlot$[ebp], eax

; 5227 : 	int iFilledMusic = m_pCity->GetCityBuildings()->GetNumGreatWorks(eMusicSlot);

	mov	ecx, DWORD PTR _eMusicSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorks@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumGreatWorks
	mov	DWORD PTR _iFilledMusic$[ebp], eax

; 5228 : 	int iGWMusic = iFilledMusic + m_pCity->GetCityBuildings()->GetNumAvailableGreatWorkSlots(eMusicSlot);

	mov	eax, DWORD PTR _eMusicSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumAvailableGreatWorkSlots@CvCityBuildings@@QBEHW4GreatWorkSlotType@@@Z ; CvCityBuildings::GetNumAvailableGreatWorkSlots
	add	eax, DWORD PTR _iFilledMusic$[ebp]
	mov	DWORD PTR _iGWMusic$[ebp], eax

; 5229 : #endif
; 5230 : 
; 5231 : 	szTemp1 = GetLocalizedText("TXT_KEY_CO_GREAT_WORK_SLOTS_TT_ENTRY", iFilledWriting, iGWWriting);

	lea	edx, DWORD PTR _iGWWriting$[ebp]
	push	edx
	lea	eax, DWORD PTR _iFilledWriting$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@
	lea	ecx, DWORD PTR $T248049[ebp]
	push	ecx
	call	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv309[ebp], eax
	mov	edx, DWORD PTR tv309[ebp]
	mov	DWORD PTR $T248087[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR $T248087[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp1$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T248049[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5232 : 	szTemp2 = GetLocalizedText("TXT_KEY_CO_GREAT_WORK_SLOTS_TT_ENTRY", iFilledArt, iGWArt);

	lea	ecx, DWORD PTR _iGWArt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iFilledArt$[ebp]
	push	edx
	push	OFFSET ??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@
	lea	eax, DWORD PTR $T248050[ebp]
	push	eax
	call	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv246[ebp], eax
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR $T248095[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T248095[ebp]
	push	edx
	lea	ecx, DWORD PTR _szTemp2$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T248050[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5233 : 	szTemp3 = GetLocalizedText("TXT_KEY_CO_GREAT_WORK_SLOTS_TT_ENTRY", iFilledMusic, iGWMusic);

	lea	eax, DWORD PTR _iGWMusic$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iFilledMusic$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CF@FOKMLADO@TXT_KEY_CO_GREAT_WORK_SLOTS_TT_E@
	lea	edx, DWORD PTR $T248051[ebp]
	push	edx
	call	??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ; GetLocalizedText<int,int>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv235[ebp], eax
	mov	eax, DWORD PTR tv235[ebp]
	mov	DWORD PTR $T248103[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T248103[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szTemp3$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T248051[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5234 : 	szRtnValue = GetLocalizedText("TXT_KEY_CO_GREAT_WORK_SLOTS_TT", szTemp1, szTemp2, szTemp3);

	lea	edx, DWORD PTR _szTemp3$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTemp2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTemp1$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@BIHPAIPM@TXT_KEY_CO_GREAT_WORK_SLOTS_TT?$AA@
	lea	edx, DWORD PTR $T248052[ebp]
	push	edx
	call	??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z ; GetLocalizedText<CvString,CvString,CvString>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv224[ebp], eax
	mov	eax, DWORD PTR tv224[ebp]
	mov	DWORD PTR $T248111[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T248111[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T248052[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5235 : 
; 5236 : 	return szRtnValue;

	lea	edx, DWORD PTR _szRtnValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T248062[ebp]
	or	eax, 1
	mov	DWORD PTR $T248062[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _szTemp3$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _szTemp2$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _szTemp1$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5237 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$0:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$1:
	lea	ecx, DWORD PTR _szTemp1$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$2:
	lea	ecx, DWORD PTR _szTemp2$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$3:
	lea	ecx, DWORD PTR _szTemp3$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$4:
	lea	ecx, DWORD PTR $T248049[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$5:
	lea	ecx, DWORD PTR $T248050[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$6:
	lea	ecx, DWORD PTR $T248051[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$7:
	lea	ecx, DWORD PTR $T248052[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ$8:
	mov	eax, DWORD PTR $T248062[ebp]
	and	eax, 1
	je	$LN12@GetTotalSl
	and	DWORD PTR $T248062[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN12@GetTotalSl:
	ret	0
__ehhandler$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTotalSlotsTooltip@CvCityCulture@@QAE?AVCvString@@XZ ENDP ; CvCityCulture::GetTotalSlotsTooltip
PUBLIC	?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z ; CvCityCulture::IsThemingBonusPossible
; Function compile flags: /Odtp
;	COMDAT ?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T248152 = -16						; size = 4
_pkBuilding$ = -12					; size = 4
_eBuilding$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_eBuildingClass$ = 8					; size = 4
?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z PROC ; CvCityCulture::IsThemingBonusPossible, COMDAT
; _this$ = ecx

; 5241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 5242 : 	CvPlayer &kPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T248152[ebp], edx
	mov	eax, DWORD PTR $T248152[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 5243 : 	BuildingTypes eBuilding = (BuildingTypes)kPlayer.getCivilizationInfo().getCivilizationBuildings(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$[ebp], eax

; 5244 : 	CvBuildingEntry *pkBuilding = GC.GetGameBuildings()->GetEntry(eBuilding);

	mov	edx, DWORD PTR _eBuilding$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pkBuilding$[ebp], eax

; 5245 : 	if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$[ebp], 0
	je	SHORT $LN2@IsThemingB

; 5246 : 	{
; 5247 : 		if (pkBuilding->GetThemingBonusInfo(0) != NULL)

	push	0
	mov	ecx, DWORD PTR _pkBuilding$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	test	eax, eax
	je	SHORT $LN2@IsThemingB

; 5248 : 		{
; 5249 : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@IsThemingB
$LN2@IsThemingB:

; 5250 : 		}
; 5251 : 	}
; 5252 : 
; 5253 : 	return false;

	xor	al, al
$LN3@IsThemingB:

; 5254 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z ENDP ; CvCityCulture::IsThemingBonusPossible
_TEXT	ENDS
PUBLIC	?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonusIndex
; Function compile flags: /Odtp
;	COMDAT ?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z
_TEXT	SEGMENT
tv167 = -56						; size = 4
_this$ = -52						; size = 4
$T248185 = -48						; size = 4
$T248181 = -44						; size = 4
$T248177 = -40						; size = 4
$T248173 = -36						; size = 4
$T248166 = -32						; size = 4
_iBonus$226839 = -28					; size = 4
_iModifier$226840 = -24					; size = 4
_pkBuilding$226837 = -20				; size = 4
_eBuilding$226835 = -16					; size = 4
_iIndex$226833 = -12					; size = 4
_iRtnValue$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
_eBuildingClass$ = 8					; size = 4
?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z PROC ; CvCityCulture::GetThemingBonus, COMDAT
; _this$ = ecx

; 5257 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 5258 : 	CvPlayer &kPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T248166[ebp], edx
	mov	eax, DWORD PTR $T248166[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 5259 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 5260 : 
; 5261 : 	if (IsThemingBonusPossible(eBuildingClass))

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z ; CvCityCulture::IsThemingBonusPossible
	movzx	edx, al
	test	edx, edx
	je	$LN6@GetTheming

; 5262 : 	{
; 5263 : 		int iIndex = GetThemingBonusIndex(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonusIndex
	mov	DWORD PTR _iIndex$226833[ebp], eax

; 5264 : 		if (iIndex >= 0)

	cmp	DWORD PTR _iIndex$226833[ebp], 0
	jl	$LN6@GetTheming

; 5265 : 		{
; 5266 : 			BuildingTypes eBuilding = (BuildingTypes)kPlayer.getCivilizationInfo().getCivilizationBuildings(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226835[ebp], eax

; 5267 : 			CvBuildingEntry *pkBuilding = GC.GetGameBuildings()->GetEntry(eBuilding);

	mov	edx, DWORD PTR _eBuilding$226835[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pkBuilding$226837[ebp], eax

; 5268 : 			if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$226837[ebp], 0
	je	$LN6@GetTheming

; 5269 : 			{
; 5270 : 				int iBonus = pkBuilding->GetThemingBonusInfo(iIndex)->GetBonus();

	mov	eax, DWORD PTR _iIndex$226833[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkBuilding$226837[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR $T248173[ebp], eax
	mov	ecx, DWORD PTR $T248173[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iBonus$226839[ebp], edx

; 5271 : 				int iModifier = kPlayer.GetPlayerPolicies()->GetNumericModifier(POLICYMOD_THEMING_BONUS);

	push	41					; 00000029H
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iModifier$226840[ebp], eax

; 5272 : 				iRtnValue = iBonus * (100 + iModifier) / 100;

	mov	eax, DWORD PTR _iModifier$226840[ebp]
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iBonus$226839[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 5273 : 				if (m_pCity->isCapital())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	movzx	eax, al
	test	eax, eax
	je	$LN6@GetTheming

; 5274 : 				{
; 5275 : 					iModifier = kPlayer.GetPlayerTraits()->GetCapitalThemingBonusModifier();

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T248177[ebp], eax
	mov	ecx, DWORD PTR $T248177[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR _iModifier$226840[ebp], edx

; 5276 : 					if (iModifier > 0)

	cmp	DWORD PTR _iModifier$226840[ebp], 0
	jle	SHORT $LN6@GetTheming

; 5277 : 					{
; 5278 : 						iRtnValue = iRtnValue * (100 + iModifier) / 100;

	mov	eax, DWORD PTR _iModifier$226840[ebp]
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 5279 : 
; 5280 : 						if (kPlayer.isHuman() && !GC.getGame().isGameMultiPlayer() && iRtnValue >= 16)

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@GetTheming
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T248181[ebp], eax
	mov	ecx, DWORD PTR $T248181[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@GetTheming
	cmp	DWORD PTR _iRtnValue$[ebp], 16		; 00000010H
	jl	SHORT $LN6@GetTheming

; 5281 : 						{
; 5282 : 							gDLL->UnlockAchievement(ACHIEVEMENT_XP2_40);

	mov	edx, DWORD PTR $T248185[ebp]
	mov	DWORD PTR tv167[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv167[ebp], eax
	push	282					; 0000011aH
	mov	ecx, DWORD PTR tv167[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv167[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN6@GetTheming:

; 5283 : 						}
; 5284 : 					}
; 5285 : 				}
; 5286 : 			}
; 5287 : 		}
; 5288 : 	}
; 5289 : 
; 5290 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 5291 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z ENDP ; CvCityCulture::GetThemingBonus
_TEXT	ENDS
PUBLIC	??_C@_0BE@NKEHCEGG@TXT_KEY_CO_NO_THEME?$AA@	; `string'
PUBLIC	??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z ; GetLocalizedText<CvString>
PUBLIC	??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@	; `string'
PUBLIC	??0CvGreatWork@@QAE@ABV0@@Z			; CvGreatWork::CvGreatWork
PUBLIC	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
PUBLIC	??_C@_0BI@PIEGAHNC@BUILDINGCLASS_HERMITAGE?$AA@	; `string'
PUBLIC	??_C@_0BF@INPGMHCL@BUILDINGCLASS_LOUVRE?$AA@	; `string'
PUBLIC	??_C@_05CCELCPGN@?$CL?$CFd?3?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingTooltip
EXTRN	?GetThemingBonusHelp@CvBuildingEntry@@QBE?AVCvString@@XZ:PROC ; CvBuildingEntry::GetThemingBonusHelp
EXTRN	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationAdjectiveKey
;	COMDAT ??_C@_0BE@NKEHCEGG@TXT_KEY_CO_NO_THEME?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BE@NKEHCEGG@TXT_KEY_CO_NO_THEME?$AA@ DB 'TXT_KEY_CO_NO_THEME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@
CONST	SEGMENT
??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@ DB 'TXT_KEY_CO_WORLD_MUSE'
	DB	'UM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PIEGAHNC@BUILDINGCLASS_HERMITAGE?$AA@
CONST	SEGMENT
??_C@_0BI@PIEGAHNC@BUILDINGCLASS_HERMITAGE?$AA@ DB 'BUILDINGCLASS_HERMITA'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INPGMHCL@BUILDINGCLASS_LOUVRE?$AA@
CONST	SEGMENT
??_C@_0BF@INPGMHCL@BUILDINGCLASS_LOUVRE?$AA@ DB 'BUILDINGCLASS_LOUVRE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCELCPGN@?$CL?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_05CCELCPGN@?$CL?$CFd?3?5?$AA@ DB '+%d: ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z DD 019930522H
	DD	01fH
	DD	FLAT:__unwindtable$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$27
	DD	00H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$3
	DD	04H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$5
	DD	06H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$6
	DD	07H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$7
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$8
	DD	09H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$10
	DD	0bH
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$11
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$12
	DD	0dH
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$13
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$13
	DD	0fH
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$14
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$15
	DD	011H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$16
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$17
	DD	013H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$18
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$18
	DD	015H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$19
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$20
	DD	017H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$21
	DD	08H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$21
	DD	019H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$22
	DD	03H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$23
	DD	03H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$24
	DD	03H
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$25
	DD	01dH
	DD	FLAT:__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$26
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z
_TEXT	SEGMENT
tv510 = -1004						; size = 4
tv904 = -1000						; size = 4
tv903 = -996						; size = 4
tv902 = -992						; size = 4
tv901 = -988						; size = 4
tv498 = -984						; size = 4
tv899 = -980						; size = 4
tv497 = -976						; size = 4
tv491 = -972						; size = 4
tv517 = -968						; size = 4
tv490 = -964						; size = 4
tv526 = -960						; size = 4
tv539 = -956						; size = 4
tv480 = -952						; size = 4
tv592 = -948						; size = 4
tv479 = -944						; size = 4
tv606 = -940						; size = 4
tv675 = -936						; size = 4
tv736 = -932						; size = 4
tv180 = -928						; size = 4
tv217 = -924						; size = 4
tv608 = -920						; size = 4
tv590 = -916						; size = 4
tv784 = -912						; size = 4
tv872 = -908						; size = 4
tv554 = -904						; size = 4
tv541 = -900						; size = 4
tv528 = -896						; size = 4
_this$ = -892						; size = 4
$T248496 = -888						; size = 4
$T248495 = -884						; size = 4
$T248487 = -880						; size = 4
$T248483 = -876						; size = 4
$T248453 = -872						; size = 4
$T248449 = -868						; size = 4
$T248448 = -864						; size = 4
$T248444 = -860						; size = 4
$T248426 = -856						; size = 4
$T248422 = -852						; size = 4
$T248421 = -848						; size = 4
$T248417 = -844						; size = 4
$T248404 = -840						; size = 4
$T248400 = -836						; size = 4
$T248399 = -832						; size = 4
$T248387 = -828						; size = 4
$T248383 = -824						; size = 4
$T248382 = -820						; size = 4
$T248378 = -816						; size = 4
$T248365 = -812						; size = 4
$T248361 = -808						; size = 4
$T248360 = -804						; size = 4
$T248343 = -800						; size = 4
$T248339 = -796						; size = 4
$T248338 = -792						; size = 4
$T248334 = -788						; size = 4
$T248325 = -784						; size = 4
$T248321 = -780						; size = 4
$T248312 = -776						; size = 4
$T248301 = -772						; size = 4
$T248300 = -768						; size = 4
$T248296 = -764						; size = 4
$T248284 = -760						; size = 4
$T248280 = -756						; size = 4
$T248279 = -752						; size = 4
$T248248 = -748						; size = 4
$T248238 = -744						; size = 4
$T248209 = -740						; size = 28
$T248208 = -712						; size = 28
$T248207 = -684						; size = 28
$T248206 = -656						; size = 28
$T248205 = -628						; size = 28
$T248204 = -600						; size = 28
$T248203 = -572						; size = 4
$T248202 = -568						; size = 28
$T248201 = -540						; size = 28
$T248200 = -512						; size = 4
$T248199 = -508						; size = 28
$T248198 = -480						; size = 28
$T248197 = -452						; size = 28
$T248196 = -424						; size = 28
$T248195 = -396						; size = 4
$T248194 = -392						; size = 28
$T248193 = -364						; size = 28
$T248192 = -336						; size = 28
$T248191 = -308						; size = 28
$T248190 = -280						; size = 28
$T248189 = -252						; size = 28
_iGreatWork$226870 = -224				; size = 4
_szCivAdj$226873 = -220					; size = 28
_work$226871 = -192					; size = 48
_szEraString$226872 = -144				; size = 28
_iIndex$226858 = -116					; size = 4
_pkBuilding$226856 = -112				; size = 4
_eBuilding$226854 = -108				; size = 4
_szRtnValue$ = -104					; size = 28
_szThemeDescription$ = -76				; size = 28
_szBonusString$ = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_kPlayer$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_eBuildingClass$ = 12					; size = 4
?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z PROC ; CvCityCulture::GetThemingTooltip, COMDAT
; _this$ = ecx

; 5294 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 992				; 000003e0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T248238[ebp], 0

; 5295 : 	CvPlayer &kPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T248248[ebp], edx
	mov	eax, DWORD PTR $T248248[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 5296 : 	CvString szBonusString = "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN55@GetTheming@2
	mov	DWORD PTR tv528[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN56@GetTheming@2
$LN55@GetTheming@2:
	mov	DWORD PTR tv528[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN56@GetTheming@2:
	mov	edx, DWORD PTR tv528[ebp]
	push	edx
	lea	ecx, DWORD PTR _szBonusString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5297 : 	CvString szThemeDescription = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN60@GetTheming@2
	mov	DWORD PTR tv541[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN61@GetTheming@2
$LN60@GetTheming@2:
	mov	DWORD PTR tv541[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN61@GetTheming@2:
	mov	ecx, DWORD PTR tv541[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 5298 : 	CvString szRtnValue = "";

	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN65@GetTheming@2
	mov	DWORD PTR tv554[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN66@GetTheming@2
$LN65@GetTheming@2:
	mov	DWORD PTR tv554[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN66@GetTheming@2:
	mov	eax, DWORD PTR tv554[ebp]
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 5299 : 
; 5300 : 	if (IsThemingBonusPossible(eBuildingClass))

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsThemingBonusPossible@CvCityCulture@@QBE_NW4BuildingClassTypes@@@Z ; CvCityCulture::IsThemingBonusPossible
	movzx	edx, al
	test	edx, edx
	je	$LN15@GetTheming@2

; 5301 : 	{
; 5302 : 		BuildingTypes eBuilding = (BuildingTypes)kPlayer.getCivilizationInfo().getCivilizationBuildings(eBuildingClass);

	mov	eax, DWORD PTR _eBuildingClass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226854[ebp], eax

; 5303 : 		CvBuildingEntry *pkBuilding = GC.GetGameBuildings()->GetEntry(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$226854[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pkBuilding$226856[ebp], eax

; 5304 : 		if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$226856[ebp], 0
	je	$LN15@GetTheming@2

; 5305 : 		{
; 5306 : 			int iIndex = GetThemingBonusIndex(eBuildingClass);

	mov	edx, DWORD PTR _eBuildingClass$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonusIndex
	mov	DWORD PTR _iIndex$226858[ebp], eax

; 5307 : 			if (iIndex >= 0)

	cmp	DWORD PTR _iIndex$226858[ebp], 0
	jl	$LN13@GetTheming@2

; 5308 : 			{
; 5309 : 				szBonusString.Format("+%d: ", GetThemingBonus(eBuildingClass));

	mov	eax, DWORD PTR _eBuildingClass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetThemingBonus@CvCityCulture@@QBEHW4BuildingClassTypes@@@Z ; CvCityCulture::GetThemingBonus
	push	eax
	push	OFFSET ??_C@_05CCELCPGN@?$CL?$CFd?3?5?$AA@
	lea	ecx, DWORD PTR _szBonusString$[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5310 : 
; 5311 : 				if (pkBuilding->GetBuildingClassType() == (BuildingClassTypes)GC.getInfoTypeForString("BUILDINGCLASS_LOUVRE") ||
; 5312 : 					pkBuilding->GetBuildingClassType() == (BuildingClassTypes)GC.getInfoTypeForString("BUILDINGCLASS_HERMITAGE"))

	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetBuildingClassType
	mov	esi, eax
	push	0
	push	OFFSET ??_C@_0BF@INPGMHCL@BUILDINGCLASS_LOUVRE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	cmp	esi, eax
	je	SHORT $LN11@GetTheming@2
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetBuildingClassType
	mov	esi, eax
	push	0
	push	OFFSET ??_C@_0BI@PIEGAHNC@BUILDINGCLASS_HERMITAGE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	cmp	esi, eax
	jne	$LN12@GetTheming@2
$LN11@GetTheming@2:

; 5313 : 				{
; 5314 : 					szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription());

	lea	edx, DWORD PTR $T248189[ebp]
	push	edx
	mov	eax, DWORD PTR _iIndex$226858[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv872[ebp], eax
	mov	ecx, DWORD PTR tv872[ebp]
	mov	DWORD PTR $T248279[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T248279[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248280[ebp], eax
	mov	edx, DWORD PTR $T248280[ebp]
	push	edx
	lea	eax, DWORD PTR $T248190[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv784[ebp], eax
	mov	ecx, DWORD PTR tv784[ebp]
	mov	DWORD PTR $T248284[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR $T248284[ebp]
	push	edx
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T248190[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T248189[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5315 : 				}
; 5316 : 				else

	jmp	$LN10@GetTheming@2
$LN12@GetTheming@2:

; 5317 : 				{
; 5318 : 					int iGreatWork = m_pCity->GetCityBuildings()->GetBuildingGreatWork(eBuildingClass, 0);

	push	0
	mov	eax, DWORD PTR _eBuildingClass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWork$226870[ebp], eax

; 5319 : 					CvGreatWork work = GC.getGame().GetGameCulture()->m_CurrentGreatWorks[iGreatWork];

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T248296[ebp], edx
	mov	ecx, DWORD PTR $T248296[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR $T248300[ebp], eax
	mov	eax, DWORD PTR _iGreatWork$226870[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR $T248300[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR $T248301[ebp], eax
	mov	edx, DWORD PTR $T248301[ebp]
	push	edx
	lea	ecx, DWORD PTR _work$226871[ebp]
	call	??0CvGreatWork@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 5320 : 					CvString szEraString = GC.getEraInfo(work.m_eEra)->getShortDesc();

	mov	eax, DWORD PTR _work$226871[ebp+40]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	ecx, eax
	call	?getShortDesc@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getShortDesc
	mov	DWORD PTR $T248312[ebp], eax
	cmp	DWORD PTR $T248312[ebp], 0
	je	SHORT $LN87@GetTheming@2
	mov	ecx, DWORD PTR $T248312[ebp]
	mov	DWORD PTR tv590[ebp], ecx
	jmp	SHORT $LN88@GetTheming@2
$LN87@GetTheming@2:
	mov	DWORD PTR tv590[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN88@GetTheming@2:
	mov	edx, DWORD PTR tv590[ebp]
	push	edx
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 5321 : 					CvString szCivAdj = GET_PLAYER(m_pCity->getOwner()).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T248321[ebp], edx
	mov	eax, DWORD PTR $T248321[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T248325[ebp], eax
	mov	ecx, DWORD PTR $T248325[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T248334[ebp], eax
	cmp	DWORD PTR $T248334[ebp], 0
	je	SHORT $LN98@GetTheming@2
	mov	ecx, DWORD PTR $T248334[ebp]
	mov	DWORD PTR tv608[ebp], ecx
	jmp	SHORT $LN99@GetTheming@2
$LN98@GetTheming@2:
	mov	DWORD PTR tv608[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN99@GetTheming@2:
	mov	edx, DWORD PTR tv608[ebp]
	push	edx
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 5322 : 					switch (iIndex)

	mov	eax, DWORD PTR _iIndex$226858[ebp]
	mov	DWORD PTR tv217[ebp], eax
	cmp	DWORD PTR tv217[ebp], 11		; 0000000bH
	ja	$LN8@GetTheming@2
	mov	ecx, DWORD PTR tv217[ebp]
	jmp	DWORD PTR $LN218@GetTheming@2[ecx*4]
$LN7@GetTheming@2:

; 5323 : 					{
; 5324 : 					case 0:
; 5325 : 					case 2:
; 5326 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szEraString, szCivAdj);

	lea	edx, DWORD PTR $T248191[ebp]
	push	edx
	mov	eax, DWORD PTR _iIndex$226858[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR tv180[ebp]
	mov	DWORD PTR $T248338[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T248338[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248339[ebp], eax
	lea	edx, DWORD PTR _szCivAdj$226873[ebp]
	push	edx
	lea	eax, DWORD PTR _szEraString$226872[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248339[ebp]
	push	ecx
	lea	edx, DWORD PTR $T248192[ebp]
	push	edx
	call	??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ; GetLocalizedText<CvString,CvString>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv736[ebp], eax
	mov	eax, DWORD PTR tv736[ebp]
	mov	DWORD PTR $T248343[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T248343[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T248192[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248191[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5327 : 						break;

	jmp	$LN8@GetTheming@2
$LN6@GetTheming@2:

; 5328 : 					case 1:
; 5329 : 					case 3:
; 5330 : 						szCivAdj = "TXT_KEY_CO_WORLD_MUSEUM";

	mov	edx, OFFSET ??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@
	test	edx, edx
	je	SHORT $LN112@GetTheming@2
	push	OFFSET ??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN113@GetTheming@2
$LN112@GetTheming@2:
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN113@GetTheming@2:

; 5331 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szEraString, szCivAdj);

	lea	eax, DWORD PTR $T248193[ebp]
	push	eax
	mov	ecx, DWORD PTR _iIndex$226858[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv675[ebp], eax
	mov	edx, DWORD PTR tv675[ebp]
	mov	DWORD PTR $T248360[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR $T248360[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248361[ebp], eax
	lea	eax, DWORD PTR _szCivAdj$226873[ebp]
	push	eax
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248361[ebp]
	push	edx
	lea	eax, DWORD PTR $T248194[ebp]
	push	eax
	call	??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ; GetLocalizedText<CvString,CvString>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv606[ebp], eax
	mov	ecx, DWORD PTR tv606[ebp]
	mov	DWORD PTR $T248365[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR $T248365[ebp]
	push	edx
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T248194[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248193[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5332 : 						break;

	jmp	$LN8@GetTheming@2
$LN5@GetTheming@2:

; 5333 : 					case 4:
; 5334 : 					case 5:
; 5335 : 					case 7:
; 5336 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szEraString);

	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T248195[ebp], esp
	mov	DWORD PTR $T248378[ebp], eax
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T248378[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T248378[ebp]
	mov	DWORD PTR tv479[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	eax, DWORD PTR $T248196[ebp]
	push	eax
	mov	ecx, DWORD PTR _iIndex$226858[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv592[ebp], eax
	mov	edx, DWORD PTR tv592[ebp]
	mov	DWORD PTR $T248382[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR $T248382[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248383[ebp], eax
	mov	eax, DWORD PTR $T248383[ebp]
	push	eax
	lea	ecx, DWORD PTR $T248197[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	call	??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z ; GetLocalizedText<CvString>
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv480[ebp], eax
	mov	edx, DWORD PTR tv480[ebp]
	mov	DWORD PTR $T248387[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	eax, DWORD PTR $T248387[ebp]
	push	eax
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T248197[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248196[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5337 : 						break;

	jmp	$LN8@GetTheming@2
$LN4@GetTheming@2:

; 5338 : 					case 6:
; 5339 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szCivAdj, szEraString);

	lea	ecx, DWORD PTR $T248198[ebp]
	push	ecx
	mov	edx, DWORD PTR _iIndex$226858[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv539[ebp], eax
	mov	eax, DWORD PTR tv539[ebp]
	mov	DWORD PTR $T248399[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR $T248399[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248400[ebp], eax
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	push	ecx
	lea	edx, DWORD PTR _szCivAdj$226873[ebp]
	push	edx
	mov	eax, DWORD PTR $T248400[ebp]
	push	eax
	lea	ecx, DWORD PTR $T248199[ebp]
	push	ecx
	call	??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ; GetLocalizedText<CvString,CvString>
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv526[ebp], eax
	mov	edx, DWORD PTR tv526[ebp]
	mov	DWORD PTR $T248404[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	eax, DWORD PTR $T248404[ebp]
	push	eax
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T248199[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248198[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5340 : 						break;

	jmp	$LN8@GetTheming@2
$LN3@GetTheming@2:

; 5341 : 					case 8:
; 5342 : 					case 10:
; 5343 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szCivAdj);

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T248200[ebp], esp
	mov	DWORD PTR $T248417[ebp], ecx
	lea	edx, DWORD PTR _szCivAdj$226873[ebp]
	push	edx
	mov	ecx, DWORD PTR $T248417[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T248417[ebp]
	mov	DWORD PTR tv490[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T248201[ebp]
	push	ecx
	mov	edx, DWORD PTR _iIndex$226858[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv517[ebp], eax
	mov	eax, DWORD PTR tv517[ebp]
	mov	DWORD PTR $T248421[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	ecx, DWORD PTR $T248421[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248422[ebp], eax
	mov	ecx, DWORD PTR $T248422[ebp]
	push	ecx
	lea	edx, DWORD PTR $T248202[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	call	??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z ; GetLocalizedText<CvString>
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv491[ebp], eax
	mov	eax, DWORD PTR tv491[ebp]
	mov	DWORD PTR $T248426[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	ecx, DWORD PTR $T248426[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR $T248202[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248201[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5344 : 						break;

	jmp	$LN8@GetTheming@2
$LN2@GetTheming@2:

; 5345 : 					case 9:
; 5346 : 					case 11:
; 5347 : 						szCivAdj = "TXT_KEY_CO_WORLD_MUSEUM";

	mov	edx, OFFSET ??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@
	test	edx, edx
	je	SHORT $LN162@GetTheming@2
	push	OFFSET ??_C@_0BI@MAAIJIKJ@TXT_KEY_CO_WORLD_MUSEUM?$AA@
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN163@GetTheming@2
$LN162@GetTheming@2:
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN163@GetTheming@2:

; 5348 : 						szThemeDescription = GetLocalizedText(pkBuilding->GetThemingBonusInfo(iIndex)->GetDescription(), szCivAdj);

	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T248203[ebp], esp
	mov	DWORD PTR $T248444[ebp], eax
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T248444[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T248444[ebp]
	mov	DWORD PTR tv497[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	eax, DWORD PTR $T248204[ebp]
	push	eax
	mov	ecx, DWORD PTR _iIndex$226858[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	ecx, eax
	call	?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ; CvThemingBonusInfo::GetDescription
	mov	DWORD PTR tv899[ebp], eax
	mov	edx, DWORD PTR tv899[ebp]
	mov	DWORD PTR $T248448[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	ecx, DWORD PTR $T248448[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248449[ebp], eax
	mov	eax, DWORD PTR $T248449[ebp]
	push	eax
	lea	ecx, DWORD PTR $T248205[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	call	??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z ; GetLocalizedText<CvString>
	add	esp, 36					; 00000024H
	mov	DWORD PTR tv498[ebp], eax
	mov	edx, DWORD PTR tv498[ebp]
	mov	DWORD PTR $T248453[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	eax, DWORD PTR $T248453[ebp]
	push	eax
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR $T248205[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T248204[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN8@GetTheming@2:

; 5349 : 						break;
; 5350 : 					}
; 5351 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _work$226871[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN10@GetTheming@2:

; 5352 : 				szRtnValue = szBonusString + szThemeDescription;

	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szBonusString$[ebp]
	push	edx
	lea	eax, DWORD PTR $T248206[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv901[ebp], eax
	mov	ecx, DWORD PTR tv901[ebp]
	mov	DWORD PTR $T248483[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	ecx, DWORD PTR $T248483[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T248206[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5353 : 			}
; 5354 : 			else

	jmp	$LN15@GetTheming@2
$LN13@GetTheming@2:

; 5355 : 			{
; 5356 : 				szRtnValue = GetLocalizedText("TXT_KEY_CO_NO_THEME");

	push	OFFSET ??_C@_0BE@NKEHCEGG@TXT_KEY_CO_NO_THEME?$AA@
	lea	edx, DWORD PTR $T248207[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv902[ebp], eax
	mov	eax, DWORD PTR tv902[ebp]
	mov	DWORD PTR $T248487[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	ecx, DWORD PTR $T248487[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T248207[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5357 : 				szRtnValue += "[NEWLINE][NEWLINE]";

	push	OFFSET ??_C@_0BD@CNJPLLGH@?$FLNEWLINE?$FN?$FLNEWLINE?$FN?$AA@
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 5358 : 				szRtnValue += GetLocalizedText(pkBuilding->GetThemingBonusHelp());

	lea	edx, DWORD PTR $T248208[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkBuilding$226856[ebp]
	call	?GetThemingBonusHelp@CvBuildingEntry@@QBE?AVCvString@@XZ ; CvBuildingEntry::GetThemingBonusHelp
	mov	DWORD PTR tv903[ebp], eax
	mov	eax, DWORD PTR tv903[ebp]
	mov	DWORD PTR $T248495[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	ecx, DWORD PTR $T248495[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248496[ebp], eax
	mov	ecx, DWORD PTR $T248496[ebp]
	push	ecx
	lea	edx, DWORD PTR $T248209[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv904[ebp], eax
	mov	eax, DWORD PTR tv904[ebp]
	mov	DWORD PTR tv510[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	ecx, DWORD PTR tv510[ebp]
	push	ecx
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	lea	ecx, DWORD PTR $T248209[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T248208[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN15@GetTheming@2:

; 5359 : 			}
; 5360 : 		}
; 5361 : 	}
; 5362 : 
; 5363 : 	return szRtnValue;

	lea	edx, DWORD PTR _szRtnValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T248238[ebp]
	or	eax, 1
	mov	DWORD PTR $T248238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szBonusString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5364 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
$LN218@GetTheming@2:
	DD	$LN7@GetTheming@2
	DD	$LN6@GetTheming@2
	DD	$LN7@GetTheming@2
	DD	$LN6@GetTheming@2
	DD	$LN5@GetTheming@2
	DD	$LN5@GetTheming@2
	DD	$LN4@GetTheming@2
	DD	$LN5@GetTheming@2
	DD	$LN3@GetTheming@2
	DD	$LN2@GetTheming@2
	DD	$LN3@GetTheming@2
	DD	$LN2@GetTheming@2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$0:
	lea	ecx, DWORD PTR _szBonusString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$1:
	lea	ecx, DWORD PTR _szThemeDescription$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$2:
	lea	ecx, DWORD PTR _szRtnValue$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$3:
	lea	ecx, DWORD PTR $T248189[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$4:
	lea	ecx, DWORD PTR $T248190[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$5:
	lea	ecx, DWORD PTR _work$226871[ebp]
	jmp	??1CvGreatWork@@QAE@XZ
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$6:
	lea	ecx, DWORD PTR _szEraString$226872[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$7:
	lea	ecx, DWORD PTR _szCivAdj$226873[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$8:
	lea	ecx, DWORD PTR $T248191[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$9:
	lea	ecx, DWORD PTR $T248192[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$10:
	lea	ecx, DWORD PTR $T248193[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$11:
	lea	ecx, DWORD PTR $T248194[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$12:
	mov	ecx, DWORD PTR $T248195[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$13:
	lea	ecx, DWORD PTR $T248196[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$14:
	lea	ecx, DWORD PTR $T248197[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$15:
	lea	ecx, DWORD PTR $T248198[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$16:
	lea	ecx, DWORD PTR $T248199[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$17:
	mov	ecx, DWORD PTR $T248200[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$18:
	lea	ecx, DWORD PTR $T248201[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$19:
	lea	ecx, DWORD PTR $T248202[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$20:
	mov	ecx, DWORD PTR $T248203[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$21:
	lea	ecx, DWORD PTR $T248204[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$22:
	lea	ecx, DWORD PTR $T248205[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$23:
	lea	ecx, DWORD PTR $T248206[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$24:
	lea	ecx, DWORD PTR $T248207[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$25:
	lea	ecx, DWORD PTR $T248208[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$26:
	lea	ecx, DWORD PTR $T248209[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z$27:
	mov	eax, DWORD PTR $T248238[ebp]
	and	eax, 1
	je	$LN46@GetTheming@2
	and	DWORD PTR $T248238[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN46@GetTheming@2:
	ret	0
__ehhandler$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1000]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetThemingTooltip@CvCityCulture@@QBE?AVCvString@@W4BuildingClassTypes@@@Z ENDP ; CvCityCulture::GetThemingTooltip
; Function compile flags: /Odtp
;	COMDAT ??0CvGreatWork@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CvGreatWork@@QAE@ABV0@@Z PROC			; CvGreatWork::CvGreatWork, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvGreatWork@@QAE@ABV0@@Z ENDP			; CvGreatWork::CvGreatWork
_TEXT	ENDS
EXTRN	?GetWorldWonderYieldChange@CvGameLeagues@@QAEHW4PlayerTypes@@W4YieldTypes@@@Z:PROC ; CvGameLeagues::GetWorldWonderYieldChange
EXTRN	?GetYieldChange@CvBuildingEntry@@QBEHH@Z:PROC	; CvBuildingEntry::GetYieldChange
EXTRN	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ:PROC ; CvBuildingEntry::GetBuildingClassInfo
EXTRN	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z:PROC ; CvGlobals::getCivilizationInfo
EXTRN	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvPlayer::getCivilizationType
; Function compile flags: /Odtp
;	COMDAT ?GetCultureFromWonders@CvCityCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T248561 = -40						; size = 4
$T248557 = -36						; size = 4
$T248545 = -32						; size = 4
_pkBuildingInfo$226930 = -28				; size = 4
_eWonderBuilding$226926 = -24				; size = 4
_iI$226922 = -20					; size = 4
_iNumBuildingClassInfos$226921 = -16			; size = 4
_iRtnValue$ = -12					; size = 4
_pkCivInfo$ = -8					; size = 4
_kPlayer$ = -4						; size = 4
?GetCultureFromWonders@CvCityCulture@@QBEHXZ PROC	; CvCityCulture::GetCultureFromWonders, COMDAT
; _this$ = ecx

; 5370 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 5371 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 5372 : 	CvPlayer &kPlayer = GET_PLAYER(m_pCity->getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T248545[ebp], edx
	mov	eax, DWORD PTR $T248545[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], eax

; 5373 : 
; 5374 : 	CvCivilizationInfo *pkCivInfo = GC.getCivilizationInfo(kPlayer.getCivilizationType());

	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ ; CvPlayer::getCivilizationType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z ; CvGlobals::getCivilizationInfo
	mov	DWORD PTR _pkCivInfo$[ebp], eax

; 5375 : 	if (pkCivInfo)

	cmp	DWORD PTR _pkCivInfo$[ebp], 0
	je	$LN8@GetCulture

; 5376 : 	{
; 5377 : 		int iNumBuildingClassInfos = GC.getNumBuildingClassInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	mov	DWORD PTR _iNumBuildingClassInfos$226921[ebp], eax

; 5378 : 
; 5379 : 		for(int iI = 0; iI < iNumBuildingClassInfos; iI++)

	mov	DWORD PTR _iI$226922[ebp], 0
	jmp	SHORT $LN7@GetCulture
$LN6@GetCulture:
	mov	ecx, DWORD PTR _iI$226922[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226922[ebp], ecx
$LN7@GetCulture:
	mov	edx, DWORD PTR _iI$226922[ebp]
	cmp	edx, DWORD PTR _iNumBuildingClassInfos$226921[ebp]
	jge	$LN8@GetCulture

; 5380 : 		{
; 5381 : 			BuildingTypes eWonderBuilding = ((BuildingTypes)(pkCivInfo->getCivilizationBuildings(iI)));

	mov	eax, DWORD PTR _iI$226922[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkCivInfo$[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eWonderBuilding$226926[ebp], eax

; 5382 : 			if (eWonderBuilding != NO_BUILDING)

	cmp	DWORD PTR _eWonderBuilding$226926[ebp], -1
	je	$LN4@GetCulture

; 5383 : 			{
; 5384 : 				if(m_pCity->GetCityBuildings()->GetNumBuilding(eWonderBuilding) > 0)

	mov	ecx, DWORD PTR _eWonderBuilding$226926[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	SHORT $LN4@GetCulture

; 5385 : 				{
; 5386 : 					CvBuildingEntry *pkBuildingInfo = GC.getBuildingInfo(eWonderBuilding);

	mov	eax, DWORD PTR _eWonderBuilding$226926[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuildingInfo$226930[ebp], eax

; 5387 : 					if (pkBuildingInfo)

	cmp	DWORD PTR _pkBuildingInfo$226930[ebp], 0
	je	SHORT $LN4@GetCulture

; 5388 : 					{
; 5389 : 						if (isWorldWonderClass(pkBuildingInfo->GetBuildingClassInfo()))

	mov	ecx, DWORD PTR _pkBuildingInfo$226930[ebp]
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	push	eax
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetCulture

; 5390 : 						{
; 5391 : 							iRtnValue += pkBuildingInfo->GetYieldChange(YIELD_CULTURE);

	push	4
	mov	ecx, DWORD PTR _pkBuildingInfo$226930[ebp]
	call	?GetYieldChange@CvBuildingEntry@@QBEHH@Z ; CvBuildingEntry::GetYieldChange
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 5392 : 							iRtnValue += GC.getGame().GetGameLeagues()->GetWorldWonderYieldChange(m_pCity->getOwner(), YIELD_CULTURE);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T248557[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T248561[ebp], edx
	push	4
	mov	eax, DWORD PTR $T248557[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248561[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetWorldWonderYieldChange@CvGameLeagues@@QAEHW4PlayerTypes@@W4YieldTypes@@@Z ; CvGameLeagues::GetWorldWonderYieldChange
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN4@GetCulture:

; 5393 : 						}
; 5394 : 					}
; 5395 : 				}
; 5396 : 			}
; 5397 : 		}

	jmp	$LN6@GetCulture
$LN8@GetCulture:

; 5398 : 	}
; 5399 : 
; 5400 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 5401 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCultureFromWonders@CvCityCulture@@QBEHXZ ENDP	; CvCityCulture::GetCultureFromWonders
_TEXT	ENDS
EXTRN	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z:PROC	; CvPlot::getYield
EXTRN	?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ:PROC	; CvFeatureInfo::IsNaturalWonder
EXTRN	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z:PROC ; CvGlobals::getFeatureInfo
EXTRN	?IsWorkingPlot@CvCityCitizens@@QBE_NPBVCvPlot@@@Z:PROC ; CvCityCitizens::IsWorkingPlot
EXTRN	?GetCityPlotFromIndex@CvCityCitizens@@QBEPAVCvPlot@@H@Z:PROC ; CvCityCitizens::GetCityPlotFromIndex
; Function compile flags: /Odtp
;	COMDAT ?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_f$248597 = -26						; size = 1
_f$248588 = -25						; size = 1
$T248582 = -24						; size = 4
$T248573 = -20						; size = 4
$T248572 = -16						; size = 4
_iPlotLoop$226938 = -12					; size = 4
_iRtnValue$ = -8					; size = 4
_pLoopPlot$ = -4					; size = 4
?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ PROC ; CvCityCulture::GetCultureFromNaturalWonders, COMDAT
; _this$ = ecx

; 5405 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 5406 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 5407 : 	CvPlot* pLoopPlot;
; 5408 : 
; 5409 : 	// Look at all workable Plots
; 5410 : 	for(int iPlotLoop = 0; iPlotLoop < NUM_CITY_PLOTS; iPlotLoop++)

	mov	DWORD PTR _iPlotLoop$226938[ebp], 0
	jmp	SHORT $LN8@GetCulture@2
$LN7@GetCulture@2:
	mov	eax, DWORD PTR _iPlotLoop$226938[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlotLoop$226938[ebp], eax
$LN8@GetCulture@2:
	cmp	DWORD PTR _iPlotLoop$226938[ebp], 37	; 00000025H
	jge	$LN6@GetCulture@2

; 5411 : 	{
; 5412 : 		if(iPlotLoop != CITY_HOME_PLOT)

	cmp	DWORD PTR _iPlotLoop$226938[ebp], 0
	je	$LN5@GetCulture@2

; 5413 : 		{
; 5414 : 			pLoopPlot = m_pCity->GetCityCitizens()->GetCityPlotFromIndex(iPlotLoop);

	mov	ecx, DWORD PTR _iPlotLoop$226938[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?GetCityPlotFromIndex@CvCityCitizens@@QBEPAVCvPlot@@H@Z ; CvCityCitizens::GetCityPlotFromIndex
	mov	DWORD PTR _pLoopPlot$[ebp], eax

; 5415 : 
; 5416 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$[ebp], 0
	je	$LN5@GetCulture@2

; 5417 : 			{
; 5418 : 				// Is this a Plot this City controls?
; 5419 : 				if(pLoopPlot->getWorkingCity() != NULL && pLoopPlot->getWorkingCity()->GetID() == m_pCity->GetID())

	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	test	eax, eax
	je	$LN5@GetCulture@2
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	mov	DWORD PTR $T248572[ebp], eax
	mov	eax, DWORD PTR $T248572[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T248573[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T248582[ebp], ecx
	mov	edx, DWORD PTR $T248573[ebp]
	cmp	edx, DWORD PTR $T248582[ebp]
	jne	SHORT $LN5@GetCulture@2

; 5420 : 				{
; 5421 : 					// Working the Plot?
; 5422 : 					if (m_pCity->GetCityCitizens()->IsWorkingPlot(pLoopPlot))

	mov	eax, DWORD PTR _pLoopPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?IsWorkingPlot@CvCityCitizens@@QBE_NPBVCvPlot@@@Z ; CvCityCitizens::IsWorkingPlot
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@GetCulture@2

; 5423 : 					{
; 5424 : 						if(pLoopPlot->getFeatureType() != NO_FEATURE && GC.getFeatureInfo(pLoopPlot->getFeatureType())->IsNaturalWonder())

	mov	eax, DWORD PTR _pLoopPlot$[ebp]
	mov	cl, BYTE PTR [eax+432]
	mov	BYTE PTR _f$248588[ebp], cl
	movsx	edx, BYTE PTR _f$248588[ebp]
	cmp	edx, -1
	je	SHORT $LN5@GetCulture@2
	mov	eax, DWORD PTR _pLoopPlot$[ebp]
	mov	cl, BYTE PTR [eax+432]
	mov	BYTE PTR _f$248597[ebp], cl
	movsx	edx, BYTE PTR _f$248597[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::IsNaturalWonder
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@GetCulture@2

; 5425 : 						{
; 5426 : 							iRtnValue += pLoopPlot->getYield(YIELD_CULTURE);

	push	4
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN5@GetCulture@2:

; 5427 : 						}
; 5428 : 					}
; 5429 : 				}
; 5430 : 			}
; 5431 : 		}
; 5432 : 	}

	jmp	$LN7@GetCulture@2
$LN6@GetCulture@2:

; 5433 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 5434 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCultureFromNaturalWonders@CvCityCulture@@QBEHXZ ENDP ; CvCityCulture::GetCultureFromNaturalWonders
_TEXT	ENDS
EXTRN	?ComputeCultureFromAdjacentImprovement@CvPlot@@QBEHAAVCvImprovementEntry@@W4ImprovementTypes@@@Z:PROC ; CvPlot::ComputeCultureFromAdjacentImprovement
EXTRN	?GetCultureAdjacentSameType@CvImprovementEntry@@QBEHXZ:PROC ; CvImprovementEntry::GetCultureAdjacentSameType
EXTRN	?GetYieldChange@CvImprovementEntry@@QBEHH@Z:PROC ; CvImprovementEntry::GetYieldChange
EXTRN	?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z:PROC ; CvGlobals::getImprovementInfo
EXTRN	?calculateYield@CvPlot@@QAEHW4YieldTypes@@_N@Z:PROC ; CvPlot::calculateYield
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
; Function compile flags: /Odtp
;	COMDAT ?GetCultureFromImprovements@CvCityCulture@@QBEHXZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T248621 = -36						; size = 4
$T248612 = -32						; size = 4
$T248611 = -28						; size = 4
_iAdjacentCulture$226964 = -24				; size = 4
_pImprovement$226962 = -20				; size = 4
_eImprovement$226960 = -16				; size = 4
_iPlotLoop$226952 = -12					; size = 4
_iRtnValue$ = -8					; size = 4
_pLoopPlot$ = -4					; size = 4
?GetCultureFromImprovements@CvCityCulture@@QBEHXZ PROC	; CvCityCulture::GetCultureFromImprovements, COMDAT
; _this$ = ecx

; 5438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 5439 : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 5440 : 	CvPlot* pLoopPlot;
; 5441 : 
; 5442 : 	// Look at all workable Plots
; 5443 : 	for(int iPlotLoop = 0; iPlotLoop < NUM_CITY_PLOTS; iPlotLoop++)

	mov	DWORD PTR _iPlotLoop$226952[ebp], 0
	jmp	SHORT $LN10@GetCulture@3
$LN9@GetCulture@3:
	mov	eax, DWORD PTR _iPlotLoop$226952[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlotLoop$226952[ebp], eax
$LN10@GetCulture@3:
	cmp	DWORD PTR _iPlotLoop$226952[ebp], 37	; 00000025H
	jge	$LN8@GetCulture@3

; 5444 : 	{
; 5445 : 		if(iPlotLoop != CITY_HOME_PLOT)

	cmp	DWORD PTR _iPlotLoop$226952[ebp], 0
	je	$LN7@GetCulture@3

; 5446 : 		{
; 5447 : 			pLoopPlot = m_pCity->GetCityCitizens()->GetCityPlotFromIndex(iPlotLoop);

	mov	ecx, DWORD PTR _iPlotLoop$226952[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?GetCityPlotFromIndex@CvCityCitizens@@QBEPAVCvPlot@@H@Z ; CvCityCitizens::GetCityPlotFromIndex
	mov	DWORD PTR _pLoopPlot$[ebp], eax

; 5448 : 
; 5449 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$[ebp], 0
	je	$LN7@GetCulture@3

; 5450 : 			{
; 5451 : 				// Is this a Plot this City controls?
; 5452 : 				if(pLoopPlot->getWorkingCity() != NULL && pLoopPlot->getWorkingCity()->GetID() == m_pCity->GetID())

	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	test	eax, eax
	je	$LN7@GetCulture@3
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	mov	DWORD PTR $T248611[ebp], eax
	mov	eax, DWORD PTR $T248611[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T248612[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T248621[ebp], ecx
	mov	edx, DWORD PTR $T248612[ebp]
	cmp	edx, DWORD PTR $T248621[ebp]
	jne	$LN7@GetCulture@3

; 5453 : 				{
; 5454 : 					// Working the Plot?
; 5455 : 					if (m_pCity->GetCityCitizens()->IsWorkingPlot(pLoopPlot))

	mov	eax, DWORD PTR _pLoopPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityCitizens@CvCity@@QBEPAVCvCityCitizens@@XZ ; CvCity::GetCityCitizens
	mov	ecx, eax
	call	?IsWorkingPlot@CvCityCitizens@@QBE_NPBVCvPlot@@@Z ; CvCityCitizens::IsWorkingPlot
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@GetCulture@3

; 5456 : 					{
; 5457 : 						ImprovementTypes eImprovement = pLoopPlot->getImprovementType();

	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	mov	DWORD PTR _eImprovement$226960[ebp], eax

; 5458 : 						if (eImprovement != NO_IMPROVEMENT)

	cmp	DWORD PTR _eImprovement$226960[ebp], -1
	je	SHORT $LN7@GetCulture@3

; 5459 : 						{
; 5460 : 							iRtnValue += pLoopPlot->calculateYield(YIELD_CULTURE);

	push	0
	push	4
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?calculateYield@CvPlot@@QAEHW4YieldTypes@@_N@Z ; CvPlot::calculateYield
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 5461 : 
; 5462 : 							CvImprovementEntry* pImprovement = GC.getImprovementInfo(eImprovement);

	mov	eax, DWORD PTR _eImprovement$226960[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z ; CvGlobals::getImprovementInfo
	mov	DWORD PTR _pImprovement$226962[ebp], eax

; 5463 : 							if(pImprovement && pImprovement->GetYieldChange(YIELD_CULTURE) > 0)

	cmp	DWORD PTR _pImprovement$226962[ebp], 0
	je	SHORT $LN7@GetCulture@3
	push	4
	mov	ecx, DWORD PTR _pImprovement$226962[ebp]
	call	?GetYieldChange@CvImprovementEntry@@QBEHH@Z ; CvImprovementEntry::GetYieldChange
	test	eax, eax
	jle	SHORT $LN7@GetCulture@3

; 5464 : 							{
; 5465 : 								int iAdjacentCulture = pImprovement->GetCultureAdjacentSameType();

	mov	ecx, DWORD PTR _pImprovement$226962[ebp]
	call	?GetCultureAdjacentSameType@CvImprovementEntry@@QBEHXZ ; CvImprovementEntry::GetCultureAdjacentSameType
	mov	DWORD PTR _iAdjacentCulture$226964[ebp], eax

; 5466 : 								if(iAdjacentCulture > 0)

	cmp	DWORD PTR _iAdjacentCulture$226964[ebp], 0
	jle	SHORT $LN7@GetCulture@3

; 5467 : 								{
; 5468 : 									iRtnValue += pLoopPlot->ComputeCultureFromAdjacentImprovement(*pImprovement, eImprovement);

	mov	ecx, DWORD PTR _eImprovement$226960[ebp]
	push	ecx
	mov	edx, DWORD PTR _pImprovement$226962[ebp]
	push	edx
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?ComputeCultureFromAdjacentImprovement@CvPlot@@QBEHAAVCvImprovementEntry@@W4ImprovementTypes@@@Z ; CvPlot::ComputeCultureFromAdjacentImprovement
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN7@GetCulture@3:

; 5469 : 								}
; 5470 : 							}
; 5471 : 						}
; 5472 : 					}
; 5473 : 				}
; 5474 : 			}
; 5475 : 		}
; 5476 : 	}

	jmp	$LN9@GetCulture@3
$LN8@GetCulture@3:

; 5477 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 5478 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCultureFromImprovements@CvCityCulture@@QBEHXZ ENDP	; CvCityCulture::GetCultureFromImprovements
_TEXT	ENDS
PUBLIC	??_C@_04CAGLFDOE@?$CFd?0?5?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_04CAGLFDOE@?$CFd?0?5?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_04CAGLFDOE@?$CFd?0?5?$AA@ DB '%d, ', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$3
__ehfuncinfo$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z
_TEXT	SEGMENT
tv162 = -168						; size = 4
tv153 = -164						; size = 4
tv184 = -160						; size = 4
_this$ = -156						; size = 4
$T248654 = -152						; size = 4
$T248638 = -148						; size = 4
$T248626 = -144						; size = 28
$T248625 = -116						; size = 28
_strTemp$226985 = -88					; size = 28
_iIndex$226983 = -60					; size = 4
_jJ$226979 = -56					; size = 4
_eBldgClass$226977 = -52				; size = 4
_iI$226973 = -48					; size = 4
_strMsg$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pLog$ = 8						; size = 4
?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z PROC	; CvCityCulture::LogGreatWorks, COMDAT
; _this$ = ecx

; 5482 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5483 : 	CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5484 : 	strMsg = m_pCity->getName() + ", ";

	lea	eax, DWORD PTR $T248625[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv184[ebp], eax
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv153[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	eax, DWORD PTR tv153[ebp]
	push	eax
	lea	ecx, DWORD PTR $T248626[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv162[ebp], eax
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR $T248638[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T248638[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strMsg$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T248626[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T248625[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5485 : #ifdef AUI_WARNING_FIXES
; 5486 : 	for (uint iI = 0; iI < GC.getNumBuildingClassInfos(); iI++)
; 5487 : #else
; 5488 : 	for (int iI = 0; iI < GC.getNumBuildingClassInfos(); iI++)

	mov	DWORD PTR _iI$226973[ebp], 0
	jmp	SHORT $LN7@LogGreatWo
$LN6@LogGreatWo:
	mov	eax, DWORD PTR _iI$226973[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226973[ebp], eax
$LN7@LogGreatWo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumBuildingClassInfos
	cmp	DWORD PTR _iI$226973[ebp], eax
	jge	$LN5@LogGreatWo

; 5489 : #endif
; 5490 : 	{
; 5491 : 		BuildingClassTypes eBldgClass = (BuildingClassTypes)iI;

	mov	ecx, DWORD PTR _iI$226973[ebp]
	mov	DWORD PTR _eBldgClass$226977[ebp], ecx

; 5492 : 		
; 5493 : 		for (int jJ = 0; jJ < 4; jJ++)

	mov	DWORD PTR _jJ$226979[ebp], 0
	jmp	SHORT $LN4@LogGreatWo
$LN3@LogGreatWo:
	mov	edx, DWORD PTR _jJ$226979[ebp]
	add	edx, 1
	mov	DWORD PTR _jJ$226979[ebp], edx
$LN4@LogGreatWo:
	cmp	DWORD PTR _jJ$226979[ebp], 4
	jge	SHORT $LN2@LogGreatWo

; 5494 : 		{
; 5495 : 			int iIndex = m_pCity->GetCityBuildings()->GetBuildingGreatWork(eBldgClass, jJ);

	mov	eax, DWORD PTR _jJ$226979[ebp]
	push	eax
	mov	ecx, DWORD PTR _eBldgClass$226977[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iIndex$226983[ebp], eax

; 5496 : 			if (iIndex != -1)

	cmp	DWORD PTR _iIndex$226983[ebp], -1
	je	SHORT $LN1@LogGreatWo

; 5497 : 			{
; 5498 : 				CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$226985[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 5499 : 				strTemp.Format("%d, ", iIndex);

	mov	eax, DWORD PTR _iIndex$226983[ebp]
	push	eax
	push	OFFSET ??_C@_04CAGLFDOE@?$CFd?0?5?$AA@
	lea	ecx, DWORD PTR _strTemp$226985[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5500 : 				strMsg += strTemp;

	lea	edx, DWORD PTR _strTemp$226985[ebp]
	push	edx
	lea	ecx, DWORD PTR _strMsg$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 5501 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strTemp$226985[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@LogGreatWo:

; 5502 : 		}

	jmp	SHORT $LN3@LogGreatWo
$LN2@LogGreatWo:

; 5503 : 	}

	jmp	$LN6@LogGreatWo
$LN5@LogGreatWo:

; 5504 : 	pLog->Msg(strMsg);

	lea	ecx, DWORD PTR _strMsg$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T248654[ebp], eax
	mov	eax, DWORD PTR $T248654[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 5505 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$0:
	lea	ecx, DWORD PTR _strMsg$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$1:
	lea	ecx, DWORD PTR $T248625[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$2:
	lea	ecx, DWORD PTR $T248626[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z$3:
	lea	ecx, DWORD PTR _strTemp$226985[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogGreatWorks@CvCityCulture@@QAEXPAVFILogFile@@@Z ENDP	; CvCityCulture::LogGreatWorks
EXTRN	?GetNumGreatWorksInBuilding@CvCityBuildings@@QBEHW4BuildingClassTypes@@@Z:PROC ; CvCityBuildings::GetNumGreatWorksInBuilding
EXTRN	?getCivilizationType@CvCity@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvCity::getCivilizationType
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$7
__ehfuncinfo$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z
_TEXT	SEGMENT
_this$ = -220						; size = 4
$T248859 = -160						; size = 4
$T248669 = -64						; size = 4
$T248668 = -60						; size = 4
$T248667 = -56						; size = 4
_iGreatWork$227011 = -52				; size = 4
_iI$227007 = -48					; size = 4
_iNumSlots$227004 = -44					; size = 4
_pkBuilding$227002 = -40				; size = 4
_eBuilding$226998 = -36					; size = 4
_aGreatWorkIndices$ = -32				; size = 16
_pkCivInfo$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eBuildingClass$ = 8					; size = 4
?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z PROC ; CvCityCulture::GetThemingBonusIndex, COMDAT
; _this$ = ecx

; 5509 : {  

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5510 : 	vector<int> aGreatWorkIndices;

	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5511 : 	CvCivilizationInfo *pkCivInfo = GC.getCivilizationInfo(m_pCity->getCivilizationType());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCivilizationType@CvCity@@QBE?AW4CivilizationTypes@@XZ ; CvCity::getCivilizationType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z ; CvGlobals::getCivilizationInfo
	mov	DWORD PTR _pkCivInfo$[ebp], eax

; 5512 : 	if (pkCivInfo)

	cmp	DWORD PTR _pkCivInfo$[ebp], 0
	je	$LN8@GetTheming@3

; 5513 : 	{
; 5514 : 		BuildingTypes eBuilding = (BuildingTypes)pkCivInfo->getCivilizationBuildings(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkCivInfo$[ebp]
	call	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
	mov	DWORD PTR _eBuilding$226998[ebp], eax

; 5515 : 		if(NO_BUILDING != eBuilding)

	cmp	DWORD PTR _eBuilding$226998[ebp], -1
	je	$LN8@GetTheming@3

; 5516 : 		{
; 5517 : 			if (m_pCity->GetCityBuildings()->GetNumBuilding(eBuilding) > 0)

	mov	edx, DWORD PTR _eBuilding$226998[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumBuilding
	test	eax, eax
	jle	$LN8@GetTheming@3

; 5518 : 			{
; 5519 : 				CvBuildingEntry *pkBuilding = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$226998[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuilding$227002[ebp], eax

; 5520 : 				if (pkBuilding)

	cmp	DWORD PTR _pkBuilding$227002[ebp], 0
	je	$LN8@GetTheming@3

; 5521 : 				{
; 5522 : #ifdef AUI_WARNING_FIXES
; 5523 : 					uint iNumSlots = pkBuilding->GetGreatWorkCount();
; 5524 : #else
; 5525 : 					int iNumSlots = pkBuilding->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkBuilding$227002[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$227004[ebp], eax

; 5526 : #endif
; 5527 : 					if (m_pCity->GetCityBuildings()->GetNumGreatWorksInBuilding(eBuildingClass) < iNumSlots)

	mov	edx, DWORD PTR _eBuildingClass$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumGreatWorksInBuilding@CvCityBuildings@@QBEHW4BuildingClassTypes@@@Z ; CvCityBuildings::GetNumGreatWorksInBuilding
	cmp	eax, DWORD PTR _iNumSlots$227004[ebp]
	jge	SHORT $LN4@GetTheming@3

; 5528 : 					{
; 5529 : 						return -1;  // No theming bonus if some slots still empty

	mov	DWORD PTR $T248667[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T248667[ebp]
	jmp	$LN9@GetTheming@3
$LN4@GetTheming@3:

; 5530 : 					}
; 5531 : 
; 5532 : 					// Store info on the attributes of all our Great Works
; 5533 : #ifdef AUI_WARNING_FIXES
; 5534 : 					for (uint iI = 0; iI < iNumSlots; iI++)
; 5535 : #else
; 5536 : 					for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$227007[ebp], 0
	jmp	SHORT $LN3@GetTheming@3
$LN2@GetTheming@3:
	mov	ecx, DWORD PTR _iI$227007[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$227007[ebp], ecx
$LN3@GetTheming@3:
	mov	edx, DWORD PTR _iI$227007[ebp]
	cmp	edx, DWORD PTR _iNumSlots$227004[ebp]
	jge	SHORT $LN93@GetTheming@3

; 5537 : #endif
; 5538 : 					{
; 5539 : 						int iGreatWork = m_pCity->GetCityBuildings()->GetBuildingGreatWork(eBuildingClass, iI);

	mov	eax, DWORD PTR _iI$227007[ebp]
	push	eax
	mov	ecx, DWORD PTR _eBuildingClass$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingGreatWork@CvCityBuildings@@QBEHW4BuildingClassTypes@@H@Z ; CvCityBuildings::GetBuildingGreatWork
	mov	DWORD PTR _iGreatWork$227011[ebp], eax

; 5540 : 						aGreatWorkIndices.push_back(iGreatWork);

	lea	eax, DWORD PTR _iGreatWork$227011[ebp]
	push	eax
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 5541 : 					}

	jmp	SHORT $LN2@GetTheming@3

; 5542 : 
; 5543 : 					return CultureHelpers::GetThemingBonusIndex(m_pCity->getOwner(), pkBuilding, aGreatWorkIndices);

$LN93@GetTheming@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T248859[ebp], eax
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkBuilding$227002[ebp]
	push	edx
	mov	eax, DWORD PTR $T248859[ebp]
	push	eax
	call	?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; CultureHelpers::GetThemingBonusIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T248668[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T248668[ebp]
	jmp	SHORT $LN9@GetTheming@3
$LN8@GetTheming@3:

; 5544 : 				}
; 5545 : 			}
; 5546 : 		}
; 5547 : 	}
; 5548 : 	return -1;

	mov	DWORD PTR $T248669[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T248669[ebp]
$LN9@GetTheming@3:

; 5549 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$0:
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$3:
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$5:
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z$7:
	lea	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetThemingBonusIndex@CvCityCulture@@ABEHW4BuildingClassTypes@@@Z ENDP ; CvCityCulture::GetThemingBonusIndex
PUBLIC	??_C@_0BBJ@HLMEOAAJ@select?51?5from?5GreatWorks?5as?5gw?5i@ ; `string'
PUBLIC	??_C@_0BDF@GEIFFLIE@SELECT?5gw?4ID?5FROM?5GreatWorks?5as?5@ ; `string'
EXTRN	__imp_?GetInt@Results@Database@@QAEHH@Z:PROC
EXTRN	__imp_?BindNULL@Results@Database@@QAE_NH@Z:PROC
EXTRN	__imp_??1Results@Database@@UAE@XZ:PROC
EXTRN	__imp_?Step@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?Bind@Results@Database@@QAE_NHH@Z:PROC
EXTRN	__imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z:PROC
EXTRN	__imp_??0Results@Database@@QAE@PBD@Z:PROC
EXTRN	?getARTIFACT_WRITING@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ:PROC ; CvTypes::getARTIFACT_WRITING
;	COMDAT ??_C@_0BBJ@HLMEOAAJ@select?51?5from?5GreatWorks?5as?5gw?5i@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BBJ@HLMEOAAJ@select?51?5from?5GreatWorks?5as?5gw?5i@ DB 'select 1 '
	DB	'from GreatWorks as gw inner join Eras on gw.EraType == Eras.T'
	DB	'ype inner join GreatWorkArtifactClasses on gw.ArtifactClassTy'
	DB	'pe == GreatWorkArtifactClasses.Type where gw.GreatWorkClassTy'
	DB	'pe = ''GREAT_WORK_ARTIFACT'' and Eras.ID = ? and GreatWorkArt'
	DB	'ifactClasses.ID == ? Limit 1;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDF@GEIFFLIE@SELECT?5gw?4ID?5FROM?5GreatWorks?5as?5@
CONST	SEGMENT
??_C@_0BDF@GEIFFLIE@SELECT?5gw?4ID?5FROM?5GreatWorks?5as?5@ DB 'SELECT gw'
	DB	'.ID FROM GreatWorks as gw left outer join Eras on gw.EraType '
	DB	'== Eras.Type inner join GreatWorkArtifactClasses on gw.Artifa'
	DB	'ctClassType == GreatWorkArtifactClasses.Type where gw.GreatWo'
	DB	'rkClassType = ''GREAT_WORK_ARTIFACT'' and Eras.ID is ? and Gr'
	DB	'eatWorkArtifactClasses.ID == ? order by Random() limit 1;', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z$1
__ehfuncinfo$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z
_TEXT	SEGMENT
$T248978 = -184						; size = 4
_kEraItemsExistQ$227028 = -180				; size = 64
_eGreatWork$ = -116					; size = 4
_archData$ = -112					; size = 20
_kQuery$ = -92						; size = 64
_szExistsSQL$ = -28					; size = 4
_bHasEraSpecificItems$ = -21				; size = 1
_szSql$ = -20						; size = 4
_db$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPlot$ = 8						; size = 4
?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z PROC ; CultureHelpers::GetArtifact, COMDAT

; 5555 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5556 : 	CvArchaeologyData archData = pPlot->GetArchaeologicalRecord();

	lea	eax, DWORD PTR _archData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetArchaeologicalRecord@CvPlot@@QBE?AUCvArchaeologyData@@XZ ; CvPlot::GetArchaeologicalRecord

; 5557 : 
; 5558 : 	// Writing?  If so we already know which one it is
; 5559 : 	if (archData.m_eArtifactType == CvTypes::getARTIFACT_WRITING())

	call	?getARTIFACT_WRITING@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ ; CvTypes::getARTIFACT_WRITING
	cmp	DWORD PTR _archData$[ebp], eax
	jne	SHORT $LN8@GetArtifac

; 5560 : 	{
; 5561 : 		return archData.m_eWork;

	mov	eax, DWORD PTR _archData$[ebp+16]
	jmp	$LN9@GetArtifac
$LN8@GetArtifac:

; 5562 : 	}
; 5563 : 
; 5564 : 	// Otherwise normal retrieval of Great Work
; 5565 : 	GreatWorkType eGreatWork = NO_GREAT_WORK;

	mov	DWORD PTR _eGreatWork$[ebp], -1

; 5566 : 
; 5567 : 	//Developer Note:
; 5568 : 	//This could probably be shrunk down into a single SQL query but for now I'll leave it as 2.
; 5569 : 	//The idea here is that we grab all possible items for a specific era and then pick 1 at random.
; 5570 : 	//If there are no items for that era, we use NULL and grab those items.
; 5571 : 	//Since era-agnostic and era-specific items are mutually exclusive, we must first check for the the 
; 5572 : 	//existence of era-specific items.
; 5573 : 	const char* szSql = "SELECT gw.ID FROM GreatWorks as gw "
; 5574 : 						"left outer join Eras on gw.EraType == Eras.Type "
; 5575 : 						"inner join GreatWorkArtifactClasses on gw.ArtifactClassType == GreatWorkArtifactClasses.Type "
; 5576 : 						"where gw.GreatWorkClassType = 'GREAT_WORK_ARTIFACT' and Eras.ID is ? and GreatWorkArtifactClasses.ID == ? "
; 5577 : 						"order by Random() limit 1;";

	mov	DWORD PTR _szSql$[ebp], OFFSET ??_C@_0BDF@GEIFFLIE@SELECT?5gw?4ID?5FROM?5GreatWorks?5as?5@

; 5578 : 
; 5579 : 	const char* szExistsSQL =	"select 1 from GreatWorks as gw "
; 5580 : 								"inner join Eras on gw.EraType == Eras.Type "
; 5581 : 								"inner join GreatWorkArtifactClasses on gw.ArtifactClassType == GreatWorkArtifactClasses.Type "
; 5582 : 								"where gw.GreatWorkClassType = 'GREAT_WORK_ARTIFACT' and Eras.ID = ? and GreatWorkArtifactClasses.ID == ? Limit 1;";

	mov	DWORD PTR _szExistsSQL$[ebp], OFFSET ??_C@_0BBJ@HLMEOAAJ@select?51?5from?5GreatWorks?5as?5gw?5i@

; 5583 : 
; 5584 : 	Database::Connection* db = GC.GetGameDatabase();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR _db$[ebp], ecx

; 5585 : 
; 5586 : 	bool bHasEraSpecificItems = false;

	mov	BYTE PTR _bHasEraSpecificItems$[ebp], 0

; 5587 : 
; 5588 : 	if(archData.m_eEra != NO_ERA)

	cmp	DWORD PTR _archData$[ebp+4], -1
	je	$LN7@GetArtifac

; 5589 : 	{
; 5590 : 		Database::Results kEraItemsExistQ;

	push	0
	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5591 : 		if(db->Execute(kEraItemsExistQ, szExistsSQL))

	push	-1
	mov	edx, DWORD PTR _szExistsSQL$[ebp]
	push	edx
	lea	eax, DWORD PTR _kEraItemsExistQ$227028[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GetArtifac

; 5592 : 		{
; 5593 : 			kEraItemsExistQ.Bind(1, archData.m_eEra);

	mov	edx, DWORD PTR _archData$[ebp+4]
	push	edx
	push	1
	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5594 : 			kEraItemsExistQ.Bind(2, archData.m_eArtifactType);

	mov	eax, DWORD PTR _archData$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5595 : 
; 5596 : 			if(kEraItemsExistQ.Step())

	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GetArtifac

; 5597 : 			{
; 5598 : 				bHasEraSpecificItems = true;	

	mov	BYTE PTR _bHasEraSpecificItems$[ebp], 1
$LN6@GetArtifac:

; 5599 : 			}
; 5600 : 		}
; 5601 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN7@GetArtifac:

; 5602 : 
; 5603 : 	Database::Results kQuery;

	push	0
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5604 : 	if(db->Execute(kQuery, szSql))

	push	-1
	mov	edx, DWORD PTR _szSql$[ebp]
	push	edx
	lea	eax, DWORD PTR _kQuery$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetArtifac

; 5605 : 	{
; 5606 : 		if(bHasEraSpecificItems == true)

	movzx	edx, BYTE PTR _bHasEraSpecificItems$[ebp]
	cmp	edx, 1
	jne	SHORT $LN3@GetArtifac

; 5607 : 			kQuery.Bind(1, archData.m_eEra);

	mov	eax, DWORD PTR _archData$[ebp+4]
	push	eax
	push	1
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5608 : 		else

	jmp	SHORT $LN2@GetArtifac
$LN3@GetArtifac:

; 5609 : 			kQuery.BindNULL(1);

	push	1
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_?BindNULL@Results@Database@@QAE_NH@Z
$LN2@GetArtifac:

; 5610 : 
; 5611 : 		kQuery.Bind(2, archData.m_eArtifactType);

	mov	ecx, DWORD PTR _archData$[ebp]
	push	ecx
	push	2
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5612 : 
; 5613 : 		if(kQuery.Step())

	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@GetArtifac

; 5614 : 		{
; 5615 : 			eGreatWork = static_cast<GreatWorkType>(kQuery.GetInt(0));

	push	0
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _eGreatWork$[ebp], eax
$LN4@GetArtifac:

; 5616 : 		}
; 5617 : 	}
; 5618 : 
; 5619 : 	return eGreatWork;

	mov	eax, DWORD PTR _eGreatWork$[ebp]
	mov	DWORD PTR $T248978[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kQuery$[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	eax, DWORD PTR $T248978[ebp]
$LN9@GetArtifac:

; 5620 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z$0:
	lea	ecx, DWORD PTR _kEraItemsExistQ$227028[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z$1:
	lea	ecx, DWORD PTR _kQuery$[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetArtifact@CultureHelpers@@YA?AW4GreatWorkType@@PAVCvPlot@@@Z ENDP ; CultureHelpers::GetArtifact
PUBLIC	??_C@_0IN@MPMBONPF@SELECT?5GreatWorkClasses?4ID?5from?5@ ; `string'
;	COMDAT ??_C@_0IN@MPMBONPF@SELECT?5GreatWorkClasses?4ID?5from?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0IN@MPMBONPF@SELECT?5GreatWorkClasses?4ID?5from?5@ DB 'SELECT Great'
	DB	'WorkClasses.ID from GreatWorkClasses inner join GreatWorks on'
	DB	' GreatWorkClassType = GreatWorkClasses.Type where GreatWorks.'
	DB	'ID = ?', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z$0
__ehfuncinfo$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z
_TEXT	SEGMENT
_kQuery$227044 = -92					; size = 64
_szSQL$227045 = -24					; size = 4
_eClass$ = -20						; size = 4
_db$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_eGreatWork$ = 8					; size = 4
?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z PROC ; CultureHelpers::GetGreatWorkClass, COMDAT

; 5623 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5624 : 	GreatWorkClass eClass = NO_GREAT_WORK_CLASS;

	mov	DWORD PTR _eClass$[ebp], -1

; 5625 : 
; 5626 : 	Database::Connection* db = GC.GetGameDatabase();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR _db$[ebp], eax

; 5627 : 	if(db != NULL)

	cmp	DWORD PTR _db$[ebp], 0
	je	SHORT $LN3@GetGreatWo@9

; 5628 : 	{
; 5629 : 		Database::Results kQuery;

	push	0
	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5630 : 		const char* szSQL = "SELECT GreatWorkClasses.ID from GreatWorkClasses inner join GreatWorks on GreatWorkClassType = GreatWorkClasses.Type where GreatWorks.ID = ?";

	mov	DWORD PTR _szSQL$227045[ebp], OFFSET ??_C@_0IN@MPMBONPF@SELECT?5GreatWorkClasses?4ID?5from?5@

; 5631 : 		if(db->Execute(kQuery, szSQL))

	push	-1
	mov	ecx, DWORD PTR _szSQL$227045[ebp]
	push	ecx
	lea	edx, DWORD PTR _kQuery$227044[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetGreatWo@9

; 5632 : 		{
; 5633 : 			kQuery.Bind(1, eGreatWork);

	mov	ecx, DWORD PTR _eGreatWork$[ebp]
	push	ecx
	push	1
	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5634 : 
; 5635 : 			if(kQuery.Step())

	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetGreatWo@9

; 5636 : 			{
; 5637 : 				eClass = static_cast<GreatWorkClass>(kQuery.GetInt(0));

	push	0
	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _eClass$[ebp], eax
$LN2@GetGreatWo@9:

; 5638 : 			}
; 5639 : 		}
; 5640 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN3@GetGreatWo@9:

; 5641 : 
; 5642 : 	return eClass;

	mov	eax, DWORD PTR _eClass$[ebp]

; 5643 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z$0:
	lea	ecx, DWORD PTR _kQuery$227044[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkClass@CultureHelpers@@YA?AW4GreatWorkClass@@W4GreatWorkType@@@Z ENDP ; CultureHelpers::GetGreatWorkClass
PUBLIC	??_C@_0DA@KLLGKNBG@SELECT?5Description?5FROM?5GreatWor@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetText@Results@Database@@QAEPBDH@Z:PROC
;	COMDAT ??_C@_0DA@KLLGKNBG@SELECT?5Description?5FROM?5GreatWor@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0DA@KLLGKNBG@SELECT?5Description?5FROM?5GreatWor@ DB 'SELECT Descri'
	DB	'ption FROM GreatWorks WHERE ID = ?', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$1
__ehfuncinfo$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
_TEXT	SEGMENT
$T249022 = -124						; size = 4
$T249008 = -120						; size = 4
_kQuery$227057 = -116					; size = 64
_strGreatWorkName$ = -48				; size = 28
__$ArrayPad$ = -20					; size = 4
_db$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_eGreatWork$ = 12					; size = 4
?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z PROC ; CultureHelpers::GetGreatWorkName, COMDAT

; 5646 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T249008[ebp], 0

; 5647 : 	CvString strGreatWorkName;

	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5648 : 
; 5649 : 	Database::Connection* db = GC.GetGameDatabase();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR _db$[ebp], eax

; 5650 : 	if(db != NULL)

	cmp	DWORD PTR _db$[ebp], 0
	je	$LN3@GetGreatWo@10

; 5651 : 	{
; 5652 : 		Database::Results kQuery;

	push	0
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 5653 : 		if(db->Execute(kQuery, "SELECT Description FROM GreatWorks WHERE ID = ?"))

	push	-1
	push	OFFSET ??_C@_0DA@KLLGKNBG@SELECT?5Description?5FROM?5GreatWor@
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetGreatWo@10

; 5654 : 		{
; 5655 : 			kQuery.Bind(1, eGreatWork);

	mov	eax, DWORD PTR _eGreatWork$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5656 : 
; 5657 : 			if(kQuery.Step())

	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetGreatWo@10

; 5658 : 			{
; 5659 : 				strGreatWorkName = kQuery.GetText(0);

	push	0
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T249022[ebp], eax
	cmp	DWORD PTR $T249022[ebp], 0
	je	SHORT $LN16@GetGreatWo@10
	mov	edx, DWORD PTR $T249022[ebp]
	push	edx
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN2@GetGreatWo@10
$LN16@GetGreatWo@10:
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN2@GetGreatWo@10:

; 5660 : 			}
; 5661 : 		}
; 5662 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN3@GetGreatWo@10:

; 5663 : 
; 5664 : 	return strGreatWorkName;

	lea	eax, DWORD PTR _strGreatWorkName$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T249008[ebp]
	or	ecx, 1
	mov	DWORD PTR $T249008[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5665 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$0:
	lea	ecx, DWORD PTR _strGreatWorkName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$1:
	lea	ecx, DWORD PTR _kQuery$227057[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$2:
	mov	eax, DWORD PTR $T249008[ebp]
	and	eax, 1
	je	$LN9@GetGreatWo@10
	and	DWORD PTR $T249008[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN9@GetGreatWo@10:
	ret	0
__ehhandler$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkName@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ENDP ; CultureHelpers::GetGreatWorkName
PUBLIC	??_C@_0CK@FLLIHCEL@SELECT?5Audio?5FROM?5GreatWorks?5WHE@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkAudio
;	COMDAT ??_C@_0CK@FLLIHCEL@SELECT?5Audio?5FROM?5GreatWorks?5WHE@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CK@FLLIHCEL@SELECT?5Audio?5FROM?5GreatWorks?5WHE@ DB 'SELECT Audio'
	DB	' FROM GreatWorks WHERE ID = ?', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$1
__ehfuncinfo$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
_TEXT	SEGMENT
$T249057 = -124						; size = 4
$T249043 = -120						; size = 4
_kQuery$227068 = -116					; size = 64
_strGreatWorkAudio$ = -48				; size = 28
__$ArrayPad$ = -20					; size = 4
_db$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_eGreatWorkType$ = 12					; size = 4
?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z PROC ; CultureHelpers::GetGreatWorkAudio, COMDAT

; 5668 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T249043[ebp], 0

; 5669 : 	CvString strGreatWorkAudio;

	lea	ecx, DWORD PTR _strGreatWorkAudio$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5670 : 
; 5671 : 	Database::Connection* db = GC.GetGameDatabase();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR _db$[ebp], eax

; 5672 : 	if(db != NULL)

	cmp	DWORD PTR _db$[ebp], 0
	je	$LN3@GetGreatWo@11

; 5673 : 	{
; 5674 : 		Database::Results kQuery;

	push	0
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 5675 : 		if(db->Execute(kQuery, "SELECT Audio FROM GreatWorks WHERE ID = ?"))

	push	-1
	push	OFFSET ??_C@_0CK@FLLIHCEL@SELECT?5Audio?5FROM?5GreatWorks?5WHE@
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetGreatWo@11

; 5676 : 		{
; 5677 : 			kQuery.Bind(1, eGreatWorkType);

	mov	eax, DWORD PTR _eGreatWorkType$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5678 : 
; 5679 : 			if(kQuery.Step())

	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetGreatWo@11

; 5680 : 			{
; 5681 : 				strGreatWorkAudio = kQuery.GetText(0);

	push	0
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T249057[ebp], eax
	cmp	DWORD PTR $T249057[ebp], 0
	je	SHORT $LN16@GetGreatWo@11
	mov	edx, DWORD PTR $T249057[ebp]
	push	edx
	lea	ecx, DWORD PTR _strGreatWorkAudio$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN2@GetGreatWo@11
$LN16@GetGreatWo@11:
	lea	ecx, DWORD PTR _strGreatWorkAudio$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN2@GetGreatWo@11:

; 5682 : 			}
; 5683 : 		}
; 5684 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN3@GetGreatWo@11:

; 5685 : 
; 5686 : 	return strGreatWorkAudio;

	lea	eax, DWORD PTR _strGreatWorkAudio$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T249043[ebp]
	or	ecx, 1
	mov	DWORD PTR $T249043[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strGreatWorkAudio$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5687 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$0:
	lea	ecx, DWORD PTR _strGreatWorkAudio$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$1:
	lea	ecx, DWORD PTR _kQuery$227068[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z$2:
	mov	eax, DWORD PTR $T249043[ebp]
	and	eax, 1
	je	$LN9@GetGreatWo@11
	and	DWORD PTR $T249043[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN9@GetGreatWo@11:
	ret	0
__ehhandler$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ENDP ; CultureHelpers::GetGreatWorkAudio
PUBLIC	??_C@_0PA@KJPOLLG@SELECT?5GreatWorkSlots?4ID?5from?5Gr@ ; `string'
PUBLIC	?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkSlot
;	COMDAT ??_C@_0PA@KJPOLLG@SELECT?5GreatWorkSlots?4ID?5from?5Gr@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0PA@KJPOLLG@SELECT?5GreatWorkSlots?4ID?5from?5Gr@ DB 'SELECT GreatW'
	DB	'orkSlots.ID from GreatWorks inner join GreatWorkClasses  on G'
	DB	'reatWorks.GreatWorkClassType == GreatWorkClasses .Type inner '
	DB	'join GreatWorkSlots on GreatWorkClasses.SlotType == GreatWork'
	DB	'Slots.Type where GreatWorks .ID = ? LIMIT 1', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z$0
__ehfuncinfo$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z
_TEXT	SEGMENT
_szSQL$227078 = -88					; size = 4
_kResults$227080 = -84					; size = 64
_eSlot$ = -20						; size = 4
_db$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z PROC ; CultureHelpers::GetGreatWorkSlot, COMDAT

; 5690 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5691 : 	GreatWorkSlotType eSlot = NO_GREAT_WORK_SLOT;

	mov	DWORD PTR _eSlot$[ebp], -1

; 5692 : 	Database::Connection* db = GC.GetGameDatabase();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR _db$[ebp], eax

; 5693 : 	if(db != NULL)

	cmp	DWORD PTR _db$[ebp], 0
	je	SHORT $LN3@GetGreatWo@12

; 5694 : 	{
; 5695 : 		const char* szSQL = "SELECT GreatWorkSlots.ID from GreatWorks "
; 5696 : 							"inner join GreatWorkClasses  on GreatWorks.GreatWorkClassType == GreatWorkClasses .Type "
; 5697 : 							"inner join GreatWorkSlots on GreatWorkClasses.SlotType == GreatWorkSlots.Type where GreatWorks .ID = ? LIMIT 1";

	mov	DWORD PTR _szSQL$227078[ebp], OFFSET ??_C@_0PA@KJPOLLG@SELECT?5GreatWorkSlots?4ID?5from?5Gr@

; 5698 : 
; 5699 : 		Database::Results kResults;

	push	0
	lea	ecx, DWORD PTR _kResults$227080[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5700 : 		if(db->Execute(kResults, szSQL))

	push	-1
	mov	ecx, DWORD PTR _szSQL$227078[ebp]
	push	ecx
	lea	edx, DWORD PTR _kResults$227080[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetGreatWo@12

; 5701 : 		{
; 5702 : 			kResults.Bind(1, eType);

	mov	ecx, DWORD PTR _eType$[ebp]
	push	ecx
	push	1
	lea	ecx, DWORD PTR _kResults$227080[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z

; 5703 : 
; 5704 : 			if(kResults.Step())

	lea	ecx, DWORD PTR _kResults$227080[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetGreatWo@12

; 5705 : 			{
; 5706 : 				eSlot = static_cast<GreatWorkSlotType>(kResults.GetInt(0));

	push	0
	lea	ecx, DWORD PTR _kResults$227080[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _eSlot$[ebp], eax
$LN2@GetGreatWo@12:

; 5707 : 			}
; 5708 : 		}
; 5709 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kResults$227080[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
$LN3@GetGreatWo@12:

; 5710 : 
; 5711 : 	return eSlot;

	mov	eax, DWORD PTR _eSlot$[ebp]

; 5712 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z$0:
	lea	ecx, DWORD PTR _kResults$227080[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z ENDP ; CultureHelpers::GetGreatWorkSlot
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$18
	DD	00H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$22
	DD	00H
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$26
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
$T249759 = -529						; size = 1
$T249627 = -472						; size = 4
$T249605 = -468						; size = 4
$T249604 = -464						; size = 4
$T249608 = -460						; size = 4
$T249552 = -456						; size = 4
$T249536 = -452						; size = 4
$T249520 = -448						; size = 4
$T249459 = -411						; size = 1
$T249446 = -410						; size = 1
$T249436 = -409						; size = 1
$T249372 = -384						; size = 4
$T249371 = -380						; size = 4
$T249370 = -376						; size = 4
$T249359 = -372						; size = 4
$T249343 = -368						; size = 4
$T249327 = -364						; size = 4
$T249270 = -329						; size = 1
$T249257 = -328						; size = 1
$T249253 = -327						; size = 1
$T249249 = -326						; size = 1
$T249245 = -325						; size = 1
$T249164 = -284						; size = 4
$T249120 = -280						; size = 4
$T249097 = -260						; size = 4
$T249096 = -256						; size = 4
$T249095 = -252						; size = 4
$T249094 = -248						; size = 4
$T249093 = -244						; size = 4
$T249092 = -240						; size = 4
$T249091 = -236						; size = 4
$T249090 = -232						; size = 4
$T249089 = -228						; size = 4
$T249088 = -224						; size = 4
$T249087 = -220						; size = 4
_kK$227342 = -216					; size = 4
_ePlayer$227180 = -212					; size = 4
_kK$227176 = -208					; size = 4
_aProcessedPlayers$227175 = -204			; size = 16
_kK$227165 = -188					; size = 4
_eFirstPlayer$227164 = -184				; size = 4
_kK$227158 = -180					; size = 4
_eEra$227150 = -176					; size = 4
_kK$227146 = -172					; size = 4
_aProcessedEras$227145 = -168				; size = 16
_kK$227135 = -152					; size = 4
_eFirstEra$227134 = -148				; size = 4
_bValid$227128 = -141					; size = 1
_bonusInfo$227129 = -140				; size = 4
_jJ$227124 = -136					; size = 4
_iGreatWork$227118 = -132				; size = 4
_work$227119 = -128					; size = 48
__$ArrayPad$ = -80					; size = 4
_iI$227114 = -76					; size = 4
_iNumSlots$227111 = -72					; size = 4
_iNumThemes$227123 = -68				; size = 4
_eArtClass$ = -64					; size = 4
_pCulture$ = -60					; size = 4
_aPlayersSeen$ = -56					; size = 16
_iCountArt$ = -40					; size = 4
_iCountArtifact$ = -36					; size = 4
_aErasSeen$ = -32					; size = 16
_eArtifactClass$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eOwner$ = 8						; size = 4
_pkEntry$ = 12						; size = 4
_aGreatWorkIndices$ = 16				; size = 4
?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; CultureHelpers::GetThemingBonusIndex, COMDAT

; 5715 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 644				; 00000284H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5716 : 	int iCountArt = 0;

	mov	DWORD PTR _iCountArt$[ebp], 0

; 5717 : 	int iCountArtifact = 0;

	mov	DWORD PTR _iCountArtifact$[ebp], 0

; 5718 : 	vector<EraTypes> aErasSeen;

	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5719 : 	vector<PlayerTypes> aPlayersSeen;

	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 5720 : 
; 5721 : 	CvGameCulture *pCulture = GC.getGame().GetGameCulture();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T249120[ebp], eax
	mov	ecx, DWORD PTR $T249120[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR _pCulture$[ebp], eax

; 5722 : 	GreatWorkClass eArtifactClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ARTIFACT");

	push	0
	push	OFFSET ??_C@_0BE@IALMEBOB@GREAT_WORK_ARTIFACT?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtifactClass$[ebp], eax

; 5723 : 	GreatWorkClass eArtClass = (GreatWorkClass)GC.getInfoTypeForString("GREAT_WORK_ART");

	push	0
	push	OFFSET ??_C@_0P@CLPANGAI@GREAT_WORK_ART?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eArtClass$[ebp], eax

; 5724 : 
; 5725 : 	if (pkEntry)

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	$LN47@GetTheming@4

; 5726 : 	{
; 5727 : #ifdef AUI_WARNING_FIXES
; 5728 : 		uint iNumSlots = pkEntry->GetGreatWorkCount();
; 5729 : #else
; 5730 : 		int iNumSlots = pkEntry->GetGreatWorkCount();

	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetGreatWorkCount@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetGreatWorkCount
	mov	DWORD PTR _iNumSlots$227111[ebp], eax

; 5731 : #endif
; 5732 : 		if (aGreatWorkIndices.size() != iNumSlots)

	mov	ecx, DWORD PTR _aGreatWorkIndices$[ebp]
	mov	edx, DWORD PTR _aGreatWorkIndices$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	eax, DWORD PTR _iNumSlots$227111[ebp]
	je	SHORT $LN46@GetTheming@4

; 5733 : 		{
; 5734 : 			return -1;  // No theming bonus if some slots still empty or too many entries

	mov	DWORD PTR $T249087[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T249087[ebp]
	jmp	$LN48@GetTheming@4
$LN46@GetTheming@4:

; 5735 : 		}
; 5736 : 
; 5737 : 		// Store info on the attributes of all our Great Works
; 5738 : #ifdef AUI_WARNING_FIXES
; 5739 : 		for (uint iI = 0; iI < iNumSlots; iI++)
; 5740 : #else
; 5741 : 		for (int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$227114[ebp], 0
	jmp	SHORT $LN45@GetTheming@4
$LN44@GetTheming@4:
	mov	ecx, DWORD PTR _iI$227114[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$227114[ebp], ecx
$LN45@GetTheming@4:
	mov	edx, DWORD PTR _iI$227114[ebp]
	cmp	edx, DWORD PTR _iNumSlots$227111[ebp]
	jge	$LN43@GetTheming@4

; 5742 : #endif
; 5743 : 		{
; 5744 : 			int iGreatWork = aGreatWorkIndices[iI];

	mov	eax, DWORD PTR _aGreatWorkIndices$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _iI$227114[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _iGreatWork$227118[ebp], eax

; 5745 : 			CvGreatWork work = pCulture->m_CurrentGreatWorks[iGreatWork];

	mov	ecx, DWORD PTR _iGreatWork$227118[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _pCulture$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T249164[ebp], ecx
	mov	eax, DWORD PTR $T249164[ebp]
	push	eax
	lea	ecx, DWORD PTR _work$227119[ebp]
	call	??0CvGreatWork@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 5746 : 
; 5747 : 			// Check Great Work class
; 5748 : 			if (work.m_eClassType == eArtifactClass)

	mov	ecx, DWORD PTR _work$227119[ebp+32]
	cmp	ecx, DWORD PTR _eArtifactClass$[ebp]
	jne	SHORT $LN42@GetTheming@4

; 5749 : 			{
; 5750 : 				iCountArtifact++;

	mov	edx, DWORD PTR _iCountArtifact$[ebp]
	add	edx, 1
	mov	DWORD PTR _iCountArtifact$[ebp], edx
	jmp	SHORT $LN41@GetTheming@4
$LN42@GetTheming@4:

; 5751 : 			}
; 5752 : 			else if (work.m_eClassType == eArtClass)

	mov	eax, DWORD PTR _work$227119[ebp+32]
	cmp	eax, DWORD PTR _eArtClass$[ebp]
	jne	SHORT $LN41@GetTheming@4

; 5753 : 			{
; 5754 : 				iCountArt++;

	mov	ecx, DWORD PTR _iCountArt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCountArt$[ebp], ecx
$LN41@GetTheming@4:

; 5755 : 			}
; 5756 : 
; 5757 : 			// Store era and player
; 5758 : 			aErasSeen.push_back(work.m_eEra);

	lea	edx, DWORD PTR _work$227119[ebp+40]
	push	edx
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back

; 5759 : 			aPlayersSeen.push_back(work.m_ePlayer);

	lea	eax, DWORD PTR _work$227119[ebp+44]
	push	eax
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 5760 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _work$227119[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN44@GetTheming@4
$LN43@GetTheming@4:

; 5761 : 
; 5762 : 		// Now see if we match a theme bonus
; 5763 : 		int iNumThemes = pkEntry->GetNumThemingBonuses();

	mov	ecx, DWORD PTR _pkEntry$[ebp]
	mov	edx, DWORD PTR [ecx+1008]
	mov	DWORD PTR _iNumThemes$227123[ebp], edx

; 5764 : 		for (int jJ = 0; jJ < iNumThemes; jJ++)

	mov	DWORD PTR _jJ$227124[ebp], 0
	jmp	SHORT $LN39@GetTheming@4
$LN38@GetTheming@4:
	mov	eax, DWORD PTR _jJ$227124[ebp]
	add	eax, 1
	mov	DWORD PTR _jJ$227124[ebp], eax
$LN39@GetTheming@4:
	mov	ecx, DWORD PTR _jJ$227124[ebp]
	cmp	ecx, DWORD PTR _iNumThemes$227123[ebp]
	jge	$LN47@GetTheming@4

; 5765 : 		{
; 5766 : 			bool bValid = true;

	mov	BYTE PTR _bValid$227128[ebp], 1

; 5767 : 
; 5768 : 			// Can we rule this out based on type?
; 5769 : 			CvThemingBonusInfo *bonusInfo = pkEntry->GetThemingBonusInfo(jJ);

	mov	edx, DWORD PTR _jJ$227124[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	call	?GetThemingBonusInfo@CvBuildingEntry@@QBEPAVCvThemingBonusInfo@@H@Z ; CvBuildingEntry::GetThemingBonusInfo
	mov	DWORD PTR _bonusInfo$227129[ebp], eax

; 5770 : 			if (bValid && bonusInfo->IsMustBeArt() && iCountArtifact > 0)

	movzx	eax, BYTE PTR _bValid$227128[ebp]
	test	eax, eax
	je	SHORT $LN36@GetTheming@4
	mov	ecx, DWORD PTR _bonusInfo$227129[ebp]
	mov	dl, BYTE PTR [ecx+34]
	mov	BYTE PTR $T249245[ebp], dl
	movzx	eax, BYTE PTR $T249245[ebp]
	test	eax, eax
	je	SHORT $LN36@GetTheming@4
	cmp	DWORD PTR _iCountArtifact$[ebp], 0
	jle	SHORT $LN36@GetTheming@4

; 5771 : 			{
; 5772 : 				bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN36@GetTheming@4:

; 5773 : 			}
; 5774 : 			if (bValid && bonusInfo->IsMustBeArtifact() && iCountArt > 0)

	movzx	ecx, BYTE PTR _bValid$227128[ebp]
	test	ecx, ecx
	je	SHORT $LN35@GetTheming@4
	mov	edx, DWORD PTR _bonusInfo$227129[ebp]
	mov	al, BYTE PTR [edx+35]
	mov	BYTE PTR $T249249[ebp], al
	movzx	ecx, BYTE PTR $T249249[ebp]
	test	ecx, ecx
	je	SHORT $LN35@GetTheming@4
	cmp	DWORD PTR _iCountArt$[ebp], 0
	jle	SHORT $LN35@GetTheming@4

; 5775 : 			{
; 5776 : 				bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN35@GetTheming@4:

; 5777 : 			}
; 5778 : 			if (bValid && bonusInfo->IsMustBeEqualArtArtifact() && iCountArt != iCountArtifact)

	movzx	edx, BYTE PTR _bValid$227128[ebp]
	test	edx, edx
	je	SHORT $LN34@GetTheming@4
	mov	eax, DWORD PTR _bonusInfo$227129[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR $T249253[ebp], cl
	movzx	edx, BYTE PTR $T249253[ebp]
	test	edx, edx
	je	SHORT $LN34@GetTheming@4
	mov	eax, DWORD PTR _iCountArt$[ebp]
	cmp	eax, DWORD PTR _iCountArtifact$[ebp]
	je	SHORT $LN34@GetTheming@4

; 5779 : 			{
; 5780 : 				bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN34@GetTheming@4:

; 5781 : 			}
; 5782 : 
; 5783 : 			// Can we rule this out based on era?
; 5784 : 			if (bValid && bonusInfo->IsSameEra())

	movzx	ecx, BYTE PTR _bValid$227128[ebp]
	test	ecx, ecx
	je	SHORT $LN33@GetTheming@4
	mov	edx, DWORD PTR _bonusInfo$227129[ebp]
	mov	al, BYTE PTR [edx+32]
	mov	BYTE PTR $T249257[ebp], al
	movzx	ecx, BYTE PTR $T249257[ebp]
	test	ecx, ecx
	je	SHORT $LN33@GetTheming@4

; 5785 : 			{
; 5786 : 				int eFirstEra = aErasSeen[0];

	xor	edx, edx
	shl	edx, 2
	mov	eax, DWORD PTR _aErasSeen$[ebp+4]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR _eFirstEra$227134[ebp], ecx

; 5787 : 				for (unsigned int kK = 1; kK < aErasSeen.size(); kK++)

	mov	DWORD PTR _kK$227135[ebp], 1
	jmp	SHORT $LN142@GetTheming@4
$LN31@GetTheming@4:
	mov	edx, DWORD PTR _kK$227135[ebp]
	add	edx, 1
	mov	DWORD PTR _kK$227135[ebp], edx
$LN142@GetTheming@4:
	mov	eax, DWORD PTR _aErasSeen$[ebp+8]
	sub	eax, DWORD PTR _aErasSeen$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _kK$227135[ebp], eax
	jae	SHORT $LN33@GetTheming@4

; 5788 : 				{
; 5789 : 					if (aErasSeen[kK] != eFirstEra)

	mov	ecx, DWORD PTR _aErasSeen$[ebp+4]
	mov	edx, DWORD PTR _kK$227135[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _eFirstEra$227134[ebp]
	je	SHORT $LN29@GetTheming@4

; 5790 : 					{
; 5791 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN29@GetTheming@4:

; 5792 : 					}
; 5793 : 				}

	jmp	SHORT $LN31@GetTheming@4
$LN33@GetTheming@4:

; 5794 : 			}
; 5795 : 			if (bValid && bonusInfo->IsUniqueEras())

	movzx	ecx, BYTE PTR _bValid$227128[ebp]
	test	ecx, ecx
	je	$LN28@GetTheming@4
	mov	edx, DWORD PTR _bonusInfo$227129[ebp]
	mov	al, BYTE PTR [edx+33]
	mov	BYTE PTR $T249270[ebp], al
	movzx	ecx, BYTE PTR $T249270[ebp]
	test	ecx, ecx
	je	$LN28@GetTheming@4

; 5796 : 			{
; 5797 : 				vector<EraTypes> aProcessedEras;

	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	call	??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 5798 : 				aProcessedEras.push_back(aErasSeen[0]);

	xor	edx, edx
	shl	edx, 2
	add	edx, DWORD PTR _aErasSeen$[ebp+4]
	push	edx
	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back

; 5799 : 				for (unsigned int kK = 1; kK < aErasSeen.size(); kK++)

	mov	DWORD PTR _kK$227146[ebp], 1
	jmp	SHORT $LN171@GetTheming@4
$LN26@GetTheming@4:
	mov	eax, DWORD PTR _kK$227146[ebp]
	add	eax, 1
	mov	DWORD PTR _kK$227146[ebp], eax
$LN171@GetTheming@4:
	mov	ecx, DWORD PTR _aErasSeen$[ebp+8]
	sub	ecx, DWORD PTR _aErasSeen$[ebp+4]
	sar	ecx, 2
	cmp	DWORD PTR _kK$227146[ebp], ecx
	jae	$LN25@GetTheming@4

; 5800 : 				{
; 5801 : 					EraTypes eEra = aErasSeen[kK];

	mov	edx, DWORD PTR _aErasSeen$[ebp+4]
	mov	eax, DWORD PTR _kK$227146[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _eEra$227150[ebp], ecx

; 5802 : 					if (std::find(aProcessedEras.begin(), aProcessedEras.end(), eEra) != aProcessedEras.end())

	mov	edx, DWORD PTR _aProcessedEras$227145[ebp+8]
	mov	DWORD PTR $T249327[ebp], edx
	mov	eax, DWORD PTR $T249327[ebp]
	mov	DWORD PTR $T249091[ebp], eax
	mov	ecx, DWORD PTR _aProcessedEras$227145[ebp+8]
	mov	DWORD PTR $T249343[ebp], ecx
	mov	edx, DWORD PTR $T249343[ebp]
	mov	DWORD PTR $T249088[ebp], edx
	mov	eax, DWORD PTR _aProcessedEras$227145[ebp+4]
	mov	DWORD PTR $T249359[ebp], eax
	mov	ecx, DWORD PTR $T249359[ebp]
	mov	DWORD PTR $T249089[ebp], ecx
	mov	edx, DWORD PTR $T249088[ebp]
	mov	DWORD PTR $T249372[ebp], edx
	mov	eax, DWORD PTR $T249089[ebp]
	mov	DWORD PTR $T249371[ebp], eax
	lea	ecx, DWORD PTR _eEra$227150[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249372[ebp]
	push	edx
	mov	eax, DWORD PTR $T249371[ebp]
	push	eax
	lea	ecx, DWORD PTR $T249370[ebp]
	push	ecx
	call	??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z ; std::_Find<std::_Vector_iterator<enum EraTypes,std::allocator<enum EraTypes> >,enum EraTypes>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T249371[ebp], edx
	mov	eax, DWORD PTR $T249371[ebp]
	mov	DWORD PTR $T249090[ebp], eax
	mov	ecx, DWORD PTR $T249090[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T249091[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN24@GetTheming@4

; 5803 : 					{
; 5804 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0

; 5805 : 					}
; 5806 : 					else

	jmp	SHORT $LN23@GetTheming@4
$LN24@GetTheming@4:

; 5807 : 					{
; 5808 : 						aProcessedEras.push_back(eEra);

	lea	edx, DWORD PTR _eEra$227150[ebp]
	push	edx
	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	call	?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
$LN23@GetTheming@4:

; 5809 : 					}
; 5810 : 				}

	jmp	$LN26@GetTheming@4
$LN25@GetTheming@4:

; 5811 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
$LN28@GetTheming@4:

; 5812 : 
; 5813 : 			// Can we rule this out based on player?
; 5814 : 			if (bValid && bonusInfo->IsRequiresOwner())

	movzx	eax, BYTE PTR _bValid$227128[ebp]
	test	eax, eax
	je	SHORT $LN22@GetTheming@4
	mov	ecx, DWORD PTR _bonusInfo$227129[ebp]
	mov	dl, BYTE PTR [ecx+37]
	mov	BYTE PTR $T249436[ebp], dl
	movzx	eax, BYTE PTR $T249436[ebp]
	test	eax, eax
	je	SHORT $LN22@GetTheming@4

; 5815 : 			{
; 5816 : 				for (unsigned int kK = 0; kK < aPlayersSeen.size(); kK++)

	mov	DWORD PTR _kK$227158[ebp], 0
	jmp	SHORT $LN227@GetTheming@4
$LN20@GetTheming@4:
	mov	ecx, DWORD PTR _kK$227158[ebp]
	add	ecx, 1
	mov	DWORD PTR _kK$227158[ebp], ecx
$LN227@GetTheming@4:
	mov	edx, DWORD PTR _aPlayersSeen$[ebp+8]
	sub	edx, DWORD PTR _aPlayersSeen$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _kK$227158[ebp], edx
	jae	SHORT $LN22@GetTheming@4

; 5817 : 				{
; 5818 : 					if (aPlayersSeen[kK] != eOwner)

	mov	eax, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	ecx, DWORD PTR _kK$227158[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _eOwner$[ebp]
	je	SHORT $LN18@GetTheming@4

; 5819 : 					{
; 5820 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN18@GetTheming@4:

; 5821 : 					}
; 5822 : 				}

	jmp	SHORT $LN20@GetTheming@4
$LN22@GetTheming@4:

; 5823 : 			}
; 5824 : 			if (bValid && bonusInfo->IsRequiresSamePlayer())

	movzx	eax, BYTE PTR _bValid$227128[ebp]
	test	eax, eax
	je	SHORT $LN17@GetTheming@4
	mov	ecx, DWORD PTR _bonusInfo$227129[ebp]
	mov	dl, BYTE PTR [ecx+39]
	mov	BYTE PTR $T249446[ebp], dl
	movzx	eax, BYTE PTR $T249446[ebp]
	test	eax, eax
	je	SHORT $LN17@GetTheming@4

; 5825 : 			{
; 5826 : 				int eFirstPlayer = aPlayersSeen[0];

	xor	ecx, ecx
	shl	ecx, 2
	mov	edx, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _eFirstPlayer$227164[ebp], eax

; 5827 : 				for (unsigned int kK = 1; kK < aPlayersSeen.size(); kK++)

	mov	DWORD PTR _kK$227165[ebp], 1
	jmp	SHORT $LN235@GetTheming@4
$LN15@GetTheming@4:
	mov	ecx, DWORD PTR _kK$227165[ebp]
	add	ecx, 1
	mov	DWORD PTR _kK$227165[ebp], ecx
$LN235@GetTheming@4:
	mov	edx, DWORD PTR _aPlayersSeen$[ebp+8]
	sub	edx, DWORD PTR _aPlayersSeen$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _kK$227165[ebp], edx
	jae	SHORT $LN17@GetTheming@4

; 5828 : 				{
; 5829 : 					if (aPlayersSeen[kK] != eFirstPlayer)

	mov	eax, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	ecx, DWORD PTR _kK$227165[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _eFirstPlayer$227164[ebp]
	je	SHORT $LN13@GetTheming@4

; 5830 : 					{
; 5831 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN13@GetTheming@4:

; 5832 : 					}
; 5833 : 				}

	jmp	SHORT $LN15@GetTheming@4
$LN17@GetTheming@4:

; 5834 : 			}
; 5835 : 			if (bValid && bonusInfo->IsRequiresUniquePlayers())

	movzx	eax, BYTE PTR _bValid$227128[ebp]
	test	eax, eax
	je	$LN12@GetTheming@4
	mov	ecx, DWORD PTR _bonusInfo$227129[ebp]
	mov	dl, BYTE PTR [ecx+40]
	mov	BYTE PTR $T249459[ebp], dl
	movzx	eax, BYTE PTR $T249459[ebp]
	test	eax, eax
	je	$LN12@GetTheming@4

; 5836 : 			{
; 5837 : 				vector<PlayerTypes> aProcessedPlayers;

	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	call	??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 5838 : 				aProcessedPlayers.push_back(aPlayersSeen[0]);

	xor	ecx, ecx
	shl	ecx, 2
	add	ecx, DWORD PTR _aPlayersSeen$[ebp+4]
	push	ecx
	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back

; 5839 : 				for (unsigned int kK = 1; kK < aPlayersSeen.size(); kK++)

	mov	DWORD PTR _kK$227176[ebp], 1
	jmp	SHORT $LN266@GetTheming@4
$LN10@GetTheming@4:
	mov	edx, DWORD PTR _kK$227176[ebp]
	add	edx, 1
	mov	DWORD PTR _kK$227176[ebp], edx
$LN266@GetTheming@4:
	mov	eax, DWORD PTR _aPlayersSeen$[ebp+8]
	sub	eax, DWORD PTR _aPlayersSeen$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _kK$227176[ebp], eax
	jae	$LN9@GetTheming@4

; 5840 : 				{
; 5841 : 					PlayerTypes ePlayer = aPlayersSeen[kK];

	mov	ecx, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	edx, DWORD PTR _kK$227176[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ePlayer$227180[ebp], eax

; 5842 : 					if (std::find(aProcessedPlayers.begin(), aProcessedPlayers.end(), ePlayer) != aProcessedPlayers.end())

	mov	ecx, DWORD PTR _aProcessedPlayers$227175[ebp+8]
	mov	DWORD PTR $T249520[ebp], ecx
	mov	edx, DWORD PTR $T249520[ebp]
	mov	DWORD PTR $T249095[ebp], edx
	mov	eax, DWORD PTR _aProcessedPlayers$227175[ebp+8]
	mov	DWORD PTR $T249536[ebp], eax
	mov	ecx, DWORD PTR $T249536[ebp]
	mov	DWORD PTR $T249092[ebp], ecx
	mov	edx, DWORD PTR _aProcessedPlayers$227175[ebp+4]
	mov	DWORD PTR $T249552[ebp], edx
	mov	eax, DWORD PTR $T249552[ebp]
	mov	DWORD PTR $T249093[ebp], eax
	mov	ecx, DWORD PTR $T249093[ebp]
	mov	DWORD PTR $T249627[ebp], ecx
	mov	edx, DWORD PTR $T249092[ebp]
	mov	DWORD PTR $T249605[ebp], edx
	mov	eax, DWORD PTR $T249627[ebp]
	mov	DWORD PTR $T249604[ebp], eax
	jmp	SHORT $LN300@GetTheming@4
$LN292@GetTheming@4:
	mov	ecx, DWORD PTR $T249604[ebp]
	add	ecx, 4
	mov	DWORD PTR $T249604[ebp], ecx
$LN300@GetTheming@4:
	mov	edx, DWORD PTR $T249604[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T249605[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN291@GetTheming@4
	mov	eax, DWORD PTR $T249604[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ePlayer$227180[ebp]
	jne	SHORT $LN290@GetTheming@4
	jmp	SHORT $LN291@GetTheming@4
$LN290@GetTheming@4:
	jmp	SHORT $LN292@GetTheming@4
$LN291@GetTheming@4:
	mov	edx, DWORD PTR $T249604[ebp]
	mov	DWORD PTR $T249608[ebp], edx
	mov	eax, DWORD PTR $T249608[ebp]
	mov	DWORD PTR $T249627[ebp], eax
	mov	ecx, DWORD PTR $T249627[ebp]
	mov	DWORD PTR $T249094[ebp], ecx
	mov	edx, DWORD PTR $T249094[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T249095[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN8@GetTheming@4

; 5843 : 					{
; 5844 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0

; 5845 : 					}
; 5846 : 					else

	jmp	SHORT $LN7@GetTheming@4
$LN8@GetTheming@4:

; 5847 : 					{
; 5848 : 						aProcessedPlayers.push_back(ePlayer);

	lea	eax, DWORD PTR _ePlayer$227180[ebp]
	push	eax
	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	call	?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back
$LN7@GetTheming@4:

; 5849 : 					}
; 5850 : 				}

	jmp	$LN10@GetTheming@4
$LN9@GetTheming@4:

; 5851 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
$LN12@GetTheming@4:

; 5852 : 			if (bValid && bonusInfo->IsRequiresAnyButOwner())

	movzx	ecx, BYTE PTR _bValid$227128[ebp]
	test	ecx, ecx
	je	SHORT $LN6@GetTheming@4
	mov	edx, DWORD PTR _bonusInfo$227129[ebp]
	mov	al, BYTE PTR [edx+38]
	mov	BYTE PTR $T249759[ebp], al
	movzx	ecx, BYTE PTR $T249759[ebp]
	test	ecx, ecx
	je	SHORT $LN6@GetTheming@4

; 5853 : 			{
; 5854 : 				for (unsigned int kK = 0; kK < aPlayersSeen.size(); kK++)

	mov	DWORD PTR _kK$227342[ebp], 0
	jmp	SHORT $LN360@GetTheming@4
$LN4@GetTheming@4:
	mov	edx, DWORD PTR _kK$227342[ebp]
	add	edx, 1
	mov	DWORD PTR _kK$227342[ebp], edx
$LN360@GetTheming@4:
	mov	eax, DWORD PTR _aPlayersSeen$[ebp+8]
	sub	eax, DWORD PTR _aPlayersSeen$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _kK$227342[ebp], eax
	jae	SHORT $LN6@GetTheming@4

; 5855 : 				{
; 5856 : 					if (aPlayersSeen[kK] == eOwner)

	mov	ecx, DWORD PTR _aPlayersSeen$[ebp+4]
	mov	edx, DWORD PTR _kK$227342[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _eOwner$[ebp]
	jne	SHORT $LN2@GetTheming@4

; 5857 : 					{
; 5858 : 						bValid = false;

	mov	BYTE PTR _bValid$227128[ebp], 0
$LN2@GetTheming@4:

; 5859 : 					}
; 5860 : 				}

	jmp	SHORT $LN4@GetTheming@4
$LN6@GetTheming@4:

; 5861 : 			}
; 5862 : 
; 5863 : 			// Haven't ruled it out?  Then this is it (ASSUMES THEMING BONUSES FOR A BUILDING ARE IN SORTED ORDER IN DB!)
; 5864 : 			if (bValid)

	movzx	ecx, BYTE PTR _bValid$227128[ebp]
	test	ecx, ecx
	je	SHORT $LN1@GetTheming@4

; 5865 : 			{
; 5866 : 				return jJ;

	mov	edx, DWORD PTR _jJ$227124[ebp]
	mov	DWORD PTR $T249096[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T249096[ebp]
	jmp	SHORT $LN48@GetTheming@4
$LN1@GetTheming@4:

; 5867 : 			}
; 5868 : 		}

	jmp	$LN38@GetTheming@4
$LN47@GetTheming@4:

; 5869 : 	}
; 5870 : 	return -1;

	mov	DWORD PTR $T249097[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T249097[ebp]
$LN48@GetTheming@4:

; 5871 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$1:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$7:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$9:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$2:
	lea	ecx, DWORD PTR _work$227119[ebp]
	jmp	??1CvGreatWork@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$3:
	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	jmp	??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$15:
	lea	ecx, DWORD PTR _aProcessedEras$227145[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$4:
	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	jmp	??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$18:
	lea	ecx, DWORD PTR _aProcessedPlayers$227175[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$20:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$22:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$24:
	lea	ecx, DWORD PTR _aPlayersSeen$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z$26:
	lea	ecx, DWORD PTR _aErasSeen$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__ehhandler$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-648]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetThemingBonusIndex@CultureHelpers@@YAHW4PlayerTypes@@PAVCvBuildingEntry@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; CultureHelpers::GetThemingBonusIndex
; Function compile flags: /Odtp
;	COMDAT ?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z
_TEXT	SEGMENT
$T250393 = -100						; size = 4
$T250371 = -96						; size = 4
$T250370 = -92						; size = 4
$T250374 = -88						; size = 4
$T250318 = -84						; size = 4
$T250302 = -80						; size = 4
$T250286 = -76						; size = 4
$T250276 = -72						; size = 1
$T250269 = -71						; size = 1
$T250265 = -70						; size = 1
$T250261 = -69						; size = 1
$T250249 = -68						; size = 4
$T250227 = -64						; size = 4
$T250226 = -60						; size = 4
$T250230 = -56						; size = 4
$T250174 = -52						; size = 4
$T250158 = -48						; size = 4
$T250142 = -44						; size = 4
$T250132 = -38						; size = 1
$T250125 = -37						; size = 1
$T250121 = -36						; size = 4
$T250120 = -32						; size = 4
$T250119 = -28						; size = 4
$T250118 = -24						; size = 4
$T250117 = -20						; size = 4
$T250116 = -16						; size = 4
$T250115 = -12						; size = 4
$T250114 = -8						; size = 4
_bValid$ = -1						; size = 1
_pBonusInfo$ = 8					; size = 4
_eEra$ = 12						; size = 4
_aErasSeen$ = 16					; size = 4
_ePlayer$ = 20						; size = 4
_aPlayersSeen$ = 24					; size = 4
_eOwner$ = 28						; size = 4
?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z PROC ; CultureHelpers::IsValidForThemingBonus, COMDAT

; 5874 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 5875 : 	bool bValid = true;

	mov	BYTE PTR _bValid$[ebp], 1

; 5876 : 
; 5877 : 	// Can we rule this out based on era?
; 5878 : 	if (bValid && pBonusInfo->IsSameEra())

	movzx	eax, BYTE PTR _bValid$[ebp]
	test	eax, eax
	je	SHORT $LN12@IsValidFor
	mov	ecx, DWORD PTR _pBonusInfo$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR $T250125[ebp], dl
	movzx	eax, BYTE PTR $T250125[ebp]
	test	eax, eax
	je	SHORT $LN12@IsValidFor

; 5879 : 	{
; 5880 : 		if (eEra != aErasSeen[0])

	xor	ecx, ecx
	shl	ecx, 2
	mov	edx, DWORD PTR _aErasSeen$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _eEra$[ebp]
	cmp	edx, DWORD PTR [ecx+eax]
	je	SHORT $LN12@IsValidFor

; 5881 : 		{
; 5882 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN12@IsValidFor:

; 5883 : 		}
; 5884 : 	}
; 5885 : 	if (bValid && pBonusInfo->IsUniqueEras())

	movzx	eax, BYTE PTR _bValid$[ebp]
	test	eax, eax
	je	$LN10@IsValidFor
	mov	ecx, DWORD PTR _pBonusInfo$[ebp]
	mov	dl, BYTE PTR [ecx+33]
	mov	BYTE PTR $T250132[ebp], dl
	movzx	eax, BYTE PTR $T250132[ebp]
	test	eax, eax
	je	$LN10@IsValidFor

; 5886 : 	{
; 5887 : 		if (std::find(aErasSeen.begin(), aErasSeen.end(), eEra) != aErasSeen.end())

	mov	ecx, DWORD PTR _aErasSeen$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250142[ebp], edx
	mov	eax, DWORD PTR $T250142[ebp]
	mov	DWORD PTR $T250117[ebp], eax
	mov	ecx, DWORD PTR _aErasSeen$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250158[ebp], edx
	mov	eax, DWORD PTR $T250158[ebp]
	mov	DWORD PTR $T250114[ebp], eax
	mov	ecx, DWORD PTR _aErasSeen$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T250174[ebp], edx
	mov	eax, DWORD PTR $T250174[ebp]
	mov	DWORD PTR $T250115[ebp], eax
	mov	ecx, DWORD PTR $T250115[ebp]
	mov	DWORD PTR $T250249[ebp], ecx
	mov	edx, DWORD PTR $T250114[ebp]
	mov	DWORD PTR $T250227[ebp], edx
	mov	eax, DWORD PTR $T250249[ebp]
	mov	DWORD PTR $T250226[ebp], eax
	jmp	SHORT $LN51@IsValidFor
$LN43@IsValidFor:
	mov	ecx, DWORD PTR $T250226[ebp]
	add	ecx, 4
	mov	DWORD PTR $T250226[ebp], ecx
$LN51@IsValidFor:
	mov	edx, DWORD PTR $T250226[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T250227[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN42@IsValidFor
	mov	eax, DWORD PTR $T250226[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _eEra$[ebp]
	jne	SHORT $LN41@IsValidFor
	jmp	SHORT $LN42@IsValidFor
$LN41@IsValidFor:
	jmp	SHORT $LN43@IsValidFor
$LN42@IsValidFor:
	mov	edx, DWORD PTR $T250226[ebp]
	mov	DWORD PTR $T250230[ebp], edx
	mov	eax, DWORD PTR $T250230[ebp]
	mov	DWORD PTR $T250249[ebp], eax
	mov	ecx, DWORD PTR $T250249[ebp]
	mov	DWORD PTR $T250116[ebp], ecx
	mov	edx, DWORD PTR $T250116[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T250117[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN10@IsValidFor

; 5888 : 		{
; 5889 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN10@IsValidFor:

; 5890 : 		}
; 5891 : 	}
; 5892 : 
; 5893 : 	// Can we rule this out based on player?
; 5894 : 	if (bValid && pBonusInfo->IsRequiresOwner())

	movzx	eax, BYTE PTR _bValid$[ebp]
	test	eax, eax
	je	SHORT $LN8@IsValidFor
	mov	ecx, DWORD PTR _pBonusInfo$[ebp]
	mov	dl, BYTE PTR [ecx+37]
	mov	BYTE PTR $T250261[ebp], dl
	movzx	eax, BYTE PTR $T250261[ebp]
	test	eax, eax
	je	SHORT $LN8@IsValidFor

; 5895 : 	{
; 5896 : 		if (ePlayer != eOwner)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	cmp	ecx, DWORD PTR _eOwner$[ebp]
	je	SHORT $LN8@IsValidFor

; 5897 : 		{
; 5898 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN8@IsValidFor:

; 5899 : 		}
; 5900 : 	}
; 5901 : 	if (bValid && pBonusInfo->IsRequiresAnyButOwner())

	movzx	edx, BYTE PTR _bValid$[ebp]
	test	edx, edx
	je	SHORT $LN6@IsValidFor
	mov	eax, DWORD PTR _pBonusInfo$[ebp]
	mov	cl, BYTE PTR [eax+38]
	mov	BYTE PTR $T250265[ebp], cl
	movzx	edx, BYTE PTR $T250265[ebp]
	test	edx, edx
	je	SHORT $LN6@IsValidFor

; 5902 : 	{
; 5903 : 		if (ePlayer == eOwner)

	mov	eax, DWORD PTR _ePlayer$[ebp]
	cmp	eax, DWORD PTR _eOwner$[ebp]
	jne	SHORT $LN6@IsValidFor

; 5904 : 		{
; 5905 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN6@IsValidFor:

; 5906 : 		}
; 5907 : 	}
; 5908 : 	if (bValid && pBonusInfo->IsRequiresSamePlayer())

	movzx	ecx, BYTE PTR _bValid$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@IsValidFor
	mov	edx, DWORD PTR _pBonusInfo$[ebp]
	mov	al, BYTE PTR [edx+39]
	mov	BYTE PTR $T250269[ebp], al
	movzx	ecx, BYTE PTR $T250269[ebp]
	test	ecx, ecx
	je	SHORT $LN4@IsValidFor

; 5909 : 	{
; 5910 : 		if (ePlayer != aPlayersSeen[0])

	xor	edx, edx
	shl	edx, 2
	mov	eax, DWORD PTR _aPlayersSeen$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _ePlayer$[ebp]
	cmp	eax, DWORD PTR [edx+ecx]
	je	SHORT $LN4@IsValidFor

; 5911 : 		{
; 5912 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN4@IsValidFor:

; 5913 : 		}
; 5914 : 
; 5915 : 	}
; 5916 : 	if (bValid && pBonusInfo->IsRequiresUniquePlayers())

	movzx	ecx, BYTE PTR _bValid$[ebp]
	test	ecx, ecx
	je	$LN2@IsValidFor
	mov	edx, DWORD PTR _pBonusInfo$[ebp]
	mov	al, BYTE PTR [edx+40]
	mov	BYTE PTR $T250276[ebp], al
	movzx	ecx, BYTE PTR $T250276[ebp]
	test	ecx, ecx
	je	$LN2@IsValidFor

; 5917 : 	{
; 5918 : 		if (std::find(aPlayersSeen.begin(), aPlayersSeen.end(), ePlayer) != aPlayersSeen.end())

	mov	edx, DWORD PTR _aPlayersSeen$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T250286[ebp], eax
	mov	ecx, DWORD PTR $T250286[ebp]
	mov	DWORD PTR $T250121[ebp], ecx
	mov	edx, DWORD PTR _aPlayersSeen$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T250302[ebp], eax
	mov	ecx, DWORD PTR $T250302[ebp]
	mov	DWORD PTR $T250118[ebp], ecx
	mov	edx, DWORD PTR _aPlayersSeen$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250318[ebp], eax
	mov	ecx, DWORD PTR $T250318[ebp]
	mov	DWORD PTR $T250119[ebp], ecx
	mov	edx, DWORD PTR $T250119[ebp]
	mov	DWORD PTR $T250393[ebp], edx
	mov	eax, DWORD PTR $T250118[ebp]
	mov	DWORD PTR $T250371[ebp], eax
	mov	ecx, DWORD PTR $T250393[ebp]
	mov	DWORD PTR $T250370[ebp], ecx
	jmp	SHORT $LN103@IsValidFor
$LN95@IsValidFor:
	mov	edx, DWORD PTR $T250370[ebp]
	add	edx, 4
	mov	DWORD PTR $T250370[ebp], edx
$LN103@IsValidFor:
	mov	eax, DWORD PTR $T250370[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T250371[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN94@IsValidFor
	mov	ecx, DWORD PTR $T250370[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _ePlayer$[ebp]
	jne	SHORT $LN93@IsValidFor
	jmp	SHORT $LN94@IsValidFor
$LN93@IsValidFor:
	jmp	SHORT $LN95@IsValidFor
$LN94@IsValidFor:
	mov	eax, DWORD PTR $T250370[ebp]
	mov	DWORD PTR $T250374[ebp], eax
	mov	ecx, DWORD PTR $T250374[ebp]
	mov	DWORD PTR $T250393[ebp], ecx
	mov	edx, DWORD PTR $T250393[ebp]
	mov	DWORD PTR $T250120[ebp], edx
	mov	eax, DWORD PTR $T250120[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T250121[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@IsValidFor

; 5919 : 		{
; 5920 : 			bValid = false;

	mov	BYTE PTR _bValid$[ebp], 0
$LN2@IsValidFor:

; 5921 : 		}
; 5922 : 	}
; 5923 : 
; 5924 : 	return bValid;

	mov	al, BYTE PTR _bValid$[ebp]

; 5925 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsValidForThemingBonus@CultureHelpers@@YA_NPAVCvThemingBonusInfo@@W4EraTypes@@AAV?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4PlayerTypes@@AAV?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@5@3@Z ENDP ; CultureHelpers::IsValidForThemingBonus
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z
_TEXT	SEGMENT
$T250531 = -52						; size = 4
$T250509 = -48						; size = 4
$T250508 = -44						; size = 4
$T250512 = -40						; size = 4
$T250456 = -36						; size = 4
$T250440 = -32						; size = 4
$T250430 = -28						; size = 4
$T250420 = -24						; size = 4
$T250407 = -20						; size = 4
$T250406 = -16						; size = 4
$T250405 = -12						; size = 4
$T250404 = -8						; size = 4
_iI$227399 = -4						; size = 4
_aWorks$ = 8						; size = 4
_aWorksChosen$ = 12					; size = 4
?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z PROC ; CultureHelpers::FindWorkNotChosen, COMDAT

; 5928 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 5929 : 	for (unsigned int iI = 0; iI < aWorks.size(); iI++)

	mov	DWORD PTR _iI$227399[ebp], 0
	jmp	SHORT $LN7@FindWorkNo
$LN3@FindWorkNo:
	mov	eax, DWORD PTR _iI$227399[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$227399[ebp], eax
$LN7@FindWorkNo:
	mov	ecx, DWORD PTR _aWorks$[ebp]
	mov	edx, DWORD PTR _aWorks$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR _iI$227399[ebp], eax
	jae	$LN2@FindWorkNo

; 5930 : 	{
; 5931 : 		if (find (aWorksChosen.begin(), aWorksChosen.end(), aWorks[iI].m_iGreatWorkIndex) == aWorksChosen.end())

	mov	edx, DWORD PTR _aWorksChosen$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T250420[ebp], eax
	mov	ecx, DWORD PTR $T250420[ebp]
	mov	DWORD PTR $T250407[ebp], ecx
	mov	edx, DWORD PTR _iI$227399[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _aWorks$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T250430[ebp], edx
	mov	ecx, DWORD PTR _aWorksChosen$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250440[ebp], edx
	mov	eax, DWORD PTR $T250440[ebp]
	mov	DWORD PTR $T250404[ebp], eax
	mov	ecx, DWORD PTR _aWorksChosen$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T250456[ebp], edx
	mov	eax, DWORD PTR $T250456[ebp]
	mov	DWORD PTR $T250405[ebp], eax
	mov	ecx, DWORD PTR $T250405[ebp]
	mov	DWORD PTR $T250531[ebp], ecx
	mov	edx, DWORD PTR $T250404[ebp]
	mov	DWORD PTR $T250509[ebp], edx
	mov	eax, DWORD PTR $T250531[ebp]
	mov	DWORD PTR $T250508[ebp], eax
	jmp	SHORT $LN41@FindWorkNo
$LN33@FindWorkNo:
	mov	ecx, DWORD PTR $T250508[ebp]
	add	ecx, 4
	mov	DWORD PTR $T250508[ebp], ecx
$LN41@FindWorkNo:
	mov	edx, DWORD PTR $T250508[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T250509[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN32@FindWorkNo
	mov	eax, DWORD PTR $T250508[ebp]
	mov	ecx, DWORD PTR $T250430[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN31@FindWorkNo
	jmp	SHORT $LN32@FindWorkNo
$LN31@FindWorkNo:
	jmp	SHORT $LN33@FindWorkNo
$LN32@FindWorkNo:
	mov	eax, DWORD PTR $T250508[ebp]
	mov	DWORD PTR $T250512[ebp], eax
	mov	ecx, DWORD PTR $T250512[ebp]
	mov	DWORD PTR $T250531[ebp], ecx
	mov	edx, DWORD PTR $T250531[ebp]
	mov	DWORD PTR $T250406[ebp], edx
	mov	eax, DWORD PTR $T250406[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T250407[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@FindWorkNo

; 5932 : 		{
; 5933 : 			return aWorks[iI].m_iGreatWorkIndex;

	mov	eax, DWORD PTR _iI$227399[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _aWorks$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+edx]
	jmp	SHORT $LN5@FindWorkNo
$LN1@FindWorkNo:

; 5934 : 		}
; 5935 : 	}

	jmp	$LN3@FindWorkNo
$LN2@FindWorkNo:

; 5936 : 	return NO_GREAT_WORK;

	or	eax, -1
$LN5@FindWorkNo:

; 5937 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindWorkNotChosen@CultureHelpers@@YAHAAV?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@AAV?$vector@HV?$allocator@H@std@@@3@@Z ENDP ; CultureHelpers::FindWorkNotChosen
_TEXT	ENDS
PUBLIC	??_C@_0CN@BDBGIAOE@TXT_KEY_NOTIFICATION_GREAT_WORK_@ ; `string'
PUBLIC	??_C@_0CD@IGPNPEBN@TXT_KEY_NOTIFICATION_ARTIFACT_SW@ ; `string'
PUBLIC	??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z ; GetLocalizedText<char const *,CvString,CvString>
PUBLIC	??_C@_0CJ@MHGMGMCH@TXT_KEY_NOTIFICATION_GREAT_WORK_@ ; `string'
PUBLIC	??_C@_0CN@NMHPGBLN@TXT_KEY_NOTIFICATION_SUMMARY_GRE@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	?getLeaderInfo@CvPlayer@@QBEAAVCvLeaderHeadInfo@@XZ:PROC ; CvPlayer::getLeaderInfo
;	COMDAT ??_C@_0CN@BDBGIAOE@TXT_KEY_NOTIFICATION_GREAT_WORK_@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CN@BDBGIAOE@TXT_KEY_NOTIFICATION_GREAT_WORK_@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_GREAT_WORK_WRITING_SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IGPNPEBN@TXT_KEY_NOTIFICATION_ARTIFACT_SW@
CONST	SEGMENT
??_C@_0CD@IGPNPEBN@TXT_KEY_NOTIFICATION_ARTIFACT_SW@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_ARTIFACT_SWAP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@MHGMGMCH@TXT_KEY_NOTIFICATION_GREAT_WORK_@
CONST	SEGMENT
??_C@_0CJ@MHGMGMCH@TXT_KEY_NOTIFICATION_GREAT_WORK_@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_GREAT_WORK_ART_SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NMHPGBLN@TXT_KEY_NOTIFICATION_SUMMARY_GRE@
CONST	SEGMENT
??_C@_0CN@NMHPGBLN@TXT_KEY_NOTIFICATION_SUMMARY_GRE@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SUMMARY_GREAT_WORK_SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcultureclasses.cpp
xdata$x	ENDS
;	COMDAT ?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z
_TEXT	SEGMENT
tv377 = -448						; size = 4
tv246 = -444						; size = 4
tv376 = -440						; size = 4
tv244 = -436						; size = 4
tv375 = -432						; size = 4
tv374 = -428						; size = 4
tv240 = -424						; size = 4
tv373 = -420						; size = 4
tv238 = -416						; size = 4
tv372 = -412						; size = 4
tv76 = -408						; size = 4
tv234 = -404						; size = 4
tv255 = -400						; size = 4
tv232 = -396						; size = 4
tv77 = -392						; size = 4
$T250655 = -388						; size = 4
$T250651 = -384						; size = 4
$T250647 = -380						; size = 4
$T250643 = -376						; size = 4
$T250622 = -372						; size = 4
$T250618 = -368						; size = 4
$T250602 = -364						; size = 4
$T250598 = -360						; size = 4
$T250582 = -356						; size = 4
$T250578 = -352						; size = 4
$T250567 = -348						; size = 4
$T250552 = -344						; size = 28
$T250551 = -316						; size = 4
$T250550 = -312						; size = 28
$T250549 = -284						; size = 28
$T250548 = -256						; size = 28
$T250547 = -228						; size = 4
$T250546 = -224						; size = 28
$T250545 = -196						; size = 28
$T250544 = -168						; size = 28
$T250543 = -140						; size = 4
$T250542 = -136						; size = 28
$T250541 = -108						; size = 28
_strBuffer$ = -80					; size = 28
_strSummary$ = -52					; size = 28
__$ArrayPad$ = -24					; size = 4
_kOriginator$ = -20					; size = 4
_pkGameCulture$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
_bArt$ = 12						; size = 1
_eOriginator$ = 16					; size = 4
_eReceipient$ = 20					; size = 4
_iWorkFromOriginator$ = 24				; size = 4
_iWorkFromRecipient$ = 28				; size = 4
?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z PROC ; CultureHelpers::SendArtSwapNotification, COMDAT

; 5940 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 436				; 000001b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5941 : 	CvGameCulture *pkGameCulture = GC.getGame().GetGameCulture();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T250567[ebp], eax
	mov	ecx, DWORD PTR $T250567[ebp]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	DWORD PTR _pkGameCulture$[ebp], eax

; 5942 : 	CvPlayer &kOriginator = GET_PLAYER(eOriginator);

	mov	ecx, DWORD PTR _eOriginator$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOriginator$[ebp], ecx

; 5943 : 
; 5944 : 	CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5945 : 	CvString strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SUMMARY_GREAT_WORK_SWAP");

	push	OFFSET ??_C@_0CN@NMHPGBLN@TXT_KEY_NOTIFICATION_SUMMARY_GRE@
	lea	edx, DWORD PTR _strSummary$[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 5946 : 	if (eType == CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT())

	call	?getGREAT_WORK_SLOT_ART_ARTIFACT@CvTypes@@YA?BW4GreatWorkSlotType@@XZ ; CvTypes::getGREAT_WORK_SLOT_ART_ARTIFACT
	cmp	DWORD PTR _eType$[ebp], eax
	jne	$LN4@SendArtSwa

; 5947 : 	{
; 5948 : 		if (bArt)

	movzx	eax, BYTE PTR _bArt$[ebp]
	test	eax, eax
	je	$LN3@SendArtSwa

; 5949 : 		{
; 5950 : 			strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_GREAT_WORK_ART_SWAP", kOriginator.getLeaderInfo().GetDescription(),
; 5951 : 				pkGameCulture->GetGreatWorkName(iWorkFromRecipient), pkGameCulture->GetGreatWorkName(iWorkFromOriginator));

	mov	ecx, DWORD PTR _kOriginator$[ebp]
	call	?getLeaderInfo@CvPlayer@@QBEAAVCvLeaderHeadInfo@@XZ ; CvPlayer::getLeaderInfo
	mov	DWORD PTR $T250578[ebp], eax
	mov	ecx, DWORD PTR $T250578[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T250543[ebp], eax
	mov	ecx, DWORD PTR _iWorkFromOriginator$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250541[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv232[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _iWorkFromRecipient$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250542[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv255[ebp], eax
	mov	eax, DWORD PTR tv255[ebp]
	mov	DWORD PTR tv234[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv232[ebp]
	push	ecx
	mov	edx, DWORD PTR tv234[ebp]
	push	edx
	lea	eax, DWORD PTR $T250543[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@MHGMGMCH@TXT_KEY_NOTIFICATION_GREAT_WORK_@
	lea	ecx, DWORD PTR $T250544[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z ; GetLocalizedText<char const *,CvString,CvString>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T250582[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T250582[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T250544[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T250542[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T250541[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5952 : 		}
; 5953 : 		else

	jmp	$LN2@SendArtSwa
$LN3@SendArtSwa:

; 5954 : 		{
; 5955 : 			strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_ARTIFACT_SWAP", kOriginator.getLeaderInfo().GetDescription(),
; 5956 : 				pkGameCulture->GetGreatWorkName(iWorkFromRecipient), pkGameCulture->GetGreatWorkName(iWorkFromOriginator));

	mov	ecx, DWORD PTR _kOriginator$[ebp]
	call	?getLeaderInfo@CvPlayer@@QBEAAVCvLeaderHeadInfo@@XZ ; CvPlayer::getLeaderInfo
	mov	DWORD PTR $T250598[ebp], eax
	mov	ecx, DWORD PTR $T250598[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T250547[ebp], eax
	mov	ecx, DWORD PTR _iWorkFromOriginator$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250545[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv372[ebp], eax
	mov	eax, DWORD PTR tv372[ebp]
	mov	DWORD PTR tv238[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _iWorkFromRecipient$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250546[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv373[ebp], eax
	mov	eax, DWORD PTR tv373[ebp]
	mov	DWORD PTR tv240[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv238[ebp]
	push	ecx
	mov	edx, DWORD PTR tv240[ebp]
	push	edx
	lea	eax, DWORD PTR $T250547[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@IGPNPEBN@TXT_KEY_NOTIFICATION_ARTIFACT_SW@
	lea	ecx, DWORD PTR $T250548[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z ; GetLocalizedText<char const *,CvString,CvString>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv374[ebp], eax
	mov	edx, DWORD PTR tv374[ebp]
	mov	DWORD PTR $T250602[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR $T250602[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T250548[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T250546[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T250545[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@SendArtSwa:

; 5957 : 		}
; 5958 : 	}
; 5959 : 	else

	jmp	$LN66@SendArtSwa
$LN4@SendArtSwa:

; 5960 : 	{
; 5961 : 		strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_GREAT_WORK_WRITING_SWAP", kOriginator.getLeaderInfo().GetDescription(),
; 5962 : 			pkGameCulture->GetGreatWorkName(iWorkFromRecipient), pkGameCulture->GetGreatWorkName(iWorkFromOriginator));

	mov	ecx, DWORD PTR _kOriginator$[ebp]
	call	?getLeaderInfo@CvPlayer@@QBEAAVCvLeaderHeadInfo@@XZ ; CvPlayer::getLeaderInfo
	mov	DWORD PTR $T250618[ebp], eax
	mov	ecx, DWORD PTR $T250618[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T250551[ebp], eax
	mov	ecx, DWORD PTR _iWorkFromOriginator$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250549[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv375[ebp], eax
	mov	eax, DWORD PTR tv375[ebp]
	mov	DWORD PTR tv244[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _iWorkFromRecipient$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250550[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkGameCulture$[ebp]
	call	?GetGreatWorkName@CvGameCulture@@QBE?AVCvString@@H@Z ; CvGameCulture::GetGreatWorkName
	mov	DWORD PTR tv376[ebp], eax
	mov	eax, DWORD PTR tv376[ebp]
	mov	DWORD PTR tv246[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	mov	edx, DWORD PTR tv246[ebp]
	push	edx
	lea	eax, DWORD PTR $T250551[ebp]
	push	eax
	push	OFFSET ??_C@_0CN@BDBGIAOE@TXT_KEY_NOTIFICATION_GREAT_WORK_@
	lea	ecx, DWORD PTR $T250552[ebp]
	push	ecx
	call	??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z ; GetLocalizedText<char const *,CvString,CvString>
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv377[ebp], eax
	mov	edx, DWORD PTR tv377[ebp]
	mov	DWORD PTR $T250622[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T250622[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T250552[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T250550[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T250549[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5963 : 	}
; 5964 : 	GET_PLAYER(eReceipient).GetNotifications()->Add(NOTIFICATION_GREAT_WORK_COMPLETED_ACTIVE_PLAYER, strBuffer, strSummary, -1, -1, iWorkFromOriginator, kOriginator.GetID());

$LN66@SendArtSwa:
	mov	ecx, DWORD PTR _kOriginator$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T250643[ebp], edx
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T250647[ebp], eax
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T250651[ebp], eax
	mov	eax, DWORD PTR _eReceipient$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T250655[ebp], eax
	mov	ecx, DWORD PTR $T250643[ebp]
	push	ecx
	mov	edx, DWORD PTR _iWorkFromOriginator$[ebp]
	push	edx
	push	-1
	push	-1
	mov	eax, DWORD PTR $T250647[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250651[ebp]
	push	ecx
	push	-273578033				; efb187cfH
	mov	ecx, DWORD PTR $T250655[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ecx, eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 5965 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$0:
	lea	ecx, DWORD PTR _strBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$1:
	lea	ecx, DWORD PTR _strSummary$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$2:
	lea	ecx, DWORD PTR $T250541[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$3:
	lea	ecx, DWORD PTR $T250542[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$4:
	lea	ecx, DWORD PTR $T250544[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$5:
	lea	ecx, DWORD PTR $T250545[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$6:
	lea	ecx, DWORD PTR $T250546[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$7:
	lea	ecx, DWORD PTR $T250548[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$8:
	lea	ecx, DWORD PTR $T250549[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$9:
	lea	ecx, DWORD PTR $T250550[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z$10:
	lea	ecx, DWORD PTR $T250552[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-440]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendArtSwapNotification@CultureHelpers@@YAXW4GreatWorkSlotType@@_NW4PlayerTypes@@2HH@Z ENDP ; CultureHelpers::SendArtSwapNotification
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv224 = -308						; size = 4
_this$ = -304						; size = 4
$T250948 = -300						; size = 4
$T250947 = -296						; size = 4
$T250946 = -292						; size = 4
$T250892 = -176						; size = 4
$T250888 = -172						; size = 4
$T250887 = -168						; size = 4
$T250883 = -164						; size = 4
$T250882 = -160						; size = 4
$T250871 = -156						; size = 4
$T250870 = -152						; size = 4
__Cat$250878 = -146					; size = 1
$T250876 = -145						; size = 1
$T250851 = -144						; size = 4
$T250850 = -140						; size = 4
$T250798 = -84						; size = 4
$T250791 = -80						; size = 4
$T250780 = -76						; size = 4
$T250779 = -72						; size = 4
__Cat$250787 = -68					; size = 1
$T250785 = -67						; size = 1
$T250735 = -40						; size = 4
$T250706 = -36						; size = 4
$T250690 = -32						; size = 4
$T250718 = -28						; size = 4
$T250717 = -24						; size = 4
$T250716 = -20						; size = 4
$T250715 = -16						; size = 4
$T250714 = -12						; size = 4
__Ptr$227463 = -8					; size = 4
__Ptr$227460 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<int,std::allocator<int> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@6

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	test	eax, eax
	jne	SHORT $LN8@operator@6

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250690[ebp], edx
	mov	eax, DWORD PTR $T250690[ebp]
	mov	DWORD PTR $T250715[ebp], eax
	mov	ecx, DWORD PTR $T250715[ebp]
	mov	DWORD PTR $T250714[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250706[ebp], eax
	mov	ecx, DWORD PTR $T250706[ebp]
	mov	DWORD PTR $T250717[ebp], ecx
	mov	edx, DWORD PTR $T250717[ebp]
	mov	DWORD PTR $T250716[ebp], edx
	mov	eax, DWORD PTR $T250714[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250716[ebp]
	push	ecx
	lea	edx, DWORD PTR $T250718[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 573  : 			else if (_Right.size() <= size())

	jmp	$LN9@operator@6
$LN8@operator@6:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T250735[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR $T250735[ebp], edx
	ja	SHORT $LN6@operator@6

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$227460[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250791[ebp], ecx
	mov	edx, DWORD PTR $T250791[ebp]
	mov	DWORD PTR $T250780[ebp], edx
	mov	eax, DWORD PTR __Ptr$227460[ebp]
	mov	DWORD PTR $T250779[ebp], eax
	mov	cl, BYTE PTR __Cat$250787[ebp]
	mov	BYTE PTR $T250785[ebp], cl

; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	jmp	$LN9@operator@6
$LN6@operator@6:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T250798[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN55@operator@6
	mov	DWORD PTR tv224[ebp], 0
	jmp	SHORT $LN53@operator@6
$LN55@operator@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv224[ebp], eax
$LN53@operator@6:
	mov	ecx, DWORD PTR $T250798[ebp]
	cmp	ecx, DWORD PTR tv224[ebp]
	ja	$LN4@operator@6

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR __Ptr$227463[ebp], ecx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Ptr$227463[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250851[ebp], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250850[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T250851[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250850[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$227463[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@6
$LN4@operator@6:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@operator@6

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250883[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250882[ebp], eax
	mov	ecx, DWORD PTR $T250883[ebp]
	mov	DWORD PTR $T250871[ebp], ecx
	mov	edx, DWORD PTR $T250882[ebp]
	mov	DWORD PTR $T250870[ebp], edx
	mov	al, BYTE PTR __Cat$250878[ebp]
	mov	BYTE PTR $T250876[ebp], al

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T250888[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T250887[ebp], edx
	mov	eax, DWORD PTR $T250887[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@operator@6:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T250892[ebp], eax
	mov	ecx, DWORD PTR $T250892[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@operator@6

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T250948[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T250947[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T250946[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250948[ebp]
	push	ecx
	mov	edx, DWORD PTR $T250947[ebp]
	push	edx
	mov	eax, DWORD PTR $T250946[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@operator@6:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@HV?$allocator@H@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<int,std::allocator<int> >::operator=
_TEXT	ENDS
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T250961 = -20						; size = 4
_pRet$250958 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvGreatWork,22,0,297,0>::FStaticVector<CvGreatWork,22,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250961[ebp], edx
	cmp	DWORD PTR $T250961[ebp], 22		; 00000016H
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T250961[ebp]
	imul	eax, 48					; 00000030H
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$250958[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T250961[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$250958[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 22			; 00000016H
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$250958[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ ; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>
__ehhandler$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvGreatWork,22,0,297,0>::FStaticVector<CvGreatWork,22,0,297,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvGreatWork,22,0,297,0>::~FStaticVector<CvGreatWork,22,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z ; FStaticVector<CvGreatWork,22,0,297,0>::Free

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ ; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>
__ehhandler$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvGreatWork,22,0,297,0>::~FStaticVector<CvGreatWork,22,0,297,0>
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvGreatWork,22,0,297,0>::GrowSize
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingclasses.h
xdata$x	SEGMENT
__unwindtable$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z$0
__ehfuncinfo$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	ENDS
;	COMDAT ?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z
_TEXT	SEGMENT
tv157 = -60						; size = 4
tv149 = -56						; size = 4
_this$ = -52						; size = 4
$T251018 = -20						; size = 4
$T251017 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_element$ = 8						; size = 4
?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z PROC ; FStaticVector<CvGreatWork,22,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1068], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN30@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvGreatWork,22,0,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN30@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T251018[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T251018[ebp], 0
	je	SHORT $LN4@push_back
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251018[ebp]
	call	??0CvGreatWork@@QAE@ABV0@@Z
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T251017[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 681  : 		return m_uiCurrSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z$0:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR $T251018[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@QAEIABVCvGreatWork@@@Z ENDP ; FStaticVector<CvGreatWork,22,0,297,0>::push_back
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T251094 = -16						; size = 4
$T251093 = -12						; size = 4
$T251078 = -8						; size = 4
_i$251089 = -4						; size = 4
?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ PROC	; BaseVector<CvGreatWork,0>::clear, COMDAT
; _this$ = ecx

; 120  : 	void clear(){

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T251094[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T251093[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@clear
	mov	DWORD PTR _i$251089[ebp], 0
	jmp	SHORT $LN5@clear
$LN4@clear:
	mov	edx, DWORD PTR _i$251089[ebp]
	add	edx, 1
	mov	DWORD PTR _i$251089[ebp], edx
$LN5@clear:
	mov	eax, DWORD PTR _i$251089[ebp]
	cmp	eax, DWORD PTR $T251094[ebp]
	jae	SHORT $LN7@clear
	mov	ecx, DWORD PTR _i$251089[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR $T251093[ebp]
	mov	DWORD PTR $T251078[ebp], ecx
	mov	ecx, DWORD PTR $T251078[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN10@clear
	mov	eax, DWORD PTR $T251078[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@clear:
	jmp	SHORT $LN4@clear
$LN7@clear:

; 122  : 		m_uiCurrSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$BaseVector@VCvGreatWork@@$0A@@@QAEXXZ ENDP	; BaseVector<CvGreatWork,0>::clear
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAE_NI@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T251126 = -30						; size = 1
$T251113 = -29						; size = 1
$T251109 = -28						; size = 4
$T251102 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T251126[ebp]
	mov	DWORD PTR $T251102[ebp], eax
	lea	ecx, DWORD PTR $T251113[ebp]
	mov	DWORD PTR $T251109[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAE_NI@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
PUBLIC	?insert@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@ABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::insert
PUBLIC	??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T251311 = -32						; size = 4
$T251301 = -28						; size = 4
$T251291 = -24						; size = 4
__Cat$251298 = -19					; size = 1
$T251295 = -18						; size = 1
$T251294 = -17						; size = 1
$T251268 = -16						; size = 4
$T251264 = -12						; size = 4
$T251263 = -8						; size = 4
$T251262 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T251268[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@2
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@2
$LN9@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@2:
	mov	edx, DWORD PTR $T251268[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251301[ebp], ecx
	mov	edx, DWORD PTR $T251301[ebp]
	mov	DWORD PTR $T251291[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T251294[ebp], al
	mov	cl, BYTE PTR __Cat$251298[ebp]
	mov	BYTE PTR $T251295[ebp], cl
	movzx	edx, BYTE PTR $T251294[ebp]
	push	edx
	movzx	eax, BYTE PTR $T251295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T251291[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR $T251301[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@2
$LN2@push_back@2:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251311[ebp], ecx
	mov	edx, DWORD PTR $T251311[ebp]
	mov	DWORD PTR $T251263[ebp], edx
	mov	eax, DWORD PTR $T251263[ebp]
	mov	DWORD PTR $T251262[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T251262[ebp]
	push	edx
	lea	eax, DWORD PTR $T251264[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@ABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::insert
$LN3@push_back@2:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkBuildingInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::~vector<CvPlot *,std::allocator<CvPlot *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::~vector<CvPlot *,std::allocator<CvPlot *> >
PUBLIC	?insert@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@ABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::insert
PUBLIC	??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T251522 = -64						; size = 4
$T251512 = -60						; size = 4
$T251500 = -56						; size = 4
$T251490 = -49						; size = 1
$T251489 = -48						; size = 4
__Cat$251506 = -19					; size = 1
$T251504 = -18						; size = 1
$T251503 = -17						; size = 1
$T251441 = -16						; size = 4
$T251437 = -12						; size = 4
$T251436 = -8						; size = 4
$T251435 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T251441[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@3
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@3
$LN9@push_back@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@3:
	mov	ecx, DWORD PTR $T251441[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@3

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T251512[ebp], eax
	mov	ecx, DWORD PTR $T251512[ebp]
	mov	DWORD PTR $T251500[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T251503[ebp], dl
	mov	al, BYTE PTR __Cat$251506[ebp]
	mov	BYTE PTR $T251504[ebp], al
	mov	cl, BYTE PTR $T251503[ebp]
	mov	BYTE PTR $T251490[ebp], cl
	mov	edx, DWORD PTR $T251500[ebp]
	mov	DWORD PTR $T251489[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T251489[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T251512[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@3
$LN2@push_back@3:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T251522[ebp], edx
	mov	eax, DWORD PTR $T251522[ebp]
	mov	DWORD PTR $T251436[ebp], eax
	mov	ecx, DWORD PTR $T251436[ebp]
	mov	DWORD PTR $T251435[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T251435[ebp]
	push	eax
	lea	ecx, DWORD PTR $T251437[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@ABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::insert
$LN3@push_back@3:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAEXABQAVCvPlot@@@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::push_back
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlot * *,CvPlot * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T251643 = -44						; size = 4
$T251642 = -40						; size = 4
$T251631 = -36						; size = 4
$T251630 = -32						; size = 4
__Cat$251637 = -28					; size = 1
$T251635 = -27						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase, COMDAT
; _this$ = ecx

; 1017 : 		{	// erase element at where

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 1018 : 		_STDEXT unchecked_copy(_VEC_ITER_BASE(_Where) + 1, _Mylast,
; 1019 : 			_VEC_ITER_BASE(_Where));

	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 4
	push	eax
	call	??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlot * *,CvPlot * *>
	add	esp, 12					; 0000000cH

; 1020 : 		_Destroy(_Mylast - 1, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T251643[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 4
	mov	DWORD PTR $T251642[ebp], ecx
	mov	edx, DWORD PTR $T251643[ebp]
	mov	DWORD PTR $T251631[ebp], edx
	mov	eax, DWORD PTR $T251642[ebp]
	mov	DWORD PTR $T251630[ebp], eax
	mov	cl, BYTE PTR __Cat$251637[ebp]
	mov	BYTE PTR $T251635[ebp], cl

; 1021 : 		--_Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1022 : 		return (_Make_iter(_Where));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1023 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T251690 = -30						; size = 1
$T251677 = -29						; size = 1
$T251673 = -28						; size = 4
$T251666 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T251690[ebp]
	mov	DWORD PTR $T251666[ebp], eax
	lea	ecx, DWORD PTR $T251677[ebp]
	mov	DWORD PTR $T251673[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >
PUBLIC	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv239 = -300						; size = 4
_this$ = -296						; size = 4
$T252213 = -292						; size = 4
$T252212 = -288						; size = 4
$T252211 = -284						; size = 4
$T252201 = -280						; size = 4
$T252200 = -276						; size = 4
__Cat$252208 = -271					; size = 1
$T252205 = -270						; size = 1
$T252204 = -269						; size = 1
$T252150 = -180						; size = 4
$T252146 = -176						; size = 4
$T252145 = -172						; size = 4
$T252141 = -168						; size = 4
$T252140 = -164						; size = 4
$T252122 = -160						; size = 4
$T252121 = -156						; size = 4
$T252105 = -152						; size = 4
__Cat$252128 = -146					; size = 1
$T252125 = -145						; size = 1
$T252079 = -144						; size = 4
$T252078 = -140						; size = 4
$T252068 = -136						; size = 4
$T252067 = -132						; size = 4
__Cat$252075 = -127					; size = 1
$T252072 = -126						; size = 1
$T252071 = -125						; size = 1
$T252051 = -124						; size = 4
$T252050 = -120						; size = 4
$T252033 = -114						; size = 1
$T252032 = -113						; size = 1
$T252031 = -112						; size = 4
$T252030 = -108						; size = 4
__Cat$252040 = -100					; size = 1
$T252037 = -99						; size = 1
$T252036 = -98						; size = 1
$T252035 = -97						; size = 1
$T252001 = -96						; size = 4
$T251994 = -92						; size = 4
$T251976 = -88						; size = 4
$T251975 = -84						; size = 4
$T251959 = -80						; size = 4
__Cat$251982 = -74					; size = 1
$T251979 = -73						; size = 1
$T251933 = -72						; size = 4
$T251932 = -68						; size = 4
$T251931 = -64						; size = 4
$T251914 = -58						; size = 1
$T251913 = -57						; size = 1
$T251912 = -56						; size = 4
$T251911 = -52						; size = 4
__Cat$251927 = -44					; size = 1
$T251925 = -43						; size = 1
$T251924 = -42						; size = 1
$T251923 = -41						; size = 1
$T251889 = -40						; size = 4
$T251860 = -36						; size = 4
$T251844 = -32						; size = 4
$T251873 = -28						; size = 4
$T251872 = -24						; size = 4
$T251871 = -20						; size = 4
$T251870 = -16						; size = 4
$T251869 = -12						; size = 4
__Ptr$227609 = -8					; size = 4
__Ptr$227599 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@7

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	test	eax, eax
	jne	SHORT $LN8@operator@7

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T251844[ebp], edx
	mov	eax, DWORD PTR $T251844[ebp]
	mov	DWORD PTR $T251870[ebp], eax
	mov	ecx, DWORD PTR $T251870[ebp]
	mov	DWORD PTR $T251869[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T251860[ebp], eax
	mov	ecx, DWORD PTR $T251860[ebp]
	mov	DWORD PTR $T251872[ebp], ecx
	mov	edx, DWORD PTR $T251872[ebp]
	mov	DWORD PTR $T251871[ebp], edx
	mov	eax, DWORD PTR $T251869[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251871[ebp]
	push	ecx
	lea	edx, DWORD PTR $T251873[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase

; 573  : 			else if (_Right.size() <= size())

	jmp	$LN9@operator@7
$LN8@operator@7:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T251889[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR $T251889[ebp], edx
	ja	$LN6@operator@7

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T251933[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T251932[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T251931[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T251923[ebp], al
	mov	cl, BYTE PTR __Cat$251927[ebp]
	mov	BYTE PTR $T251924[ebp], cl
	mov	dl, BYTE PTR $T251923[ebp]
	mov	BYTE PTR $T251914[ebp], dl
	mov	al, BYTE PTR $T251925[ebp]
	mov	BYTE PTR $T251913[ebp], al
	mov	ecx, DWORD PTR $T251933[ebp]
	mov	DWORD PTR $T251912[ebp], ecx
	mov	edx, DWORD PTR $T251931[ebp]
	mov	DWORD PTR $T251911[ebp], edx
	jmp	SHORT $LN40@operator@7
$LN39@operator@7:
	mov	eax, DWORD PTR $T251912[ebp]
	add	eax, 4
	mov	DWORD PTR $T251912[ebp], eax
	mov	ecx, DWORD PTR $T251911[ebp]
	add	ecx, 4
	mov	DWORD PTR $T251911[ebp], ecx
$LN40@operator@7:
	mov	edx, DWORD PTR $T251911[ebp]
	cmp	edx, DWORD PTR $T251932[ebp]
	je	SHORT $LN32@operator@7
	mov	eax, DWORD PTR $T251912[ebp]
	mov	ecx, DWORD PTR $T251911[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN39@operator@7
$LN32@operator@7:
	mov	eax, DWORD PTR $T251912[ebp]
	mov	DWORD PTR __Ptr$227599[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T251994[ebp], edx
	mov	eax, DWORD PTR $T251994[ebp]
	mov	DWORD PTR $T251976[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227599[ebp]
	mov	DWORD PTR $T251975[ebp], ecx
	mov	dl, BYTE PTR __Cat$251982[ebp]
	mov	BYTE PTR $T251979[ebp], dl
	mov	eax, DWORD PTR $T251975[ebp]
	mov	DWORD PTR $T251959[ebp], eax
	jmp	SHORT $LN51@operator@7
$LN50@operator@7:
	mov	ecx, DWORD PTR $T251959[ebp]
	add	ecx, 4
	mov	DWORD PTR $T251959[ebp], ecx
$LN51@operator@7:
	mov	edx, DWORD PTR $T251959[ebp]
	cmp	edx, DWORD PTR $T251976[ebp]
	je	SHORT $LN58@operator@7
	jmp	SHORT $LN50@operator@7

; 578  : 				_Mylast = _Myfirst + _Right.size();

$LN58@operator@7:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	jmp	$LN9@operator@7
$LN6@operator@7:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T252001[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN64@operator@7
	mov	DWORD PTR tv239[ebp], 0
	jmp	SHORT $LN62@operator@7
$LN64@operator@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR tv239[ebp], ecx
$LN62@operator@7:
	mov	edx, DWORD PTR $T252001[ebp]
	cmp	edx, DWORD PTR tv239[ebp]
	ja	$LN4@operator@7

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __Ptr$227609[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252051[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252050[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252035[ebp], cl
	mov	dl, BYTE PTR __Cat$252040[ebp]
	mov	BYTE PTR $T252036[ebp], dl
	mov	al, BYTE PTR $T252035[ebp]
	mov	BYTE PTR $T252033[ebp], al
	mov	cl, BYTE PTR $T252037[ebp]
	mov	BYTE PTR $T252032[ebp], cl
	mov	edx, DWORD PTR $T252051[ebp]
	mov	DWORD PTR $T252031[ebp], edx
	mov	eax, DWORD PTR $T252050[ebp]
	mov	DWORD PTR $T252030[ebp], eax
	jmp	SHORT $LN76@operator@7
$LN75@operator@7:
	mov	ecx, DWORD PTR $T252031[ebp]
	add	ecx, 4
	mov	DWORD PTR $T252031[ebp], ecx
	mov	edx, DWORD PTR $T252030[ebp]
	add	edx, 4
	mov	DWORD PTR $T252030[ebp], edx
$LN76@operator@7:
	mov	eax, DWORD PTR $T252030[ebp]
	cmp	eax, DWORD PTR __Ptr$227609[ebp]
	je	SHORT $LN68@operator@7
	mov	ecx, DWORD PTR $T252031[ebp]
	mov	edx, DWORD PTR $T252030[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN75@operator@7
$LN68@operator@7:

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252079[ebp], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252078[ebp], ecx
	mov	edx, DWORD PTR $T252079[ebp]
	mov	DWORD PTR $T252068[ebp], edx
	mov	eax, DWORD PTR __Ptr$227609[ebp]
	mov	DWORD PTR $T252067[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252071[ebp], cl
	mov	dl, BYTE PTR __Cat$252075[ebp]
	mov	BYTE PTR $T252072[ebp], dl
	movzx	eax, BYTE PTR $T252071[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T252072[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T252068[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252078[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252067[ebp]
	push	edx
	call	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@7
$LN4@operator@7:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN2@operator@7

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252141[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252140[ebp], eax
	mov	ecx, DWORD PTR $T252141[ebp]
	mov	DWORD PTR $T252122[ebp], ecx
	mov	edx, DWORD PTR $T252140[ebp]
	mov	DWORD PTR $T252121[ebp], edx
	mov	al, BYTE PTR __Cat$252128[ebp]
	mov	BYTE PTR $T252125[ebp], al
	mov	ecx, DWORD PTR $T252121[ebp]
	mov	DWORD PTR $T252105[ebp], ecx
	jmp	SHORT $LN93@operator@7
$LN92@operator@7:
	mov	edx, DWORD PTR $T252105[ebp]
	add	edx, 4
	mov	DWORD PTR $T252105[ebp], edx
$LN93@operator@7:
	mov	eax, DWORD PTR $T252105[ebp]
	cmp	eax, DWORD PTR $T252122[ebp]
	je	SHORT $LN85@operator@7
	jmp	SHORT $LN92@operator@7
$LN85@operator@7:

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T252146[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T252145[ebp], edx
	mov	eax, DWORD PTR $T252145[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@operator@7:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T252150[ebp], eax
	mov	ecx, DWORD PTR $T252150[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN9@operator@7

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252213[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252212[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T252211[ebp], edx
	mov	eax, DWORD PTR $T252213[ebp]
	mov	DWORD PTR $T252201[ebp], eax
	mov	ecx, DWORD PTR $T252211[ebp]
	mov	DWORD PTR $T252200[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252204[ebp], dl
	mov	al, BYTE PTR __Cat$252208[ebp]
	mov	BYTE PTR $T252205[ebp], al
	movzx	ecx, BYTE PTR $T252204[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T252205[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252201[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252212[ebp]
	push	edx
	mov	eax, DWORD PTR $T252200[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@operator@7:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::operator=
_TEXT	ENDS
PUBLIC	?insert@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@ABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::insert
PUBLIC	??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T252265 = -32						; size = 4
$T252255 = -28						; size = 4
$T252245 = -24						; size = 4
__Cat$252252 = -19					; size = 1
$T252249 = -18						; size = 1
$T252248 = -17						; size = 1
$T252222 = -16						; size = 4
$T252218 = -12						; size = 4
$T252217 = -8						; size = 4
$T252216 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T252222[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@4
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@4
$LN9@push_back@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@4:
	mov	ecx, DWORD PTR $T252222[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@4

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252255[ebp], eax
	mov	ecx, DWORD PTR $T252255[ebp]
	mov	DWORD PTR $T252245[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252248[ebp], dl
	mov	al, BYTE PTR __Cat$252252[ebp]
	mov	BYTE PTR $T252249[ebp], al
	movzx	ecx, BYTE PTR $T252248[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T252249[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T252245[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 2
	add	eax, DWORD PTR $T252255[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@4
$LN2@push_back@4:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252265[ebp], eax
	mov	ecx, DWORD PTR $T252265[ebp]
	mov	DWORD PTR $T252217[ebp], ecx
	mov	edx, DWORD PTR $T252217[ebp]
	mov	DWORD PTR $T252216[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252216[ebp]
	push	ecx
	lea	edx, DWORD PTR $T252218[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@ABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::insert
$LN3@push_back@4:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAEXABW4PlayerTypes@@@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::push_back
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T252362 = -30						; size = 1
$T252349 = -29						; size = 1
$T252345 = -28						; size = 4
$T252338 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T252362[ebp]
	mov	DWORD PTR $T252338[ebp], eax
	lea	ecx, DWORD PTR $T252349[ebp]
	mov	DWORD PTR $T252345[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
PUBLIC	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv240 = -300						; size = 4
_this$ = -296						; size = 4
$T252885 = -292						; size = 4
$T252884 = -288						; size = 4
$T252883 = -284						; size = 4
$T252873 = -280						; size = 4
$T252872 = -276						; size = 4
__Cat$252881 = -271					; size = 1
$T252879 = -270						; size = 1
$T252878 = -269						; size = 1
$T252822 = -180						; size = 4
$T252818 = -176						; size = 4
$T252817 = -172						; size = 4
$T252813 = -168						; size = 4
$T252812 = -164						; size = 4
$T252794 = -160						; size = 4
$T252793 = -156						; size = 4
$T252777 = -152						; size = 4
__Cat$252800 = -146					; size = 1
$T252798 = -145						; size = 1
$T252751 = -144						; size = 4
$T252750 = -140						; size = 4
$T252740 = -136						; size = 4
$T252739 = -132						; size = 4
__Cat$252748 = -127					; size = 1
$T252746 = -126						; size = 1
$T252745 = -125						; size = 1
$T252723 = -124						; size = 4
$T252722 = -120						; size = 4
$T252705 = -114						; size = 1
$T252704 = -113						; size = 1
$T252703 = -112						; size = 4
$T252702 = -108						; size = 4
__Cat$252712 = -100					; size = 1
$T252710 = -99						; size = 1
$T252709 = -98						; size = 1
$T252708 = -97						; size = 1
$T252673 = -96						; size = 4
$T252666 = -92						; size = 4
$T252648 = -88						; size = 4
$T252647 = -84						; size = 4
$T252631 = -80						; size = 4
__Cat$252653 = -74					; size = 1
$T252651 = -73						; size = 1
$T252605 = -72						; size = 4
$T252604 = -68						; size = 4
$T252603 = -64						; size = 4
$T252586 = -58						; size = 1
$T252585 = -57						; size = 1
$T252584 = -56						; size = 4
$T252583 = -52						; size = 4
__Cat$252593 = -44					; size = 1
$T252591 = -43						; size = 1
$T252590 = -42						; size = 1
$T252589 = -41						; size = 1
$T252561 = -40						; size = 4
$T252532 = -36						; size = 4
$T252516 = -32						; size = 4
$T252545 = -28						; size = 4
$T252544 = -24						; size = 4
$T252543 = -20						; size = 4
$T252542 = -16						; size = 4
$T252541 = -12						; size = 4
__Ptr$227672 = -8					; size = 4
__Ptr$227662 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@8

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN8@operator@8

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252516[ebp], eax
	mov	ecx, DWORD PTR $T252516[ebp]
	mov	DWORD PTR $T252542[ebp], ecx
	mov	edx, DWORD PTR $T252542[ebp]
	mov	DWORD PTR $T252541[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252532[ebp], ecx
	mov	edx, DWORD PTR $T252532[ebp]
	mov	DWORD PTR $T252544[ebp], edx
	mov	eax, DWORD PTR $T252544[ebp]
	mov	DWORD PTR $T252543[ebp], eax
	mov	ecx, DWORD PTR $T252541[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252543[ebp]
	push	edx
	lea	eax, DWORD PTR $T252545[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase

; 573  : 			else if (_Right.size() <= size())

	jmp	$LN9@operator@8
$LN8@operator@8:
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T252561[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR $T252561[ebp], eax
	ja	$LN6@operator@8

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252605[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252604[ebp], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252603[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252589[ebp], dl
	mov	al, BYTE PTR __Cat$252593[ebp]
	mov	BYTE PTR $T252590[ebp], al
	mov	cl, BYTE PTR $T252589[ebp]
	mov	BYTE PTR $T252586[ebp], cl
	mov	dl, BYTE PTR $T252591[ebp]
	mov	BYTE PTR $T252585[ebp], dl
	mov	eax, DWORD PTR $T252605[ebp]
	mov	DWORD PTR $T252584[ebp], eax
	mov	ecx, DWORD PTR $T252603[ebp]
	mov	DWORD PTR $T252583[ebp], ecx
	jmp	SHORT $LN40@operator@8
$LN39@operator@8:
	mov	edx, DWORD PTR $T252584[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T252584[ebp], edx
	mov	eax, DWORD PTR $T252583[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR $T252583[ebp], eax
$LN40@operator@8:
	mov	ecx, DWORD PTR $T252583[ebp]
	cmp	ecx, DWORD PTR $T252604[ebp]
	je	SHORT $LN32@operator@8
	mov	edx, DWORD PTR $T252583[ebp]
	mov	eax, DWORD PTR $T252584[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	jmp	SHORT $LN39@operator@8
$LN32@operator@8:
	mov	eax, DWORD PTR $T252584[ebp]
	mov	DWORD PTR __Ptr$227662[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252666[ebp], edx
	mov	eax, DWORD PTR $T252666[ebp]
	mov	DWORD PTR $T252648[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227662[ebp]
	mov	DWORD PTR $T252647[ebp], ecx
	mov	dl, BYTE PTR __Cat$252653[ebp]
	mov	BYTE PTR $T252651[ebp], dl
	mov	eax, DWORD PTR $T252647[ebp]
	mov	DWORD PTR $T252631[ebp], eax
	jmp	SHORT $LN51@operator@8
$LN50@operator@8:
	mov	ecx, DWORD PTR $T252631[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T252631[ebp], ecx
$LN51@operator@8:
	mov	edx, DWORD PTR $T252631[ebp]
	cmp	edx, DWORD PTR $T252648[ebp]
	je	SHORT $LN58@operator@8
	jmp	SHORT $LN50@operator@8

; 578  : 				_Mylast = _Myfirst + _Right.size();

$LN58@operator@8:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	imul	eax, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	$LN9@operator@8
$LN6@operator@8:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T252673[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN64@operator@8
	mov	DWORD PTR tv240[ebp], 0
	jmp	SHORT $LN62@operator@8
$LN64@operator@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv240[ebp], eax
$LN62@operator@8:
	mov	edx, DWORD PTR $T252673[ebp]
	cmp	edx, DWORD PTR tv240[ebp]
	ja	$LN4@operator@8

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	imul	eax, 24					; 00000018H
	mov	edx, DWORD PTR __Right$[ebp]
	add	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Ptr$227672[ebp], eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252723[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252722[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252708[ebp], cl
	mov	dl, BYTE PTR __Cat$252712[ebp]
	mov	BYTE PTR $T252709[ebp], dl
	mov	al, BYTE PTR $T252708[ebp]
	mov	BYTE PTR $T252705[ebp], al
	mov	cl, BYTE PTR $T252710[ebp]
	mov	BYTE PTR $T252704[ebp], cl
	mov	edx, DWORD PTR $T252723[ebp]
	mov	DWORD PTR $T252703[ebp], edx
	mov	eax, DWORD PTR $T252722[ebp]
	mov	DWORD PTR $T252702[ebp], eax
	jmp	SHORT $LN76@operator@8
$LN75@operator@8:
	mov	ecx, DWORD PTR $T252703[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T252703[ebp], ecx
	mov	edx, DWORD PTR $T252702[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T252702[ebp], edx
$LN76@operator@8:
	mov	eax, DWORD PTR $T252702[ebp]
	cmp	eax, DWORD PTR __Ptr$227672[ebp]
	je	SHORT $LN68@operator@8
	mov	ecx, DWORD PTR $T252702[ebp]
	mov	edx, DWORD PTR $T252703[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	jmp	SHORT $LN75@operator@8
$LN68@operator@8:

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252751[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252750[ebp], edx
	mov	eax, DWORD PTR $T252751[ebp]
	mov	DWORD PTR $T252740[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227672[ebp]
	mov	DWORD PTR $T252739[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252745[ebp], dl
	mov	al, BYTE PTR __Cat$252748[ebp]
	mov	BYTE PTR $T252746[ebp], al
	movzx	ecx, BYTE PTR $T252745[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T252746[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252740[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252750[ebp]
	push	edx
	mov	eax, DWORD PTR $T252739[ebp]
	push	eax
	call	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@8
$LN4@operator@8:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN2@operator@8

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252813[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252812[ebp], eax
	mov	ecx, DWORD PTR $T252813[ebp]
	mov	DWORD PTR $T252794[ebp], ecx
	mov	edx, DWORD PTR $T252812[ebp]
	mov	DWORD PTR $T252793[ebp], edx
	mov	al, BYTE PTR __Cat$252800[ebp]
	mov	BYTE PTR $T252798[ebp], al
	mov	ecx, DWORD PTR $T252793[ebp]
	mov	DWORD PTR $T252777[ebp], ecx
	jmp	SHORT $LN93@operator@8
$LN92@operator@8:
	mov	edx, DWORD PTR $T252777[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T252777[ebp], edx
$LN93@operator@8:
	mov	eax, DWORD PTR $T252777[ebp]
	cmp	eax, DWORD PTR $T252794[ebp]
	je	SHORT $LN85@operator@8
	jmp	SHORT $LN92@operator@8
$LN85@operator@8:

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T252818[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252817[ebp], eax
	mov	ecx, DWORD PTR $T252817[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@operator@8:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T252822[ebp], eax
	mov	edx, DWORD PTR $T252822[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	$LN9@operator@8

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T252885[ebp], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252884[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252883[ebp], eax
	mov	ecx, DWORD PTR $T252885[ebp]
	mov	DWORD PTR $T252873[ebp], ecx
	mov	edx, DWORD PTR $T252883[ebp]
	mov	DWORD PTR $T252872[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252878[ebp], al
	mov	cl, BYTE PTR __Cat$252881[ebp]
	mov	BYTE PTR $T252879[ebp], cl
	movzx	edx, BYTE PTR $T252878[ebp]
	push	edx
	movzx	eax, BYTE PTR $T252879[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252873[ebp]
	push	edx
	mov	eax, DWORD PTR $T252884[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252872[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN9@operator@8:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::operator=
_TEXT	ENDS
PUBLIC	?insert@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@ABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::insert
PUBLIC	??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T252937 = -32						; size = 4
$T252927 = -28						; size = 4
$T252917 = -24						; size = 4
__Cat$252925 = -19					; size = 1
$T252923 = -18						; size = 1
$T252922 = -17						; size = 1
$T252894 = -16						; size = 4
$T252890 = -12						; size = 4
$T252889 = -8						; size = 4
$T252888 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T252894[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@5
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@5
$LN9@push_back@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@5:
	mov	edx, DWORD PTR $T252894[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@5

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252927[ebp], ecx
	mov	edx, DWORD PTR $T252927[ebp]
	mov	DWORD PTR $T252917[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252922[ebp], al
	mov	cl, BYTE PTR __Cat$252925[ebp]
	mov	BYTE PTR $T252923[ebp], cl
	movzx	edx, BYTE PTR $T252922[ebp]
	push	edx
	movzx	eax, BYTE PTR $T252923[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T252917[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR $T252927[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@5
$LN2@push_back@5:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252937[ebp], ecx
	mov	edx, DWORD PTR $T252937[ebp]
	mov	DWORD PTR $T252889[ebp], edx
	mov	eax, DWORD PTR $T252889[ebp]
	mov	DWORD PTR $T252888[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252888[ebp]
	push	edx
	lea	eax, DWORD PTR $T252890[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@ABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::insert
$LN3@push_back@5:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAEXABVCvGreatWorkInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::push_back
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T253034 = -30						; size = 1
$T253021 = -29						; size = 1
$T253017 = -28						; size = 4
$T253010 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T253034[ebp]
	mov	DWORD PTR $T253010[ebp], eax
	lea	ecx, DWORD PTR $T253021[ebp]
	mov	DWORD PTR $T253017[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::vector<enum EraTypes,std::allocator<enum EraTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::~vector<enum EraTypes,std::allocator<enum EraTypes> >
PUBLIC	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
; Function compile flags: /Odtp
;	COMDAT ??4?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv239 = -300						; size = 4
_this$ = -296						; size = 4
$T253557 = -292						; size = 4
$T253556 = -288						; size = 4
$T253555 = -284						; size = 4
$T253545 = -280						; size = 4
$T253544 = -276						; size = 4
__Cat$253552 = -271					; size = 1
$T253549 = -270						; size = 1
$T253548 = -269						; size = 1
$T253494 = -180						; size = 4
$T253490 = -176						; size = 4
$T253489 = -172						; size = 4
$T253485 = -168						; size = 4
$T253484 = -164						; size = 4
$T253466 = -160						; size = 4
$T253465 = -156						; size = 4
$T253449 = -152						; size = 4
__Cat$253472 = -146					; size = 1
$T253469 = -145						; size = 1
$T253423 = -144						; size = 4
$T253422 = -140						; size = 4
$T253412 = -136						; size = 4
$T253411 = -132						; size = 4
__Cat$253419 = -127					; size = 1
$T253416 = -126						; size = 1
$T253415 = -125						; size = 1
$T253395 = -124						; size = 4
$T253394 = -120						; size = 4
$T253377 = -114						; size = 1
$T253376 = -113						; size = 1
$T253375 = -112						; size = 4
$T253374 = -108						; size = 4
__Cat$253384 = -100					; size = 1
$T253381 = -99						; size = 1
$T253380 = -98						; size = 1
$T253379 = -97						; size = 1
$T253345 = -96						; size = 4
$T253338 = -92						; size = 4
$T253320 = -88						; size = 4
$T253319 = -84						; size = 4
$T253303 = -80						; size = 4
__Cat$253326 = -74					; size = 1
$T253323 = -73						; size = 1
$T253277 = -72						; size = 4
$T253276 = -68						; size = 4
$T253275 = -64						; size = 4
$T253258 = -58						; size = 1
$T253257 = -57						; size = 1
$T253256 = -56						; size = 4
$T253255 = -52						; size = 4
__Cat$253265 = -44					; size = 1
$T253262 = -43						; size = 1
$T253261 = -42						; size = 1
$T253260 = -41						; size = 1
$T253233 = -40						; size = 4
$T253204 = -36						; size = 4
$T253188 = -32						; size = 4
$T253216 = -28						; size = 4
$T253215 = -24						; size = 4
$T253214 = -20						; size = 4
$T253213 = -16						; size = 4
$T253212 = -12						; size = 4
__Ptr$227773 = -8					; size = 4
__Ptr$227763 = -4					; size = 4
__Right$ = 8						; size = 4
??4?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	$LN9@operator@9

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	test	eax, eax
	jne	SHORT $LN8@operator@9

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253188[ebp], edx
	mov	eax, DWORD PTR $T253188[ebp]
	mov	DWORD PTR $T253213[ebp], eax
	mov	ecx, DWORD PTR $T253213[ebp]
	mov	DWORD PTR $T253212[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253204[ebp], eax
	mov	ecx, DWORD PTR $T253204[ebp]
	mov	DWORD PTR $T253215[ebp], ecx
	mov	edx, DWORD PTR $T253215[ebp]
	mov	DWORD PTR $T253214[ebp], edx
	mov	eax, DWORD PTR $T253212[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253214[ebp]
	push	ecx
	lea	edx, DWORD PTR $T253216[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase

; 573  : 			else if (_Right.size() <= size())

	jmp	$LN9@operator@9
$LN8@operator@9:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T253233[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR $T253233[ebp], edx
	ja	$LN6@operator@9

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T253277[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T253276[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T253275[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T253260[ebp], al
	mov	cl, BYTE PTR __Cat$253265[ebp]
	mov	BYTE PTR $T253261[ebp], cl
	mov	dl, BYTE PTR $T253260[ebp]
	mov	BYTE PTR $T253258[ebp], dl
	mov	al, BYTE PTR $T253262[ebp]
	mov	BYTE PTR $T253257[ebp], al
	mov	ecx, DWORD PTR $T253277[ebp]
	mov	DWORD PTR $T253256[ebp], ecx
	mov	edx, DWORD PTR $T253275[ebp]
	mov	DWORD PTR $T253255[ebp], edx
	jmp	SHORT $LN40@operator@9
$LN39@operator@9:
	mov	eax, DWORD PTR $T253256[ebp]
	add	eax, 4
	mov	DWORD PTR $T253256[ebp], eax
	mov	ecx, DWORD PTR $T253255[ebp]
	add	ecx, 4
	mov	DWORD PTR $T253255[ebp], ecx
$LN40@operator@9:
	mov	edx, DWORD PTR $T253255[ebp]
	cmp	edx, DWORD PTR $T253276[ebp]
	je	SHORT $LN32@operator@9
	mov	eax, DWORD PTR $T253256[ebp]
	mov	ecx, DWORD PTR $T253255[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN39@operator@9
$LN32@operator@9:
	mov	eax, DWORD PTR $T253256[ebp]
	mov	DWORD PTR __Ptr$227763[ebp], eax

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253338[ebp], edx
	mov	eax, DWORD PTR $T253338[ebp]
	mov	DWORD PTR $T253320[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227763[ebp]
	mov	DWORD PTR $T253319[ebp], ecx
	mov	dl, BYTE PTR __Cat$253326[ebp]
	mov	BYTE PTR $T253323[ebp], dl
	mov	eax, DWORD PTR $T253319[ebp]
	mov	DWORD PTR $T253303[ebp], eax
	jmp	SHORT $LN51@operator@9
$LN50@operator@9:
	mov	ecx, DWORD PTR $T253303[ebp]
	add	ecx, 4
	mov	DWORD PTR $T253303[ebp], ecx
$LN51@operator@9:
	mov	edx, DWORD PTR $T253303[ebp]
	cmp	edx, DWORD PTR $T253320[ebp]
	je	SHORT $LN58@operator@9
	jmp	SHORT $LN50@operator@9

; 578  : 				_Mylast = _Myfirst + _Right.size();

$LN58@operator@9:
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	jmp	$LN9@operator@9
$LN6@operator@9:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T253345[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN64@operator@9
	mov	DWORD PTR tv239[ebp], 0
	jmp	SHORT $LN62@operator@9
$LN64@operator@9:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR tv239[ebp], ecx
$LN62@operator@9:
	mov	edx, DWORD PTR $T253345[ebp]
	cmp	edx, DWORD PTR tv239[ebp]
	ja	$LN4@operator@9

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __Ptr$227773[ebp], edx

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T253395[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253394[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T253379[ebp], cl
	mov	dl, BYTE PTR __Cat$253384[ebp]
	mov	BYTE PTR $T253380[ebp], dl
	mov	al, BYTE PTR $T253379[ebp]
	mov	BYTE PTR $T253377[ebp], al
	mov	cl, BYTE PTR $T253381[ebp]
	mov	BYTE PTR $T253376[ebp], cl
	mov	edx, DWORD PTR $T253395[ebp]
	mov	DWORD PTR $T253375[ebp], edx
	mov	eax, DWORD PTR $T253394[ebp]
	mov	DWORD PTR $T253374[ebp], eax
	jmp	SHORT $LN76@operator@9
$LN75@operator@9:
	mov	ecx, DWORD PTR $T253375[ebp]
	add	ecx, 4
	mov	DWORD PTR $T253375[ebp], ecx
	mov	edx, DWORD PTR $T253374[ebp]
	add	edx, 4
	mov	DWORD PTR $T253374[ebp], edx
$LN76@operator@9:
	mov	eax, DWORD PTR $T253374[ebp]
	cmp	eax, DWORD PTR __Ptr$227773[ebp]
	je	SHORT $LN68@operator@9
	mov	ecx, DWORD PTR $T253375[ebp]
	mov	edx, DWORD PTR $T253374[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN75@operator@9
$LN68@operator@9:

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253423[ebp], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T253422[ebp], ecx
	mov	edx, DWORD PTR $T253423[ebp]
	mov	DWORD PTR $T253412[ebp], edx
	mov	eax, DWORD PTR __Ptr$227773[ebp]
	mov	DWORD PTR $T253411[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T253415[ebp], cl
	mov	dl, BYTE PTR __Cat$253419[ebp]
	mov	BYTE PTR $T253416[ebp], dl
	movzx	eax, BYTE PTR $T253415[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T253416[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T253412[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253422[ebp]
	push	ecx
	mov	edx, DWORD PTR $T253411[ebp]
	push	edx
	call	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 585  : 				}
; 586  : 			else

	jmp	$LN9@operator@9
$LN4@operator@9:

; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN2@operator@9

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T253485[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253484[ebp], eax
	mov	ecx, DWORD PTR $T253485[ebp]
	mov	DWORD PTR $T253466[ebp], ecx
	mov	edx, DWORD PTR $T253484[ebp]
	mov	DWORD PTR $T253465[ebp], edx
	mov	al, BYTE PTR __Cat$253472[ebp]
	mov	BYTE PTR $T253469[ebp], al
	mov	ecx, DWORD PTR $T253465[ebp]
	mov	DWORD PTR $T253449[ebp], ecx
	jmp	SHORT $LN93@operator@9
$LN92@operator@9:
	mov	edx, DWORD PTR $T253449[ebp]
	add	edx, 4
	mov	DWORD PTR $T253449[ebp], edx
$LN93@operator@9:
	mov	eax, DWORD PTR $T253449[ebp]
	cmp	eax, DWORD PTR $T253466[ebp]
	je	SHORT $LN85@operator@9
	jmp	SHORT $LN92@operator@9
$LN85@operator@9:

; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T253490[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T253489[ebp], edx
	mov	eax, DWORD PTR $T253489[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@operator@9:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T253494[ebp], eax
	mov	ecx, DWORD PTR $T253494[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Buy
	movzx	edx, al
	test	edx, edx
	je	$LN9@operator@9

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T253557[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T253556[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T253555[ebp], edx
	mov	eax, DWORD PTR $T253557[ebp]
	mov	DWORD PTR $T253545[ebp], eax
	mov	ecx, DWORD PTR $T253555[ebp]
	mov	DWORD PTR $T253544[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T253548[ebp], dl
	mov	al, BYTE PTR __Cat$253552[ebp]
	mov	BYTE PTR $T253549[ebp], al
	movzx	ecx, BYTE PTR $T253548[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T253549[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253545[ebp]
	push	ecx
	mov	edx, DWORD PTR $T253556[ebp]
	push	edx
	mov	eax, DWORD PTR $T253544[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@operator@9:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 599  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::operator=
_TEXT	ENDS
PUBLIC	?insert@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@ABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::insert
PUBLIC	??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T253609 = -32						; size = 4
$T253599 = -28						; size = 4
$T253589 = -24						; size = 4
__Cat$253596 = -19					; size = 1
$T253594 = -18						; size = 1
$T253593 = -17						; size = 1
$T253566 = -16						; size = 4
$T253562 = -12						; size = 4
$T253561 = -8						; size = 4
$T253560 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T253566[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@6
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@6
$LN9@push_back@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@6:
	mov	ecx, DWORD PTR $T253566[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@6

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T253599[ebp], eax
	mov	ecx, DWORD PTR $T253599[ebp]
	mov	DWORD PTR $T253589[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T253593[ebp], dl
	mov	al, BYTE PTR __Cat$253596[ebp]
	mov	BYTE PTR $T253594[ebp], al
	movzx	ecx, BYTE PTR $T253593[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T253594[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T253589[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 2
	add	eax, DWORD PTR $T253599[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@6
$LN2@push_back@6:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T253609[ebp], eax
	mov	ecx, DWORD PTR $T253609[ebp]
	mov	DWORD PTR $T253561[ebp], ecx
	mov	edx, DWORD PTR $T253561[ebp]
	mov	DWORD PTR $T253560[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253560[ebp]
	push	ecx
	lea	edx, DWORD PTR $T253562[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@ABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::insert
$LN3@push_back@6:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAEXABW4EraTypes@@@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::~_Vector_val<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvPlot *,std::allocator<CvPlot *> >::~_Vector_val<CvPlot *,std::allocator<CvPlot *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvPlot *,std::allocator<CvPlot *> >::~_Vector_val<CvPlot *,std::allocator<CvPlot *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >::~_Vector_val<enum PlayerTypes,std::allocator<enum PlayerTypes> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::~_Vector_val<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >::~_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >::~_Vector_val<enum EraTypes,std::allocator<enum EraTypes> >
_TEXT	ENDS
EXTRN	_memcpy:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0
__ehfuncinfo$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -56						; size = 4
_this$ = -52						; size = 4
$T253718 = -40						; size = 4
_pRet$253714 = -36					; size = 4
$T253708 = -32						; size = 4
$T253707 = -28						; size = 4
_i$227848 = -24						; size = 4
_uiNewSize$227840 = -20					; size = 4
_pTemp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvGreatWork,22,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$227840[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$227840[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$227840[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T253718[ebp], ecx
	cmp	DWORD PTR $T253718[ebp], 22		; 00000016H
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T253718[ebp]
	imul	edx, 48					; 00000030H
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$253714[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T253718[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$253714[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$253714[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	xor	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$227848[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$227848[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227848[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$227848[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$227848[ebp]
	imul	edx, 48					; 00000030H
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T253708[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T253708[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	eax, DWORD PTR _i$227848[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR $T253708[ebp]
	call	??0CvGreatWork@@QAE@ABV0@@Z
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	edx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T253707[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z ; FStaticVector<CvGreatWork,22,0,297,0>::Free

; 769  : 		m_pData = pTemp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [ecx], edx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1068], 1

; 772  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0:
	mov	eax, DWORD PTR _i$227848[ebp]
	imul	eax, 48					; 00000030H
	add	eax, DWORD PTR _pTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253708[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GrowSize@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvGreatWork,22,0,297,0>::GrowSize
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Odtp
;	COMDAT ?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T253791 = -8						; size = 4
_i$253794 = -4						; size = 4
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z PROC ; FStaticVector<CvGreatWork,22,0,297,0>::Free, COMDAT
; _this$ = ecx

; 809  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Free
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@Free
	mov	DWORD PTR _i$253794[ebp], 0
	jmp	SHORT $LN7@Free
$LN6@Free:
	mov	edx, DWORD PTR _i$253794[ebp]
	add	edx, 1
	mov	DWORD PTR _i$253794[ebp], edx
$LN7@Free:
	mov	eax, DWORD PTR _i$253794[ebp]
	cmp	eax, DWORD PTR _uiNumElements$[ebp]
	jae	SHORT $LN2@Free
	mov	ecx, DWORD PTR _i$253794[ebp]
	imul	ecx, 48					; 00000030H
	add	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR $T253791[ebp], ecx
	mov	ecx, DWORD PTR $T253791[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN12@Free
	mov	eax, DWORD PTR $T253791[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN12@Free:
	jmp	SHORT $LN6@Free
$LN2@Free:

; 811  : 		if( pVal != (T*)m_aData )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR _pVal$[ebp], ecx
	je	SHORT $LN3@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	mov	edx, DWORD PTR _pVal$[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN3@Free:

; 813  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?Free@?$FStaticVector@VCvGreatWork@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAVCvGreatWork@@I@Z ENDP ; FStaticVector<CvGreatWork,22,0,297,0>::Free
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ PROC		; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@VCvGreatWork@@$0A@@@QAE@XZ ENDP		; BaseVector<CvGreatWork,0>::~BaseVector<CvGreatWork,0>
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Insert_n
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@ABVCvGreatWorkBuildingInMyEmpire@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$253862 = -24					; size = 4
$T253845 = -20						; size = 4
$T253826 = -16						; size = 4
$T253813 = -12						; size = 4
$T253810 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@ABVCvGreatWorkBuildingInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253826[ebp], eax
	mov	ecx, DWORD PTR $T253826[ebp]
	mov	DWORD PTR $T253810[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T253810[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253845[ebp], eax
	mov	ecx, DWORD PTR $T253845[ebp]
	mov	DWORD PTR $T253813[ebp], ecx
	mov	edx, DWORD PTR $T253813[ebp]
	mov	DWORD PTR __Tmp$253862[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$253862[ebp]
	mov	DWORD PTR __Tmp$253862[ebp], eax
	mov	ecx, DWORD PTR __Tmp$253862[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@ABVCvGreatWorkBuildingInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::insert
_TEXT	ENDS
PUBLIC	??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkBuildingInMyEmpire>
PUBLIC	?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$253882 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$253882[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$253882[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$253882[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkBuildingInMyEmpire>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T253978 = -32						; size = 4
$T253977 = -28						; size = 4
$T253973 = -24						; size = 4
$T253972 = -20						; size = 4
$T253954 = -16						; size = 4
$T253953 = -12						; size = 4
$T253937 = -8						; size = 4
__Cat$253962 = -2					; size = 1
$T253960 = -1						; size = 1
?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253973[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T253972[ebp], ecx
	mov	edx, DWORD PTR $T253973[ebp]
	mov	DWORD PTR $T253954[ebp], edx
	mov	eax, DWORD PTR $T253972[ebp]
	mov	DWORD PTR $T253953[ebp], eax
	mov	cl, BYTE PTR __Cat$253962[ebp]
	mov	BYTE PTR $T253960[ebp], cl
	mov	edx, DWORD PTR $T253953[ebp]
	mov	DWORD PTR $T253937[ebp], edx
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	eax, DWORD PTR $T253937[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T253937[ebp], eax
$LN12@Tidy:
	mov	ecx, DWORD PTR $T253937[ebp]
	cmp	ecx, DWORD PTR $T253954[ebp]
	je	SHORT $LN4@Tidy
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T253978[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T253977[ebp], eax
	mov	ecx, DWORD PTR $T253977[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@ABQAVCvPlot@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$254038 = -24					; size = 4
$T254016 = -20						; size = 4
$T253997 = -16						; size = 4
$T253984 = -12						; size = 4
$T253981 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@ABQAVCvPlot@@@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T253997[ebp], ecx
	mov	edx, DWORD PTR $T253997[ebp]
	mov	DWORD PTR $T253981[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T253981[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@2:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T254016[ebp], edx
	mov	eax, DWORD PTR $T254016[ebp]
	mov	DWORD PTR $T253984[ebp], eax
	mov	ecx, DWORD PTR $T253984[ebp]
	mov	DWORD PTR __Tmp$254038[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$254038[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$254038[ebp], ecx
	mov	edx, DWORD PTR __Tmp$254038[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@ABQAVCvPlot@@@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T254131 = -52						; size = 4
$T254120 = -48						; size = 4
$T254119 = -44						; size = 4
__Cat$254126 = -40					; size = 1
$T254123 = -39						; size = 1
__Ptr$227947 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ; stdext::unchecked_copy<CvPlot * *,CvPlot * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$227947[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254131[ebp], edx
	mov	eax, DWORD PTR $T254131[ebp]
	mov	DWORD PTR $T254120[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227947[ebp]
	mov	DWORD PTR $T254119[ebp], ecx
	mov	dl, BYTE PTR __Cat$254126[ebp]
	mov	BYTE PTR $T254123[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$227947[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@V?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@0@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z ; std::_Allocate<CvPlot *>
PUBLIC	?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$254148 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$254148[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$254148[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$254148[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z ; std::_Allocate<CvPlot *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T254212 = -28						; size = 4
$T254211 = -24						; size = 4
$T254207 = -20						; size = 4
$T254206 = -16						; size = 4
$T254195 = -12						; size = 4
$T254194 = -8						; size = 4
__Cat$254201 = -2					; size = 1
$T254198 = -1						; size = 1
?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254207[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254206[ebp], ecx
	mov	edx, DWORD PTR $T254207[ebp]
	mov	DWORD PTR $T254195[ebp], edx
	mov	eax, DWORD PTR $T254206[ebp]
	mov	DWORD PTR $T254194[ebp], eax
	mov	cl, BYTE PTR __Cat$254201[ebp]
	mov	BYTE PTR $T254198[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T254212[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254211[ebp], eax
	mov	ecx, DWORD PTR $T254211[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@ABW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$254267 = -24					; size = 4
$T254250 = -20						; size = 4
$T254231 = -16						; size = 4
$T254218 = -12						; size = 4
$T254215 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@ABW4PlayerTypes@@@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@3
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@3
$LN3@insert@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254231[ebp], ecx
	mov	edx, DWORD PTR $T254231[ebp]
	mov	DWORD PTR $T254215[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T254215[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@3:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T254250[ebp], edx
	mov	eax, DWORD PTR $T254250[ebp]
	mov	DWORD PTR $T254218[ebp], eax
	mov	ecx, DWORD PTR $T254218[ebp]
	mov	DWORD PTR __Tmp$254267[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$254267[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$254267[ebp], ecx
	mov	edx, DWORD PTR __Tmp$254267[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@ABW4PlayerTypes@@@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T254414 = -64						; size = 4
$T254396 = -60						; size = 4
$T254395 = -56						; size = 4
$T254379 = -52						; size = 4
__Cat$254402 = -46					; size = 1
$T254399 = -45						; size = 1
$T254353 = -44						; size = 4
$T254352 = -40						; size = 4
$T254351 = -36						; size = 4
$T254334 = -30						; size = 1
$T254333 = -29						; size = 1
$T254332 = -28						; size = 4
$T254331 = -24						; size = 4
__Cat$254341 = -16					; size = 1
$T254338 = -15						; size = 1
$T254337 = -14						; size = 1
$T254336 = -13						; size = 1
__Ptr$228003 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T254353[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254352[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T254351[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254336[ebp], cl
	mov	dl, BYTE PTR __Cat$254341[ebp]
	mov	BYTE PTR $T254337[ebp], dl
	mov	al, BYTE PTR $T254336[ebp]
	mov	BYTE PTR $T254334[ebp], al
	mov	cl, BYTE PTR $T254338[ebp]
	mov	BYTE PTR $T254333[ebp], cl
	mov	edx, DWORD PTR $T254353[ebp]
	mov	DWORD PTR $T254332[ebp], edx
	mov	eax, DWORD PTR $T254351[ebp]
	mov	DWORD PTR $T254331[ebp], eax
	jmp	SHORT $LN28@erase@2
$LN27@erase@2:
	mov	ecx, DWORD PTR $T254332[ebp]
	add	ecx, 4
	mov	DWORD PTR $T254332[ebp], ecx
	mov	edx, DWORD PTR $T254331[ebp]
	add	edx, 4
	mov	DWORD PTR $T254331[ebp], edx
$LN28@erase@2:
	mov	eax, DWORD PTR $T254331[ebp]
	cmp	eax, DWORD PTR $T254352[ebp]
	je	SHORT $LN20@erase@2
	mov	ecx, DWORD PTR $T254332[ebp]
	mov	edx, DWORD PTR $T254331[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN27@erase@2
$LN20@erase@2:
	mov	ecx, DWORD PTR $T254332[ebp]
	mov	DWORD PTR __Ptr$228003[ebp], ecx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T254414[ebp], eax
	mov	ecx, DWORD PTR $T254414[ebp]
	mov	DWORD PTR $T254396[ebp], ecx
	mov	edx, DWORD PTR __Ptr$228003[ebp]
	mov	DWORD PTR $T254395[ebp], edx
	mov	al, BYTE PTR __Cat$254402[ebp]
	mov	BYTE PTR $T254399[ebp], al
	mov	ecx, DWORD PTR $T254395[ebp]
	mov	DWORD PTR $T254379[ebp], ecx
	jmp	SHORT $LN39@erase@2
$LN38@erase@2:
	mov	edx, DWORD PTR $T254379[ebp]
	add	edx, 4
	mov	DWORD PTR $T254379[ebp], edx
$LN39@erase@2:
	mov	eax, DWORD PTR $T254379[ebp]
	cmp	eax, DWORD PTR $T254396[ebp]
	je	SHORT $LN31@erase@2
	jmp	SHORT $LN38@erase@2
$LN31@erase@2:

; 1049 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$228003[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@V?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@0@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z ; std::_Allocate<enum PlayerTypes>
PUBLIC	?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$254428 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$254428[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$254428[ebp], 0
	jbe	SHORT $LN11@Buy@3
	mov	eax, DWORD PTR __Count$254428[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@3
$LN11@Buy@3:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@3:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z ; std::_Allocate<enum PlayerTypes>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T254525 = -32						; size = 4
$T254524 = -28						; size = 4
$T254520 = -24						; size = 4
$T254519 = -20						; size = 4
$T254501 = -16						; size = 4
$T254500 = -12						; size = 4
$T254484 = -8						; size = 4
__Cat$254507 = -2					; size = 1
$T254504 = -1						; size = 1
?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254520[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254519[ebp], ecx
	mov	edx, DWORD PTR $T254520[ebp]
	mov	DWORD PTR $T254501[ebp], edx
	mov	eax, DWORD PTR $T254519[ebp]
	mov	DWORD PTR $T254500[ebp], eax
	mov	cl, BYTE PTR __Cat$254507[ebp]
	mov	BYTE PTR $T254504[ebp], cl
	mov	edx, DWORD PTR $T254500[ebp]
	mov	DWORD PTR $T254484[ebp], edx
	jmp	SHORT $LN12@Tidy@3
$LN11@Tidy@3:
	mov	eax, DWORD PTR $T254484[ebp]
	add	eax, 4
	mov	DWORD PTR $T254484[ebp], eax
$LN12@Tidy@3:
	mov	ecx, DWORD PTR $T254484[ebp]
	cmp	ecx, DWORD PTR $T254501[ebp]
	je	SHORT $LN4@Tidy@3
	jmp	SHORT $LN11@Tidy@3
$LN4@Tidy@3:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T254525[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254524[ebp], eax
	mov	ecx, DWORD PTR $T254524[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXXZ ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@ABVCvGreatWorkInMyEmpire@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$254580 = -24					; size = 4
$T254563 = -20						; size = 4
$T254544 = -16						; size = 4
$T254531 = -12						; size = 4
$T254528 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@ABVCvGreatWorkInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@4
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@4
$LN3@insert@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254544[ebp], eax
	mov	ecx, DWORD PTR $T254544[ebp]
	mov	DWORD PTR $T254528[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T254528[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@4:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254563[ebp], eax
	mov	ecx, DWORD PTR $T254563[ebp]
	mov	DWORD PTR $T254531[ebp], ecx
	mov	edx, DWORD PTR $T254531[ebp]
	mov	DWORD PTR __Tmp$254580[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Tmp$254580[ebp]
	mov	DWORD PTR __Tmp$254580[ebp], eax
	mov	ecx, DWORD PTR __Tmp$254580[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@ABVCvGreatWorkInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T254727 = -64						; size = 4
$T254709 = -60						; size = 4
$T254708 = -56						; size = 4
$T254692 = -52						; size = 4
__Cat$254715 = -46					; size = 1
$T254713 = -45						; size = 1
$T254666 = -44						; size = 4
$T254665 = -40						; size = 4
$T254664 = -36						; size = 4
$T254647 = -30						; size = 1
$T254646 = -29						; size = 1
$T254645 = -28						; size = 4
$T254644 = -24						; size = 4
__Cat$254654 = -16					; size = 1
$T254652 = -15						; size = 1
$T254651 = -14						; size = 1
$T254650 = -13						; size = 1
__Ptr$228061 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T254666[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254665[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T254664[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254650[ebp], cl
	mov	dl, BYTE PTR __Cat$254654[ebp]
	mov	BYTE PTR $T254651[ebp], dl
	mov	al, BYTE PTR $T254650[ebp]
	mov	BYTE PTR $T254647[ebp], al
	mov	cl, BYTE PTR $T254652[ebp]
	mov	BYTE PTR $T254646[ebp], cl
	mov	edx, DWORD PTR $T254666[ebp]
	mov	DWORD PTR $T254645[ebp], edx
	mov	eax, DWORD PTR $T254664[ebp]
	mov	DWORD PTR $T254644[ebp], eax
	jmp	SHORT $LN28@erase@3
$LN27@erase@3:
	mov	ecx, DWORD PTR $T254645[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T254645[ebp], ecx
	mov	edx, DWORD PTR $T254644[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T254644[ebp], edx
$LN28@erase@3:
	mov	eax, DWORD PTR $T254644[ebp]
	cmp	eax, DWORD PTR $T254665[ebp]
	je	SHORT $LN20@erase@3
	mov	ecx, DWORD PTR $T254644[ebp]
	mov	edx, DWORD PTR $T254645[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	jmp	SHORT $LN27@erase@3
$LN20@erase@3:
	mov	edx, DWORD PTR $T254645[ebp]
	mov	DWORD PTR __Ptr$228061[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T254727[ebp], ecx
	mov	edx, DWORD PTR $T254727[ebp]
	mov	DWORD PTR $T254709[ebp], edx
	mov	eax, DWORD PTR __Ptr$228061[ebp]
	mov	DWORD PTR $T254708[ebp], eax
	mov	cl, BYTE PTR __Cat$254715[ebp]
	mov	BYTE PTR $T254713[ebp], cl
	mov	edx, DWORD PTR $T254708[ebp]
	mov	DWORD PTR $T254692[ebp], edx
	jmp	SHORT $LN39@erase@3
$LN38@erase@3:
	mov	eax, DWORD PTR $T254692[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR $T254692[ebp], eax
$LN39@erase@3:
	mov	ecx, DWORD PTR $T254692[ebp]
	cmp	ecx, DWORD PTR $T254709[ebp]
	je	SHORT $LN31@erase@3
	jmp	SHORT $LN38@erase@3
$LN31@erase@3:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$228061[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@V?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@0@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkInMyEmpire>
PUBLIC	?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$254742 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$254742[ebp], 178956970 ; 0aaaaaaaH
	cmp	DWORD PTR __Count$254742[ebp], 0
	jbe	SHORT $LN11@Buy@4
	mov	eax, DWORD PTR __Count$254742[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@4
$LN11@Buy@4:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@4:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkInMyEmpire>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T254838 = -32						; size = 4
$T254837 = -28						; size = 4
$T254833 = -24						; size = 4
$T254832 = -20						; size = 4
$T254814 = -16						; size = 4
$T254813 = -12						; size = 4
$T254797 = -8						; size = 4
__Cat$254820 = -2					; size = 1
$T254818 = -1						; size = 1
?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254833[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254832[ebp], ecx
	mov	edx, DWORD PTR $T254833[ebp]
	mov	DWORD PTR $T254814[ebp], edx
	mov	eax, DWORD PTR $T254832[ebp]
	mov	DWORD PTR $T254813[ebp], eax
	mov	cl, BYTE PTR __Cat$254820[ebp]
	mov	BYTE PTR $T254818[ebp], cl
	mov	edx, DWORD PTR $T254813[ebp]
	mov	DWORD PTR $T254797[ebp], edx
	jmp	SHORT $LN12@Tidy@4
$LN11@Tidy@4:
	mov	eax, DWORD PTR $T254797[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR $T254797[ebp], eax
$LN12@Tidy@4:
	mov	ecx, DWORD PTR $T254797[ebp]
	cmp	ecx, DWORD PTR $T254814[ebp]
	je	SHORT $LN4@Tidy@4
	jmp	SHORT $LN11@Tidy@4
$LN4@Tidy@4:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T254838[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254837[ebp], eax
	mov	ecx, DWORD PTR $T254837[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@ABW4EraTypes@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$254893 = -24					; size = 4
$T254876 = -20						; size = 4
$T254857 = -16						; size = 4
$T254844 = -12						; size = 4
$T254841 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@ABW4EraTypes@@@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@5
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@5
$LN3@insert@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254857[ebp], ecx
	mov	edx, DWORD PTR $T254857[ebp]
	mov	DWORD PTR $T254841[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T254841[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@5:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T254876[ebp], edx
	mov	eax, DWORD PTR $T254876[ebp]
	mov	DWORD PTR $T254844[ebp], eax
	mov	ecx, DWORD PTR $T254844[ebp]
	mov	DWORD PTR __Tmp$254893[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$254893[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$254893[ebp], ecx
	mov	edx, DWORD PTR __Tmp$254893[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@ABW4EraTypes@@@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T255040 = -64						; size = 4
$T255022 = -60						; size = 4
$T255021 = -56						; size = 4
$T255005 = -52						; size = 4
__Cat$255028 = -46					; size = 1
$T255025 = -45						; size = 1
$T254979 = -44						; size = 4
$T254978 = -40						; size = 4
$T254977 = -36						; size = 4
$T254960 = -30						; size = 1
$T254959 = -29						; size = 1
$T254958 = -28						; size = 4
$T254957 = -24						; size = 4
__Cat$254967 = -16					; size = 1
$T254965 = -15						; size = 1
$T254964 = -14						; size = 1
$T254963 = -13						; size = 1
__Ptr$228141 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T254979[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254978[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T254977[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254963[ebp], cl
	mov	dl, BYTE PTR __Cat$254967[ebp]
	mov	BYTE PTR $T254964[ebp], dl
	mov	al, BYTE PTR $T254963[ebp]
	mov	BYTE PTR $T254960[ebp], al
	mov	cl, BYTE PTR $T254965[ebp]
	mov	BYTE PTR $T254959[ebp], cl
	mov	edx, DWORD PTR $T254979[ebp]
	mov	DWORD PTR $T254958[ebp], edx
	mov	eax, DWORD PTR $T254977[ebp]
	mov	DWORD PTR $T254957[ebp], eax
	jmp	SHORT $LN28@erase@4
$LN27@erase@4:
	mov	ecx, DWORD PTR $T254958[ebp]
	add	ecx, 4
	mov	DWORD PTR $T254958[ebp], ecx
	mov	edx, DWORD PTR $T254957[ebp]
	add	edx, 4
	mov	DWORD PTR $T254957[ebp], edx
$LN28@erase@4:
	mov	eax, DWORD PTR $T254957[ebp]
	cmp	eax, DWORD PTR $T254978[ebp]
	je	SHORT $LN20@erase@4
	mov	ecx, DWORD PTR $T254958[ebp]
	mov	edx, DWORD PTR $T254957[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN27@erase@4
$LN20@erase@4:
	mov	ecx, DWORD PTR $T254958[ebp]
	mov	DWORD PTR __Ptr$228141[ebp], ecx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T255040[ebp], eax
	mov	ecx, DWORD PTR $T255040[ebp]
	mov	DWORD PTR $T255022[ebp], ecx
	mov	edx, DWORD PTR __Ptr$228141[ebp]
	mov	DWORD PTR $T255021[ebp], edx
	mov	al, BYTE PTR __Cat$255028[ebp]
	mov	BYTE PTR $T255025[ebp], al
	mov	ecx, DWORD PTR $T255021[ebp]
	mov	DWORD PTR $T255005[ebp], ecx
	jmp	SHORT $LN39@erase@4
$LN38@erase@4:
	mov	edx, DWORD PTR $T255005[ebp]
	add	edx, 4
	mov	DWORD PTR $T255005[ebp], edx
$LN39@erase@4:
	mov	eax, DWORD PTR $T255005[ebp]
	cmp	eax, DWORD PTR $T255022[ebp]
	je	SHORT $LN31@erase@4
	jmp	SHORT $LN38@erase@4
$LN31@erase@4:

; 1049 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$228141[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@V?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@0@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::erase
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z ; std::_Allocate<enum EraTypes>
PUBLIC	?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$255060 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$255060[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$255060[ebp], 0
	jbe	SHORT $LN11@Buy@5
	mov	eax, DWORD PTR __Count$255060[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@5
$LN11@Buy@5:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@5:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@5:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z ; std::_Allocate<enum EraTypes>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T255154 = -32						; size = 4
$T255153 = -28						; size = 4
$T255149 = -24						; size = 4
$T255148 = -20						; size = 4
$T255130 = -16						; size = 4
$T255129 = -12						; size = 4
$T255113 = -8						; size = 4
__Cat$255136 = -2					; size = 1
$T255133 = -1						; size = 1
?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T255149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T255148[ebp], ecx
	mov	edx, DWORD PTR $T255149[ebp]
	mov	DWORD PTR $T255130[ebp], edx
	mov	eax, DWORD PTR $T255148[ebp]
	mov	DWORD PTR $T255129[ebp], eax
	mov	cl, BYTE PTR __Cat$255136[ebp]
	mov	BYTE PTR $T255133[ebp], cl
	mov	edx, DWORD PTR $T255129[ebp]
	mov	DWORD PTR $T255113[ebp], edx
	jmp	SHORT $LN12@Tidy@5
$LN11@Tidy@5:
	mov	eax, DWORD PTR $T255113[ebp]
	add	eax, 4
	mov	DWORD PTR $T255113[ebp], eax
$LN12@Tidy@5:
	mov	ecx, DWORD PTR $T255113[ebp]
	cmp	ecx, DWORD PTR $T255130[ebp]
	je	SHORT $LN4@Tidy@5
	jmp	SHORT $LN11@Tidy@5
$LN4@Tidy@5:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T255154[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T255153[ebp], eax
	mov	ecx, DWORD PTR $T255153[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXXZ ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
PUBLIC	??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$2
__catchsym$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$0
__unwindtable$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z
_TEXT	SEGMENT
tv84 = -440						; size = 4
tv304 = -436						; size = 4
tv290 = -432						; size = 4
tv282 = -428						; size = 4
_this$ = -424						; size = 4
$T255838 = -420						; size = 4
$T255830 = -416						; size = 4
$T255829 = -412						; size = 4
$T255806 = -406						; size = 1
$T255805 = -405						; size = 1
$T255804 = -404						; size = 4
$T255803 = -400						; size = 4
$T255791 = -393						; size = 1
$T255790 = -392						; size = 4
$T255789 = -388						; size = 4
$T255788 = -384						; size = 4
__Cat$255823 = -380					; size = 1
$T255821 = -379						; size = 1
$T255820 = -378						; size = 1
__Cat$255813 = -376					; size = 1
$T255811 = -375						; size = 1
$T255810 = -374						; size = 1
$T255809 = -373						; size = 1
$T255763 = -372						; size = 4
$T255744 = -368						; size = 4
$T255727 = -361						; size = 1
$T255726 = -360						; size = 4
$T255716 = -356						; size = 4
$T255715 = -352						; size = 4
__Cat$255761 = -346					; size = 1
$T255759 = -345						; size = 1
$T255758 = -344						; size = 1
__Cat$255752 = -343					; size = 1
$T255749 = -342						; size = 1
$T255748 = -341						; size = 1
$T255691 = -340						; size = 4
$T255683 = -336						; size = 4
$T255675 = -332						; size = 4
$T255657 = -328						; size = 4
$T255656 = -324						; size = 4
$T255640 = -320						; size = 4
__Cat$255664 = -314					; size = 1
$T255661 = -313						; size = 1
$T255614 = -312						; size = 4
$T255613 = -308						; size = 4
$T255603 = -304						; size = 4
__Cat$255611 = -299					; size = 1
$T255608 = -298						; size = 1
$T255607 = -297						; size = 1
$T255587 = -296						; size = 4
$T255568 = -292						; size = 4
$T255551 = -285						; size = 1
$T255550 = -284						; size = 4
$T255540 = -280						; size = 4
$T255539 = -276						; size = 4
__Cat$255585 = -270					; size = 1
$T255582 = -269						; size = 1
$T255581 = -268						; size = 1
__Cat$255576 = -267					; size = 1
$T255573 = -266						; size = 1
$T255572 = -265						; size = 1
$T255515 = -264						; size = 4
$T255514 = -260						; size = 4
$T255510 = -256						; size = 4
$T255509 = -252						; size = 4
$T255491 = -248						; size = 4
$T255490 = -244						; size = 4
$T255474 = -240						; size = 4
__Cat$255498 = -234					; size = 1
$T255495 = -233						; size = 1
$T255425 = -232						; size = 4
$T255424 = -228						; size = 4
$T255408 = -224						; size = 4
__Cat$255432 = -218					; size = 1
$T255429 = -217						; size = 1
$T255365 = -216						; size = 4
$T255364 = -212						; size = 4
$T255348 = -208						; size = 4
__Cat$255372 = -202					; size = 1
$T255369 = -201						; size = 1
$T255322 = -200						; size = 4
$T255310 = -196						; size = 4
$T255300 = -189						; size = 1
$T255299 = -188						; size = 4
__Cat$255318 = -183					; size = 1
$T255315 = -182						; size = 1
$T255314 = -181						; size = 1
$T255287 = -180						; size = 4
$T255275 = -176						; size = 4
$T255265 = -169						; size = 1
$T255264 = -168						; size = 4
__Cat$255283 = -163					; size = 1
$T255280 = -162						; size = 1
$T255279 = -161						; size = 1
$T255252 = -160						; size = 4
$T255242 = -156						; size = 4
__Cat$255249 = -151					; size = 1
$T255246 = -150						; size = 1
$T255245 = -149						; size = 1
__Count$255211 = -136					; size = 4
__Count$255188 = -64					; size = 4
__Tmp$228245 = -60					; size = 12
__Oldend$228246 = -48					; size = 4
__Tmp$228235 = -44					; size = 12
__Ncopied$228222 = -32					; size = 4
__Newvec$228220 = -28					; size = 4
__Whereoff$228221 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$255188[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$255188[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	eax, DWORD PTR __Count$255188[ebp]
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR tv290[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$255211[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$255211[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	edx, DWORD PTR __Count$255211[ebp]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv304[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkBuildingInMyEmpire>
	add	esp, 8
	mov	DWORD PTR __Newvec$228220[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$228221[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$228222[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$228221[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255252[ebp], edx
	mov	eax, DWORD PTR $T255252[ebp]
	mov	DWORD PTR $T255242[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255245[ebp], cl
	mov	dl, BYTE PTR __Cat$255249[ebp]
	mov	BYTE PTR $T255246[ebp], dl
	movzx	eax, BYTE PTR $T255245[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T255246[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255242[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228222[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228222[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T255287[ebp], edx
	mov	eax, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255275[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255279[ebp], cl
	mov	dl, BYTE PTR __Cat$255283[ebp]
	mov	BYTE PTR $T255280[ebp], dl
	mov	al, BYTE PTR $T255279[ebp]
	mov	BYTE PTR $T255265[ebp], al
	mov	ecx, DWORD PTR $T255275[ebp]
	mov	DWORD PTR $T255264[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T255264[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255287[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228222[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228222[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T255322[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228221[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255310[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255314[ebp], cl
	mov	dl, BYTE PTR __Cat$255318[ebp]
	mov	BYTE PTR $T255315[ebp], dl
	mov	al, BYTE PTR $T255314[ebp]
	mov	BYTE PTR $T255300[ebp], al
	mov	ecx, DWORD PTR $T255310[ebp]
	mov	DWORD PTR $T255299[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T255299[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255322[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228222[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$228221[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255365[ebp], eax
	mov	ecx, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255364[ebp], ecx
	mov	dl, BYTE PTR __Cat$255372[ebp]
	mov	BYTE PTR $T255369[ebp], dl
	mov	eax, DWORD PTR $T255364[ebp]
	mov	DWORD PTR $T255348[ebp], eax
	jmp	SHORT $LN91@Insert_n
$LN90@Insert_n:
	mov	ecx, DWORD PTR $T255348[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T255348[ebp], ecx
$LN91@Insert_n:
	mov	edx, DWORD PTR $T255348[ebp]
	cmp	edx, DWORD PTR $T255365[ebp]
	je	SHORT $LN7@Insert_n
	jmp	SHORT $LN90@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228222[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR __Whereoff$228221[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$228220[ebp]
	add	ecx, eax
	mov	DWORD PTR $T255425[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$228221[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR $T255424[ebp], edx
	mov	al, BYTE PTR __Cat$255432[ebp]
	mov	BYTE PTR $T255429[ebp], al
	mov	ecx, DWORD PTR $T255424[ebp]
	mov	DWORD PTR $T255408[ebp], ecx
	jmp	SHORT $LN106@Insert_n
$LN105@Insert_n:
	mov	edx, DWORD PTR $T255408[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T255408[ebp], edx
$LN106@Insert_n:
	mov	eax, DWORD PTR $T255408[ebp]
	cmp	eax, DWORD PTR $T255425[ebp]
	je	SHORT $LN6@Insert_n
	jmp	SHORT $LN105@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$228220[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T255510[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T255509[ebp], eax
	mov	ecx, DWORD PTR $T255510[ebp]
	mov	DWORD PTR $T255491[ebp], ecx
	mov	edx, DWORD PTR $T255509[ebp]
	mov	DWORD PTR $T255490[ebp], edx
	mov	al, BYTE PTR __Cat$255498[ebp]
	mov	BYTE PTR $T255495[ebp], al
	mov	ecx, DWORD PTR $T255490[ebp]
	mov	DWORD PTR $T255474[ebp], ecx
	jmp	SHORT $LN125@Insert_n
$LN124@Insert_n:
	mov	edx, DWORD PTR $T255474[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T255474[ebp], edx
$LN125@Insert_n:
	mov	eax, DWORD PTR $T255474[ebp]
	cmp	eax, DWORD PTR $T255491[ebp]
	je	SHORT $LN117@Insert_n
	jmp	SHORT $LN124@Insert_n
$LN117@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T255515[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T255514[ebp], eax
	mov	ecx, DWORD PTR $T255514[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$228220[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$228220[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$228220[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$228235[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$228235[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$228235[ebp+8], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T255587[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255568[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T255572[ebp], al
	mov	cl, BYTE PTR __Cat$255576[ebp]
	mov	BYTE PTR $T255573[ebp], cl
	mov	dl, BYTE PTR $T255572[ebp]
	mov	BYTE PTR $T255551[ebp], dl
	mov	eax, DWORD PTR $T255568[ebp]
	mov	DWORD PTR $T255550[ebp], eax
	mov	ecx, DWORD PTR $T255550[ebp]
	mov	DWORD PTR $T255540[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255539[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T255581[ebp], al
	mov	cl, BYTE PTR __Cat$255585[ebp]
	mov	BYTE PTR $T255582[ebp], cl
	movzx	edx, BYTE PTR $T255581[ebp]
	push	edx
	movzx	eax, BYTE PTR $T255582[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255540[ebp]
	push	edx
	mov	eax, DWORD PTR $T255587[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255539[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T255614[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T255613[ebp], ecx
	mov	edx, DWORD PTR $T255613[ebp]
	mov	DWORD PTR $T255603[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T255607[ebp], al
	mov	cl, BYTE PTR __Cat$255611[ebp]
	mov	BYTE PTR $T255608[ebp], cl
	movzx	edx, BYTE PTR $T255607[ebp]
	push	edx
	movzx	eax, BYTE PTR $T255608[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$228235[ebp]
	push	edx
	mov	eax, DWORD PTR $T255614[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255603[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T255675[ebp], edx
	mov	ecx, DWORD PTR $T255675[ebp]
	mov	DWORD PTR $T255657[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255656[ebp], edx
	mov	al, BYTE PTR __Cat$255664[ebp]
	mov	BYTE PTR $T255661[ebp], al
	mov	ecx, DWORD PTR $T255656[ebp]
	mov	DWORD PTR $T255640[ebp], ecx
	jmp	SHORT $LN160@Insert_n
$LN159@Insert_n:
	mov	edx, DWORD PTR $T255640[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T255640[ebp], edx
$LN160@Insert_n:
	mov	eax, DWORD PTR $T255640[ebp]
	cmp	eax, DWORD PTR $T255657[ebp]
	je	SHORT $LN152@Insert_n
	jmp	SHORT $LN159@Insert_n
$LN152@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T255691[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255683[ebp], ecx
	jmp	SHORT $LN171@Insert_n
$LN170@Insert_n:
	mov	edx, DWORD PTR $T255683[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T255683[ebp], edx
$LN171@Insert_n:
	mov	eax, DWORD PTR $T255683[ebp]
	cmp	eax, DWORD PTR $T255691[ebp]
	je	SHORT $LN167@Insert_n
	mov	ecx, DWORD PTR $T255683[ebp]
	mov	edx, DWORD PTR __Tmp$228235[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$228235[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$228235[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN170@Insert_n
$LN167@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$228245[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$228245[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$228245[ebp+8], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$228246[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T255763[ebp], ecx
	mov	edx, DWORD PTR $T255763[ebp]
	mov	DWORD PTR $T255744[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T255748[ebp], al
	mov	cl, BYTE PTR __Cat$255752[ebp]
	mov	BYTE PTR $T255749[ebp], cl
	mov	dl, BYTE PTR $T255748[ebp]
	mov	BYTE PTR $T255727[ebp], dl
	mov	eax, DWORD PTR $T255744[ebp]
	mov	DWORD PTR $T255726[ebp], eax
	mov	ecx, DWORD PTR $T255726[ebp]
	mov	DWORD PTR $T255716[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$228246[ebp]
	sub	eax, edx
	mov	DWORD PTR $T255715[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255758[ebp], cl
	mov	dl, BYTE PTR __Cat$255761[ebp]
	mov	BYTE PTR $T255759[ebp], dl
	movzx	eax, BYTE PTR $T255758[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T255759[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T255716[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$228246[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255715[ebp]
	push	edx
	call	??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$228246[ebp]
	mov	DWORD PTR $T255830[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255829[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255809[ebp], cl
	mov	dl, BYTE PTR __Cat$255813[ebp]
	mov	BYTE PTR $T255810[ebp], dl
	mov	al, BYTE PTR $T255809[ebp]
	mov	BYTE PTR $T255806[ebp], al
	mov	cl, BYTE PTR $T255811[ebp]
	mov	BYTE PTR $T255805[ebp], cl
	mov	edx, DWORD PTR $T255830[ebp]
	mov	DWORD PTR $T255804[ebp], edx
	mov	eax, DWORD PTR $T255829[ebp]
	mov	DWORD PTR $T255803[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255820[ebp], cl
	mov	dl, BYTE PTR __Cat$255823[ebp]
	mov	BYTE PTR $T255821[ebp], dl
	mov	al, BYTE PTR $T255820[ebp]
	mov	BYTE PTR $T255791[ebp], al
	mov	ecx, DWORD PTR $T255804[ebp]
	mov	DWORD PTR $T255790[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$228246[ebp]
	sub	eax, edx
	mov	DWORD PTR $T255789[ebp], eax
	mov	ecx, DWORD PTR $T255803[ebp]
	mov	DWORD PTR $T255788[ebp], ecx
$LN197@Insert_n:
	mov	edx, DWORD PTR $T255788[ebp]
	cmp	edx, DWORD PTR $T255789[ebp]
	je	SHORT $LN186@Insert_n
	mov	eax, DWORD PTR $T255789[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR $T255789[ebp], eax
	mov	ecx, DWORD PTR $T255790[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T255790[ebp], ecx
	mov	edx, DWORD PTR $T255789[ebp]
	mov	eax, DWORD PTR $T255790[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN197@Insert_n
$LN186@Insert_n:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T255838[ebp], eax
	jmp	SHORT $LN204@Insert_n
$LN203@Insert_n:
	mov	ecx, DWORD PTR $T255838[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T255838[ebp], ecx
$LN204@Insert_n:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T255838[ebp], edx
	je	SHORT $LN16@Insert_n
	mov	eax, DWORD PTR $T255838[ebp]
	mov	ecx, DWORD PTR __Tmp$228245[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$228245[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$228245[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN203@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-444]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@2@IABVCvGreatWorkBuildingInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Insert_n
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T255884 = -2092					; size = 4
$T255883 = -2088					; size = 4
$T255882 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T255882[ebp], eax
	mov	ecx, DWORD PTR $T255882[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T255883[ebp], eax
	mov	eax, DWORD PTR $T255883[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T255884[ebp], eax
	mov	ecx, DWORD PTR $T255884[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T255888 = -80						; size = 28
$T255887 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ PROC ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T255888[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T255887[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T255887[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T255888[ebp]
	push	eax
	lea	ecx, DWORD PTR $T255887[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T255887[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T255887[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T255888[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T255888[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T255887[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@KAXXZ ENDP ; std::vector<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??$_Unchecked_move_backward@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvPlot * *,CvPlot * *>
PUBLIC	?_Ufill@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEPAPAVCvPlot@@PAPAV3@IABQAV3@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Ufill
PUBLIC	??$_Uninit_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@std@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$2
__catchsym$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$0
__unwindtable$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T256492 = -412						; size = 4
$T256440 = -368						; size = 4
$T256428 = -364						; size = 4
$T256418 = -357						; size = 1
$T256417 = -356						; size = 4
__Cat$256436 = -327					; size = 1
$T256433 = -326						; size = 1
$T256432 = -325						; size = 1
$T256389 = -324						; size = 4
$T256381 = -320						; size = 4
$T256373 = -316						; size = 4
$T256362 = -312						; size = 4
$T256361 = -308						; size = 4
__Cat$256368 = -302					; size = 1
$T256365 = -301						; size = 1
$T256290 = -276						; size = 4
$T256271 = -272						; size = 4
$T256254 = -265						; size = 1
$T256253 = -264						; size = 4
$T256243 = -260						; size = 4
$T256242 = -256						; size = 4
__Cat$256286 = -250					; size = 1
$T256283 = -249						; size = 1
$T256282 = -248						; size = 1
__Cat$256279 = -247					; size = 1
$T256276 = -246						; size = 1
$T256275 = -245						; size = 1
$T256218 = -244						; size = 4
$T256217 = -240						; size = 4
$T256213 = -236						; size = 4
$T256212 = -232						; size = 4
$T256201 = -228						; size = 4
$T256200 = -224						; size = 4
__Cat$256207 = -218					; size = 1
$T256204 = -217						; size = 1
$T256165 = -216						; size = 4
$T256164 = -212						; size = 4
__Cat$256171 = -206					; size = 1
$T256168 = -205						; size = 1
$T256135 = -204						; size = 4
$T256134 = -200						; size = 4
__Cat$256141 = -194					; size = 1
$T256138 = -193						; size = 1
$T256115 = -192						; size = 4
$T256103 = -188						; size = 4
$T256093 = -181						; size = 1
$T256092 = -180						; size = 4
__Cat$256110 = -175					; size = 1
$T256107 = -174						; size = 1
$T256106 = -173						; size = 1
$T256080 = -172						; size = 4
$T256068 = -168						; size = 4
$T256058 = -161						; size = 1
$T256057 = -160						; size = 4
__Cat$256075 = -155					; size = 1
$T256072 = -154						; size = 1
$T256071 = -153						; size = 1
$T256045 = -152						; size = 4
$T256033 = -148						; size = 4
$T256023 = -141						; size = 1
$T256022 = -140						; size = 4
__Cat$256040 = -135					; size = 1
$T256037 = -134						; size = 1
$T256036 = -133						; size = 1
__Count$255996 = -120					; size = 4
__Count$255970 = -48					; size = 4
__Tmp$228308 = -44					; size = 4
__Oldend$228309 = -40					; size = 4
__Tmp$228298 = -36					; size = 4
__Ncopied$228285 = -32					; size = 4
__Newvec$228283 = -28					; size = 4
__Whereoff$228284 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@2
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@2
$LN29@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@2:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$255970[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$255970[ebp], 0
	jbe	SHORT $LN35@Insert_n@2
	mov	edx, DWORD PTR __Count$255970[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@2
$LN35@Insert_n@2:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Xlen
	jmp	$LN16@Insert_n@2

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$255996[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$255996[ebp], 0
	jbe	SHORT $LN48@Insert_n@2
	mov	ecx, DWORD PTR __Count$255996[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@2
$LN48@Insert_n@2:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@2:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z ; std::_Allocate<CvPlot *>
	add	esp, 8
	mov	DWORD PTR __Newvec$228283[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$228284[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$228285[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$228284[ebp]
	mov	ecx, DWORD PTR __Newvec$228283[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T256045[ebp], edx
	mov	eax, DWORD PTR $T256045[ebp]
	mov	DWORD PTR $T256033[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256036[ebp], cl
	mov	dl, BYTE PTR __Cat$256040[ebp]
	mov	BYTE PTR $T256037[ebp], dl
	mov	al, BYTE PTR $T256036[ebp]
	mov	BYTE PTR $T256023[ebp], al
	mov	ecx, DWORD PTR $T256033[ebp]
	mov	DWORD PTR $T256022[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256022[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$228285[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$228285[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T256080[ebp], ecx
	mov	edx, DWORD PTR __Newvec$228283[ebp]
	mov	DWORD PTR $T256068[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T256071[ebp], al
	mov	cl, BYTE PTR __Cat$256075[ebp]
	mov	BYTE PTR $T256072[ebp], cl
	mov	dl, BYTE PTR $T256071[ebp]
	mov	BYTE PTR $T256058[ebp], dl
	mov	eax, DWORD PTR $T256068[ebp]
	mov	DWORD PTR $T256057[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256057[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256080[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$228285[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$228285[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T256115[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$228284[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$228283[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T256103[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T256106[ebp], dl
	mov	al, BYTE PTR __Cat$256110[ebp]
	mov	BYTE PTR $T256107[ebp], al
	mov	cl, BYTE PTR $T256106[ebp]
	mov	BYTE PTR $T256093[ebp], cl
	mov	edx, DWORD PTR $T256103[ebp]
	mov	DWORD PTR $T256092[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256092[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256115[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@2
__catch$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228285[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$228284[ebp]
	mov	edx, DWORD PTR __Newvec$228283[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T256135[ebp], eax
	mov	ecx, DWORD PTR __Newvec$228283[ebp]
	mov	DWORD PTR $T256134[ebp], ecx
	mov	dl, BYTE PTR __Cat$256141[ebp]
	mov	BYTE PTR $T256138[ebp], dl
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228285[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$228284[ebp]
	mov	ecx, DWORD PTR __Newvec$228283[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T256165[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$228284[ebp]
	mov	eax, DWORD PTR __Newvec$228283[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T256164[ebp], ecx
	mov	dl, BYTE PTR __Cat$256171[ebp]
	mov	BYTE PTR $T256168[ebp], dl
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$228283[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@2
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T256213[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T256212[ebp], edx
	mov	eax, DWORD PTR $T256213[ebp]
	mov	DWORD PTR $T256201[ebp], eax
	mov	ecx, DWORD PTR $T256212[ebp]
	mov	DWORD PTR $T256200[ebp], ecx
	mov	dl, BYTE PTR __Cat$256207[ebp]
	mov	BYTE PTR $T256204[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T256218[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T256217[ebp], ecx
	mov	edx, DWORD PTR $T256217[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$228283[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$228283[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$228283[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$228298[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T256290[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T256271[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256275[ebp], cl
	mov	dl, BYTE PTR __Cat$256279[ebp]
	mov	BYTE PTR $T256276[ebp], dl
	mov	al, BYTE PTR $T256275[ebp]
	mov	BYTE PTR $T256254[ebp], al
	mov	ecx, DWORD PTR $T256271[ebp]
	mov	DWORD PTR $T256253[ebp], ecx
	mov	edx, DWORD PTR $T256253[ebp]
	mov	DWORD PTR $T256243[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T256242[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256282[ebp], cl
	mov	dl, BYTE PTR __Cat$256286[ebp]
	mov	BYTE PTR $T256283[ebp], dl
	movzx	eax, BYTE PTR $T256282[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T256283[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T256243[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256290[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256242[ebp]
	push	edx
	call	??$_Uninit_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@std@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$228298[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEPAPAVCvPlot@@PAPAV3@IABQAV3@@Z ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Ufill
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T256373[ebp], eax
	mov	ecx, DWORD PTR $T256373[ebp]
	mov	DWORD PTR $T256362[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T256361[ebp], ecx
	mov	dl, BYTE PTR __Cat$256368[ebp]
	mov	BYTE PTR $T256365[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T256389[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T256381[ebp], edx
	jmp	SHORT $LN151@Insert_n@2
$LN150@Insert_n@2:
	mov	eax, DWORD PTR $T256381[ebp]
	add	eax, 4
	mov	DWORD PTR $T256381[ebp], eax
$LN151@Insert_n@2:
	mov	ecx, DWORD PTR $T256381[ebp]
	cmp	ecx, DWORD PTR $T256389[ebp]
	je	SHORT $LN147@Insert_n@2
	mov	edx, DWORD PTR $T256381[ebp]
	mov	eax, DWORD PTR __Tmp$228298[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@2
$LN147@Insert_n@2:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228308[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$228309[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T256440[ebp], eax
	mov	ecx, DWORD PTR $T256440[ebp]
	mov	DWORD PTR $T256428[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T256432[ebp], dl
	mov	al, BYTE PTR __Cat$256436[ebp]
	mov	BYTE PTR $T256433[ebp], al
	mov	cl, BYTE PTR $T256432[ebp]
	mov	BYTE PTR $T256418[ebp], cl
	mov	edx, DWORD PTR $T256428[ebp]
	mov	DWORD PTR $T256417[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256417[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$228309[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$228309[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$228309[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$228309[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvPlot * *,CvPlot * *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T256492[ebp], ecx
	jmp	SHORT $LN186@Insert_n@2
$LN185@Insert_n@2:
	mov	edx, DWORD PTR $T256492[ebp]
	add	edx, 4
	mov	DWORD PTR $T256492[ebp], edx
$LN186@Insert_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T256492[ebp], edx
	je	SHORT $LN16@Insert_n@2
	mov	eax, DWORD PTR $T256492[ebp]
	mov	ecx, DWORD PTR __Tmp$228308[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@2
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@2@IABQAVCvPlot@@@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEPAPAVCvPlot@@PAPAV3@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T256563 = -40						; size = 4
$T256553 = -33						; size = 1
$T256552 = -32						; size = 4
__Cat$256559 = -3					; size = 1
$T256556 = -2						; size = 1
$T256555 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEPAPAVCvPlot@@PAPAV3@IABQAV3@@Z PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T256563[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256555[ebp], cl
	mov	dl, BYTE PTR __Cat$256559[ebp]
	mov	BYTE PTR $T256556[ebp], dl
	mov	al, BYTE PTR $T256555[ebp]
	mov	BYTE PTR $T256553[ebp], al
	mov	ecx, DWORD PTR $T256563[ebp]
	mov	DWORD PTR $T256552[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256552[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@IAEPAPAVCvPlot@@PAPAV3@IABQAV3@@Z ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Ufill
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T256567 = -80						; size = 28
$T256566 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ PROC ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T256567[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T256566[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T256566[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T256567[ebp]
	push	eax
	lea	ecx, DWORD PTR $T256566[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T256566[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T256566[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T256567[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T256567[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T256566[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvPlot@@V?$allocator@PAVCvPlot@@@std@@@std@@KAXXZ ENDP ; std::vector<CvPlot *,std::allocator<CvPlot *> >::_Xlen
PUBLIC	??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$2
__catchsym$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$0
__unwindtable$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv84 = -424						; size = 4
tv302 = -420						; size = 4
tv288 = -416						; size = 4
tv280 = -412						; size = 4
_this$ = -408						; size = 4
$T257269 = -404						; size = 4
$T257261 = -400						; size = 4
$T257260 = -396						; size = 4
$T257237 = -390						; size = 1
$T257236 = -389						; size = 1
$T257235 = -388						; size = 4
$T257234 = -384						; size = 4
$T257222 = -377						; size = 1
$T257221 = -376						; size = 4
$T257220 = -372						; size = 4
$T257219 = -368						; size = 4
__Cat$257253 = -364					; size = 1
$T257250 = -363						; size = 1
$T257249 = -362						; size = 1
__Cat$257244 = -360					; size = 1
$T257241 = -359						; size = 1
$T257240 = -358						; size = 1
$T257239 = -357						; size = 1
$T257194 = -356						; size = 4
$T257175 = -352						; size = 4
$T257158 = -345						; size = 1
$T257157 = -344						; size = 4
$T257147 = -340						; size = 4
$T257146 = -336						; size = 4
__Cat$257189 = -330					; size = 1
$T257186 = -329						; size = 1
$T257185 = -328						; size = 1
__Cat$257182 = -327					; size = 1
$T257179 = -326						; size = 1
$T257178 = -325						; size = 1
$T257122 = -324						; size = 4
$T257114 = -320						; size = 4
$T257106 = -316						; size = 4
$T257088 = -312						; size = 4
$T257087 = -308						; size = 4
$T257071 = -304						; size = 4
__Cat$257094 = -298					; size = 1
$T257091 = -297						; size = 1
$T257045 = -296						; size = 4
$T257044 = -292						; size = 4
$T257034 = -288						; size = 4
__Cat$257036 = -283					; size = 1
$T257041 = -282						; size = 1
$T257040 = -281						; size = 1
$T257018 = -280						; size = 4
$T256999 = -276						; size = 4
$T256982 = -269						; size = 1
$T256981 = -268						; size = 4
$T256971 = -264						; size = 4
$T256970 = -260						; size = 4
__Cat$257016 = -254					; size = 1
$T257014 = -253						; size = 1
$T257013 = -252						; size = 1
__Cat$257007 = -251					; size = 1
$T257005 = -250						; size = 1
$T257004 = -249						; size = 1
$T256946 = -248						; size = 4
$T256945 = -244						; size = 4
$T256941 = -240						; size = 4
$T256940 = -236						; size = 4
$T256922 = -232						; size = 4
$T256921 = -228						; size = 4
$T256905 = -224						; size = 4
__Cat$256928 = -218					; size = 1
$T256926 = -217						; size = 1
$T256856 = -216						; size = 4
$T256855 = -212						; size = 4
$T256839 = -208						; size = 4
__Cat$256862 = -202					; size = 1
$T256860 = -201						; size = 1
$T256796 = -200						; size = 4
$T256795 = -196						; size = 4
$T256779 = -192						; size = 4
__Cat$256802 = -186					; size = 1
$T256800 = -185						; size = 1
$T256753 = -184						; size = 4
$T256741 = -180						; size = 4
$T256731 = -173						; size = 1
$T256730 = -172						; size = 4
__Cat$256749 = -167					; size = 1
$T256746 = -166						; size = 1
$T256745 = -165						; size = 1
$T256718 = -164						; size = 4
$T256706 = -160						; size = 4
$T256696 = -153						; size = 1
$T256695 = -152						; size = 4
__Cat$256714 = -147					; size = 1
$T256711 = -146						; size = 1
$T256710 = -145						; size = 1
$T256683 = -144						; size = 4
$T256673 = -140						; size = 4
__Cat$256679 = -135					; size = 1
$T256677 = -134						; size = 1
$T256676 = -133						; size = 1
__Count$256642 = -120					; size = 4
__Count$256616 = -48					; size = 4
__Tmp$228375 = -44					; size = 4
__Oldend$228376 = -40					; size = 4
__Tmp$228365 = -36					; size = 4
__Ncopied$228352 = -32					; size = 4
__Newvec$228350 = -28					; size = 4
__Whereoff$228351 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@3
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@3
$LN29@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@3:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN16@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$256616[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$256616[ebp], 0
	jbe	SHORT $LN35@Insert_n@3
	mov	edx, DWORD PTR __Count$256616[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@3
$LN35@Insert_n@3:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Xlen
	jmp	$LN16@Insert_n@3

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$256642[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$256642[ebp], 0
	jbe	SHORT $LN48@Insert_n@3
	mov	ecx, DWORD PTR __Count$256642[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@3
$LN48@Insert_n@3:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@3:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@3:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z ; std::_Allocate<enum PlayerTypes>
	add	esp, 8
	mov	DWORD PTR __Newvec$228350[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$228351[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$228352[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$228351[ebp]
	mov	ecx, DWORD PTR __Newvec$228350[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T256683[ebp], edx
	mov	eax, DWORD PTR $T256683[ebp]
	mov	DWORD PTR $T256673[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256676[ebp], cl
	mov	dl, BYTE PTR __Cat$256679[ebp]
	mov	BYTE PTR $T256677[ebp], dl
	movzx	eax, BYTE PTR $T256676[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T256677[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256673[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228352[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228352[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T256718[ebp], edx
	mov	eax, DWORD PTR __Newvec$228350[ebp]
	mov	DWORD PTR $T256706[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256710[ebp], cl
	mov	dl, BYTE PTR __Cat$256714[ebp]
	mov	BYTE PTR $T256711[ebp], dl
	mov	al, BYTE PTR $T256710[ebp]
	mov	BYTE PTR $T256696[ebp], al
	mov	ecx, DWORD PTR $T256706[ebp]
	mov	DWORD PTR $T256695[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T256695[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256718[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228352[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228352[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T256753[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228351[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$228350[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T256741[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T256745[ebp], al
	mov	cl, BYTE PTR __Cat$256749[ebp]
	mov	BYTE PTR $T256746[ebp], cl
	mov	dl, BYTE PTR $T256745[ebp]
	mov	BYTE PTR $T256731[ebp], dl
	mov	eax, DWORD PTR $T256741[ebp]
	mov	DWORD PTR $T256730[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256730[ebp]
	push	edx
	mov	eax, DWORD PTR $T256753[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@3
__catch$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228352[ebp], 1
	jle	SHORT $LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$228351[ebp]
	mov	eax, DWORD PTR __Newvec$228350[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T256796[ebp], ecx
	mov	edx, DWORD PTR __Newvec$228350[ebp]
	mov	DWORD PTR $T256795[ebp], edx
	mov	al, BYTE PTR __Cat$256802[ebp]
	mov	BYTE PTR $T256800[ebp], al
	mov	ecx, DWORD PTR $T256795[ebp]
	mov	DWORD PTR $T256779[ebp], ecx
	jmp	SHORT $LN91@Insert_n@3
$LN90@Insert_n@3:
	mov	edx, DWORD PTR $T256779[ebp]
	add	edx, 4
	mov	DWORD PTR $T256779[ebp], edx
$LN91@Insert_n@3:
	mov	eax, DWORD PTR $T256779[ebp]
	cmp	eax, DWORD PTR $T256796[ebp]
	je	SHORT $LN7@Insert_n@3
	jmp	SHORT $LN90@Insert_n@3
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228352[ebp], 0
	jle	SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$228351[ebp]
	mov	edx, DWORD PTR __Newvec$228350[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T256856[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228351[ebp]
	mov	ecx, DWORD PTR __Newvec$228350[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T256855[ebp], edx
	mov	al, BYTE PTR __Cat$256862[ebp]
	mov	BYTE PTR $T256860[ebp], al
	mov	ecx, DWORD PTR $T256855[ebp]
	mov	DWORD PTR $T256839[ebp], ecx
	jmp	SHORT $LN106@Insert_n@3
$LN105@Insert_n@3:
	mov	edx, DWORD PTR $T256839[ebp]
	add	edx, 4
	mov	DWORD PTR $T256839[ebp], edx
$LN106@Insert_n@3:
	mov	eax, DWORD PTR $T256839[ebp]
	cmp	eax, DWORD PTR $T256856[ebp]
	je	SHORT $LN6@Insert_n@3
	jmp	SHORT $LN105@Insert_n@3
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$228350[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@3
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T256941[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T256940[ebp], eax
	mov	ecx, DWORD PTR $T256941[ebp]
	mov	DWORD PTR $T256922[ebp], ecx
	mov	edx, DWORD PTR $T256940[ebp]
	mov	DWORD PTR $T256921[ebp], edx
	mov	al, BYTE PTR __Cat$256928[ebp]
	mov	BYTE PTR $T256926[ebp], al
	mov	ecx, DWORD PTR $T256921[ebp]
	mov	DWORD PTR $T256905[ebp], ecx
	jmp	SHORT $LN125@Insert_n@3
$LN124@Insert_n@3:
	mov	edx, DWORD PTR $T256905[ebp]
	add	edx, 4
	mov	DWORD PTR $T256905[ebp], edx
$LN125@Insert_n@3:
	mov	eax, DWORD PTR $T256905[ebp]
	cmp	eax, DWORD PTR $T256922[ebp]
	je	SHORT $LN117@Insert_n@3
	jmp	SHORT $LN124@Insert_n@3
$LN117@Insert_n@3:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T256946[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T256945[ebp], edx
	mov	eax, DWORD PTR $T256945[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$228350[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$228350[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$228350[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 2
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228365[ebp], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T257018[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T256999[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257004[ebp], dl
	mov	al, BYTE PTR __Cat$257007[ebp]
	mov	BYTE PTR $T257005[ebp], al
	mov	cl, BYTE PTR $T257004[ebp]
	mov	BYTE PTR $T256982[ebp], cl
	mov	edx, DWORD PTR $T256999[ebp]
	mov	DWORD PTR $T256981[ebp], edx
	mov	eax, DWORD PTR $T256981[ebp]
	mov	DWORD PTR $T256971[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T256970[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257013[ebp], dl
	mov	al, BYTE PTR __Cat$257016[ebp]
	mov	BYTE PTR $T257014[ebp], al
	movzx	ecx, BYTE PTR $T257013[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T257014[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256971[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257018[ebp]
	push	edx
	mov	eax, DWORD PTR $T256970[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	mov	DWORD PTR $T257045[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T257044[ebp], edx
	mov	eax, DWORD PTR $T257044[ebp]
	mov	DWORD PTR $T257034[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257040[ebp], cl
	mov	dl, BYTE PTR __Cat$257036[ebp]
	mov	BYTE PTR $T257041[ebp], dl
	movzx	eax, BYTE PTR $T257040[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T257041[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR __Tmp$228365[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257045[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257034[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@3
__catch$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T257106[ebp], eax
	mov	ecx, DWORD PTR $T257106[ebp]
	mov	DWORD PTR $T257088[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T257087[ebp], ecx
	mov	dl, BYTE PTR __Cat$257094[ebp]
	mov	BYTE PTR $T257091[ebp], dl
	mov	eax, DWORD PTR $T257087[ebp]
	mov	DWORD PTR $T257071[ebp], eax
	jmp	SHORT $LN160@Insert_n@3
$LN159@Insert_n@3:
	mov	ecx, DWORD PTR $T257071[ebp]
	add	ecx, 4
	mov	DWORD PTR $T257071[ebp], ecx
$LN160@Insert_n@3:
	mov	edx, DWORD PTR $T257071[ebp]
	cmp	edx, DWORD PTR $T257088[ebp]
	je	SHORT $LN152@Insert_n@3
	jmp	SHORT $LN159@Insert_n@3
$LN152@Insert_n@3:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T257122[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257114[ebp], edx
	jmp	SHORT $LN171@Insert_n@3
$LN170@Insert_n@3:
	mov	eax, DWORD PTR $T257114[ebp]
	add	eax, 4
	mov	DWORD PTR $T257114[ebp], eax
$LN171@Insert_n@3:
	mov	ecx, DWORD PTR $T257114[ebp]
	cmp	ecx, DWORD PTR $T257122[ebp]
	je	SHORT $LN167@Insert_n@3
	mov	edx, DWORD PTR $T257114[ebp]
	mov	eax, DWORD PTR __Tmp$228365[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN170@Insert_n@3
$LN167@Insert_n@3:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228375[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$228376[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T257194[ebp], eax
	mov	ecx, DWORD PTR $T257194[ebp]
	mov	DWORD PTR $T257175[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257178[ebp], dl
	mov	al, BYTE PTR __Cat$257182[ebp]
	mov	BYTE PTR $T257179[ebp], al
	mov	cl, BYTE PTR $T257178[ebp]
	mov	BYTE PTR $T257158[ebp], cl
	mov	edx, DWORD PTR $T257175[ebp]
	mov	DWORD PTR $T257157[ebp], edx
	mov	eax, DWORD PTR $T257157[ebp]
	mov	DWORD PTR $T257147[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$228376[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T257146[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T257185[ebp], al
	mov	cl, BYTE PTR __Cat$257189[ebp]
	mov	BYTE PTR $T257186[ebp], cl
	movzx	edx, BYTE PTR $T257185[ebp]
	push	edx
	movzx	eax, BYTE PTR $T257186[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257147[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$228376[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257146[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$228376[ebp]
	mov	DWORD PTR $T257261[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257260[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257239[ebp], dl
	mov	al, BYTE PTR __Cat$257244[ebp]
	mov	BYTE PTR $T257240[ebp], al
	mov	cl, BYTE PTR $T257239[ebp]
	mov	BYTE PTR $T257237[ebp], cl
	mov	dl, BYTE PTR $T257241[ebp]
	mov	BYTE PTR $T257236[ebp], dl
	mov	eax, DWORD PTR $T257261[ebp]
	mov	DWORD PTR $T257235[ebp], eax
	mov	ecx, DWORD PTR $T257260[ebp]
	mov	DWORD PTR $T257234[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257249[ebp], dl
	mov	al, BYTE PTR __Cat$257253[ebp]
	mov	BYTE PTR $T257250[ebp], al
	mov	cl, BYTE PTR $T257249[ebp]
	mov	BYTE PTR $T257222[ebp], cl
	mov	edx, DWORD PTR $T257235[ebp]
	mov	DWORD PTR $T257221[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$228376[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T257220[ebp], ecx
	mov	edx, DWORD PTR $T257234[ebp]
	mov	DWORD PTR $T257219[ebp], edx
$LN197@Insert_n@3:
	mov	eax, DWORD PTR $T257219[ebp]
	cmp	eax, DWORD PTR $T257220[ebp]
	je	SHORT $LN186@Insert_n@3
	mov	ecx, DWORD PTR $T257220[ebp]
	sub	ecx, 4
	mov	DWORD PTR $T257220[ebp], ecx
	mov	edx, DWORD PTR $T257221[ebp]
	sub	edx, 4
	mov	DWORD PTR $T257221[ebp], edx
	mov	eax, DWORD PTR $T257221[ebp]
	mov	ecx, DWORD PTR $T257220[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN197@Insert_n@3
$LN186@Insert_n@3:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257269[ebp], eax
	jmp	SHORT $LN204@Insert_n@3
$LN203@Insert_n@3:
	mov	ecx, DWORD PTR $T257269[ebp]
	add	ecx, 4
	mov	DWORD PTR $T257269[ebp], ecx
$LN204@Insert_n@3:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR $T257269[ebp], ecx
	je	SHORT $LN16@Insert_n@3
	mov	edx, DWORD PTR $T257269[ebp]
	mov	eax, DWORD PTR __Tmp$228375[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN203@Insert_n@3
$LN16@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@2@IABW4PlayerTypes@@@Z ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T257291 = -80						; size = 28
$T257290 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ PROC ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T257291[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T257290[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T257290[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T257291[ebp]
	push	eax
	lea	ecx, DWORD PTR $T257290[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T257290[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T257290[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T257291[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T257291[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T257290[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@W4PlayerTypes@@V?$allocator@W4PlayerTypes@@@std@@@std@@KAXXZ ENDP ; std::vector<enum PlayerTypes,std::allocator<enum PlayerTypes> >::_Xlen
PUBLIC	??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$2
__catchsym$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$0
__unwindtable$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z
_TEXT	SEGMENT
tv84 = -464						; size = 4
tv304 = -460						; size = 4
tv290 = -456						; size = 4
tv282 = -452						; size = 4
_this$ = -448						; size = 4
$T257993 = -444						; size = 4
$T257985 = -440						; size = 4
$T257984 = -436						; size = 4
$T257961 = -430						; size = 1
$T257960 = -429						; size = 1
$T257959 = -428						; size = 4
$T257958 = -424						; size = 4
$T257946 = -417						; size = 1
$T257945 = -416						; size = 4
$T257944 = -412						; size = 4
$T257943 = -408						; size = 4
__Cat$257977 = -404					; size = 1
$T257975 = -403						; size = 1
$T257974 = -402						; size = 1
__Cat$257969 = -400					; size = 1
$T257966 = -399						; size = 1
$T257965 = -398						; size = 1
$T257964 = -397						; size = 1
$T257918 = -396						; size = 4
$T257899 = -392						; size = 4
$T257882 = -385						; size = 1
$T257881 = -384						; size = 4
$T257871 = -380						; size = 4
$T257870 = -376						; size = 4
__Cat$257915 = -370					; size = 1
$T257913 = -369						; size = 1
$T257912 = -368						; size = 1
__Cat$257907 = -367					; size = 1
$T257904 = -366						; size = 1
$T257903 = -365						; size = 1
$T257846 = -364						; size = 4
$T257838 = -360						; size = 4
$T257830 = -356						; size = 4
$T257812 = -352						; size = 4
$T257811 = -348						; size = 4
$T257795 = -344						; size = 4
__Cat$257818 = -338					; size = 1
$T257816 = -337						; size = 1
$T257769 = -336						; size = 4
$T257768 = -332						; size = 4
$T257758 = -328						; size = 4
__Cat$257764 = -323					; size = 1
$T257762 = -322						; size = 1
$T257761 = -321						; size = 1
$T257742 = -320						; size = 4
$T257723 = -316						; size = 4
$T257706 = -309						; size = 1
$T257705 = -308						; size = 4
$T257695 = -304						; size = 4
$T257694 = -300						; size = 4
__Cat$257739 = -294					; size = 1
$T257737 = -293						; size = 1
$T257736 = -292						; size = 1
__Cat$257731 = -291					; size = 1
$T257728 = -290						; size = 1
$T257727 = -289						; size = 1
$T257670 = -288						; size = 4
$T257669 = -284						; size = 4
$T257665 = -280						; size = 4
$T257664 = -276						; size = 4
$T257646 = -272						; size = 4
$T257645 = -268						; size = 4
$T257629 = -264						; size = 4
__Cat$257652 = -258					; size = 1
$T257649 = -257						; size = 1
$T257580 = -256						; size = 4
$T257579 = -252						; size = 4
$T257563 = -248						; size = 4
__Cat$257586 = -242					; size = 1
$T257583 = -241						; size = 1
$T257520 = -240						; size = 4
$T257519 = -236						; size = 4
$T257503 = -232						; size = 4
__Cat$257526 = -226					; size = 1
$T257523 = -225						; size = 1
$T257477 = -224						; size = 4
$T257465 = -220						; size = 4
$T257455 = -213						; size = 1
$T257454 = -212						; size = 4
__Cat$257473 = -207					; size = 1
$T257470 = -206						; size = 1
$T257469 = -205						; size = 1
$T257442 = -204						; size = 4
$T257430 = -200						; size = 4
$T257420 = -193						; size = 1
$T257419 = -192						; size = 4
__Cat$257438 = -187					; size = 1
$T257435 = -186						; size = 1
$T257434 = -185						; size = 1
$T257407 = -184						; size = 4
$T257397 = -180						; size = 4
__Cat$257404 = -175					; size = 1
$T257401 = -174						; size = 1
$T257400 = -173						; size = 1
__Count$257367 = -160					; size = 4
__Count$257341 = -88					; size = 4
__Tmp$228440 = -84					; size = 24
__Oldend$228441 = -60					; size = 4
__Tmp$228430 = -56					; size = 24
__Ncopied$228417 = -32					; size = 4
__Newvec$228415 = -28					; size = 4
__Whereoff$228416 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@4
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@4
$LN29@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@4:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$257341[ebp], 178956970 ; 0aaaaaaaH
	cmp	DWORD PTR __Count$257341[ebp], 0
	jbe	SHORT $LN35@Insert_n@4
	mov	eax, DWORD PTR __Count$257341[ebp]
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN37@Insert_n@4
$LN35@Insert_n@4:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	edx, DWORD PTR tv290[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Xlen
	jmp	$LN16@Insert_n@4

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$257367[ebp], 178956970 ; 0aaaaaaaH
	cmp	DWORD PTR __Count$257367[ebp], 0
	jbe	SHORT $LN48@Insert_n@4
	mov	edx, DWORD PTR __Count$257367[ebp]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN44@Insert_n@4
$LN48@Insert_n@4:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@4:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv304[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@4:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN54@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z ; std::_Allocate<CvGreatWorkInMyEmpire>
	add	esp, 8
	mov	DWORD PTR __Newvec$228415[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Whereoff$228416[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$228417[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$228416[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257407[ebp], edx
	mov	eax, DWORD PTR $T257407[ebp]
	mov	DWORD PTR $T257397[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257400[ebp], cl
	mov	dl, BYTE PTR __Cat$257404[ebp]
	mov	BYTE PTR $T257401[ebp], dl
	movzx	eax, BYTE PTR $T257400[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T257401[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257397[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228417[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228417[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T257442[ebp], edx
	mov	eax, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257430[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257434[ebp], cl
	mov	dl, BYTE PTR __Cat$257438[ebp]
	mov	BYTE PTR $T257435[ebp], dl
	mov	al, BYTE PTR $T257434[ebp]
	mov	BYTE PTR $T257420[ebp], al
	mov	ecx, DWORD PTR $T257430[ebp]
	mov	DWORD PTR $T257419[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T257419[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257442[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228417[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228417[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T257477[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228416[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257465[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257469[ebp], cl
	mov	dl, BYTE PTR __Cat$257473[ebp]
	mov	BYTE PTR $T257470[ebp], dl
	mov	al, BYTE PTR $T257469[ebp]
	mov	BYTE PTR $T257455[ebp], al
	mov	ecx, DWORD PTR $T257465[ebp]
	mov	DWORD PTR $T257454[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T257454[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257477[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@4
__catch$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228417[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$228416[ebp]
	imul	eax, 24					; 00000018H
	add	eax, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257520[ebp], eax
	mov	ecx, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257519[ebp], ecx
	mov	dl, BYTE PTR __Cat$257526[ebp]
	mov	BYTE PTR $T257523[ebp], dl
	mov	eax, DWORD PTR $T257519[ebp]
	mov	DWORD PTR $T257503[ebp], eax
	jmp	SHORT $LN91@Insert_n@4
$LN90@Insert_n@4:
	mov	ecx, DWORD PTR $T257503[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T257503[ebp], ecx
$LN91@Insert_n@4:
	mov	edx, DWORD PTR $T257503[ebp]
	cmp	edx, DWORD PTR $T257520[ebp]
	je	SHORT $LN7@Insert_n@4
	jmp	SHORT $LN90@Insert_n@4
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228417[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR __Whereoff$228416[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Newvec$228415[ebp]
	add	ecx, eax
	mov	DWORD PTR $T257580[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$228416[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR $T257579[ebp], edx
	mov	al, BYTE PTR __Cat$257586[ebp]
	mov	BYTE PTR $T257583[ebp], al
	mov	ecx, DWORD PTR $T257579[ebp]
	mov	DWORD PTR $T257563[ebp], ecx
	jmp	SHORT $LN106@Insert_n@4
$LN105@Insert_n@4:
	mov	edx, DWORD PTR $T257563[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T257563[ebp], edx
$LN106@Insert_n@4:
	mov	eax, DWORD PTR $T257563[ebp]
	cmp	eax, DWORD PTR $T257580[ebp]
	je	SHORT $LN6@Insert_n@4
	jmp	SHORT $LN105@Insert_n@4
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$228415[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@4
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T257665[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T257664[ebp], eax
	mov	ecx, DWORD PTR $T257665[ebp]
	mov	DWORD PTR $T257646[ebp], ecx
	mov	edx, DWORD PTR $T257664[ebp]
	mov	DWORD PTR $T257645[ebp], edx
	mov	al, BYTE PTR __Cat$257652[ebp]
	mov	BYTE PTR $T257649[ebp], al
	mov	ecx, DWORD PTR $T257645[ebp]
	mov	DWORD PTR $T257629[ebp], ecx
	jmp	SHORT $LN125@Insert_n@4
$LN124@Insert_n@4:
	mov	edx, DWORD PTR $T257629[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T257629[ebp], edx
$LN125@Insert_n@4:
	mov	eax, DWORD PTR $T257629[ebp]
	cmp	eax, DWORD PTR $T257646[ebp]
	je	SHORT $LN117@Insert_n@4
	jmp	SHORT $LN124@Insert_n@4
$LN117@Insert_n@4:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR $T257670[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T257669[ebp], eax
	mov	ecx, DWORD PTR $T257669[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Newvec$228415[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Newvec$228415[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$228415[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$228430[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$228430[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$228430[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$228430[ebp+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Tmp$228430[ebp+16], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR __Tmp$228430[ebp+20], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T257742[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257723[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257727[ebp], dl
	mov	al, BYTE PTR __Cat$257731[ebp]
	mov	BYTE PTR $T257728[ebp], al
	mov	cl, BYTE PTR $T257727[ebp]
	mov	BYTE PTR $T257706[ebp], cl
	mov	edx, DWORD PTR $T257723[ebp]
	mov	DWORD PTR $T257705[ebp], edx
	mov	eax, DWORD PTR $T257705[ebp]
	mov	DWORD PTR $T257695[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257694[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257736[ebp], dl
	mov	al, BYTE PTR __Cat$257739[ebp]
	mov	BYTE PTR $T257737[ebp], al
	movzx	ecx, BYTE PTR $T257736[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T257737[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257695[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257742[ebp]
	push	edx
	mov	eax, DWORD PTR $T257694[ebp]
	push	eax
	call	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T257769[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T257768[ebp], ecx
	mov	edx, DWORD PTR $T257768[ebp]
	mov	DWORD PTR $T257758[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T257761[ebp], al
	mov	cl, BYTE PTR __Cat$257764[ebp]
	mov	BYTE PTR $T257762[ebp], cl
	movzx	edx, BYTE PTR $T257761[ebp]
	push	edx
	movzx	eax, BYTE PTR $T257762[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$228430[ebp]
	push	edx
	mov	eax, DWORD PTR $T257769[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257758[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T257830[ebp], edx
	mov	ecx, DWORD PTR $T257830[ebp]
	mov	DWORD PTR $T257812[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257811[ebp], edx
	mov	al, BYTE PTR __Cat$257818[ebp]
	mov	BYTE PTR $T257816[ebp], al
	mov	ecx, DWORD PTR $T257811[ebp]
	mov	DWORD PTR $T257795[ebp], ecx
	jmp	SHORT $LN160@Insert_n@4
$LN159@Insert_n@4:
	mov	edx, DWORD PTR $T257795[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T257795[ebp], edx
$LN160@Insert_n@4:
	mov	eax, DWORD PTR $T257795[ebp]
	cmp	eax, DWORD PTR $T257812[ebp]
	je	SHORT $LN152@Insert_n@4
	jmp	SHORT $LN159@Insert_n@4
$LN152@Insert_n@4:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T257846[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257838[ebp], ecx
	jmp	SHORT $LN171@Insert_n@4
$LN170@Insert_n@4:
	mov	edx, DWORD PTR $T257838[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR $T257838[ebp], edx
$LN171@Insert_n@4:
	mov	eax, DWORD PTR $T257838[ebp]
	cmp	eax, DWORD PTR $T257846[ebp]
	je	SHORT $LN167@Insert_n@4
	mov	ecx, DWORD PTR $T257838[ebp]
	mov	edx, DWORD PTR __Tmp$228430[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$228430[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$228430[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$228430[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR __Tmp$228430[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR __Tmp$228430[ebp+20]
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN170@Insert_n@4
$LN167@Insert_n@4:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228440[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$228440[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$228440[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$228440[ebp+12], eax
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR __Tmp$228440[ebp+16], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Tmp$228440[ebp+20], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$228441[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T257918[ebp], ecx
	mov	edx, DWORD PTR $T257918[ebp]
	mov	DWORD PTR $T257899[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T257903[ebp], al
	mov	cl, BYTE PTR __Cat$257907[ebp]
	mov	BYTE PTR $T257904[ebp], cl
	mov	dl, BYTE PTR $T257903[ebp]
	mov	BYTE PTR $T257882[ebp], dl
	mov	eax, DWORD PTR $T257899[ebp]
	mov	DWORD PTR $T257881[ebp], eax
	mov	ecx, DWORD PTR $T257881[ebp]
	mov	DWORD PTR $T257871[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR __Oldend$228441[ebp]
	sub	eax, edx
	mov	DWORD PTR $T257870[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257912[ebp], cl
	mov	dl, BYTE PTR __Cat$257915[ebp]
	mov	BYTE PTR $T257913[ebp], dl
	movzx	eax, BYTE PTR $T257912[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T257913[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T257871[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$228441[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257870[ebp]
	push	edx
	call	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$228441[ebp]
	mov	DWORD PTR $T257985[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257984[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257964[ebp], cl
	mov	dl, BYTE PTR __Cat$257969[ebp]
	mov	BYTE PTR $T257965[ebp], dl
	mov	al, BYTE PTR $T257964[ebp]
	mov	BYTE PTR $T257961[ebp], al
	mov	cl, BYTE PTR $T257966[ebp]
	mov	BYTE PTR $T257960[ebp], cl
	mov	edx, DWORD PTR $T257985[ebp]
	mov	DWORD PTR $T257959[ebp], edx
	mov	eax, DWORD PTR $T257984[ebp]
	mov	DWORD PTR $T257958[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257974[ebp], cl
	mov	dl, BYTE PTR __Cat$257977[ebp]
	mov	BYTE PTR $T257975[ebp], dl
	mov	al, BYTE PTR $T257974[ebp]
	mov	BYTE PTR $T257946[ebp], al
	mov	ecx, DWORD PTR $T257959[ebp]
	mov	DWORD PTR $T257945[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR __Oldend$228441[ebp]
	sub	eax, edx
	mov	DWORD PTR $T257944[ebp], eax
	mov	ecx, DWORD PTR $T257958[ebp]
	mov	DWORD PTR $T257943[ebp], ecx
$LN197@Insert_n@4:
	mov	edx, DWORD PTR $T257943[ebp]
	cmp	edx, DWORD PTR $T257944[ebp]
	je	SHORT $LN186@Insert_n@4
	mov	eax, DWORD PTR $T257944[ebp]
	sub	eax, 24					; 00000018H
	mov	DWORD PTR $T257944[ebp], eax
	mov	ecx, DWORD PTR $T257945[ebp]
	sub	ecx, 24					; 00000018H
	mov	DWORD PTR $T257945[ebp], ecx
	mov	edx, DWORD PTR $T257944[ebp]
	mov	eax, DWORD PTR $T257945[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	jmp	SHORT $LN197@Insert_n@4
$LN186@Insert_n@4:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T257993[ebp], eax
	jmp	SHORT $LN204@Insert_n@4
$LN203@Insert_n@4:
	mov	ecx, DWORD PTR $T257993[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T257993[ebp], ecx
$LN204@Insert_n@4:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T257993[ebp], edx
	je	SHORT $LN16@Insert_n@4
	mov	eax, DWORD PTR $T257993[ebp]
	mov	ecx, DWORD PTR __Tmp$228440[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$228440[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$228440[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$228440[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR __Tmp$228440[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Tmp$228440[ebp+20]
	mov	DWORD PTR [eax+20], edx
	jmp	SHORT $LN203@Insert_n@4
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-468]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@2@IABVCvGreatWorkInMyEmpire@@@Z ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T258015 = -80						; size = 28
$T258014 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ PROC ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T258015[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T258014[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T258014[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T258015[ebp]
	push	eax
	lea	ecx, DWORD PTR $T258014[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T258014[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T258014[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T258015[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T258015[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T258014[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VCvGreatWorkInMyEmpire@@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@KAXXZ ENDP ; std::vector<CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >::_Xlen
PUBLIC	??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$2
__catchsym$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$0
__unwindtable$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z
_TEXT	SEGMENT
tv84 = -424						; size = 4
tv302 = -420						; size = 4
tv288 = -416						; size = 4
tv280 = -412						; size = 4
_this$ = -408						; size = 4
$T258717 = -404						; size = 4
$T258709 = -400						; size = 4
$T258708 = -396						; size = 4
$T258685 = -390						; size = 1
$T258684 = -389						; size = 1
$T258683 = -388						; size = 4
$T258682 = -384						; size = 4
$T258670 = -377						; size = 1
$T258669 = -376						; size = 4
$T258668 = -372						; size = 4
$T258667 = -368						; size = 4
__Cat$258702 = -364					; size = 1
$T258699 = -363						; size = 1
$T258698 = -362						; size = 1
__Cat$258693 = -360					; size = 1
$T258690 = -359						; size = 1
$T258689 = -358						; size = 1
$T258688 = -357						; size = 1
$T258642 = -356						; size = 4
$T258623 = -352						; size = 4
$T258606 = -345						; size = 1
$T258605 = -344						; size = 4
$T258595 = -340						; size = 4
$T258594 = -336						; size = 4
__Cat$258639 = -330					; size = 1
$T258636 = -329						; size = 1
$T258635 = -328						; size = 1
__Cat$258631 = -327					; size = 1
$T258628 = -326						; size = 1
$T258627 = -325						; size = 1
$T258570 = -324						; size = 4
$T258562 = -320						; size = 4
$T258554 = -316						; size = 4
$T258536 = -312						; size = 4
$T258535 = -308						; size = 4
$T258519 = -304						; size = 4
__Cat$258542 = -298					; size = 1
$T258539 = -297						; size = 1
$T258493 = -296						; size = 4
$T258492 = -292						; size = 4
$T258482 = -288						; size = 4
__Cat$258490 = -283					; size = 1
$T258487 = -282						; size = 1
$T258486 = -281						; size = 1
$T258466 = -280						; size = 4
$T258447 = -276						; size = 4
$T258430 = -269						; size = 1
$T258429 = -268						; size = 4
$T258419 = -264						; size = 4
$T258418 = -260						; size = 4
__Cat$258463 = -254					; size = 1
$T258460 = -253						; size = 1
$T258459 = -252						; size = 1
__Cat$258455 = -251					; size = 1
$T258452 = -250						; size = 1
$T258451 = -249						; size = 1
$T258394 = -248						; size = 4
$T258393 = -244						; size = 4
$T258389 = -240						; size = 4
$T258388 = -236						; size = 4
$T258370 = -232						; size = 4
$T258369 = -228						; size = 4
$T258353 = -224						; size = 4
__Cat$258376 = -218					; size = 1
$T258373 = -217						; size = 1
$T258304 = -216						; size = 4
$T258303 = -212						; size = 4
$T258287 = -208						; size = 4
__Cat$258310 = -202					; size = 1
$T258307 = -201						; size = 1
$T258244 = -200						; size = 4
$T258243 = -196						; size = 4
$T258227 = -192						; size = 4
__Cat$258250 = -186					; size = 1
$T258247 = -185						; size = 1
$T258201 = -184						; size = 4
$T258189 = -180						; size = 4
$T258179 = -173						; size = 1
$T258178 = -172						; size = 4
__Cat$258196 = -167					; size = 1
$T258193 = -166						; size = 1
$T258192 = -165						; size = 1
$T258166 = -164						; size = 4
$T258154 = -160						; size = 4
$T258144 = -153						; size = 1
$T258143 = -152						; size = 4
__Cat$258161 = -147					; size = 1
$T258158 = -146						; size = 1
$T258157 = -145						; size = 1
$T258131 = -144						; size = 4
$T258121 = -140						; size = 4
__Cat$258129 = -135					; size = 1
$T258126 = -134						; size = 1
$T258125 = -133						; size = 1
__Count$258093 = -120					; size = 4
__Count$258067 = -48					; size = 4
__Tmp$228523 = -44					; size = 4
__Oldend$228524 = -40					; size = 4
__Tmp$228513 = -36					; size = 4
__Ncopied$228500 = -32					; size = 4
__Newvec$228498 = -28					; size = 4
__Whereoff$228499 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@5
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@5
$LN29@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@5:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@5
	jmp	$LN16@Insert_n@5
$LN14@Insert_n@5:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$258067[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$258067[ebp], 0
	jbe	SHORT $LN35@Insert_n@5
	mov	edx, DWORD PTR __Count$258067[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@5
$LN35@Insert_n@5:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Xlen
	jmp	$LN16@Insert_n@5

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$258093[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$258093[ebp], 0
	jbe	SHORT $LN48@Insert_n@5
	mov	ecx, DWORD PTR __Count$258093[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@5
$LN48@Insert_n@5:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@5:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@5:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@5:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z ; std::_Allocate<enum EraTypes>
	add	esp, 8
	mov	DWORD PTR __Newvec$228498[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$228499[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$228500[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$228499[ebp]
	mov	ecx, DWORD PTR __Newvec$228498[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T258131[ebp], edx
	mov	eax, DWORD PTR $T258131[ebp]
	mov	DWORD PTR $T258121[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T258125[ebp], cl
	mov	dl, BYTE PTR __Cat$258129[ebp]
	mov	BYTE PTR $T258126[ebp], dl
	movzx	eax, BYTE PTR $T258125[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T258126[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258121[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228500[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228500[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T258166[ebp], edx
	mov	eax, DWORD PTR __Newvec$228498[ebp]
	mov	DWORD PTR $T258154[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T258157[ebp], cl
	mov	dl, BYTE PTR __Cat$258161[ebp]
	mov	BYTE PTR $T258158[ebp], dl
	mov	al, BYTE PTR $T258157[ebp]
	mov	BYTE PTR $T258144[ebp], al
	mov	ecx, DWORD PTR $T258154[ebp]
	mov	DWORD PTR $T258143[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T258143[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258166[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$228500[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$228500[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T258201[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228499[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$228498[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T258189[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T258192[ebp], al
	mov	cl, BYTE PTR __Cat$258196[ebp]
	mov	BYTE PTR $T258193[ebp], cl
	mov	dl, BYTE PTR $T258192[ebp]
	mov	BYTE PTR $T258179[ebp], dl
	mov	eax, DWORD PTR $T258189[ebp]
	mov	DWORD PTR $T258178[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258178[ebp]
	push	edx
	mov	eax, DWORD PTR $T258201[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@5
__catch$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228500[ebp], 1
	jle	SHORT $LN7@Insert_n@5

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$228499[ebp]
	mov	eax, DWORD PTR __Newvec$228498[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T258244[ebp], ecx
	mov	edx, DWORD PTR __Newvec$228498[ebp]
	mov	DWORD PTR $T258243[ebp], edx
	mov	al, BYTE PTR __Cat$258250[ebp]
	mov	BYTE PTR $T258247[ebp], al
	mov	ecx, DWORD PTR $T258243[ebp]
	mov	DWORD PTR $T258227[ebp], ecx
	jmp	SHORT $LN91@Insert_n@5
$LN90@Insert_n@5:
	mov	edx, DWORD PTR $T258227[ebp]
	add	edx, 4
	mov	DWORD PTR $T258227[ebp], edx
$LN91@Insert_n@5:
	mov	eax, DWORD PTR $T258227[ebp]
	cmp	eax, DWORD PTR $T258244[ebp]
	je	SHORT $LN7@Insert_n@5
	jmp	SHORT $LN90@Insert_n@5
$LN7@Insert_n@5:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$228500[ebp], 0
	jle	SHORT $LN6@Insert_n@5

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$228499[ebp]
	mov	edx, DWORD PTR __Newvec$228498[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T258304[ebp], edx
	mov	eax, DWORD PTR __Whereoff$228499[ebp]
	mov	ecx, DWORD PTR __Newvec$228498[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T258303[ebp], edx
	mov	al, BYTE PTR __Cat$258310[ebp]
	mov	BYTE PTR $T258307[ebp], al
	mov	ecx, DWORD PTR $T258303[ebp]
	mov	DWORD PTR $T258287[ebp], ecx
	jmp	SHORT $LN106@Insert_n@5
$LN105@Insert_n@5:
	mov	edx, DWORD PTR $T258287[ebp]
	add	edx, 4
	mov	DWORD PTR $T258287[ebp], edx
$LN106@Insert_n@5:
	mov	eax, DWORD PTR $T258287[ebp]
	cmp	eax, DWORD PTR $T258304[ebp]
	je	SHORT $LN6@Insert_n@5
	jmp	SHORT $LN105@Insert_n@5
$LN6@Insert_n@5:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$228498[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@5
	ret	0
$LN19@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T258389[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T258388[ebp], eax
	mov	ecx, DWORD PTR $T258389[ebp]
	mov	DWORD PTR $T258370[ebp], ecx
	mov	edx, DWORD PTR $T258388[ebp]
	mov	DWORD PTR $T258369[ebp], edx
	mov	al, BYTE PTR __Cat$258376[ebp]
	mov	BYTE PTR $T258373[ebp], al
	mov	ecx, DWORD PTR $T258369[ebp]
	mov	DWORD PTR $T258353[ebp], ecx
	jmp	SHORT $LN125@Insert_n@5
$LN124@Insert_n@5:
	mov	edx, DWORD PTR $T258353[ebp]
	add	edx, 4
	mov	DWORD PTR $T258353[ebp], edx
$LN125@Insert_n@5:
	mov	eax, DWORD PTR $T258353[ebp]
	cmp	eax, DWORD PTR $T258370[ebp]
	je	SHORT $LN117@Insert_n@5
	jmp	SHORT $LN124@Insert_n@5
$LN117@Insert_n@5:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T258394[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T258393[ebp], edx
	mov	eax, DWORD PTR $T258393[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$228498[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$228498[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$228498[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@5
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 2
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228513[ebp], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T258466[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T258447[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258451[ebp], dl
	mov	al, BYTE PTR __Cat$258455[ebp]
	mov	BYTE PTR $T258452[ebp], al
	mov	cl, BYTE PTR $T258451[ebp]
	mov	BYTE PTR $T258430[ebp], cl
	mov	edx, DWORD PTR $T258447[ebp]
	mov	DWORD PTR $T258429[ebp], edx
	mov	eax, DWORD PTR $T258429[ebp]
	mov	DWORD PTR $T258419[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T258418[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258459[ebp], dl
	mov	al, BYTE PTR __Cat$258463[ebp]
	mov	BYTE PTR $T258460[ebp], al
	movzx	ecx, BYTE PTR $T258459[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T258460[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258419[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258466[ebp]
	push	edx
	mov	eax, DWORD PTR $T258418[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	mov	DWORD PTR $T258493[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T258492[ebp], edx
	mov	eax, DWORD PTR $T258492[ebp]
	mov	DWORD PTR $T258482[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T258486[ebp], cl
	mov	dl, BYTE PTR __Cat$258490[ebp]
	mov	BYTE PTR $T258487[ebp], dl
	movzx	eax, BYTE PTR $T258486[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T258487[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR __Tmp$228513[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258493[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258482[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@5
__catch$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T258554[ebp], eax
	mov	ecx, DWORD PTR $T258554[ebp]
	mov	DWORD PTR $T258536[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T258535[ebp], ecx
	mov	dl, BYTE PTR __Cat$258542[ebp]
	mov	BYTE PTR $T258539[ebp], dl
	mov	eax, DWORD PTR $T258535[ebp]
	mov	DWORD PTR $T258519[ebp], eax
	jmp	SHORT $LN160@Insert_n@5
$LN159@Insert_n@5:
	mov	ecx, DWORD PTR $T258519[ebp]
	add	ecx, 4
	mov	DWORD PTR $T258519[ebp], ecx
$LN160@Insert_n@5:
	mov	edx, DWORD PTR $T258519[ebp]
	cmp	edx, DWORD PTR $T258536[ebp]
	je	SHORT $LN152@Insert_n@5
	jmp	SHORT $LN159@Insert_n@5
$LN152@Insert_n@5:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$3
	ret	0
$LN21@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T258570[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T258562[ebp], edx
	jmp	SHORT $LN171@Insert_n@5
$LN170@Insert_n@5:
	mov	eax, DWORD PTR $T258562[ebp]
	add	eax, 4
	mov	DWORD PTR $T258562[ebp], eax
$LN171@Insert_n@5:
	mov	ecx, DWORD PTR $T258562[ebp]
	cmp	ecx, DWORD PTR $T258570[ebp]
	je	SHORT $LN167@Insert_n@5
	mov	edx, DWORD PTR $T258562[ebp]
	mov	eax, DWORD PTR __Tmp$228513[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN170@Insert_n@5
$LN167@Insert_n@5:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@5
$LN3@Insert_n@5:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228523[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$228524[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T258642[ebp], eax
	mov	ecx, DWORD PTR $T258642[ebp]
	mov	DWORD PTR $T258623[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258627[ebp], dl
	mov	al, BYTE PTR __Cat$258631[ebp]
	mov	BYTE PTR $T258628[ebp], al
	mov	cl, BYTE PTR $T258627[ebp]
	mov	BYTE PTR $T258606[ebp], cl
	mov	edx, DWORD PTR $T258623[ebp]
	mov	DWORD PTR $T258605[ebp], edx
	mov	eax, DWORD PTR $T258605[ebp]
	mov	DWORD PTR $T258595[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$228524[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T258594[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T258635[ebp], al
	mov	cl, BYTE PTR __Cat$258639[ebp]
	mov	BYTE PTR $T258636[ebp], cl
	movzx	edx, BYTE PTR $T258635[ebp]
	push	edx
	movzx	eax, BYTE PTR $T258636[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258595[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$228524[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258594[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$228524[ebp]
	mov	DWORD PTR $T258709[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T258708[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258688[ebp], dl
	mov	al, BYTE PTR __Cat$258693[ebp]
	mov	BYTE PTR $T258689[ebp], al
	mov	cl, BYTE PTR $T258688[ebp]
	mov	BYTE PTR $T258685[ebp], cl
	mov	dl, BYTE PTR $T258690[ebp]
	mov	BYTE PTR $T258684[ebp], dl
	mov	eax, DWORD PTR $T258709[ebp]
	mov	DWORD PTR $T258683[ebp], eax
	mov	ecx, DWORD PTR $T258708[ebp]
	mov	DWORD PTR $T258682[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258698[ebp], dl
	mov	al, BYTE PTR __Cat$258702[ebp]
	mov	BYTE PTR $T258699[ebp], al
	mov	cl, BYTE PTR $T258698[ebp]
	mov	BYTE PTR $T258670[ebp], cl
	mov	edx, DWORD PTR $T258683[ebp]
	mov	DWORD PTR $T258669[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$228524[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T258668[ebp], ecx
	mov	edx, DWORD PTR $T258682[ebp]
	mov	DWORD PTR $T258667[ebp], edx
$LN197@Insert_n@5:
	mov	eax, DWORD PTR $T258667[ebp]
	cmp	eax, DWORD PTR $T258668[ebp]
	je	SHORT $LN186@Insert_n@5
	mov	ecx, DWORD PTR $T258668[ebp]
	sub	ecx, 4
	mov	DWORD PTR $T258668[ebp], ecx
	mov	edx, DWORD PTR $T258669[ebp]
	sub	edx, 4
	mov	DWORD PTR $T258669[ebp], edx
	mov	eax, DWORD PTR $T258669[ebp]
	mov	ecx, DWORD PTR $T258668[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN197@Insert_n@5
$LN186@Insert_n@5:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T258717[ebp], eax
	jmp	SHORT $LN204@Insert_n@5
$LN203@Insert_n@5:
	mov	ecx, DWORD PTR $T258717[ebp]
	add	ecx, 4
	mov	DWORD PTR $T258717[ebp], ecx
$LN204@Insert_n@5:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR $T258717[ebp], ecx
	je	SHORT $LN16@Insert_n@5
	mov	edx, DWORD PTR $T258717[ebp]
	mov	eax, DWORD PTR __Tmp$228523[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN203@Insert_n@5
$LN16@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@2@IABW4EraTypes@@@Z ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T258739 = -80						; size = 28
$T258738 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ PROC ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T258739[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T258738[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T258738[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T258739[ebp]
	push	eax
	lea	ecx, DWORD PTR $T258738[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T258738[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T258738[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T258739[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T258739[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T258738[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@KAXXZ ENDP ; std::vector<enum EraTypes,std::allocator<enum EraTypes> >::_Xlen
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$1
__ehfuncinfo$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z
_TEXT	SEGMENT
$T258766 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z PROC ; GetLocalizedText<CvString,CvString>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258766[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T258766[ebp]
	or	eax, 1
	mov	DWORD PTR $T258766[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z$2:
	mov	eax, DWORD PTR $T258766[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@2
	and	DWORD PTR $T258766[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@VCvString@@V1@@@YA?AVCvString@@PBDABV0@1@Z ENDP ; GetLocalizedText<CvString,CvString>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1
__ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
_TEXT	SEGMENT
$T258792 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z PROC	; GetLocalizedText<int>, COMDAT

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258792[ebp], 0

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 503  : 	text << arg1;

	lea	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 504  : 
; 505  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 507  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 508  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 509  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T258792[ebp]
	or	edx, 1
	mov	DWORD PTR $T258792[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$2:
	mov	eax, DWORD PTR $T258792[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@3
	and	DWORD PTR $T258792[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ENDP	; GetLocalizedText<int>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z PROC ; operator<<<CvString>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	ecx, DWORD PTR _val$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ENDP ; operator<<<CvString>
_TEXT	ENDS
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NH@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z PROC	; operator<<<int>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NH@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ENDP	; operator<<<int>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$1
__ehfuncinfo$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z
_TEXT	SEGMENT
$T258825 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z PROC	; GetLocalizedText<int,int>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258825[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T258825[ebp]
	or	eax, 1
	mov	DWORD PTR $T258825[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z$2:
	mov	eax, DWORD PTR $T258825[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@4
	and	DWORD PTR $T258825[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@4:
	ret	0
__ehhandler$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@HH@@YA?AVCvString@@PBDABH1@Z ENDP	; GetLocalizedText<int,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$1
__ehfuncinfo$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z
_TEXT	SEGMENT
$T258851 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
_arg4$ = 28						; size = 4
??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z PROC ; GetLocalizedText<int,int,int,int>, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258851[ebp], 0

; 541  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 	text << arg1 << arg2 << arg3 << arg4;

	mov	edx, DWORD PTR _arg4$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 543  : 
; 544  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 545  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 546  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 547  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 548  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T258851[ebp]
	or	edx, 1
	mov	DWORD PTR $T258851[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 549  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z$2:
	mov	eax, DWORD PTR $T258851[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@5
	and	DWORD PTR $T258851[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@5:
	ret	0
__ehhandler$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@HHHH@@YA?AVCvString@@PBDABH111@Z ENDP ; GetLocalizedText<int,int,int,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$1
__ehfuncinfo$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z
_TEXT	SEGMENT
$T258877 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z PROC ; GetLocalizedText<int,char const *>, COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258877[ebp], 0

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 517  : 
; 518  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 520  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 521  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 522  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T258877[ebp]
	or	eax, 1
	mov	DWORD PTR $T258877[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z$2:
	mov	eax, DWORD PTR $T258877[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@6
	and	DWORD PTR $T258877[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@6:
	ret	0
__ehhandler$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@HPBD@@YA?AVCvString@@PBDABHABQBD@Z ENDP ; GetLocalizedText<int,char const *>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$1
__ehfuncinfo$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z
_TEXT	SEGMENT
$T258903 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z PROC	; GetLocalizedText<int,int,int>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258903[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8
	push	eax
	call	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ; operator<<<int>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T258903[ebp]
	or	ecx, 1
	mov	DWORD PTR $T258903[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z$2:
	mov	eax, DWORD PTR $T258903[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@7
	and	DWORD PTR $T258903[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@7:
	ret	0
__ehhandler$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@HHH@@YA?AVCvString@@PBDABH11@Z ENDP	; GetLocalizedText<int,int,int>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$1
__ehfuncinfo$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z
_TEXT	SEGMENT
$T258929 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z PROC ; GetLocalizedText<CvString,CvString,CvString>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258929[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T258929[ebp]
	or	ecx, 1
	mov	DWORD PTR $T258929[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z$2:
	mov	eax, DWORD PTR $T258929[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@8
	and	DWORD PTR $T258929[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@8:
	ret	0
__ehhandler$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@VCvString@@V1@V1@@@YA?AVCvString@@PBDABV0@11@Z ENDP ; GetLocalizedText<CvString,CvString,CvString>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$2
__ehfuncinfo$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z
_TEXT	SEGMENT
$T258956 = -136						; size = 4
_str$ = -132						; size = 28
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -20				; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 28
??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z PROC ; GetLocalizedText<CvString>, COMDAT

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258956[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 503  : 	text << arg1;

	lea	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 504  : 
; 505  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 507  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 508  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 509  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T258956[ebp]
	or	edx, 1
	mov	DWORD PTR $T258956[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arg1$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$0:
	lea	ecx, DWORD PTR _arg1$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$1:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$2:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z$3:
	mov	eax, DWORD PTR $T258956[ebp]
	and	eax, 1
	je	$LN7@GetLocaliz@9
	and	DWORD PTR $T258956[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN7@GetLocaliz@9:
	ret	0
__ehhandler$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@VCvString@@@@YA?AVCvString@@PBDV0@@Z ENDP ; GetLocalizedText<CvString>
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z
_TEXT	SEGMENT
$T258986 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z PROC ; GetLocalizedText<char const *,CvString,CvString>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258986[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8
	push	eax
	call	??$?6VCvString@@@@YAAAVString@Localization@@AAV01@ABVCvString@@@Z ; operator<<<CvString>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T258986[ebp]
	or	ecx, 1
	mov	DWORD PTR $T258986[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z$2:
	mov	eax, DWORD PTR $T258986[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@10
	and	DWORD PTR $T258986[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@10:
	ret	0
__ehhandler$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDVCvString@@V1@@@YA?AVCvString@@PBDABQBDABV0@2@Z ENDP ; GetLocalizedText<char const *,CvString,CvString>
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z
_TEXT	SEGMENT
$T259028 = -26						; size = 1
$T259027 = -25						; size = 1
$T259026 = -24						; size = 4
$T259025 = -20						; size = 4
__Off$259021 = -16					; size = 4
__Result$259022 = -12					; size = 4
__Cat$259013 = -4					; size = 1
$T259010 = -3						; size = 1
$T259009 = -2						; size = 1
$T259008 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvPlot * *,CvPlot * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T259008[ebp], al
	mov	cl, BYTE PTR __Cat$259013[ebp]
	mov	BYTE PTR $T259009[ebp], cl
	mov	dl, BYTE PTR $T259008[ebp]
	mov	BYTE PTR $T259028[ebp], dl
	mov	al, BYTE PTR $T259010[ebp]
	mov	BYTE PTR $T259027[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259026[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259025[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T259025[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$259021[ebp], eax
	mov	ecx, DWORD PTR __Off$259021[ebp]
	mov	edx, DWORD PTR $T259026[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$259022[ebp], eax
	cmp	DWORD PTR __Off$259021[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$259021[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T259025[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$259021[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T259026[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$259022[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvPlot * *,CvPlot * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z
_TEXT	SEGMENT
$T259035 = -16						; size = 4
$T259031 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z PROC ; std::_Allocate<CvGreatWorkBuildingInMyEmpire>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T259035[ebp], 0
	lea	eax, DWORD PTR $T259035[ebp]
	push	eax
	lea	ecx, DWORD PTR $T259031[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T259031[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T259031[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCvGreatWorkBuildingInMyEmpire@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@IPAV1@@Z ENDP ; std::_Allocate<CvGreatWorkBuildingInMyEmpire>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z
_TEXT	SEGMENT
$T259087 = -38						; size = 1
$T259086 = -37						; size = 1
$T259085 = -36						; size = 4
$T259084 = -32						; size = 4
$T259071 = -25						; size = 1
$T259070 = -24						; size = 4
$T259069 = -20						; size = 4
__Off$259080 = -16					; size = 4
__Result$259081 = -12					; size = 4
__Cat$259077 = -8					; size = 1
$T259075 = -7						; size = 1
$T259074 = -6						; size = 1
__Cat$259050 = -4					; size = 1
$T259047 = -3						; size = 1
$T259046 = -2						; size = 1
$T259045 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z PROC ; stdext::_Unchecked_move_backward<CvPlot * *,CvPlot * *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T259045[ebp], al
	mov	cl, BYTE PTR __Cat$259050[ebp]
	mov	BYTE PTR $T259046[ebp], cl
	mov	dl, BYTE PTR $T259045[ebp]
	mov	BYTE PTR $T259087[ebp], dl
	mov	al, BYTE PTR $T259047[ebp]
	mov	BYTE PTR $T259086[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259085[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259084[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T259074[ebp], al
	mov	cl, BYTE PTR __Cat$259077[ebp]
	mov	BYTE PTR $T259075[ebp], cl
	mov	dl, BYTE PTR $T259074[ebp]
	mov	BYTE PTR $T259071[ebp], dl
	mov	eax, DWORD PTR $T259085[ebp]
	mov	DWORD PTR $T259070[ebp], eax
	mov	ecx, DWORD PTR $T259084[ebp]
	mov	DWORD PTR $T259069[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T259069[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$259080[ebp], edx
	mov	eax, DWORD PTR __Off$259080[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T259070[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$259081[ebp], ecx
	cmp	DWORD PTR __Off$259080[ebp], 0
	jle	SHORT $LN7@Unchecked_
	mov	edx, DWORD PTR __Off$259080[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T259069[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$259080[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$259081[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_:
	mov	eax, DWORD PTR __Result$259081[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAPAVCvPlot@@PAPAV1@@stdext@@YAPAPAVCvPlot@@PAPAV1@00@Z ENDP ; stdext::_Unchecked_move_backward<CvPlot * *,CvPlot * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z
_TEXT	SEGMENT
$T259094 = -16						; size = 4
$T259090 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z PROC ; std::_Allocate<CvPlot *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T259094[ebp], 0
	lea	eax, DWORD PTR $T259094[ebp]
	push	eax
	lea	ecx, DWORD PTR $T259090[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T259090[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T259090[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvPlot@@@std@@YAPAPAVCvPlot@@IPAPAV1@@Z ENDP ; std::_Allocate<CvPlot *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z
_TEXT	SEGMENT
$T259101 = -16						; size = 4
$T259097 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z PROC ; std::_Allocate<enum PlayerTypes>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T259101[ebp], 0
	lea	eax, DWORD PTR $T259101[ebp]
	push	eax
	lea	ecx, DWORD PTR $T259097[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T259097[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T259097[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@W4PlayerTypes@@@std@@YAPAW4PlayerTypes@@IPAW41@@Z ENDP ; std::_Allocate<enum PlayerTypes>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z
_TEXT	SEGMENT
$T259108 = -16						; size = 4
$T259104 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z PROC ; std::_Allocate<CvGreatWorkInMyEmpire>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 24					; 00000018H
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T259108[ebp], 0
	lea	eax, DWORD PTR $T259108[ebp]
	push	eax
	lea	ecx, DWORD PTR $T259104[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T259104[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T259104[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 24					; 00000018H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCvGreatWorkInMyEmpire@@@std@@YAPAVCvGreatWorkInMyEmpire@@IPAV1@@Z ENDP ; std::_Allocate<CvGreatWorkInMyEmpire>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z
_TEXT	SEGMENT
$T259115 = -16						; size = 4
$T259111 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z PROC ; std::_Allocate<enum EraTypes>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T259115[ebp], 0
	lea	eax, DWORD PTR $T259115[ebp]
	push	eax
	lea	ecx, DWORD PTR $T259111[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T259111[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T259111[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@W4EraTypes@@@std@@YAPAW4EraTypes@@IPAW41@@Z ENDP ; std::_Allocate<enum EraTypes>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@ZV3@@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ; std::_Insertion_sort1<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &),CvGreatWorkBuildingInMyEmpire>
PUBLIC	??$pop_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::pop_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
PUBLIC	??$_Make_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAHPAV2@@Z ; std::_Make_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
PUBLIC	??$_Unguarded_partition@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YA?AU?$pair@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@V12@@0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Unguarded_partition<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z
_TEXT	SEGMENT
$T259972 = -304						; size = 4
$T259971 = -300						; size = 4
$T259962 = -296						; size = 4
$T259961 = -292						; size = 4
$T259945 = -288						; size = 4
$T259944 = -284						; size = 4
$T259912 = -280						; size = 4
$T259911 = -276						; size = 4
$T259876 = -272						; size = 4
__Mid$229848 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z PROC ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 3244 : 	{	// order [_First, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H

; 3245 : 	_Diff _Count;
; 3246 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

$LN10@Sort:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	$LN6@Sort

; 3247 : 		{	// divide and conquer by quicksort
; 3248 : 		pair<_RanIt, _RanIt> _Mid =
; 3249 : 			std::_Unguarded_partition(_First, _Last, _Pred);

	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Mid$229848[ebp]
	push	edx
	call	??$_Unguarded_partition@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YA?AU?$pair@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@V12@@0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Unguarded_partition<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3250 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3251 : 
; 3252 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	eax, DWORD PTR __Mid$229848[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T259876[ebp], eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Mid$229848[ebp+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	DWORD PTR $T259876[ebp], eax
	jge	SHORT $LN5@Sort

; 3253 : 			{	// loop on second half
; 3254 : 			std::_Sort(_First, _Mid.first, _Ideal, _Pred);

	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229848[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3255 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$229848[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3256 : 			}
; 3257 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3258 : 			{	// loop on first half
; 3259 : 			std::_Sort(_Mid.second, _Last, _Ideal, _Pred);

	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ideal$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229848[ebp+4]
	push	ecx
	call	??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3260 : 			_Last = _Mid.first;

	mov	edx, DWORD PTR __Mid$229848[ebp]
	mov	DWORD PTR __Last$[ebp], edx
$LN4@Sort:

; 3261 : 			}
; 3262 : 		}

	jmp	$LN10@Sort
$LN6@Sort:

; 3263 : 
; 3264 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN3@Sort

; 3265 : 		{	// heap sort if too many divisions
; 3266 : 		std::make_heap(_First, _Last, _Pred);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T259912[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259911[ebp], ecx
	mov	eax, DWORD PTR $T259912[ebp]
	sub	eax, DWORD PTR $T259911[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN340@Sort
	push	0
	push	0
	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR $T259912[ebp]
	push	eax
	mov	ecx, DWORD PTR $T259911[ebp]
	push	ecx
	call	??$_Make_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAHPAV2@@Z ; std::_Make_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 20					; 00000014H
$LN340@Sort:

; 3267 : 		std::sort_heap(_First, _Last, _Pred);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T259962[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259961[ebp], eax
	mov	ecx, DWORD PTR $T259962[ebp]
	mov	DWORD PTR $T259945[ebp], ecx
	mov	edx, DWORD PTR $T259961[ebp]
	mov	DWORD PTR $T259944[ebp], edx
	jmp	SHORT $LN361@Sort
$LN353@Sort:
	mov	eax, DWORD PTR $T259945[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR $T259945[ebp], eax
$LN361@Sort:
	mov	eax, DWORD PTR $T259945[ebp]
	sub	eax, DWORD PTR $T259944[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN350@Sort
	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR $T259945[ebp]
	push	eax
	mov	ecx, DWORD PTR $T259944[ebp]
	push	ecx
	call	??$pop_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::pop_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN353@Sort
$LN350@Sort:

; 3268 : 		}
; 3269 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3270 : 		std::_Insertion_sort(_First, _Last, _Pred);	// small

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T259972[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259971[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T259972[ebp]
	push	edx
	mov	eax, DWORD PTR $T259971[ebp]
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@ZV3@@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ; std::_Insertion_sort1<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &),CvGreatWorkBuildingInMyEmpire>
	add	esp, 16					; 00000010H
$LN8@Sort:

; 3271 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HP6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0HP6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ENDP ; std::_Sort<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z PROC ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>, COMDAT

; 37   : 	{	// find first matching _Val

	push	ebp
	mov	ebp, esp

; 38   : 	_DEBUG_RANGE(_First, _Last);
; 39   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN11@Find
$LN3@Find:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN11@Find:
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Last$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Find

; 40   : 		if (*_First == _Val)

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@Find

; 41   : 			break;

	jmp	SHORT $LN2@Find
$LN1@Find:

; 42   : 	return (_First);

	jmp	SHORT $LN3@Find
$LN2@Find:
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

	pop	ebp
	ret	0
??$_Find@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@H@std@@YA?AV?$_Vector_iterator@HV?$allocator@H@std@@@0@V10@0ABH@Z ENDP ; std::_Find<std::_Vector_iterator<int,std::allocator<int> >,int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z PROC ; std::_Find<std::_Vector_iterator<enum EraTypes,std::allocator<enum EraTypes> >,enum EraTypes>, COMDAT

; 37   : 	{	// find first matching _Val

	push	ebp
	mov	ebp, esp

; 38   : 	_DEBUG_RANGE(_First, _Last);
; 39   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN11@Find@2
$LN3@Find@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN11@Find@2:
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Last$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Find@2

; 40   : 		if (*_First == _Val)

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@Find@2

; 41   : 			break;

	jmp	SHORT $LN2@Find@2
$LN1@Find@2:

; 42   : 	return (_First);

	jmp	SHORT $LN3@Find@2
$LN2@Find@2:
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

	pop	ebp
	ret	0
??$_Find@V?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@std@@W4EraTypes@@@std@@YA?AV?$_Vector_iterator@W4EraTypes@@V?$allocator@W4EraTypes@@@std@@@0@V10@0ABW4EraTypes@@@Z ENDP ; std::_Find<std::_Vector_iterator<enum EraTypes,std::allocator<enum EraTypes> >,enum EraTypes>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z
_TEXT	SEGMENT
__Cat$260031 = -3					; size = 1
$T260028 = -2						; size = 1
$T260027 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T260027[ebp], al
	mov	cl, BYTE PTR __Cat$260031[ebp]
	mov	BYTE PTR $T260028[ebp], cl
	movzx	edx, BYTE PTR $T260027[ebp]
	push	edx
	movzx	eax, BYTE PTR $T260028[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@stdext@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z
_TEXT	SEGMENT
__Cat$260039 = -3					; size = 1
$T260036 = -2						; size = 1
$T260035 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T260035[ebp], al
	mov	cl, BYTE PTR __Cat$260039[ebp]
	mov	BYTE PTR $T260036[ebp], cl
	movzx	edx, BYTE PTR $T260035[ebp]
	push	edx
	movzx	eax, BYTE PTR $T260036[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z
_TEXT	SEGMENT
__Cat$260047 = -3					; size = 1
$T260044 = -2						; size = 1
$T260043 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T260043[ebp], al
	mov	cl, BYTE PTR __Cat$260047[ebp]
	mov	BYTE PTR $T260044[ebp], cl
	movzx	edx, BYTE PTR $T260043[ebp]
	push	edx
	movzx	eax, BYTE PTR $T260044[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@stdext@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T260076 = -28						; size = 4
__Vptr$260074 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$260074[ebp], eax
	mov	ecx, DWORD PTR __Vptr$260074[ebp]
	mov	DWORD PTR $T260076[ebp], ecx
	cmp	DWORD PTR $T260076[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T260076[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T260076[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil:
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAVCvGreatWorkBuildingInMyEmpire@@IV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkBuildingInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvGreatWorkBuildingInMyEmpire *,unsigned int,CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T260122 = -28						; size = 4
__Vptr$260128 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$260128[ebp], eax
	mov	ecx, DWORD PTR __Vptr$260128[ebp]
	mov	DWORD PTR $T260122[ebp], ecx
	cmp	DWORD PTR $T260122[ebp], 0
	je	SHORT $LN18@Uninit_fil@2
	mov	edx, DWORD PTR $T260122[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T260122[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN14@Uninit_fil@2
$LN18@Uninit_fil@2:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_fil@2:
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAW4PlayerTypes@@IW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAXPAW4PlayerTypes@@IABW41@AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<enum PlayerTypes *,unsigned int,enum PlayerTypes,std::allocator<enum PlayerTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T260172 = -28						; size = 4
__Vptr$260178 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$260178[ebp], eax
	mov	ecx, DWORD PTR __Vptr$260178[ebp]
	mov	DWORD PTR $T260172[ebp], ecx
	cmp	DWORD PTR $T260172[ebp], 0
	je	SHORT $LN18@Uninit_fil@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T260172[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR $T260172[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@3
$LN18@Uninit_fil@3:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@3:
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAVCvGreatWorkInMyEmpire@@IV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAXPAVCvGreatWorkInMyEmpire@@IABV1@AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvGreatWorkInMyEmpire *,unsigned int,CvGreatWorkInMyEmpire,std::allocator<CvGreatWorkInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T260221 = -28						; size = 4
__Vptr$260227 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$260227[ebp], eax
	mov	ecx, DWORD PTR __Vptr$260227[ebp]
	mov	DWORD PTR $T260221[ebp], ecx
	cmp	DWORD PTR $T260221[ebp], 0
	je	SHORT $LN18@Uninit_fil@4
	mov	edx, DWORD PTR $T260221[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T260221[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN14@Uninit_fil@4
$LN18@Uninit_fil@4:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_fil@4:
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAW4EraTypes@@IW41@V?$allocator@W4EraTypes@@@std@@@std@@YAXPAW4EraTypes@@IABW41@AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<enum EraTypes *,unsigned int,enum EraTypes,std::allocator<enum EraTypes> >
PUBLIC	??$swap@VCvGreatWorkBuildingInMyEmpire@@@std@@YAXAAVCvGreatWorkBuildingInMyEmpire@@0@Z ; std::swap<CvGreatWorkBuildingInMyEmpire>
PUBLIC	??$_Median@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Median<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YA?AU?$pair@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@V12@@0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z
_TEXT	SEGMENT
$T261236 = -420						; size = 4
$T261235 = -416						; size = 4
$T261220 = -412						; size = 4
__Tmp$261233 = -408					; size = 12
$T261206 = -396						; size = 4
__Tmp$261196 = -392					; size = 4
$T261172 = -388						; size = 4
$T261171 = -384						; size = 4
$T261156 = -380						; size = 4
__Tmp$261169 = -376					; size = 12
$T261142 = -364						; size = 4
$T261124 = -360						; size = 4
$T261123 = -356						; size = 4
$T261108 = -352						; size = 4
__Tmp$261121 = -348					; size = 12
$T261094 = -336						; size = 4
$T261057 = -332						; size = 4
$T261056 = -328						; size = 4
$T261041 = -324						; size = 4
__Tmp$261054 = -320					; size = 12
$T261027 = -308						; size = 4
__Tmp$261012 = -304					; size = 4
__Tmp$260996 = -300					; size = 4
$T260977 = -296						; size = 4
$T260976 = -292						; size = 4
$T260961 = -288						; size = 4
__Tmp$260974 = -284					; size = 12
$T260947 = -272						; size = 4
$T260917 = -268						; size = 4
$T260916 = -264						; size = 4
$T260901 = -260						; size = 4
__Tmp$260914 = -256					; size = 12
$T260887 = -244						; size = 4
__Tmp$260862 = -240					; size = 4
$T260844 = -236						; size = 4
$T260835 = -232						; size = 4
__Tmp$260819 = -228					; size = 4
$T260801 = -224						; size = 4
__Tmp$260785 = -220					; size = 4
$T260767 = -216						; size = 4
$T260747 = -212						; size = 4
$T260746 = -208						; size = 4
$T260727 = -204						; size = 4
__Tmp$260712 = -200					; size = 4
$T260701 = -196						; size = 4
$T260692 = -192						; size = 4
$T260683 = -188						; size = 4
$T260674 = -184						; size = 4
$T260646 = -180						; size = 4
$T260637 = -176						; size = 4
$T260628 = -172						; size = 4
$T260619 = -168						; size = 4
$T260599 = -164						; size = 4
$T260590 = -160						; size = 4
__Tmp$260574 = -156					; size = 4
$T260556 = -152						; size = 4
__Tmp$260540 = -148					; size = 4
$T260522 = -144						; size = 4
__Tmp$260505 = -140					; size = 4
__Tmp$260305 = -68					; size = 4
__Tmp$260275 = -64					; size = 4
$T260256 = -60						; size = 4
$T260255 = -56						; size = 4
$T260254 = -52						; size = 4
$T260253 = -48						; size = 4
$T260252 = -44						; size = 4
$T260251 = -40						; size = 4
$T260250 = -36						; size = 4
$T260249 = -32						; size = 4
$T260248 = -28						; size = 4
$T260247 = -24						; size = 4
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Unguarded_partition@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YA?AU?$pair@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@V12@@0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z PROC ; std::_Unguarded_partition<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 3185 : 	{	// partition [_First, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H

; 3186 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$260275[ebp], eax
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$260275[ebp]
	mov	DWORD PTR __Tmp$260275[ebp], eax
	mov	edx, DWORD PTR __Tmp$260275[ebp]
	mov	DWORD PTR __Mid$[ebp], edx

; 3187 : 	std::_Median(_First, _Mid, _Last - 1, _Pred);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$260305[ebp], eax
	mov	ecx, 1
	neg	ecx
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$260305[ebp]
	mov	DWORD PTR __Tmp$260305[ebp], ecx
	mov	edx, DWORD PTR __Tmp$260305[ebp]
	mov	DWORD PTR $T260247[ebp], edx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260247[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Median@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Median<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3188 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], ecx

; 3189 : 	_RanIt _Plast = _Pfirst + 1;

	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Tmp$260505[ebp], edx
	mov	eax, 1
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$260505[ebp]
	mov	DWORD PTR __Tmp$260505[ebp], eax
	mov	ecx, DWORD PTR __Tmp$260505[ebp]
	mov	DWORD PTR __Plast$[ebp], ecx

; 3190 : 
; 3191 : 	while (_First < _Pfirst
; 3192 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3193 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

$LN122@Unguarded_:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN160@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260522[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Tmp$260540[ebp], eax
	mov	ecx, 1
	neg	ecx
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$260540[ebp]
	mov	DWORD PTR __Tmp$260540[ebp], ecx
	mov	edx, DWORD PTR __Tmp$260540[ebp]
	mov	DWORD PTR $T260248[ebp], edx
	mov	eax, DWORD PTR $T260248[ebp]
	mov	DWORD PTR $T260556[ebp], eax
	mov	ecx, DWORD PTR $T260522[ebp]
	push	ecx
	mov	edx, DWORD PTR $T260556[ebp]
	push	edx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN160@Unguarded_
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Tmp$260574[ebp], ecx
	mov	edx, 1
	neg	edx
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$260574[ebp]
	mov	DWORD PTR __Tmp$260574[ebp], edx
	mov	eax, DWORD PTR __Tmp$260574[ebp]
	mov	DWORD PTR $T260249[ebp], eax
	mov	ecx, DWORD PTR $T260249[ebp]
	mov	DWORD PTR $T260590[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260599[ebp], edx
	mov	eax, DWORD PTR $T260590[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260599[ebp]
	push	ecx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN160@Unguarded_

; 3194 : 		--_Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR __Pfirst$[ebp], eax
	jmp	$LN122@Unguarded_

; 3195 : 	while (_Plast < _Last
; 3196 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3197 : 		&& !_Pred(*_Pfirst, *_Plast))

$LN160@Unguarded_:
	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Unguarded_
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260619[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T260628[ebp], edx
	mov	eax, DWORD PTR $T260619[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260628[ebp]
	push	ecx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T260637[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260646[ebp], ecx
	mov	edx, DWORD PTR $T260637[ebp]
	push	edx
	mov	eax, DWORD PTR $T260646[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_

; 3198 : 		++_Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Plast$[ebp], edx
	jmp	SHORT $LN160@Unguarded_
$LN24@Unguarded_:

; 3199 : 
; 3200 : 	_RanIt _Gfirst = _Plast;

	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], eax

; 3201 : 	_RanIt _Glast = _Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], ecx
$LN23@Unguarded_:

; 3202 : 
; 3203 : 	for (; ; )
; 3204 : 		{	// partition
; 3205 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN186@Unguarded_
$LN20@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Gfirst$[ebp], edx
$LN186@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	sbb	ecx, ecx
	neg	ecx
	movzx	edx, cl
	test	edx, edx
	je	$LN19@Unguarded_

; 3206 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T260674[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260683[ebp], ecx
	mov	edx, DWORD PTR $T260674[ebp]
	push	edx
	mov	eax, DWORD PTR $T260683[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN198@Unguarded_
	jmp	$LN17@Unguarded_

; 3207 : 				;
; 3208 : 			else if (_Pred(*_Gfirst, *_Pfirst))

$LN198@Unguarded_:
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260692[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T260701[ebp], eax
	mov	ecx, DWORD PTR $T260692[ebp]
	push	ecx
	mov	edx, DWORD PTR $T260701[ebp]
	push	edx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3209 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3210 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3211 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Tmp$260712[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Tmp$260712[ebp]
	mov	DWORD PTR $T260250[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T260747[ebp], ecx
	mov	edx, DWORD PTR $T260250[ebp]
	mov	DWORD PTR $T260746[ebp], edx
	mov	eax, DWORD PTR $T260747[ebp]
	mov	DWORD PTR $T260727[ebp], eax
	mov	ecx, DWORD PTR $T260727[ebp]
	push	ecx
	mov	edx, DWORD PTR $T260746[ebp]
	push	edx
	call	??$swap@VCvGreatWorkBuildingInMyEmpire@@@std@@YAXAAVCvGreatWorkBuildingInMyEmpire@@0@Z ; std::swap<CvGreatWorkBuildingInMyEmpire>
	add	esp, 8
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3212 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN224@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR __Glast$[ebp], eax
$LN224@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	$LN283@Unguarded_

; 3213 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260767[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR __Tmp$260785[ebp], edx
	mov	eax, 1
	neg	eax
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$260785[ebp]
	mov	DWORD PTR __Tmp$260785[ebp], eax
	mov	ecx, DWORD PTR __Tmp$260785[ebp]
	mov	DWORD PTR $T260251[ebp], ecx
	mov	edx, DWORD PTR $T260251[ebp]
	mov	DWORD PTR $T260801[ebp], edx
	mov	eax, DWORD PTR $T260767[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260801[ebp]
	push	ecx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@Unguarded_
	jmp	$LN10@Unguarded_
$LN11@Unguarded_:

; 3214 : 				;
; 3215 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

	mov	eax, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR __Tmp$260819[ebp], eax
	mov	ecx, 1
	neg	ecx
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$260819[ebp]
	mov	DWORD PTR __Tmp$260819[ebp], ecx
	mov	edx, DWORD PTR __Tmp$260819[ebp]
	mov	DWORD PTR $T260252[ebp], edx
	mov	eax, DWORD PTR $T260252[ebp]
	mov	DWORD PTR $T260835[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260844[ebp], ecx
	mov	edx, DWORD PTR $T260835[ebp]
	push	edx
	mov	eax, DWORD PTR $T260844[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Unguarded_

; 3216 : 				break;

	jmp	$LN283@Unguarded_

; 3217 : 			else

	jmp	$LN10@Unguarded_
$LN9@Unguarded_:

; 3218 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR __Tmp$260862[ebp], edx
	mov	eax, 1
	neg	eax
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$260862[ebp]
	mov	DWORD PTR __Tmp$260862[ebp], eax
	mov	ecx, DWORD PTR __Tmp$260862[ebp]
	mov	DWORD PTR $T260253[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR $T260253[ebp]
	mov	DWORD PTR $T260917[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260916[ebp], ecx
	mov	edx, DWORD PTR $T260917[ebp]
	mov	DWORD PTR $T260887[ebp], edx
	mov	eax, DWORD PTR $T260916[ebp]
	mov	DWORD PTR $T260901[ebp], eax
	mov	ecx, DWORD PTR $T260901[ebp]
	cmp	ecx, DWORD PTR $T260887[ebp]
	je	SHORT $LN10@Unguarded_
	mov	edx, DWORD PTR $T260901[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$260914[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$260914[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$260914[ebp+8], edx
	mov	eax, DWORD PTR $T260887[ebp]
	mov	ecx, DWORD PTR $T260901[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T260887[ebp]
	mov	edx, DWORD PTR __Tmp$260914[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$260914[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$260914[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_

; 3219 : 		if (_Glast == _First && _Gfirst == _Last)

$LN283@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __First$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN289@Unguarded_
	mov	eax, DWORD PTR __Gfirst$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN289@Unguarded_

; 3220 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_

; 3221 : 
; 3222 : 		if (_Glast == _First)

$LN289@Unguarded_:
	mov	ecx, DWORD PTR __Glast$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __First$[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN337@Unguarded_

; 3223 : 			{	// no room at bottom, rotate pivot upward
; 3224 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@Unguarded_

; 3225 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T260977[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T260976[ebp], eax
	mov	ecx, DWORD PTR $T260977[ebp]
	mov	DWORD PTR $T260947[ebp], ecx
	mov	edx, DWORD PTR $T260976[ebp]
	mov	DWORD PTR $T260961[ebp], edx
	mov	eax, DWORD PTR $T260961[ebp]
	cmp	eax, DWORD PTR $T260947[ebp]
	je	SHORT $LN5@Unguarded_
	mov	ecx, DWORD PTR $T260961[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$260974[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$260974[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$260974[ebp+8], ecx
	mov	edx, DWORD PTR $T260947[ebp]
	mov	eax, DWORD PTR $T260961[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T260947[ebp]
	mov	ecx, DWORD PTR __Tmp$260974[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$260974[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$260974[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN5@Unguarded_:

; 3226 : 			++_Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Plast$[ebp], edx

; 3227 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR __Tmp$260996[ebp], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Gfirst$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$260996[ebp]
	mov	DWORD PTR $T260254[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Tmp$261012[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261012[ebp]
	mov	DWORD PTR $T260255[ebp], edx
	mov	eax, DWORD PTR $T260254[ebp]
	mov	DWORD PTR $T261057[ebp], eax
	mov	ecx, DWORD PTR $T260255[ebp]
	mov	DWORD PTR $T261056[ebp], ecx
	mov	edx, DWORD PTR $T261057[ebp]
	mov	DWORD PTR $T261027[ebp], edx
	mov	eax, DWORD PTR $T261056[ebp]
	mov	DWORD PTR $T261041[ebp], eax
	mov	ecx, DWORD PTR $T261041[ebp]
	cmp	ecx, DWORD PTR $T261027[ebp]
	je	SHORT $LN324@Unguarded_
	mov	edx, DWORD PTR $T261041[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$261054[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$261054[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$261054[ebp+8], edx
	mov	eax, DWORD PTR $T261027[ebp]
	mov	ecx, DWORD PTR $T261041[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T261027[ebp]
	mov	edx, DWORD PTR __Tmp$261054[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$261054[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$261054[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN324@Unguarded_:

; 3228 : 			}
; 3229 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN337@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	$LN3@Unguarded_

; 3230 : 			{	// no room at top, rotate pivot downward
; 3231 : 			if (--_Glast != --_Pfirst)

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN2@Unguarded_

; 3232 : 				std::iter_swap(_Glast, _Pfirst);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T261124[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR $T261123[ebp], ecx
	mov	edx, DWORD PTR $T261124[ebp]
	mov	DWORD PTR $T261094[ebp], edx
	mov	eax, DWORD PTR $T261123[ebp]
	mov	DWORD PTR $T261108[ebp], eax
	mov	ecx, DWORD PTR $T261108[ebp]
	cmp	ecx, DWORD PTR $T261094[ebp]
	je	SHORT $LN2@Unguarded_
	mov	edx, DWORD PTR $T261108[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$261121[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$261121[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$261121[ebp+8], edx
	mov	eax, DWORD PTR $T261094[ebp]
	mov	ecx, DWORD PTR $T261108[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T261094[ebp]
	mov	edx, DWORD PTR __Tmp$261121[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$261121[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$261121[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN2@Unguarded_:

; 3233 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T261172[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T261171[ebp], edx
	mov	eax, DWORD PTR $T261172[ebp]
	mov	DWORD PTR $T261142[ebp], eax
	mov	ecx, DWORD PTR $T261171[ebp]
	mov	DWORD PTR $T261156[ebp], ecx
	mov	edx, DWORD PTR $T261156[ebp]
	cmp	edx, DWORD PTR $T261142[ebp]
	je	SHORT $LN368@Unguarded_
	mov	eax, DWORD PTR $T261156[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$261169[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$261169[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$261169[ebp+8], eax
	mov	ecx, DWORD PTR $T261142[ebp]
	mov	edx, DWORD PTR $T261156[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T261142[ebp]
	mov	eax, DWORD PTR __Tmp$261169[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$261169[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$261169[ebp+8]
	mov	DWORD PTR [edx+8], eax
$LN368@Unguarded_:

; 3234 : 			}
; 3235 : 		else

	jmp	$LN4@Unguarded_
$LN3@Unguarded_:

; 3236 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR __Tmp$261196[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Gfirst$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$261196[ebp]
	mov	DWORD PTR $T260256[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR $T261236[ebp], edx
	mov	eax, DWORD PTR $T260256[ebp]
	mov	DWORD PTR $T261235[ebp], eax
	mov	ecx, DWORD PTR $T261236[ebp]
	mov	DWORD PTR $T261206[ebp], ecx
	mov	edx, DWORD PTR $T261235[ebp]
	mov	DWORD PTR $T261220[ebp], edx
	mov	eax, DWORD PTR $T261220[ebp]
	cmp	eax, DWORD PTR $T261206[ebp]
	je	SHORT $LN4@Unguarded_
	mov	ecx, DWORD PTR $T261220[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$261233[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$261233[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$261233[ebp+8], ecx
	mov	edx, DWORD PTR $T261206[ebp]
	mov	eax, DWORD PTR $T261220[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T261206[ebp]
	mov	ecx, DWORD PTR __Tmp$261233[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$261233[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$261233[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN4@Unguarded_:

; 3237 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3238 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YA?AU?$pair@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@V12@@0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ENDP ; std::_Unguarded_partition<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T261262 = -28						; size = 4
__Vptr$261268 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$261268[ebp], ecx
	mov	edx, DWORD PTR __Vptr$261268[ebp]
	mov	DWORD PTR $T261262[ebp], edx
	cmp	DWORD PTR $T261262[ebp], 0
	je	SHORT $LN18@Uninit_cop
	mov	eax, DWORD PTR $T261262[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T261262[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN14@Uninit_cop
$LN18@Uninit_cop:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_cop:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAW4PlayerTypes@@PAW41@V?$allocator@W4PlayerTypes@@@std@@@std@@YAPAW4PlayerTypes@@PAW41@00AAV?$allocator@W4PlayerTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<enum PlayerTypes *,enum PlayerTypes *,std::allocator<enum PlayerTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T261311 = -28						; size = 4
__Vptr$261317 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$261317[ebp], ecx
	mov	edx, DWORD PTR __Vptr$261317[ebp]
	mov	DWORD PTR $T261311[ebp], edx
	cmp	DWORD PTR $T261311[ebp], 0
	je	SHORT $LN18@Uninit_cop@2
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T261311[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR $T261311[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@2
$LN18@Uninit_cop@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@2:
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVCvGreatWorkInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvGreatWorkInMyEmpire *,CvGreatWorkInMyEmpire *,std::allocator<CvGreatWorkInMyEmpire> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T261360 = -28						; size = 4
__Vptr$261366 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$261366[ebp], ecx
	mov	edx, DWORD PTR __Vptr$261366[ebp]
	mov	DWORD PTR $T261360[ebp], edx
	cmp	DWORD PTR $T261360[ebp], 0
	je	SHORT $LN18@Uninit_cop@3
	mov	eax, DWORD PTR $T261360[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T261360[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN14@Uninit_cop@3
$LN18@Uninit_cop@3:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_cop@3:
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_cop@3:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAW4EraTypes@@PAW41@V?$allocator@W4EraTypes@@@std@@@std@@YAPAW4EraTypes@@PAW41@00AAV?$allocator@W4EraTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<enum EraTypes *,enum EraTypes *,std::allocator<enum EraTypes> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z
_TEXT	SEGMENT
$T261413 = -22						; size = 1
$T261412 = -21						; size = 1
$T261411 = -20						; size = 4
$T261402 = -13						; size = 1
$T261401 = -12						; size = 4
$T261400 = -8						; size = 4
$T261404 = -4						; size = 1
$T261387 = -2						; size = 1
$T261386 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z PROC ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T261386[ebp], al
	mov	cl, BYTE PTR $T261386[ebp]
	mov	BYTE PTR $T261413[ebp], cl
	mov	dl, BYTE PTR $T261387[ebp]
	mov	BYTE PTR $T261412[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T261411[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T261404[ebp], cl
	mov	dl, BYTE PTR $T261404[ebp]
	mov	BYTE PTR $T261402[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T261401[ebp], eax
	mov	ecx, DWORD PTR $T261411[ebp]
	mov	DWORD PTR $T261400[ebp], ecx
	jmp	SHORT $LN9@unchecked_@2
$LN8@unchecked_@2:
	mov	edx, DWORD PTR $T261401[ebp]
	sub	edx, 1
	mov	DWORD PTR $T261401[ebp], edx
	mov	eax, DWORD PTR $T261400[ebp]
	add	eax, 4
	mov	DWORD PTR $T261400[ebp], eax
$LN9@unchecked_@2:
	cmp	DWORD PTR $T261401[ebp], 0
	jbe	SHORT $LN1@unchecked_@2
	mov	ecx, DWORD PTR $T261400[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@2
$LN1@unchecked_@2:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVCvPlot@@IPAV1@@stdext@@YAXPAPAVCvPlot@@IABQAV1@@Z ENDP ; stdext::unchecked_fill_n<CvPlot * *,unsigned int,CvPlot *>
_TEXT	ENDS
PUBLIC	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Median@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z
_TEXT	SEGMENT
__Tmp$262063 = -296					; size = 4
__Tmp$262045 = -292					; size = 4
__Tmp$261865 = -212					; size = 4
__Tmp$261840 = -208					; size = 4
__Tmp$261660 = -128					; size = 4
__Tmp$261637 = -124					; size = 4
__Tmp$261466 = -44					; size = 4
__Tmp$261450 = -40					; size = 4
$T261423 = -36						; size = 4
$T261422 = -32						; size = 4
$T261421 = -28						; size = 4
$T261420 = -24						; size = 4
$T261419 = -20						; size = 4
$T261418 = -16						; size = 4
$T261417 = -12						; size = 4
$T261416 = -8						; size = 4
__Step$230746 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Median@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z PROC ; std::_Median<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 3168 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 496				; 000001f0H

; 3169 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3170 : 		{	// median of nine
; 3171 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$230746[ebp], eax

; 3172 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$261450[ebp], edx
	mov	eax, DWORD PTR __Step$230746[ebp]
	shl	eax, 1
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$261450[ebp]
	mov	DWORD PTR __Tmp$261450[ebp], eax
	mov	ecx, DWORD PTR __Tmp$261450[ebp]
	mov	DWORD PTR $T261416[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$261466[ebp], edx
	mov	eax, DWORD PTR __Step$230746[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$261466[ebp]
	mov	DWORD PTR __Tmp$261466[ebp], eax
	mov	ecx, DWORD PTR __Tmp$261466[ebp]
	mov	DWORD PTR $T261417[ebp], ecx
	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR $T261416[ebp]
	push	eax
	mov	ecx, DWORD PTR $T261417[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3173 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Tmp$261637[ebp], eax
	mov	ecx, DWORD PTR __Step$230746[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$261637[ebp]
	mov	DWORD PTR __Tmp$261637[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261637[ebp]
	mov	DWORD PTR $T261418[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Tmp$261660[ebp], eax
	mov	ecx, DWORD PTR __Step$230746[ebp]
	neg	ecx
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$261660[ebp]
	mov	DWORD PTR __Tmp$261660[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261660[ebp]
	mov	DWORD PTR $T261419[ebp], edx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T261418[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR $T261419[ebp]
	push	eax
	call	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3174 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$261840[ebp], ecx
	mov	edx, DWORD PTR __Step$230746[ebp]
	neg	edx
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$261840[ebp]
	mov	DWORD PTR __Tmp$261840[ebp], edx
	mov	eax, DWORD PTR __Tmp$261840[ebp]
	mov	DWORD PTR $T261420[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$261865[ebp], ecx
	mov	edx, DWORD PTR __Step$230746[ebp]
	shl	edx, 1
	neg	edx
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$261865[ebp]
	mov	DWORD PTR __Tmp$261865[ebp], edx
	mov	eax, DWORD PTR __Tmp$261865[ebp]
	mov	DWORD PTR $T261421[ebp], eax
	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR $T261420[ebp]
	push	eax
	mov	ecx, DWORD PTR $T261421[ebp]
	push	ecx
	call	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3175 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$262045[ebp], edx
	mov	eax, DWORD PTR __Step$230746[ebp]
	neg	eax
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$262045[ebp]
	mov	DWORD PTR __Tmp$262045[ebp], eax
	mov	ecx, DWORD PTR __Tmp$262045[ebp]
	mov	DWORD PTR $T261422[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$262063[ebp], edx
	mov	eax, DWORD PTR __Step$230746[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$262063[ebp]
	mov	DWORD PTR __Tmp$262063[ebp], eax
	mov	ecx, DWORD PTR __Tmp$262063[ebp]
	mov	DWORD PTR $T261423[ebp], ecx
	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR $T261422[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T261423[ebp]
	push	edx
	call	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H

; 3176 : 		}
; 3177 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3178 : 		std::_Med3(_First, _Mid, _Last, _Pred);

	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H
$LN3@Median:

; 3179 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ENDP ; std::_Median<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ; std::_Adjust_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAHPAV2@@Z
_TEXT	SEGMENT
__Tmp$262431 = -28					; size = 4
$T262412 = -24						; size = 4
$T262411 = -20						; size = 12
__Hole$230774 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAHPAV2@@Z PROC ; std::_Make_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 2190 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H

; 2191 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Bottom$[ebp], eax

; 2192 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$230774[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$230774[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2193 : 		{	// reheap top half, bottom to top
; 2194 : 		--_Hole;

	mov	edx, DWORD PTR __Hole$230774[ebp]
	sub	edx, 1
	mov	DWORD PTR __Hole$230774[ebp], edx

; 2195 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2196 : 			_Ty(*(_First + _Hole)), _Pred);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$262431[ebp], eax
	mov	ecx, DWORD PTR __Hole$230774[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$262431[ebp]
	mov	DWORD PTR __Tmp$262431[ebp], ecx
	mov	edx, DWORD PTR __Tmp$262431[ebp]
	mov	DWORD PTR $T262412[ebp], edx
	mov	eax, DWORD PTR $T262412[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T262411[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T262411[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T262411[ebp+8], eax
	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR $T262411[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T262411[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T262411[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Bottom$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$230774[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ; std::_Adjust_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 28					; 0000001cH

; 2197 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2198 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAHPAV2@@Z ENDP ; std::_Make_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@ZV3@@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z
_TEXT	SEGMENT
$T262909 = -80						; size = 4
$T262900 = -76						; size = 4
$T262875 = -72						; size = 4
$T262874 = -68						; size = 4
$T262873 = -64						; size = 4
$T262837 = -58						; size = 1
$T262836 = -57						; size = 1
$T262835 = -56						; size = 4
$T262834 = -52						; size = 4
$T262833 = -48						; size = 4
$T262792 = -44						; size = 4
__Cat$262845 = -36					; size = 1
$T262842 = -35						; size = 1
$T262841 = -34						; size = 1
$T262840 = -33						; size = 1
$T262746 = -32						; size = 4
$T262705 = -28						; size = 4
__First1$230820 = -24					; size = 4
__Val$230809 = -20					; size = 12
__Next1$230808 = -8					; size = 4
__Next$230804 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Insertion_sort1@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@ZV3@@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z PROC ; std::_Insertion_sort1<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &),CvGreatWorkBuildingInMyEmpire>, COMDAT

; 3123 : 	{	// insertion sort [_First, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 3124 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$230804[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$230804[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Next$230804[ebp], edx
	mov	eax, DWORD PTR __Next$230804[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_

; 3126 : 			{	// order next element
; 3127 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$230804[ebp]
	mov	DWORD PTR __Next1$230808[ebp], ecx

; 3128 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$230804[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$230809[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$230809[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Val$230809[ebp+8], edx

; 3129 : 
; 3130 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T262746[ebp], eax
	mov	ecx, DWORD PTR $T262746[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val$230809[ebp]
	push	edx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN5@Insertion_

; 3131 : 				{	// found new earliest element, move to front
; 3132 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$230808[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Next1$230808[ebp], ecx
	mov	edx, DWORD PTR __Next1$230808[ebp]
	mov	DWORD PTR $T262875[ebp], edx
	mov	eax, DWORD PTR __Next$230804[ebp]
	mov	DWORD PTR $T262874[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T262873[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T262840[ebp], dl
	mov	al, BYTE PTR __Cat$262845[ebp]
	mov	BYTE PTR $T262841[ebp], al
	mov	cl, BYTE PTR $T262840[ebp]
	mov	BYTE PTR $T262837[ebp], cl
	mov	dl, BYTE PTR $T262842[ebp]
	mov	BYTE PTR $T262836[ebp], dl
	mov	eax, DWORD PTR $T262875[ebp]
	mov	DWORD PTR $T262835[ebp], eax
	mov	ecx, DWORD PTR $T262874[ebp]
	mov	DWORD PTR $T262834[ebp], ecx
	mov	edx, DWORD PTR $T262873[ebp]
	mov	DWORD PTR $T262833[ebp], edx
$LN45@Insertion_:
	mov	eax, DWORD PTR $T262833[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T262834[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN41@Insertion_
	mov	ecx, DWORD PTR $T262834[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T262834[ebp], ecx
	mov	edx, DWORD PTR $T262834[ebp]
	mov	DWORD PTR $T262792[ebp], edx
	mov	eax, DWORD PTR $T262835[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR $T262835[ebp], eax
	mov	ecx, DWORD PTR $T262792[ebp]
	mov	edx, DWORD PTR $T262835[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN45@Insertion_
$LN41@Insertion_:
	mov	edx, DWORD PTR $T262835[ebp]
	mov	DWORD PTR $T262705[ebp], edx

; 3133 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$230809[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$230809[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Val$230809[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 3134 : 				}
; 3135 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 3136 : 				{	// look for insertion point after first
; 3137 : 				for (_BidIt _First1 = _Next1;

	mov	edx, DWORD PTR __Next1$230808[ebp]
	mov	DWORD PTR __First1$230820[ebp], edx

; 3138 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3139 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	eax, DWORD PTR __First1$230820[ebp]
	mov	DWORD PTR __Next1$230808[ebp], eax
$LN3@Insertion_:
	mov	ecx, DWORD PTR __First1$230820[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR __First1$230820[ebp], ecx
	mov	edx, DWORD PTR __First1$230820[ebp]
	mov	DWORD PTR $T262900[ebp], edx
	mov	eax, DWORD PTR $T262900[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val$230809[ebp]
	push	ecx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN85@Insertion_

; 3140 : 					*_Next1 = *_First1;	// move hole down

	mov	eax, DWORD PTR __First1$230820[ebp]
	mov	DWORD PTR $T262909[ebp], eax
	mov	ecx, DWORD PTR $T262909[ebp]
	mov	edx, DWORD PTR __Next1$230808[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN2@Insertion_

; 3141 : 				*_Next1 = _Val;	// insert element in hole

$LN85@Insertion_:
	mov	edx, DWORD PTR __Next1$230808[ebp]
	mov	eax, DWORD PTR __Val$230809[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$230809[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$230809[ebp+8]
	mov	DWORD PTR [edx+8], eax
$LN4@Insertion_:

; 3142 : 				}
; 3143 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 3144 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@ZV3@@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ENDP ; std::_Insertion_sort1<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &),CvGreatWorkBuildingInMyEmpire>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z
_TEXT	SEGMENT
__Cat$262932 = -3					; size = 1
$T262929 = -2						; size = 1
$T262928 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T262928[ebp], al
	mov	cl, BYTE PTR __Cat$262932[ebp]
	mov	BYTE PTR $T262929[ebp], cl
	movzx	edx, BYTE PTR $T262928[ebp]
	push	edx
	movzx	eax, BYTE PTR $T262929[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@stdext@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z
_TEXT	SEGMENT
$T262950 = -21						; size = 1
$T262949 = -20						; size = 4
$T262948 = -16						; size = 4
__Result$262945 = -12					; size = 4
__Count$262944 = -8					; size = 4
__Cat$262940 = -3					; size = 1
$T262937 = -2						; size = 1
$T262936 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T262936[ebp], al
	mov	cl, BYTE PTR __Cat$262940[ebp]
	mov	BYTE PTR $T262937[ebp], cl
	mov	dl, BYTE PTR $T262936[ebp]
	mov	BYTE PTR $T262950[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T262949[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T262948[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T262948[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$262944[ebp], edx
	mov	eax, DWORD PTR __Count$262944[ebp]
	mov	ecx, DWORD PTR $T262949[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$262945[ebp], edx
	cmp	DWORD PTR __Count$262944[ebp], 0
	jbe	SHORT $LN6@unchecked_@3
	mov	eax, DWORD PTR __Count$262944[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T262948[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$262944[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T262949[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@3:
	mov	eax, DWORD PTR __Result$262945[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@stdext@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z
_TEXT	SEGMENT
$T263126 = -108						; size = 4
$T263125 = -104						; size = 4
$T263110 = -100						; size = 4
__Tmp$263123 = -96					; size = 12
$T263096 = -84						; size = 4
$T263086 = -80						; size = 4
$T263077 = -76						; size = 4
$T263068 = -72						; size = 4
$T263067 = -68						; size = 4
$T263052 = -64						; size = 4
__Tmp$263065 = -60					; size = 12
$T263038 = -48						; size = 4
$T263028 = -44						; size = 4
$T263019 = -40						; size = 4
$T263010 = -36						; size = 4
$T263009 = -32						; size = 4
$T262994 = -28						; size = 4
__Tmp$263007 = -24					; size = 12
$T262980 = -12						; size = 4
$T262970 = -8						; size = 4
$T262961 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z PROC ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 3156 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3157 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T262961[ebp], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T262970[ebp], ecx
	mov	edx, DWORD PTR $T262961[ebp]
	push	edx
	mov	eax, DWORD PTR $T262970[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@Med3

; 3158 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263010[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T263009[ebp], eax
	mov	ecx, DWORD PTR $T263010[ebp]
	mov	DWORD PTR $T262980[ebp], ecx
	mov	edx, DWORD PTR $T263009[ebp]
	mov	DWORD PTR $T262994[ebp], edx
	mov	eax, DWORD PTR $T262994[ebp]
	cmp	eax, DWORD PTR $T262980[ebp]
	je	SHORT $LN29@Med3
	mov	ecx, DWORD PTR $T262994[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$263007[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$263007[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$263007[ebp+8], ecx
	mov	edx, DWORD PTR $T262980[ebp]
	mov	eax, DWORD PTR $T262994[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T262980[ebp]
	mov	ecx, DWORD PTR __Tmp$263007[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$263007[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$263007[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 3159 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

$LN29@Med3:
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T263019[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T263028[ebp], eax
	mov	ecx, DWORD PTR $T263019[ebp]
	push	ecx
	mov	edx, DWORD PTR $T263028[ebp]
	push	edx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN50@Med3

; 3160 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T263068[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T263067[ebp], edx
	mov	eax, DWORD PTR $T263068[ebp]
	mov	DWORD PTR $T263038[ebp], eax
	mov	ecx, DWORD PTR $T263067[ebp]
	mov	DWORD PTR $T263052[ebp], ecx
	mov	edx, DWORD PTR $T263052[ebp]
	cmp	edx, DWORD PTR $T263038[ebp]
	je	SHORT $LN50@Med3
	mov	eax, DWORD PTR $T263052[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$263065[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$263065[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$263065[ebp+8], eax
	mov	ecx, DWORD PTR $T263038[ebp]
	mov	edx, DWORD PTR $T263052[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T263038[ebp]
	mov	eax, DWORD PTR __Tmp$263065[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$263065[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$263065[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 3161 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

$LN50@Med3:
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263077[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T263086[ebp], edx
	mov	eax, DWORD PTR $T263077[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263086[ebp]
	push	ecx
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Med3

; 3162 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263126[ebp], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T263125[ebp], ecx
	mov	edx, DWORD PTR $T263126[ebp]
	mov	DWORD PTR $T263096[ebp], edx
	mov	eax, DWORD PTR $T263125[ebp]
	mov	DWORD PTR $T263110[ebp], eax
	mov	ecx, DWORD PTR $T263110[ebp]
	cmp	ecx, DWORD PTR $T263096[ebp]
	je	SHORT $LN4@Med3
	mov	edx, DWORD PTR $T263110[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$263123[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$263123[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$263123[ebp+8], edx
	mov	eax, DWORD PTR $T263096[ebp]
	mov	ecx, DWORD PTR $T263110[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T263096[ebp]
	mov	edx, DWORD PTR __Tmp$263123[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$263123[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$263123[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN4@Med3:

; 3163 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@00P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ENDP ; std::_Med3<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$swap@VCvGreatWorkBuildingInMyEmpire@@@std@@YAXAAVCvGreatWorkBuildingInMyEmpire@@0@Z
_TEXT	SEGMENT
__Tmp$230895 = -12					; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@VCvGreatWorkBuildingInMyEmpire@@@std@@YAXAAVCvGreatWorkBuildingInMyEmpire@@0@Z PROC ; std::swap<CvGreatWorkBuildingInMyEmpire>, COMDAT

; 17   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN2@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$230895[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$230895[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$230895[ebp+8], ecx

; 21   : 
; 22   : 		_Left = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 23   : 		_Right = _Tmp;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Tmp$230895[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$230895[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$230895[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN2@swap:

; 24   : 		}
; 25   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@VCvGreatWorkBuildingInMyEmpire@@@std@@YAXAAVCvGreatWorkBuildingInMyEmpire@@0@Z ENDP ; std::swap<CvGreatWorkBuildingInMyEmpire>
_TEXT	ENDS
PUBLIC	??$_Push_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ; std::_Push_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z
_TEXT	SEGMENT
__Tmp$263276 = -72					; size = 4
$T263260 = -68						; size = 4
__Tmp$263251 = -64					; size = 4
__Tmp$263227 = -60					; size = 4
$T263211 = -56						; size = 4
__Tmp$263202 = -52					; size = 4
$T263186 = -48						; size = 4
__Tmp$263175 = -44					; size = 4
$T263161 = -40						; size = 4
__Tmp$263147 = -36					; size = 4
$T263136 = -32						; size = 4
$T263135 = -28						; size = 4
$T263134 = -24						; size = 4
$T263133 = -20						; size = 4
$T263132 = -16						; size = 4
$T263131 = -12						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 12
__Pred$ = 32						; size = 4
??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z PROC ; std::_Adjust_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 2108 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H

; 2109 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2110 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2111 : 
; 2112 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	$LN3@Adjust_hea

; 2113 : 		{	// move _Hole down to larger child
; 2114 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263147[ebp], eax
	mov	ecx, DWORD PTR __Idx$[ebp]
	sub	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$263147[ebp]
	mov	DWORD PTR __Tmp$263147[ebp], ecx
	mov	edx, DWORD PTR __Tmp$263147[ebp]
	mov	DWORD PTR $T263131[ebp], edx
	mov	eax, DWORD PTR $T263131[ebp]
	mov	DWORD PTR $T263161[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263175[ebp], ecx
	mov	edx, DWORD PTR __Idx$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$263175[ebp]
	mov	DWORD PTR __Tmp$263175[ebp], edx
	mov	eax, DWORD PTR __Tmp$263175[ebp]
	mov	DWORD PTR $T263132[ebp], eax
	mov	ecx, DWORD PTR $T263132[ebp]
	mov	DWORD PTR $T263186[ebp], ecx
	mov	edx, DWORD PTR $T263161[ebp]
	push	edx
	mov	eax, DWORD PTR $T263186[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Adjust_hea

; 2115 : 			--_Idx;

	mov	edx, DWORD PTR __Idx$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Idx$[ebp], edx
$LN2@Adjust_hea:

; 2116 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263202[ebp], eax
	mov	ecx, DWORD PTR __Idx$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$263202[ebp]
	mov	DWORD PTR __Tmp$263202[ebp], ecx
	mov	edx, DWORD PTR __Tmp$263202[ebp]
	mov	DWORD PTR $T263134[ebp], edx
	mov	eax, DWORD PTR $T263134[ebp]
	mov	DWORD PTR $T263211[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263227[ebp], ecx
	mov	edx, DWORD PTR __Hole$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$263227[ebp]
	mov	DWORD PTR __Tmp$263227[ebp], edx
	mov	eax, DWORD PTR __Tmp$263227[ebp]
	mov	DWORD PTR $T263133[ebp], eax
	mov	ecx, DWORD PTR $T263211[ebp]
	mov	edx, DWORD PTR $T263133[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], edx

; 2117 : 		}

	jmp	$LN4@Adjust_hea
$LN3@Adjust_hea:

; 2118 : 
; 2119 : 	if (_Idx == _Bottom)

	mov	eax, DWORD PTR __Idx$[ebp]
	cmp	eax, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2120 : 		{	// only child at bottom, move _Hole down to it
; 2121 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263251[ebp], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	sub	edx, 1
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$263251[ebp]
	mov	DWORD PTR __Tmp$263251[ebp], edx
	mov	eax, DWORD PTR __Tmp$263251[ebp]
	mov	DWORD PTR $T263136[ebp], eax
	mov	ecx, DWORD PTR $T263136[ebp]
	mov	DWORD PTR $T263260[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263276[ebp], edx
	mov	eax, DWORD PTR __Hole$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$263276[ebp]
	mov	DWORD PTR __Tmp$263276[ebp], eax
	mov	ecx, DWORD PTR __Tmp$263276[ebp]
	mov	DWORD PTR $T263135[ebp], ecx
	mov	edx, DWORD PTR $T263260[ebp]
	mov	eax, DWORD PTR $T263135[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 2122 : 		_Hole = _Bottom - 1;

	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Hole$[ebp], eax
$LN1@Adjust_hea:

; 2123 : 		}
; 2124 : 	std::_Push_heap(_First, _Hole, _Top, _Val, _Pred);

	mov	ecx, DWORD PTR __Pred$[ebp]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Top$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Push_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ; std::_Push_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 28					; 0000001cH

; 2125 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ENDP ; std::_Adjust_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@VCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ; std::_Pop_heap_0<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
;	COMDAT ??$pop_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$pop_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z PROC ; std::pop_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 2151 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H

; 2152 : 	_DEBUG_RANGE(_First, _Last);
; 2153 : 	_DEBUG_POINTER(_Pred);
; 2154 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2155 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, 1
	jle	SHORT $LN2@pop_heap

; 2156 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Pred, _Val_type(_First));

	push	0
	mov	edx, DWORD PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@VCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ; std::_Pop_heap_0<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 16					; 00000010H
$LN2@pop_heap:

; 2157 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$pop_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@P6A_NABVCvGreatWorkBuildingInMyEmpire@@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@Z@Z ENDP ; std::pop_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T263820 = -28						; size = 4
__Vptr$263818 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$263818[ebp], ecx
	mov	edx, DWORD PTR __Vptr$263818[ebp]
	mov	DWORD PTR $T263820[ebp], edx
	cmp	DWORD PTR $T263820[ebp], 0
	je	SHORT $LN18@Uninit_cop@4
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T263820[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T263820[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@4
$LN18@Uninit_cop@4:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@4:
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVCvGreatWorkBuildingInMyEmpire@@PAV1@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@YAPAVCvGreatWorkBuildingInMyEmpire@@PAV1@00AAV?$allocator@VCvGreatWorkBuildingInMyEmpire@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvGreatWorkBuildingInMyEmpire *,CvGreatWorkBuildingInMyEmpire *,std::allocator<CvGreatWorkBuildingInMyEmpire> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@std@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@std@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@5

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@5:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVCvPlot@@PAPAV1@V?$allocator@PAVCvPlot@@@std@@@std@@YAPAPAVCvPlot@@PAPAV1@00AAV?$allocator@PAVCvPlot@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvPlot * *,CvPlot * *,std::allocator<CvPlot *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Push_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z
_TEXT	SEGMENT
__Tmp$263934 = -44					; size = 4
__Tmp$263910 = -40					; size = 4
$T263899 = -36						; size = 4
__Tmp$263885 = -32					; size = 4
$T263874 = -28						; size = 4
__Tmp$263860 = -24					; size = 4
$T263849 = -20						; size = 4
$T263848 = -16						; size = 4
$T263847 = -12						; size = 4
$T263846 = -8						; size = 4
__Idx$231044 = -4					; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 12
__Pred$ = 32						; size = 4
??$_Push_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z PROC ; std::_Push_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 2013 : 	{	// percolate _Hole to _Top or where _Val belongs, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 2014 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$231044[ebp], eax

; 2015 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);
; 2016 : 		_Idx = (_Hole - 1) / 2)

	jmp	SHORT $LN3@Push_heap
$LN2@Push_heap:
	mov	eax, DWORD PTR __Hole$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$231044[ebp], eax
$LN3@Push_heap:
	mov	eax, DWORD PTR __Top$[ebp]
	cmp	eax, DWORD PTR __Hole$[ebp]
	jge	$LN1@Push_heap
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263860[ebp], ecx
	mov	edx, DWORD PTR __Idx$231044[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$263860[ebp]
	mov	DWORD PTR __Tmp$263860[ebp], edx
	mov	eax, DWORD PTR __Tmp$263860[ebp]
	mov	DWORD PTR $T263846[ebp], eax
	mov	ecx, DWORD PTR $T263846[ebp]
	mov	DWORD PTR $T263874[ebp], ecx
	lea	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T263874[ebp]
	push	eax
	call	DWORD PTR __Pred$[ebp]
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Push_heap

; 2017 : 		{	// move _Hole up to parent
; 2018 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263885[ebp], edx
	mov	eax, DWORD PTR __Idx$231044[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$263885[ebp]
	mov	DWORD PTR __Tmp$263885[ebp], eax
	mov	ecx, DWORD PTR __Tmp$263885[ebp]
	mov	DWORD PTR $T263848[ebp], ecx
	mov	edx, DWORD PTR $T263848[ebp]
	mov	DWORD PTR $T263899[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263910[ebp], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$263910[ebp]
	mov	DWORD PTR __Tmp$263910[ebp], ecx
	mov	edx, DWORD PTR __Tmp$263910[ebp]
	mov	DWORD PTR $T263847[ebp], edx
	mov	eax, DWORD PTR $T263899[ebp]
	mov	ecx, DWORD PTR $T263847[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 2019 : 		_Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$231044[ebp]
	mov	DWORD PTR __Hole$[ebp], ecx

; 2020 : 		}

	jmp	$LN2@Push_heap
$LN1@Push_heap:

; 2021 : 
; 2022 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$263934[ebp], edx
	mov	eax, DWORD PTR __Hole$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$263934[ebp]
	mov	DWORD PTR __Tmp$263934[ebp], eax
	mov	ecx, DWORD PTR __Tmp$263934[ebp]
	mov	DWORD PTR $T263849[ebp], ecx
	mov	edx, DWORD PTR $T263849[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$[ebp+8]
	mov	DWORD PTR [edx+8], eax

; 2023 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Push_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ENDP ; std::_Push_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@VCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z
_TEXT	SEGMENT
$T264340 = -168						; size = 4
$T264339 = -164						; size = 4
$T264338 = -160						; size = 4
$T264049 = -40						; size = 4
__Tmp$264032 = -36					; size = 4
__Tmp$264007 = -32					; size = 4
__Tmp$263971 = -28					; size = 4
$T263953 = -24						; size = 4
$T263952 = -20						; size = 4
$T263951 = -16						; size = 4
$T263950 = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Pop_heap_0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@VCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z PROC ; std::_Pop_heap_0<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>, COMDAT

; 2143 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H

; 2144 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2145 : 		_Ty(*(_Last - 1)), _Pred, _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$263971[ebp], eax
	mov	ecx, 1
	neg	ecx
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Tmp$263971[ebp]
	mov	DWORD PTR __Tmp$263971[ebp], ecx
	mov	edx, DWORD PTR __Tmp$263971[ebp]
	mov	DWORD PTR $T263951[ebp], edx
	mov	eax, DWORD PTR $T263951[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T263950[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T263950[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T263950[ebp+8], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$264007[ebp], ecx
	mov	edx, 1
	neg	edx
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$264007[ebp]
	mov	DWORD PTR __Tmp$264007[ebp], edx
	mov	eax, DWORD PTR __Tmp$264007[ebp]
	mov	DWORD PTR $T263952[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Tmp$264032[ebp], ecx
	mov	edx, 1
	neg	edx
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Tmp$264032[ebp]
	mov	DWORD PTR __Tmp$264032[ebp], edx
	mov	eax, DWORD PTR __Tmp$264032[ebp]
	mov	DWORD PTR $T263953[ebp], eax
	mov	ecx, DWORD PTR $T263952[ebp]
	mov	DWORD PTR $T264340[ebp], ecx
	mov	edx, DWORD PTR $T263953[ebp]
	mov	DWORD PTR $T264339[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T264338[ebp], eax
	mov	ecx, DWORD PTR $T264338[ebp]
	mov	DWORD PTR $T264049[ebp], ecx
	mov	edx, DWORD PTR $T264049[ebp]
	mov	eax, DWORD PTR $T264340[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR __Pred$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR $T263950[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T263950[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T263950[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T264339[ebp]
	sub	eax, DWORD PTR $T264338[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	push	eax
	push	0
	mov	edx, DWORD PTR $T264338[ebp]
	push	edx
	call	??$_Adjust_heap@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@HVCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@HHVCvGreatWorkBuildingInMyEmpire@@P6A_NABV2@2@Z@Z ; std::_Adjust_heap<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,int,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
	add	esp, 28					; 0000001cH

; 2146 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@V?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@std@@VCvGreatWorkBuildingInMyEmpire@@P6A_NABV3@0@Z@std@@YAXV?$_Vector_iterator@VCvGreatWorkBuildingInMyEmpire@@V?$allocator@VCvGreatWorkBuildingInMyEmpire@@@std@@@0@0P6A_NABVCvGreatWorkBuildingInMyEmpire@@1@ZPAV2@@Z ENDP ; std::_Pop_heap_0<std::_Vector_iterator<CvGreatWorkBuildingInMyEmpire,std::allocator<CvGreatWorkBuildingInMyEmpire> >,CvGreatWorkBuildingInMyEmpire,bool (__cdecl*)(CvGreatWorkBuildingInMyEmpire const &,CvGreatWorkBuildingInMyEmpire const &)>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
_TEXT	ENDS
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	if(bWrap)

	movzx	eax, BYTE PTR _bWrap$[ebp]
	test	eax, eax
	je	SHORT $LN4@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)

	cmp	DWORD PTR _iCoord$[ebp], 0
	jge	SHORT $LN3@coordRange

; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	add	edx, DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
	jmp	SHORT $LN4@coordRange
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	mov	ecx, DWORD PTR _iCoord$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jl	SHORT $LN4@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
$LN4@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;

	mov	eax, DWORD PTR _iCoord$[ebp]
$LN5@coordRange:

; 101  : }

	pop	ebp
	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingclasses.h
_TEXT	ENDS
;	COMDAT ?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T264351 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ PROC ; CvThemingBonusInfo::GetDescription, COMDAT
; _this$ = ecx

; 42   : 	CvString GetDescription() {return m_strDescription;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T264351[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T264351[ebp]
	or	ecx, 1
	mov	DWORD PTR $T264351[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDescription@CvThemingBonusInfo@@QAE?AVCvString@@XZ ENDP ; CvThemingBonusInfo::GetDescription
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T264388 = -30						; size = 1
$T264375 = -29						; size = 1
$T264371 = -28						; size = 4
$T264364 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T264388[ebp]
	mov	DWORD PTR $T264364[ebp], eax
	lea	ecx, DWORD PTR $T264375[ebp]
	mov	DWORD PTR $T264371[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$264515 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$264515[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$264515[ebp], 0
	jbe	SHORT $LN11@Buy@6
	mov	eax, DWORD PTR __Count$264515[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@6
$LN11@Buy@6:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@6:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@6:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T264578 = -28						; size = 4
$T264577 = -24						; size = 4
$T264573 = -20						; size = 4
$T264572 = -16						; size = 4
$T264561 = -12						; size = 4
$T264560 = -8						; size = 4
__Cat$264567 = -2					; size = 1
$T264565 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T264573[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T264572[ebp], ecx
	mov	edx, DWORD PTR $T264573[ebp]
	mov	DWORD PTR $T264561[ebp], edx
	mov	eax, DWORD PTR $T264572[ebp]
	mov	DWORD PTR $T264560[ebp], eax
	mov	cl, BYTE PTR __Cat$264567[ebp]
	mov	BYTE PTR $T264565[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T264578[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T264577[ebp], eax
	mov	ecx, DWORD PTR $T264577[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T264596 = -80						; size = 28
$T264595 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T264596[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T264595[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T264595[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T264596[ebp]
	push	eax
	lea	ecx, DWORD PTR $T264595[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T264595[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T264595[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T264596[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T264596[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T264595[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T264621 = -16						; size = 4
$T264617 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T264621[ebp], 0
	lea	eax, DWORD PTR $T264621[ebp]
	push	eax
	lea	ecx, DWORD PTR $T264617[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T264617[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T264617[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T264717 = -52						; size = 4
$T264706 = -48						; size = 4
$T264705 = -44						; size = 4
__Cat$264712 = -40					; size = 1
$T264710 = -39						; size = 1
__Ptr$210227 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$210227[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T264717[ebp], edx
	mov	eax, DWORD PTR $T264717[ebp]
	mov	DWORD PTR $T264706[ebp], eax
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR $T264705[ebp], ecx
	mov	dl, BYTE PTR __Cat$264712[ebp]
	mov	BYTE PTR $T264710[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T264740 = -26						; size = 1
$T264739 = -25						; size = 1
$T264738 = -24						; size = 4
$T264737 = -20						; size = 4
__Off$264733 = -16					; size = 4
__Result$264734 = -12					; size = 4
__Cat$264725 = -4					; size = 1
$T264722 = -3						; size = 1
$T264721 = -2						; size = 1
$T264720 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T264720[ebp], al
	mov	cl, BYTE PTR __Cat$264725[ebp]
	mov	BYTE PTR $T264721[ebp], cl
	mov	dl, BYTE PTR $T264720[ebp]
	mov	BYTE PTR $T264740[ebp], dl
	mov	al, BYTE PTR $T264722[ebp]
	mov	BYTE PTR $T264739[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T264738[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T264737[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T264737[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$264733[ebp], eax
	mov	ecx, DWORD PTR __Off$264733[ebp]
	mov	edx, DWORD PTR $T264738[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$264734[ebp], eax
	cmp	DWORD PTR __Off$264733[ebp], 0
	jle	SHORT $LN8@unchecked_@4
	mov	ecx, DWORD PTR __Off$264733[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T264737[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$264733[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T264738[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@4:
	mov	eax, DWORD PTR __Result$264734[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T264830 = -64						; size = 4
$T264820 = -60						; size = 4
$T264808 = -56						; size = 4
$T264798 = -49						; size = 1
$T264797 = -48						; size = 4
__Cat$264815 = -19					; size = 1
$T264813 = -18						; size = 1
$T264812 = -17						; size = 1
$T264749 = -16						; size = 4
$T264745 = -12						; size = 4
$T264744 = -8						; size = 4
$T264743 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T264749[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@7
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@7
$LN9@push_back@7:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@7:
	mov	ecx, DWORD PTR $T264749[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@7

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T264820[ebp], eax
	mov	ecx, DWORD PTR $T264820[ebp]
	mov	DWORD PTR $T264808[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T264812[ebp], dl
	mov	al, BYTE PTR __Cat$264815[ebp]
	mov	BYTE PTR $T264813[ebp], al
	mov	cl, BYTE PTR $T264812[ebp]
	mov	BYTE PTR $T264798[ebp], cl
	mov	edx, DWORD PTR $T264808[ebp]
	mov	DWORD PTR $T264797[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T264797[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T264820[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@7
$LN2@push_back@7:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T264830[ebp], edx
	mov	eax, DWORD PTR $T264830[ebp]
	mov	DWORD PTR $T264744[ebp], eax
	mov	ecx, DWORD PTR $T264744[ebp]
	mov	DWORD PTR $T264743[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T264743[ebp]
	push	eax
	lea	ecx, DWORD PTR $T264745[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
$LN3@push_back@7:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$264955 = -24					; size = 4
$T264933 = -20						; size = 4
$T264914 = -16						; size = 4
$T264901 = -12						; size = 4
$T264898 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@6
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@6
$LN3@insert@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T264914[ebp], ecx
	mov	edx, DWORD PTR $T264914[ebp]
	mov	DWORD PTR $T264898[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T264898[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@6:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T264933[ebp], edx
	mov	eax, DWORD PTR $T264933[ebp]
	mov	DWORD PTR $T264901[ebp], eax
	mov	ecx, DWORD PTR $T264901[ebp]
	mov	DWORD PTR __Tmp$264955[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$264955[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$264955[ebp], ecx
	mov	edx, DWORD PTR __Tmp$264955[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T265509 = -412						; size = 4
$T265457 = -368						; size = 4
$T265445 = -364						; size = 4
$T265435 = -357						; size = 1
$T265434 = -356						; size = 4
__Cat$265452 = -327					; size = 1
$T265449 = -326						; size = 1
$T265448 = -325						; size = 1
$T265406 = -324						; size = 4
$T265398 = -320						; size = 4
$T265390 = -316						; size = 4
$T265379 = -312						; size = 4
$T265378 = -308						; size = 4
__Cat$265385 = -302					; size = 1
$T265383 = -301						; size = 1
$T265307 = -276						; size = 4
$T265288 = -272						; size = 4
$T265271 = -265						; size = 1
$T265270 = -264						; size = 4
$T265260 = -260						; size = 4
$T265259 = -256						; size = 4
__Cat$265302 = -250					; size = 1
$T265299 = -249						; size = 1
$T265298 = -248						; size = 1
__Cat$265295 = -247					; size = 1
$T265292 = -246						; size = 1
$T265291 = -245						; size = 1
$T265235 = -244						; size = 4
$T265234 = -240						; size = 4
$T265230 = -236						; size = 4
$T265229 = -232						; size = 4
$T265218 = -228						; size = 4
$T265217 = -224						; size = 4
__Cat$265226 = -218					; size = 1
$T265224 = -217						; size = 1
$T265182 = -216						; size = 4
$T265181 = -212						; size = 4
__Cat$265189 = -206					; size = 1
$T265187 = -205						; size = 1
$T265152 = -204						; size = 4
$T265151 = -200						; size = 4
__Cat$265159 = -194					; size = 1
$T265157 = -193						; size = 1
$T265132 = -192						; size = 4
$T265120 = -188						; size = 4
$T265110 = -181						; size = 1
$T265109 = -180						; size = 4
__Cat$265129 = -175					; size = 1
$T265125 = -174						; size = 1
$T265124 = -173						; size = 1
$T265097 = -172						; size = 4
$T265085 = -168						; size = 4
$T265075 = -161						; size = 1
$T265074 = -160						; size = 4
__Cat$265093 = -155					; size = 1
$T265090 = -154						; size = 1
$T265089 = -153						; size = 1
$T265062 = -152						; size = 4
$T265050 = -148						; size = 4
$T265040 = -141						; size = 1
$T265039 = -140						; size = 4
__Cat$265058 = -135					; size = 1
$T265056 = -134						; size = 1
$T265055 = -133						; size = 1
__Count$265013 = -120					; size = 4
__Count$264987 = -48					; size = 4
__Tmp$214818 = -44					; size = 4
__Oldend$214819 = -40					; size = 4
__Tmp$214808 = -36					; size = 4
__Ncopied$214795 = -32					; size = 4
__Newvec$214793 = -28					; size = 4
__Whereoff$214794 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@6
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@6
$LN29@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@6:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@6
	jmp	$LN16@Insert_n@6
$LN14@Insert_n@6:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$264987[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$264987[ebp], 0
	jbe	SHORT $LN35@Insert_n@6
	mov	edx, DWORD PTR __Count$264987[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@6
$LN35@Insert_n@6:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@6

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN16@Insert_n@6

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@6

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$265013[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$265013[ebp], 0
	jbe	SHORT $LN48@Insert_n@6
	mov	ecx, DWORD PTR __Count$265013[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@6
$LN48@Insert_n@6:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@6:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@6
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@6
$LN17@Insert_n@6:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@6:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@6

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@6:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	DWORD PTR __Newvec$214793[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$214794[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$214795[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T265062[ebp], edx
	mov	eax, DWORD PTR $T265062[ebp]
	mov	DWORD PTR $T265050[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T265055[ebp], cl
	mov	dl, BYTE PTR __Cat$265058[ebp]
	mov	BYTE PTR $T265056[ebp], dl
	mov	al, BYTE PTR $T265055[ebp]
	mov	BYTE PTR $T265040[ebp], al
	mov	ecx, DWORD PTR $T265050[ebp]
	mov	DWORD PTR $T265039[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265039[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T265097[ebp], ecx
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T265085[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T265089[ebp], al
	mov	cl, BYTE PTR __Cat$265093[ebp]
	mov	BYTE PTR $T265090[ebp], cl
	mov	dl, BYTE PTR $T265089[ebp]
	mov	BYTE PTR $T265075[ebp], dl
	mov	eax, DWORD PTR $T265085[ebp]
	mov	DWORD PTR $T265074[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T265074[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265097[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T265132[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T265120[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T265124[ebp], dl
	mov	al, BYTE PTR __Cat$265129[ebp]
	mov	BYTE PTR $T265125[ebp], al
	mov	cl, BYTE PTR $T265124[ebp]
	mov	BYTE PTR $T265110[ebp], cl
	mov	edx, DWORD PTR $T265120[ebp]
	mov	DWORD PTR $T265109[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265109[ebp]
	push	ecx
	mov	edx, DWORD PTR $T265132[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@6
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 1
	jle	SHORT $LN7@Insert_n@6

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$214794[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T265152[ebp], eax
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T265151[ebp], ecx
	mov	dl, BYTE PTR __Cat$265159[ebp]
	mov	BYTE PTR $T265157[ebp], dl
$LN7@Insert_n@6:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 0
	jle	SHORT $LN6@Insert_n@6

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T265182[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T265181[ebp], ecx
	mov	dl, BYTE PTR __Cat$265189[ebp]
	mov	BYTE PTR $T265187[ebp], dl
$LN6@Insert_n@6:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$214793[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@6
	ret	0
$LN19@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@6

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T265230[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T265229[ebp], edx
	mov	eax, DWORD PTR $T265230[ebp]
	mov	DWORD PTR $T265218[ebp], eax
	mov	ecx, DWORD PTR $T265229[ebp]
	mov	DWORD PTR $T265217[ebp], ecx
	mov	dl, BYTE PTR __Cat$265226[ebp]
	mov	BYTE PTR $T265224[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T265235[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T265234[ebp], ecx
	mov	edx, DWORD PTR $T265234[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@6:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@6
$LN10@Insert_n@6:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@6

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$214808[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T265307[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T265288[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T265291[ebp], cl
	mov	dl, BYTE PTR __Cat$265295[ebp]
	mov	BYTE PTR $T265292[ebp], dl
	mov	al, BYTE PTR $T265291[ebp]
	mov	BYTE PTR $T265271[ebp], al
	mov	ecx, DWORD PTR $T265288[ebp]
	mov	DWORD PTR $T265270[ebp], ecx
	mov	edx, DWORD PTR $T265270[ebp]
	mov	DWORD PTR $T265260[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T265259[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T265298[ebp], cl
	mov	dl, BYTE PTR __Cat$265302[ebp]
	mov	BYTE PTR $T265299[ebp], dl
	movzx	eax, BYTE PTR $T265298[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T265299[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T265260[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265307[ebp]
	push	ecx
	mov	edx, DWORD PTR $T265259[ebp]
	push	edx
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$214808[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN21@Insert_n@6
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T265390[ebp], eax
	mov	ecx, DWORD PTR $T265390[ebp]
	mov	DWORD PTR $T265379[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T265378[ebp], ecx
	mov	dl, BYTE PTR __Cat$265385[ebp]
	mov	BYTE PTR $T265383[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN21@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T265406[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T265398[ebp], edx
	jmp	SHORT $LN151@Insert_n@6
$LN150@Insert_n@6:
	mov	eax, DWORD PTR $T265398[ebp]
	add	eax, 4
	mov	DWORD PTR $T265398[ebp], eax
$LN151@Insert_n@6:
	mov	ecx, DWORD PTR $T265398[ebp]
	cmp	ecx, DWORD PTR $T265406[ebp]
	je	SHORT $LN147@Insert_n@6
	mov	edx, DWORD PTR $T265398[ebp]
	mov	eax, DWORD PTR __Tmp$214808[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@6
$LN147@Insert_n@6:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@6
$LN3@Insert_n@6:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$214818[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$214819[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T265457[ebp], eax
	mov	ecx, DWORD PTR $T265457[ebp]
	mov	DWORD PTR $T265445[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T265448[ebp], dl
	mov	al, BYTE PTR __Cat$265452[ebp]
	mov	BYTE PTR $T265449[ebp], al
	mov	cl, BYTE PTR $T265448[ebp]
	mov	BYTE PTR $T265435[ebp], cl
	mov	edx, DWORD PTR $T265445[ebp]
	mov	DWORD PTR $T265434[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265434[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$214819[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$214819[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T265509[ebp], ecx
	jmp	SHORT $LN186@Insert_n@6
$LN185@Insert_n@6:
	mov	edx, DWORD PTR $T265509[ebp]
	add	edx, 4
	mov	DWORD PTR $T265509[ebp], edx
$LN186@Insert_n@6:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T265509[ebp], edx
	je	SHORT $LN16@Insert_n@6
	mov	eax, DWORD PTR $T265509[ebp]
	mov	ecx, DWORD PTR __Tmp$214818[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@6
$LN16@Insert_n@6:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T265580 = -40						; size = 4
$T265570 = -33						; size = 1
$T265569 = -32						; size = 4
__Cat$265575 = -3					; size = 1
$T265573 = -2						; size = 1
$T265572 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T265580[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T265572[ebp], cl
	mov	dl, BYTE PTR __Cat$265575[ebp]
	mov	BYTE PTR $T265573[ebp], dl
	mov	al, BYTE PTR $T265572[ebp]
	mov	BYTE PTR $T265570[ebp], al
	mov	ecx, DWORD PTR $T265580[ebp]
	mov	DWORD PTR $T265569[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T265569[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T265625 = -38						; size = 1
$T265624 = -37						; size = 1
$T265623 = -36						; size = 4
$T265622 = -32						; size = 4
$T265609 = -25						; size = 1
$T265608 = -24						; size = 4
$T265607 = -20						; size = 4
__Off$265617 = -16					; size = 4
__Result$265618 = -12					; size = 4
__Cat$265614 = -8					; size = 1
$T265612 = -7						; size = 1
$T265611 = -6						; size = 1
__Cat$265589 = -4					; size = 1
$T265585 = -3						; size = 1
$T265584 = -2						; size = 1
$T265583 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T265583[ebp], al
	mov	cl, BYTE PTR __Cat$265589[ebp]
	mov	BYTE PTR $T265584[ebp], cl
	mov	dl, BYTE PTR $T265583[ebp]
	mov	BYTE PTR $T265625[ebp], dl
	mov	al, BYTE PTR $T265585[ebp]
	mov	BYTE PTR $T265624[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T265623[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T265622[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T265611[ebp], al
	mov	cl, BYTE PTR __Cat$265614[ebp]
	mov	BYTE PTR $T265612[ebp], cl
	mov	dl, BYTE PTR $T265611[ebp]
	mov	BYTE PTR $T265609[ebp], dl
	mov	eax, DWORD PTR $T265623[ebp]
	mov	DWORD PTR $T265608[ebp], eax
	mov	ecx, DWORD PTR $T265622[ebp]
	mov	DWORD PTR $T265607[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T265607[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$265617[ebp], edx
	mov	eax, DWORD PTR __Off$265617[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T265608[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$265618[ebp], ecx
	cmp	DWORD PTR __Off$265617[ebp], 0
	jle	SHORT $LN7@Unchecked_@2
	mov	edx, DWORD PTR __Off$265617[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T265607[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$265617[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$265618[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_@2:
	mov	eax, DWORD PTR __Result$265618[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T265655 = -22						; size = 1
$T265654 = -21						; size = 1
$T265653 = -20						; size = 4
$T265644 = -13						; size = 1
$T265643 = -12						; size = 4
$T265642 = -8						; size = 4
$T265646 = -4						; size = 1
$T265629 = -2						; size = 1
$T265628 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T265628[ebp], al
	mov	cl, BYTE PTR $T265628[ebp]
	mov	BYTE PTR $T265655[ebp], cl
	mov	dl, BYTE PTR $T265629[ebp]
	mov	BYTE PTR $T265654[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T265653[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T265646[ebp], cl
	mov	dl, BYTE PTR $T265646[ebp]
	mov	BYTE PTR $T265644[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T265643[ebp], eax
	mov	ecx, DWORD PTR $T265653[ebp]
	mov	DWORD PTR $T265642[ebp], ecx
	jmp	SHORT $LN9@unchecked_@5
$LN8@unchecked_@5:
	mov	edx, DWORD PTR $T265643[ebp]
	sub	edx, 1
	mov	DWORD PTR $T265643[ebp], edx
	mov	eax, DWORD PTR $T265642[ebp]
	add	eax, 4
	mov	DWORD PTR $T265642[ebp], eax
$LN9@unchecked_@5:
	cmp	DWORD PTR $T265643[ebp], 0
	jbe	SHORT $LN1@unchecked_@5
	mov	ecx, DWORD PTR $T265642[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@5
$LN1@unchecked_@5:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T265672 = -21						; size = 1
$T265671 = -20						; size = 4
$T265670 = -16						; size = 4
__Result$265668 = -12					; size = 4
__Count$265667 = -8					; size = 4
__Cat$265662 = -3					; size = 1
$T265659 = -2						; size = 1
$T265658 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T265658[ebp], al
	mov	cl, BYTE PTR __Cat$265662[ebp]
	mov	BYTE PTR $T265659[ebp], cl
	mov	dl, BYTE PTR $T265658[ebp]
	mov	BYTE PTR $T265672[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T265671[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T265670[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T265670[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$265667[ebp], edx
	mov	eax, DWORD PTR __Count$265667[ebp]
	mov	ecx, DWORD PTR $T265671[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$265668[ebp], edx
	cmp	DWORD PTR __Count$265667[ebp], 0
	jbe	SHORT $LN6@unchecked_@6
	mov	eax, DWORD PTR __Count$265667[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T265670[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$265667[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T265671[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@6:
	mov	eax, DWORD PTR __Result$265668[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
END
