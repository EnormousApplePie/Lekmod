; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvEspionageClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CF@IGNANIEL@b103d2e0?93aab?940d7?9a2f3?9375d2eab@ ; `string'
PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
PUBLIC	?g_eSortPlayer@@3W4PlayerTypes@@A		; g_eSortPlayer
CONST	SEGMENT
_CIV5_XP1_SCENARIO3_MODID DD FLAT:??_C@_0CF@IGNANIEL@b103d2e0?93aab?940d7?9a2f3?9375d2eab@
CONST	ENDS
;	COMDAT ??_C@_0CF@IGNANIEL@b103d2e0?93aab?940d7?9a2f3?9375d2eab@
CONST	SEGMENT
??_C@_0CF@IGNANIEL@b103d2e0?93aab?940d7?9a2f3?9375d2eab@ DB 'b103d2e0-3aa'
	DB	'b-40d7-a2f3-375d2eabfcaf', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?g_eSortPlayer@@3W4PlayerTypes@@A DD 0ffffffffH		; g_eSortPlayer
_DATA	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??0CvEspionageSpy@@QAE@XZ			; CvEspionageSpy::CvEspionageSpy
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ??0CvEspionageSpy@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvEspionageSpy@@QAE@XZ PROC				; CvEspionageSpy::CvEspionageSpy, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+25], 1

; 43   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvEspionageSpy@@QAE@XZ ENDP				; CvEspionageSpy::CvEspionageSpy
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ; operator>>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z
_TEXT	SEGMENT
_uiVersion$ = -12					; size = 4
_iSpyState$ = -8					; size = 4
_iSpyRank$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z PROC	; operator>>, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 48   : 	uint uiVersion;
; 49   : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 50   : 
; 51   : 	loadFrom >> writeTo.m_iName;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 52   : 	int iSpyRank;
; 53   : 	loadFrom >> iSpyRank;

	lea	edx, DWORD PTR _iSpyRank$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 54   : 	writeTo.m_eRank = (CvSpyRank)iSpyRank;

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	ecx, DWORD PTR _iSpyRank$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 55   : 	loadFrom >> writeTo.m_iCityX;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 56   : 	loadFrom >> writeTo.m_iCityY;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 57   : 
; 58   : 	int iSpyState;
; 59   : 	loadFrom >> iSpyState;

	lea	ecx, DWORD PTR _iSpyState$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 60   : 	writeTo.m_eSpyState = (CvSpyState)iSpyState;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR _iSpyState$[ebp]
	mov	DWORD PTR [edx+16], eax

; 61   : 
; 62   : 	loadFrom >> writeTo.m_iReviveCounter;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 63   : 	if (uiVersion >= 1)

	cmp	DWORD PTR _uiVersion$[ebp], 1
	jb	SHORT $LN2@operator

; 64   : 	{
; 65   : 		loadFrom >> writeTo.m_bIsDiplomat;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 66   : 	}
; 67   : 	else

	jmp	SHORT $LN1@operator
$LN2@operator:

; 68   : 	{
; 69   : 		writeTo.m_bIsDiplomat = false;

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN1@operator:

; 70   : 	}
; 71   : 	
; 72   : 	loadFrom >> writeTo.m_bEvaluateReassignment;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 25					; 00000019H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 73   : 	writeTo.m_bEvaluateReassignment = true;

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [edx+25], 1

; 74   : 
; 75   : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ; operator<<
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z
_TEXT	SEGMENT
$T232536 = -12						; size = 4
$T232535 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z PROC	; operator<<, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 81   : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 82   : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 83   : 
; 84   : 	saveTo << readFrom.m_iName;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 85   : 	saveTo << (int)readFrom.m_eRank;

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T232535[ebp], eax
	lea	ecx, DWORD PTR $T232535[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 86   : 	saveTo << readFrom.m_iCityX;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 87   : 	saveTo << readFrom.m_iCityY;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 88   : 	saveTo << (int)readFrom.m_eSpyState;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T232536[ebp], edx
	lea	eax, DWORD PTR $T232536[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 89   : 	saveTo << readFrom.m_iReviveCounter;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 90   : 	saveTo << readFrom.m_bIsDiplomat;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 91   : 	saveTo << readFrom.m_bEvaluateReassignment;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 25					; 00000019H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 92   : 
; 93   : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	?IsDisableTechSteal@CvTechEntry@@QBE_NXZ	; CvTechEntry::IsDisableTechSteal
; Function compile flags: /Odtp
;	COMDAT ?IsDisableTechSteal@CvTechEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDisableTechSteal@CvTechEntry@@QBE_NXZ PROC		; CvTechEntry::IsDisableTechSteal, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	return m_bDisableTechSteal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+341]

; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsDisableTechSteal@CvTechEntry@@QBE_NXZ ENDP		; CvTechEntry::IsDisableTechSteal
_TEXT	ENDS
PUBLIC	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
PUBLIC	??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
PUBLIC	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
PUBLIC	??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
PUBLIC	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
PUBLIC	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
PUBLIC	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
PUBLIC	?Reset@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::Reset
PUBLIC	?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy
PUBLIC	?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy
PUBLIC	??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
PUBLIC	??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
PUBLIC	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
PUBLIC	??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
PUBLIC	??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>
PUBLIC	??0CvPlayerEspionage@@QAE@XZ			; CvPlayerEspionage::CvPlayerEspionage
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$??0CvPlayerEspionage@@QAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0CvPlayerEspionage@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvPlayerEspionage@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$8
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$3
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$13
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$5
	DD	07H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$15
	DD	07H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvPlayerEspionage@@QAE@XZ
_TEXT	SEGMENT
tv376 = -144						; size = 4
tv401 = -140						; size = 4
tv322 = -136						; size = 4
tv347 = -132						; size = 4
tv203 = -128						; size = 4
tv228 = -124						; size = 4
_this$ = -120						; size = 4
$T232773 = -116						; size = 4
$T232758 = -110						; size = 1
$T232745 = -109						; size = 1
$T232741 = -108						; size = 4
$T232734 = -100						; size = 4
$T232727 = -92						; size = 4
$T232692 = -82						; size = 1
$T232679 = -81						; size = 1
$T232675 = -80						; size = 4
$T232668 = -72						; size = 4
$T232661 = -64						; size = 4
$T232632 = -44						; size = 4
$T232617 = -38						; size = 1
$T232604 = -37						; size = 1
$T232600 = -36						; size = 4
$T232593 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??0CvPlayerEspionage@@QAE@XZ PROC			; CvPlayerEspionage::CvPlayerEspionage, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvPlayerEspionage@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T232632[ebp], eax
	lea	ecx, DWORD PTR $T232617[ebp]
	mov	DWORD PTR $T232593[ebp], ecx
	lea	edx, DWORD PTR $T232604[ebp]
	mov	DWORD PTR $T232600[ebp], edx
	mov	eax, DWORD PTR $T232632[ebp]
	mov	DWORD PTR tv228[ebp], eax
	mov	ecx, DWORD PTR $T232632[ebp]
	mov	DWORD PTR tv203[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	mov	ecx, DWORD PTR $T232632[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 912				; 00000390H
	mov	DWORD PTR $T232661[ebp], edx
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	OFFSET ??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	push	16					; 00000010H
	mov	eax, DWORD PTR $T232661[ebp]
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	mov	DWORD PTR $T232727[ebp], ecx
	lea	edx, DWORD PTR $T232692[ebp]
	mov	DWORD PTR $T232668[ebp], edx
	lea	eax, DWORD PTR $T232679[ebp]
	mov	DWORD PTR $T232675[ebp], eax
	mov	ecx, DWORD PTR $T232727[ebp]
	mov	DWORD PTR tv347[ebp], ecx
	mov	edx, DWORD PTR $T232727[ebp]
	mov	DWORD PTR tv322[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	push	0
	mov	ecx, DWORD PTR $T232727[ebp]
	call	?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1280				; 00000500H
	mov	DWORD PTR $T232773[ebp], eax
	lea	ecx, DWORD PTR $T232758[ebp]
	mov	DWORD PTR $T232734[ebp], ecx
	lea	edx, DWORD PTR $T232745[ebp]
	mov	DWORD PTR $T232741[ebp], edx
	mov	eax, DWORD PTR $T232773[ebp]
	mov	DWORD PTR tv401[ebp], eax
	mov	ecx, DWORD PTR $T232773[ebp]
	mov	DWORD PTR tv376[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	push	0
	mov	ecx, DWORD PTR $T232773[ebp]
	call	?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 112  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 113  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$8:
	mov	ecx, DWORD PTR $T232632[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 912				; 00000390H
	jmp	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$13:
	mov	ecx, DWORD PTR $T232727[ebp]
	jmp	??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	jmp	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$15:
	mov	ecx, DWORD PTR $T232773[ebp]
	jmp	??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	jmp	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
__ehhandler$??0CvPlayerEspionage@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvPlayerEspionage@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvPlayerEspionage@@QAE@XZ ENDP			; CvPlayerEspionage::CvPlayerEspionage
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ PROC ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ENDP ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free
PUBLIC	?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy
PUBLIC	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
PUBLIC	??1CvPlayerEspionage@@QAE@XZ			; CvPlayerEspionage::~CvPlayerEspionage
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvPlayerEspionage@@QAE@XZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??1CvPlayerEspionage@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvPlayerEspionage@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$6
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$7
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$11
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$15
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$16
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvPlayerEspionage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -168						; size = 4
$T233138 = -152						; size = 4
$T233082 = -120						; size = 4
$T233028 = -96						; size = 4
$T233023 = -92						; size = 4
$T232937 = -56						; size = 4
__$EHRec$ = -12						; size = 12
??1CvPlayerEspionage@@QAE@XZ PROC			; CvPlayerEspionage::~CvPlayerEspionage, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvPlayerEspionage@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 118  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 119  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1280				; 00000500H
	mov	DWORD PTR $T232937[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T232937[ebp]
	call	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	mov	DWORD PTR $T233023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T233023[ebp]
	call	?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 912				; 00000390H
	mov	DWORD PTR $T233028[ebp], edx
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	push	16					; 00000010H
	mov	eax, DWORD PTR $T233028[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	mov	DWORD PTR $T233082[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR $T233082[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR $T233082[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR $T233082[ebp]
	call	?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T233138[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T233138[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 912				; 00000390H
	jmp	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	jmp	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	jmp	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$7:
	mov	ecx, DWORD PTR $T232937[ebp]
	jmp	??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$11:
	mov	ecx, DWORD PTR $T233023[ebp]
	jmp	??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$15:
	mov	ecx, DWORD PTR $T233082[ebp]
	jmp	??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$16:
	mov	ecx, DWORD PTR $T233138[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1CvPlayerEspionage@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvPlayerEspionage@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvPlayerEspionage@@QAE@XZ ENDP			; CvPlayerEspionage::~CvPlayerEspionage
PUBLIC	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back
PUBLIC	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
PUBLIC	?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back
PUBLIC	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
PUBLIC	??_C@_0CG@CNMDIGMP@Randomizing?5m_aiSpyListNameOrder@ ; `string'
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	__$ArrayPad$
PUBLIC	?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z	; CvPlayerEspionage::Init
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ:PROC	; CvCivilizationInfo::getNumSpyNames
EXTRN	?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ:PROC ; CvCivilizationBaseInfo::isPlayable
EXTRN	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ:PROC ; CvPlayer::getCivilizationInfo
EXTRN	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvPlayer::getCivilizationType
;	COMDAT ??_C@_0CG@CNMDIGMP@Randomizing?5m_aiSpyListNameOrder@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
CONST	SEGMENT
??_C@_0CG@CNMDIGMP@Randomizing?5m_aiSpyListNameOrder@ DB 'Randomizing m_a'
	DB	'iSpyListNameOrder list', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$0
__ehfuncinfo$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -160						; size = 4
$T233231 = -108						; size = 4
$T233224 = -104						; size = 4
$T233220 = -100						; size = 4
$T233219 = -96						; size = 4
$T233215 = -92						; size = 4
$T233175 = -64						; size = 4
_ui$222337 = -60					; size = 4
_aTechList$222336 = -56					; size = 20
__$ArrayPad$ = -36					; size = 4
_ui$222332 = -32					; size = 4
_uiTempValue$222329 = -28				; size = 4
_uiTargetSlot$222330 = -24				; size = 4
_ui$222325 = -20					; size = 4
_i$222321 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPlayer$ = 8						; size = 4
?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z PROC	; CvPlayerEspionage::Init, COMDAT
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 125  : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [eax+1296], ecx

; 126  : 
; 127  : 	// catching empty players, minor civs, and barbarians
; 128  : 	if(m_pPlayer->getCivilizationType() == NO_CIVILIZATION || !m_pPlayer->getCivilizationInfo().isPlayable())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ ; CvPlayer::getCivilizationType
	cmp	eax, -1
	je	SHORT $LN13@Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ ; CvCivilizationBaseInfo::isPlayable
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@Init
$LN13@Init:

; 129  : 	{
; 130  : 		return;

	jmp	$LN15@Init
$LN14@Init:

; 131  : 	}
; 132  : 
; 133  : 	// create m_aiSpyListNameOrder list
; 134  : 	for(int i = 0; i < m_pPlayer->getCivilizationInfo().getNumSpyNames(); i++)

	mov	DWORD PTR _i$222321[ebp], 0
	jmp	SHORT $LN12@Init
$LN11@Init:
	mov	edx, DWORD PTR _i$222321[ebp]
	add	edx, 1
	mov	DWORD PTR _i$222321[ebp], edx
$LN12@Init:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ ; CvCivilizationInfo::getNumSpyNames
	cmp	DWORD PTR _i$222321[ebp], eax
	jge	SHORT $LN10@Init

; 135  : 	{
; 136  : 		m_aiSpyListNameOrder.push_back(i);

	lea	ecx, DWORD PTR _i$222321[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 137  : 	}

	jmp	SHORT $LN11@Init
$LN10@Init:

; 138  : 
; 139  : 	for(uint ui = 0; ui < m_aiSpyListNameOrder.size(); ui++)

	mov	DWORD PTR _ui$222325[ebp], 0
	jmp	SHORT $LN9@Init
$LN8@Init:
	mov	edx, DWORD PTR _ui$222325[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222325[ebp], edx
$LN9@Init:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T233215[ebp], eax
	mov	ecx, DWORD PTR $T233215[ebp]
	mov	edx, DWORD PTR $T233215[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _ui$222325[ebp], eax
	jae	$LN7@Init

; 140  : 	{
; 141  : 		uint uiTempValue;
; 142  : 		uint uiTargetSlot = GC.getGame().getJonRandNum(m_aiSpyListNameOrder.size(), "Randomizing m_aiSpyListNameOrder list");

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	mov	DWORD PTR $T233219[ebp], ecx
	mov	edx, DWORD PTR $T233219[ebp]
	mov	eax, DWORD PTR $T233219[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T233220[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233224[ebp], edx
	push	OFFSET ??_C@_0CG@CNMDIGMP@Randomizing?5m_aiSpyListNameOrder@
	mov	eax, DWORD PTR $T233220[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233224[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _uiTargetSlot$222330[ebp], eax

; 143  : 		uiTempValue = m_aiSpyListNameOrder[ui];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	eax, DWORD PTR _ui$222325[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _uiTempValue$222329[ebp], ecx

; 144  : 		m_aiSpyListNameOrder[ui] = m_aiSpyListNameOrder[uiTargetSlot];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+248]
	mov	ecx, DWORD PTR _uiTargetSlot$222330[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T233231[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	mov	edx, DWORD PTR _ui$222325[ebp]
	mov	eax, DWORD PTR $T233231[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 145  : 		m_aiSpyListNameOrder[uiTargetSlot] = uiTempValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	eax, DWORD PTR _uiTargetSlot$222330[ebp]
	mov	ecx, DWORD PTR _uiTempValue$222329[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 146  : 	}

	jmp	$LN8@Init
$LN7@Init:

; 147  : 	m_iSpyListNameOrderIndex = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], 0

; 148  : 
; 149  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$222332[ebp], 0
	jmp	SHORT $LN6@Init
$LN5@Init:
	mov	eax, DWORD PTR _ui$222332[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$222332[ebp], eax
$LN6@Init:
	cmp	DWORD PTR _ui$222332[ebp], 22		; 00000016H
	jae	SHORT $LN4@Init

; 150  : 	{
; 151  : 		TechList aTechList;

	lea	ecx, DWORD PTR _aTechList$222336[ebp]
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 152  : 		m_aaPlayerStealableTechList.push_back(aTechList);

	lea	ecx, DWORD PTR _aTechList$222336[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back

; 153  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _aTechList$222336[ebp]
	call	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
	jmp	SHORT $LN5@Init
$LN4@Init:

; 154  : 
; 155  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$222337[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	edx, DWORD PTR _ui$222337[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222337[ebp], edx
$LN3@Init:
	cmp	DWORD PTR _ui$222337[ebp], 22		; 00000016H
	jae	SHORT $LN15@Init

; 156  : 	{
; 157  : 		m_aiNumTechsToStealList.push_back(0);

	mov	DWORD PTR $T233175[ebp], 0
	lea	eax, DWORD PTR $T233175[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back
	jmp	SHORT $LN2@Init
$LN15@Init:

; 158  : 	}
; 159  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$0:
	lea	ecx, DWORD PTR _aTechList$222336[ebp]
	jmp	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
__ehhandler$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z ENDP	; CvPlayerEspionage::Init
PUBLIC	?Uninit@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::Uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninit@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::Uninit, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 165  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::Uninit
_TEXT	ENDS
PUBLIC	?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase
PUBLIC	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
PUBLIC	?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -236						; size = 4
$T233851 = -232						; size = 4
$T233684 = -164						; size = 4
$T233668 = -160						; size = 4
$T233838 = -156						; size = 4
$T233837 = -152						; size = 4
$T233836 = -148						; size = 4
$T233835 = -144						; size = 4
$T233834 = -140						; size = 4
$T233646 = -136						; size = 4
$T233623 = -124						; size = 4
$T233442 = -80						; size = 4
$T233426 = -76						; size = 4
$T233610 = -72						; size = 4
$T233609 = -68						; size = 4
$T233608 = -64						; size = 4
$T233607 = -60						; size = 4
$T233606 = -56						; size = 4
$T233410 = -52						; size = 4
_i$233405 = -48						; size = 4
$T233391 = -44						; size = 4
$T233365 = -40						; size = 4
$T233349 = -36						; size = 4
$T233377 = -32						; size = 4
$T233376 = -28						; size = 4
$T233375 = -24						; size = 4
$T233374 = -20						; size = 4
$T233373 = -16						; size = 4
$T233333 = -12						; size = 4
_i$233328 = -8						; size = 4
_ui$222348 = -4						; size = 4
?Reset@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::Reset, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	m_pPlayer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1296], 0

; 170  : 	m_aSpyList.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T233333[ebp], ecx
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN12@Reset
	mov	DWORD PTR _i$233328[ebp], 0
	jmp	SHORT $LN10@Reset
$LN9@Reset:
	mov	eax, DWORD PTR _i$233328[ebp]
	add	eax, 1
	mov	DWORD PTR _i$233328[ebp], eax
$LN10@Reset:
	mov	ecx, DWORD PTR $T233333[ebp]
	mov	edx, DWORD PTR _i$233328[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN12@Reset
	jmp	SHORT $LN9@Reset
$LN12@Reset:
	mov	eax, DWORD PTR $T233333[ebp]
	mov	DWORD PTR [eax+4], 0

; 171  : 	m_aiSpyListNameOrder.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	mov	DWORD PTR $T233391[ebp], ecx
	mov	edx, DWORD PTR $T233391[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T233349[ebp], eax
	mov	ecx, DWORD PTR $T233349[ebp]
	mov	DWORD PTR $T233374[ebp], ecx
	mov	edx, DWORD PTR $T233374[ebp]
	mov	DWORD PTR $T233373[ebp], edx
	mov	eax, DWORD PTR $T233391[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233365[ebp], ecx
	mov	edx, DWORD PTR $T233365[ebp]
	mov	DWORD PTR $T233376[ebp], edx
	mov	eax, DWORD PTR $T233376[ebp]
	mov	DWORD PTR $T233375[ebp], eax
	mov	ecx, DWORD PTR $T233373[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233375[ebp]
	push	edx
	lea	eax, DWORD PTR $T233377[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233391[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 172  : 	m_iSpyListNameOrderIndex = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1

; 173  : 	m_aiNumTechsToStealList.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 720				; 000002d0H
	mov	DWORD PTR $T233410[ebp], edx
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN34@Reset
	mov	DWORD PTR _i$233405[ebp], 0
	jmp	SHORT $LN32@Reset
$LN31@Reset:
	mov	ecx, DWORD PTR _i$233405[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$233405[ebp], ecx
$LN32@Reset:
	mov	edx, DWORD PTR $T233410[ebp]
	mov	eax, DWORD PTR _i$233405[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN34@Reset
	jmp	SHORT $LN31@Reset
$LN34@Reset:
	mov	ecx, DWORD PTR $T233410[ebp]
	mov	DWORD PTR [ecx+4], 0

; 174  : 	m_aIntrigueNotificationMessages.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1280				; 00000500H
	mov	DWORD PTR $T233623[ebp], edx
	mov	eax, DWORD PTR $T233623[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T233426[ebp], ecx
	mov	edx, DWORD PTR $T233426[ebp]
	mov	DWORD PTR $T233607[ebp], edx
	mov	eax, DWORD PTR $T233607[ebp]
	mov	DWORD PTR $T233606[ebp], eax
	mov	ecx, DWORD PTR $T233623[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T233442[ebp], edx
	mov	eax, DWORD PTR $T233442[ebp]
	mov	DWORD PTR $T233609[ebp], eax
	mov	ecx, DWORD PTR $T233609[ebp]
	mov	DWORD PTR $T233608[ebp], ecx
	mov	edx, DWORD PTR $T233606[ebp]
	push	edx
	mov	eax, DWORD PTR $T233608[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233610[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233623[ebp]
	call	?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase

; 175  : 	m_aaPlayerStealableTechList.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	mov	DWORD PTR $T233646[ebp], edx
	mov	eax, DWORD PTR $T233646[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR $T233646[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T233646[ebp]
	call	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
	mov	ecx, DWORD PTR $T233646[ebp]
	mov	DWORD PTR [ecx+4], 0

; 176  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$222348[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	edx, DWORD PTR _ui$222348[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222348[ebp], edx
$LN3@Reset:
	cmp	DWORD PTR _ui$222348[ebp], 22		; 00000016H
	jae	$LN4@Reset

; 177  : 	{
; 178  : 		m_aiMaxTechCost[ui] = -1;

	mov	eax, DWORD PTR _ui$222348[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+824], -1

; 179  : 		m_aHeistLocations[ui].clear();

	mov	edx, DWORD PTR _ui$222348[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+912]
	mov	DWORD PTR $T233851[ebp], ecx
	mov	edx, DWORD PTR $T233851[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T233668[ebp], eax
	mov	ecx, DWORD PTR $T233668[ebp]
	mov	DWORD PTR $T233835[ebp], ecx
	mov	edx, DWORD PTR $T233835[ebp]
	mov	DWORD PTR $T233834[ebp], edx
	mov	eax, DWORD PTR $T233851[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233684[ebp], ecx
	mov	edx, DWORD PTR $T233684[ebp]
	mov	DWORD PTR $T233837[ebp], edx
	mov	eax, DWORD PTR $T233837[ebp]
	mov	DWORD PTR $T233836[ebp], eax
	mov	ecx, DWORD PTR $T233834[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233836[ebp]
	push	edx
	lea	eax, DWORD PTR $T233838[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233851[ebp]
	call	?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase

; 180  : 	}

	jmp	$LN2@Reset
$LN4@Reset:

; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::Reset
_TEXT	ENDS
PUBLIC	?ProcessSpy@CvPlayerEspionage@@QAEXI@Z		; CvPlayerEspionage::ProcessSpy
PUBLIC	?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::ProcessSpyMessages
PUBLIC	?DoTurn@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::DoTurn
; Function compile flags: /Odtp
;	COMDAT ?DoTurn@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T234059 = -108						; size = 4
$T234055 = -104						; size = 4
$T233888 = -36						; size = 4
$T233872 = -32						; size = 4
$T234042 = -28						; size = 4
$T234041 = -24						; size = 4
$T234040 = -20						; size = 4
$T234039 = -16						; size = 4
$T234038 = -12						; size = 4
_uiSpy$222360 = -8					; size = 4
_ui$222356 = -4						; size = 4
?DoTurn@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::DoTurn, COMDAT
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 	AI_PERF_FORMAT("AI-perf.csv", ("CvPlayerEspionage::DoTurn, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), m_pPlayer->getCivilizationShortDescription()) );
; 188  : 	ProcessSpyMessages();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ ; CvPlayerEspionage::ProcessSpyMessages

; 189  : 
; 190  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$222356[ebp], 0
	jmp	SHORT $LN6@DoTurn
$LN5@DoTurn:
	mov	eax, DWORD PTR _ui$222356[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$222356[ebp], eax
$LN6@DoTurn:
	cmp	DWORD PTR _ui$222356[ebp], 22		; 00000016H
	jae	SHORT $LN4@DoTurn

; 191  : 	{
; 192  : 		m_aHeistLocations[ui].clear();

	mov	ecx, DWORD PTR _ui$222356[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+912]
	mov	DWORD PTR $T234055[ebp], eax
	mov	ecx, DWORD PTR $T234055[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233872[ebp], edx
	mov	eax, DWORD PTR $T233872[ebp]
	mov	DWORD PTR $T234039[ebp], eax
	mov	ecx, DWORD PTR $T234039[ebp]
	mov	DWORD PTR $T234038[ebp], ecx
	mov	edx, DWORD PTR $T234055[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233888[ebp], eax
	mov	ecx, DWORD PTR $T233888[ebp]
	mov	DWORD PTR $T234041[ebp], ecx
	mov	edx, DWORD PTR $T234041[ebp]
	mov	DWORD PTR $T234040[ebp], edx
	mov	eax, DWORD PTR $T234038[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234040[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234042[ebp]
	push	edx
	mov	ecx, DWORD PTR $T234055[ebp]
	call	?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase

; 193  : 	}

	jmp	SHORT $LN5@DoTurn
$LN4@DoTurn:

; 194  : 
; 195  : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$222360[ebp], 0
	jmp	SHORT $LN3@DoTurn
$LN2@DoTurn:
	mov	eax, DWORD PTR _uiSpy$222360[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$222360[ebp], eax
$LN3@DoTurn:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234059[ebp], edx
	mov	eax, DWORD PTR _uiSpy$222360[ebp]
	cmp	eax, DWORD PTR $T234059[ebp]
	jae	SHORT $LN7@DoTurn

; 196  : 	{
; 197  : 		ProcessSpy(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$222360[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::ProcessSpy
	jmp	SHORT $LN2@DoTurn
$LN7@DoTurn:

; 198  : 	}
; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoTurn@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::DoTurn
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg
PUBLIC	?GetLocalizedText@@YA?AVCvString@@PBD@Z		; GetLocalizedText
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0N@FBIGLPBC@New?5Spy?0?5?$CFd?0?$AA@	; `string'
PUBLIC	??_C@_0CJ@JBAMNECA@TXT_KEY_NOTIFICATION_SUMMARY_SPY@ ; `string'
PUBLIC	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z	; GetLocalizedText<char const *>
PUBLIC	??_C@_0CB@MPLODAEL@TXT_KEY_NOTIFICATION_SPY_CREATED@ ; `string'
PUBLIC	?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back
PUBLIC	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNextSpyName
PUBLIC	??_C@_0BI@ENEAAMEE@GAMEOPTION_NO_ESPIONAGE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateSpy@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::CreateSpy
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z:PROC ; CvNotifications::Add
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z:PROC	; CvCivilizationInfo::getSpyNames
EXTRN	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ:PROC ; CvPlayer::GetNotifications
EXTRN	?GetStartingSpyRank@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetStartingSpyRank
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ:PROC ; CvPlayer::GetEspionageAI
EXTRN	?isOption@CvGame@@QBE_NPBD@Z:PROC		; CvGame::isOption
;	COMDAT ??_C@_0N@FBIGLPBC@New?5Spy?0?5?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0N@FBIGLPBC@New?5Spy?0?5?$CFd?0?$AA@ DB 'New Spy, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JBAMNECA@TXT_KEY_NOTIFICATION_SUMMARY_SPY@
CONST	SEGMENT
??_C@_0CJ@JBAMNECA@TXT_KEY_NOTIFICATION_SUMMARY_SPY@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SUMMARY_SPY_CREATED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MPLODAEL@TXT_KEY_NOTIFICATION_SPY_CREATED@
CONST	SEGMENT
??_C@_0CB@MPLODAEL@TXT_KEY_NOTIFICATION_SPY_CREATED@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_CREATED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ENEAAMEE@GAMEOPTION_NO_ESPIONAGE?$AA@
CONST	SEGMENT
??_C@_0BI@ENEAAMEE@GAMEOPTION_NO_ESPIONAGE?$AA@ DB 'GAMEOPTION_NO_ESPIONA'
	DB	'GE', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateSpy@CvPlayerEspionage@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$3
__ehfuncinfo$?CreateSpy@CvPlayerEspionage@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?CreateSpy@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
tv202 = -196						; size = 4
tv140 = -192						; size = 4
_this$ = -188						; size = 4
$T234105 = -184						; size = 4
$T234086 = -180						; size = 4
$T234075 = -172						; size = 4
$T234071 = -168						; size = 4
$T234063 = -164						; size = 28
_strMsg$222387 = -136					; size = 28
_strBuffer$222375 = -108				; size = 28
_strSummary$222383 = -80				; size = 28
__$ArrayPad$ = -52					; size = 4
_szSpyName$222374 = -48					; size = 4
_pNotifications$ = -44					; size = 4
_kNewSpy$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
?CreateSpy@CvPlayerEspionage@@QAEXXZ PROC		; CvPlayerEspionage::CreateSpy, COMDAT
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 	// don't create spies if espionage is disabled
; 205  : 	if(GC.getGame().isOption(GAMEOPTION_NO_ESPIONAGE))

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234071[ebp], eax
	push	OFFSET ??_C@_0BI@ENEAAMEE@GAMEOPTION_NO_ESPIONAGE?$AA@
	mov	ecx, DWORD PTR $T234071[ebp]
	call	?isOption@CvGame@@QBE_NPBD@Z		; CvGame::isOption
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@CreateSpy

; 206  : 	{
; 207  : 		return;

	jmp	$LN5@CreateSpy
$LN4@CreateSpy:

; 208  : 	}
; 209  : 
; 210  : 	if (m_pPlayer->GetEspionageAI()->m_iTurnEspionageStarted == -1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	cmp	DWORD PTR [eax+736], -1
	jne	SHORT $LN3@CreateSpy

; 211  : 	{
; 212  : 		m_pPlayer->GetEspionageAI()->m_iTurnEspionageStarted = GC.getGame().getGameTurn();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234075[ebp], eax
	mov	ecx, DWORD PTR $T234075[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR [eax+736], esi
$LN3@CreateSpy:

; 213  : 	}
; 214  : 
; 215  : 	CvEspionageSpy kNewSpy;

	lea	ecx, DWORD PTR _kNewSpy$[ebp]
	call	??0CvEspionageSpy@@QAE@XZ		; CvEspionageSpy::CvEspionageSpy

; 216  : 	kNewSpy.m_eRank = (CvSpyRank)m_pPlayer->GetStartingSpyRank();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?GetStartingSpyRank@CvPlayer@@QBEHXZ	; CvPlayer::GetStartingSpyRank
	mov	DWORD PTR _kNewSpy$[ebp+12], eax

; 217  : 	kNewSpy.m_eSpyState = SPY_STATE_UNASSIGNED;

	mov	DWORD PTR _kNewSpy$[ebp+16], 0

; 218  : 	kNewSpy.m_iName = GetNextSpyName();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNextSpyName
	mov	DWORD PTR _kNewSpy$[ebp], eax

; 219  : 	kNewSpy.m_bEvaluateReassignment = true;

	mov	BYTE PTR _kNewSpy$[ebp+25], 1

; 220  : 
; 221  : 	m_aSpyList.push_back(kNewSpy);

	lea	eax, DWORD PTR _kNewSpy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back

; 222  : 
; 223  : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$[ebp], eax

; 224  : 	if(pNotifications)

	cmp	DWORD PTR _pNotifications$[ebp], 0
	je	$LN2@CreateSpy

; 225  : 	{
; 226  : 		const char* szSpyName = m_pPlayer->getCivilizationInfo().getSpyNames(kNewSpy.m_iName);

	mov	edx, DWORD PTR _kNewSpy$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR _szSpyName$222374[ebp], eax

; 227  : 		CvString strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_CREATED", szSpyName);

	mov	ecx, DWORD PTR _szSpyName$222374[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@MPLODAEL@TXT_KEY_NOTIFICATION_SPY_CREATED@
	lea	edx, DWORD PTR _strBuffer$222375[ebp]
	push	edx
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 228  : 		CvString strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SUMMARY_SPY_CREATED", szSpyName);

	mov	eax, DWORD PTR _szSpyName$222374[ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@JBAMNECA@TXT_KEY_NOTIFICATION_SUMMARY_SPY@
	lea	ecx, DWORD PTR _strSummary$222383[ebp]
	push	ecx
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 229  : 		pNotifications->Add(NOTIFICATION_SPY_CREATED_ACTIVE_PLAYER, strBuffer, strSummary, -1, -1, 0);

	lea	ecx, DWORD PTR _strSummary$222383[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234086[ebp], eax
	push	-1
	push	0
	push	-1
	push	-1
	mov	edx, DWORD PTR $T234086[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBuffer$222375[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	-433658102				; e626e70aH
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 230  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$222383[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$222375[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@CreateSpy:

; 231  : 
; 232  : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN5@CreateSpy

; 233  : 	{
; 234  : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 235  : 		strMsg.Format("New Spy, %d,", m_aSpyList.size() - 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234105[ebp], edx
	mov	eax, DWORD PTR $T234105[ebp]
	sub	eax, 1
	push	eax
	push	OFFSET ??_C@_0N@FBIGLPBC@New?5Spy?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 236  : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(kNewSpy.m_iName));

	mov	edx, DWORD PTR _kNewSpy$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T234063[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv140[ebp], eax
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv202[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv202[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T234063[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 237  : 		LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 238  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@CreateSpy:

; 239  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strBuffer$222375[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strSummary$222383[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strMsg$222387[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T234063[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CreateSpy@CvPlayerEspionage@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-192]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateSpy@CvPlayerEspionage@@QAEXXZ ENDP		; CvPlayerEspionage::CreateSpy
PUBLIC	__$ArrayPad$
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1
__ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ?GetLocalizedText@@YA?AVCvString@@PBD@Z
_TEXT	SEGMENT
$T234126 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
?GetLocalizedText@@YA?AVCvString@@PBD@Z PROC		; GetLocalizedText, COMDAT

; 489  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T234126[ebp], 0

; 490  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 491  : 
; 492  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 493  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 494  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 495  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 496  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T234126[ebp]
	or	eax, 1
	mov	DWORD PTR $T234126[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 497  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2:
	mov	eax, DWORD PTR $T234126[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz
	and	DWORD PTR $T234126[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz:
	ret	0
__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLocalizedText@@YA?AVCvString@@PBD@Z ENDP		; GetLocalizedText
PUBLIC	??_C@_0BD@DHIBICGH@Respawned?5spy?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_0CB@MCONFAMB@TXT_KEY_NOTIFICATION_SPY_REVIVED@ ; `string'
PUBLIC	??_C@_0CD@EPPMBCAM@TXT_KEY_NOTIFICATION_SPY_REVIVED@ ; `string'
PUBLIC	??_C@_0BJ@CGEFKMBC@Re?9eval?3?5spy?5killed?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_0L@BKOJIMLH@Identified?$AA@		; `string'
PUBLIC	??_C@_08DHNPOAGK@Detected?$AA@			; `string'
PUBLIC	??_C@_0L@POGHICCO@Undetected?$AA@		; `string'
PUBLIC	??_C@_0BD@FOINDKNF@Stealing?5tech?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	??_C@_0CE@FMJCEEFH@TXT_KEY_NOTIFICATION_SPY_STEAL_T@ ; `string'
PUBLIC	??_C@_0CG@HCDNHFJC@TXT_KEY_NOTIFICATION_SPY_STEAL_T@ ; `string'
PUBLIC	??_C@_0CE@PNEMGBL@Re?9eval?3?5spy?5completed?5mission?0?5@ ; `string'
PUBLIC	??_C@_06GJNLCKAP@Killed?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_0M@CIJAGPKD@Killed?0?5?$CFd?0?$AA@	; `string'
PUBLIC	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::ExtractSpyFromCity
PUBLIC	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z		; CvPlayerEspionage::LevelUpSpy
PUBLIC	??_C@_0CE@OKPBKOE@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@ ; `string'
PUBLIC	??_C@_0CG@DBAGKGCH@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@ ; `string'
PUBLIC	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
PUBLIC	??_C@_0FA@CNNLFJI@Random?5roll?5for?5the?5result?5of?5a?5@ ; `string'
PUBLIC	??_C@_0BF@EIFMKKKD@CIVILIZATION_ENGLAND?$AA@	; `string'
PUBLIC	??_C@_0BE@EANEAGMK@CIVILIZATION_RUSSIA?$AA@	; `string'
PUBLIC	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult
PUBLIC	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
PUBLIC	??_C@_0EK@GDHGNKG@Random?5roll?5for?5the?5result?5of?5a?5@ ; `string'
PUBLIC	?HasCounterSpy@CvCityEspionage@@QAE_NXZ		; CvCityEspionage::HasCounterSpy
PUBLIC	?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back
PUBLIC	??_C@_0EC@CFADMBFJ@Re?9eval?3?5m_aaPlayerStealableTech@ ; `string'
PUBLIC	??_C@_0CA@BCANPJFI@Re?9eval?3?5potential?5too?5low?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::UncoverIntrigue
PUBLIC	??_C@_0CD@ECMMHFBE@Re?9eval?3?5can?8t?5steal?5research?0?5?$CF@ ; `string'
PUBLIC	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z	; CvPlayerEspionage::GetSpyRankName
PUBLIC	??_C@_0CJ@BAAFJABO@TXT_KEY_NOTIFICATION_SPY_CANT_ST@ ; `string'
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
PUBLIC	??_C@_0CL@NCDINLIE@TXT_KEY_NOTIFICATION_SPY_CANT_ST@ ; `string'
PUBLIC	?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastPotential
PUBLIC	?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastBasePotential
PUBLIC	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList
PUBLIC	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress
PUBLIC	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity
PUBLIC	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
PUBLIC	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
PUBLIC	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress
PUBLIC	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
PUBLIC	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z	; CvCityEspionage::Process
PUBLIC	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
PUBLIC	__$ArrayPad$
EXTRN	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z:PROC ; CvPlot::changeAdjacentSight
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
EXTRN	__imp_??0String@Localization@@QAE@PBD@Z:PROC
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	?getNameKey@CvCity@@QBEPBDXZ:PROC		; CvCity::getNameKey
EXTRN	?ChangeNumTimesRobbedBy@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z:PROC ; CvDiplomacyAI::ChangeNumTimesRobbedBy
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ:PROC	; CvPlayer::getCivilizationTypeKey
EXTRN	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z:PROC ; CvPlayerPolicies::GetNumericModifier
EXTRN	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ:PROC ; CvPlayer::GetPlayerPolicies
EXTRN	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ:PROC ; CvPlayer::GetEspionage
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ:PROC ; CvCivilizationBaseInfo::getShortDescriptionKey
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
EXTRN	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ:PROC ; CvCity::GetCityEspionage
;	COMDAT ??_C@_0BD@DHIBICGH@Respawned?5spy?0?5?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fautovariable.h
CONST	SEGMENT
??_C@_0BD@DHIBICGH@Respawned?5spy?0?5?$CFd?0?$AA@ DB 'Respawned spy, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MCONFAMB@TXT_KEY_NOTIFICATION_SPY_REVIVED@
CONST	SEGMENT
??_C@_0CB@MCONFAMB@TXT_KEY_NOTIFICATION_SPY_REVIVED@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_REVIVED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EPPMBCAM@TXT_KEY_NOTIFICATION_SPY_REVIVED@
CONST	SEGMENT
??_C@_0CD@EPPMBCAM@TXT_KEY_NOTIFICATION_SPY_REVIVED@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_REVIVED_S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CGEFKMBC@Re?9eval?3?5spy?5killed?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BJ@CGEFKMBC@Re?9eval?3?5spy?5killed?0?5?$CFd?0?$AA@ DB 'Re-eval: s'
	DB	'py killed, %d,', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BKOJIMLH@Identified?$AA@
CONST	SEGMENT
??_C@_0L@BKOJIMLH@Identified?$AA@ DB 'Identified', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHNPOAGK@Detected?$AA@
CONST	SEGMENT
??_C@_08DHNPOAGK@Detected?$AA@ DB 'Detected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POGHICCO@Undetected?$AA@
CONST	SEGMENT
??_C@_0L@POGHICCO@Undetected?$AA@ DB 'Undetected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FOINDKNF@Stealing?5tech?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BD@FOINDKNF@Stealing?5tech?0?5?$CFd?0?$AA@ DB 'Stealing tech, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FMJCEEFH@TXT_KEY_NOTIFICATION_SPY_STEAL_T@
CONST	SEGMENT
??_C@_0CE@FMJCEEFH@TXT_KEY_NOTIFICATION_SPY_STEAL_T@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STEAL_TECH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HCDNHFJC@TXT_KEY_NOTIFICATION_SPY_STEAL_T@
CONST	SEGMENT
??_C@_0CG@HCDNHFJC@TXT_KEY_NOTIFICATION_SPY_STEAL_T@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STEAL_TECH_S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PNEMGBL@Re?9eval?3?5spy?5completed?5mission?0?5@
CONST	SEGMENT
??_C@_0CE@PNEMGBL@Re?9eval?3?5spy?5completed?5mission?0?5@ DB 'Re-eval: s'
	DB	'py completed mission, %d,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJNLCKAP@Killed?$AA@
CONST	SEGMENT
??_C@_06GJNLCKAP@Killed?$AA@ DB 'Killed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIJAGPKD@Killed?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0M@CIJAGPKD@Killed?0?5?$CFd?0?$AA@ DB 'Killed, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OKPBKOE@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@
CONST	SEGMENT
??_C@_0CE@OKPBKOE@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_SPY_WAS_KILLED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DBAGKGCH@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@
CONST	SEGMENT
??_C@_0CG@DBAGKGCH@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_WAS_KILLED_S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@CNNLFJI@Random?5roll?5for?5the?5result?5of?5a?5@
CONST	SEGMENT
??_C@_0FA@CNNLFJI@Random?5roll?5for?5the?5result?5of?5a?5@ DB 'Random rol'
	DB	'l for the result of a spying mission without a counterspy in '
	DB	'the city', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EIFMKKKD@CIVILIZATION_ENGLAND?$AA@
CONST	SEGMENT
??_C@_0BF@EIFMKKKD@CIVILIZATION_ENGLAND?$AA@ DB 'CIVILIZATION_ENGLAND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EANEAGMK@CIVILIZATION_RUSSIA?$AA@
CONST	SEGMENT
??_C@_0BE@EANEAGMK@CIVILIZATION_RUSSIA?$AA@ DB 'CIVILIZATION_RUSSIA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@GDHGNKG@Random?5roll?5for?5the?5result?5of?5a?5@
CONST	SEGMENT
??_C@_0EK@GDHGNKG@Random?5roll?5for?5the?5result?5of?5a?5@ DB 'Random rol'
	DB	'l for the result of a spy mission with a counterspy in the ci'
	DB	'ty', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CFADMBFJ@Re?9eval?3?5m_aaPlayerStealableTech@
CONST	SEGMENT
??_C@_0EC@CFADMBFJ@Re?9eval?3?5m_aaPlayerStealableTech@ DB 'Re-eval: m_aa'
	DB	'PlayerStealableTechList[eCityOwner].size() == 0, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BCANPJFI@Re?9eval?3?5potential?5too?5low?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0CA@BCANPJFI@Re?9eval?3?5potential?5too?5low?0?5?$CFd?0?$AA@ DB 'Re'
	DB	'-eval: potential too low, %d,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ECMMHFBE@Re?9eval?3?5can?8t?5steal?5research?0?5?$CF@
CONST	SEGMENT
??_C@_0CD@ECMMHFBE@Re?9eval?3?5can?8t?5steal?5research?0?5?$CF@ DB 'Re-ev'
	DB	'al: can''t steal research, %d,', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BAAFJABO@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
CONST	SEGMENT
??_C@_0CJ@BAAFJABO@TXT_KEY_NOTIFICATION_SPY_CANT_ST@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_CANT_STEAL_TECH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NCDINLIE@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
CONST	SEGMENT
??_C@_0CL@NCDINLIE@TXT_KEY_NOTIFICATION_SPY_CANT_ST@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_CANT_STEAL_TECH_S', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	01eH
	DD	FLAT:__unwindtable$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18
	DD	013H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$20
	DD	015H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$23
	DD	018H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$25
	DD	01aH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$27
	DD	01cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$28
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
tv1675 = -2076						; size = 4
tv1551 = -2072						; size = 4
tv1670 = -2068						; size = 4
tv2028 = -2064						; size = 4
tv1448 = -2060						; size = 4
tv1667 = -2056						; size = 4
tv1257 = -2052						; size = 4
tv1665 = -2048						; size = 4
tv1267 = -2044						; size = 4
tv1340 = -2040						; size = 4
tv556 = -2036						; size = 4
tv1241 = -2032						; size = 4
tv1199 = -2028						; size = 4
tv1658 = -2024						; size = 4
tv560 = -2020						; size = 4
tv1655 = -2016						; size = 4
tv850 = -2012						; size = 4
tv1653 = -2008						; size = 4
tv854 = -2004						; size = 4
tv1005 = -2000						; size = 4
tv968 = -1996						; size = 4
tv756 = -1992						; size = 4
tv737 = -1988						; size = 4
tv728 = -1984						; size = 4
tv2438 = -1980						; size = 4
tv2433 = -1974						; size = 1
tv2426 = -1973						; size = 1
tv2422 = -1972						; size = 4
tv2423 = -1968						; size = 4
tv717 = -1964						; size = 4
tv2416 = -1960						; size = 4
tv2411 = -1954						; size = 1
tv2404 = -1953						; size = 1
tv2400 = -1952						; size = 4
tv2401 = -1948						; size = 4
tv1646 = -1944						; size = 4
tv2049 = -1940						; size = 4
tv1643 = -1936						; size = 4
tv277 = -1932						; size = 4
tv1640 = -1928						; size = 4
tv281 = -1924						; size = 4
tv95 = -1920						; size = 4
tv1738 = -1916						; size = 4
_this$ = -1912						; size = 4
$T234796 = -1908					; size = 4
$T234795 = -1904					; size = 4
$T234786 = -1900					; size = 4
$T234747 = -1896					; size = 4
$T234739 = -1892					; size = 4
$T234731 = -1888					; size = 4
$T234727 = -1884					; size = 4
$T234723 = -1880					; size = 4
$T234711 = -1876					; size = 4
$T234703 = -1872					; size = 4
$T234702 = -1868					; size = 4
$T234692 = -1864					; size = 4
$T234683 = -1860					; size = 4
$T234679 = -1856					; size = 4
$T234670 = -1852					; size = 4
$T234666 = -1848					; size = 4
$T234653 = -1844					; size = 4
$T234629 = -1840					; size = 4
$T234621 = -1836					; size = 4
$T234607 = -1832					; size = 4
$T234598 = -1828					; size = 4
$T234594 = -1824					; size = 4
$T234585 = -1820					; size = 4
$T234581 = -1816					; size = 4
$T234574 = -1812					; size = 4
$T234570 = -1808					; size = 4
$T234566 = -1804					; size = 4
$T234553 = -1800					; size = 4
$T234549 = -1796					; size = 4
$T234540 = -1792					; size = 4
$T234531 = -1788					; size = 4
$T234519 = -1784					; size = 4
$T234515 = -1780					; size = 4
$T234511 = -1776					; size = 4
$T234502 = -1772					; size = 4
$T234498 = -1768					; size = 4
$T234494 = -1764					; size = 4
$T234490 = -1760					; size = 4
$T234480 = -1756					; size = 4
$T234476 = -1752					; size = 4
$T234467 = -1748					; size = 4
$T234463 = -1744					; size = 4
$T234459 = -1740					; size = 4
$T234455 = -1736					; size = 4
$T234413 = -1708					; size = 4
$T234404 = -1704					; size = 4
$T234395 = -1700					; size = 4
$T234391 = -1696					; size = 4
$T234372 = -1692					; size = 4
$T234368 = -1688					; size = 4
$T234349 = -1684					; size = 4
$T234328 = -1680					; size = 4
$T234324 = -1676					; size = 4
$T234320 = -1672					; size = 4
$T234316 = -1668					; size = 4
$T234312 = -1664					; size = 4
$T234308 = -1660					; size = 4
$T234307 = -1656					; size = 4
$T234277 = -1648					; size = 4
$T234276 = -1644					; size = 4
$T234245 = -1640					; size = 4
$T234240 = -1636					; size = 4
$T234236 = -1629					; size = 1
$T234225 = -1628					; size = 4
$T234221 = -1621					; size = 1
_iMapY$234255 = -1620					; size = 4
_iMapX$234253 = -1616					; size = 4
$T234214 = -1612					; size = 4
$T234178 = -1608					; size = 28
$T234177 = -1580					; size = 4
$T234176 = -1576					; size = 4
$T234175 = -1572					; size = 28
$T234174 = -1544					; size = 28
$T234173 = -1516					; size = 28
$T234172 = -1488					; size = 4
$T234171 = -1484					; size = 4
$T234170 = -1480					; size = 4
$T234169 = -1476					; size = 4
$T234168 = -1472					; size = 28
$T234167 = -1444					; size = 28
$T234166 = -1416					; size = 28
$T234165 = -1388					; size = 28
$T234164 = -1360					; size = 4
$T234163 = -1356					; size = 4
$T234162 = -1352					; size = 4
$T234161 = -1348					; size = 4
$T234160 = -1344					; size = 4
$T234159 = -1340					; size = 4
$T234158 = -1336					; size = 4
$T234157 = -1332					; size = 4
$T234156 = -1328					; size = 4
$T234155 = -1324					; size = 28
$T234154 = -1296					; size = 28
$T234153 = -1268					; size = 28
$T234152 = -1240					; size = 4
$T234151 = -1236					; size = 4
$T234150 = -1232					; size = 4
$T234149 = -1228					; size = 4
_strMsg$222606 = -1224					; size = 28
_strNotification$222600 = -1196				; size = 80
_strSummary$222597 = -1116				; size = 80
_strMsg$222592 = -1032					; size = 28
_pNotifications$222595 = -1004				; size = 4
_strMsg$222566 = -1000					; size = 28
_strNotification$222556 = -972				; size = 80
_strSummary$222553 = -892				; size = 80
_pNotifications$222551 = -808				; size = 4
_pDefenderEspionageAI$222548 = -804			; size = 4
_strMsg$222540 = -800					; size = 28
_iGoal$222546 = -772					; size = 4
_iCityOwner$222543 = -768				; size = 4
_iRate$222545 = -764					; size = 4
_strMsg$222533 = -760					; size = 28
_strNotification$222518 = -732				; size = 80
_strSummary$222514 = -652				; size = 80
_pNotifications$222512 = -568				; size = 4
_pDefenderEspionageAI$222527 = -564			; size = 4
_iDefendingSpy$222529 = -560				; size = 4
_pEspionageAI$222525 = -556				; size = 4
_bUsingXP1Scenario3$222496 = -549			; size = 1
_kSpyOwner$222492 = -548				; size = 4
_kCityOwner$222491 = -544				; size = 4
_iCounterspyIndex$222486 = -540				; size = 4
_iSpyResult$222483 = -536				; size = 4
_kHeistLocation$222482 = -532				; size = 8
_pDefendingPlayerDiploAI$222507 = -524			; size = 4
_pDefendingPlayerEspionage$222505 = -520		; size = 4
_strNotification$222475 = -516				; size = 80
_strSummary$222472 = -436				; size = 80
_strMsg$222464 = -356					; size = 28
_pNotifications$222470 = -328				; size = 4
_iGoal$222468 = -324					; size = 4
_iAmount$222469 = -320					; size = 4
_iRate$222467 = -316					; size = 4
_strMsg$222459 = -312					; size = 28
_strMsg$222452 = -284					; size = 28
__$ArrayPad$ = -256					; size = 4
_strNotification$222444 = -252				; size = 80
_strSummary$222435 = -172				; size = 80
_pNotifications$222433 = -88				; size = 4
_iRate$222450 = -84					; size = 4
_iGoal$222430 = -80					; size = 4
_iPotentialRate$222429 = -76				; size = 4
_iBasePotentialRate$222427 = -72			; size = 4
_iGoal$222425 = -68					; size = 4
_iRate$222424 = -64					; size = 4
_iGoal$222419 = -60					; size = 4
_iRate$222418 = -56					; size = 4
_iGoal$222414 = -52					; size = 4
_iRate$222413 = -48					; size = 4
_pSpy$ = -44						; size = 4
_pCityPlot$ = -40					; size = 4
_ePlayer$ = -36						; size = 4
_pCityEspionage$ = -32					; size = 4
_bHadSurveillance$ = -25				; size = 1
_pCity$ = -24						; size = 4
_eCityOwner$ = -20					; size = 4
_bLastQualified$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?ProcessSpy@CvPlayerEspionage@@QAEXI@Z PROC		; CvPlayerEspionage::ProcessSpy, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2064				; 00000810H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	CvEspionageSpy* pSpy = &(m_aSpyList[uiSpyIndex]);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _pSpy$[ebp], eax

; 245  : 	bool bLastQualified;
; 246  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T234214[ebp], edx
	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234277[ebp], ecx
	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234276[ebp], eax
	cmp	DWORD PTR $T234276[ebp], -2147483647	; 80000001H
	je	SHORT $LN119@ProcessSpy
	cmp	DWORD PTR $T234277[ebp], -2147483647	; 80000001H
	jne	SHORT $LN120@ProcessSpy
$LN119@ProcessSpy:
	mov	DWORD PTR _pCityPlot$[ebp], 0
	jmp	$LN121@ProcessSpy
$LN120@ProcessSpy:
	mov	ecx, DWORD PTR $T234214[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T234221[ebp], dl
	mov	eax, DWORD PTR $T234214[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T234225[ebp], ecx
	movzx	edx, BYTE PTR $T234221[ebp]
	test	edx, edx
	je	SHORT $LN132@ProcessSpy
	cmp	DWORD PTR $T234276[ebp], 0
	jge	SHORT $LN131@ProcessSpy
	mov	eax, DWORD PTR $T234276[ebp]
	cdq
	idiv	DWORD PTR $T234225[ebp]
	add	edx, DWORD PTR $T234225[ebp]
	mov	DWORD PTR _iMapX$234253[ebp], edx
	jmp	SHORT $LN133@ProcessSpy
	jmp	SHORT $LN132@ProcessSpy
$LN131@ProcessSpy:
	mov	eax, DWORD PTR $T234276[ebp]
	cmp	eax, DWORD PTR $T234225[ebp]
	jl	SHORT $LN132@ProcessSpy
	mov	eax, DWORD PTR $T234276[ebp]
	cdq
	idiv	DWORD PTR $T234225[ebp]
	mov	DWORD PTR _iMapX$234253[ebp], edx
	jmp	SHORT $LN133@ProcessSpy
$LN132@ProcessSpy:
	mov	ecx, DWORD PTR $T234276[ebp]
	mov	DWORD PTR _iMapX$234253[ebp], ecx
$LN133@ProcessSpy:
	mov	edx, DWORD PTR $T234214[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T234236[ebp], al
	mov	ecx, DWORD PTR $T234214[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T234240[ebp], edx
	movzx	eax, BYTE PTR $T234236[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234240[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234277[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$234255[ebp], eax
	mov	eax, DWORD PTR _iMapY$234255[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMapX$234253[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T234214[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN123@ProcessSpy
	mov	edx, DWORD PTR $T234214[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T234245[ebp], eax
	mov	ecx, DWORD PTR _iMapY$234255[ebp]
	imul	ecx, DWORD PTR $T234245[ebp]
	add	ecx, DWORD PTR _iMapX$234253[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T234214[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv1738[ebp], ecx
	jmp	SHORT $LN124@ProcessSpy
$LN123@ProcessSpy:
	mov	DWORD PTR tv1738[ebp], 0
$LN124@ProcessSpy:
	mov	eax, DWORD PTR tv1738[ebp]
	mov	DWORD PTR _pCityPlot$[ebp], eax
$LN121@ProcessSpy:

; 247  : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 248  : 	CvCityEspionage* pCityEspionage = NULL;

	mov	DWORD PTR _pCityEspionage$[ebp], 0

; 249  : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _ePlayer$[ebp], eax

; 250  : 	PlayerTypes eCityOwner = NO_PLAYER;

	mov	DWORD PTR _eCityOwner$[ebp], -1

; 251  : 	if(pCityPlot)

	cmp	DWORD PTR _pCityPlot$[ebp], 0
	je	SHORT $LN83@ProcessSpy

; 252  : 	{
; 253  : 		pCity = pCityPlot->getPlotCity();

	mov	ecx, DWORD PTR _pCityPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax

; 254  : 		if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN83@ProcessSpy

; 255  : 		{
; 256  : 			eCityOwner = pCity->getOwner();

	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _eCityOwner$[ebp], edx

; 257  : 			pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax
$LN83@ProcessSpy:

; 258  : 		}
; 259  : 	}
; 260  : 
; 261  : 	bool bHadSurveillance = HasEstablishedSurveillance(uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	mov	BYTE PTR _bHadSurveillance$[ebp], al

; 262  : 
; 263  : 	switch(pSpy->m_eSpyState)

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv95[ebp], edx
	cmp	DWORD PTR tv95[ebp], 8
	ja	$LN80@ProcessSpy
	mov	eax, DWORD PTR tv95[ebp]
	jmp	DWORD PTR $LN442@ProcessSpy[eax*4]
$LN79@ProcessSpy:

; 264  : 	{
; 265  : 	case SPY_STATE_UNASSIGNED:
; 266  : 		// spy is idling
; 267  : 		return;

	jmp	$LN84@ProcessSpy

; 268  : 		break;

	jmp	$LN80@ProcessSpy
$LN78@ProcessSpy:

; 269  : 	case SPY_STATE_TRAVELLING:
; 270  : 		// spy is traveling to location
; 271  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 272  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN77@ProcessSpy

; 273  : 		{
; 274  : 			return;

	jmp	$LN84@ProcessSpy
$LN77@ProcessSpy:

; 275  : 		}
; 276  : 		// if the spy has completed travelling, move to location
; 277  : 		pCityEspionage->Process(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::Process

; 278  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	movzx	eax, al
	test	eax, eax
	je	$LN76@ProcessSpy

; 279  : 		{
; 280  : 			pCityEspionage->ResetProgress(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 281  : 			if (pSpy->m_bIsDiplomat)

	mov	edx, DWORD PTR _pSpy$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN75@ProcessSpy

; 282  : 			{
; 283  : 				pSpy->m_eSpyState = SPY_STATE_MAKING_INTRODUCTIONS;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+16], 6

; 284  : 				int iRate = CalcPerTurn(SPY_STATE_MAKING_INTRODUCTIONS, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222413[ebp], eax

; 285  : 				int iGoal = CalcRequired(SPY_STATE_MAKING_INTRODUCTIONS, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222414[ebp], eax

; 286  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);				

	mov	eax, DWORD PTR _iGoal$222414[ebp]
	push	eax
	mov	ecx, DWORD PTR _iRate$222413[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity
	jmp	$LN76@ProcessSpy
$LN75@ProcessSpy:

; 287  : 			}
; 288  : 			else if(pCity->getTeam() == m_pPlayer->getTeam())  // moved to a friendly city

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	DWORD PTR $T234307[ebp], ecx
	mov	edx, DWORD PTR $T234307[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T234308[ebp], eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	cmp	eax, DWORD PTR $T234308[ebp]
	jne	SHORT $LN73@ProcessSpy

; 289  : 			{
; 290  : 				// moving to a defensive location
; 291  : 				pSpy->m_eSpyState = SPY_STATE_COUNTER_INTEL;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+16], 5

; 292  : 			}
; 293  : 			else // moved to an opponent's city

	jmp	SHORT $LN76@ProcessSpy
$LN73@ProcessSpy:

; 294  : 			{
; 295  : 				pSpy->m_eSpyState = SPY_STATE_SURVEILLANCE;

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+16], 2

; 296  : 				int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222418[ebp], eax

; 297  : 				int iGoal = CalcRequired(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222419[ebp], eax

; 298  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	ecx, DWORD PTR _iGoal$222419[ebp]
	push	ecx
	mov	edx, DWORD PTR _iRate$222418[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity
$LN76@ProcessSpy:

; 299  : 			}
; 300  : 		}
; 301  : 		break;

	jmp	$LN80@ProcessSpy
$LN71@ProcessSpy:

; 302  : 	case SPY_STATE_SURVEILLANCE:
; 303  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 304  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN70@ProcessSpy

; 305  : 		{
; 306  : 			return;

	jmp	$LN84@ProcessSpy
$LN70@ProcessSpy:

; 307  : 		}
; 308  : 
; 309  : 		bLastQualified = pCityEspionage->HasReachedGoal(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	mov	BYTE PTR _bLastQualified$[ebp], al

; 310  : 		pCityEspionage->Process(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::Process

; 311  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN69@ProcessSpy

; 312  : 		{
; 313  : 			if(GET_PLAYER(eCityOwner).isMinorCiv())

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234312[ebp], edx
	mov	ecx, DWORD PTR $T234312[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN68@ProcessSpy

; 314  : 			{
; 315  : 				pSpy->m_eSpyState = SPY_STATE_RIG_ELECTION;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+16], 4

; 316  : 				pCityEspionage->ResetProgress(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 317  : 				int iRate = CalcPerTurn(SPY_STATE_RIG_ELECTION, pCity, uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222424[ebp], eax

; 318  : 				int iGoal = CalcRequired(SPY_STATE_RIG_ELECTION, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222425[ebp], eax

; 319  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	ecx, DWORD PTR _iGoal$222425[ebp]
	push	ecx
	mov	edx, DWORD PTR _iRate$222424[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity

; 320  : 				pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	ecx, DWORD PTR _iRate$222424[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress

; 321  : 			}
; 322  : 			else

	jmp	$LN69@ProcessSpy
$LN68@ProcessSpy:

; 323  : 			{
; 324  : 				BuildStealableTechList(eCityOwner);

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 325  : 				// moved rate out here to set the potential
; 326  : 				int iBasePotentialRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, -1);

	push	-1
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iBasePotentialRate$222427[ebp], eax

; 327  : 				pCityEspionage->SetLastBasePotential(ePlayer, iBasePotentialRate);

	mov	edx, DWORD PTR _iBasePotentialRate$222427[ebp]
	push	edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastBasePotential

; 328  : 
; 329  : 				if(m_aaPlayerStealableTechList[eCityOwner].size() > 0)

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T234316[ebp], ecx
	mov	eax, DWORD PTR $T234316[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234320[ebp], ecx
	cmp	DWORD PTR $T234320[ebp], 0
	jbe	$LN66@ProcessSpy

; 330  : 				{
; 331  : 					// TODO: need to proclaim surveillance somehow
; 332  : 					pSpy->m_eSpyState = SPY_STATE_GATHERING_INTEL;

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+16], 3

; 333  : 					pCityEspionage->ResetProgress(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 334  : 					int iPotentialRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iPotentialRate$222429[ebp], eax

; 335  : 					int iGoal = CalcRequired(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222430[ebp], eax

; 336  : 					pCityEspionage->SetActivity(ePlayer, 0, iPotentialRate, iGoal);

	mov	edx, DWORD PTR _iGoal$222430[ebp]
	push	edx
	mov	eax, DWORD PTR _iPotentialRate$222429[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity

; 337  : 					pCityEspionage->SetLastProgress(ePlayer, iPotentialRate);

	mov	edx, DWORD PTR _iPotentialRate$222429[ebp]
	push	edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress

; 338  : 					pCityEspionage->SetLastPotential(ePlayer, iPotentialRate);

	mov	ecx, DWORD PTR _iPotentialRate$222429[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastPotential

; 339  : 				}
; 340  : 				else

	jmp	$LN65@ProcessSpy
$LN66@ProcessSpy:

; 341  : 				{
; 342  : 					// if this is the first time they crossed the threshold
; 343  : 					if(!bLastQualified)

	movzx	eax, BYTE PTR _bLastQualified$[ebp]
	test	eax, eax
	jne	$LN64@ProcessSpy

; 344  : 					{
; 345  : 						CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222433[ebp], eax

; 346  : 						if(pNotifications)

	cmp	DWORD PTR _pNotifications$222433[ebp], 0
	je	$LN64@ProcessSpy

; 347  : 						{
; 348  : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S");

	push	OFFSET ??_C@_0CL@NCDINLIE@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
	lea	edx, DWORD PTR _strSummary$222435[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 349  : 							strSummary << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234324[ebp], eax
	mov	ecx, DWORD PTR $T234324[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234149[ebp], eax
	lea	ecx, DWORD PTR $T234149[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$222435[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 350  : 							Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH");

	push	OFFSET ??_C@_0CJ@BAAFJABO@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
	lea	eax, DWORD PTR _strNotification$222444[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 351  : 							strNotification << GetSpyRankName(pSpy->m_eRank);;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T234150[ebp], eax
	lea	eax, DWORD PTR $T234150[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222444[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 352  : 							strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234151[ebp], eax
	lea	edx, DWORD PTR $T234151[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$222444[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 353  : 							strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234328[ebp], ecx
	mov	ecx, DWORD PTR $T234328[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234152[ebp], eax
	lea	edx, DWORD PTR $T234152[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$222444[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 354  : 							pNotifications->Add(NOTIFICATION_SPY_CANT_STEAL_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222435[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222444[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	240697813				; 0e58c1d5H
	mov	ecx, DWORD PTR _pNotifications$222433[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 355  : 						}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strNotification$222444[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$222435[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN64@ProcessSpy:

; 356  : 					}
; 357  : 					int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222450[ebp], eax

; 358  : 					pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	eax, DWORD PTR _iRate$222450[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress

; 359  : 					pCityEspionage->SetLastPotential(ePlayer, -1); // set the last potential back to zero so that 

	push	-1
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastPotential

; 360  : 					pSpy->m_bEvaluateReassignment = true; // flag to re-evaluate because we can't steal

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	BYTE PTR [eax+25], 1

; 361  : 					if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN65@ProcessSpy

; 362  : 					{
; 363  : 						CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222452[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 364  : 						strMsg.Format("Re-eval: can't steal research, %d,", uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	OFFSET ??_C@_0CD@ECMMHFBE@Re?9eval?3?5can?8t?5steal?5research?0?5?$CF@
	lea	eax, DWORD PTR _strMsg$222452[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 365  : 						strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T234153[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv281[ebp], eax
	mov	edx, DWORD PTR tv281[ebp]
	mov	DWORD PTR tv1640[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv1640[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222452[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T234153[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 366  : 						LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222452[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 367  : 					}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222452[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN65@ProcessSpy:

; 368  : 
; 369  : 				}
; 370  : 				UncoverIntrigue(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue
$LN69@ProcessSpy:

; 371  : 			}
; 372  : 		}
; 373  : 		break;

	jmp	$LN80@ProcessSpy
$LN61@ProcessSpy:

; 374  : 	case SPY_STATE_GATHERING_INTEL:
; 375  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 376  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN60@ProcessSpy

; 377  : 		{
; 378  : 			return;

	jmp	$LN84@ProcessSpy
$LN60@ProcessSpy:

; 379  : 		}
; 380  : 		BuildStealableTechList(eCityOwner);

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 381  : 		pCityEspionage->Process(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::Process

; 382  : 		// if the rate is too low, reassign the spy
; 383  : 		if (pCityEspionage->m_aiRate[m_pPlayer->GetID()] < 100)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T234349[ebp], ecx
	mov	edx, DWORD PTR $T234349[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [eax+edx*4+180], 100		; 00000064H
	jge	$LN59@ProcessSpy

; 384  : 		{
; 385  : 			pSpy->m_bEvaluateReassignment = true;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	BYTE PTR [ecx+25], 1

; 386  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN59@ProcessSpy

; 387  : 			{
; 388  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222459[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 389  : 				strMsg.Format("Re-eval: potential too low, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	OFFSET ??_C@_0CA@BCANPJFI@Re?9eval?3?5potential?5too?5low?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222459[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 390  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T234154[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv277[ebp], eax
	mov	eax, DWORD PTR tv277[ebp]
	mov	DWORD PTR tv1643[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv1643[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222459[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T234154[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 391  : 				LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222459[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 392  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222459[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN59@ProcessSpy:

; 393  : 		}
; 394  : 
; 395  : 		if(m_aaPlayerStealableTechList[eCityOwner].size() == 0)

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+264]
	mov	DWORD PTR $T234368[ebp], eax
	mov	edx, DWORD PTR $T234368[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234372[ebp], eax
	cmp	DWORD PTR $T234372[ebp], 0
	jne	$LN57@ProcessSpy

; 396  : 		{
; 397  : 			// set the spy back to surveillance mode
; 398  : 			pCityEspionage->ResetProgress(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 399  : 			pSpy->m_eSpyState = SPY_STATE_SURVEILLANCE;

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+16], 2

; 400  : 			pSpy->m_bEvaluateReassignment = true; // flag for reassignment

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	BYTE PTR [eax+25], 1

; 401  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN56@ProcessSpy

; 402  : 			{
; 403  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222464[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 404  : 				strMsg.Format("Re-eval: m_aaPlayerStealableTechList[eCityOwner].size() == 0, %d,", uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	OFFSET ??_C@_0EC@CFADMBFJ@Re?9eval?3?5m_aaPlayerStealableTech@
	lea	eax, DWORD PTR _strMsg$222464[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 405  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T234155[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv2049[ebp], eax
	mov	edx, DWORD PTR tv2049[ebp]
	mov	DWORD PTR tv1646[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR tv1646[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222464[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T234155[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 406  : 				LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222464[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 407  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222464[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN56@ProcessSpy:

; 408  : 
; 409  : 			int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222467[ebp], eax

; 410  : 			int iGoal = CalcRequired(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222468[ebp], eax

; 411  : 			int iAmount = iGoal; // put the player back at surveillance levels

	mov	eax, DWORD PTR _iGoal$222468[ebp]
	mov	DWORD PTR _iAmount$222469[ebp], eax

; 412  : 			pCityEspionage->SetActivity(ePlayer, iAmount, iRate, iGoal);

	mov	ecx, DWORD PTR _iGoal$222468[ebp]
	push	ecx
	mov	edx, DWORD PTR _iRate$222467[ebp]
	push	edx
	mov	eax, DWORD PTR _iAmount$222469[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity

; 413  : 
; 414  : 			// set last progress rate
; 415  : 			iRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222467[ebp], eax

; 416  : 			pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	ecx, DWORD PTR _iRate$222467[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress

; 417  : 
; 418  : 			// can't steal any techs from this civ
; 419  : 			m_aiNumTechsToStealList[eCityOwner] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 420  : 
; 421  : 			CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222470[ebp], eax

; 422  : 			if(pNotifications)

	cmp	DWORD PTR _pNotifications$222470[ebp], 0
	je	$LN55@ProcessSpy

; 423  : 			{
; 424  : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S");

	push	OFFSET ??_C@_0CL@NCDINLIE@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
	lea	ecx, DWORD PTR _strSummary$222472[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 8

; 425  : 				strSummary << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234391[ebp], edx
	mov	ecx, DWORD PTR $T234391[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234156[ebp], eax
	lea	eax, DWORD PTR $T234156[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$222472[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 426  : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH");

	push	OFFSET ??_C@_0CJ@BAAFJABO@TXT_KEY_NOTIFICATION_SPY_CANT_ST@
	lea	edx, DWORD PTR _strNotification$222475[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 427  : 				strNotification << GetSpyRankName(pSpy->m_eRank);;

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T234157[ebp], eax
	lea	edx, DWORD PTR $T234157[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$222475[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 428  : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234158[ebp], eax
	lea	ecx, DWORD PTR $T234158[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$222475[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 429  : 				strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234395[ebp], eax
	mov	ecx, DWORD PTR $T234395[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234159[ebp], eax
	lea	ecx, DWORD PTR $T234159[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$222475[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 430  : 				pNotifications->Add(NOTIFICATION_SPY_CANT_STEAL_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222472[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222475[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	240697813				; 0e58c1d5H
	mov	ecx, DWORD PTR _pNotifications$222470[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 431  : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _strNotification$222475[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$222472[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN55@ProcessSpy:

; 432  : 		}

	jmp	$LN54@ProcessSpy
$LN57@ProcessSpy:

; 433  : 		else if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN54@ProcessSpy

; 434  : 		{
; 435  : 			HeistLocation kHeistLocation;
; 436  : 			kHeistLocation.m_iX = pCity->getX();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T234404[ebp], eax
	mov	ecx, DWORD PTR $T234404[ebp]
	mov	DWORD PTR _kHeistLocation$222482[ebp], ecx

; 437  : 			kHeistLocation.m_iY = pCity->getY();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR $T234413[ebp], eax
	mov	ecx, DWORD PTR $T234413[ebp]
	mov	DWORD PTR _kHeistLocation$222482[ebp+4], ecx

; 438  : 			m_aHeistLocations[eCityOwner].push_back(kHeistLocation);

	lea	edx, DWORD PTR _kHeistLocation$222482[ebp]
	push	edx
	mov	eax, DWORD PTR _eCityOwner$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax+912]
	call	?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back

; 439  : 
; 440  : 			int iSpyResult;
; 441  : 			if(pCityEspionage->HasCounterSpy())

	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasCounterSpy@CvCityEspionage@@QAE_NXZ	; CvCityEspionage::HasCounterSpy
	movzx	edx, al
	test	edx, edx
	je	$LN52@ProcessSpy

; 442  : 			{
; 443  : 				iSpyResult = GC.getGame().getJonRandNum(300, "Random roll for the result of a spy mission with a counterspy in the city");

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234455[ebp], eax
	push	OFFSET ??_C@_0EK@GDHGNKG@Random?5roll?5for?5the?5result?5of?5a?5@
	push	300					; 0000012cH
	mov	ecx, DWORD PTR $T234455[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 444  : 				int iCounterspyIndex = GET_PLAYER(eCityOwner).GetEspionage()->GetSpyIndexInCity(pCity);

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234459[ebp], ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T234459[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	mov	DWORD PTR _iCounterspyIndex$222486[ebp], eax

; 445  : 				iSpyResult += GET_PLAYER(eCityOwner).GetEspionage()->m_aSpyList[iCounterspyIndex].m_eRank * 30;

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234463[ebp], eax
	mov	ecx, DWORD PTR $T234463[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	add	eax, 4
	mov	DWORD PTR $T234467[ebp], eax
	mov	ecx, DWORD PTR _iCounterspyIndex$222486[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR $T234467[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+ecx+12]
	imul	ecx, 30					; 0000001eH
	add	ecx, DWORD PTR _iSpyResult$222483[ebp]
	mov	DWORD PTR _iSpyResult$222483[ebp], ecx

; 446  : 				iSpyResult *= (100 + GET_PLAYER(pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_CATCH_SPIES_MODIFIER));

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T234476[ebp], eax
	mov	ecx, DWORD PTR $T234476[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234480[ebp], ecx
	push	21					; 00000015H
	mov	ecx, DWORD PTR $T234480[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iSpyResult$222483[ebp]
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 447  : 				iSpyResult /= 100;

	mov	eax, DWORD PTR _iSpyResult$222483[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 448  : 				if(iSpyResult < 100)

	cmp	DWORD PTR _iSpyResult$222483[ebp], 100	; 00000064H
	jge	SHORT $LN51@ProcessSpy

; 449  : 				{
; 450  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_DETECTED);

	push	1
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult
	jmp	$LN50@ProcessSpy
$LN51@ProcessSpy:

; 451  : 				}
; 452  : 				else if(iSpyResult < 200)

	cmp	DWORD PTR _iSpyResult$222483[ebp], 200	; 000000c8H
	jge	SHORT $LN49@ProcessSpy

; 453  : 				{
; 454  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_IDENTIFIED);

	push	2
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult

; 455  : 				}
; 456  : 				else

	jmp	$LN50@ProcessSpy
$LN49@ProcessSpy:

; 457  : 				{
; 458  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_KILLED);

	push	3
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult

; 459  : 
; 460  : 					CvPlayerAI& kCityOwner = GET_PLAYER(eCityOwner);

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kCityOwner$222491[ebp], edx

; 461  : 					CvPlayerAI& kSpyOwner = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kSpyOwner$222492[ebp], eax

; 462  : 
; 463  : 					if(	strcmp(kCityOwner.getCivilizationTypeKey(), "CIVILIZATION_RUSSIA") == 0 &&
; 464  : 						strcmp(kSpyOwner.getCivilizationTypeKey(), "CIVILIZATION_ENGLAND") == 0)

	mov	DWORD PTR tv2401[ebp], OFFSET ??_C@_0BE@EANEAGMK@CIVILIZATION_RUSSIA?$AA@
	mov	ecx, DWORD PTR _kCityOwner$222491[ebp]
	call	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationTypeKey
	mov	DWORD PTR tv2400[ebp], eax
$LL433@ProcessSpy:
	mov	ecx, DWORD PTR tv2400[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv2404[ebp], dl
	mov	eax, DWORD PTR tv2401[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN434@ProcessSpy
	cmp	BYTE PTR tv2404[ebp], 0
	je	SHORT $LN435@ProcessSpy
	mov	ecx, DWORD PTR tv2400[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv2411[ebp], dl
	mov	eax, DWORD PTR tv2401[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN434@ProcessSpy
	add	DWORD PTR tv2400[ebp], 2
	add	DWORD PTR tv2401[ebp], 2
	cmp	BYTE PTR tv2411[ebp], 0
	jne	SHORT $LL433@ProcessSpy
$LN435@ProcessSpy:
	mov	DWORD PTR tv2416[ebp], 0
	jmp	SHORT $LN436@ProcessSpy
$LN434@ProcessSpy:
	sbb	ecx, ecx
	sbb	ecx, -1
	mov	DWORD PTR tv2416[ebp], ecx
$LN436@ProcessSpy:
	mov	edx, DWORD PTR tv2416[ebp]
	mov	DWORD PTR tv717[ebp], edx
	cmp	DWORD PTR tv717[ebp], 0
	jne	$LN50@ProcessSpy
	mov	DWORD PTR tv2423[ebp], OFFSET ??_C@_0BF@EIFMKKKD@CIVILIZATION_ENGLAND?$AA@
	mov	ecx, DWORD PTR _kSpyOwner$222492[ebp]
	call	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationTypeKey
	mov	DWORD PTR tv2422[ebp], eax
$LL437@ProcessSpy:
	mov	eax, DWORD PTR tv2422[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv2426[ebp], cl
	mov	edx, DWORD PTR tv2423[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN438@ProcessSpy
	cmp	BYTE PTR tv2426[ebp], 0
	je	SHORT $LN439@ProcessSpy
	mov	eax, DWORD PTR tv2422[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv2433[ebp], cl
	mov	edx, DWORD PTR tv2423[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN438@ProcessSpy
	add	DWORD PTR tv2422[ebp], 2
	add	DWORD PTR tv2423[ebp], 2
	cmp	BYTE PTR tv2433[ebp], 0
	jne	SHORT $LL437@ProcessSpy
$LN439@ProcessSpy:
	mov	DWORD PTR tv2438[ebp], 0
	jmp	SHORT $LN440@ProcessSpy
$LN438@ProcessSpy:
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv2438[ebp], eax
$LN440@ProcessSpy:
	mov	ecx, DWORD PTR tv2438[ebp]
	mov	DWORD PTR tv728[ebp], ecx
	cmp	DWORD PTR tv728[ebp], 0
	jne	$LN50@ProcessSpy

; 465  : 					{
; 466  : 						//Do not trigger achievement if we're in the Smokey Skies scenario.
; 467  : 						bool bUsingXP1Scenario3 = gDLL->IsModActivated(CIV5_XP1_SCENARIO3_MODID);

	mov	edx, DWORD PTR $T234490[ebp]
	mov	DWORD PTR tv737[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv737[ebp], eax
	mov	ecx, DWORD PTR _CIV5_XP1_SCENARIO3_MODID
	push	ecx
	mov	edx, DWORD PTR tv737[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv737[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	mov	BYTE PTR _bUsingXP1Scenario3$222496[ebp], al

; 468  : 						if(!bUsingXP1Scenario3)

	movzx	eax, BYTE PTR _bUsingXP1Scenario3$222496[ebp]
	test	eax, eax
	jne	SHORT $LN50@ProcessSpy

; 469  : 						{
; 470  : 							if(eCityOwner == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234494[ebp], ecx
	mov	ecx, DWORD PTR $T234494[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR _eCityOwner$[ebp], eax
	jne	SHORT $LN50@ProcessSpy

; 471  : 								gDLL->UnlockAchievement(ACHIEVEMENT_XP1_25);

	mov	edx, DWORD PTR $T234498[ebp]
	mov	DWORD PTR tv756[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv756[ebp], eax
	push	215					; 000000d7H
	mov	ecx, DWORD PTR tv756[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv756[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN50@ProcessSpy:

; 472  : 						}
; 473  : 					}
; 474  : 				}
; 475  : 			}
; 476  : 			else

	jmp	$LN44@ProcessSpy
$LN52@ProcessSpy:

; 477  : 			{
; 478  : 				iSpyResult = GC.getGame().getJonRandNum(300, "Random roll for the result of a spying mission without a counterspy in the city");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234502[ebp], ecx
	push	OFFSET ??_C@_0FA@CNNLFJI@Random?5roll?5for?5the?5result?5of?5a?5@
	push	300					; 0000012cH
	mov	ecx, DWORD PTR $T234502[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 479  : 				iSpyResult *= (100 + GET_PLAYER(pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_CATCH_SPIES_MODIFIER));

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T234511[ebp], eax
	mov	ecx, DWORD PTR $T234511[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234515[ebp], ecx
	push	21					; 00000015H
	mov	ecx, DWORD PTR $T234515[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iSpyResult$222483[ebp]
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 480  : 				iSpyResult /= 100;

	mov	eax, DWORD PTR _iSpyResult$222483[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iSpyResult$222483[ebp], eax

; 481  : 				if(iSpyResult < 100)

	cmp	DWORD PTR _iSpyResult$222483[ebp], 100	; 00000064H
	jge	SHORT $LN43@ProcessSpy

; 482  : 				{
; 483  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_UNDETECTED);

	push	0
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult
	jmp	SHORT $LN44@ProcessSpy
$LN43@ProcessSpy:

; 484  : 				}
; 485  : 				else if(iSpyResult < 200)

	cmp	DWORD PTR _iSpyResult$222483[ebp], 200	; 000000c8H
	jge	SHORT $LN41@ProcessSpy

; 486  : 				{
; 487  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_DETECTED);

	push	1
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult

; 488  : 				}
; 489  : 				else

	jmp	SHORT $LN44@ProcessSpy
$LN41@ProcessSpy:

; 490  : 				{
; 491  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_IDENTIFIED);

	push	2
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult
$LN44@ProcessSpy:

; 492  : 				}
; 493  : 			}
; 494  : 
; 495  : 			CvPlayerEspionage* pDefendingPlayerEspionage = GET_PLAYER(eCityOwner).GetEspionage();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234519[ebp], edx
	mov	ecx, DWORD PTR $T234519[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pDefendingPlayerEspionage$222505[ebp], eax

; 496  : 			CvAssertMsg(pDefendingPlayerEspionage, "Defending player espionage is null");
; 497  : 			if(pDefendingPlayerEspionage)

	cmp	DWORD PTR _pDefendingPlayerEspionage$222505[ebp], 0
	je	SHORT $LN39@ProcessSpy

; 498  : 			{
; 499  : 				pDefendingPlayerEspionage->AddSpyMessage(pCity->getX(), pCity->getY(), m_pPlayer->GetID(), pCityEspionage->m_aiResult[ePlayer], NO_TECH);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T234531[ebp], edx
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T234540[ebp], ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T234549[ebp], eax
	push	-1
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+620]
	push	eax
	mov	ecx, DWORD PTR $T234531[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234540[ebp]
	push	edx
	mov	eax, DWORD PTR $T234549[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefendingPlayerEspionage$222505[ebp]
	call	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
$LN39@ProcessSpy:

; 500  : 			}
; 501  : 
; 502  : 			CvDiplomacyAI* pDefendingPlayerDiploAI = GET_PLAYER(eCityOwner).GetDiplomacyAI();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234553[ebp], ecx
	mov	ecx, DWORD PTR $T234553[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDefendingPlayerDiploAI$222507[ebp], eax

; 503  : 			CvAssertMsg(pDefendingPlayerDiploAI, "Defending player diplo AI is null");
; 504  : 			if(pDefendingPlayerDiploAI)

	cmp	DWORD PTR _pDefendingPlayerDiploAI$222507[ebp], 0
	je	SHORT $LN295@ProcessSpy

; 505  : 			{
; 506  : 				if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_IDENTIFIED || pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_KILLED)

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [eax+edx*4+620], 2
	je	SHORT $LN36@ProcessSpy
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [edx+ecx*4+620], 3
	jne	SHORT $LN295@ProcessSpy
$LN36@ProcessSpy:

; 507  : 				{
; 508  : 					pDefendingPlayerDiploAI->ChangeNumTimesRobbedBy(ePlayer, 1);

	push	1
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefendingPlayerDiploAI$222507[ebp]
	call	?ChangeNumTimesRobbedBy@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNumTimesRobbedBy

; 509  : 				}
; 510  : 			}
; 511  : 
; 512  : 			// spy killed in action
; 513  : 			if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_KILLED)

$LN295@ProcessSpy:
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [edx+ecx*4+620], 3
	jne	$LN35@ProcessSpy

; 514  : 			{
; 515  : 				CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222512[ebp], eax

; 516  : 				if(pNotifications)

	cmp	DWORD PTR _pNotifications$222512[ebp], 0
	je	$LN34@ProcessSpy

; 517  : 				{
; 518  : 					Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_WAS_KILLED_S");

	push	OFFSET ??_C@_0CG@DBAGKGCH@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@
	lea	ecx, DWORD PTR _strSummary$222514[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 519  : 					strSummary << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234160[ebp], eax
	lea	edx, DWORD PTR $T234160[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$222514[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 520  : 					Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_WAS_KILLED");

	push	OFFSET ??_C@_0CE@OKPBKOE@TXT_KEY_NOTIFICATION_SPY_WAS_KIL@
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 521  : 					strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T234161[ebp], eax
	lea	ecx, DWORD PTR $T234161[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$222518[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 522  : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234162[ebp], eax
	lea	eax, DWORD PTR $T234162[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 523  : 					strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234566[ebp], edx
	mov	ecx, DWORD PTR $T234566[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234163[ebp], eax
	lea	eax, DWORD PTR $T234163[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 524  : 					strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T234164[ebp], eax
	lea	edx, DWORD PTR $T234164[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$222518[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 525  : 					pNotifications->Add(NOTIFICATION_SPY_WAS_KILLED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222514[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	345927241				; 149e6e49H
	mov	ecx, DWORD PTR _pNotifications$222512[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 526  : 
; 527  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$222514[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN34@ProcessSpy:

; 528  : 
; 529  : 				CvEspionageAI* pEspionageAI = m_pPlayer->GetEspionageAI();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pEspionageAI$222525[ebp], eax

; 530  : 				CvAssertMsg(pEspionageAI, "pEspionageAI is null");
; 531  : 				if(pEspionageAI)

	cmp	DWORD PTR _pEspionageAI$222525[ebp], 0
	je	SHORT $LN33@ProcessSpy

; 532  : 				{
; 533  : 					pEspionageAI->m_aiTurnLastSpyDied[eCityOwner] = GC.getGame().getGameTurn();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234570[ebp], edx
	mov	eax, DWORD PTR _pEspionageAI$222525[ebp]
	mov	ecx, DWORD PTR [eax+628]
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T234574[ebp], eax
	mov	ecx, DWORD PTR $T234570[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T234574[ebp]
	mov	DWORD PTR [ecx], eax

; 534  : 					pEspionageAI->m_aiNumSpiesDied[eCityOwner]++;

	mov	edx, DWORD PTR _pEspionageAI$222525[ebp]
	mov	eax, DWORD PTR [edx+316]
	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv968[ebp], edx
	mov	eax, DWORD PTR tv968[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv968[ebp]
	mov	DWORD PTR [edx], ecx
$LN33@ProcessSpy:

; 535  : 				}
; 536  : 				CvEspionageAI* pDefenderEspionageAI = GET_PLAYER(eCityOwner).GetEspionageAI();

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234581[ebp], eax
	mov	ecx, DWORD PTR $T234581[ebp]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pDefenderEspionageAI$222527[ebp], eax

; 537  : 				CvAssertMsg(pDefenderEspionageAI, "pDefenderEspionageAI is null");
; 538  : 				if(pDefenderEspionageAI)

	cmp	DWORD PTR _pDefenderEspionageAI$222527[ebp], 0
	je	$LN321@ProcessSpy

; 539  : 				{
; 540  : 					pDefenderEspionageAI->m_aiTurnLastSpyKilled[m_pPlayer->GetID()] = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234585[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T234594[ebp], ecx
	mov	edx, DWORD PTR _pDefenderEspionageAI$222527[ebp]
	mov	eax, DWORD PTR [edx+524]
	mov	ecx, DWORD PTR $T234594[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T234598[ebp], edx
	mov	ecx, DWORD PTR $T234585[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T234598[ebp]
	mov	DWORD PTR [ecx], eax

; 541  : 					pDefenderEspionageAI->m_aiNumSpiesKilled[m_pPlayer->GetID()]++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T234607[ebp], ecx
	mov	edx, DWORD PTR _pDefenderEspionageAI$222527[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR $T234607[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv1005[ebp], edx
	mov	eax, DWORD PTR tv1005[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv1005[ebp]
	mov	DWORD PTR [edx], ecx

; 542  : 				}
; 543  : 
; 544  : 				// level up the defending spy
; 545  : 				int iDefendingSpy = pCityEspionage->m_aiSpyAssignment[eCityOwner];

$LN321@ProcessSpy:
	mov	eax, DWORD PTR _eCityOwner$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _iDefendingSpy$222529[ebp], edx

; 546  : 				if(pDefendingPlayerEspionage)

	cmp	DWORD PTR _pDefendingPlayerEspionage$222505[ebp], 0
	je	SHORT $LN31@ProcessSpy

; 547  : 				{
; 548  : 					CvAssertMsg(iDefendingSpy >= 0, "No defending spy. This is ok if debugging and killing a spy without having a defending spy present, but should not occur when playing the game normally.");
; 549  : 					if(iDefendingSpy >= 0)

	cmp	DWORD PTR _iDefendingSpy$222529[ebp], 0
	jl	SHORT $LN31@ProcessSpy

; 550  : 					{
; 551  : 						pDefendingPlayerEspionage->LevelUpSpy(iDefendingSpy);

	mov	eax, DWORD PTR _iDefendingSpy$222529[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDefendingPlayerEspionage$222505[ebp]
	call	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::LevelUpSpy
$LN31@ProcessSpy:

; 552  : 					}
; 553  : 				}
; 554  : 
; 555  : 				// kill spy off
; 556  : 				ExtractSpyFromCity(uiSpyIndex); // move the dead body out so that someone else can move in

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity

; 557  : 				pSpy->m_eSpyState = SPY_STATE_DEAD; // have to official kill him after the extraction

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+16], 8

; 558  : 
; 559  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN29@ProcessSpy

; 560  : 				{
; 561  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 562  : 					strMsg.Format("Killed, %d,", uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@CIJAGPKD@Killed?0?5?$CFd?0?$AA@
	lea	edx, DWORD PTR _strMsg$222533[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 563  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234621[ebp], eax
	mov	edx, DWORD PTR $T234621[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T234165[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv854[ebp], eax
	mov	eax, DWORD PTR tv854[ebp]
	mov	DWORD PTR tv1653[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR tv1653[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T234165[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 564  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 565  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 566  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 567  : 					strMsg += GET_PLAYER(eCityOwner).getCivilizationShortDescription();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234629[ebp], edx
	mov	ecx, DWORD PTR $T234629[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 568  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 569  : 					strMsg += pCity->getName();

	lea	eax, DWORD PTR $T234166[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv850[ebp], eax
	mov	ecx, DWORD PTR tv850[ebp]
	mov	DWORD PTR tv1655[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR tv1655[ebp]
	push	edx
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T234166[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 570  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 571  : 					strMsg += "Killed";

	push	OFFSET ??_C@_06GJNLCKAP@Killed?$AA@
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 572  : 					LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$222533[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 573  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN29@ProcessSpy:

; 574  : 			}
; 575  : 			else // spy successfully completed mission

	jmp	$LN28@ProcessSpy
$LN35@ProcessSpy:

; 576  : 			{
; 577  : 				pSpy->m_bEvaluateReassignment = true; // flag spy for reassignment

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	BYTE PTR [ecx+25], 1

; 578  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN27@ProcessSpy

; 579  : 				{
; 580  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222540[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 581  : 					strMsg.Format("Re-eval: spy completed mission, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@PNEMGBL@Re?9eval?3?5spy?5completed?5mission?0?5@
	lea	ecx, DWORD PTR _strMsg$222540[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 582  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T234167[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv560[ebp], eax
	mov	eax, DWORD PTR tv560[ebp]
	mov	DWORD PTR tv1658[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv1658[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222540[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T234167[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 583  : 					LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222540[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 584  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222540[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN27@ProcessSpy:

; 585  : 				int iCityOwner = (int)eCityOwner;

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	mov	DWORD PTR _iCityOwner$222543[ebp], eax

; 586  : 				m_aiNumTechsToStealList[iCityOwner] = m_aiNumTechsToStealList[iCityOwner] + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	mov	eax, DWORD PTR _iCityOwner$222543[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T234653[ebp], ecx
	mov	edx, DWORD PTR $T234653[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	mov	ecx, DWORD PTR _iCityOwner$222543[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 587  : 				pCityEspionage->ResetProgress(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 588  : 				int iRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222545[ebp], eax

; 589  : 				int iGoal = CalcRequired(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222546[ebp], eax

; 590  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	ecx, DWORD PTR _iGoal$222546[ebp]
	push	ecx
	mov	edx, DWORD PTR _iRate$222545[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity

; 591  : 				pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	ecx, DWORD PTR _iRate$222545[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress

; 592  : 				pCityEspionage->m_aiNumTimesCityRobbed[eCityOwner]++;

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+708]
	mov	DWORD PTR tv1199[ebp], edx
	mov	eax, DWORD PTR tv1199[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv1199[ebp]
	mov	DWORD PTR [edx], ecx

; 593  : 
; 594  : 				if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_IDENTIFIED)

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [ecx+eax*4+620], 2
	jne	$LN372@ProcessSpy

; 595  : 				{
; 596  : 					CvEspionageAI* pDefenderEspionageAI = GET_PLAYER(eCityOwner).GetEspionageAI();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234666[ebp], edx
	mov	ecx, DWORD PTR $T234666[ebp]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pDefenderEspionageAI$222548[ebp], eax

; 597  : 					CvAssertMsg(pDefenderEspionageAI, "pDefenderEspionageAI is null");
; 598  : 					if(pDefenderEspionageAI)

	cmp	DWORD PTR _pDefenderEspionageAI$222548[ebp], 0
	je	$LN372@ProcessSpy

; 599  : 					{
; 600  : 						pDefenderEspionageAI->m_aiTurnLastSpyCaught[m_pPlayer->GetID()] = GC.getGame().getGameTurn();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234670[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T234679[ebp], eax
	mov	ecx, DWORD PTR _pDefenderEspionageAI$222548[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	eax, DWORD PTR $T234679[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T234683[ebp], ecx
	mov	ecx, DWORD PTR $T234670[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	edx, DWORD PTR $T234683[ebp]
	mov	DWORD PTR [edx], eax

; 601  : 						pDefenderEspionageAI->m_aiNumSpiesCaught[m_pPlayer->GetID()]++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T234692[ebp], edx
	mov	eax, DWORD PTR _pDefenderEspionageAI$222548[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR $T234692[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR tv1241[ebp], eax
	mov	ecx, DWORD PTR tv1241[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR tv1241[ebp]
	mov	DWORD PTR [eax], edx

; 602  : 					}
; 603  : 				}
; 604  : 
; 605  : 				// this check was added because m_aiNumTechsToStealList was getting out of whack somehow and this is a check to prevent the UI from going haywire
; 606  : 				CvAssertMsg(m_aiNumTechsToStealList[iCityOwner] > 0, "m_aiNumTechsToStealList[iCityOwner] <= 0, which shouldn't happen after you succeed at stealing");
; 607  : 				if (m_aiNumTechsToStealList[iCityOwner] > 0)

$LN372@ProcessSpy:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	mov	eax, DWORD PTR _iCityOwner$222543[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	jle	$LN381@ProcessSpy

; 608  : 				{
; 609  : 					CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222551[ebp], eax

; 610  : 					if(pNotifications)

	cmp	DWORD PTR _pNotifications$222551[ebp], 0
	je	$LN23@ProcessSpy

; 611  : 					{
; 612  : 						Localization::String strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_STEAL_TECH_S");

	push	OFFSET ??_C@_0CG@HCDNHFJC@TXT_KEY_NOTIFICATION_SPY_STEAL_T@
	lea	edx, DWORD PTR $T234168[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv556[ebp], eax
	mov	eax, DWORD PTR tv556[ebp]
	mov	DWORD PTR $T234702[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR $T234702[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234703[ebp], eax
	mov	ecx, DWORD PTR $T234703[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$222553[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T234168[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 613  : 						Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STEAL_TECH");

	push	OFFSET ??_C@_0CE@FMJCEEFH@TXT_KEY_NOTIFICATION_SPY_STEAL_T@
	lea	edx, DWORD PTR _strNotification$222556[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H

; 614  : 						strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T234169[ebp], eax
	lea	edx, DWORD PTR $T234169[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$222556[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 615  : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234170[ebp], eax
	lea	ecx, DWORD PTR $T234170[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$222556[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 616  : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T234171[ebp], eax
	lea	eax, DWORD PTR $T234171[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222556[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 617  : 						strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234711[ebp], edx
	mov	ecx, DWORD PTR $T234711[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T234172[ebp], eax
	lea	eax, DWORD PTR $T234172[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222556[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 618  : 						pNotifications->Add(NOTIFICATION_SPY_STOLE_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, eCityOwner);

	push	-1
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222553[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222556[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-1774532806				; 963ac73aH
	mov	ecx, DWORD PTR _pNotifications$222551[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 619  : 					}

	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _strNotification$222556[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$222553[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN23@ProcessSpy:

; 620  : 				}
; 621  : 				else

	jmp	SHORT $LN385@ProcessSpy

; 622  : 				{
; 623  : 					m_aiNumTechsToStealList[iCityOwner] = 0;

$LN381@ProcessSpy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _iCityOwner$222543[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 624  : 				}
; 625  : 
; 626  : 				//Achievements!
; 627  : 				if(m_pPlayer->GetID() == GC.getGame().getActivePlayer())

$LN385@ProcessSpy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T234723[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234727[ebp], eax
	mov	ecx, DWORD PTR $T234727[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T234723[ebp], eax
	jne	SHORT $LN21@ProcessSpy

; 628  : 				{
; 629  : 					gDLL->UnlockAchievement(ACHIEVEMENT_XP1_12);

	mov	ecx, DWORD PTR $T234731[ebp]
	mov	DWORD PTR tv1340[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv1340[ebp], edx
	push	202					; 000000caH
	mov	eax, DWORD PTR tv1340[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1340[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN21@ProcessSpy:

; 630  : 				}
; 631  : 
; 632  : 				LevelUpSpy(uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::LevelUpSpy

; 633  : 
; 634  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN28@ProcessSpy

; 635  : 				{
; 636  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H

; 637  : 					strMsg.Format("Stealing tech, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@FOINDKNF@Stealing?5tech?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 638  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234739[ebp], edx
	mov	ecx, DWORD PTR $T234739[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T234173[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv1267[ebp], eax
	mov	edx, DWORD PTR tv1267[ebp]
	mov	DWORD PTR tv1665[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	eax, DWORD PTR tv1665[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR $T234173[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 639  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 640  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 641  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 642  : 					strMsg += GET_PLAYER(eCityOwner).getCivilizationShortDescription();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234747[ebp], ecx
	mov	ecx, DWORD PTR $T234747[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 643  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 644  : 					strMsg += pCity->getName();

	lea	edx, DWORD PTR $T234174[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv1257[ebp], eax
	mov	eax, DWORD PTR tv1257[ebp]
	mov	DWORD PTR tv1667[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR tv1667[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR $T234174[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 645  : 					strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 646  : 					switch(pCityEspionage->m_aiResult[ePlayer])

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+620]
	mov	DWORD PTR tv1448[ebp], ecx
	cmp	DWORD PTR tv1448[ebp], 0
	je	SHORT $LN17@ProcessSpy
	cmp	DWORD PTR tv1448[ebp], 1
	je	SHORT $LN16@ProcessSpy
	cmp	DWORD PTR tv1448[ebp], 2
	je	SHORT $LN15@ProcessSpy
	jmp	SHORT $LN18@ProcessSpy
$LN17@ProcessSpy:

; 647  : 					{
; 648  : 					case SPY_RESULT_UNDETECTED:
; 649  : 						strMsg += "Undetected";

	push	OFFSET ??_C@_0L@POGHICCO@Undetected?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 650  : 						break;

	jmp	SHORT $LN18@ProcessSpy
$LN16@ProcessSpy:

; 651  : 					case SPY_RESULT_DETECTED:
; 652  : 						strMsg += "Detected";

	push	OFFSET ??_C@_08DHNPOAGK@Detected?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 653  : 						break;

	jmp	SHORT $LN18@ProcessSpy
$LN15@ProcessSpy:

; 654  : 					case SPY_RESULT_IDENTIFIED:
; 655  : 						strMsg += "Identified";

	push	OFFSET ??_C@_0L@BKOJIMLH@Identified?$AA@
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN18@ProcessSpy:

; 656  : 						break;
; 657  : 					}
; 658  : 					LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222566[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 659  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN28@ProcessSpy:

; 660  : 			}
; 661  : 			if(pSpy->m_eSpyState != SPY_STATE_DEAD)

	mov	eax, DWORD PTR _pSpy$[ebp]
	cmp	DWORD PTR [eax+16], 8
	je	SHORT $LN54@ProcessSpy

; 662  : 			{
; 663  : 				UncoverIntrigue(uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue
$LN54@ProcessSpy:

; 664  : 			}
; 665  : 		}
; 666  : 		break;

	jmp	$LN80@ProcessSpy
$LN13@ProcessSpy:

; 667  : 	case SPY_STATE_RIG_ELECTION:
; 668  : 		// resetting the value is done in MinorCivAI
; 669  : 		pCityEspionage->Process(ePlayer);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::Process

; 670  : 		break;

	jmp	$LN80@ProcessSpy

; 671  : 	case SPY_STATE_COUNTER_INTEL:
; 672  : 		break;

	jmp	$LN80@ProcessSpy
$LN11@ProcessSpy:

; 673  : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 674  : 		// spy is traveling to location
; 675  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 676  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN10@ProcessSpy

; 677  : 		{
; 678  : 			return;

	jmp	$LN84@ProcessSpy
$LN10@ProcessSpy:

; 679  : 		}
; 680  : 		// if the spy has completed travelling, move to location
; 681  : 		pCityEspionage->Process(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::Process

; 682  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@ProcessSpy

; 683  : 		{
; 684  : 			pCityEspionage->ResetProgress(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 685  : 			pSpy->m_eSpyState = SPY_STATE_SCHMOOZE;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+16], 7
$LN9@ProcessSpy:

; 686  : 		}
; 687  : 		break;

	jmp	$LN80@ProcessSpy
$LN8@ProcessSpy:

; 688  : 	case SPY_STATE_SCHMOOZE:
; 689  : 		if(pSpy->m_eSpyState != SPY_STATE_DEAD)

	mov	edx, DWORD PTR _pSpy$[ebp]
	cmp	DWORD PTR [edx+16], 8
	je	SHORT $LN7@ProcessSpy

; 690  : 		{
; 691  : 			UncoverIntrigue(uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue
$LN7@ProcessSpy:

; 692  : 		}
; 693  : 		break;

	jmp	$LN80@ProcessSpy
$LN6@ProcessSpy:

; 694  : 	case SPY_STATE_DEAD:
; 695  : 		pSpy->m_iReviveCounter++;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [eax+20], edx

; 696  : 		if(pSpy->m_iReviveCounter >= iSpyTurnsToRevive)

	mov	ecx, DWORD PTR _pSpy$[ebp]
	cmp	DWORD PTR [ecx+20], 5
	jl	$LN80@ProcessSpy

; 697  : 		{
; 698  : 			pSpy->m_iName = GetNextSpyName();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNextSpyName
	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx], eax

; 699  : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 700  : 			pSpy->m_eRank = (CvSpyRank)m_pPlayer->getCachedSpyStartingRank();
; 701  : #else
; 702  : 			pSpy->m_eRank = (CvSpyRank)m_pPlayer->GetStartingSpyRank();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetStartingSpyRank@CvPlayer@@QBEHXZ	; CvPlayer::GetStartingSpyRank
	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 703  : #endif
; 704  : 			pSpy->m_eSpyState = SPY_STATE_UNASSIGNED;

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+16], 0

; 705  : 			pSpy->m_iCityX = -1;

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [eax+4], -1

; 706  : 			pSpy->m_iCityY = -1;

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [ecx+8], -1

; 707  : 			pSpy->m_iReviveCounter = 0;

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	DWORD PTR [edx+20], 0

; 708  : 			pSpy->m_bEvaluateReassignment = true;

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	BYTE PTR [eax+25], 1

; 709  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@ProcessSpy

; 710  : 			{
; 711  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222592[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 24		; 00000018H

; 712  : 				strMsg.Format("Re-eval: spy killed, %d,", uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	OFFSET ??_C@_0BJ@CGEFKMBC@Re?9eval?3?5spy?5killed?0?5?$CFd?0?$AA@
	lea	eax, DWORD PTR _strMsg$222592[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 713  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T234175[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv2028[ebp], eax
	mov	edx, DWORD PTR tv2028[ebp]
	mov	DWORD PTR tv1670[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	eax, DWORD PTR tv1670[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222592[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR $T234175[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 714  : 				LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222592[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 715  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222592[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@ProcessSpy:

; 716  : 
; 717  : 			CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222595[ebp], eax

; 718  : 			if(pNotifications)

	cmp	DWORD PTR _pNotifications$222595[ebp], 0
	je	$LN3@ProcessSpy

; 719  : 			{
; 720  : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_REVIVED_S");

	push	OFFSET ??_C@_0CD@EPPMBCAM@TXT_KEY_NOTIFICATION_SPY_REVIVED@
	lea	eax, DWORD PTR _strSummary$222597[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 26		; 0000001aH

; 721  : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_REVIVED");

	push	OFFSET ??_C@_0CB@MCONFAMB@TXT_KEY_NOTIFICATION_SPY_REVIVED@
	lea	ecx, DWORD PTR _strNotification$222600[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH

; 722  : 				strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T234176[ebp], eax
	lea	ecx, DWORD PTR $T234176[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$222600[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 723  : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T234177[ebp], eax
	lea	eax, DWORD PTR $T234177[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$222600[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 724  : 				pNotifications->Add(NOTIFICATION_SPY_REPLACEMENT, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222597[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222600[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-1698732748				; 9abf6534H
	mov	ecx, DWORD PTR _pNotifications$222595[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 725  : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _strNotification$222600[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$222597[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN3@ProcessSpy:

; 726  : 
; 727  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN80@ProcessSpy

; 728  : 			{
; 729  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222606[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 28		; 0000001cH

; 730  : 				strMsg.Format("Respawned spy, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	OFFSET ??_C@_0BD@DHIBICGH@Respawned?5spy?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222606[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 731  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T234178[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv1551[ebp], eax
	mov	eax, DWORD PTR tv1551[ebp]
	mov	DWORD PTR tv1675[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	ecx, DWORD PTR tv1675[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222606[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR $T234178[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 732  : 				LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222606[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 733  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222606[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN80@ProcessSpy:

; 734  : 		}
; 735  : 		break;
; 736  : 	}
; 737  : 
; 738  : 	// if we just established surveillance in the city, turn the lights on
; 739  : #ifdef AUI_WARNING_FIXES
; 740  : 	if (HasEstablishedSurveillance(uiSpyIndex) && !bHadSurveillance && pCity)
; 741  : #else
; 742  : 	if(HasEstablishedSurveillance(uiSpyIndex) && !bHadSurveillance)

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN84@ProcessSpy
	movzx	edx, BYTE PTR _bHadSurveillance$[ebp]
	test	edx, edx
	jne	SHORT $LN84@ProcessSpy

; 743  : #endif
; 744  : 	{
; 745  : 		pCity->plot()->changeAdjacentSight(m_pPlayer->getTeam(), GC.getESPIONAGE_SURVEILLANCE_SIGHT_RANGE(), true, NO_INVISIBLE, NO_DIRECTION, false);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7948
	mov	DWORD PTR $T234786[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	DWORD PTR $T234795[ebp], edx
	mov	eax, DWORD PTR $T234795[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T234796[ebp], eax
	push	0
	push	-1
	push	-1
	push	1
	mov	edx, DWORD PTR $T234786[ebp]
	push	edx
	mov	eax, DWORD PTR $T234796[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z ; CvPlot::changeAdjacentSight
$LN84@ProcessSpy:

; 746  : 	}
; 747  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN442@ProcessSpy:
	DD	$LN79@ProcessSpy
	DD	$LN78@ProcessSpy
	DD	$LN71@ProcessSpy
	DD	$LN61@ProcessSpy
	DD	$LN13@ProcessSpy
	DD	$LN80@ProcessSpy
	DD	$LN11@ProcessSpy
	DD	$LN8@ProcessSpy
	DD	$LN6@ProcessSpy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _strSummary$222435[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$1:
	lea	ecx, DWORD PTR _strNotification$222444[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$2:
	lea	ecx, DWORD PTR _strMsg$222452[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$3:
	lea	ecx, DWORD PTR $T234153[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$4:
	lea	ecx, DWORD PTR _strMsg$222459[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$5:
	lea	ecx, DWORD PTR $T234154[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$6:
	lea	ecx, DWORD PTR _strMsg$222464[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$7:
	lea	ecx, DWORD PTR $T234155[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$8:
	lea	ecx, DWORD PTR _strSummary$222472[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$9:
	lea	ecx, DWORD PTR _strNotification$222475[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$10:
	lea	ecx, DWORD PTR _strSummary$222514[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$11:
	lea	ecx, DWORD PTR _strNotification$222518[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$12:
	lea	ecx, DWORD PTR _strMsg$222533[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$13:
	lea	ecx, DWORD PTR $T234165[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$14:
	lea	ecx, DWORD PTR $T234166[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$15:
	lea	ecx, DWORD PTR _strMsg$222540[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$16:
	lea	ecx, DWORD PTR $T234167[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$17:
	lea	ecx, DWORD PTR $T234168[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18:
	lea	ecx, DWORD PTR _strSummary$222553[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$19:
	lea	ecx, DWORD PTR _strNotification$222556[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$20:
	lea	ecx, DWORD PTR _strMsg$222566[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$21:
	lea	ecx, DWORD PTR $T234173[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$22:
	lea	ecx, DWORD PTR $T234174[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$23:
	lea	ecx, DWORD PTR _strMsg$222592[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$24:
	lea	ecx, DWORD PTR $T234175[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$25:
	lea	ecx, DWORD PTR _strSummary$222597[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$26:
	lea	ecx, DWORD PTR _strNotification$222600[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$27:
	lea	ecx, DWORD PTR _strMsg$222606[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$28:
	lea	ecx, DWORD PTR $T234178[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2068]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessSpy@CvPlayerEspionage@@QAEXI@Z ENDP		; CvPlayerEspionage::ProcessSpy
PUBLIC	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
PUBLIC	??_C@_0DI@MPFGNAGF@Randomizing?5aiMajorCivIndex?5list@ ; `string'
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
EXTRN	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isWorldWonderClass
EXTRN	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ:PROC ; CvBuildingEntry::GetBuildingClassInfo
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ:PROC ; CvCity::getProductionBuilding
EXTRN	?getProductionProject@CvCity@@QBE?AW4ProjectTypes@@XZ:PROC ; CvCity::getProductionProject
EXTRN	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isAtWar
EXTRN	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z:PROC ; CvDiplomacyAI::GetMajorCivApproach
EXTRN	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isHasMet
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
EXTRN	?GetTargetPlot@CvAIOperation@@QBEPAVCvPlot@@XZ:PROC ; CvAIOperation::GetTargetPlot
EXTRN	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
EXTRN	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ:PROC ; CvPlayer::GetCulture
EXTRN	?GetSneakAttackOperation@CvMilitaryAI@@QAEPAVCvAIOperation@@W4PlayerTypes@@@Z:PROC ; CvMilitaryAI::GetSneakAttackOperation
EXTRN	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ:PROC ; CvPlayer::GetMilitaryAI
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
;	COMDAT ??_C@_0DI@MPFGNAGF@Randomizing?5aiMajorCivIndex?5list@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0DI@MPFGNAGF@Randomizing?5aiMajorCivIndex?5list@ DB 'Randomizing ai'
	DB	'MajorCivIndex list within UncoverIntrigue', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$4
__ehfuncinfo$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
tv290 = -436						; size = 4
tv240 = -432						; size = 4
tv520 = -428						; size = 4
tv529 = -424						; size = 4
_this$ = -420						; size = 4
$T235248 = -388						; size = 4
$T235239 = -384						; size = 4
$T235230 = -380						; size = 4
$T235221 = -376						; size = 4
$T235217 = -372						; size = 4
$T235216 = -368						; size = 4
$T235207 = -364						; size = 4
$T235198 = -360						; size = 4
$T235194 = -356						; size = 4
$T235190 = -352						; size = 4
$T235181 = -348						; size = 4
$T235177 = -344						; size = 4
$T235168 = -340						; size = 4
$T235164 = -336						; size = 4
$T235099 = -304						; size = 4
$T235095 = -300						; size = 4
$T235086 = -296						; size = 4
$T235077 = -292						; size = 4
$T235073 = -288						; size = 4
$T235069 = -284						; size = 4
$T235065 = -280						; size = 4
$T235056 = -276						; size = 4
$T235047 = -272						; size = 4
$T235043 = -268						; size = 4
$T235042 = -264						; size = 4
$T235033 = -260						; size = 4
$T235024 = -256						; size = 4
$T235012 = -248						; size = 4
$T235008 = -244						; size = 4
$T234992 = -240						; size = 4
$T234985 = -236						; size = 4
$T234981 = -232						; size = 4
$T234939 = -201						; size = 1
$T234930 = -200						; size = 4
$T234898 = -184						; size = 4
$T234897 = -180						; size = 4
$T234864 = -176						; size = 4
$T234851 = -172						; size = 4
$T234847 = -168						; size = 4
$T234840 = -164						; size = 4
$T234836 = -157						; size = 1
$T234832 = -156						; size = 4
$T234828 = -149						; size = 1
_iMapY$234896 = -148					; size = 4
_iMapX$234895 = -144					; size = 4
$T234821 = -140						; size = 4
_pBuildingInfo$222701 = -136				; size = 4
_eOtherOtherPlayer$222682 = -132			; size = 4
_eHonestApproach$222687 = -128				; size = 4
_eSurfaceApproach$222686 = -124				; size = 4
_ui$222678 = -120					; size = 4
_eArmyType$222668 = -116				; size = 4
_pPlot$222654 = -112					; size = 4
_eTargetPlayer$222645 = -108				; size = 4
_pSneakAttackOperation$222649 = -104			; size = 4
_pTargetCity$222651 = -100				; size = 4
_iSpyRank$222652 = -96					; size = 4
_eRevealedTargetPlayer$222656 = -92			; size = 4
_ui$222641 = -88					; size = 4
_iTempValue$222638 = -84				; size = 4
_uiTargetSlot$222639 = -80				; size = 4
_ui$222634 = -76					; size = 4
_i$222628 = -72						; size = 4
_pSpy$ = -68						; size = 4
_pCityPlot$ = -64					; size = 4
_ePlayer$ = -60						; size = 4
_eBuilding$ = -56					; size = 4
_pCityEspionage$ = -52					; size = 4
_eProject$ = -48					; size = 4
_pCity$ = -44						; size = 4
_pTargetDiploAI$ = -40					; size = 4
_eCityOwner$ = -36					; size = 4
_bNotifyAboutConstruction$ = -29			; size = 1
_aiMajorCivIndex$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z PROC	; CvPlayerEspionage::UncoverIntrigue, COMDAT
; _this$ = ecx

; 751  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 424				; 000001a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 752  : 	CvEspionageSpy* pSpy = &(m_aSpyList[uiSpyIndex]);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _pSpy$[ebp], eax

; 753  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T234821[ebp], edx
	mov	eax, DWORD PTR _pSpy$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234898[ebp], ecx
	mov	edx, DWORD PTR _pSpy$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234897[ebp], eax
	cmp	DWORD PTR $T234897[ebp], -2147483647	; 80000001H
	je	SHORT $LN58@UncoverInt
	cmp	DWORD PTR $T234898[ebp], -2147483647	; 80000001H
	jne	SHORT $LN59@UncoverInt
$LN58@UncoverInt:
	mov	DWORD PTR _pCityPlot$[ebp], 0
	jmp	$LN60@UncoverInt
$LN59@UncoverInt:
	mov	ecx, DWORD PTR $T234821[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T234828[ebp], dl
	mov	eax, DWORD PTR $T234821[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T234832[ebp], ecx
	movzx	edx, BYTE PTR $T234828[ebp]
	push	edx
	mov	eax, DWORD PTR $T234832[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234897[ebp]
	push	ecx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$234895[ebp], eax
	mov	edx, DWORD PTR $T234821[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T234836[ebp], al
	mov	ecx, DWORD PTR $T234821[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T234840[ebp], edx
	movzx	eax, BYTE PTR $T234836[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234840[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234898[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$234896[ebp], eax
	cmp	DWORD PTR _iMapX$234895[ebp], 0
	jl	SHORT $LN74@UncoverInt
	mov	eax, DWORD PTR $T234821[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T234847[ebp], ecx
	mov	edx, DWORD PTR _iMapX$234895[ebp]
	cmp	edx, DWORD PTR $T234847[ebp]
	jge	SHORT $LN74@UncoverInt
	cmp	DWORD PTR _iMapY$234896[ebp], 0
	jl	SHORT $LN74@UncoverInt
	mov	eax, DWORD PTR $T234821[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T234851[ebp], ecx
	mov	edx, DWORD PTR _iMapY$234896[ebp]
	cmp	edx, DWORD PTR $T234851[ebp]
	jge	SHORT $LN74@UncoverInt
	mov	DWORD PTR tv529[ebp], 1
	jmp	SHORT $LN72@UncoverInt
$LN74@UncoverInt:
	mov	DWORD PTR tv529[ebp], 0
$LN72@UncoverInt:
	cmp	DWORD PTR tv529[ebp], 0
	je	SHORT $LN62@UncoverInt
	mov	eax, DWORD PTR $T234821[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T234864[ebp], ecx
	mov	edx, DWORD PTR _iMapY$234896[ebp]
	imul	edx, DWORD PTR $T234864[ebp]
	add	edx, DWORD PTR _iMapX$234895[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T234821[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv520[ebp], edx
	jmp	SHORT $LN63@UncoverInt
$LN62@UncoverInt:
	mov	DWORD PTR tv520[ebp], 0
$LN63@UncoverInt:
	mov	ecx, DWORD PTR tv520[ebp]
	mov	DWORD PTR _pCityPlot$[ebp], ecx
$LN60@UncoverInt:

; 754  : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 755  : 	CvCityEspionage* pCityEspionage = NULL;

	mov	DWORD PTR _pCityEspionage$[ebp], 0

; 756  : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _ePlayer$[ebp], ecx

; 757  : 	PlayerTypes eCityOwner = NO_PLAYER;

	mov	DWORD PTR _eCityOwner$[ebp], -1

; 758  : 	if(pCityPlot)

	cmp	DWORD PTR _pCityPlot$[ebp], 0
	je	SHORT $LN50@UncoverInt

; 759  : 	{
; 760  : 		pCity = pCityPlot->getPlotCity();

	mov	ecx, DWORD PTR _pCityPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax

; 761  : 		eCityOwner = pCity->getOwner();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _eCityOwner$[ebp], eax

; 762  : 		pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax
$LN50@UncoverInt:

; 763  : 	}
; 764  : 
; 765  : 	CvAssertMsg(pCity, "Spy needs to be in city to uncover intrigue");
; 766  : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN49@UncoverInt

; 767  : 	{
; 768  : 		return;

	jmp	$LN51@UncoverInt
$LN49@UncoverInt:

; 769  : 	}
; 770  : 
; 771  : 	CvAssertMsg(ePlayer != eCityOwner, "Uncover intrigue should not occur when a spy is in their own city");
; 772  : 	if(ePlayer == eCityOwner)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	cmp	ecx, DWORD PTR _eCityOwner$[ebp]
	jne	SHORT $LN48@UncoverInt

; 773  : 	{
; 774  : 		return;

	jmp	$LN51@UncoverInt
$LN48@UncoverInt:

; 775  : 	}
; 776  : 
; 777  : 	// make a list of the active civs
; 778  : 	std::vector<int> aiMajorCivIndex;

	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 779  : 	for(int i = 0; i < MAX_MAJOR_CIVS; i++)

	mov	DWORD PTR _i$222628[ebp], 0
	jmp	SHORT $LN47@UncoverInt
$LN46@UncoverInt:
	mov	edx, DWORD PTR _i$222628[ebp]
	add	edx, 1
	mov	DWORD PTR _i$222628[ebp], edx
$LN47@UncoverInt:
	cmp	DWORD PTR _i$222628[ebp], 22		; 00000016H
	jge	SHORT $LN45@UncoverInt

; 780  : 	{
; 781  : 		if(GET_PLAYER((PlayerTypes)i).isAlive())

	mov	eax, DWORD PTR _i$222628[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T234930[ebp], eax
	mov	ecx, DWORD PTR $T234930[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T234939[ebp], dl
	movzx	eax, BYTE PTR $T234939[ebp]
	test	eax, eax
	je	SHORT $LN44@UncoverInt

; 782  : 		{
; 783  : 			aiMajorCivIndex.push_back(i);

	lea	ecx, DWORD PTR _i$222628[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
$LN44@UncoverInt:

; 784  : 		}
; 785  : 	}

	jmp	SHORT $LN46@UncoverInt
$LN45@UncoverInt:

; 786  : 
; 787  : 	// randomize that list
; 788  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	mov	DWORD PTR _ui$222634[ebp], 0
	jmp	SHORT $LN126@UncoverInt
$LN42@UncoverInt:
	mov	edx, DWORD PTR _ui$222634[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222634[ebp], edx
$LN126@UncoverInt:
	mov	eax, DWORD PTR _aiMajorCivIndex$[ebp+8]
	sub	eax, DWORD PTR _aiMajorCivIndex$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _ui$222634[ebp], eax
	jae	SHORT $LN41@UncoverInt

; 789  : 	{
; 790  : 		int iTempValue;
; 791  : 		uint uiTargetSlot = GC.getGame().getJonRandNum(aiMajorCivIndex.size(), "Randomizing aiMajorCivIndex list within UncoverIntrigue");

	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+8]
	sub	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	sar	ecx, 2
	mov	DWORD PTR $T234981[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234985[ebp], edx
	push	OFFSET ??_C@_0DI@MPFGNAGF@Randomizing?5aiMajorCivIndex?5list@
	mov	eax, DWORD PTR $T234981[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234985[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _uiTargetSlot$222639[ebp], eax

; 792  : 		iTempValue = aiMajorCivIndex[ui];

	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	edx, DWORD PTR _ui$222634[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _iTempValue$222638[ebp], eax

; 793  : 		aiMajorCivIndex[ui] = aiMajorCivIndex[uiTargetSlot];

	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	edx, DWORD PTR _uiTargetSlot$222639[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T234992[ebp], eax
	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	edx, DWORD PTR _ui$222634[ebp]
	mov	eax, DWORD PTR $T234992[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 794  : 		aiMajorCivIndex[uiTargetSlot] = iTempValue;

	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	edx, DWORD PTR _uiTargetSlot$222639[ebp]
	mov	eax, DWORD PTR _iTempValue$222638[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 795  : 	}

	jmp	$LN42@UncoverInt
$LN41@UncoverInt:

; 796  : 
; 797  : 	// go through to determine any intrigue
; 798  : 
; 799  : 	// sending out a sneak attack
; 800  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	mov	DWORD PTR _ui$222641[ebp], 0
	jmp	SHORT $LN140@UncoverInt
$LN39@UncoverInt:
	mov	ecx, DWORD PTR _ui$222641[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$222641[ebp], ecx
$LN140@UncoverInt:
	mov	edx, DWORD PTR _aiMajorCivIndex$[ebp+8]
	sub	edx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _ui$222641[ebp], edx
	jae	$LN38@UncoverInt

; 801  : 	{
; 802  : 		PlayerTypes eTargetPlayer = (PlayerTypes)aiMajorCivIndex[ui];

	mov	eax, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	ecx, DWORD PTR _ui$222641[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _eTargetPlayer$222645[ebp], edx

; 803  : 		// a player shouldn't target themselves for a sneak attack. That's strange.
; 804  : 		if(eTargetPlayer == eCityOwner)

	mov	eax, DWORD PTR _eTargetPlayer$222645[ebp]
	cmp	eax, DWORD PTR _eCityOwner$[ebp]
	jne	SHORT $LN37@UncoverInt

; 805  : 		{
; 806  : 			continue;

	jmp	SHORT $LN39@UncoverInt
$LN37@UncoverInt:

; 807  : 		}
; 808  : 
; 809  : 		// Don't tell other civs about what the shadow ai is thinking because that's incorrect information!
; 810  : 		if(GET_PLAYER(eCityOwner).isHuman())

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235008[ebp], ecx
	mov	ecx, DWORD PTR $T235008[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@UncoverInt

; 811  : 		{
; 812  : 			continue;

	jmp	SHORT $LN39@UncoverInt
$LN36@UncoverInt:

; 813  : 		}
; 814  : 
; 815  : 		CvAIOperation* pSneakAttackOperation = GET_PLAYER(eCityOwner).GetMilitaryAI()->GetSneakAttackOperation(eTargetPlayer);

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235012[ebp], eax
	mov	ecx, DWORD PTR _eTargetPlayer$222645[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235012[ebp]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?GetSneakAttackOperation@CvMilitaryAI@@QAEPAVCvAIOperation@@W4PlayerTypes@@@Z ; CvMilitaryAI::GetSneakAttackOperation
	mov	DWORD PTR _pSneakAttackOperation$222649[ebp], eax

; 816  : 		if(!pSneakAttackOperation)

	cmp	DWORD PTR _pSneakAttackOperation$222649[ebp], 0
	jne	SHORT $LN35@UncoverInt

; 817  : 		{
; 818  : 			continue;

	jmp	$LN39@UncoverInt
$LN35@UncoverInt:

; 819  : 		}
; 820  : 
; 821  : 		CvCity* pTargetCity = NULL;

	mov	DWORD PTR _pTargetCity$222651[ebp], 0

; 822  : 		int iSpyRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _iSpyRank$222652[ebp], edx

; 823  : 		iSpyRank += m_pPlayer->GetCulture()->GetInfluenceMajorCivSpyRankBonus(eCityOwner);

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
	add	eax, DWORD PTR _iSpyRank$222652[ebp]
	mov	DWORD PTR _iSpyRank$222652[ebp], eax

; 824  : 
; 825  : 		if(iSpyRank >= SPY_RANK_AGENT)

	cmp	DWORD PTR _iSpyRank$222652[ebp], 1
	jl	SHORT $LN34@UncoverInt

; 826  : 		{
; 827  : 			CvPlot* pPlot = pSneakAttackOperation->GetTargetPlot();

	mov	ecx, DWORD PTR _pSneakAttackOperation$222649[ebp]
	call	?GetTargetPlot@CvAIOperation@@QBEPAVCvPlot@@XZ ; CvAIOperation::GetTargetPlot
	mov	DWORD PTR _pPlot$222654[ebp], eax

; 828  : 			if(pPlot)

	cmp	DWORD PTR _pPlot$222654[ebp], 0
	je	SHORT $LN34@UncoverInt

; 829  : 			{
; 830  : 				pTargetCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$222654[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pTargetCity$222651[ebp], eax
$LN34@UncoverInt:

; 831  : 			}
; 832  : 		}
; 833  : 
; 834  : 		PlayerTypes eRevealedTargetPlayer = NO_PLAYER;

	mov	DWORD PTR _eRevealedTargetPlayer$222656[ebp], -1

; 835  : 		if (iSpyRank == SPY_RANK_RECRUIT)

	cmp	DWORD PTR _iSpyRank$222652[ebp], 0
	jne	SHORT $LN32@UncoverInt

; 836  : 		{
; 837  : 			eRevealedTargetPlayer = (PlayerTypes)MAX_MAJOR_CIVS; // hack to indicate that we shouldn't know the target due to our low spy rank

	mov	DWORD PTR _eRevealedTargetPlayer$222656[ebp], 22 ; 00000016H

; 838  : 		}
; 839  : 		else

	jmp	$LN31@UncoverInt
$LN32@UncoverInt:

; 840  : 		{
; 841  : 			if(GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(eTargetPlayer).getTeam()))

	mov	edx, DWORD PTR _eTargetPlayer$222645[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235024[ebp], edx
	mov	eax, DWORD PTR $T235024[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235033[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	DWORD PTR $T235042[ebp], eax
	mov	ecx, DWORD PTR $T235042[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235043[ebp], eax
	mov	eax, DWORD PTR $T235043[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T235047[ebp], eax
	mov	ecx, DWORD PTR $T235033[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235047[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN31@UncoverInt

; 842  : 			{
; 843  : 				eRevealedTargetPlayer = eTargetPlayer;

	mov	eax, DWORD PTR _eTargetPlayer$222645[ebp]
	mov	DWORD PTR _eRevealedTargetPlayer$222656[ebp], eax
$LN31@UncoverInt:

; 844  : 			}
; 845  : 		}
; 846  : 
; 847  : 		switch(pSneakAttackOperation->GetOperationType())

	mov	ecx, DWORD PTR _pSneakAttackOperation$222649[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pSneakAttackOperation$222649[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv240[ebp], eax
	cmp	DWORD PTR tv240[ebp], 6
	je	SHORT $LN169@UncoverInt
	cmp	DWORD PTR tv240[ebp], 14		; 0000000eH
	je	SHORT $LN173@UncoverInt
	jmp	$LN28@UncoverInt

; 848  : 		{
; 849  : 		case AI_OPERATION_SNEAK_CITY_ATTACK:
; 850  : 		{
; 851  : 			AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eRevealedTargetPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_ARMY_SNEAK_ATTACK, uiSpyIndex, pTargetCity, true);

$LN169@UncoverInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T235056[ebp], eax
	push	1
	mov	ecx, DWORD PTR _pTargetCity$222651[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	3
	push	-1
	push	-1
	mov	eax, DWORD PTR _eRevealedTargetPlayer$222656[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235056[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage

; 852  : 		}
; 853  : 		break;

	jmp	SHORT $LN28@UncoverInt

; 854  : 		case AI_OPERATION_NAVAL_SNEAK_ATTACK:
; 855  : 		{
; 856  : 			AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eRevealedTargetPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK, uiSpyIndex, pTargetCity, true);

$LN173@UncoverInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235065[ebp], edx
	push	1
	mov	eax, DWORD PTR _pTargetCity$222651[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	push	4
	push	-1
	push	-1
	mov	edx, DWORD PTR _eRevealedTargetPlayer$222656[ebp]
	push	edx
	mov	eax, DWORD PTR _eCityOwner$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235065[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN28@UncoverInt:

; 857  : 		}
; 858  : 		break;
; 859  : 		}
; 860  : 
; 861  : 		// If a sneak attack is reported, bust out of the loop
; 862  : 		break;

	jmp	SHORT $LN38@UncoverInt

; 863  : 	}

	jmp	$LN39@UncoverInt
$LN38@UncoverInt:

; 864  : 
; 865  : 	// building up an army
; 866  : 	if(!GET_PLAYER(eCityOwner).isHuman())

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235069[ebp], edx
	mov	ecx, DWORD PTR $T235069[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	jne	$LN25@UncoverInt

; 867  : 	{
; 868  : 		ArmyType eArmyType = GET_PLAYER(eCityOwner).GetMilitaryAI()->GetArmyBeingBuilt();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235073[ebp], ecx
	mov	ecx, DWORD PTR $T235073[ebp]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	DWORD PTR $T235077[ebp], eax
	mov	edx, DWORD PTR $T235077[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _eArmyType$222668[ebp], eax

; 869  : 		if(eArmyType != NO_ARMY_TYPE)

	cmp	DWORD PTR _eArmyType$222668[ebp], -1
	je	$LN25@UncoverInt

; 870  : 		{
; 871  : 			switch(eArmyType)

	mov	ecx, DWORD PTR _eArmyType$222668[ebp]
	mov	DWORD PTR tv290[ebp], ecx
	cmp	DWORD PTR tv290[ebp], 0
	je	SHORT $LN183@UncoverInt
	cmp	DWORD PTR tv290[ebp], 1
	je	SHORT $LN187@UncoverInt
	jmp	SHORT $LN25@UncoverInt

; 872  : 			{
; 873  : 			case ARMY_TYPE_LAND:
; 874  : 				AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_BUILDING_ARMY, uiSpyIndex, pCity, true);

$LN183@UncoverInt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T235086[ebp], ecx
	push	1
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	1
	push	-1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235086[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage

; 875  : 				break;

	jmp	SHORT $LN25@UncoverInt

; 876  : 			case ARMY_TYPE_NAVAL_INVASION:
; 877  : 				AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY, uiSpyIndex, pCity, true);

$LN187@UncoverInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235095[ebp], edx
	push	1
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	push	2
	push	-1
	push	-1
	push	-1
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	push	edx
	mov	eax, DWORD PTR $T235095[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN25@UncoverInt:

; 878  : 				break;
; 879  : 			}
; 880  : 		}
; 881  : 	}
; 882  : 
; 883  : 	// deception!
; 884  : 	CvDiplomacyAI* pTargetDiploAI = GET_PLAYER(eCityOwner).GetDiplomacyAI();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235099[ebp], ecx
	mov	ecx, DWORD PTR $T235099[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pTargetDiploAI$[ebp], eax

; 885  : 	CvAssertMsg(pTargetDiploAI, "pTargetDiploAI is null");
; 886  : 	if(!pTargetDiploAI)

	cmp	DWORD PTR _pTargetDiploAI$[ebp], 0
	jne	SHORT $LN19@UncoverInt

; 887  : 	{
; 888  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	$LN51@UncoverInt
$LN19@UncoverInt:

; 889  : 	}
; 890  : 
; 891  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	mov	DWORD PTR _ui$222678[ebp], 0
	jmp	SHORT $LN212@UncoverInt
$LN17@UncoverInt:
	mov	edx, DWORD PTR _ui$222678[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$222678[ebp], edx
$LN212@UncoverInt:
	mov	eax, DWORD PTR _aiMajorCivIndex$[ebp+8]
	sub	eax, DWORD PTR _aiMajorCivIndex$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _ui$222678[ebp], eax
	jae	$LN16@UncoverInt

; 892  : 	{
; 893  : 		PlayerTypes eOtherOtherPlayer = (PlayerTypes)aiMajorCivIndex[ui];

	mov	ecx, DWORD PTR _aiMajorCivIndex$[ebp+4]
	mov	edx, DWORD PTR _ui$222678[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _eOtherOtherPlayer$222682[ebp], eax

; 894  : 		// doesn't make sense for player to give information on themselves
; 895  : 		if(eOtherOtherPlayer == eCityOwner)

	mov	ecx, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	cmp	ecx, DWORD PTR _eCityOwner$[ebp]
	jne	SHORT $LN15@UncoverInt

; 896  : 		{
; 897  : 			continue;

	jmp	SHORT $LN17@UncoverInt
$LN15@UncoverInt:

; 898  : 		}
; 899  : 
; 900  : 		// Don't tell other civs about what the shadow ai is thinking because that's incorrect information!
; 901  : 		if(GET_PLAYER(eCityOwner).isHuman())

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235164[ebp], edx
	mov	ecx, DWORD PTR $T235164[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@UncoverInt

; 902  : 		{
; 903  : 			continue;

	jmp	SHORT $LN17@UncoverInt
$LN14@UncoverInt:

; 904  : 		}
; 905  : 
; 906  : 		MajorCivApproachTypes eSurfaceApproach = pTargetDiploAI->GetMajorCivApproach(eOtherOtherPlayer, true);

	push	1
	mov	ecx, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pTargetDiploAI$[ebp]
	call	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z ; CvDiplomacyAI::GetMajorCivApproach
	mov	DWORD PTR _eSurfaceApproach$222686[ebp], eax

; 907  : 		MajorCivApproachTypes eHonestApproach = pTargetDiploAI->GetMajorCivApproach(eOtherOtherPlayer, false);

	push	0
	mov	edx, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTargetDiploAI$[ebp]
	call	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z ; CvDiplomacyAI::GetMajorCivApproach
	mov	DWORD PTR _eHonestApproach$222687[ebp], eax

; 908  : 
; 909  : 		// if the current approach is a dangerous approach
; 910  : 		if(eHonestApproach == MAJOR_CIV_APPROACH_DECEPTIVE || eHonestApproach == MAJOR_CIV_APPROACH_WAR)

	cmp	DWORD PTR _eHonestApproach$222687[ebp], 2
	je	SHORT $LN12@UncoverInt
	cmp	DWORD PTR _eHonestApproach$222687[ebp], 0
	jne	$LN13@UncoverInt
$LN12@UncoverInt:

; 911  : 		{
; 912  : 			// if the surface approach hides this
; 913  : 			if(eSurfaceApproach == MAJOR_CIV_APPROACH_FRIENDLY || eSurfaceApproach == MAJOR_CIV_APPROACH_NEUTRAL)

	cmp	DWORD PTR _eSurfaceApproach$222686[ebp], 5
	je	SHORT $LN10@UncoverInt
	cmp	DWORD PTR _eSurfaceApproach$222686[ebp], 6
	jne	$LN13@UncoverInt
$LN10@UncoverInt:

; 914  : 			{
; 915  : 				if(GET_TEAM(GET_PLAYER(eCityOwner).getTeam()).isAtWar(GET_PLAYER(eOtherOtherPlayer).getTeam()))

	mov	eax, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235168[ebp], eax
	mov	ecx, DWORD PTR $T235168[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235177[ebp], eax
	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235181[ebp], eax
	mov	ecx, DWORD PTR $T235181[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235190[ebp], eax
	mov	eax, DWORD PTR $T235190[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T235194[ebp], eax
	mov	ecx, DWORD PTR $T235177[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235194[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@UncoverInt

; 916  : 				{
; 917  : 					// If the teams are already at war, this isn't notable
; 918  : 					continue;

	jmp	$LN17@UncoverInt
$LN9@UncoverInt:

; 919  : 				}
; 920  : 
; 921  : 				if(GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(eOtherOtherPlayer).getTeam()))

	mov	eax, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235198[ebp], eax
	mov	ecx, DWORD PTR $T235198[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235207[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	DWORD PTR $T235216[ebp], ecx
	mov	edx, DWORD PTR $T235216[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235217[ebp], eax
	mov	ecx, DWORD PTR $T235217[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T235221[ebp], ecx
	mov	edx, DWORD PTR $T235207[ebp]
	push	edx
	mov	ecx, DWORD PTR $T235221[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN250@UncoverInt

; 922  : 				{
; 923  : 					AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eOtherOtherPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_DECEPTION, uiSpyIndex, pCity, true);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T235230[ebp], eax
	push	1
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR _eOtherOtherPlayer$222682[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235230[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage

; 924  : 				}
; 925  : 				else

	jmp	SHORT $LN7@UncoverInt

; 926  : 				{
; 927  : 					AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_DECEPTION, uiSpyIndex, pCity, true);

$LN250@UncoverInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235239[ebp], edx
	push	1
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	push	0
	push	-1
	push	-1
	push	-1
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	push	edx
	mov	eax, DWORD PTR $T235239[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN7@UncoverInt:

; 928  : 				}
; 929  : 				break; // we reported intrigue, now bail out

	jmp	SHORT $LN16@UncoverInt
$LN13@UncoverInt:

; 930  : 			}
; 931  : 		}
; 932  : 	}

	jmp	$LN17@UncoverInt
$LN16@UncoverInt:

; 933  : 
; 934  : 	ProjectTypes eProject = pCity->getProductionProject();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getProductionProject@CvCity@@QBE?AW4ProjectTypes@@XZ ; CvCity::getProductionProject
	mov	DWORD PTR _eProject$[ebp], eax

; 935  : 	BuildingTypes eBuilding = pCity->getProductionBuilding();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	mov	DWORD PTR _eBuilding$[ebp], eax

; 936  : 	bool bNotifyAboutConstruction = false;

	mov	BYTE PTR _bNotifyAboutConstruction$[ebp], 0

; 937  : 	if (eProject != NO_PROJECT)

	cmp	DWORD PTR _eProject$[ebp], -1
	je	SHORT $LN6@UncoverInt

; 938  : 	{
; 939  : 		bNotifyAboutConstruction = true;

	mov	BYTE PTR _bNotifyAboutConstruction$[ebp], 1
	jmp	SHORT $LN5@UncoverInt
$LN6@UncoverInt:

; 940  : 	}
; 941  : 	else if (eBuilding != NO_BUILDING)

	cmp	DWORD PTR _eBuilding$[ebp], -1
	je	SHORT $LN5@UncoverInt

; 942  : 	{
; 943  : 		CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuildingInfo$222701[ebp], eax

; 944  : 		CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 945  : 		if (pBuildingInfo)

	cmp	DWORD PTR _pBuildingInfo$222701[ebp], 0
	je	SHORT $LN5@UncoverInt

; 946  : 		{
; 947  : 			if (::isWorldWonderClass(pBuildingInfo->GetBuildingClassInfo()))

	mov	ecx, DWORD PTR _pBuildingInfo$222701[ebp]
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	push	eax
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@UncoverInt

; 948  : 			{
; 949  : 				bNotifyAboutConstruction = true;

	mov	BYTE PTR _bNotifyAboutConstruction$[ebp], 1
$LN5@UncoverInt:

; 950  : 			}
; 951  : 		}
; 952  : 	}
; 953  : 
; 954  : 	if (bNotifyAboutConstruction)

	movzx	eax, BYTE PTR _bNotifyAboutConstruction$[ebp]
	test	eax, eax
	je	SHORT $LN1@UncoverInt

; 955  : 	{
; 956  : 		AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, eBuilding, eProject, INTRIGUE_TYPE_CONSTRUCTING_WONDER, uiSpyIndex, pCity, true);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T235248[ebp], eax
	push	1
	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _eProject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eBuilding$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _eCityOwner$[ebp]
	push	edx
	mov	eax, DWORD PTR $T235248[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN1@UncoverInt:

; 957  : 	}
; 958  : }

	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN51@UncoverInt:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$2:
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$4:
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ENDP	; CvPlayerEspionage::UncoverIntrigue
; Function compile flags: /Odtp
;	COMDAT ?GetNextSpyName@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T235322 = -12						; size = 4
$T235315 = -8						; size = 4
_iName$ = -4						; size = 4
?GetNextSpyName@CvPlayerEspionage@@QAEHXZ PROC		; CvPlayerEspionage::GetNextSpyName, COMDAT
; _this$ = ecx

; 961  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 962  : 	CvAssertMsg((uint)m_iSpyListNameOrderIndex < m_aiSpyListNameOrder.size(), "m_iSpyListNameOrderIndex out of bounds probably because this civ doesn't have spy names.")
; 963  : 	if((uint)m_iSpyListNameOrderIndex >= m_aiSpyListNameOrder.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T235315[ebp], eax
	mov	ecx, DWORD PTR $T235315[ebp]
	mov	edx, DWORD PTR $T235315[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+260], eax
	jb	SHORT $LN7@GetNextSpy

; 964  : 	{
; 965  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN3@GetNextSpy

; 966  : 	}
; 967  : 
; 968  : 	int iName = m_aiSpyListNameOrder[m_iSpyListNameOrderIndex];

$LN7@GetNextSpy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _iName$[ebp], eax

; 969  : 	m_iSpyListNameOrderIndex++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], edx

; 970  : 	if(m_iSpyListNameOrderIndex >= (int)m_aiSpyListNameOrder.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	mov	DWORD PTR $T235322[ebp], ecx
	mov	edx, DWORD PTR $T235322[ebp]
	mov	eax, DWORD PTR $T235322[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+260], ecx
	jl	SHORT $LN1@GetNextSpy

; 971  : 	{
; 972  : 		m_iSpyListNameOrderIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0
$LN1@GetNextSpy:

; 973  : 	}
; 974  : 	return iName;

	mov	eax, DWORD PTR _iName$[ebp]
$LN3@GetNextSpy:

; 975  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ENDP		; CvPlayerEspionage::GetNextSpyName
_TEXT	ENDS
PUBLIC	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::IsSpyInCity
; Function compile flags: /Odtp
;	COMDAT ?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T235328 = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsSpyInCity, COMDAT
; _this$ = ecx

; 979  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "uiSpyIndex is out of bounds");
; 981  : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T235328[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T235328[ebp]
	jb	SHORT $LN8@IsSpyInCit

; 982  : 	{
; 983  : 		return false;

	xor	al, al
	jmp	SHORT $LN4@IsSpyInCit

; 984  : 	}
; 985  : 
; 986  : 	if(m_aSpyList[uiSpyIndex].m_iCityX != -1 && m_aSpyList[uiSpyIndex].m_iCityY != -1)

$LN8@IsSpyInCit:
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+4], -1
	je	SHORT $LN2@IsSpyInCit
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+8], -1
	je	SHORT $LN2@IsSpyInCit

; 987  : 	{
; 988  : 		return true;

	mov	al, 1
	jmp	SHORT $LN4@IsSpyInCit

; 989  : 	}
; 990  : 	else

	jmp	SHORT $LN4@IsSpyInCit
$LN2@IsSpyInCit:

; 991  : 	{
; 992  : 		return false;

	xor	al, al
$LN4@IsSpyInCit:

; 993  : 	}
; 994  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsSpyInCity
_TEXT	ENDS
PUBLIC	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
; Function compile flags: /Odtp
;	COMDAT ?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z
_TEXT	SEGMENT
tv181 = -84						; size = 4
tv196 = -80						; size = 4
_this$ = -76						; size = 4
$T235461 = -68						; size = 4
$T235460 = -64						; size = 4
$T235415 = -60						; size = 4
$T235402 = -56						; size = 4
$T235398 = -52						; size = 4
$T235384 = -48						; size = 4
$T235380 = -41						; size = 1
$T235369 = -40						; size = 4
$T235365 = -33						; size = 1
_iMapY$235424 = -32					; size = 4
_iMapX$235423 = -28					; size = 4
$T235358 = -24						; size = 4
$T235354 = -20						; size = 4
$T235350 = -16						; size = 4
$T235340 = -12						; size = 4
_pCityPlot$ = -8					; size = 4
_pCity$ = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z PROC ; CvPlayerEspionage::GetCityWithSpy, COMDAT
; _this$ = ecx

; 997  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 998  : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "uiSpyIndex is out of bounds");
; 999  : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T235340[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T235340[ebp]
	jb	SHORT $LN8@GetCityWit

; 1000 : 	{
; 1001 : #ifdef AUI_WARNING_FIXES
; 1002 : 		return NULL;
; 1003 : #else
; 1004 : 		return false;

	xor	eax, eax
	jmp	$LN4@GetCityWit

; 1005 : #endif
; 1006 : 	}
; 1007 : 
; 1008 : 	if(m_aSpyList[uiSpyIndex].m_iCityX == -1 && m_aSpyList[uiSpyIndex].m_iCityY == -1)

$LN8@GetCityWit:
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+4], -1
	jne	SHORT $LN2@GetCityWit
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+8], -1
	jne	SHORT $LN2@GetCityWit

; 1009 : 	{
; 1010 : 		return NULL;

	xor	eax, eax
	jmp	$LN4@GetCityWit
$LN2@GetCityWit:

; 1011 : 	}
; 1012 : 
; 1013 : 	CvPlot* pCityPlot = GC.getMap().plot(m_aSpyList[uiSpyIndex].m_iCityX, m_aSpyList[uiSpyIndex].m_iCityY);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235350[ebp], eax
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235354[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T235358[ebp], ecx
	mov	edx, DWORD PTR $T235350[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235461[ebp], eax
	mov	ecx, DWORD PTR $T235354[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235460[ebp], edx
	cmp	DWORD PTR $T235460[ebp], -2147483647	; 80000001H
	je	SHORT $LN18@GetCityWit
	cmp	DWORD PTR $T235461[ebp], -2147483647	; 80000001H
	jne	SHORT $LN19@GetCityWit
$LN18@GetCityWit:
	mov	DWORD PTR _pCityPlot$[ebp], 0
	jmp	$LN20@GetCityWit
$LN19@GetCityWit:
	mov	eax, DWORD PTR $T235358[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T235365[ebp], cl
	mov	edx, DWORD PTR $T235358[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T235369[ebp], eax
	movzx	ecx, BYTE PTR $T235365[ebp]
	test	ecx, ecx
	je	SHORT $LN31@GetCityWit
	cmp	DWORD PTR $T235460[ebp], 0
	jge	SHORT $LN30@GetCityWit
	mov	eax, DWORD PTR $T235460[ebp]
	cdq
	idiv	DWORD PTR $T235369[ebp]
	add	edx, DWORD PTR $T235369[ebp]
	mov	DWORD PTR _iMapX$235423[ebp], edx
	jmp	SHORT $LN32@GetCityWit
	jmp	SHORT $LN31@GetCityWit
$LN30@GetCityWit:
	mov	edx, DWORD PTR $T235460[ebp]
	cmp	edx, DWORD PTR $T235369[ebp]
	jl	SHORT $LN31@GetCityWit
	mov	eax, DWORD PTR $T235460[ebp]
	cdq
	idiv	DWORD PTR $T235369[ebp]
	mov	DWORD PTR _iMapX$235423[ebp], edx
	jmp	SHORT $LN32@GetCityWit
$LN31@GetCityWit:
	mov	eax, DWORD PTR $T235460[ebp]
	mov	DWORD PTR _iMapX$235423[ebp], eax
$LN32@GetCityWit:
	mov	ecx, DWORD PTR $T235358[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T235380[ebp], dl
	mov	eax, DWORD PTR $T235358[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T235384[ebp], ecx
	movzx	edx, BYTE PTR $T235380[ebp]
	test	edx, edx
	je	SHORT $LN41@GetCityWit
	cmp	DWORD PTR $T235461[ebp], 0
	jge	SHORT $LN40@GetCityWit
	mov	eax, DWORD PTR $T235461[ebp]
	cdq
	idiv	DWORD PTR $T235384[ebp]
	add	edx, DWORD PTR $T235384[ebp]
	mov	DWORD PTR _iMapY$235424[ebp], edx
	jmp	SHORT $LN42@GetCityWit
	jmp	SHORT $LN41@GetCityWit
$LN40@GetCityWit:
	mov	eax, DWORD PTR $T235461[ebp]
	cmp	eax, DWORD PTR $T235384[ebp]
	jl	SHORT $LN41@GetCityWit
	mov	eax, DWORD PTR $T235461[ebp]
	cdq
	idiv	DWORD PTR $T235384[ebp]
	mov	DWORD PTR _iMapY$235424[ebp], edx
	jmp	SHORT $LN42@GetCityWit
$LN41@GetCityWit:
	mov	ecx, DWORD PTR $T235461[ebp]
	mov	DWORD PTR _iMapY$235424[ebp], ecx
$LN42@GetCityWit:
	cmp	DWORD PTR _iMapX$235423[ebp], 0
	jl	SHORT $LN46@GetCityWit
	mov	edx, DWORD PTR $T235358[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T235398[ebp], eax
	mov	ecx, DWORD PTR _iMapX$235423[ebp]
	cmp	ecx, DWORD PTR $T235398[ebp]
	jge	SHORT $LN46@GetCityWit
	cmp	DWORD PTR _iMapY$235424[ebp], 0
	jl	SHORT $LN46@GetCityWit
	mov	edx, DWORD PTR $T235358[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T235402[ebp], eax
	mov	ecx, DWORD PTR _iMapY$235424[ebp]
	cmp	ecx, DWORD PTR $T235402[ebp]
	jge	SHORT $LN46@GetCityWit
	mov	DWORD PTR tv196[ebp], 1
	jmp	SHORT $LN44@GetCityWit
$LN46@GetCityWit:
	mov	DWORD PTR tv196[ebp], 0
$LN44@GetCityWit:
	cmp	DWORD PTR tv196[ebp], 0
	je	SHORT $LN22@GetCityWit
	mov	edx, DWORD PTR $T235358[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T235415[ebp], eax
	mov	ecx, DWORD PTR _iMapY$235424[ebp]
	imul	ecx, DWORD PTR $T235415[ebp]
	add	ecx, DWORD PTR _iMapX$235423[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T235358[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN23@GetCityWit
$LN22@GetCityWit:
	mov	DWORD PTR tv181[ebp], 0
$LN23@GetCityWit:
	mov	eax, DWORD PTR tv181[ebp]
	mov	DWORD PTR _pCityPlot$[ebp], eax
$LN20@GetCityWit:

; 1014 : 	CvAssertMsg(pCityPlot, "pCityPlot is null. This should have been caught above");
; 1015 : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 1016 : 	if(pCityPlot)

	cmp	DWORD PTR _pCityPlot$[ebp], 0
	je	SHORT $LN1@GetCityWit

; 1017 : 	{
; 1018 : 		pCity = pCityPlot->getPlotCity();

	mov	ecx, DWORD PTR _pCityPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax
$LN1@GetCityWit:

; 1019 : 		CvAssertMsg(pCity, "Spy is pointing to empty city, what's up with that");
; 1020 : 	}
; 1021 : 
; 1022 : 	return pCity;

	mov	eax, DWORD PTR _pCity$[ebp]
$LN4@GetCityWit:

; 1023 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ENDP ; CvPlayerEspionage::GetCityWithSpy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T235481 = -8						; size = 4
$T235477 = -4						; size = 4
_pCity$ = 8						; size = 4
?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z PROC ; CvPlayerEspionage::GetSpyIndexInCity, COMDAT
; _this$ = ecx

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1028 : 	CvAssertMsg(pCity, "pCity is null. Can't do much with this");
; 1029 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN6@GetSpyInde

; 1030 : 	{
; 1031 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN2@GetSpyInde

; 1032 : 	}
; 1033 : 
; 1034 : 	return pCity->GetCityEspionage()->m_aiSpyAssignment[m_pPlayer->GetID()];

$LN6@GetSpyInde:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235477[ebp], edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	DWORD PTR $T235481[ebp], eax
	mov	eax, DWORD PTR $T235477[ebp]
	mov	ecx, DWORD PTR $T235481[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN2@GetSpyInde:

; 1035 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ENDP ; CvPlayerEspionage::GetSpyIndexInCity
_TEXT	ENDS
PUBLIC	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
; Function compile flags: /Odtp
;	COMDAT ?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_uiOffset$235516 = -28					; size = 4
$T235507 = -24						; size = 4
$T235506 = -20						; size = 4
$T235497 = -16						; size = 4
$T235493 = -12						; size = 4
$T235492 = -8						; size = 4
_pPlot$ = -4						; size = 4
_pCity$ = 8						; size = 4
?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::CanEverMoveSpyTo, COMDAT
; _this$ = ecx

; 1040 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1041 : 	// allow moving into empty spaces
; 1042 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN4@CanEverMov

; 1043 : 	{
; 1044 : 		return true;

	mov	al, 1
	jmp	$LN5@CanEverMov
$LN4@CanEverMov:

; 1045 : 	}
; 1046 : 
; 1047 : 	CvPlot* pPlot = pCity->plot();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	DWORD PTR _pPlot$[ebp], eax

; 1048 : 	CvAssertMsg(pPlot, "No plot() for pCity");
; 1049 : 	if(!pPlot)

	cmp	DWORD PTR _pPlot$[ebp], 0
	jne	SHORT $LN3@CanEverMov

; 1050 : 	{
; 1051 : 		return false;

	xor	al, al
	jmp	$LN5@CanEverMov
$LN3@CanEverMov:

; 1052 : 	}
; 1053 : 
; 1054 : 	if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(pCity->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	DWORD PTR $T235492[ebp], ecx
	mov	edx, DWORD PTR $T235492[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235493[ebp], eax
	mov	ecx, DWORD PTR $T235493[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T235497[ebp], ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, DWORD PTR $T235497[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CanEverMov

; 1055 : 	{
; 1056 : 		return false;

	xor	al, al
	jmp	SHORT $LN5@CanEverMov
$LN2@CanEverMov:

; 1057 : 	}
; 1058 : 
; 1059 : 	// check to see if the plot can be seen
; 1060 : 	if(!pPlot->isRevealed(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	DWORD PTR $T235506[ebp], ecx
	mov	edx, DWORD PTR $T235506[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235507[ebp], eax
	mov	ecx, DWORD PTR $T235507[ebp]
	shr	ecx, 5
	mov	DWORD PTR _uiOffset$235516[ebp], ecx
	mov	edx, DWORD PTR _uiOffset$235516[ebp]
	shl	edx, 5
	mov	ecx, DWORD PTR $T235507[ebp]
	sub	ecx, edx
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _uiOffset$235516[ebp]
	mov	edx, DWORD PTR _pPlot$[ebp]
	and	eax, DWORD PTR [edx+ecx*4+8]
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@CanEverMov

; 1061 : 	{
; 1062 : 		return false;

	xor	al, al
	jmp	SHORT $LN5@CanEverMov
$LN1@CanEverMov:

; 1063 : 	}
; 1064 : 
; 1065 : 	return true;

	mov	al, 1
$LN5@CanEverMov:

; 1066 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::CanEverMoveSpyTo
_TEXT	ENDS
PUBLIC	?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::CanMoveSpyTo
EXTRN	?isCapital@CvCity@@QBE_NXZ:PROC			; CvCity::isCapital
; Function compile flags: /Odtp
;	COMDAT ?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T235566 = -32						; size = 4
$T235562 = -28						; size = 4
$T235561 = -24						; size = 4
$T235552 = -20						; size = 4
$T235543 = -16						; size = 4
$T235523 = -12						; size = 4
_pCityEspionage$ = -8					; size = 4
_ePlayerID$ = -4					; size = 4
_pCity$ = 8						; size = 4
_uiSpyIndex$ = 12					; size = 4
_bAsDiplomat$ = 16					; size = 1
?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z PROC ; CvPlayerEspionage::CanMoveSpyTo, COMDAT
; _this$ = ecx

; 1070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1071 : 	// This allows the player to move the spy off the board
; 1072 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN9@CanMoveSpy

; 1073 : 	{
; 1074 : 		return true;

	mov	al, 1
	jmp	$LN10@CanMoveSpy
$LN9@CanMoveSpy:

; 1075 : 	}
; 1076 : 
; 1077 : 	if(!CanEverMoveSpyTo(pCity))

	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@CanMoveSpy

; 1078 : 	{
; 1079 : 		return false;

	xor	al, al
	jmp	$LN10@CanMoveSpy
$LN8@CanMoveSpy:

; 1080 : 	}
; 1081 : 
; 1082 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1083 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235523[ebp], eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	ecx, DWORD PTR $T235523[ebp]
	jb	SHORT $LN7@CanMoveSpy

; 1084 : 	{
; 1085 : 		return false;

	xor	al, al
	jmp	$LN10@CanMoveSpy
$LN7@CanMoveSpy:

; 1086 : 	}
; 1087 : 
; 1088 : 	// check to see if there is someone already there
; 1089 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 1090 : 	CvAssertMsg(pCityEspionage, "pCityEspionage is null");
; 1091 : 	if(!pCityEspionage)

	cmp	DWORD PTR _pCityEspionage$[ebp], 0
	jne	SHORT $LN16@CanMoveSpy

; 1092 : 	{
; 1093 : 		return false;

	xor	al, al
	jmp	$LN10@CanMoveSpy

; 1094 : 	}
; 1095 : 
; 1096 : 	PlayerTypes ePlayerID = m_pPlayer->GetID();

$LN16@CanMoveSpy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _ePlayerID$[ebp], ecx

; 1097 : 	if(pCityEspionage->m_aiSpyAssignment[ePlayerID] != -1)

	mov	edx, DWORD PTR _ePlayerID$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [eax+edx*4+4], -1
	je	SHORT $LN5@CanMoveSpy

; 1098 : 	{
; 1099 : 		return false;

	xor	al, al
	jmp	$LN10@CanMoveSpy
$LN5@CanMoveSpy:

; 1100 : 	}
; 1101 : 
; 1102 : 	if (bAsDiplomat)

	movzx	ecx, BYTE PTR _bAsDiplomat$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@CanMoveSpy

; 1103 : 	{
; 1104 : 		// diplomatic spy must be in capital
; 1105 : 		if (!pCity->isCapital() || pCity->getOwner() == m_pPlayer->GetID())

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CanMoveSpy
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T235543[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T235552[ebp], ecx
	mov	edx, DWORD PTR $T235543[ebp]
	cmp	edx, DWORD PTR $T235552[ebp]
	jne	SHORT $LN3@CanMoveSpy
$LN2@CanMoveSpy:

; 1106 : 		{
; 1107 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@CanMoveSpy
$LN3@CanMoveSpy:

; 1108 : 		}
; 1109 : 
; 1110 : 		if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(pCity->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	DWORD PTR $T235561[ebp], ecx
	mov	edx, DWORD PTR $T235561[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235562[ebp], eax
	mov	ecx, DWORD PTR $T235562[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T235566[ebp], ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, DWORD PTR $T235566[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@CanMoveSpy

; 1111 : 		{
; 1112 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@CanMoveSpy
$LN4@CanMoveSpy:

; 1113 : 		}
; 1114 : 	}
; 1115 : 
; 1116 : 	return true;

	mov	al, 1
$LN10@CanMoveSpy:

; 1117 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ENDP ; CvPlayerEspionage::CanMoveSpyTo
_TEXT	ENDS
PUBLIC	??_C@_08BGBKMPGH@Diplomat?$AA@			; `string'
PUBLIC	??_C@_0L@HGGFBAAD@Unassigned?$AA@		; `string'
PUBLIC	??_C@_0BA@CPONHCA@Moving?5spy?0?5?$CFd?0?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo
;	COMDAT ??_C@_08BGBKMPGH@Diplomat?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_08BGBKMPGH@Diplomat?$AA@ DB 'Diplomat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HGGFBAAD@Unassigned?$AA@
CONST	SEGMENT
??_C@_0L@HGGFBAAD@Unassigned?$AA@ DB 'Unassigned', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CPONHCA@Moving?5spy?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BA@CPONHCA@Moving?5spy?0?5?$CFd?0?$AA@ DB 'Moving spy, %d,', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$3
__ehfuncinfo$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
_TEXT	SEGMENT
tv373 = -212						; size = 4
tv420 = -208						; size = 4
tv371 = -204						; size = 4
tv200 = -200						; size = 4
tv369 = -196						; size = 4
tv387 = -192						; size = 4
_this$ = -188						; size = 4
$T235673 = -184						; size = 4
$T235669 = -180						; size = 4
$T235656 = -176						; size = 4
$T235652 = -172						; size = 4
$T235639 = -168						; size = 4
$T235631 = -164						; size = 4
$T235613 = -160						; size = 4
$T235601 = -156						; size = 4
$T235589 = -152						; size = 4
$T235580 = -148						; size = 4
$T235572 = -144						; size = 28
$T235571 = -116						; size = 28
$T235570 = -88						; size = 28
_strMsg$222778 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_pCityEspionage$222773 = -28				; size = 4
_iGoal$222776 = -24					; size = 4
_iRate$222775 = -20					; size = 4
_pOldCity$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_uiSpyIndex$ = 12					; size = 4
_bAsDiplomat$ = 16					; size = 1
?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z PROC ; CvPlayerEspionage::MoveSpyTo, COMDAT
; _this$ = ecx

; 1121 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1122 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1123 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T235580[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T235580[ebp]
	jb	SHORT $LN13@MoveSpyTo

; 1124 : 	{
; 1125 : 		return false;

	xor	al, al
	jmp	$LN14@MoveSpyTo
$LN13@MoveSpyTo:

; 1126 : 	}
; 1127 : 
; 1128 : 	if(!CanMoveSpyTo(pCity, uiSpyIndex, bAsDiplomat))

	movzx	eax, BYTE PTR _bAsDiplomat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::CanMoveSpyTo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@MoveSpyTo

; 1129 : 	{
; 1130 : 		return false;

	xor	al, al
	jmp	$LN14@MoveSpyTo
$LN12@MoveSpyTo:

; 1131 : 	}
; 1132 : 
; 1133 : 	CvCity* pOldCity = NULL;

	mov	DWORD PTR _pOldCity$[ebp], 0

; 1134 : 
; 1135 : 	if(IsSpyInCity(uiSpyIndex))

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@MoveSpyTo

; 1136 : 	{
; 1137 : 		pOldCity = GetCityWithSpy(uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pOldCity$[ebp], eax

; 1138 : 		// trying to move into a city where the spy is already at
; 1139 : 		if(pCity == pOldCity)

	mov	ecx, DWORD PTR _pCity$[ebp]
	cmp	ecx, DWORD PTR _pOldCity$[ebp]
	jne	SHORT $LN10@MoveSpyTo

; 1140 : 		{
; 1141 : 			return true;

	mov	al, 1
	jmp	$LN14@MoveSpyTo
$LN10@MoveSpyTo:

; 1142 : 		}
; 1143 : 
; 1144 : 		if(!ExtractSpyFromCity(uiSpyIndex))

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@MoveSpyTo

; 1145 : 		{
; 1146 : 			CvAssertMsg(false, "Failed to extract spy");
; 1147 : 			return false;

	xor	al, al
	jmp	$LN14@MoveSpyTo
$LN11@MoveSpyTo:

; 1148 : 		}
; 1149 : 	}
; 1150 : 
; 1151 : 	if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN8@MoveSpyTo

; 1152 : 	{
; 1153 : 		CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$222773[ebp], eax

; 1154 : 		CvAssertMsg(pCityEspionage, "Could not get CvCityEspionage from pCity");
; 1155 : 		if(!pCityEspionage)

	cmp	DWORD PTR _pCityEspionage$222773[ebp], 0
	jne	SHORT $LN24@MoveSpyTo

; 1156 : 		{
; 1157 : 			return false;

	xor	al, al
	jmp	$LN14@MoveSpyTo

; 1158 : 		}
; 1159 : 
; 1160 : 		m_aSpyList[uiSpyIndex].m_iCityX = pCity->getX();

$LN24@MoveSpyTo:
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR $T235589[ebp], edx
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T235589[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 1161 : 		m_aSpyList[uiSpyIndex].m_iCityY = pCity->getY();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR $T235601[ebp], eax
	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T235601[ebp]
	mov	DWORD PTR [eax+ecx+8], edx

; 1162 : 		pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] = uiSpyIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235613[ebp], edx
	mov	eax, DWORD PTR $T235613[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$222773[ebp]
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 1163 : 		m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_TRAVELLING;

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax+16], 1

; 1164 : 		m_aSpyList[uiSpyIndex].m_bIsDiplomat = bAsDiplomat;

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, BYTE PTR _bAsDiplomat$[ebp]
	mov	BYTE PTR [edx+eax+24], cl

; 1165 : 		int iRate = CalcPerTurn(SPY_STATE_TRAVELLING, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _iRate$222775[ebp], eax

; 1166 : 		int iGoal = CalcRequired(SPY_STATE_TRAVELLING, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
	mov	DWORD PTR _iGoal$222776[ebp], eax

; 1167 : 		pCityEspionage->SetActivity(m_pPlayer->GetID(), 0, iRate, iGoal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235631[ebp], edx
	mov	eax, DWORD PTR _iGoal$222776[ebp]
	push	eax
	mov	ecx, DWORD PTR _iRate$222775[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T235631[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCityEspionage$222773[ebp]
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity
$LN8@MoveSpyTo:

; 1168 : 	}
; 1169 : 
; 1170 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN6@MoveSpyTo

; 1171 : 	{
; 1172 : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1173 : 		strMsg.Format("Moving spy, %d,", uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@CPONHCA@Moving?5spy?0?5?$CFd?0?$AA@
	lea	edx, DWORD PTR _strMsg$222778[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1174 : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235639[ebp], eax
	mov	edx, DWORD PTR $T235639[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T235570[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv387[ebp], eax
	mov	eax, DWORD PTR tv387[ebp]
	mov	DWORD PTR tv369[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv369[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T235570[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1175 : 		strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1176 : 		if(pOldCity)

	cmp	DWORD PTR _pOldCity$[ebp], 0
	je	$LN5@MoveSpyTo

; 1177 : 		{
; 1178 : 			strMsg += GET_PLAYER(pOldCity->getOwner()).getCivilizationShortDescription();

	mov	edx, DWORD PTR _pOldCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T235652[ebp], eax
	mov	ecx, DWORD PTR $T235652[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235656[ebp], ecx
	mov	ecx, DWORD PTR $T235656[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1179 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1180 : 			strMsg += pOldCity->getName();

	lea	edx, DWORD PTR $T235571[ebp]
	push	edx
	mov	ecx, DWORD PTR _pOldCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv200[ebp], eax
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR tv371[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv371[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T235571[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1181 : 		}
; 1182 : 		else

	jmp	SHORT $LN4@MoveSpyTo
$LN5@MoveSpyTo:

; 1183 : 		{
; 1184 : 			strMsg += "Unassigned";

	push	OFFSET ??_C@_0L@HGGFBAAD@Unassigned?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1185 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN4@MoveSpyTo:

; 1186 : 		}
; 1187 : 		strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1188 : 
; 1189 : 		if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN3@MoveSpyTo

; 1190 : 		{
; 1191 : 			strMsg += GET_PLAYER(pCity->getOwner()).getCivilizationShortDescription();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T235669[ebp], eax
	mov	ecx, DWORD PTR $T235669[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235673[ebp], ecx
	mov	ecx, DWORD PTR $T235673[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1192 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1193 : 			strMsg += pCity->getName();

	lea	edx, DWORD PTR $T235572[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv420[ebp], eax
	mov	eax, DWORD PTR tv420[ebp]
	mov	DWORD PTR tv373[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv373[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T235572[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1194 : 		}
; 1195 : 		else

	jmp	SHORT $LN2@MoveSpyTo
$LN3@MoveSpyTo:

; 1196 : 		{
; 1197 : 			strMsg += "Unassigned";

	push	OFFSET ??_C@_0L@HGGFBAAD@Unassigned?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1198 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@MoveSpyTo:

; 1199 : 		}
; 1200 : 		strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1201 : 
; 1202 : 		if (bAsDiplomat)

	movzx	edx, BYTE PTR _bAsDiplomat$[ebp]
	test	edx, edx
	je	SHORT $LN1@MoveSpyTo

; 1203 : 		{
; 1204 : 			strMsg += "Diplomat";

	push	OFFSET ??_C@_08BGBKMPGH@Diplomat?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@MoveSpyTo:

; 1205 : 		}
; 1206 : 		strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1207 : 
; 1208 : 		LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$222778[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 1209 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@MoveSpyTo:

; 1210 : 
; 1211 : 	return true;

	mov	al, 1
$LN14@MoveSpyTo:

; 1212 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$0:
	lea	ecx, DWORD PTR _strMsg$222778[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$1:
	lea	ecx, DWORD PTR $T235570[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$2:
	lea	ecx, DWORD PTR $T235571[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$3:
	lea	ecx, DWORD PTR $T235572[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ENDP ; CvPlayerEspionage::MoveSpyTo
; Function compile flags: /Odtp
;	COMDAT ?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
tv229 = -92						; size = 4
_this$ = -88						; size = 4
$T235827 = -84						; size = 4
$T235818 = -80						; size = 4
$T235814 = -76						; size = 4
$T235805 = -72						; size = 4
$T235804 = -68						; size = 4
$T235795 = -64						; size = 4
$T235750 = -56						; size = 4
$T235738 = -52						; size = 4
$T235734 = -45						; size = 1
$T235723 = -44						; size = 4
$T235719 = -37						; size = 1
_iMapY$235786 = -36					; size = 4
_iMapX$235785 = -32					; size = 4
$T235712 = -28						; size = 4
$T235693 = -24						; size = 4
_pPlot$ = -20						; size = 4
_bHadSurveillance$ = -13				; size = 1
_iCityY$ = -12						; size = 4
_pCity$ = -8						; size = 4
_iCityX$ = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z PROC	; CvPlayerEspionage::ExtractSpyFromCity, COMDAT
; _this$ = ecx

; 1216 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1217 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1218 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T235693[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T235693[ebp]
	jb	SHORT $LN5@ExtractSpy

; 1219 : 	{
; 1220 : 		return false;

	xor	al, al
	jmp	$LN6@ExtractSpy
$LN5@ExtractSpy:

; 1221 : 	}
; 1222 : 
; 1223 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@ExtractSpy

; 1224 : 	{
; 1225 : 		return true;

	mov	al, 1
	jmp	$LN6@ExtractSpy
$LN4@ExtractSpy:

; 1226 : 	}
; 1227 : 
; 1228 : 	bool bHadSurveillance = HasEstablishedSurveillance(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	mov	BYTE PTR _bHadSurveillance$[ebp], al

; 1229 : 
; 1230 : 	int iCityX = m_aSpyList[uiSpyIndex].m_iCityX;

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _iCityX$[ebp], eax

; 1231 : 	int iCityY = m_aSpyList[uiSpyIndex].m_iCityY;

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR _iCityY$[ebp], ecx

; 1232 : 
; 1233 : 	m_aSpyList[uiSpyIndex].m_iCityX = -1;

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx+4], -1

; 1234 : 	m_aSpyList[uiSpyIndex].m_iCityY = -1;

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx+8], -1

; 1235 : 	m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_UNASSIGNED;

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx+16], 0

; 1236 : 
; 1237 : 	CvPlot* pPlot = GC.getMap().plot(iCityX, iCityY);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T235712[ebp], edx
	cmp	DWORD PTR _iCityX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN22@ExtractSpy
	cmp	DWORD PTR _iCityY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN23@ExtractSpy
$LN22@ExtractSpy:
	mov	DWORD PTR _pPlot$[ebp], 0
	jmp	$LN24@ExtractSpy
$LN23@ExtractSpy:
	mov	eax, DWORD PTR $T235712[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T235719[ebp], cl
	mov	edx, DWORD PTR $T235712[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T235723[ebp], eax
	movzx	ecx, BYTE PTR $T235719[ebp]
	test	ecx, ecx
	je	SHORT $LN35@ExtractSpy
	cmp	DWORD PTR _iCityX$[ebp], 0
	jge	SHORT $LN34@ExtractSpy
	mov	eax, DWORD PTR _iCityX$[ebp]
	cdq
	idiv	DWORD PTR $T235723[ebp]
	add	edx, DWORD PTR $T235723[ebp]
	mov	DWORD PTR _iMapX$235785[ebp], edx
	jmp	SHORT $LN36@ExtractSpy
	jmp	SHORT $LN35@ExtractSpy
$LN34@ExtractSpy:
	mov	edx, DWORD PTR _iCityX$[ebp]
	cmp	edx, DWORD PTR $T235723[ebp]
	jl	SHORT $LN35@ExtractSpy
	mov	eax, DWORD PTR _iCityX$[ebp]
	cdq
	idiv	DWORD PTR $T235723[ebp]
	mov	DWORD PTR _iMapX$235785[ebp], edx
	jmp	SHORT $LN36@ExtractSpy
$LN35@ExtractSpy:
	mov	eax, DWORD PTR _iCityX$[ebp]
	mov	DWORD PTR _iMapX$235785[ebp], eax
$LN36@ExtractSpy:
	mov	ecx, DWORD PTR $T235712[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T235734[ebp], dl
	mov	eax, DWORD PTR $T235712[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T235738[ebp], ecx
	movzx	edx, BYTE PTR $T235734[ebp]
	test	edx, edx
	je	SHORT $LN45@ExtractSpy
	cmp	DWORD PTR _iCityY$[ebp], 0
	jge	SHORT $LN44@ExtractSpy
	mov	eax, DWORD PTR _iCityY$[ebp]
	cdq
	idiv	DWORD PTR $T235738[ebp]
	add	edx, DWORD PTR $T235738[ebp]
	mov	DWORD PTR _iMapY$235786[ebp], edx
	jmp	SHORT $LN46@ExtractSpy
	jmp	SHORT $LN45@ExtractSpy
$LN44@ExtractSpy:
	mov	eax, DWORD PTR _iCityY$[ebp]
	cmp	eax, DWORD PTR $T235738[ebp]
	jl	SHORT $LN45@ExtractSpy
	mov	eax, DWORD PTR _iCityY$[ebp]
	cdq
	idiv	DWORD PTR $T235738[ebp]
	mov	DWORD PTR _iMapY$235786[ebp], edx
	jmp	SHORT $LN46@ExtractSpy
$LN45@ExtractSpy:
	mov	ecx, DWORD PTR _iCityY$[ebp]
	mov	DWORD PTR _iMapY$235786[ebp], ecx
$LN46@ExtractSpy:
	mov	edx, DWORD PTR _iMapY$235786[ebp]
	push	edx
	mov	eax, DWORD PTR _iMapX$235785[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235712[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN26@ExtractSpy
	mov	ecx, DWORD PTR $T235712[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T235750[ebp], edx
	mov	eax, DWORD PTR _iMapY$235786[ebp]
	imul	eax, DWORD PTR $T235750[ebp]
	add	eax, DWORD PTR _iMapX$235785[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T235712[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv229[ebp], eax
	jmp	SHORT $LN27@ExtractSpy
$LN26@ExtractSpy:
	mov	DWORD PTR tv229[ebp], 0
$LN27@ExtractSpy:
	mov	edx, DWORD PTR tv229[ebp]
	mov	DWORD PTR _pPlot$[ebp], edx
$LN24@ExtractSpy:

; 1238 : 	CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1239 : 	if(!pPlot)

	cmp	DWORD PTR _pPlot$[ebp], 0
	jne	SHORT $LN3@ExtractSpy

; 1240 : 	{
; 1241 : 		return false;

	xor	al, al
	jmp	$LN6@ExtractSpy
$LN3@ExtractSpy:

; 1242 : 	}
; 1243 : 
; 1244 : 	CvCity* pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax

; 1245 : 	CvAssertMsg(pCity, "No city in plot pointed to by spy");
; 1246 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN2@ExtractSpy

; 1247 : 	{
; 1248 : 		return false;

	xor	al, al
	jmp	$LN6@ExtractSpy
$LN2@ExtractSpy:

; 1249 : 	}
; 1250 : 
; 1251 : 	// turn off visibility of city
; 1252 : 	if(bHadSurveillance)

	movzx	eax, BYTE PTR _bHadSurveillance$[ebp]
	test	eax, eax
	je	SHORT $LN65@ExtractSpy

; 1253 : 	{
; 1254 : 		pCity->plot()->changeAdjacentSight(m_pPlayer->getTeam(), GC.getESPIONAGE_SURVEILLANCE_SIGHT_RANGE(), false, NO_INVISIBLE, NO_DIRECTION, false);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7948
	mov	DWORD PTR $T235795[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	DWORD PTR $T235804[ebp], eax
	mov	ecx, DWORD PTR $T235804[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T235805[ebp], eax
	push	0
	push	-1
	push	-1
	push	0
	mov	eax, DWORD PTR $T235795[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235805[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z ; CvPlot::changeAdjacentSight

; 1255 : 	}
; 1256 : 
; 1257 : 	pCity->GetCityEspionage()->m_aiSpyAssignment[m_pPlayer->GetID()] = -1;

$LN65@ExtractSpy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T235814[ebp], ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	DWORD PTR $T235818[ebp], eax
	mov	edx, DWORD PTR $T235814[ebp]
	mov	eax, DWORD PTR $T235818[ebp]
	mov	DWORD PTR [eax+edx*4], -1

; 1258 : 	pCity->GetCityEspionage()->ResetProgress(m_pPlayer->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T235827[ebp], eax
	mov	ecx, DWORD PTR $T235827[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ecx, eax
	call	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress

; 1259 : 
; 1260 : 	return true;

	mov	al, 1
$LN6@ExtractSpy:

; 1261 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ENDP	; CvPlayerEspionage::ExtractSpyFromCity
_TEXT	ENDS
PUBLIC	??_C@_0CK@BHECLLMC@TXT_KEY_NOTIFICATION_SUMMARY_SPY@ ; `string'
PUBLIC	??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ; GetLocalizedText<char const *,char const *,char const *>
PUBLIC	??_C@_0CC@MNHMLBPG@TXT_KEY_NOTIFICATION_SPY_PROMOTE@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CK@BHECLLMC@TXT_KEY_NOTIFICATION_SUMMARY_SPY@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CK@BHECLLMC@TXT_KEY_NOTIFICATION_SUMMARY_SPY@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SUMMARY_SPY_PROMOTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MNHMLBPG@TXT_KEY_NOTIFICATION_SPY_PROMOTE@
CONST	SEGMENT
??_C@_0CC@MNHMLBPG@TXT_KEY_NOTIFICATION_SPY_PROMOTE@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_PROMOTED', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$1
__ehfuncinfo$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -112						; size = 4
$T235860 = -108						; size = 4
$T235856 = -104						; size = 4
$T235852 = -100						; size = 4
$T235845 = -96						; size = 4
_strBuffer$222816 = -92					; size = 28
_strSummary$222828 = -64				; size = 28
__$ArrayPad$ = -36					; size = 4
_szOldPromotion$222814 = -32				; size = 4
_szSpyName$222813 = -28					; size = 4
_szNewPromotion$222815 = -24				; size = 4
_pNotifications$222811 = -20				; size = 4
_eOriginalRank$222809 = -16				; size = 4
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z PROC		; CvPlayerEspionage::LevelUpSpy, COMDAT
; _this$ = ecx

; 1265 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1266 : 	// if the spy can level up and it's not dead
; 1267 : 	if(m_aSpyList[uiSpyIndex].m_eRank < NUM_SPY_RANKS - 1 && m_aSpyList[uiSpyIndex].m_eSpyState != SPY_STATE_DEAD)

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+12], 2
	jge	$LN3@LevelUpSpy
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+16], 8
	je	$LN3@LevelUpSpy

; 1268 : 	{
; 1269 : 		CvSpyRank eOriginalRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+12]
	mov	DWORD PTR _eOriginalRank$222809[ebp], eax

; 1270 : 
; 1271 : 		// announce promotion through notification
; 1272 : 		m_aSpyList[uiSpyIndex].m_eRank = (CvSpyRank)(m_aSpyList[uiSpyIndex].m_eRank + 1);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T235845[ebp], ecx
	mov	eax, DWORD PTR $T235845[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+edx+12], ecx

; 1273 : 
; 1274 : 		CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222811[ebp], eax

; 1275 : 		if(pNotifications)

	cmp	DWORD PTR _pNotifications$222811[ebp], 0
	je	$LN3@LevelUpSpy

; 1276 : 		{
; 1277 : 			const char* szSpyName = m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235852[ebp], edx
	mov	ecx, DWORD PTR $T235852[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR _szSpyName$222813[ebp], eax

; 1278 : 			const char* szOldPromotion = GetSpyRankName(eOriginalRank);

	mov	ecx, DWORD PTR _eOriginalRank$222809[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR _szOldPromotion$222814[ebp], eax

; 1279 : 			const char* szNewPromotion = GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235856[ebp], edx
	mov	ecx, DWORD PTR $T235856[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR _szNewPromotion$222815[ebp], eax

; 1280 : 			CvString strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_PROMOTED", szSpyName, szOldPromotion, szNewPromotion);

	lea	eax, DWORD PTR _szNewPromotion$222815[ebp]
	push	eax
	lea	ecx, DWORD PTR _szOldPromotion$222814[ebp]
	push	ecx
	lea	edx, DWORD PTR _szSpyName$222813[ebp]
	push	edx
	push	OFFSET ??_C@_0CC@MNHMLBPG@TXT_KEY_NOTIFICATION_SPY_PROMOTE@
	lea	eax, DWORD PTR _strBuffer$222816[ebp]
	push	eax
	call	??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ; GetLocalizedText<char const *,char const *,char const *>
	add	esp, 20					; 00000014H
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1281 : 			CvString strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SUMMARY_SPY_PROMOTED", szSpyName);

	mov	ecx, DWORD PTR _szSpyName$222813[ebp]
	push	ecx
	push	OFFSET ??_C@_0CK@BHECLLMC@TXT_KEY_NOTIFICATION_SUMMARY_SPY@
	lea	edx, DWORD PTR _strSummary$222828[ebp]
	push	edx
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1282 : 			pNotifications->Add(NOTIFICATION_SPY_PROMOTION, strBuffer, strSummary, -1, -1, 0);

	lea	ecx, DWORD PTR _strSummary$222828[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T235860[ebp], eax
	push	-1
	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR $T235860[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBuffer$222816[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	180382033				; 0ac06951H
	mov	ecx, DWORD PTR _pNotifications$222811[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 1283 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$222828[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strBuffer$222816[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@LevelUpSpy:

; 1284 : 	}
; 1285 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _strBuffer$222816[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$1:
	lea	ecx, DWORD PTR _strSummary$222828[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z ENDP		; CvPlayerEspionage::LevelUpSpy
PUBLIC	?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ; CvPlayerEspionage::UpdateCity
PUBLIC	?UpdateSpies@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::UpdateSpies
; Function compile flags: /Odtp
;	COMDAT ?UpdateSpies@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T235883 = -12						; size = 4
_pCity$222838 = -8					; size = 4
_uiSpy$222834 = -4					; size = 4
?UpdateSpies@CvPlayerEspionage@@QAEXXZ PROC		; CvPlayerEspionage::UpdateSpies, COMDAT
; _this$ = ecx

; 1289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1290 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$222834[ebp], 0
	jmp	SHORT $LN4@UpdateSpie
$LN3@UpdateSpie:
	mov	eax, DWORD PTR _uiSpy$222834[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$222834[ebp], eax
$LN4@UpdateSpie:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235883[ebp], edx
	mov	eax, DWORD PTR _uiSpy$222834[ebp]
	cmp	eax, DWORD PTR $T235883[ebp]
	jae	SHORT $LN5@UpdateSpie

; 1291 : 	{
; 1292 : 		CvCity* pCity = GetCityWithSpy(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$222834[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$222838[ebp], eax

; 1293 : 		if (pCity)

	cmp	DWORD PTR _pCity$222838[ebp], 0
	je	SHORT $LN1@UpdateSpie

; 1294 : 		{
; 1295 : 			UpdateCity(pCity);

	mov	edx, DWORD PTR _pCity$222838[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ; CvPlayerEspionage::UpdateCity
$LN1@UpdateSpie:

; 1296 : 		}

	jmp	SHORT $LN3@UpdateSpie
$LN5@UpdateSpie:

; 1297 : 	}
; 1298 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSpies@CvPlayerEspionage@@QAEXXZ ENDP		; CvPlayerEspionage::UpdateSpies
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T235938 = -32						; size = 4
$T235926 = -28						; size = 4
$T235914 = -24						; size = 4
$T235905 = -20						; size = 4
$T235898 = -16						; size = 4
$T235889 = -12						; size = 4
_pCityEspionage$ = -8					; size = 4
_iSpyIndex$ = -4					; size = 4
_pCity$ = 8						; size = 4
?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z PROC	; CvPlayerEspionage::UpdateCity, COMDAT
; _this$ = ecx

; 1302 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1303 : 	CvAssertMsg(pCity, "pCity is null");
; 1304 : 	if(pCity == NULL)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN3@UpdateCity

; 1305 : 	{
; 1306 : 		return;

	jmp	$LN4@UpdateCity
$LN3@UpdateCity:

; 1307 : 	}
; 1308 : 
; 1309 : 	int iSpyIndex = GetSpyIndexInCity(pCity);

	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	mov	DWORD PTR _iSpyIndex$[ebp], eax

; 1310 : 
; 1311 : 	// if there isn't a spy in the city, bail out
; 1312 : 	if(iSpyIndex == -1)

	cmp	DWORD PTR _iSpyIndex$[ebp], -1
	jne	SHORT $LN2@UpdateCity

; 1313 : 	{
; 1314 : 		return;

	jmp	$LN4@UpdateCity
$LN2@UpdateCity:

; 1315 : 	}
; 1316 : 
; 1317 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 1318 : 	CvAssertMsg(pCityEspionage, "pCityEspionage is null");
; 1319 : 	if(pCityEspionage == NULL)

	cmp	DWORD PTR _pCityEspionage$[ebp], 0
	jne	SHORT $LN1@UpdateCity

; 1320 : 	{
; 1321 : 		return;

	jmp	$LN4@UpdateCity
$LN1@UpdateCity:

; 1322 : 	}
; 1323 : 	pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()] = CalcPerTurn(m_aSpyList[iSpyIndex].m_eSpyState, pCity, -1);

	mov	ecx, DWORD PTR _iSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T235889[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235898[ebp], edx
	push	-1
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235889[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	ecx, DWORD PTR $T235898[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	mov	DWORD PTR [edx+ecx*4+532], eax

; 1324 : 	pCityEspionage->m_aiLastPotential[m_pPlayer->GetID()] = CalcPerTurn(m_aSpyList[iSpyIndex].m_eSpyState, pCity, iSpyIndex);

	mov	eax, DWORD PTR _iSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235905[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T235914[ebp], ecx
	mov	edx, DWORD PTR _iSpyIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235905[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	ecx, DWORD PTR $T235914[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	mov	DWORD PTR [edx+ecx*4+444], eax

; 1325 : 	pCityEspionage->m_aiRate[m_pPlayer->GetID()] = pCityEspionage->m_aiLastPotential[m_pPlayer->GetID()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235926[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T235938[ebp], edx
	mov	eax, DWORD PTR $T235938[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	mov	edx, DWORD PTR $T235926[ebp]
	mov	esi, DWORD PTR _pCityEspionage$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+444]
	mov	DWORD PTR [ecx+eax*4+180], edx
$LN4@UpdateCity:

; 1326 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ENDP	; CvPlayerEspionage::UpdateCity
_TEXT	ENDS
EXTRN	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
EXTRN	?GetEspionageModifier@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetEspionageModifier
EXTRN	?GetEspionageModifier@CvCity@@QBEHXZ:PROC	; CvCity::GetEspionageModifier
EXTRN	?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getSpyRatePercent
EXTRN	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ:PROC ; CvGame::getGameSpeedInfo
EXTRN	?getYieldRateTimes100@CvCity@@QBEHW4YieldTypes@@_N@Z:PROC ; CvCity::getYieldRateTimes100
; Function compile flags: /Odtp
;	COMDAT ?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z
_TEXT	SEGMENT
tv203 = -88						; size = 4
tv64 = -84						; size = 4
_this$ = -80						; size = 4
$T235996 = -76						; size = 4
$T235984 = -72						; size = 4
$T235974 = -68						; size = 4
$T235968 = -64						; size = 4
$T235964 = -60						; size = 4
$T235960 = -56						; size = 4
$T235956 = -52						; size = 4
$T235944 = -48						; size = 4
_iSpyRank$222878 = -44					; size = 4
_iResult$222876 = -40					; size = 4
_iSpyRank$222873 = -36					; size = 4
_iTheirPoliciesEspionageModifier$222867 = -32		; size = 4
_iCityEspionageModifier$222865 = -28			; size = 4
_iPlayerEspionageModifier$222866 = -24			; size = 4
_iBaseYieldRate$222864 = -20				; size = 4
_iMyPoliciesEspionageModifier$222868 = -16		; size = 4
_iResult$222870 = -12					; size = 4
_eCityOwner$222863 = -8					; size = 4
_iFinalModifier$222869 = -4				; size = 4
_iSpyState$ = 8						; size = 4
_pCity$ = 12						; size = 4
_iSpyIndex$ = 16					; size = 4
?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z PROC ; CvPlayerEspionage::CalcPerTurn, COMDAT
; _this$ = ecx

; 1353 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 1354 : 	CvAssertMsg(pCity, "pCity is null");
; 1355 : 	switch(iSpyState)

	mov	eax, DWORD PTR _iSpyState$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 6
	ja	$LN12@CalcPerTur
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN42@CalcPerTur[edx*4]
$LN11@CalcPerTur:

; 1356 : 	{
; 1357 : 	case SPY_STATE_TRAVELLING:
; 1358 : 	{
; 1359 : 		return 1;

	mov	eax, 1
	jmp	$LN14@CalcPerTur

; 1360 : 	}
; 1361 : 	break;

	jmp	$LN12@CalcPerTur
$LN10@CalcPerTur:

; 1362 : 	case SPY_STATE_SURVEILLANCE:
; 1363 : 	{
; 1364 : 		return 1;

	mov	eax, 1
	jmp	$LN14@CalcPerTur

; 1365 : 	}
; 1366 : 	break;

	jmp	$LN12@CalcPerTur
$LN9@CalcPerTur:

; 1367 : 	case SPY_STATE_GATHERING_INTEL:
; 1368 : 	{
; 1369 : 		if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN8@CalcPerTur

; 1370 : 		{
; 1371 : 			PlayerTypes eCityOwner = pCity->getOwner();

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _eCityOwner$222863[ebp], ecx

; 1372 : 			int iBaseYieldRate = pCity->getYieldRateTimes100(YIELD_SCIENCE, false);

	push	0
	push	3
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getYieldRateTimes100@CvCity@@QBEHW4YieldTypes@@_N@Z ; CvCity::getYieldRateTimes100
	mov	DWORD PTR _iBaseYieldRate$222864[ebp], eax

; 1373 : 			iBaseYieldRate *= GC.getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7932
	mov	DWORD PTR $T235956[ebp], edx
	mov	eax, DWORD PTR _iBaseYieldRate$222864[ebp]
	imul	eax, DWORD PTR $T235956[ebp]
	mov	DWORD PTR _iBaseYieldRate$222864[ebp], eax

; 1374 : 			iBaseYieldRate *= GC.getGame().getGameSpeedInfo().getSpyRatePercent();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T235960[ebp], ecx
	mov	ecx, DWORD PTR $T235960[ebp]
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getSpyRatePercent
	imul	eax, DWORD PTR _iBaseYieldRate$222864[ebp]
	mov	DWORD PTR _iBaseYieldRate$222864[ebp], eax

; 1375 : 			iBaseYieldRate /= 10000;

	mov	eax, DWORD PTR _iBaseYieldRate$222864[ebp]
	cdq
	mov	ecx, 10000				; 00002710H
	idiv	ecx
	mov	DWORD PTR _iBaseYieldRate$222864[ebp], eax

; 1376 : 			int iCityEspionageModifier = pCity->GetEspionageModifier();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetEspionageModifier@CvCity@@QBEHXZ	; CvCity::GetEspionageModifier
	mov	DWORD PTR _iCityEspionageModifier$222865[ebp], eax

; 1377 : 			int iPlayerEspionageModifier = GET_PLAYER(eCityOwner).GetEspionageModifier();

	mov	edx, DWORD PTR _eCityOwner$222863[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235964[ebp], edx
	mov	ecx, DWORD PTR $T235964[ebp]
	call	?GetEspionageModifier@CvPlayer@@QBEHXZ	; CvPlayer::GetEspionageModifier
	mov	DWORD PTR _iPlayerEspionageModifier$222866[ebp], eax

; 1378 : 			int iTheirPoliciesEspionageModifier = GET_PLAYER(eCityOwner).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_STEAL_TECH_SLOWER_MODIFIER);

	mov	eax, DWORD PTR _eCityOwner$222863[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T235968[ebp], eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T235968[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iTheirPoliciesEspionageModifier$222867[ebp], eax

; 1379 : 			int iMyPoliciesEspionageModifier = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_STEAL_TECH_FASTER_MODIFIER);

	push	40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	DWORD PTR _iMyPoliciesEspionageModifier$222868[ebp], eax

; 1380 : 			int iFinalModifier = (iBaseYieldRate * (100 + iCityEspionageModifier + iPlayerEspionageModifier + iTheirPoliciesEspionageModifier + iMyPoliciesEspionageModifier)) / 100;

	mov	edx, DWORD PTR _iPlayerEspionageModifier$222866[ebp]
	mov	eax, DWORD PTR _iCityEspionageModifier$222865[ebp]
	lea	ecx, DWORD PTR [eax+edx+100]
	add	ecx, DWORD PTR _iTheirPoliciesEspionageModifier$222867[ebp]
	add	ecx, DWORD PTR _iMyPoliciesEspionageModifier$222868[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _iBaseYieldRate$222864[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iFinalModifier$222869[ebp], eax

; 1381 : 
; 1382 : 			int iResult = max(iFinalModifier, 1);

	mov	DWORD PTR $T235944[ebp], 1
	mov	edx, DWORD PTR _iFinalModifier$222869[ebp]
	cmp	edx, DWORD PTR $T235944[ebp]
	jge	SHORT $LN30@CalcPerTur
	lea	eax, DWORD PTR $T235944[ebp]
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN31@CalcPerTur
$LN30@CalcPerTur:
	lea	ecx, DWORD PTR _iFinalModifier$222869[ebp]
	mov	DWORD PTR tv203[ebp], ecx
$LN31@CalcPerTur:
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR $T235974[ebp], edx
	mov	eax, DWORD PTR $T235974[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iResult$222870[ebp], ecx

; 1383 : 			if(iSpyIndex >= 0)

	cmp	DWORD PTR _iSpyIndex$[ebp], 0
	jl	SHORT $LN7@CalcPerTur

; 1384 : 			{
; 1385 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1386 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eCachedRank;
; 1387 : 				iSpyRank += m_aSpyList[iSpyIndex].m_iInfluenceMajorCivSpyRankBonusCached;
; 1388 : 				iMyPoliciesEspionageModifier = m_aSpyList[iSpyIndex].m_iMyPoliciesEspionageModifierCached;
; 1389 : 				iFinalModifier = (iBaseYieldRate * (100 + iCityEspionageModifier + iPlayerEspionageModifier + iTheirPoliciesEspionageModifier + iMyPoliciesEspionageModifier)) / 100;
; 1390 : 
; 1391 : 				iResult = MAX(iFinalModifier, 1);
; 1392 : #else
; 1393 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eRank;

	mov	edx, DWORD PTR _iSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _iSpyRank$222873[ebp], edx

; 1394 : 				iSpyRank += m_pPlayer->GetCulture()->GetInfluenceMajorCivSpyRankBonus(eCityOwner);

	mov	eax, DWORD PTR _eCityOwner$222863[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
	add	eax, DWORD PTR _iSpyRank$222873[ebp]
	mov	DWORD PTR _iSpyRank$222873[ebp], eax

; 1395 : #endif
; 1396 : 				iResult *= 100 + (GC.getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT() * iSpyRank);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7928
	mov	DWORD PTR $T235984[ebp], edx
	mov	eax, DWORD PTR $T235984[ebp]
	imul	eax, DWORD PTR _iSpyRank$222873[ebp]
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iResult$222870[ebp]
	mov	DWORD PTR _iResult$222870[ebp], eax

; 1397 : 				iResult /= 100;

	mov	eax, DWORD PTR _iResult$222870[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iResult$222870[ebp], eax
$LN7@CalcPerTur:

; 1398 : 			}
; 1399 : 
; 1400 : 			return iResult;

	mov	eax, DWORD PTR _iResult$222870[ebp]
	jmp	SHORT $LN14@CalcPerTur
$LN8@CalcPerTur:

; 1401 : 		}
; 1402 : 	}
; 1403 : 	break;

	jmp	SHORT $LN12@CalcPerTur
$LN6@CalcPerTur:

; 1404 : 	case SPY_STATE_RIG_ELECTION:
; 1405 : 	{
; 1406 : 		if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN5@CalcPerTur

; 1407 : 		{
; 1408 : 			int iResult = 1;

	mov	DWORD PTR _iResult$222876[ebp], 1

; 1409 : 			if(iSpyIndex >= 0)

	cmp	DWORD PTR _iSpyIndex$[ebp], 0
	jl	SHORT $LN4@CalcPerTur

; 1410 : 			{
; 1411 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1412 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eCachedRank;
; 1413 : 				iSpyRank += m_aSpyList[iSpyIndex].m_iInfluenceCityStateSpyRankBonusCached;
; 1414 : #else
; 1415 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eRank;

	mov	edx, DWORD PTR _iSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _iSpyRank$222878[ebp], edx

; 1416 : 				iSpyRank += m_pPlayer->GetCulture()->GetInfluenceCityStateSpyRankBonus(pCity->getOwner());

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T235996[ebp], ecx
	mov	edx, DWORD PTR $T235996[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	add	eax, DWORD PTR _iSpyRank$222878[ebp]
	mov	DWORD PTR _iSpyRank$222878[ebp], eax

; 1417 : #endif
; 1418 : 				iResult = (iSpyRank + 1) * (iSpyRank + 1);

	mov	ecx, DWORD PTR _iSpyRank$222878[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _iSpyRank$222878[ebp]
	add	edx, 1
	imul	ecx, edx
	mov	DWORD PTR _iResult$222876[ebp], ecx
$LN4@CalcPerTur:

; 1419 : 			}
; 1420 : 			return iResult;

	mov	eax, DWORD PTR _iResult$222876[ebp]
	jmp	SHORT $LN14@CalcPerTur
$LN5@CalcPerTur:

; 1421 : 		}
; 1422 : 	}
; 1423 : 	break;

	jmp	SHORT $LN12@CalcPerTur
$LN3@CalcPerTur:

; 1424 : 	case SPY_STATE_COUNTER_INTEL:
; 1425 : 	{
; 1426 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN14@CalcPerTur

; 1427 : 	}
; 1428 : 	break;

	jmp	SHORT $LN12@CalcPerTur
$LN2@CalcPerTur:

; 1429 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 1430 : 	{
; 1431 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN14@CalcPerTur

; 1432 : 	}
; 1433 : 	break;

	jmp	SHORT $LN12@CalcPerTur
$LN1@CalcPerTur:

; 1434 : 	case SPY_STATE_SCHMOOZE:
; 1435 : 	{
; 1436 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN14@CalcPerTur
$LN12@CalcPerTur:

; 1437 : 	}
; 1438 : 	break;
; 1439 : 	}
; 1440 : 
; 1441 : 	CvAssertMsg(false, "CalcPerTurn cannot handle that iSpyState");
; 1442 : 	return -1;

	or	eax, -1
$LN14@CalcPerTur:

; 1443 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN42@CalcPerTur:
	DD	$LN11@CalcPerTur
	DD	$LN10@CalcPerTur
	DD	$LN9@CalcPerTur
	DD	$LN6@CalcPerTur
	DD	$LN3@CalcPerTur
	DD	$LN2@CalcPerTur
	DD	$LN1@CalcPerTur
?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ENDP ; CvPlayerEspionage::CalcPerTurn
_TEXT	ENDS
EXTRN	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getLeaguePercent
EXTRN	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ:PROC ; CvGame::GetTurnsUntilMinorCivElection
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
EXTRN	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceSurveillanceTime
; Function compile flags: /Odtp
;	COMDAT ?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z
_TEXT	SEGMENT
tv64 = -48						; size = 4
_this$ = -44						; size = 4
$T236039 = -40						; size = 4
$T236035 = -36						; size = 4
$T236031 = -32						; size = 4
$T236024 = -28						; size = 4
$T236020 = -24						; size = 4
$T236008 = -20						; size = 4
_ePlayer$222898 = -16					; size = 4
_iMaxTechCostAdjusted$222902 = -12			; size = 4
_uiMaxTechCostAdjusted$222901 = -8			; size = 4
_iTime$222894 = -4					; size = 4
_iSpyState$ = 8						; size = 4
_pCity$ = 12						; size = 4
___formal$ = 16						; size = 4
?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z PROC ; CvPlayerEspionage::CalcRequired, COMDAT
; _this$ = ecx

; 1458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 1459 : #endif
; 1460 : 
; 1461 : 	switch(iSpyState)

	mov	eax, DWORD PTR _iSpyState$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 5
	ja	$LN10@CalcRequir
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN34@CalcRequir[edx*4]
$LN9@CalcRequir:

; 1462 : 	{
; 1463 : 	case SPY_STATE_TRAVELLING:
; 1464 : 	{
; 1465 : 		return iSpyTurnsToTravel;

	mov	eax, 1
	jmp	$LN12@CalcRequir

; 1466 : 	}
; 1467 : 	break;

	jmp	$LN10@CalcRequir
$LN8@CalcRequir:

; 1468 : 	case SPY_STATE_SURVEILLANCE:
; 1469 : 	{
; 1470 : 		int iTime = 3;

	mov	DWORD PTR _iTime$222894[ebp], 3

; 1471 : 		if (pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN7@CalcRequir

; 1472 : 		{
; 1473 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1474 : 			if (iSpyIndex >= 0)
; 1475 : 			{
; 1476 : 				iTime = m_aSpyList[iSpyIndex].m_iInfluenceSurveillanceTimeCached;
; 1477 : 			}
; 1478 : #else
; 1479 : 			iTime = m_pPlayer->GetCulture()->GetInfluenceSurveillanceTime(pCity->getOwner());

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T236008[ebp], ecx
	mov	edx, DWORD PTR $T236008[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSurveillanceTime
	mov	DWORD PTR _iTime$222894[ebp], eax
$LN7@CalcRequir:

; 1480 : #endif
; 1481 : 		}
; 1482 : 		return iTime;

	mov	eax, DWORD PTR _iTime$222894[ebp]
	jmp	$LN12@CalcRequir

; 1483 : 	}
; 1484 : 	break;

	jmp	$LN10@CalcRequir
$LN6@CalcRequir:

; 1485 : 	case SPY_STATE_GATHERING_INTEL:
; 1486 : 	{
; 1487 : 		if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN5@CalcRequir

; 1488 : 		{
; 1489 : 			PlayerTypes ePlayer = pCity->getOwner();

	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _ePlayer$222898[ebp], edx

; 1490 : 			CvAssertMsg(!GET_PLAYER(ePlayer).isMinorCiv(), "Can't spy on a minor civ");
; 1491 : 			CvAssertMsg(!GET_PLAYER(ePlayer).isBarbarian(), "Can't spy on barbarians");
; 1492 : 			if(GET_PLAYER(ePlayer).isMinorCiv() || GET_PLAYER(ePlayer).isBarbarian())

	mov	eax, DWORD PTR _ePlayer$222898[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236020[ebp], eax
	mov	ecx, DWORD PTR $T236020[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@CalcRequir
	mov	edx, DWORD PTR _ePlayer$222898[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236024[ebp], edx
	mov	ecx, DWORD PTR $T236024[ebp]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@CalcRequir
$LN3@CalcRequir:

; 1493 : 			{
; 1494 : 				return -1;

	or	eax, -1
	jmp	SHORT $LN12@CalcRequir

; 1495 : 			}
; 1496 : 
; 1497 : 			CvAssertMsg(m_aiMaxTechCost[ePlayer] >= 0, "m_aiMaxTechCost[ePlayer] is below zero");
; 1498 : 			uint uiMaxTechCostAdjusted = m_aiMaxTechCost[ePlayer];			

$LN26@CalcRequir:
	mov	ecx, DWORD PTR _ePlayer$222898[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+824]
	mov	DWORD PTR _uiMaxTechCostAdjusted$222901[ebp], eax

; 1499 : 			uiMaxTechCostAdjusted *= GC.getESPIONAGE_GATHERING_INTEL_COST_PERCENT();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7924
	mov	DWORD PTR $T236031[ebp], ecx
	mov	edx, DWORD PTR _uiMaxTechCostAdjusted$222901[ebp]
	imul	edx, DWORD PTR $T236031[ebp]
	mov	DWORD PTR _uiMaxTechCostAdjusted$222901[ebp], edx

; 1500 : 			uiMaxTechCostAdjusted /= 100;

	mov	eax, DWORD PTR _uiMaxTechCostAdjusted$222901[ebp]
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR _uiMaxTechCostAdjusted$222901[ebp], eax

; 1501 : 			int iMaxTechCostAdjusted = uiMaxTechCostAdjusted;

	mov	edx, DWORD PTR _uiMaxTechCostAdjusted$222901[ebp]
	mov	DWORD PTR _iMaxTechCostAdjusted$222902[ebp], edx

; 1502 : 			CvAssertMsg(m_aiMaxTechCost[ePlayer] >= 0, "iMaxTechCostAdjusted is below zero. Overflow!");
; 1503 : 			return iMaxTechCostAdjusted;

	mov	eax, DWORD PTR _iMaxTechCostAdjusted$222902[ebp]
	jmp	SHORT $LN12@CalcRequir
$LN5@CalcRequir:

; 1504 : 		}
; 1505 : 	}
; 1506 : 	break;

	jmp	SHORT $LN10@CalcRequir
$LN2@CalcRequir:

; 1507 : 	case SPY_STATE_RIG_ELECTION:
; 1508 : 	{
; 1509 : 		return GC.getGame().GetTurnsUntilMinorCivElection();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236035[ebp], eax
	mov	ecx, DWORD PTR $T236035[ebp]
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	jmp	SHORT $LN12@CalcRequir

; 1510 : 	}
; 1511 : 	break;

	jmp	SHORT $LN10@CalcRequir
$LN1@CalcRequir:

; 1512 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 1513 : 	{
; 1514 : 		return (iSpyTurnsToMakeIntroductions * GC.getGame().getGameSpeedInfo().getLeaguePercent()) / 100;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236039[ebp], ecx
	mov	ecx, DWORD PTR $T236039[ebp]
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getLeaguePercent
	imul	eax, 5
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	jmp	SHORT $LN12@CalcRequir
$LN10@CalcRequir:

; 1515 : 	}
; 1516 : 	break;
; 1517 : 	}
; 1518 : 
; 1519 : 	CvAssertMsg(false, "CalcRequired cannot handle that iSpyState");
; 1520 : 	return -1;

	or	eax, -1
$LN12@CalcRequir:

; 1521 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN34@CalcRequir:
	DD	$LN9@CalcRequir
	DD	$LN8@CalcRequir
	DD	$LN6@CalcRequir
	DD	$LN2@CalcRequir
	DD	$LN10@CalcRequir
	DD	$LN1@CalcRequir
?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ENDP ; CvPlayerEspionage::CalcRequired
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BD@CEFEKIFC@TXT_KEY_SPY_RANK_2?$AA@	; `string'
PUBLIC	??_C@_0BD@PHJPLJB@TXT_KEY_SPY_RANK_1?$AA@	; `string'
PUBLIC	??_C@_0BD@BGGCMKNA@TXT_KEY_SPY_RANK_0?$AA@	; `string'
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CEFEKIFC@TXT_KEY_SPY_RANK_2?$AA@
CONST	SEGMENT
??_C@_0BD@CEFEKIFC@TXT_KEY_SPY_RANK_2?$AA@ DB 'TXT_KEY_SPY_RANK_2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PHJPLJB@TXT_KEY_SPY_RANK_1?$AA@
CONST	SEGMENT
??_C@_0BD@PHJPLJB@TXT_KEY_SPY_RANK_1?$AA@ DB 'TXT_KEY_SPY_RANK_1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGGCMKNA@TXT_KEY_SPY_RANK_0?$AA@
CONST	SEGMENT
??_C@_0BD@BGGCMKNA@TXT_KEY_SPY_RANK_0?$AA@ DB 'TXT_KEY_SPY_RANK_0', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_iRank$ = 8						; size = 4
?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z PROC	; CvPlayerEspionage::GetSpyRankName, COMDAT
; _this$ = ecx

; 1526 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1527 : 	switch(iRank)

	mov	eax, DWORD PTR _iRank$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@GetSpyRank
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@GetSpyRank
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN1@GetSpyRank
	jmp	SHORT $LN4@GetSpyRank
$LN3@GetSpyRank:

; 1528 : 	{
; 1529 : 	case SPY_RANK_RECRUIT:
; 1530 : 		return "TXT_KEY_SPY_RANK_0";

	mov	eax, OFFSET ??_C@_0BD@BGGCMKNA@TXT_KEY_SPY_RANK_0?$AA@
	jmp	SHORT $LN6@GetSpyRank

; 1531 : 		break;

	jmp	SHORT $LN4@GetSpyRank
$LN2@GetSpyRank:

; 1532 : 	case SPY_RANK_AGENT:
; 1533 : 		return "TXT_KEY_SPY_RANK_1";

	mov	eax, OFFSET ??_C@_0BD@PHJPLJB@TXT_KEY_SPY_RANK_1?$AA@
	jmp	SHORT $LN6@GetSpyRank

; 1534 : 		break;

	jmp	SHORT $LN4@GetSpyRank
$LN1@GetSpyRank:

; 1535 : 	case SPY_RANK_SPECIAL_AGENT:
; 1536 : 		return "TXT_KEY_SPY_RANK_2";

	mov	eax, OFFSET ??_C@_0BD@CEFEKIFC@TXT_KEY_SPY_RANK_2?$AA@
	jmp	SHORT $LN6@GetSpyRank
$LN4@GetSpyRank:

; 1537 : 		break;
; 1538 : 	}
; 1539 : 
; 1540 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN6@GetSpyRank:

; 1541 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ENDP	; CvPlayerEspionage::GetSpyRankName
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T236060 = -16						; size = 4
$T236048 = -12						; size = 4
_pCityEspionage$ = -8					; size = 4
_pCity$ = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z PROC ; CvPlayerEspionage::HasEstablishedSurveillance, COMDAT
; _this$ = ecx

; 1545 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1546 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1547 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236048[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236048[ebp]
	jb	SHORT $LN7@HasEstabli

; 1548 : 	{
; 1549 : 		return false;

	xor	al, al
	jmp	$LN8@HasEstabli
$LN7@HasEstabli:

; 1550 : 	}
; 1551 : 
; 1552 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@HasEstabli

; 1553 : 	{
; 1554 : 		return false;

	xor	al, al
	jmp	$LN8@HasEstabli
$LN6@HasEstabli:

; 1555 : 	}
; 1556 : 
; 1557 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 1558 : 	if(pCity == NULL)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN5@HasEstabli

; 1559 : 		return false;

	xor	al, al
	jmp	$LN8@HasEstabli
$LN5@HasEstabli:

; 1560 : 
; 1561 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 1562 : 	if(m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SURVEILLANCE && pCityEspionage->HasReachedGoal(m_pPlayer->GetID()))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+16], 2
	jne	SHORT $LN18@HasEstabli
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236060[ebp], edx
	mov	eax, DWORD PTR $T236060[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	call	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@HasEstabli

; 1563 : 	{
; 1564 : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@HasEstabli
	jmp	SHORT $LN3@HasEstabli

; 1565 : 	}
; 1566 : 	else if(m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_GATHERING_INTEL || m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_RIG_ELECTION || m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SCHMOOZE)

$LN18@HasEstabli:
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+edx+16], 3
	je	SHORT $LN1@HasEstabli
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+edx+16], 4
	je	SHORT $LN1@HasEstabli
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+edx+16], 7
	jne	SHORT $LN3@HasEstabli
$LN1@HasEstabli:

; 1567 : 	{
; 1568 : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@HasEstabli
$LN3@HasEstabli:

; 1569 : 	}
; 1570 : 
; 1571 : 	return false;

	xor	al, al
$LN8@HasEstabli:

; 1572 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ENDP ; CvPlayerEspionage::HasEstablishedSurveillance
_TEXT	ENDS
PUBLIC	?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::HasEstablishedSurveillanceInCity
; Function compile flags: /Odtp
;	COMDAT ?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T236091 = -16						; size = 4
_uiSpy$222939 = -12					; size = 4
_iX$ = -8						; size = 4
_iY$ = -4						; size = 4
_pCity$ = 8						; size = 4
?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::HasEstablishedSurveillanceInCity, COMDAT
; _this$ = ecx

; 1576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1577 : 	CvAssertMsg(pCity, "pCity is null");
; 1578 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN10@HasEstabli@2

; 1579 : 	{
; 1580 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@HasEstabli@2

; 1581 : 	}
; 1582 : 
; 1583 : 	int iX = pCity->getX();

$LN10@HasEstabli@2:
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _iX$[ebp], ecx

; 1584 : 	int iY = pCity->getY();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _iY$[ebp], eax

; 1585 : 
; 1586 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$222939[ebp], 0
	jmp	SHORT $LN4@HasEstabli@2
$LN3@HasEstabli@2:
	mov	ecx, DWORD PTR _uiSpy$222939[ebp]
	add	ecx, 1
	mov	DWORD PTR _uiSpy$222939[ebp], ecx
$LN4@HasEstabli@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T236091[ebp], eax
	mov	ecx, DWORD PTR _uiSpy$222939[ebp]
	cmp	ecx, DWORD PTR $T236091[ebp]
	jae	SHORT $LN2@HasEstabli@2

; 1587 : 	{
; 1588 : 		if(m_aSpyList[uiSpy].m_iCityX == iX && m_aSpyList[uiSpy].m_iCityY == iY && HasEstablishedSurveillance(uiSpy))

	mov	edx, DWORD PTR _uiSpy$222939[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx+4]
	cmp	edx, DWORD PTR _iX$[ebp]
	jne	SHORT $LN1@HasEstabli@2
	mov	eax, DWORD PTR _uiSpy$222939[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+8]
	cmp	eax, DWORD PTR _iY$[ebp]
	jne	SHORT $LN1@HasEstabli@2
	mov	ecx, DWORD PTR _uiSpy$222939[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@HasEstabli@2

; 1589 : 		{
; 1590 : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@HasEstabli@2
$LN1@HasEstabli@2:

; 1591 : 		}
; 1592 : 	}

	jmp	SHORT $LN3@HasEstabli@2
$LN2@HasEstabli@2:

; 1593 : 
; 1594 : 	return false;

	xor	al, al
$LN6@HasEstabli@2:

; 1595 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::HasEstablishedSurveillanceInCity
_TEXT	ENDS
PUBLIC	?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsAnySurveillanceEstablished
; Function compile flags: /Odtp
;	COMDAT ?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv176 = -92						; size = 4
tv191 = -88						; size = 4
_this$ = -84						; size = 4
$T236232 = -80						; size = 4
$T236218 = -72						; size = 4
$T236217 = -68						; size = 4
$T236172 = -64						; size = 4
$T236159 = -60						; size = 4
$T236155 = -56						; size = 4
$T236141 = -52						; size = 4
$T236137 = -45						; size = 1
$T236126 = -44						; size = 4
$T236122 = -37						; size = 1
_iMapY$236216 = -36					; size = 4
_iMapX$236215 = -32					; size = 4
$T236115 = -28						; size = 4
$T236111 = -24						; size = 4
$T236107 = -20						; size = 4
$T236103 = -16						; size = 4
_pPlot$222953 = -12					; size = 4
_pCity$222955 = -8					; size = 4
_uiSpy$222948 = -4					; size = 4
_eTargetPlayer$ = 8					; size = 4
?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::IsAnySurveillanceEstablished, COMDAT
; _this$ = ecx

; 1599 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1600 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$222948[ebp], 0
	jmp	SHORT $LN7@IsAnySurve
$LN6@IsAnySurve:
	mov	eax, DWORD PTR _uiSpy$222948[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$222948[ebp], eax
$LN7@IsAnySurve:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236103[ebp], edx
	mov	eax, DWORD PTR _uiSpy$222948[ebp]
	cmp	eax, DWORD PTR $T236103[ebp]
	jae	$LN5@IsAnySurve

; 1601 : 	{
; 1602 : 		// can't have established surveillance when not in a city
; 1603 : 		if(!IsSpyInCity(uiSpy))

	mov	ecx, DWORD PTR _uiSpy$222948[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@IsAnySurve

; 1604 : 		{
; 1605 : 			continue;

	jmp	SHORT $LN6@IsAnySurve
$LN4@IsAnySurve:

; 1606 : 		}
; 1607 : 
; 1608 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyList[uiSpy].m_iCityX, m_aSpyList[uiSpy].m_iCityY);

	mov	eax, DWORD PTR _uiSpy$222948[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236107[ebp], eax
	mov	edx, DWORD PTR _uiSpy$222948[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236111[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T236115[ebp], ecx
	mov	edx, DWORD PTR $T236107[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T236218[ebp], eax
	mov	ecx, DWORD PTR $T236111[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236217[ebp], edx
	cmp	DWORD PTR $T236217[ebp], -2147483647	; 80000001H
	je	SHORT $LN18@IsAnySurve
	cmp	DWORD PTR $T236218[ebp], -2147483647	; 80000001H
	jne	SHORT $LN19@IsAnySurve
$LN18@IsAnySurve:
	mov	DWORD PTR _pPlot$222953[ebp], 0
	jmp	$LN20@IsAnySurve
$LN19@IsAnySurve:
	mov	eax, DWORD PTR $T236115[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T236122[ebp], cl
	mov	edx, DWORD PTR $T236115[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236126[ebp], eax
	movzx	ecx, BYTE PTR $T236122[ebp]
	test	ecx, ecx
	je	SHORT $LN31@IsAnySurve
	cmp	DWORD PTR $T236217[ebp], 0
	jge	SHORT $LN30@IsAnySurve
	mov	eax, DWORD PTR $T236217[ebp]
	cdq
	idiv	DWORD PTR $T236126[ebp]
	add	edx, DWORD PTR $T236126[ebp]
	mov	DWORD PTR _iMapX$236215[ebp], edx
	jmp	SHORT $LN32@IsAnySurve
	jmp	SHORT $LN31@IsAnySurve
$LN30@IsAnySurve:
	mov	edx, DWORD PTR $T236217[ebp]
	cmp	edx, DWORD PTR $T236126[ebp]
	jl	SHORT $LN31@IsAnySurve
	mov	eax, DWORD PTR $T236217[ebp]
	cdq
	idiv	DWORD PTR $T236126[ebp]
	mov	DWORD PTR _iMapX$236215[ebp], edx
	jmp	SHORT $LN32@IsAnySurve
$LN31@IsAnySurve:
	mov	eax, DWORD PTR $T236217[ebp]
	mov	DWORD PTR _iMapX$236215[ebp], eax
$LN32@IsAnySurve:
	mov	ecx, DWORD PTR $T236115[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T236137[ebp], dl
	mov	eax, DWORD PTR $T236115[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T236141[ebp], ecx
	movzx	edx, BYTE PTR $T236137[ebp]
	test	edx, edx
	je	SHORT $LN41@IsAnySurve
	cmp	DWORD PTR $T236218[ebp], 0
	jge	SHORT $LN40@IsAnySurve
	mov	eax, DWORD PTR $T236218[ebp]
	cdq
	idiv	DWORD PTR $T236141[ebp]
	add	edx, DWORD PTR $T236141[ebp]
	mov	DWORD PTR _iMapY$236216[ebp], edx
	jmp	SHORT $LN42@IsAnySurve
	jmp	SHORT $LN41@IsAnySurve
$LN40@IsAnySurve:
	mov	eax, DWORD PTR $T236218[ebp]
	cmp	eax, DWORD PTR $T236141[ebp]
	jl	SHORT $LN41@IsAnySurve
	mov	eax, DWORD PTR $T236218[ebp]
	cdq
	idiv	DWORD PTR $T236141[ebp]
	mov	DWORD PTR _iMapY$236216[ebp], edx
	jmp	SHORT $LN42@IsAnySurve
$LN41@IsAnySurve:
	mov	ecx, DWORD PTR $T236218[ebp]
	mov	DWORD PTR _iMapY$236216[ebp], ecx
$LN42@IsAnySurve:
	cmp	DWORD PTR _iMapX$236215[ebp], 0
	jl	SHORT $LN46@IsAnySurve
	mov	edx, DWORD PTR $T236115[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236155[ebp], eax
	mov	ecx, DWORD PTR _iMapX$236215[ebp]
	cmp	ecx, DWORD PTR $T236155[ebp]
	jge	SHORT $LN46@IsAnySurve
	cmp	DWORD PTR _iMapY$236216[ebp], 0
	jl	SHORT $LN46@IsAnySurve
	mov	edx, DWORD PTR $T236115[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T236159[ebp], eax
	mov	ecx, DWORD PTR _iMapY$236216[ebp]
	cmp	ecx, DWORD PTR $T236159[ebp]
	jge	SHORT $LN46@IsAnySurve
	mov	DWORD PTR tv191[ebp], 1
	jmp	SHORT $LN44@IsAnySurve
$LN46@IsAnySurve:
	mov	DWORD PTR tv191[ebp], 0
$LN44@IsAnySurve:
	cmp	DWORD PTR tv191[ebp], 0
	je	SHORT $LN22@IsAnySurve
	mov	edx, DWORD PTR $T236115[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236172[ebp], eax
	mov	ecx, DWORD PTR _iMapY$236216[ebp]
	imul	ecx, DWORD PTR $T236172[ebp]
	add	ecx, DWORD PTR _iMapX$236215[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T236115[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv176[ebp], ecx
	jmp	SHORT $LN23@IsAnySurve
$LN22@IsAnySurve:
	mov	DWORD PTR tv176[ebp], 0
$LN23@IsAnySurve:
	mov	eax, DWORD PTR tv176[ebp]
	mov	DWORD PTR _pPlot$222953[ebp], eax
$LN20@IsAnySurve:

; 1609 : 		CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1610 : 		if(!pPlot)

	cmp	DWORD PTR _pPlot$222953[ebp], 0
	jne	SHORT $LN3@IsAnySurve

; 1611 : 		{
; 1612 : 			return false;

	xor	al, al
	jmp	SHORT $LN8@IsAnySurve
$LN3@IsAnySurve:

; 1613 : 		}
; 1614 : 		CvCity* pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$222953[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$222955[ebp], eax

; 1615 : 		CvAssertMsg(pCity, "There is not a city at the specified plot");
; 1616 : 		if(!pCity)

	cmp	DWORD PTR _pCity$222955[ebp], 0
	jne	SHORT $LN2@IsAnySurve

; 1617 : 		{
; 1618 : 			return false;

	xor	al, al
	jmp	SHORT $LN8@IsAnySurve
$LN2@IsAnySurve:

; 1619 : 		}
; 1620 : 		if(HasEstablishedSurveillance(uiSpy) && pCity->getOwner() == eTargetPlayer)

	mov	ecx, DWORD PTR _uiSpy$222948[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@IsAnySurve
	mov	eax, DWORD PTR _pCity$222955[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T236232[ebp], ecx
	mov	edx, DWORD PTR $T236232[ebp]
	cmp	edx, DWORD PTR _eTargetPlayer$[ebp]
	jne	SHORT $LN1@IsAnySurve

; 1621 : 		{
; 1622 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsAnySurve
$LN1@IsAnySurve:

; 1623 : 		}
; 1624 : 	}

	jmp	$LN6@IsAnySurve
$LN5@IsAnySurve:

; 1625 : 
; 1626 : 	return false;

	xor	al, al
$LN8@IsAnySurve:

; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::IsAnySurveillanceEstablished
_TEXT	ENDS
PUBLIC	?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z		; CvPlayerEspionage::IsDiplomat
; Function compile flags: /Odtp
;	COMDAT ?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T236238 = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsDiplomat, COMDAT
; _this$ = ecx

; 1630 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1631 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1632 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236238[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236238[ebp]
	jb	SHORT $LN6@IsDiplomat

; 1633 : 	{
; 1634 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@IsDiplomat

; 1635 : 	}
; 1636 : 
; 1637 : 	return m_aSpyList[uiSpyIndex].m_bIsDiplomat;

$LN6@IsDiplomat:
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx+eax+24]
$LN2@IsDiplomat:

; 1638 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsDiplomat
_TEXT	ENDS
PUBLIC	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::IsSchmoozing
; Function compile flags: /Odtp
;	COMDAT ?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T236247 = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsSchmoozing, COMDAT
; _this$ = ecx

; 1641 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1643 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236247[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236247[ebp]
	jb	SHORT $LN8@IsSchmoozi

; 1644 : 	{
; 1645 : 		return false;

	xor	al, al
	jmp	SHORT $LN4@IsSchmoozi

; 1646 : 	}
; 1647 : 
; 1648 : 	if (m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SCHMOOZE)

$LN8@IsSchmoozi:
	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+16], 7
	jne	SHORT $LN2@IsSchmoozi

; 1649 : 	{
; 1650 : 		return true;

	mov	al, 1
	jmp	SHORT $LN4@IsSchmoozi

; 1651 : 	}
; 1652 : 	else

	jmp	SHORT $LN4@IsSchmoozi
$LN2@IsSchmoozi:

; 1653 : 	{
; 1654 : 		return false;

	xor	al, al
$LN4@IsSchmoozi:

; 1655 : 	}
; 1656 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsSchmoozing
_TEXT	ENDS
PUBLIC	?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::IsAnySchmoozing
; Function compile flags: /Odtp
;	COMDAT ?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
tv174 = -88						; size = 4
tv189 = -84						; size = 4
_this$ = -80						; size = 4
$T236371 = -72						; size = 4
$T236370 = -68						; size = 4
$T236325 = -64						; size = 4
$T236312 = -60						; size = 4
$T236308 = -56						; size = 4
$T236294 = -52						; size = 4
$T236290 = -45						; size = 1
$T236279 = -44						; size = 4
$T236275 = -37						; size = 1
_iMapY$236334 = -36					; size = 4
_iMapX$236333 = -32					; size = 4
$T236268 = -28						; size = 4
$T236264 = -24						; size = 4
$T236260 = -20						; size = 4
$T236256 = -16						; size = 4
_pPlotCity$222981 = -12					; size = 4
_pPlot$222979 = -8					; size = 4
_uiSpy$222974 = -4					; size = 4
_pCity$ = 8						; size = 4
?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::IsAnySchmoozing, COMDAT
; _this$ = ecx

; 1659 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 1660 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$222974[ebp], 0
	jmp	SHORT $LN7@IsAnySchmo
$LN6@IsAnySchmo:
	mov	eax, DWORD PTR _uiSpy$222974[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$222974[ebp], eax
$LN7@IsAnySchmo:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236256[ebp], edx
	mov	eax, DWORD PTR _uiSpy$222974[ebp]
	cmp	eax, DWORD PTR $T236256[ebp]
	jae	$LN5@IsAnySchmo

; 1661 : 	{
; 1662 : 		// can't have established surveillance when not in a city
; 1663 : 		if(!IsSpyInCity(uiSpy))

	mov	ecx, DWORD PTR _uiSpy$222974[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@IsAnySchmo

; 1664 : 		{
; 1665 : 			continue;

	jmp	SHORT $LN6@IsAnySchmo
$LN4@IsAnySchmo:

; 1666 : 		}
; 1667 : 
; 1668 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyList[uiSpy].m_iCityX, m_aSpyList[uiSpy].m_iCityY);

	mov	eax, DWORD PTR _uiSpy$222974[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236260[ebp], eax
	mov	edx, DWORD PTR _uiSpy$222974[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236264[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T236268[ebp], ecx
	mov	edx, DWORD PTR $T236260[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T236371[ebp], eax
	mov	ecx, DWORD PTR $T236264[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236370[ebp], edx
	cmp	DWORD PTR $T236370[ebp], -2147483647	; 80000001H
	je	SHORT $LN18@IsAnySchmo
	cmp	DWORD PTR $T236371[ebp], -2147483647	; 80000001H
	jne	SHORT $LN19@IsAnySchmo
$LN18@IsAnySchmo:
	mov	DWORD PTR _pPlot$222979[ebp], 0
	jmp	$LN20@IsAnySchmo
$LN19@IsAnySchmo:
	mov	eax, DWORD PTR $T236268[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T236275[ebp], cl
	mov	edx, DWORD PTR $T236268[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236279[ebp], eax
	movzx	ecx, BYTE PTR $T236275[ebp]
	test	ecx, ecx
	je	SHORT $LN31@IsAnySchmo
	cmp	DWORD PTR $T236370[ebp], 0
	jge	SHORT $LN30@IsAnySchmo
	mov	eax, DWORD PTR $T236370[ebp]
	cdq
	idiv	DWORD PTR $T236279[ebp]
	add	edx, DWORD PTR $T236279[ebp]
	mov	DWORD PTR _iMapX$236333[ebp], edx
	jmp	SHORT $LN32@IsAnySchmo
	jmp	SHORT $LN31@IsAnySchmo
$LN30@IsAnySchmo:
	mov	edx, DWORD PTR $T236370[ebp]
	cmp	edx, DWORD PTR $T236279[ebp]
	jl	SHORT $LN31@IsAnySchmo
	mov	eax, DWORD PTR $T236370[ebp]
	cdq
	idiv	DWORD PTR $T236279[ebp]
	mov	DWORD PTR _iMapX$236333[ebp], edx
	jmp	SHORT $LN32@IsAnySchmo
$LN31@IsAnySchmo:
	mov	eax, DWORD PTR $T236370[ebp]
	mov	DWORD PTR _iMapX$236333[ebp], eax
$LN32@IsAnySchmo:
	mov	ecx, DWORD PTR $T236268[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T236290[ebp], dl
	mov	eax, DWORD PTR $T236268[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T236294[ebp], ecx
	movzx	edx, BYTE PTR $T236290[ebp]
	test	edx, edx
	je	SHORT $LN41@IsAnySchmo
	cmp	DWORD PTR $T236371[ebp], 0
	jge	SHORT $LN40@IsAnySchmo
	mov	eax, DWORD PTR $T236371[ebp]
	cdq
	idiv	DWORD PTR $T236294[ebp]
	add	edx, DWORD PTR $T236294[ebp]
	mov	DWORD PTR _iMapY$236334[ebp], edx
	jmp	SHORT $LN42@IsAnySchmo
	jmp	SHORT $LN41@IsAnySchmo
$LN40@IsAnySchmo:
	mov	eax, DWORD PTR $T236371[ebp]
	cmp	eax, DWORD PTR $T236294[ebp]
	jl	SHORT $LN41@IsAnySchmo
	mov	eax, DWORD PTR $T236371[ebp]
	cdq
	idiv	DWORD PTR $T236294[ebp]
	mov	DWORD PTR _iMapY$236334[ebp], edx
	jmp	SHORT $LN42@IsAnySchmo
$LN41@IsAnySchmo:
	mov	ecx, DWORD PTR $T236371[ebp]
	mov	DWORD PTR _iMapY$236334[ebp], ecx
$LN42@IsAnySchmo:
	cmp	DWORD PTR _iMapX$236333[ebp], 0
	jl	SHORT $LN46@IsAnySchmo
	mov	edx, DWORD PTR $T236268[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236308[ebp], eax
	mov	ecx, DWORD PTR _iMapX$236333[ebp]
	cmp	ecx, DWORD PTR $T236308[ebp]
	jge	SHORT $LN46@IsAnySchmo
	cmp	DWORD PTR _iMapY$236334[ebp], 0
	jl	SHORT $LN46@IsAnySchmo
	mov	edx, DWORD PTR $T236268[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T236312[ebp], eax
	mov	ecx, DWORD PTR _iMapY$236334[ebp]
	cmp	ecx, DWORD PTR $T236312[ebp]
	jge	SHORT $LN46@IsAnySchmo
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN44@IsAnySchmo
$LN46@IsAnySchmo:
	mov	DWORD PTR tv189[ebp], 0
$LN44@IsAnySchmo:
	cmp	DWORD PTR tv189[ebp], 0
	je	SHORT $LN22@IsAnySchmo
	mov	edx, DWORD PTR $T236268[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T236325[ebp], eax
	mov	ecx, DWORD PTR _iMapY$236334[ebp]
	imul	ecx, DWORD PTR $T236325[ebp]
	add	ecx, DWORD PTR _iMapX$236333[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T236268[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv174[ebp], ecx
	jmp	SHORT $LN23@IsAnySchmo
$LN22@IsAnySchmo:
	mov	DWORD PTR tv174[ebp], 0
$LN23@IsAnySchmo:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR _pPlot$222979[ebp], eax
$LN20@IsAnySchmo:

; 1669 : 		CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1670 : 		if(!pPlot)

	cmp	DWORD PTR _pPlot$222979[ebp], 0
	jne	SHORT $LN3@IsAnySchmo

; 1671 : 		{
; 1672 : 			return false;

	xor	al, al
	jmp	SHORT $LN8@IsAnySchmo
$LN3@IsAnySchmo:

; 1673 : 		}
; 1674 : 		CvCity* pPlotCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$222979[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pPlotCity$222981[ebp], eax

; 1675 : 		CvAssertMsg(pPlotCity, "There is not a city at the specified plot");
; 1676 : 		if(!pPlotCity)

	cmp	DWORD PTR _pPlotCity$222981[ebp], 0
	jne	SHORT $LN2@IsAnySchmo

; 1677 : 		{
; 1678 : 			return false;

	xor	al, al
	jmp	SHORT $LN8@IsAnySchmo
$LN2@IsAnySchmo:

; 1679 : 		}
; 1680 : 		if(pCity == pPlotCity && IsSchmoozing(uiSpy))

	mov	ecx, DWORD PTR _pCity$[ebp]
	cmp	ecx, DWORD PTR _pPlotCity$222981[ebp]
	jne	SHORT $LN1@IsAnySchmo
	mov	edx, DWORD PTR _uiSpy$222974[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSchmoozing
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@IsAnySchmo

; 1681 : 		{
; 1682 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsAnySchmo
$LN1@IsAnySchmo:

; 1683 : 		}
; 1684 : 	}

	jmp	$LN6@IsAnySchmo
$LN5@IsAnySchmo:

; 1685 : 
; 1686 : 	return false;

	xor	al, al
$LN8@IsAnySchmo:

; 1687 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::IsAnySchmoozing
_TEXT	ENDS
PUBLIC	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::CanStageCoup
EXTRN	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ:PROC ; CvMinorCivAI::GetAlly
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
; Function compile flags: /Odtp
;	COMDAT ?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T236407 = -32						; size = 4
$T236398 = -28						; size = 4
$T236394 = -24						; size = 4
$T236382 = -20						; size = 4
_eMinorCivAlly$ = -16					; size = 4
_pCity$ = -12						; size = 4
_eCityOwner$ = -8					; size = 4
_pMinorCivAI$ = -4					; size = 4
_uiSpyIndex$ = 8					; size = 4
?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::CanStageCoup, COMDAT
; _this$ = ecx

; 1691 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1692 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1693 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236382[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236382[ebp]
	jb	SHORT $LN6@CanStageCo

; 1694 : 	{
; 1695 : 		return false;

	xor	al, al
	jmp	$LN7@CanStageCo
$LN6@CanStageCo:

; 1696 : 	}
; 1697 : 
; 1698 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@CanStageCo

; 1699 : 	{
; 1700 : 		return false;

	xor	al, al
	jmp	$LN7@CanStageCo
$LN5@CanStageCo:

; 1701 : 	}
; 1702 : 
; 1703 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 1704 : 	CvAssertMsg(pCity, "pCity is null!");
; 1705 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN4@CanStageCo

; 1706 : 	{
; 1707 : 		return false;

	xor	al, al
	jmp	$LN7@CanStageCo
$LN4@CanStageCo:

; 1708 : 	}
; 1709 : 
; 1710 : 	if(!HasEstablishedSurveillance(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@CanStageCo

; 1711 : 	{
; 1712 : 		return false;

	xor	al, al
	jmp	SHORT $LN7@CanStageCo

; 1713 : 	}
; 1714 : 
; 1715 : 	PlayerTypes eCityOwner = pCity->getOwner();

$LN13@CanStageCo:
	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR _eCityOwner$[ebp], eax

; 1716 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236394[ebp], ecx
	mov	ecx, DWORD PTR $T236394[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CanStageCo

; 1717 : 	{
; 1718 : 		return false;

	xor	al, al
	jmp	SHORT $LN7@CanStageCo
$LN2@CanStageCo:

; 1719 : 	}
; 1720 : 
; 1721 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	eax, DWORD PTR _eCityOwner$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236398[ebp], eax
	mov	ecx, DWORD PTR $T236398[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	DWORD PTR _pMinorCivAI$[ebp], eax

; 1722 : 	PlayerTypes eMinorCivAlly = pMinorCivAI->GetAlly();

	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eMinorCivAlly$[ebp], eax

; 1723 : 
; 1724 : 	if(eMinorCivAlly != NO_PLAYER && eMinorCivAlly != m_pPlayer->GetID())

	cmp	DWORD PTR _eMinorCivAlly$[ebp], -1
	je	SHORT $LN1@CanStageCo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236407[ebp], eax
	mov	ecx, DWORD PTR _eMinorCivAlly$[ebp]
	cmp	ecx, DWORD PTR $T236407[ebp]
	je	SHORT $LN1@CanStageCo

; 1725 : 	{
; 1726 : 		return true;

	mov	al, 1
	jmp	SHORT $LN7@CanStageCo
$LN1@CanStageCo:

; 1727 : 	}
; 1728 : 
; 1729 : 	return false;

	xor	al, al
$LN7@CanStageCo:

; 1730 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::CanStageCoup
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	__real@00000000
PUBLIC	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess
EXTRN	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
EXTRN	__fltused:DWORD
;	COMDAT __real@42c80000
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
CONST	ENDS
;	COMDAT ?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
tv199 = -124						; size = 4
tv197 = -120						; size = 4
_this$ = -116						; size = 4
$T236448 = -112						; size = 4
$T236439 = -108						; size = 4
$T236435 = -104						; size = 4
$T236425 = -100						; size = 4
$T236421 = -96						; size = 4
_iAllySpyIndex$223015 = -92				; size = 4
_iResultPercentage$ = -88				; size = 4
_iMyInfluence$ = -84					; size = 4
_fNobodyBonus$ = -80					; size = 4
_fSpyLevelDeltaThree$ = -76				; size = 4
_pCityEspionage$ = -72					; size = 4
_iDeltaInfluence$ = -68					; size = 4
_fSpyMultipier$ = -64					; size = 4
_iAllyInfluence$ = -60					; size = 4
_fSpyLevelDeltaZero$ = -56				; size = 4
_pCity$ = -52						; size = 4
_fSpyLevelDeltaOne$ = -48				; size = 4
_fSpyLevelDeltaFour$ = -44				; size = 4
_fAllySpyValue$ = -40					; size = 4
_eCityOwner$ = -36					; size = 4
_pMinorCivAI$ = -32					; size = 4
_eAllyPlayer$ = -28					; size = 4
_iAllySpyRank$ = -24					; size = 4
_bNoAllySpy$ = -17					; size = 1
_fSpyLevelDeltaTwo$ = -16				; size = 4
_fMySpyValue$ = -12					; size = 4
_iMySpyRank$ = -8					; size = 4
_fMultiplyConstant$ = -4				; size = 4
_uiSpyIndex$ = 8					; size = 4
?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z PROC	; CvPlayerEspionage::GetCoupChanceOfSuccess, COMDAT
; _this$ = ecx

; 1734 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 1735 : 	// if you can't stage a coup, then the likelihood is zero!
; 1736 : 	if(!CanStageCoup(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN22@GetCoupCha

; 1737 : 	{
; 1738 : 		return 0;

	xor	eax, eax
	jmp	$LN23@GetCoupCha
$LN22@GetCoupCha:

; 1739 : 	}
; 1740 : 
; 1741 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 1742 : 	CvAssertMsg(pCity, "No city");
; 1743 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN21@GetCoupCha

; 1744 : 	{
; 1745 : 		return 0;

	xor	eax, eax
	jmp	$LN23@GetCoupCha
$LN21@GetCoupCha:

; 1746 : 	}
; 1747 : 
; 1748 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 1749 : 	CvAssertMsg(pCityEspionage, "No city espionage");
; 1750 : 	if(!pCityEspionage)

	cmp	DWORD PTR _pCityEspionage$[ebp], 0
	jne	SHORT $LN20@GetCoupCha

; 1751 : 	{
; 1752 : 		return 0;

	xor	eax, eax
	jmp	$LN23@GetCoupCha
$LN20@GetCoupCha:

; 1753 : 	}
; 1754 : 
; 1755 : 	PlayerTypes eCityOwner = pCity->getOwner();

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _eCityOwner$[ebp], ecx

; 1756 : 	CvAssertMsg(GET_PLAYER(eCityOwner).isMinorCiv(), "Owner is not a minor civ");
; 1757 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236421[ebp], edx
	mov	ecx, DWORD PTR $T236421[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN19@GetCoupCha

; 1758 : 	{
; 1759 : 		return 0;

	xor	eax, eax
	jmp	$LN23@GetCoupCha
$LN19@GetCoupCha:

; 1760 : 	}
; 1761 : 
; 1762 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236425[ebp], ecx
	mov	ecx, DWORD PTR $T236425[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	DWORD PTR _pMinorCivAI$[ebp], eax

; 1763 : 	CvAssertMsg(pMinorCivAI, "pMinorCivAI is null");
; 1764 : 	if(!pMinorCivAI)

	cmp	DWORD PTR _pMinorCivAI$[ebp], 0
	jne	SHORT $LN18@GetCoupCha

; 1765 : 	{
; 1766 : 		return 0;

	xor	eax, eax
	jmp	$LN23@GetCoupCha
$LN18@GetCoupCha:

; 1767 : 	}
; 1768 : 
; 1769 : 	PlayerTypes eAllyPlayer = pMinorCivAI->GetAlly();

	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eAllyPlayer$[ebp], eax

; 1770 : 	int iAllySpyRank = 0;

	mov	DWORD PTR _iAllySpyRank$[ebp], 0

; 1771 : 	bool bNoAllySpy = true;

	mov	BYTE PTR _bNoAllySpy$[ebp], 1

; 1772 : 	if(pCityEspionage->m_aiSpyAssignment[eAllyPlayer] != -1)

	mov	edx, DWORD PTR _eAllyPlayer$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [eax+edx*4+4], -1
	je	SHORT $LN17@GetCoupCha

; 1773 : 	{
; 1774 : 		int iAllySpyIndex = pCityEspionage->m_aiSpyAssignment[eAllyPlayer];

	mov	ecx, DWORD PTR _eAllyPlayer$[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _iAllySpyIndex$223015[ebp], eax

; 1775 : 		iAllySpyRank = GET_PLAYER(eAllyPlayer).GetEspionage()->m_aSpyList[iAllySpyIndex].m_eRank;

	mov	ecx, DWORD PTR _eAllyPlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236435[ebp], ecx
	mov	ecx, DWORD PTR $T236435[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	add	eax, 4
	mov	DWORD PTR $T236439[ebp], eax
	mov	edx, DWORD PTR _iAllySpyIndex$223015[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR $T236439[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR _iAllySpyRank$[ebp], edx

; 1776 : #ifdef AUI_ESPIONAGE_FIX_RESTORE_ENEMY_SPY_COUP_MALUS
; 1777 : 		bNoAllySpy = false;

	mov	BYTE PTR _bNoAllySpy$[ebp], 0
$LN17@GetCoupCha:

; 1778 : #else
; 1779 : 		bNoAllySpy = true;
; 1780 : #endif
; 1781 : 	}
; 1782 : 
; 1783 : 	int iAllyInfluence = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100(eAllyPlayer);

	mov	eax, DWORD PTR _eAllyPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
	mov	DWORD PTR _iAllyInfluence$[ebp], eax

; 1784 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1785 : 	int iMyInfluence = pMinorCivAI->GetBaseFriendshipWithMajorTimes100(m_pPlayer->GetID());
; 1786 : #else
; 1787 : 	int iMyInfluence = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100(m_pPlayer->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236448[ebp], eax
	mov	ecx, DWORD PTR $T236448[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
	mov	DWORD PTR _iMyInfluence$[ebp], eax

; 1788 : #endif
; 1789 : 	int iDeltaInfluence = iAllyInfluence - iMyInfluence;

	mov	edx, DWORD PTR _iAllyInfluence$[ebp]
	sub	edx, DWORD PTR _iMyInfluence$[ebp]
	mov	DWORD PTR _iDeltaInfluence$[ebp], edx

; 1790 : 
; 1791 : 	//float fNobodyBonus = 0.5;
; 1792 : 	//float fMultiplyConstant = 3.0f;
; 1793 : 	//float fSpyLevelDeltaZero = 0.0f;
; 1794 : 	//float fSpyLevelDeltaOne = 1.5f;
; 1795 : 	//float fSpyLevelDeltaTwo = 2.25;
; 1796 : 	//float fSpyLevelDeltaThree = 3.0f;
; 1797 : 
; 1798 : 	float fNobodyBonus = GC.getESPIONAGE_COUP_NOBODY_BONUS();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8156
	movss	DWORD PTR _fNobodyBonus$[ebp], xmm0

; 1799 : 	float fMultiplyConstant = GC.getESPIONAGE_COUP_MULTIPLY_CONSTANT();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8160
	movss	DWORD PTR _fMultiplyConstant$[ebp], xmm0

; 1800 : 	float fSpyLevelDeltaZero = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8164
	movss	DWORD PTR _fSpyLevelDeltaZero$[ebp], xmm0

; 1801 : 	float fSpyLevelDeltaOne = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8168
	movss	DWORD PTR _fSpyLevelDeltaOne$[ebp], xmm0

; 1802 : 	float fSpyLevelDeltaTwo = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8172
	movss	DWORD PTR _fSpyLevelDeltaTwo$[ebp], xmm0

; 1803 : #ifndef NQM_PRUNING
; 1804 : 	float fSpyLevelDeltaThree = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8176
	movss	DWORD PTR _fSpyLevelDeltaThree$[ebp], xmm0

; 1805 : 	float fSpyLevelDeltaFour = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8180
	movss	DWORD PTR _fSpyLevelDeltaFour$[ebp], xmm0

; 1806 : #endif
; 1807 : 
; 1808 : 	float fAllySpyValue = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fAllySpyValue$[ebp], xmm0

; 1809 : 	float fMySpyValue = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0

; 1810 : 
; 1811 : 	int iMySpyRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+12]
	mov	DWORD PTR _iMySpyRank$[ebp], eax

; 1812 : 	iMySpyRank += m_pPlayer->GetCulture()->GetInfluenceCityStateSpyRankBonus(eCityOwner);

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	add	eax, DWORD PTR _iMySpyRank$[ebp]
	mov	DWORD PTR _iMySpyRank$[ebp], eax

; 1813 : 	switch (iMySpyRank)

	mov	eax, DWORD PTR _iMySpyRank$[ebp]
	mov	DWORD PTR tv197[ebp], eax
	cmp	DWORD PTR tv197[ebp], 4
	ja	SHORT $LN15@GetCoupCha
	mov	ecx, DWORD PTR tv197[ebp]
	jmp	DWORD PTR $LN61@GetCoupCha[ecx*4]
$LN14@GetCoupCha:

; 1814 : 	{
; 1815 : 	case 0:
; 1816 : 		fMySpyValue = fSpyLevelDeltaZero;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaZero$[ebp]
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0

; 1817 : 		break;

	jmp	SHORT $LN15@GetCoupCha
$LN13@GetCoupCha:

; 1818 : 	case 1:
; 1819 : 		fMySpyValue = fSpyLevelDeltaOne;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaOne$[ebp]
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0

; 1820 : 		break;

	jmp	SHORT $LN15@GetCoupCha
$LN12@GetCoupCha:

; 1821 : 	case 2:
; 1822 : 		fMySpyValue = fSpyLevelDeltaTwo;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaTwo$[ebp]
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0

; 1823 : 		break;

	jmp	SHORT $LN15@GetCoupCha
$LN11@GetCoupCha:

; 1824 : #ifndef NQM_PRUNING
; 1825 : 	case 3:
; 1826 : 		fMySpyValue = fSpyLevelDeltaThree;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaThree$[ebp]
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0

; 1827 : 		break;

	jmp	SHORT $LN15@GetCoupCha
$LN10@GetCoupCha:

; 1828 : 	case 4:
; 1829 : 		fMySpyValue = fSpyLevelDeltaFour;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaFour$[ebp]
	movss	DWORD PTR _fMySpyValue$[ebp], xmm0
$LN15@GetCoupCha:

; 1830 : 		break;
; 1831 : #endif
; 1832 : 	}
; 1833 : 
; 1834 : 	switch (iAllySpyRank)

	mov	edx, DWORD PTR _iAllySpyRank$[ebp]
	mov	DWORD PTR tv199[ebp], edx
	cmp	DWORD PTR tv199[ebp], 0
	je	SHORT $LN7@GetCoupCha
	cmp	DWORD PTR tv199[ebp], 1
	je	SHORT $LN6@GetCoupCha
	cmp	DWORD PTR tv199[ebp], 2
	je	SHORT $LN5@GetCoupCha
	jmp	SHORT $LN8@GetCoupCha
$LN7@GetCoupCha:

; 1835 : 	{
; 1836 : 	case 0:
; 1837 : 		fAllySpyValue = fSpyLevelDeltaZero;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaZero$[ebp]
	movss	DWORD PTR _fAllySpyValue$[ebp], xmm0

; 1838 : 		break;

	jmp	SHORT $LN8@GetCoupCha
$LN6@GetCoupCha:

; 1839 : 	case 1:
; 1840 : 		fAllySpyValue = fSpyLevelDeltaOne;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaOne$[ebp]
	movss	DWORD PTR _fAllySpyValue$[ebp], xmm0

; 1841 : 		break;

	jmp	SHORT $LN8@GetCoupCha
$LN5@GetCoupCha:

; 1842 : 	case 2:
; 1843 : 		fAllySpyValue = fSpyLevelDeltaTwo;

	movss	xmm0, DWORD PTR _fSpyLevelDeltaTwo$[ebp]
	movss	DWORD PTR _fAllySpyValue$[ebp], xmm0
$LN8@GetCoupCha:

; 1844 : 		break;
; 1845 : 	}	
; 1846 : 
; 1847 : 	float fSpyMultipier = fAllySpyValue - fMySpyValue + fMultiplyConstant;

	movss	xmm0, DWORD PTR _fAllySpyValue$[ebp]
	subss	xmm0, DWORD PTR _fMySpyValue$[ebp]
	addss	xmm0, DWORD PTR _fMultiplyConstant$[ebp]
	movss	DWORD PTR _fSpyMultipier$[ebp], xmm0

; 1848 : 	if (bNoAllySpy)

	movzx	eax, BYTE PTR _bNoAllySpy$[ebp]
	test	eax, eax
	je	SHORT $LN4@GetCoupCha

; 1849 : 	{
; 1850 : 		fSpyMultipier *= fNobodyBonus;

	movss	xmm0, DWORD PTR _fSpyMultipier$[ebp]
	mulss	xmm0, DWORD PTR _fNobodyBonus$[ebp]
	movss	DWORD PTR _fSpyMultipier$[ebp], xmm0
$LN4@GetCoupCha:

; 1851 : 	}
; 1852 : 
; 1853 : 	int iResultPercentage = 100 - (int)((iDeltaInfluence * fSpyMultipier) / 100);

	cvtsi2ss xmm0, DWORD PTR _iDeltaInfluence$[ebp]
	mulss	xmm0, DWORD PTR _fSpyMultipier$[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvttss2si ecx, xmm0
	mov	edx, 100				; 00000064H
	sub	edx, ecx
	mov	DWORD PTR _iResultPercentage$[ebp], edx

; 1854 : 
; 1855 : #ifdef NQ_COUP_CHANCE_MODIFIER_FROM_POLICIES
; 1856 : 	iResultPercentage += m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_COUP_CHANCE_MODIFIER);

	push	54					; 00000036H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	add	eax, DWORD PTR _iResultPercentage$[ebp]
	mov	DWORD PTR _iResultPercentage$[ebp], eax

; 1857 : #endif
; 1858 : 
; 1859 : 	if(iResultPercentage > 85)

	cmp	DWORD PTR _iResultPercentage$[ebp], 85	; 00000055H
	jle	SHORT $LN3@GetCoupCha

; 1860 : 	{
; 1861 : 		iResultPercentage = 85;

	mov	DWORD PTR _iResultPercentage$[ebp], 85	; 00000055H
	jmp	SHORT $LN1@GetCoupCha
$LN3@GetCoupCha:

; 1862 : 	}
; 1863 : 	else if(iResultPercentage < 0)

	cmp	DWORD PTR _iResultPercentage$[ebp], 0
	jge	SHORT $LN1@GetCoupCha

; 1864 : 	{
; 1865 : 		iResultPercentage = 0;

	mov	DWORD PTR _iResultPercentage$[ebp], 0
$LN1@GetCoupCha:

; 1866 : 	}
; 1867 : 
; 1868 : 	//int iAdjustedAllyInfluenceTimes100 = iAllyInfluence * (100 + m_aSpyList[uiSpyIndex].m_eRank * 100);
; 1869 : 	//int iAdjustedAllyInfluence = iAdjustedAllyInfluenceTimes100 / 100;
; 1870 : 	//int iResultPercentage = 0;
; 1871 : 	//if (iAdjustedAllyInfluence != 0)
; 1872 : 	//{
; 1873 : 	//	iResultPercentage = 100 - ((iDeltaInfluence * 100) / iAdjustedAllyInfluence);
; 1874 : 	//}
; 1875 : 
; 1876 : 
; 1877 : 	return iResultPercentage;

	mov	eax, DWORD PTR _iResultPercentage$[ebp]
$LN23@GetCoupCha:

; 1878 : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN61@GetCoupCha:
	DD	$LN14@GetCoupCha
	DD	$LN13@GetCoupCha
	DD	$LN12@GetCoupCha
	DD	$LN11@GetCoupCha
	DD	$LN10@GetCoupCha
?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ENDP	; CvPlayerEspionage::GetCoupChanceOfSuccess
_TEXT	ENDS
PUBLIC	??_C@_0DA@BIDKBFHG@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ ; `string'
PUBLIC	??_C@_0DC@OCMOEFLL@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ ; `string'
PUBLIC	??_C@_0DA@NBHIKOCM@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ ; `string'
PUBLIC	??_C@_0DC@POCJFDCD@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ ; `string'
PUBLIC	??_C@_0CM@EOKMILOG@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ ; `string'
PUBLIC	??_C@_0CO@IEDICHHE@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ ; `string'
PUBLIC	??_C@_0CM@IHOODALM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ ; `string'
PUBLIC	??_C@_0CO@JINPDBOM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ ; `string'
PUBLIC	??_C@_0CJ@OPJHLBMA@Roll?5for?5the?5result?5of?5an?5attemp@ ; `string'
PUBLIC	??_C@_0BO@BDBHKIAC@Re?9eval?3?5attempting?5coup?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::AttemptCoup
EXTRN	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescriptionKey
EXTRN	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationAdjectiveKey
EXTRN	__imp_??4String@Localization@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??0String@Localization@@QAE@XZ:PROC
EXTRN	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z:PROC ; CvMinorCivAI::SetFriendshipWithMajorTimes100
EXTRN	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsFriends
EXTRN	?GetFriendshipAnchorWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetFriendshipAnchorWithMajor
EXTRN	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
EXTRN	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z:PROC ; CvMinorCivAI::SetDisableNotifications
;	COMDAT ??_C@_0DA@BIDKBFHG@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0DA@BIDKBFHG@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_YOU_STAGE_COUP_FAILURE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OCMOEFLL@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
CONST	SEGMENT
??_C@_0DC@OCMOEFLL@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_YOU_STAGE_COUP_FAILURE_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NBHIKOCM@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
CONST	SEGMENT
??_C@_0DA@NBHIKOCM@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_YOU_STAGE_COUP_SUCCESS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@POCJFDCD@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
CONST	SEGMENT
??_C@_0DC@POCJFDCD@TXT_KEY_NOTIFICATION_SPY_YOU_STA@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_YOU_STAGE_COUP_SUCCESS_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EOKMILOG@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
CONST	SEGMENT
??_C@_0CM@EOKMILOG@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STAGE_COUP_FAILURE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IEDICHHE@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
CONST	SEGMENT
??_C@_0CO@IEDICHHE@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STAGE_COUP_FAILURE_S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IHOODALM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
CONST	SEGMENT
??_C@_0CM@IHOODALM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STAGE_COUP_SUCCESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@JINPDBOM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
CONST	SEGMENT
??_C@_0CO@JINPDBOM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_SPY_STAGE_COUP_SUCCESS_S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OPJHLBMA@Roll?5for?5the?5result?5of?5an?5attemp@
CONST	SEGMENT
??_C@_0CJ@OPJHLBMA@Roll?5for?5the?5result?5of?5an?5attemp@ DB 'Roll for t'
	DB	'he result of an attempted coup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BDBHKIAC@Re?9eval?3?5attempting?5coup?0?5?$CFd?0?$AA@
CONST	SEGMENT
??_C@_0BO@BDBHKIAC@Re?9eval?3?5attempting?5coup?0?5?$CFd?0?$AA@ DB 'Re-ev'
	DB	'al: attempting coup, %d,', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$11
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$13
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
tv673 = -1548						; size = 4
tv661 = -1544						; size = 4
tv650 = -1540						; size = 4
tv700 = -1536						; size = 4
tv646 = -1532						; size = 4
tv698 = -1528						; size = 4
tv657 = -1524						; size = 4
tv696 = -1520						; size = 4
tv486 = -1516						; size = 4
tv694 = -1512						; size = 4
tv489 = -1508						; size = 4
tv690 = -1504						; size = 4
tv669 = -1500						; size = 4
tv688 = -1496						; size = 4
tv670 = -1492						; size = 4
tv686 = -1488						; size = 4
tv328 = -1484						; size = 4
tv684 = -1480						; size = 4
tv331 = -1476						; size = 4
tv758 = -1472						; size = 4
tv680 = -1468						; size = 4
tv741 = -1464						; size = 4
_this$ = -1460						; size = 4
$T236787 = -1456					; size = 4
$T236783 = -1452					; size = 4
$T236779 = -1448					; size = 4
$T236775 = -1444					; size = 4
$T236771 = -1440					; size = 4
$T236762 = -1436					; size = 4
$T236753 = -1432					; size = 4
$T236744 = -1428					; size = 4
$T236740 = -1424					; size = 4
$T236736 = -1420					; size = 4
$T236732 = -1416					; size = 4
$T236728 = -1412					; size = 4
$T236724 = -1408					; size = 4
$T236720 = -1404					; size = 4
$T236711 = -1400					; size = 4
$T236702 = -1396					; size = 4
$T236693 = -1392					; size = 4
$T236684 = -1388					; size = 4
$T236680 = -1384					; size = 4
$T236676 = -1380					; size = 4
$T236672 = -1376					; size = 4
$T236668 = -1372					; size = 4
$T236664 = -1368					; size = 4
$T236655 = -1364					; size = 4
$T236651 = -1360					; size = 4
$T236642 = -1356					; size = 4
$T236638 = -1352					; size = 4
$T236629 = -1345					; size = 1
$T236620 = -1344					; size = 4
$T236613 = -1340					; size = 4
$T236601 = -1336					; size = 4
$T236595 = -1332					; size = 4
$T236591 = -1328					; size = 4
$T236582 = -1324					; size = 4
$T236573 = -1320					; size = 4
$T236564 = -1316					; size = 4
$T236552 = -1312					; size = 4
$T236541 = -1308					; size = 4
$T236537 = -1304					; size = 4
$T236511 = -1300					; size = 4
$T236510 = -1296					; size = 4
$T236509 = -1292					; size = 4
$T236508 = -1288					; size = 4
$T236507 = -1284					; size = 80
$T236506 = -1204					; size = 4
$T236505 = -1200					; size = 80
$T236504 = -1120					; size = 4
$T236503 = -1116					; size = 4
$T236502 = -1112					; size = 4
$T236501 = -1108					; size = 4
$T236500 = -1104					; size = 80
$T236499 = -1024					; size = 4
$T236498 = -1020					; size = 80
$T236497 = -940						; size = 4
$T236496 = -936						; size = 4
$T236495 = -932						; size = 4
$T236494 = -928						; size = 80
$T236493 = -848						; size = 4
$T236492 = -844						; size = 4
$T236491 = -840						; size = 80
$T236490 = -760						; size = 4
$T236489 = -756						; size = 4
$T236488 = -752						; size = 4
$T236487 = -748						; size = 80
$T236486 = -668						; size = 4
$T236485 = -664						; size = 4
$T236484 = -660						; size = 80
$T236483 = -580						; size = 4
$T236482 = -576						; size = 28
_strNotification$223135 = -548				; size = 80
_strSummary$223134 = -468				; size = 80
_eNotification$223133 = -384				; size = 4
_strNotification$223110 = -380				; size = 80
_strSummary$223109 = -300				; size = 80
_eNotification$223108 = -216				; size = 4
_pNotifications$223106 = -212				; size = 4
_ePlayer$223092 = -208					; size = 4
_bNotify$223097 = -201					; size = 1
_iRelationshipAnchor$223099 = -200			; size = 4
_iFriendship$223098 = -196				; size = 4
_bFriends$223100 = -190					; size = 1
_bMetMinor$223096 = -189				; size = 1
_pOtherEspionage$223103 = -188				; size = 4
_iSpyIndex$223104 = -184				; size = 4
_ui$223088 = -180					; size = 4
_iNewInfluence$223085 = -176				; size = 4
_ui$223079 = -172					; size = 4
_iInfluenceTemp$223078 = -168				; size = 4
_strMsg$223071 = -164					; size = 28
__$ArrayPad$ = -136					; size = 4
_ui$223065 = -132					; size = 4
_pNotifications$ = -128					; size = 4
_iRandRoll$ = -124					; size = 4
_ePreviousAlly$ = -120					; size = 4
_aiNewInfluenceValueTimes100$ = -116			; size = 88
_pCity$ = -28						; size = 4
_eCityOwner$ = -24					; size = 4
_pMinorCivAI$ = -20					; size = 4
_bAttemptSuccess$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::AttemptCoup, COMDAT
; _this$ = ecx

; 1882 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1536				; 00000600H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1883 : 	// if you're not allowed to stage a coup here, the coup fails
; 1884 : 	if(!CanStageCoup(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN30@AttemptCou

; 1885 : 	{
; 1886 : 		return false;

	xor	al, al
	jmp	$LN31@AttemptCou
$LN30@AttemptCou:

; 1887 : 	}
; 1888 : 
; 1889 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 1890 : 	CvAssertMsg(pCity, "Spy isn't in a city.");
; 1891 : 	if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN49@AttemptCou

; 1892 : 	{
; 1893 : 		return false;

	xor	al, al
	jmp	$LN31@AttemptCou

; 1894 : 	}
; 1895 : 
; 1896 : 	PlayerTypes eCityOwner = pCity->getOwner();

$LN49@AttemptCou:
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _eCityOwner$[ebp], ecx

; 1897 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236537[ebp], edx
	mov	ecx, DWORD PTR $T236537[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN28@AttemptCou

; 1898 : 	{
; 1899 : 		// this city state is not a minor civ
; 1900 : 		return false;

	xor	al, al
	jmp	$LN31@AttemptCou
$LN28@AttemptCou:

; 1901 : 	}
; 1902 : 
; 1903 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	ecx, DWORD PTR _eCityOwner$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236541[ebp], ecx
	mov	ecx, DWORD PTR $T236541[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	DWORD PTR _pMinorCivAI$[ebp], eax

; 1904 : 
; 1905 : 	PlayerTypes ePreviousAlly = pMinorCivAI->GetAlly();

	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _ePreviousAlly$[ebp], eax

; 1906 : 	CvAssertMsg(ePreviousAlly != NO_PLAYER, "City state has no ally. Something's going wrong");
; 1907 : 	if(ePreviousAlly == NO_PLAYER)

	cmp	DWORD PTR _ePreviousAlly$[ebp], -1
	jne	SHORT $LN27@AttemptCou

; 1908 : 	{
; 1909 : 		return false;

	xor	al, al
	jmp	$LN31@AttemptCou
$LN27@AttemptCou:

; 1910 : 	}
; 1911 : 
; 1912 : 	int aiNewInfluenceValueTimes100[MAX_MAJOR_CIVS];
; 1913 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$223065[ebp], 0
	jmp	SHORT $LN26@AttemptCou
$LN25@AttemptCou:
	mov	edx, DWORD PTR _ui$223065[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$223065[ebp], edx
$LN26@AttemptCou:
	cmp	DWORD PTR _ui$223065[ebp], 22		; 00000016H
	jae	SHORT $LN55@AttemptCou

; 1914 : 	{
; 1915 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1916 : 		aiNewInfluenceValueTimes100[ui] = pMinorCivAI->GetBaseFriendshipWithMajorTimes100((PlayerTypes)ui);
; 1917 : #else
; 1918 : 		aiNewInfluenceValueTimes100[ui] = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100((PlayerTypes)ui);

	mov	eax, DWORD PTR _ui$223065[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
	mov	ecx, DWORD PTR _ui$223065[ebp]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+ecx*4], eax

; 1919 : #endif
; 1920 : 	}

	jmp	SHORT $LN25@AttemptCou

; 1921 : 
; 1922 : 	m_aSpyList[uiSpyIndex].m_bEvaluateReassignment = true; // flag for reassignment

$LN55@AttemptCou:
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+edx+25], 1

; 1923 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN23@AttemptCou

; 1924 : 	{
; 1925 : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1926 : 		strMsg.Format("Re-eval: attempting coup, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	push	OFFSET ??_C@_0BO@BDBHKIAC@Re?9eval?3?5attempting?5coup?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1927 : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236552[ebp], edx
	mov	ecx, DWORD PTR $T236552[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T236482[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv741[ebp], eax
	mov	edx, DWORD PTR tv741[ebp]
	mov	DWORD PTR tv680[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv680[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T236482[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1928 : 		LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 1929 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN23@AttemptCou:

; 1930 : 
; 1931 : 	bool bAttemptSuccess = false;

	mov	BYTE PTR _bAttemptSuccess$[ebp], 0

; 1932 : 	int iRandRoll = GC.getGame().getJonRandNum(100, "Roll for the result of an attempted coup");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236564[ebp], edx
	push	OFFSET ??_C@_0CJ@OPJHLBMA@Roll?5for?5the?5result?5of?5an?5attemp@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T236564[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRandRoll$[ebp], eax

; 1933 : 	if(iRandRoll <= GetCoupChanceOfSuccess(uiSpyIndex))

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess
	cmp	DWORD PTR _iRandRoll$[ebp], eax
	jg	$LN90@AttemptCou

; 1934 : 	{
; 1935 : 		// swap influence from ally to 2nd place ally
; 1936 : 		int iInfluenceTemp = aiNewInfluenceValueTimes100[ePreviousAlly];

	mov	ecx, DWORD PTR _ePreviousAlly$[ebp]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[ebp+ecx*4]
	mov	DWORD PTR _iInfluenceTemp$223078[ebp], edx

; 1937 : 		aiNewInfluenceValueTimes100[ePreviousAlly] = aiNewInfluenceValueTimes100[m_pPlayer->GetID()];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236573[ebp], edx
	mov	eax, DWORD PTR _ePreviousAlly$[ebp]
	mov	ecx, DWORD PTR $T236573[ebp]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[ebp+ecx*4]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+eax*4], edx

; 1938 : 		aiNewInfluenceValueTimes100[m_pPlayer->GetID()] = iInfluenceTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236582[ebp], edx
	mov	eax, DWORD PTR $T236582[ebp]
	mov	ecx, DWORD PTR _iInfluenceTemp$223078[ebp]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+eax*4], ecx

; 1939 : 
; 1940 : 		// reduce the influence of all the other players
; 1941 : #ifdef AUI_WARNING_FIXES
; 1942 : 		for (int ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 1943 : #else
; 1944 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$223079[ebp], 0
	jmp	SHORT $LN21@AttemptCou
$LN20@AttemptCou:
	mov	edx, DWORD PTR _ui$223079[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$223079[ebp], edx
$LN21@AttemptCou:
	cmp	DWORD PTR _ui$223079[ebp], 22		; 00000016H
	jae	$LN19@AttemptCou

; 1945 : #endif
; 1946 : 		{
; 1947 : 			if(ui == m_pPlayer->GetID())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236591[ebp], edx
	mov	eax, DWORD PTR _ui$223079[ebp]
	cmp	eax, DWORD PTR $T236591[ebp]
	jne	SHORT $LN18@AttemptCou

; 1948 : 			{
; 1949 : 				continue;

	jmp	SHORT $LN20@AttemptCou
$LN18@AttemptCou:

; 1950 : 			}
; 1951 : 
; 1952 : 			// only drop the influence if they have positive influence
; 1953 : 			if(aiNewInfluenceValueTimes100[ui] > 0)

	mov	ecx, DWORD PTR _ui$223079[ebp]
	cmp	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+ecx*4], 0
	jle	$LN17@AttemptCou

; 1954 : 			{
; 1955 : 				int iNewInfluence = aiNewInfluenceValueTimes100[ui] - (GC.getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP() * 100);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7952
	mov	DWORD PTR $T236595[ebp], edx
	mov	eax, DWORD PTR $T236595[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _ui$223079[ebp]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[ebp+ecx*4]
	sub	edx, eax
	mov	DWORD PTR _iNewInfluence$223085[ebp], edx

; 1956 : 				iNewInfluence = max(iNewInfluence, 0);

	mov	DWORD PTR $T236483[ebp], 0
	mov	eax, DWORD PTR _iNewInfluence$223085[ebp]
	cmp	eax, DWORD PTR $T236483[ebp]
	jge	SHORT $LN86@AttemptCou
	lea	ecx, DWORD PTR $T236483[ebp]
	mov	DWORD PTR tv758[ebp], ecx
	jmp	SHORT $LN87@AttemptCou
$LN86@AttemptCou:
	lea	edx, DWORD PTR _iNewInfluence$223085[ebp]
	mov	DWORD PTR tv758[ebp], edx
$LN87@AttemptCou:
	mov	eax, DWORD PTR tv758[ebp]
	mov	DWORD PTR $T236601[ebp], eax
	mov	ecx, DWORD PTR $T236601[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iNewInfluence$223085[ebp], edx

; 1957 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1958 : 				// cap all others at the ally threshold of 60 though (it's further reduced by 20 later)
; 1959 : 				iNewInfluence = min(iNewInfluence, GC.getFRIENDSHIP_THRESHOLD_ALLIES() * 100);
; 1960 : #endif
; 1961 : 				aiNewInfluenceValueTimes100[ui] = iNewInfluence;

	mov	eax, DWORD PTR _ui$223079[ebp]
	mov	ecx, DWORD PTR _iNewInfluence$223085[ebp]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+eax*4], ecx
$LN17@AttemptCou:

; 1962 : 			}
; 1963 : 		}

	jmp	$LN20@AttemptCou
$LN19@AttemptCou:

; 1964 : 
; 1965 : 		bAttemptSuccess = true;

	mov	BYTE PTR _bAttemptSuccess$[ebp], 1

; 1966 : 	}
; 1967 : 	else

	jmp	SHORT $LN16@AttemptCou

; 1968 : 	{
; 1969 : 		// reduce influence of player
; 1970 : 		// right now move the influence into a negative space
; 1971 : 		aiNewInfluenceValueTimes100[m_pPlayer->GetID()] = (-10 * 100);

$LN90@AttemptCou:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T236613[ebp], ecx
	mov	edx, DWORD PTR $T236613[ebp]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[ebp+edx*4], -1000 ; fffffc18H

; 1972 : 		bAttemptSuccess = false;

	mov	BYTE PTR _bAttemptSuccess$[ebp], 0

; 1973 : 
; 1974 : 		// kill the spy
; 1975 : 		ExtractSpyFromCity(uiSpyIndex); // move the dead body out so that someone else can move in

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity

; 1976 : 		m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_DEAD; // have to official kill him after the extraction

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+ecx+16], 8
$LN16@AttemptCou:

; 1977 : 	}
; 1978 : 
; 1979 : 	// do others influence first so that the potential coup person will be the ally
; 1980 : 	pMinorCivAI->SetDisableNotifications(true);

	push	1
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z ; CvMinorCivAI::SetDisableNotifications

; 1981 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$223088[ebp], 0
	jmp	SHORT $LN15@AttemptCou
$LN14@AttemptCou:
	mov	ecx, DWORD PTR _ui$223088[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$223088[ebp], ecx
$LN15@AttemptCou:
	cmp	DWORD PTR _ui$223088[ebp], 22		; 00000016H
	jae	$LN136@AttemptCou

; 1982 : 	{
; 1983 : 		PlayerTypes ePlayer = (PlayerTypes)ui;

	mov	edx, DWORD PTR _ui$223088[ebp]
	mov	DWORD PTR _ePlayer$223092[ebp], edx

; 1984 : 		if(!GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR _ePlayer$223092[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236620[ebp], eax
	mov	ecx, DWORD PTR $T236620[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T236629[ebp], dl
	movzx	eax, BYTE PTR $T236629[ebp]
	test	eax, eax
	jne	SHORT $LN102@AttemptCou

; 1985 : 		{
; 1986 : 			continue;

	jmp	SHORT $LN14@AttemptCou

; 1987 : 		}
; 1988 : 
; 1989 : 		// skip the spy player
; 1990 : 		if(ePlayer == m_pPlayer->GetID())

$LN102@AttemptCou:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T236638[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$223092[ebp]
	cmp	ecx, DWORD PTR $T236638[ebp]
	jne	SHORT $LN11@AttemptCou

; 1991 : 		{
; 1992 : 			continue;

	jmp	$LN14@AttemptCou
$LN11@AttemptCou:

; 1993 : 		}
; 1994 : 
; 1995 : 		// send notification to other civs if they have met this minor
; 1996 : 		bool bMetMinor = GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isHasMet(GET_PLAYER(eCityOwner).getTeam());

	mov	edx, DWORD PTR _eCityOwner$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236642[ebp], edx
	mov	eax, DWORD PTR $T236642[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T236651[ebp], eax
	mov	edx, DWORD PTR _ePlayer$223092[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236655[ebp], edx
	mov	eax, DWORD PTR $T236655[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T236664[ebp], eax
	mov	edx, DWORD PTR $T236664[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T236668[ebp], edx
	mov	eax, DWORD PTR $T236651[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236668[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	mov	BYTE PTR _bMetMinor$223096[ebp], al

; 1997 : 		bool bNotify = false;

	mov	BYTE PTR _bNotify$223097[ebp], 0

; 1998 : 		int iFriendship = pMinorCivAI->GetEffectiveFriendshipWithMajor(ePlayer);

	mov	ecx, DWORD PTR _ePlayer$223092[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	DWORD PTR _iFriendship$223098[ebp], eax

; 1999 : 		int iRelationshipAnchor = pMinorCivAI->GetFriendshipAnchorWithMajor(ePlayer);

	mov	edx, DWORD PTR _ePlayer$223092[ebp]
	push	edx
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?GetFriendshipAnchorWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetFriendshipAnchorWithMajor
	mov	DWORD PTR _iRelationshipAnchor$223099[ebp], eax

; 2000 : 		bool bFriends = pMinorCivAI->IsFriends(ePlayer);

	mov	eax, DWORD PTR _ePlayer$223092[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsFriends
	mov	BYTE PTR _bFriends$223100[ebp], al

; 2001 : 
; 2002 : 		if (iFriendship > iRelationshipAnchor || bFriends)

	mov	ecx, DWORD PTR _iFriendship$223098[ebp]
	cmp	ecx, DWORD PTR _iRelationshipAnchor$223099[ebp]
	jg	SHORT $LN9@AttemptCou
	movzx	edx, BYTE PTR _bFriends$223100[ebp]
	test	edx, edx
	je	SHORT $LN10@AttemptCou
$LN9@AttemptCou:

; 2003 : 		{
; 2004 : 			bNotify = true;

	mov	BYTE PTR _bNotify$223097[ebp], 1
$LN10@AttemptCou:

; 2005 : 		}
; 2006 : 
; 2007 : 		CvPlayerEspionage* pOtherEspionage = GET_PLAYER(ePlayer).GetEspionage();

	mov	eax, DWORD PTR _ePlayer$223092[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236672[ebp], eax
	mov	ecx, DWORD PTR $T236672[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pOtherEspionage$223103[ebp], eax

; 2008 : 		int iSpyIndex = pOtherEspionage->GetSpyIndexInCity(pCity);

	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pOtherEspionage$223103[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	mov	DWORD PTR _iSpyIndex$223104[ebp], eax

; 2009 : 		if (iSpyIndex >= 0)

	cmp	DWORD PTR _iSpyIndex$223104[ebp], 0
	jl	SHORT $LN8@AttemptCou

; 2010 : 		{
; 2011 : 			bNotify = true;

	mov	BYTE PTR _bNotify$223097[ebp], 1
$LN8@AttemptCou:

; 2012 : 		}
; 2013 : 
; 2014 : 		pMinorCivAI->SetFriendshipWithMajorTimes100(ePlayer, aiNewInfluenceValueTimes100[ui]);

	push	0
	mov	edx, DWORD PTR _ui$223088[ebp]
	mov	eax, DWORD PTR _aiNewInfluenceValueTimes100$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$223092[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z ; CvMinorCivAI::SetFriendshipWithMajorTimes100

; 2015 : 
; 2016 : 		CvNotifications* pNotifications = GET_PLAYER(ePlayer).GetNotifications();

	mov	edx, DWORD PTR _ePlayer$223092[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236676[ebp], edx
	mov	ecx, DWORD PTR $T236676[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$223106[ebp], eax

; 2017 : 		if(pNotifications && bMetMinor && bNotify)

	cmp	DWORD PTR _pNotifications$223106[ebp], 0
	je	$LN7@AttemptCou
	movzx	eax, BYTE PTR _bMetMinor$223096[ebp]
	test	eax, eax
	je	$LN7@AttemptCou
	movzx	ecx, BYTE PTR _bNotify$223097[ebp]
	test	ecx, ecx
	je	$LN7@AttemptCou

; 2018 : 		{
; 2019 : 			NotificationTypes eNotification;
; 2020 : 			Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 2021 : 			Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 2022 : 			if(bAttemptSuccess)

	movzx	edx, BYTE PTR _bAttemptSuccess$[ebp]
	test	edx, edx
	je	$LN6@AttemptCou

; 2023 : 			{
; 2024 : 				eNotification = NOTIFICATION_SPY_STAGE_COUP_SUCCESS;

	mov	DWORD PTR _eNotification$223108[ebp], -20047341 ; fece1a13H

; 2025 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS_S");

	push	OFFSET ??_C@_0CO@JINPDBOM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
	lea	eax, DWORD PTR $T236484[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv331[ebp], eax
	mov	ecx, DWORD PTR tv331[ebp]
	mov	DWORD PTR tv684[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv684[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T236484[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2026 : 				strSummary << m_pPlayer->getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236485[ebp], eax
	lea	ecx, DWORD PTR $T236485[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223109[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2027 : 				strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236486[ebp], eax
	lea	eax, DWORD PTR $T236486[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2028 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS");

	push	OFFSET ??_C@_0CM@IHOODALM@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
	lea	edx, DWORD PTR $T236487[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv328[ebp], eax
	mov	eax, DWORD PTR tv328[ebp]
	mov	DWORD PTR tv686[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv686[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T236487[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2029 : 				strNotification << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T236488[ebp], eax
	lea	eax, DWORD PTR $T236488[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2030 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236489[ebp], eax
	lea	edx, DWORD PTR $T236489[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223110[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2031 : 				strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _ePreviousAlly$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236680[ebp], ecx
	mov	ecx, DWORD PTR $T236680[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236490[ebp], eax
	lea	edx, DWORD PTR $T236490[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223110[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2032 : 			}
; 2033 : 			else

	jmp	$LN128@AttemptCou
$LN6@AttemptCou:

; 2034 : 			{
; 2035 : 				eNotification = NOTIFICATION_SPY_STAGE_COUP_FAILURE;

	mov	DWORD PTR _eNotification$223108[ebp], -1336555936 ; b055c660H

; 2036 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE_S");

	push	OFFSET ??_C@_0CO@IEDICHHE@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
	lea	ecx, DWORD PTR $T236491[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv670[ebp], eax
	mov	edx, DWORD PTR tv670[ebp]
	mov	DWORD PTR tv688[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv688[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T236491[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2037 : 				strSummary << m_pPlayer->getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236492[ebp], eax
	lea	edx, DWORD PTR $T236492[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223109[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2038 : 				strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236493[ebp], eax
	lea	ecx, DWORD PTR $T236493[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223109[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2039 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE");

	push	OFFSET ??_C@_0CM@EOKMILOG@TXT_KEY_NOTIFICATION_SPY_STAGE_C@
	lea	eax, DWORD PTR $T236494[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv669[ebp], eax
	mov	ecx, DWORD PTR tv669[ebp]
	mov	DWORD PTR tv690[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv690[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T236494[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2040 : 				strNotification << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	mov	DWORD PTR $T236495[ebp], eax
	lea	ecx, DWORD PTR $T236495[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223110[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2041 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236496[ebp], eax
	lea	eax, DWORD PTR $T236496[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2042 : 				strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	edx, DWORD PTR _ePreviousAlly$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236684[ebp], edx
	mov	ecx, DWORD PTR $T236684[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236497[ebp], eax
	lea	eax, DWORD PTR $T236497[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2043 : 			}
; 2044 : 			pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), pCity->getX(), pCity->getY(), -1);

$LN128@AttemptCou:
	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR $T236693[ebp], eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR $T236702[ebp], edx
	push	-1
	push	-1
	mov	eax, DWORD PTR $T236693[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236702[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	edx, DWORD PTR _eNotification$223108[ebp]
	push	edx
	mov	ecx, DWORD PTR _pNotifications$223106[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2045 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN7@AttemptCou:

; 2046 : 	}

	jmp	$LN14@AttemptCou

; 2047 : 	
; 2048 : 	pMinorCivAI->SetFriendshipWithMajorTimes100(m_pPlayer->GetID(), aiNewInfluenceValueTimes100[m_pPlayer->GetID()]);

$LN136@AttemptCou:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236711[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T236720[ebp], edx
	push	0
	mov	eax, DWORD PTR $T236711[ebp]
	mov	ecx, DWORD PTR _aiNewInfluenceValueTimes100$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR $T236720[ebp]
	push	edx
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z ; CvMinorCivAI::SetFriendshipWithMajorTimes100

; 2049 : 	pMinorCivAI->SetDisableNotifications(false);

	push	0
	mov	ecx, DWORD PTR _pMinorCivAI$[ebp]
	call	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z ; CvMinorCivAI::SetDisableNotifications

; 2050 : 
; 2051 : 	// send notification to player
; 2052 : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$[ebp], eax

; 2053 : 	if(pNotifications)

	cmp	DWORD PTR _pNotifications$[ebp], 0
	je	$LN4@AttemptCou

; 2054 : 	{
; 2055 : 		NotificationTypes eNotification;
; 2056 : 		Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 8

; 2057 : 		Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 2058 : 		if(bAttemptSuccess)

	movzx	ecx, BYTE PTR _bAttemptSuccess$[ebp]
	test	ecx, ecx
	je	$LN3@AttemptCou

; 2059 : 		{
; 2060 : 			eNotification = NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS;

	mov	DWORD PTR _eNotification$223133[ebp], -887564073 ; cb18d8d7H

; 2061 : 			strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS_S");

	push	OFFSET ??_C@_0DC@POCJFDCD@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
	lea	edx, DWORD PTR $T236498[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv489[ebp], eax
	mov	eax, DWORD PTR tv489[ebp]
	mov	DWORD PTR tv694[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR tv694[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T236498[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2062 : 			strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236499[ebp], eax
	lea	edx, DWORD PTR $T236499[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223134[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2063 : 			strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS");

	push	OFFSET ??_C@_0DA@NBHIKOCM@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
	lea	ecx, DWORD PTR $T236500[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv486[ebp], eax
	mov	edx, DWORD PTR tv486[ebp]
	mov	DWORD PTR tv696[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR tv696[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T236500[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2064 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T236724[ebp], ecx
	mov	eax, DWORD PTR $T236724[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T236501[ebp], eax
	lea	edx, DWORD PTR $T236501[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223135[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2065 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T236728[ebp], ecx
	mov	eax, DWORD PTR $T236728[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T236502[ebp], eax
	lea	eax, DWORD PTR $T236502[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2066 : 			strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236503[ebp], eax
	lea	edx, DWORD PTR $T236503[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223135[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2067 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _ePreviousAlly$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236732[ebp], ecx
	mov	ecx, DWORD PTR $T236732[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236504[ebp], eax
	lea	edx, DWORD PTR $T236504[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223135[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2068 : 		}
; 2069 : 		else

	jmp	$LN156@AttemptCou
$LN3@AttemptCou:

; 2070 : 		{
; 2071 : 			eNotification = NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE;

	mov	DWORD PTR _eNotification$223133[ebp], -2055011164 ; 858304a4H

; 2072 : 			strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE_S");

	push	OFFSET ??_C@_0DC@OCMOEFLL@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
	lea	ecx, DWORD PTR $T236505[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv657[ebp], eax
	mov	edx, DWORD PTR tv657[ebp]
	mov	DWORD PTR tv698[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR tv698[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T236505[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2073 : 			strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236506[ebp], eax
	lea	ecx, DWORD PTR $T236506[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223134[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2074 : 			strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE");

	push	OFFSET ??_C@_0DA@BIDKBFHG@TXT_KEY_NOTIFICATION_SPY_YOU_STA@
	lea	eax, DWORD PTR $T236507[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv646[ebp], eax
	mov	ecx, DWORD PTR tv646[ebp]
	mov	DWORD PTR tv700[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR tv700[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T236507[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2075 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236736[ebp], eax
	mov	edx, DWORD PTR $T236736[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T236508[ebp], eax
	lea	ecx, DWORD PTR $T236508[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223135[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2076 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236740[ebp], eax
	mov	edx, DWORD PTR $T236740[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T236509[ebp], eax
	lea	edx, DWORD PTR $T236509[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223135[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2077 : 			strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T236510[ebp], eax
	lea	ecx, DWORD PTR $T236510[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223135[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2078 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _ePreviousAlly$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236744[ebp], eax
	mov	ecx, DWORD PTR $T236744[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T236511[ebp], eax
	lea	ecx, DWORD PTR $T236511[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223135[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2079 : 		}
; 2080 : 		pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), pCity->getX(), pCity->getY(), -1);

$LN156@AttemptCou:
	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T236753[ebp], ecx
	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T236762[ebp], eax
	push	-1
	push	-1
	mov	ecx, DWORD PTR $T236753[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236762[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	eax, DWORD PTR _eNotification$223133[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2081 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN4@AttemptCou:

; 2082 : 
; 2083 : 	//Achievements!
; 2084 : 	if(bAttemptSuccess && m_pPlayer->GetID() == GC.getGame().getActivePlayer())

	movzx	ecx, BYTE PTR _bAttemptSuccess$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@AttemptCou
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T236771[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236775[ebp], edx
	mov	ecx, DWORD PTR $T236775[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T236771[ebp], eax
	jne	SHORT $LN1@AttemptCou

; 2085 : 	{
; 2086 : 		gDLL->UnlockAchievement(ACHIEVEMENT_XP1_13);

	mov	eax, DWORD PTR $T236779[ebp]
	mov	DWORD PTR tv650[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv650[ebp], ecx
	push	203					; 000000cbH
	mov	edx, DWORD PTR tv650[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv650[ebp]
	mov	edx, DWORD PTR [eax+828]
	call	edx
$LN1@AttemptCou:

; 2087 : 	}
; 2088 : 
; 2089 : 	// Update City banners and game info
; 2090 : 	GC.GetEngineUserInterface()->setDirty(GameData_DIRTY_BIT, true);

	mov	eax, DWORD PTR $T236783[ebp]
	mov	DWORD PTR tv661[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv661[ebp], ecx
	push	1
	push	11					; 0000000bH
	mov	edx, DWORD PTR tv661[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv661[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx

; 2091 : 	GC.GetEngineUserInterface()->setDirty(CityInfo_DIRTY_BIT, true);

	mov	eax, DWORD PTR $T236787[ebp]
	mov	DWORD PTR tv673[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv673[ebp], ecx
	push	1
	push	18					; 00000012H
	mov	edx, DWORD PTR tv673[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv673[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx

; 2092 : 
; 2093 : 	return bAttemptSuccess;

	mov	al, BYTE PTR _bAttemptSuccess$[ebp]
$LN31@AttemptCou:

; 2094 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$0:
	lea	ecx, DWORD PTR _strMsg$223071[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$1:
	lea	ecx, DWORD PTR $T236482[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$2:
	lea	ecx, DWORD PTR _strSummary$223109[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$3:
	lea	ecx, DWORD PTR _strNotification$223110[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$4:
	lea	ecx, DWORD PTR $T236484[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$5:
	lea	ecx, DWORD PTR $T236487[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$6:
	lea	ecx, DWORD PTR $T236491[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$7:
	lea	ecx, DWORD PTR $T236494[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$8:
	lea	ecx, DWORD PTR _strSummary$223134[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$9:
	lea	ecx, DWORD PTR _strNotification$223135[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$10:
	lea	ecx, DWORD PTR $T236498[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$11:
	lea	ecx, DWORD PTR $T236500[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$12:
	lea	ecx, DWORD PTR $T236505[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$13:
	lea	ecx, DWORD PTR $T236507[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::AttemptCoup
PUBLIC	?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetTurnsUntilStateComplete
; Function compile flags: /Odtp
;	COMDAT ?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
_this$ = -32						; size = 4
$T236829 = -28						; size = 4
$T236799 = -24						; size = 4
_ePlayer$ = -20						; size = 4
_iAmountLeft$ = -16					; size = 4
_iTurnsLeft$ = -12					; size = 4
_pCityEspionage$ = -8					; size = 4
_pCity$ = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z PROC ; CvPlayerEspionage::GetTurnsUntilStateComplete, COMDAT
; _this$ = ecx

; 2098 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2099 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 2100 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236799[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236799[ebp]
	jb	SHORT $LN18@GetTurnsUn

; 2101 : 	{
; 2102 : 		return -2;

	mov	eax, -2					; fffffffeH
	jmp	$LN12@GetTurnsUn

; 2103 : 	}
; 2104 : 
; 2105 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

$LN18@GetTurnsUn:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 2106 : 	CvCity* pCity;
; 2107 : 	CvCityEspionage* pCityEspionage;
; 2108 : 	int iAmountLeft = 0;

	mov	DWORD PTR _iAmountLeft$[ebp], 0

; 2109 : 	int iTurnsLeft = 0;

	mov	DWORD PTR _iTurnsLeft$[ebp], 0

; 2110 : 
; 2111 : 	switch(m_aSpyList[uiSpyIndex].m_eSpyState)

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+16]
	mov	DWORD PTR tv84[ebp], eax
	cmp	DWORD PTR tv84[ebp], 8
	ja	$LN9@GetTurnsUn
	mov	ecx, DWORD PTR tv84[ebp]
	jmp	DWORD PTR $LN34@GetTurnsUn[ecx*4]
$LN8@GetTurnsUn:

; 2112 : 	{
; 2113 : 	case SPY_STATE_UNASSIGNED:
; 2114 : 		// no end time
; 2115 : 		return -1;

	or	eax, -1
	jmp	$LN12@GetTurnsUn

; 2116 : 		break;

	jmp	$LN9@GetTurnsUn
$LN7@GetTurnsUn:

; 2117 : 	case SPY_STATE_TRAVELLING:
; 2118 : 	case SPY_STATE_SURVEILLANCE:
; 2119 : 	case SPY_STATE_GATHERING_INTEL:
; 2120 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 2121 : 		pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 2122 : 		CvAssertMsg(pCity, "GetCityWithSpy returned null. Has the wrong task");
; 2123 : 		if(!pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	jne	SHORT $LN6@GetTurnsUn

; 2124 : 		{
; 2125 : 			return -1;

	or	eax, -1
	jmp	$LN12@GetTurnsUn
$LN6@GetTurnsUn:

; 2126 : 		}
; 2127 : 		pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 2128 : 		iAmountLeft = pCityEspionage->m_aiGoal[ePlayer] - pCityEspionage->m_aiAmount[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+268]
	sub	eax, DWORD PTR [esi+edx*4+92]
	mov	DWORD PTR _iAmountLeft$[ebp], eax

; 2129 : 		if(pCityEspionage->m_aiRate[ePlayer] != 0)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [edx+ecx*4+180], 0
	je	SHORT $LN5@GetTurnsUn

; 2130 : 		{
; 2131 : 			iTurnsLeft = iAmountLeft / pCityEspionage->m_aiRate[ePlayer];

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR _iAmountLeft$[ebp]
	cdq
	idiv	DWORD PTR [esi+ecx*4+180]
	mov	DWORD PTR _iTurnsLeft$[ebp], eax

; 2132 : 			if(iAmountLeft % pCityEspionage->m_aiRate[ePlayer] > 0)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR _iAmountLeft$[ebp]
	cdq
	idiv	DWORD PTR [esi+ecx*4+180]
	test	edx, edx
	jle	SHORT $LN5@GetTurnsUn

; 2133 : 			{
; 2134 : 				iTurnsLeft++;

	mov	edx, DWORD PTR _iTurnsLeft$[ebp]
	add	edx, 1
	mov	DWORD PTR _iTurnsLeft$[ebp], edx
$LN5@GetTurnsUn:

; 2135 : 			}
; 2136 : 		}
; 2137 : 		return iTurnsLeft;

	mov	eax, DWORD PTR _iTurnsLeft$[ebp]
	jmp	SHORT $LN12@GetTurnsUn
$LN3@GetTurnsUn:

; 2138 : 	case SPY_STATE_RIG_ELECTION:
; 2139 : 		return GC.getGame().GetTurnsUntilMinorCivElection();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236829[ebp], eax
	mov	ecx, DWORD PTR $T236829[ebp]
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	jmp	SHORT $LN12@GetTurnsUn

; 2140 : 		break;

	jmp	SHORT $LN9@GetTurnsUn
$LN2@GetTurnsUn:

; 2141 : 	case SPY_STATE_COUNTER_INTEL:
; 2142 : 	case SPY_STATE_SCHMOOZE:
; 2143 : 		// no end time
; 2144 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN12@GetTurnsUn

; 2145 : 		break;

	jmp	SHORT $LN9@GetTurnsUn
$LN1@GetTurnsUn:

; 2146 : 	case SPY_STATE_DEAD:
; 2147 : 		// no end time
; 2148 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN12@GetTurnsUn
$LN9@GetTurnsUn:

; 2149 : 		break;
; 2150 : 	}
; 2151 : 
; 2152 : 	return -1;

	or	eax, -1
$LN12@GetTurnsUn:

; 2153 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN34@GetTurnsUn:
	DD	$LN8@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN3@GetTurnsUn
	DD	$LN2@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN2@GetTurnsUn
	DD	$LN1@GetTurnsUn
?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z ENDP ; CvPlayerEspionage::GetTurnsUntilStateComplete
_TEXT	ENDS
PUBLIC	?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetPercentOfStateComplete
EXTRN	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ:PROC ; CvGame::GetTurnsBetweenMinorCivElections
; Function compile flags: /Odtp
;	COMDAT ?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
tv84 = -40						; size = 4
_this$ = -36						; size = 4
$T236872 = -32						; size = 4
$T236868 = -28						; size = 4
$T236864 = -24						; size = 4
$T236860 = -20						; size = 4
$T236836 = -16						; size = 4
_ePlayer$ = -12						; size = 4
_pCityEspionage$ = -8					; size = 4
_pCity$ = -4						; size = 4
_uiSpyIndex$ = 8					; size = 4
?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z PROC ; CvPlayerEspionage::GetPercentOfStateComplete, COMDAT
; _this$ = ecx

; 2157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2158 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 2159 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236836[ebp], ecx
	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	cmp	edx, DWORD PTR $T236836[ebp]
	jb	SHORT $LN19@GetPercent

; 2160 : 	{
; 2161 : 		return -2;

	mov	eax, -2					; fffffffeH
	jmp	$LN13@GetPercent

; 2162 : 	}
; 2163 : 
; 2164 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

$LN19@GetPercent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 2165 : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 2166 : 	CvCityEspionage* pCityEspionage = NULL;

	mov	DWORD PTR _pCityEspionage$[ebp], 0

; 2167 : #ifdef AUI_WARNING_FIXES
; 2168 : 	const CvGame& kGame = GC.getGame();
; 2169 : #endif
; 2170 : 
; 2171 : 	switch(m_aSpyList[uiSpyIndex].m_eSpyState)

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+16]
	mov	DWORD PTR tv84[ebp], eax
	cmp	DWORD PTR tv84[ebp], 8
	ja	$LN10@GetPercent
	mov	ecx, DWORD PTR tv84[ebp]
	jmp	DWORD PTR $LN37@GetPercent[ecx*4]
$LN9@GetPercent:

; 2172 : 	{
; 2173 : 	case SPY_STATE_UNASSIGNED:
; 2174 : 		// no end time
; 2175 : 		return -1;

	or	eax, -1
	jmp	$LN13@GetPercent

; 2176 : 		break;

	jmp	$LN10@GetPercent
$LN8@GetPercent:

; 2177 : 	case SPY_STATE_TRAVELLING:
; 2178 : 	case SPY_STATE_SURVEILLANCE:
; 2179 : 	case SPY_STATE_GATHERING_INTEL:
; 2180 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 2181 : 		pCity = GetCityWithSpy(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$[ebp], eax

; 2182 : 		if (pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN7@GetPercent

; 2183 : 		{
; 2184 : 			pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$[ebp], eax

; 2185 : 			CvAssertMsg(pCityEspionage->m_aiGoal[ePlayer] != 0, "Trying to div by zero!");
; 2186 : 			if(pCityEspionage->m_aiGoal[ePlayer] != 0)

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$[ebp]
	cmp	DWORD PTR [ecx+eax*4+268], 0
	je	SHORT $LN7@GetPercent

; 2187 : 			{
; 2188 : 				return (pCityEspionage->m_aiAmount[ePlayer] * 100) / pCityEspionage->m_aiGoal[ePlayer];

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+92]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$[ebp]
	cdq
	idiv	DWORD PTR [esi+ecx*4+268]
	jmp	SHORT $LN13@GetPercent
$LN7@GetPercent:

; 2189 : 			}
; 2190 : 		}
; 2191 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN13@GetPercent
$LN5@GetPercent:

; 2192 : 	case SPY_STATE_RIG_ELECTION:
; 2193 : #ifdef AUI_WARNING_FIXES
; 2194 : 		if (kGame.GetTurnsBetweenMinorCivElections() != 0)
; 2195 : 		{
; 2196 : 			return ((kGame.GetTurnsBetweenMinorCivElections() - kGame.GetTurnsUntilMinorCivElection()) * 100) / kGame.GetTurnsBetweenMinorCivElections();
; 2197 : #else
; 2198 : 		if(GC.getGame().GetTurnsBetweenMinorCivElections() != 0)

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236860[ebp], edx
	mov	ecx, DWORD PTR $T236860[ebp]
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	test	eax, eax
	je	SHORT $LN4@GetPercent

; 2199 : 		{
; 2200 : 			return ((GC.getGame().GetTurnsBetweenMinorCivElections() - GC.getGame().GetTurnsUntilMinorCivElection()) * 100) / GC.getGame().GetTurnsBetweenMinorCivElections();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236864[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236868[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T236872[ebp], edx
	mov	ecx, DWORD PTR $T236864[ebp]
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	mov	esi, eax
	mov	ecx, DWORD PTR $T236868[ebp]
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	sub	esi, eax
	imul	esi, 100				; 00000064H
	mov	ecx, DWORD PTR $T236872[ebp]
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	jmp	SHORT $LN13@GetPercent

; 2201 : #endif
; 2202 : 		}
; 2203 : 		else

	jmp	SHORT $LN3@GetPercent
$LN4@GetPercent:

; 2204 : 		{
; 2205 : 			return -1;

	or	eax, -1
	jmp	SHORT $LN13@GetPercent
$LN3@GetPercent:

; 2206 : 		}
; 2207 : 		break;

	jmp	SHORT $LN10@GetPercent
$LN2@GetPercent:

; 2208 : 	case SPY_STATE_COUNTER_INTEL:
; 2209 : 	case SPY_STATE_SCHMOOZE:
; 2210 : 		// no end time
; 2211 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN13@GetPercent

; 2212 : 		break;

	jmp	SHORT $LN10@GetPercent
$LN1@GetPercent:

; 2213 : 	case SPY_STATE_DEAD:
; 2214 : 		// no end time
; 2215 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN13@GetPercent
$LN10@GetPercent:

; 2216 : 		break;
; 2217 : 	}
; 2218 : 
; 2219 : 	return -1;

	or	eax, -1
$LN13@GetPercent:

; 2220 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN37@GetPercent:
	DD	$LN9@GetPercent
	DD	$LN8@GetPercent
	DD	$LN8@GetPercent
	DD	$LN8@GetPercent
	DD	$LN5@GetPercent
	DD	$LN2@GetPercent
	DD	$LN8@GetPercent
	DD	$LN2@GetPercent
	DD	$LN1@GetPercent
?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z ENDP ; CvPlayerEspionage::GetPercentOfStateComplete
_TEXT	ENDS
PUBLIC	?GetNumSpies@CvPlayerEspionage@@QAEHXZ		; CvPlayerEspionage::GetNumSpies
; Function compile flags: /Odtp
;	COMDAT ?GetNumSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T236879 = -4						; size = 4
?GetNumSpies@CvPlayerEspionage@@QAEHXZ PROC		; CvPlayerEspionage::GetNumSpies, COMDAT
; _this$ = ecx

; 2225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2226 : 	return m_aSpyList.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236879[ebp], ecx
	mov	eax, DWORD PTR $T236879[ebp]

; 2227 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumSpies@CvPlayerEspionage@@QAEHXZ ENDP		; CvPlayerEspionage::GetNumSpies
_TEXT	ENDS
PUBLIC	?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNumAliveSpies
; Function compile flags: /Odtp
;	COMDAT ?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T236885 = -12						; size = 4
_ui$223209 = -8						; size = 4
_iCount$ = -4						; size = 4
?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumAliveSpies, COMDAT
; _this$ = ecx

; 2231 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2232 : 	int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 2233 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$223209[ebp], 0
	jmp	SHORT $LN4@GetNumAliv
$LN3@GetNumAliv:
	mov	eax, DWORD PTR _ui$223209[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223209[ebp], eax
$LN4@GetNumAliv:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236885[ebp], edx
	mov	eax, DWORD PTR _ui$223209[ebp]
	cmp	eax, DWORD PTR $T236885[ebp]
	jae	SHORT $LN2@GetNumAliv

; 2234 : 	{
; 2235 : 		if(m_aSpyList[ui].m_eSpyState != SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _ui$223209[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+ecx+16], 8
	je	SHORT $LN1@GetNumAliv

; 2236 : 		{
; 2237 : 			iCount++;

	mov	ecx, DWORD PTR _iCount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCount$[ebp], ecx
$LN1@GetNumAliv:

; 2238 : 		}
; 2239 : 	}

	jmp	SHORT $LN3@GetNumAliv
$LN2@GetNumAliv:

; 2240 : 
; 2241 : 	return iCount;

	mov	eax, DWORD PTR _iCount$[ebp]

; 2242 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumAliveSpies
_TEXT	ENDS
PUBLIC	?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNumAssignedSpies
; Function compile flags: /Odtp
;	COMDAT ?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T236894 = -12						; size = 4
_ui$223219 = -8						; size = 4
_iCount$ = -4						; size = 4
?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumAssignedSpies, COMDAT
; _this$ = ecx

; 2246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2247 : 	int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 2248 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$223219[ebp], 0
	jmp	SHORT $LN5@GetNumAssi
$LN4@GetNumAssi:
	mov	eax, DWORD PTR _ui$223219[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223219[ebp], eax
$LN5@GetNumAssi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236894[ebp], edx
	mov	eax, DWORD PTR _ui$223219[ebp]
	cmp	eax, DWORD PTR $T236894[ebp]
	jae	SHORT $LN3@GetNumAssi

; 2249 : 	{
; 2250 : 		if(m_aSpyList[ui].m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _ui$223219[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+ecx+16], 8
	jne	SHORT $LN2@GetNumAssi

; 2251 : 		{
; 2252 : 			continue;

	jmp	SHORT $LN4@GetNumAssi
$LN2@GetNumAssi:

; 2253 : 		}
; 2254 : 
; 2255 : 		if(IsSpyInCity(ui))

	mov	ecx, DWORD PTR _ui$223219[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSpyInCity
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetNumAssi

; 2256 : 		{
; 2257 : 			iCount++;

	mov	eax, DWORD PTR _iCount$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCount$[ebp], eax
$LN1@GetNumAssi:

; 2258 : 		}
; 2259 : 	}

	jmp	SHORT $LN4@GetNumAssi
$LN3@GetNumAssi:

; 2260 : 
; 2261 : 	return iCount;

	mov	eax, DWORD PTR _iCount$[ebp]

; 2262 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumAssignedSpies
_TEXT	ENDS
PUBLIC	?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNumUnassignedSpies
; Function compile flags: /Odtp
;	COMDAT ?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumUnassignedSpies, COMDAT
; _this$ = ecx

; 2266 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2267 : 	return GetNumAliveSpies() - GetNumAssignedSpies();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNumAliveSpies
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNumAssignedSpies
	sub	esi, eax
	mov	eax, esi

; 2268 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumUnassignedSpies
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::push_back
PUBLIC	??_C@_0N@FKOCAGBC@ERA_MEDIEVAL?$AA@		; `string'
EXTRN	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z:PROC ; CvPlayerTechs::GetResearchCost
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?GetEra@CvTechEntry@@QBEHXZ:PROC		; CvTechEntry::GetEra
EXTRN	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z:PROC ; CvTechXMLEntries::GetEntry
EXTRN	?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ:PROC ; CvGlobals::GetGameTechs
EXTRN	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::CanResearch
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?GetNumTechs@CvTechXMLEntries@@QAEHXZ:PROC	; CvTechXMLEntries::GetNumTechs
EXTRN	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ:PROC ; CvPlayerTechs::GetTechs
EXTRN	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ:PROC ; CvPlayer::GetPlayerTechs
;	COMDAT ??_C@_0N@FKOCAGBC@ERA_MEDIEVAL?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\farray.h
CONST	SEGMENT
??_C@_0N@FKOCAGBC@ERA_MEDIEVAL?$AA@ DB 'ERA_MEDIEVAL', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
CONST	ENDS
;	COMDAT ?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T236961 = -64						; size = 4
$T236957 = -60						; size = 4
$T236948 = -56						; size = 4
$T236944 = -52						; size = 4
$T236940 = -45						; size = 1
$T236931 = -44						; size = 4
$T236927 = -40						; size = 4
_i$236922 = -36						; size = 4
$T236905 = -32						; size = 4
_eTech$223243 = -28					; size = 4
_iTechCost$223251 = -24					; size = 4
_pEntry$223247 = -20					; size = 4
_iTechLoop$223239 = -16					; size = 4
_pMyPlayerTechs$ = -12					; size = 4
_iMaxTechCost$ = -8					; size = 4
_pOtherPlayerTechs$ = -4				; size = 4
_ePlayer$ = 8						; size = 4
?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::BuildStealableTechList, COMDAT
; _this$ = ecx

; 2272 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2273 : 	CvAssertMsg((uint)ePlayer < m_aaPlayerStealableTechList.size(), "ePlayer out of bounds");
; 2274 : 	if((uint)ePlayer >= m_aaPlayerStealableTechList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR $T236905[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	cmp	edx, DWORD PTR $T236905[ebp]
	jb	SHORT $LN15@BuildSteal

; 2275 : 	{
; 2276 : 		return;

	jmp	$LN11@BuildSteal

; 2277 : 	}
; 2278 : 
; 2279 : 	m_aaPlayerStealableTechList[ePlayer].clear();

$LN15@BuildSteal:
	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+264]
	mov	DWORD PTR $T236927[ebp], eax
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN23@BuildSteal
	mov	DWORD PTR _i$236922[ebp], 0
	jmp	SHORT $LN21@BuildSteal
$LN20@BuildSteal:
	mov	eax, DWORD PTR _i$236922[ebp]
	add	eax, 1
	mov	DWORD PTR _i$236922[ebp], eax
$LN21@BuildSteal:
	mov	ecx, DWORD PTR $T236927[ebp]
	mov	edx, DWORD PTR _i$236922[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN23@BuildSteal
	jmp	SHORT $LN20@BuildSteal
$LN23@BuildSteal:
	mov	eax, DWORD PTR $T236927[ebp]
	mov	DWORD PTR [eax+4], 0

; 2280 : 
; 2281 : 	if(!GET_PLAYER(ePlayer).isAlive())

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236931[ebp], ecx
	mov	edx, DWORD PTR $T236931[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T236940[ebp], al
	movzx	ecx, BYTE PTR $T236940[ebp]
	test	ecx, ecx
	jne	SHORT $LN9@BuildSteal

; 2282 : 	{
; 2283 : 		return;

	jmp	$LN11@BuildSteal
$LN9@BuildSteal:

; 2284 : 	}
; 2285 : 
; 2286 : 	int iMaxTechCost = -1;

	mov	DWORD PTR _iMaxTechCost$[ebp], -1

; 2287 : 
; 2288 : 	CvPlayerTechs* pMyPlayerTechs = m_pPlayer->GetPlayerTechs();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	DWORD PTR _pMyPlayerTechs$[ebp], eax

; 2289 : 	CvPlayerTechs* pOtherPlayerTechs = GET_PLAYER(ePlayer).GetPlayerTechs();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236944[ebp], eax
	mov	ecx, DWORD PTR $T236944[ebp]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	DWORD PTR _pOtherPlayerTechs$[ebp], eax

; 2290 : #ifdef AUI_WARNING_FIXES
; 2291 : 	for (uint iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)
; 2292 : #else
; 2293 : 	for(int iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)

	mov	DWORD PTR _iTechLoop$223239[ebp], 0
	jmp	SHORT $LN8@BuildSteal
$LN7@BuildSteal:
	mov	ecx, DWORD PTR _iTechLoop$223239[ebp]
	add	ecx, 1
	mov	DWORD PTR _iTechLoop$223239[ebp], ecx
$LN8@BuildSteal:
	mov	ecx, DWORD PTR _pOtherPlayerTechs$[ebp]
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	cmp	DWORD PTR _iTechLoop$223239[ebp], eax
	jge	$LN65@BuildSteal

; 2294 : #endif
; 2295 : 	{
; 2296 : 		TechTypes eTech = (TechTypes)iTechLoop;

	mov	edx, DWORD PTR _iTechLoop$223239[ebp]
	mov	DWORD PTR _eTech$223243[ebp], edx

; 2297 : 
; 2298 : 		// Does the other player already have this tech?
; 2299 : 		if(!GET_TEAM(GET_PLAYER(ePlayer).getTeam()).GetTeamTechs()->HasTech(eTech))

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T236948[ebp], eax
	mov	ecx, DWORD PTR $T236948[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T236957[ebp], eax
	mov	eax, DWORD PTR $T236957[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T236961[ebp], eax
	mov	ecx, DWORD PTR _eTech$223243[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T236961[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@BuildSteal

; 2300 : 		{
; 2301 : 			continue;

	jmp	SHORT $LN7@BuildSteal
$LN5@BuildSteal:

; 2302 : 		}
; 2303 : 
; 2304 : 		// can we not research this tech?
; 2305 : 		if(!pMyPlayerTechs->CanResearch(eTech))

	push	0
	mov	eax, DWORD PTR _eTech$223243[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMyPlayerTechs$[ebp]
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@BuildSteal

; 2306 : 		{
; 2307 : 			continue;

	jmp	$LN7@BuildSteal
$LN4@BuildSteal:

; 2308 : 		}
; 2309 : 
; 2310 : #ifdef CANT_STEAL_CLASSICAL_ERA_TECHS //This time from Immos, this one works with just < ERA rather than a xml tag
; 2311 : 		CvTechEntry* pEntry = GC.GetGameTechs()->GetEntry(eTech);

	mov	edx, DWORD PTR _eTech$223243[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameTechs@CvGlobals@@QBEPAVCvTechXMLEntries@@XZ ; CvGlobals::GetGameTechs
	mov	ecx, eax
	call	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z ; CvTechXMLEntries::GetEntry
	mov	DWORD PTR _pEntry$223247[ebp], eax

; 2312 : 		if(pEntry)

	cmp	DWORD PTR _pEntry$223247[ebp], 0
	je	SHORT $LN41@BuildSteal

; 2313 : 		{
; 2314 : 			if((pEntry->GetEra() < GC.getInfoTypeForString("ERA_MEDIEVAL", true /*bHideAssert*/)))

	mov	ecx, DWORD PTR _pEntry$223247[ebp]
	call	?GetEra@CvTechEntry@@QBEHXZ		; CvTechEntry::GetEra
	mov	esi, eax
	push	1
	push	OFFSET ??_C@_0N@FKOCAGBC@ERA_MEDIEVAL?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	cmp	esi, eax
	jge	SHORT $LN41@BuildSteal

; 2315 : 			{
; 2316 : 				continue;

	jmp	$LN7@BuildSteal

; 2317 : 			}
; 2318 : 		}
; 2319 : #endif
; 2320 : 		// can it be stolen? ~EAP
; 2321 : 		//CvTechEntry* pkTechInfo = GC.getTechInfo(eTech);
; 2322 : 		//if (pkTechInfo->IsDisableTechSteal())
; 2323 : 		//{
; 2324 : 		//	continue;
; 2325 : 		//}
; 2326 : 
; 2327 : 		// add to list!
; 2328 : 		m_aaPlayerStealableTechList[ePlayer].push_back(eTech);

$LN41@BuildSteal:
	lea	eax, DWORD PTR _eTech$223243[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+264]
	call	?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::push_back

; 2329 : 
; 2330 : 		// try to find the most expensive tech that can be researched
; 2331 : 		int iTechCost = m_pPlayer->GetPlayerTechs()->GetResearchCost(eTech) * 100;

	mov	eax, DWORD PTR _eTech$223243[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z ; CvPlayerTechs::GetResearchCost
	imul	eax, 100				; 00000064H
	mov	DWORD PTR _iTechCost$223251[ebp], eax

; 2332 : 		if(iTechCost > iMaxTechCost)

	mov	edx, DWORD PTR _iTechCost$223251[ebp]
	cmp	edx, DWORD PTR _iMaxTechCost$[ebp]
	jle	SHORT $LN1@BuildSteal

; 2333 : 		{
; 2334 : 			iMaxTechCost = iTechCost;

	mov	eax, DWORD PTR _iTechCost$223251[ebp]
	mov	DWORD PTR _iMaxTechCost$[ebp], eax
$LN1@BuildSteal:

; 2335 : 		}
; 2336 : 	}

	jmp	$LN7@BuildSteal

; 2337 : 
; 2338 : 	m_aiMaxTechCost[ePlayer] = iMaxTechCost;

$LN65@BuildSteal:
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iMaxTechCost$[ebp]
	mov	DWORD PTR [edx+ecx*4+824], eax
$LN11@BuildSteal:

; 2339 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::BuildStealableTechList
_TEXT	ENDS
PUBLIC	?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z ; CvPlayerEspionage::IsTechStealable
; Function compile flags: /Odtp
;	COMDAT ?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T236999 = -20						; size = 4
$T236995 = -16						; size = 4
$T236991 = -12						; size = 4
$T236987 = -8						; size = 4
_ui$223260 = -4						; size = 4
_ePlayer$ = 8						; size = 4
_eTech$ = 12						; size = 4
?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z PROC ; CvPlayerEspionage::IsTechStealable, COMDAT
; _this$ = ecx

; 2343 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2344 : 	CvAssertMsg((uint)ePlayer < m_aaPlayerStealableTechList.size(), "ePlayer out of bounds");
; 2345 : 	if((uint)ePlayer >= m_aaPlayerStealableTechList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR $T236987[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	cmp	edx, DWORD PTR $T236987[ebp]
	jb	SHORT $LN5@IsTechStea

; 2346 : 	{
; 2347 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@IsTechStea
$LN5@IsTechStea:

; 2348 : 	}
; 2349 : 
; 2350 : 	for(uint ui = 0; ui < m_aaPlayerStealableTechList[ePlayer].size(); ui++)

	mov	DWORD PTR _ui$223260[ebp], 0
	jmp	SHORT $LN4@IsTechStea
$LN3@IsTechStea:
	mov	eax, DWORD PTR _ui$223260[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223260[ebp], eax
$LN4@IsTechStea:
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T236991[ebp], ecx
	mov	eax, DWORD PTR $T236991[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236995[ebp], ecx
	mov	edx, DWORD PTR _ui$223260[ebp]
	cmp	edx, DWORD PTR $T236995[ebp]
	jae	SHORT $LN2@IsTechStea

; 2351 : 	{
; 2352 : 		if(m_aaPlayerStealableTechList[ePlayer][ui] == eTech)

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+264]
	mov	DWORD PTR $T236999[ebp], eax
	mov	edx, DWORD PTR $T236999[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ui$223260[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _eTech$[ebp]
	jne	SHORT $LN1@IsTechStea

; 2353 : 		{
; 2354 : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@IsTechStea
$LN1@IsTechStea:

; 2355 : 		}
; 2356 : 	}

	jmp	SHORT $LN3@IsTechStea
$LN2@IsTechStea:

; 2357 : 
; 2358 : 	return false;

	xor	al, al
$LN6@IsTechStea:

; 2359 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z ENDP ; CvPlayerEspionage::IsTechStealable
_TEXT	ENDS
PUBLIC	?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z ; CvPlayerEspionage::GetNumTechsToSteal
; Function compile flags: /Odtp
;	COMDAT ?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T237008 = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::GetNumTechsToSteal, COMDAT
; _this$ = ecx

; 2363 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2364 : 	CvAssertMsg((uint)ePlayer < m_aiNumTechsToStealList.size(), "ePlayer out of bounds");
; 2365 : 	if((uint)ePlayer >= m_aiNumTechsToStealList.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR $T237008[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	cmp	edx, DWORD PTR $T237008[ebp]
	jb	SHORT $LN6@GetNumTech

; 2366 : 	{
; 2367 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN2@GetNumTech

; 2368 : 	}
; 2369 : 
; 2370 : 	return m_aiNumTechsToStealList[ePlayer];

$LN6@GetNumTech:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
$LN2@GetNumTech:

; 2371 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::GetNumTechsToSteal
_TEXT	ENDS
PUBLIC	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
; Function compile flags: /Odtp
;	COMDAT ?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T237017 = -12						; size = 4
_iSpyIndex$ = -8					; size = 4
_pTheirCapital$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
_bIncludeTravelling$ = 12				; size = 1
?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z PROC ; CvPlayerEspionage::IsMyDiplomatVisitingThem, COMDAT
; _this$ = ecx

; 2374 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2375 : 	CvCity* pTheirCapital = GET_PLAYER(ePlayer).getCapitalCity();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237017[ebp], eax
	mov	ecx, DWORD PTR $T237017[ebp]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	DWORD PTR _pTheirCapital$[ebp], eax

; 2376 : 	if (!pTheirCapital)

	cmp	DWORD PTR _pTheirCapital$[ebp], 0
	jne	SHORT $LN5@IsMyDiplom

; 2377 : 	{
; 2378 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@IsMyDiplom
$LN5@IsMyDiplom:

; 2379 : 	}
; 2380 : 
; 2381 : 	int iSpyIndex = GetSpyIndexInCity(pTheirCapital);

	mov	ecx, DWORD PTR _pTheirCapital$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	mov	DWORD PTR _iSpyIndex$[ebp], eax

; 2382 : 
; 2383 : 	if (iSpyIndex < 0)

	cmp	DWORD PTR _iSpyIndex$[ebp], 0
	jge	SHORT $LN10@IsMyDiplom

; 2384 : 	{
; 2385 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@IsMyDiplom

; 2386 : 	}
; 2387 : 
; 2388 : 	if (!m_aSpyList[iSpyIndex].m_bIsDiplomat)

$LN10@IsMyDiplom:
	mov	edx, DWORD PTR _iSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+edx+24]
	test	edx, edx
	jne	SHORT $LN3@IsMyDiplom

; 2389 : 	{
; 2390 : 		return false;

	xor	al, al
	jmp	SHORT $LN6@IsMyDiplom
$LN3@IsMyDiplom:

; 2391 : 	}
; 2392 : 
; 2393 : 	if (!bIncludeTravelling)

	movzx	eax, BYTE PTR _bIncludeTravelling$[ebp]
	test	eax, eax
	jne	SHORT $LN2@IsMyDiplom

; 2394 : 	{
; 2395 : 		// If the spy is not schmoozing yet, then it doesn't count as a diplomat yet
; 2396 : 		if (!IsSchmoozing(iSpyIndex))

	mov	ecx, DWORD PTR _iSpyIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSchmoozing
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@IsMyDiplom

; 2397 : 		{
; 2398 : 			return false;

	xor	al, al
	jmp	SHORT $LN6@IsMyDiplom
$LN2@IsMyDiplom:

; 2399 : 		}
; 2400 : 	}
; 2401 : 
; 2402 : 	return true;

	mov	al, 1
$LN6@IsMyDiplom:

; 2403 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ENDP ; CvPlayerEspionage::IsMyDiplomatVisitingThem
_TEXT	ENDS
PUBLIC	?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsOtherDiplomatVisitingMe
; Function compile flags: /Odtp
;	COMDAT ?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T237035 = -8						; size = 4
$T237031 = -4						; size = 4
_ePlayer$ = 8						; size = 4
?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::IsOtherDiplomatVisitingMe, COMDAT
; _this$ = ecx

; 2406 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2407 : 	return GET_PLAYER(ePlayer).GetEspionage()->IsMyDiplomatVisitingThem(m_pPlayer->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T237031[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237035[ebp], eax
	push	0
	mov	ecx, DWORD PTR $T237031[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T237035[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem

; 2408 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::IsOtherDiplomatVisitingMe
_TEXT	ENDS
PUBLIC	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
; Function compile flags: /Odtp
;	COMDAT ?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T237041 = -28						; size = 4
_ui$223295 = -24					; size = 4
_kMessage$ = -20					; size = 20
_iCityX$ = 8						; size = 4
_iCityY$ = 12						; size = 4
_eAttackingPlayer$ = 16					; size = 4
_iSpyResult$ = 20					; size = 4
_eStolenTech$ = 24					; size = 4
?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z PROC ; CvPlayerEspionage::AddSpyMessage, COMDAT
; _this$ = ecx

; 2414 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 2415 : 	// go through all messages to see if this is an update
; 2416 : 	for(uint ui = 0; ui < m_aSpyNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223295[ebp], 0
	jmp	SHORT $LN4@AddSpyMess
$LN3@AddSpyMess:
	mov	eax, DWORD PTR _ui$223295[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223295[ebp], eax
$LN4@AddSpyMess:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	mov	DWORD PTR $T237041[ebp], ecx
	mov	edx, DWORD PTR $T237041[ebp]
	mov	eax, DWORD PTR $T237041[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	DWORD PTR _ui$223295[ebp], eax
	jae	SHORT $LN2@AddSpyMess

; 2417 : 	{
; 2418 : 		if(m_aSpyNotificationMessages[ui].m_iCityX == iCityX && m_aSpyNotificationMessages[ui].m_iCityY == iCityY && m_aSpyNotificationMessages[ui].m_eAttackingPlayer == eAttackingPlayer)

	mov	edx, DWORD PTR _ui$223295[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _iCityX$[ebp]
	jne	SHORT $LN1@AddSpyMess
	mov	eax, DWORD PTR _ui$223295[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1268]
	mov	eax, DWORD PTR [edx+eax+4]
	cmp	eax, DWORD PTR _iCityY$[ebp]
	jne	SHORT $LN1@AddSpyMess
	mov	ecx, DWORD PTR _ui$223295[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	ecx, DWORD PTR [eax+ecx+8]
	cmp	ecx, DWORD PTR _eAttackingPlayer$[ebp]
	jne	SHORT $LN1@AddSpyMess

; 2419 : 		{
; 2420 : 			m_aSpyNotificationMessages[ui].m_iSpyResult = iSpyResult;

	mov	edx, DWORD PTR _ui$223295[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	mov	eax, DWORD PTR _iSpyResult$[ebp]
	mov	DWORD PTR [ecx+edx+12], eax

; 2421 : 			m_aSpyNotificationMessages[ui].m_eStolenTech = eStolenTech;

	mov	ecx, DWORD PTR _ui$223295[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	edx, DWORD PTR _eStolenTech$[ebp]
	mov	DWORD PTR [eax+ecx+16], edx

; 2422 : 			// found the appropriate message, now leaving the function
; 2423 : 			return;

	jmp	SHORT $LN5@AddSpyMess
$LN1@AddSpyMess:

; 2424 : 		}
; 2425 : 	}

	jmp	$LN3@AddSpyMess
$LN2@AddSpyMess:

; 2426 : 
; 2427 : 	// no matching message found so adding it to the back of the list
; 2428 : 	SpyNotificationMessage kMessage;
; 2429 : 	kMessage.m_iCityX = iCityX;

	mov	eax, DWORD PTR _iCityX$[ebp]
	mov	DWORD PTR _kMessage$[ebp], eax

; 2430 : 	kMessage.m_iCityY = iCityY;

	mov	ecx, DWORD PTR _iCityY$[ebp]
	mov	DWORD PTR _kMessage$[ebp+4], ecx

; 2431 : 	kMessage.m_eAttackingPlayer = eAttackingPlayer;

	mov	edx, DWORD PTR _eAttackingPlayer$[ebp]
	mov	DWORD PTR _kMessage$[ebp+8], edx

; 2432 : 	kMessage.m_iSpyResult = iSpyResult;

	mov	eax, DWORD PTR _iSpyResult$[ebp]
	mov	DWORD PTR _kMessage$[ebp+12], eax

; 2433 : 	kMessage.m_eStolenTech = eStolenTech;

	mov	ecx, DWORD PTR _eStolenTech$[ebp]
	mov	DWORD PTR _kMessage$[ebp+16], ecx

; 2434 : 	m_aSpyNotificationMessages.push_back(kMessage);

	lea	edx, DWORD PTR _kMessage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	call	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
$LN5@AddSpyMess:

; 2435 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ENDP ; CvPlayerEspionage::AddSpyMessage
_TEXT	ENDS
PUBLIC	??_C@_0DA@KMGBCDGC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DG@GPGPEFAC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DC@DNKLDCM@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0CO@IADINDIA@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DE@PLIFFAHK@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DA@NCCPPMAH@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0CC@PFNIIANF@TXT_KEY_NOTIFICATION_KILLED_A_SP@ ; `string'
PUBLIC	??_C@_0CE@OHIBCALI@TXT_KEY_NOTIFICATION_KILLED_A_SP@ ; `string'
PUBLIC	??_C@_0DI@IMFCNGPF@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DO@DFALKNHL@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DK@PAANIJFB@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DG@GGJFFAK@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DM@OMABCNAD@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	??_C@_0DI@BHJICMIC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ ; `string'
PUBLIC	?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase
EXTRN	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ:PROC ; CvCivilizationInfo::getAdjectiveKey
EXTRN	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z:PROC ; CvGlobals::getTechInfo
EXTRN	?countHumanPlayersEverAlive@CvGame@@QBEHXZ:PROC	; CvGame::countHumanPlayersEverAlive
;	COMDAT ??_C@_0DA@KMGBCDGC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	SEGMENT
??_C@_0DA@KMGBCDGC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_IDENTIFIED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GPGPEFAC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DG@GPGPEFAC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_IDENTIFIED_W_TIP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DNKLDCM@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DC@DNKLDCM@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_TECH_STOLEN_SPY_IDENTIFIED_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IADINDIA@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0CO@IADINDIA@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_DETECTED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PLIFFAHK@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DE@PLIFFAHK@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_DETECTED_W_TIP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NCCPPMAH@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DA@NCCPPMAH@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_DETECTED_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PFNIIANF@TXT_KEY_NOTIFICATION_KILLED_A_SP@
CONST	SEGMENT
??_C@_0CC@PFNIIANF@TXT_KEY_NOTIFICATION_KILLED_A_SP@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_KILLED_A_SPY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OHIBCALI@TXT_KEY_NOTIFICATION_KILLED_A_SP@
CONST	SEGMENT
??_C@_0CE@OHIBCALI@TXT_KEY_NOTIFICATION_KILLED_A_SP@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_KILLED_A_SPY_S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@IMFCNGPF@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DI@IMFCNGPF@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@DFALKNHL@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DO@DFALKNHL@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_W_TIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@PAANIJFB@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DK@PAANIJFB@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GGJFFAK@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DG@GGJFFAK@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_TECH_STOLEN_SPY_DETECTED_WO_TECH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@OMABCNAD@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DM@OMABCNAD@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_DETECTED_WO_TECH_W_TIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@BHJICMIC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
CONST	SEGMENT
??_C@_0DI@BHJICMIC@TXT_KEY_NOTIFICATION_TECH_STOLEN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_TECH_STOLEN_SPY_DETECTED_WO_TECH_S', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$5
	DD	06H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$9
	DD	0aH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$11
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$12
	DD	0dH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$15
	DD	010H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$16
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$18
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
tv638 = -1996						; size = 4
tv688 = -1992						; size = 4
tv510 = -1988						; size = 4
tv686 = -1984						; size = 4
tv555 = -1980						; size = 4
tv682 = -1976						; size = 4
tv428 = -1972						; size = 4
tv680 = -1968						; size = 4
tv441 = -1964						; size = 4
tv427 = -1960						; size = 4
tv415 = -1956						; size = 4
tv674 = -1952						; size = 4
tv204 = -1948						; size = 4
tv672 = -1944						; size = 4
tv241 = -1940						; size = 4
tv668 = -1936						; size = 4
tv164 = -1932						; size = 4
tv666 = -1928						; size = 4
tv175 = -1924						; size = 4
tv660 = -1920						; size = 4
tv162 = -1916						; size = 4
tv781 = -1912						; size = 4
_this$ = -1908						; size = 4
$T237762 = -1904					; size = 4
$T237595 = -1836					; size = 4
$T237579 = -1832					; size = 4
$T237744 = -1828					; size = 4
$T237743 = -1824					; size = 4
$T237761 = -1820					; size = 4
$T237760 = -1816					; size = 4
$T237759 = -1812					; size = 4
$T237563 = -1808					; size = 4
$T237559 = -1804					; size = 4
$T237555 = -1800					; size = 4
$T237548 = -1796					; size = 4
$T237544 = -1792					; size = 4
$T237537 = -1788					; size = 4
$T237533 = -1784					; size = 4
$T237526 = -1780					; size = 4
$T237514 = -1776					; size = 4
$T237510 = -1772					; size = 4
$T237500 = -1768					; size = 4
$T237485 = -1764					; size = 4
$T237481 = -1760					; size = 4
$T237477 = -1756					; size = 4
$T237468 = -1752					; size = 4
$T237464 = -1748					; size = 4
$T237460 = -1744					; size = 4
$T237456 = -1740					; size = 4
$T237452 = -1736					; size = 4
$T237448 = -1732					; size = 4
$T237444 = -1728					; size = 4
$T237437 = -1724					; size = 4
$T237428 = -1720					; size = 4
$T237424 = -1716					; size = 4
$T237420 = -1712					; size = 4
$T237413 = -1708					; size = 4
$T237404 = -1704					; size = 4
$T237400 = -1700					; size = 4
$T237393 = -1696					; size = 4
$T237380 = -1692					; size = 4
$T237379 = -1688					; size = 4
$T237372 = -1684					; size = 4
$T237360 = -1676					; size = 4
$T237359 = -1672					; size = 4
$T237328 = -1668					; size = 4
$T237323 = -1664					; size = 4
$T237319 = -1657					; size = 1
$T237308 = -1656					; size = 4
$T237304 = -1649					; size = 1
_iMapY$237337 = -1648					; size = 4
_iMapX$237336 = -1644					; size = 4
$T237297 = -1640					; size = 4
$T237293 = -1636					; size = 4
$T237289 = -1632					; size = 4
$T237285 = -1628					; size = 4
$T237281 = -1624					; size = 4
$T237277 = -1620					; size = 4
$T237251 = -1616					; size = 4
$T237235 = -1612					; size = 4
$T237264 = -1608					; size = 4
$T237263 = -1604					; size = 4
$T237262 = -1600					; size = 4
$T237261 = -1596					; size = 4
$T237260 = -1592					; size = 4
$T237200 = -1588					; size = 4
$T237199 = -1584					; size = 4
$T237198 = -1580					; size = 4
$T237197 = -1576					; size = 80
$T237196 = -1496					; size = 80
$T237195 = -1416					; size = 4
$T237194 = -1412					; size = 4
$T237193 = -1408					; size = 4
$T237192 = -1404					; size = 4
$T237191 = -1400					; size = 80
$T237190 = -1320					; size = 80
$T237189 = -1240					; size = 4
$T237188 = -1236					; size = 4
$T237187 = -1232					; size = 4
$T237186 = -1228					; size = 4
$T237185 = -1224					; size = 4
$T237184 = -1220					; size = 4
$T237183 = -1216					; size = 4
$T237182 = -1212					; size = 4
$T237181 = -1208					; size = 80
$T237180 = -1128					; size = 80
$T237179 = -1048					; size = 4
$T237178 = -1044					; size = 4
$T237177 = -1040					; size = 80
$T237176 = -960						; size = 80
$T237175 = -880						; size = 28
_strNotification$223395 = -852				; size = 80
_strSummary$223390 = -772				; size = 80
_strNotification$223380 = -692				; size = 80
_strSummary$223376 = -612				; size = 80
_strNotification$223361 = -532				; size = 80
_strSummary$223357 = -452				; size = 80
_iDefendingSpy$223355 = -368				; size = 4
_strNotification$223345 = -364				; size = 80
_strSummary$223341 = -284				; size = 80
_strNotification$223332 = -204				; size = 80
_strSummary$223329 = -124				; size = 80
_pTechEntry$223319 = -44				; size = 4
_pPlot$223312 = -40					; size = 4
_pCityEspionage$223314 = -36				; size = 4
_pCity$223313 = -32					; size = 4
_ui$223308 = -28					; size = 4
_pNotifications$ = -24					; size = 4
_bMultiplayer$ = -17					; size = 1
_pEspionageAI$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ PROC	; CvPlayerEspionage::ProcessSpyMessages, COMDAT
; _this$ = ecx

; 2439 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1984				; 000007c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2440 : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$[ebp], eax

; 2441 : 	if(!pNotifications)

	cmp	DWORD PTR _pNotifications$[ebp], 0
	jne	$LN34@ProcessSpy@2

; 2442 : 	{
; 2443 : 		m_aSpyNotificationMessages.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1264				; 000004f0H
	mov	DWORD PTR $T237277[ebp], ecx
	mov	edx, DWORD PTR $T237277[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T237235[ebp], eax
	mov	ecx, DWORD PTR $T237235[ebp]
	mov	DWORD PTR $T237261[ebp], ecx
	mov	edx, DWORD PTR $T237261[ebp]
	mov	DWORD PTR $T237260[ebp], edx
	mov	eax, DWORD PTR $T237277[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T237251[ebp], ecx
	mov	edx, DWORD PTR $T237251[ebp]
	mov	DWORD PTR $T237263[ebp], edx
	mov	eax, DWORD PTR $T237263[ebp]
	mov	DWORD PTR $T237262[ebp], eax
	mov	ecx, DWORD PTR $T237260[ebp]
	push	ecx
	mov	edx, DWORD PTR $T237262[ebp]
	push	edx
	lea	eax, DWORD PTR $T237264[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237277[ebp]
	call	?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase

; 2444 : 		return;

	jmp	$LN35@ProcessSpy@2
$LN34@ProcessSpy@2:

; 2445 : 	}
; 2446 : 
; 2447 : 	bool bMultiplayer = GC.getGame().countHumanPlayersEverAlive() > 1;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T237281[ebp], ecx
	mov	ecx, DWORD PTR $T237281[ebp]
	call	?countHumanPlayersEverAlive@CvGame@@QBEHXZ ; CvGame::countHumanPlayersEverAlive
	xor	edx, edx
	cmp	eax, 1
	setg	dl
	mov	BYTE PTR _bMultiplayer$[ebp], dl

; 2448 : 	CvEspionageAI* pEspionageAI = m_pPlayer->GetEspionageAI();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pEspionageAI$[ebp], eax

; 2449 : 
; 2450 : 	for(uint ui = 0; ui < m_aSpyNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223308[ebp], 0
	jmp	SHORT $LN33@ProcessSpy@2
$LN32@ProcessSpy@2:
	mov	ecx, DWORD PTR _ui$223308[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$223308[ebp], ecx
$LN33@ProcessSpy@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1264				; 000004f0H
	mov	DWORD PTR $T237285[ebp], edx
	mov	eax, DWORD PTR $T237285[ebp]
	mov	ecx, DWORD PTR $T237285[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	DWORD PTR _ui$223308[ebp], eax
	jae	$LN31@ProcessSpy@2

; 2451 : 	{
; 2452 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyNotificationMessages[ui].m_iCityX, m_aSpyNotificationMessages[ui].m_iCityY);

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237289[ebp], edx
	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1268]
	mov	DWORD PTR $T237293[ebp], ecx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T237297[ebp], eax
	mov	ecx, DWORD PTR $T237289[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T237360[ebp], edx
	mov	eax, DWORD PTR $T237293[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T237359[ebp], ecx
	cmp	DWORD PTR $T237359[ebp], -2147483647	; 80000001H
	je	SHORT $LN80@ProcessSpy@2
	cmp	DWORD PTR $T237360[ebp], -2147483647	; 80000001H
	jne	SHORT $LN81@ProcessSpy@2
$LN80@ProcessSpy@2:
	mov	DWORD PTR _pPlot$223312[ebp], 0
	jmp	$LN82@ProcessSpy@2
$LN81@ProcessSpy@2:
	mov	edx, DWORD PTR $T237297[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T237304[ebp], al
	mov	ecx, DWORD PTR $T237297[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T237308[ebp], edx
	movzx	eax, BYTE PTR $T237304[ebp]
	test	eax, eax
	je	SHORT $LN93@ProcessSpy@2
	cmp	DWORD PTR $T237359[ebp], 0
	jge	SHORT $LN92@ProcessSpy@2
	mov	eax, DWORD PTR $T237359[ebp]
	cdq
	idiv	DWORD PTR $T237308[ebp]
	add	edx, DWORD PTR $T237308[ebp]
	mov	DWORD PTR _iMapX$237336[ebp], edx
	jmp	SHORT $LN94@ProcessSpy@2
	jmp	SHORT $LN93@ProcessSpy@2
$LN92@ProcessSpy@2:
	mov	ecx, DWORD PTR $T237359[ebp]
	cmp	ecx, DWORD PTR $T237308[ebp]
	jl	SHORT $LN93@ProcessSpy@2
	mov	eax, DWORD PTR $T237359[ebp]
	cdq
	idiv	DWORD PTR $T237308[ebp]
	mov	DWORD PTR _iMapX$237336[ebp], edx
	jmp	SHORT $LN94@ProcessSpy@2
$LN93@ProcessSpy@2:
	mov	edx, DWORD PTR $T237359[ebp]
	mov	DWORD PTR _iMapX$237336[ebp], edx
$LN94@ProcessSpy@2:
	mov	eax, DWORD PTR $T237297[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T237319[ebp], cl
	mov	edx, DWORD PTR $T237297[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T237323[ebp], eax
	movzx	ecx, BYTE PTR $T237319[ebp]
	push	ecx
	mov	edx, DWORD PTR $T237323[ebp]
	push	edx
	mov	eax, DWORD PTR $T237360[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$237337[ebp], eax
	mov	ecx, DWORD PTR _iMapY$237337[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMapX$237336[ebp]
	push	edx
	mov	ecx, DWORD PTR $T237297[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN84@ProcessSpy@2
	mov	eax, DWORD PTR $T237297[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T237328[ebp], ecx
	mov	edx, DWORD PTR _iMapY$237337[ebp]
	imul	edx, DWORD PTR $T237328[ebp]
	add	edx, DWORD PTR _iMapX$237336[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T237297[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv781[ebp], edx
	jmp	SHORT $LN85@ProcessSpy@2
$LN84@ProcessSpy@2:
	mov	DWORD PTR tv781[ebp], 0
$LN85@ProcessSpy@2:
	mov	ecx, DWORD PTR tv781[ebp]
	mov	DWORD PTR _pPlot$223312[ebp], ecx
$LN82@ProcessSpy@2:

; 2453 : 		CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$223313[ebp], 0

; 2454 : 		CvCityEspionage* pCityEspionage = NULL;

	mov	DWORD PTR _pCityEspionage$223314[ebp], 0

; 2455 : 		CvAssertMsg(pPlot, "Could not find plot location for SpyNotificationMessages");
; 2456 : 		if(pPlot)

	cmp	DWORD PTR _pPlot$223312[ebp], 0
	je	SHORT $LN30@ProcessSpy@2

; 2457 : 		{
; 2458 : 			pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$223312[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$223313[ebp], eax

; 2459 : 			CvAssertMsg(pCity, "Plot does not contain a city");
; 2460 : 			if(pCity)

	cmp	DWORD PTR _pCity$223313[ebp], 0
	je	SHORT $LN30@ProcessSpy@2

; 2461 : 			{
; 2462 : 				CvAssertMsg(pCity->getOwner() == m_pPlayer->GetID(), "City does not belong to player. This is very strange");
; 2463 : 				pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$223314[ebp], eax
$LN30@ProcessSpy@2:

; 2464 : 			}
; 2465 : 		}
; 2466 : 
; 2467 : 		if(!pCity || !pCityEspionage)

	cmp	DWORD PTR _pCity$223313[ebp], 0
	je	SHORT $LN27@ProcessSpy@2
	cmp	DWORD PTR _pCityEspionage$223314[ebp], 0
	jne	SHORT $LN28@ProcessSpy@2
$LN27@ProcessSpy@2:

; 2468 : 		{
; 2469 : 			continue;

	jmp	$LN32@ProcessSpy@2
$LN28@ProcessSpy@2:

; 2470 : 		}
; 2471 : 
; 2472 : 		CvTechEntry* pTechEntry = NULL;

	mov	DWORD PTR _pTechEntry$223319[ebp], 0

; 2473 : 		if(m_aSpyNotificationMessages[ui].m_eStolenTech != NO_TECH)

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	cmp	DWORD PTR [ecx+edx+16], -1
	je	SHORT $LN26@ProcessSpy@2

; 2474 : 		{
; 2475 : 			pTechEntry = GC.getTechInfo(m_aSpyNotificationMessages[ui].m_eStolenTech);

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237372[ebp], edx
	mov	ecx, DWORD PTR $T237372[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pTechEntry$223319[ebp], eax
$LN26@ProcessSpy@2:

; 2476 : 		}
; 2477 : 
; 2478 : 		if(bMultiplayer || !pTechEntry)

	movzx	eax, BYTE PTR _bMultiplayer$[ebp]
	test	eax, eax
	jne	SHORT $LN113@ProcessSpy@2
	cmp	DWORD PTR _pTechEntry$223319[ebp], 0
	jne	$LN170@ProcessSpy@2

; 2479 : 		{
; 2480 : 			switch(m_aSpyNotificationMessages[ui].m_iSpyResult)

$LN113@ProcessSpy@2:
	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	DWORD PTR tv162[ebp], ecx
	cmp	DWORD PTR tv162[ebp], 1
	je	SHORT $LN20@ProcessSpy@2
	cmp	DWORD PTR tv162[ebp], 2
	je	$LN17@ProcessSpy@2
	cmp	DWORD PTR tv162[ebp], 3
	je	$LN144@ProcessSpy@2
	jmp	$LN22@ProcessSpy@2

; 2481 : 			{
; 2482 : 			case SPY_RESULT_UNDETECTED:
; 2483 : 				// do nothing
; 2484 : 				break;

	jmp	$LN22@ProcessSpy@2
$LN20@ProcessSpy@2:

; 2485 : 			case SPY_RESULT_DETECTED:
; 2486 : 				// notify defending player that a spy of unknown origin stole something
; 2487 : 			{
; 2488 : 				Localization::String strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_S");;

	push	OFFSET ??_C@_0DI@BHJICMIC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	edx, DWORD PTR $T237175[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv660[ebp], eax
	mov	eax, DWORD PTR tv660[ebp]
	mov	DWORD PTR $T237379[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T237379[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237380[ebp], eax
	mov	ecx, DWORD PTR $T237380[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223329[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T237175[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2489 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 2490 : 
; 2491 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T237393[ebp], ecx
	mov	edx, DWORD PTR $T237393[ebp]
	mov	eax, DWORD PTR _pCityEspionage$223314[ebp]
	cmp	DWORD PTR [eax+edx*4+4], -1
	jne	SHORT $LN19@ProcessSpy@2

; 2492 : 				{
; 2493 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_W_TIP");

	push	OFFSET ??_C@_0DM@OMABCNAD@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237176[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv175[ebp], eax
	mov	edx, DWORD PTR tv175[ebp]
	mov	DWORD PTR tv666[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv666[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237176[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2494 : 				}
; 2495 : 				else

	jmp	SHORT $LN18@ProcessSpy@2
$LN19@ProcessSpy@2:

; 2496 : 				{
; 2497 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH");

	push	OFFSET ??_C@_0DG@GGJFFAK@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237177[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv164[ebp], eax
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR tv668[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR tv668[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237177[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN18@ProcessSpy@2:

; 2498 : 				}
; 2499 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237178[ebp], eax
	lea	ecx, DWORD PTR $T237178[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223332[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2500 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_DETECTED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223329[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	57220132				; 03691c24H
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2501 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223329[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2502 : 			break;

	jmp	$LN22@ProcessSpy@2
$LN17@ProcessSpy@2:

; 2503 : 			case SPY_RESULT_IDENTIFIED:
; 2504 : 				// notify defending player that a spy of known origin stole something
; 2505 : 			{
; 2506 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_S");

	push	OFFSET ??_C@_0DK@PAANIJFB@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	eax, DWORD PTR _strSummary$223341[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 2507 : 				strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getShortDescriptionKey();

	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1268]
	mov	DWORD PTR $T237400[ebp], ecx
	mov	eax, DWORD PTR $T237400[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237404[ebp], ecx
	mov	ecx, DWORD PTR $T237404[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T237179[ebp], eax
	lea	edx, DWORD PTR $T237179[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223341[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2508 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 2509 : 
; 2510 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T237413[ebp], eax
	mov	ecx, DWORD PTR $T237413[ebp]
	mov	edx, DWORD PTR _pCityEspionage$223314[ebp]
	cmp	DWORD PTR [edx+ecx*4+4], -1
	jne	SHORT $LN16@ProcessSpy@2

; 2511 : 				{
; 2512 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_W_TIP");

	push	OFFSET ??_C@_0DO@DFALKNHL@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	eax, DWORD PTR $T237180[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv241[ebp], eax
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR tv672[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR tv672[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T237180[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2513 : 				}
; 2514 : 				else

	jmp	SHORT $LN15@ProcessSpy@2
$LN16@ProcessSpy@2:

; 2515 : 				{
; 2516 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH");

	push	OFFSET ??_C@_0DI@IMFCNGPF@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	eax, DWORD PTR $T237181[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv674[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv674[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T237181[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN15@ProcessSpy@2:

; 2517 : 				}
; 2518 : 				strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getAdjectiveKey();

	mov	eax, DWORD PTR _ui$223308[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1268]
	mov	DWORD PTR $T237420[ebp], eax
	mov	edx, DWORD PTR $T237420[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237424[ebp], eax
	mov	ecx, DWORD PTR $T237424[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ ; CvCivilizationInfo::getAdjectiveKey
	mov	DWORD PTR $T237182[ebp], eax
	lea	ecx, DWORD PTR $T237182[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223345[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2519 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237183[ebp], eax
	lea	eax, DWORD PTR $T237183[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2520 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237428[ebp], edx
	push	-1
	mov	ecx, DWORD PTR $T237428[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223341[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-720689320				; d50b2758H
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2521 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223341[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2522 : 			break;

	jmp	$LN22@ProcessSpy@2

; 2523 : 			case SPY_RESULT_KILLED:
; 2524 : 				// notify defending player that they killed a spy
; 2525 : 			{
; 2526 : 				int iDefendingSpy = pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()];

$LN144@ProcessSpy@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T237437[ebp], edx
	mov	eax, DWORD PTR $T237437[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$223314[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _iDefendingSpy$223355[ebp], edx

; 2527 : 				CvAssertMsg(iDefendingSpy >= 0, "iDefendingSpy value is out of bounds");
; 2528 : 				if(iDefendingSpy >= 0)

	cmp	DWORD PTR _iDefendingSpy$223355[ebp], 0
	jl	$LN22@ProcessSpy@2

; 2529 : 				{
; 2530 : 					Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_KILLED_A_SPY_S");

	push	OFFSET ??_C@_0CE@OHIBCALI@TXT_KEY_NOTIFICATION_KILLED_A_SP@
	lea	eax, DWORD PTR _strSummary$223357[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 2531 : 					strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1268]
	mov	DWORD PTR $T237444[ebp], ecx
	mov	eax, DWORD PTR $T237444[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237448[ebp], ecx
	mov	ecx, DWORD PTR $T237448[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237184[ebp], eax
	lea	edx, DWORD PTR $T237184[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223357[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2532 : 					Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_KILLED_A_SPY");

	push	OFFSET ??_C@_0CC@PFNIIANF@TXT_KEY_NOTIFICATION_KILLED_A_SP@
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 2533 : 					strNotification << GetSpyRankName(m_aSpyList[iDefendingSpy].m_eRank);

	mov	edx, DWORD PTR _iDefendingSpy$223355[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T237452[ebp], edx
	mov	ecx, DWORD PTR $T237452[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237185[ebp], eax
	lea	eax, DWORD PTR $T237185[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2534 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[iDefendingSpy].m_iName);

	mov	edx, DWORD PTR _iDefendingSpy$223355[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T237456[ebp], edx
	mov	ecx, DWORD PTR $T237456[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237186[ebp], eax
	lea	ecx, DWORD PTR $T237186[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223361[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2535 : 					strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _ui$223308[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1268]
	mov	DWORD PTR $T237460[ebp], eax
	mov	edx, DWORD PTR $T237460[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237464[ebp], eax
	mov	ecx, DWORD PTR $T237464[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237187[ebp], eax
	lea	ecx, DWORD PTR $T237187[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223361[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2536 : 					strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237188[ebp], eax
	lea	eax, DWORD PTR $T237188[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2537 : 
; 2538 : 					pNotifications->Add(NOTIFICATION_SPY_KILLED_A_SPY, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237468[ebp], edx
	push	-1
	mov	ecx, DWORD PTR $T237468[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223357[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-54118376				; fcc63818H
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2539 : 				
; 2540 : 					//Achievements
; 2541 : 					if(m_pPlayer->GetID() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T237477[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T237481[ebp], eax
	mov	ecx, DWORD PTR $T237481[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T237477[ebp], eax
	jne	SHORT $LN12@ProcessSpy@2

; 2542 : 					{
; 2543 : 						gDLL->UnlockAchievement(ACHIEVEMENT_XP1_15);

	mov	ecx, DWORD PTR $T237485[ebp]
	mov	DWORD PTR tv415[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv415[ebp], edx
	push	205					; 000000cdH
	mov	eax, DWORD PTR tv415[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv415[ebp]
	mov	eax, DWORD PTR [edx+828]
	call	eax
$LN12@ProcessSpy@2:

; 2544 : 					}
; 2545 : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223357[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN22@ProcessSpy@2:

; 2546 : 			}
; 2547 : 			break;
; 2548 : 			}
; 2549 : 		}
; 2550 : 		else

	jmp	$LN11@ProcessSpy@2

; 2551 : 		{
; 2552 : 			switch(m_aSpyNotificationMessages[ui].m_iSpyResult)

$LN170@ProcessSpy@2:
	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	mov	ecx, DWORD PTR [eax+ecx+12]
	mov	DWORD PTR tv427[ebp], ecx
	cmp	DWORD PTR tv427[ebp], 1
	je	SHORT $LN7@ProcessSpy@2
	cmp	DWORD PTR tv427[ebp], 2
	je	$LN4@ProcessSpy@2
	jmp	$LN11@ProcessSpy@2

; 2553 : 			{
; 2554 : 			case SPY_RESULT_UNDETECTED:
; 2555 : 				// nothing happens, nobody is notified
; 2556 : 				break;

	jmp	$LN11@ProcessSpy@2
$LN7@ProcessSpy@2:

; 2557 : 			case SPY_RESULT_DETECTED:
; 2558 : 			{
; 2559 : 				// notify defending player that a spy of unknown origin stole a tech
; 2560 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_S");

	push	OFFSET ??_C@_0DA@NCCPPMAH@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	edx, DWORD PTR _strSummary$223376[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH

; 2561 : 				strSummary << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR _pTechEntry$223319[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237189[ebp], eax
	lea	eax, DWORD PTR $T237189[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223376[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2562 : 
; 2563 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 2564 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)  // no defensive spy

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T237500[ebp], ecx
	mov	edx, DWORD PTR $T237500[ebp]
	mov	eax, DWORD PTR _pCityEspionage$223314[ebp]
	cmp	DWORD PTR [eax+edx*4+4], -1
	jne	SHORT $LN6@ProcessSpy@2

; 2565 : 				{
; 2566 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_W_TIP");

	push	OFFSET ??_C@_0DE@PLIFFAHK@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237190[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv441[ebp], eax
	mov	edx, DWORD PTR tv441[ebp]
	mov	DWORD PTR tv680[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR tv680[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T237190[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2567 : 				}
; 2568 : 				else // defensive spy

	jmp	SHORT $LN180@ProcessSpy@2
$LN6@ProcessSpy@2:

; 2569 : 				{
; 2570 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED");

	push	OFFSET ??_C@_0CO@IADINDIA@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237191[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv428[ebp], eax
	mov	edx, DWORD PTR tv428[ebp]
	mov	DWORD PTR tv682[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR tv682[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T237191[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2571 : 				}
; 2572 : 				strNotification << pTechEntry->GetDescriptionKey();

$LN180@ProcessSpy@2:
	mov	ecx, DWORD PTR _pTechEntry$223319[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237192[ebp], eax
	lea	ecx, DWORD PTR $T237192[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223380[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2573 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237193[ebp], eax
	lea	eax, DWORD PTR $T237193[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2574 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_DETECTED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223376[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	57220132				; 03691c24H
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2575 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223376[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2576 : 			break;

	jmp	$LN11@ProcessSpy@2
$LN4@ProcessSpy@2:

; 2577 : 			case SPY_RESULT_IDENTIFIED:
; 2578 : 			{
; 2579 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_S");

	push	OFFSET ??_C@_0DC@DNKLDCM@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	edx, DWORD PTR _strSummary$223390[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H

; 2580 : 				strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR _ui$223308[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1268]
	mov	DWORD PTR $T237510[ebp], eax
	mov	edx, DWORD PTR $T237510[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237514[ebp], eax
	mov	ecx, DWORD PTR $T237514[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	DWORD PTR $T237194[ebp], eax
	lea	ecx, DWORD PTR $T237194[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223390[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2581 : 				strSummary << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR _pTechEntry$223319[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237195[ebp], eax
	lea	eax, DWORD PTR $T237195[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223390[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2582 : 
; 2583 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H

; 2584 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)  // no defensive spy

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T237526[ebp], ecx
	mov	edx, DWORD PTR $T237526[ebp]
	mov	eax, DWORD PTR _pCityEspionage$223314[ebp]
	cmp	DWORD PTR [eax+edx*4+4], -1
	jne	SHORT $LN3@ProcessSpy@2

; 2585 : 				{
; 2586 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_W_TIP");

	push	OFFSET ??_C@_0DG@GPGPEFAC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237196[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv555[ebp], eax
	mov	edx, DWORD PTR tv555[ebp]
	mov	DWORD PTR tv686[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	eax, DWORD PTR tv686[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T237196[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2587 : 				}
; 2588 : 				else

	jmp	SHORT $LN2@ProcessSpy@2
$LN3@ProcessSpy@2:

; 2589 : 				{
; 2590 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED");

	push	OFFSET ??_C@_0DA@KMGBCDGC@TXT_KEY_NOTIFICATION_TECH_STOLEN@
	lea	ecx, DWORD PTR $T237197[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv510[ebp], eax
	mov	edx, DWORD PTR tv510[ebp]
	mov	DWORD PTR tv688[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	eax, DWORD PTR tv688[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR $T237197[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN2@ProcessSpy@2:

; 2591 : 				}
; 2592 : 				strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getAdjectiveKey();

	mov	ecx, DWORD PTR _ui$223308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1268]
	mov	DWORD PTR $T237533[ebp], ecx
	mov	eax, DWORD PTR $T237533[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T237537[ebp], ecx
	mov	ecx, DWORD PTR $T237537[ebp]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ ; CvCivilizationInfo::getAdjectiveKey
	mov	DWORD PTR $T237198[ebp], eax
	lea	edx, DWORD PTR $T237198[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223395[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2593 : 				strNotification << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR _pTechEntry$223319[ebp]
	add	ecx, 64					; 00000040H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237199[ebp], eax
	lea	ecx, DWORD PTR $T237199[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223395[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2594 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223313[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237200[ebp], eax
	lea	eax, DWORD PTR $T237200[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2595 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237544[ebp], edx
	push	-1
	mov	ecx, DWORD PTR $T237544[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223390[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	-720689320				; d50b2758H
	mov	ecx, DWORD PTR _pNotifications$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2596 : 
; 2597 : 				pEspionageAI->m_aiNumSpiesCaught[m_aSpyNotificationMessages[ui].m_eAttackingPlayer]++;

	mov	eax, DWORD PTR _ui$223308[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1268]
	mov	DWORD PTR $T237548[ebp], eax
	mov	edx, DWORD PTR $T237548[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _pEspionageAI$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv638[ebp], eax
	mov	ecx, DWORD PTR tv638[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR tv638[ebp]
	mov	DWORD PTR [eax], edx

; 2598 : 				pEspionageAI->m_aiTurnLastSpyCaught[m_aSpyNotificationMessages[ui].m_eAttackingPlayer] = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T237555[ebp], ecx
	mov	edx, DWORD PTR _ui$223308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T237559[ebp], edx
	mov	ecx, DWORD PTR $T237559[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _pEspionageAI$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T237563[ebp], edx
	mov	ecx, DWORD PTR $T237555[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T237563[ebp]
	mov	DWORD PTR [ecx], eax

; 2599 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strSummary$223390[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN11@ProcessSpy@2:

; 2600 : 			break;
; 2601 : 			case SPY_RESULT_KILLED:
; 2602 : 				// notify defending player that they killed a spy
; 2603 : 			{
; 2604 : 				CvAssertMsg(false, "This code was not expected to be called");
; 2605 : 			}
; 2606 : 			break;
; 2607 : 			}
; 2608 : 		}
; 2609 : 	}

	jmp	$LN32@ProcessSpy@2
$LN31@ProcessSpy@2:

; 2610 : 
; 2611 : 	m_aSpyNotificationMessages.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1264				; 000004f0H
	mov	DWORD PTR $T237762[ebp], edx
	mov	eax, DWORD PTR $T237762[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T237579[ebp], ecx
	mov	edx, DWORD PTR $T237579[ebp]
	mov	DWORD PTR $T237760[ebp], edx
	mov	eax, DWORD PTR $T237760[ebp]
	mov	DWORD PTR $T237759[ebp], eax
	mov	ecx, DWORD PTR $T237762[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T237595[ebp], edx
	mov	eax, DWORD PTR $T237595[ebp]
	mov	DWORD PTR $T237743[ebp], eax
	mov	ecx, DWORD PTR $T237743[ebp]
	mov	DWORD PTR $T237761[ebp], ecx
	mov	edx, DWORD PTR $T237759[ebp]
	push	edx
	mov	eax, DWORD PTR $T237761[ebp]
	push	eax
	lea	ecx, DWORD PTR $T237744[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T237762[ebp]
	call	?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase
$LN35@ProcessSpy@2:

; 2612 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T237175[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strSummary$223329[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strNotification$223332[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T237176[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$4:
	lea	ecx, DWORD PTR $T237177[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strSummary$223341[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strNotification$223345[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T237180[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T237181[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$9:
	lea	ecx, DWORD PTR _strSummary$223357[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$10:
	lea	ecx, DWORD PTR _strNotification$223361[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$11:
	lea	ecx, DWORD PTR _strSummary$223376[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$12:
	lea	ecx, DWORD PTR _strNotification$223380[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$13:
	lea	ecx, DWORD PTR $T237190[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$14:
	lea	ecx, DWORD PTR $T237191[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$15:
	lea	ecx, DWORD PTR _strSummary$223390[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$16:
	lea	ecx, DWORD PTR _strNotification$223395[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$17:
	lea	ecx, DWORD PTR $T237196[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$18:
	lea	ecx, DWORD PTR $T237197[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1988]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ ENDP	; CvPlayerEspionage::ProcessSpyMessages
PUBLIC	??1IntrigueNotificationMessage@@QAE@XZ		; IntrigueNotificationMessage::~IntrigueNotificationMessage
PUBLIC	??_C@_0CP@FCCHEIJ@TXT_KEY_NOTIFICATION_INTRIGUE_CO@ ; `string'
PUBLIC	??_C@_0DB@ELFPPEBP@TXT_KEY_NOTIFICATION_INTRIGUE_CO@ ; `string'
PUBLIC	??_C@_0EC@MJAADFOF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EE@IDMMGNJA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EC@PIJCKEOO@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EE@OHDACGBL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EN@HNCDHIAA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EP@KIKIODDH@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@BLEPLAOI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EN@KLLALGDN@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@HGEHLAIG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EN@FAMOJNBM@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EJ@NMIJGJNL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@KANEHOLL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EA@JODCPLAI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EC@BEMAFILE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EA@KPKAGKAD@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EC@HADMBDDP@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@KINALKDJ@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EN@NDEGBIOC@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EJ@JBGNAPGF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@HOEDHEAE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EJ@PMGFAPAL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EL@IFDNFPCF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EH@BICHANDF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0EJ@CKPGMBDG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ ; `string'
PUBLIC	??_C@_0DH@GDGHPAFJ@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ ; `string'
PUBLIC	??_C@_0DJ@CALCBAHM@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ ; `string'
PUBLIC	??_C@_0CM@ELJBABDA@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ ; `string'
PUBLIC	??_C@_0CO@FODHCKOO@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ ; `string'
PUBLIC	??_C@_0DF@DGAKOFAH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	??_C@_0DH@GJFHNBCA@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	??_C@_0DH@LPMEBPBN@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	??_C@_0DJ@IEBCLJDH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	??_C@_0DD@KHENEKON@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	??_C@_0DF@ILKPOFHI@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ ; `string'
PUBLIC	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back
PUBLIC	??_C@_0BG@NHMNMFKP@TXT_KEY_SPY_FULL_NAME?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z:PROC ; CvGlobals::getProjectInfo
EXTRN	?GetTextKey@CvBaseInfo@@QBEPBDXZ:PROC		; CvBaseInfo::GetTextKey
EXTRN	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationDescriptionKey
EXTRN	?getNameKey@CvPlayer@@QBEPBDXZ:PROC		; CvPlayer::getNameKey
EXTRN	?getNickName@CvPlayer@@QBEQBDXZ:PROC		; CvPlayer::getNickName
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0CP@FCCHEIJ@TXT_KEY_NOTIFICATION_INTRIGUE_CO@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CP@FCCHEIJ@TXT_KEY_NOTIFICATION_INTRIGUE_CO@ DB 'TXT_KEY_NOTIFICAT'
	DB	'ION_INTRIGUE_CONSTRUCT_WONDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ELFPPEBP@TXT_KEY_NOTIFICATION_INTRIGUE_CO@
CONST	SEGMENT
??_C@_0DB@ELFPPEBP@TXT_KEY_NOTIFICATION_INTRIGUE_CO@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_CONSTRUCT_WONDER_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@MJAADFOF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EC@MJAADFOF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@IDMMGNJA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EE@IDMMGNJA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@PIJCKEOO@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EC@PIJCKEOO@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@OHDACGBL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EE@OHDACGBL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HNCDHIAA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EN@HNCDHIAA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@KIKIODDH@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EP@KIKIODDH@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN_'
	DB	'S', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@BLEPLAOI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@BLEPLAOI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KLLALGDN@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EN@KLLALGDN@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@HGEHLAIG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@HGEHLAIG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@FAMOJNBM@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EN@FAMOJNBM@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@NMIJGJNL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EJ@NMIJGJNL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@KANEHOLL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@KANEHOLL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@JODCPLAI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EA@JODCPLAI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BEMAFILE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EC@BEMAFILE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@KPKAGKAD@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EA@KPKAGKAD@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@HADMBDDP@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EC@HADMBDDP@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@KINALKDJ@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@KINALKDJ@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@NDEGBIOC@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EN@NDEGBIOC@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@JBGNAPGF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EJ@JBGNAPGF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@HOEDHEAE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@HOEDHEAE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@PMGFAPAL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EJ@PMGFAPAL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@IFDNFPCF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EL@IFDNFPCF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@BICHANDF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EH@BICHANDF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CKPGMBDG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
CONST	SEGMENT
??_C@_0EJ@CKPGMBDG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GDGHPAFJ@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
CONST	SEGMENT
??_C@_0DH@GDGHPAFJ@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CALCBAHM@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
CONST	SEGMENT
??_C@_0DJ@CALCBAHM@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@ELJBABDA@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
CONST	SEGMENT
??_C@_0CM@ELJBABDA@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_BUILDING_ARMY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FODHCKOO@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
CONST	SEGMENT
??_C@_0CO@FODHCKOO@TXT_KEY_NOTIFICATION_INTRIGUE_BU@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_BUILDING_ARMY_S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DGAKOFAH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DF@DGAKOFAH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_KNOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GJFHNBCA@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DH@GJFHNBCA@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_KNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LPMEBPBN@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DH@LPMEBPBN@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@IEBCLJDH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DJ@IEBCLJDH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN_S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KHENEKON@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DD@KHENEKON@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_YOU', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@ILKPOFHI@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
CONST	SEGMENT
??_C@_0DF@ILKPOFHI@TXT_KEY_NOTIFICATION_INTRIGUE_PL@ DB 'TXT_KEY_NOTIFICA'
	DB	'TION_INTRIGUE_PLOTTING_AGAINST_YOU_S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHMNMFKP@TXT_KEY_SPY_FULL_NAME?$AA@
CONST	SEGMENT
??_C@_0BG@NHMNMFKP@TXT_KEY_SPY_FULL_NAME?$AA@ DB 'TXT_KEY_SPY_FULL_NAME', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z DD 019930522H
	DD	030H
	DD	FLAT:__unwindtable$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$16
	DD	0fH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$20
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$21
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$22
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$23
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$24
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$25
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$26
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$27
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$28
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$29
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$30
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$31
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$32
	DD	020H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$33
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$34
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$35
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$36
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$37
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$38
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$39
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$40
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$41
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$42
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$43
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$44
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$45
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$46
	DD	02eH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$47
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
_TEXT	SEGMENT
tv2565 = -5332						; size = 4
tv2932 = -5328						; size = 4
tv2563 = -5324						; size = 4
tv2931 = -5320						; size = 4
tv2561 = -5316						; size = 4
tv2930 = -5312						; size = 4
tv2559 = -5308						; size = 4
tv2929 = -5304						; size = 4
tv2557 = -5300						; size = 4
tv2928 = -5296						; size = 4
tv2555 = -5292						; size = 4
tv2927 = -5288						; size = 4
tv2553 = -5284						; size = 4
tv2926 = -5280						; size = 4
tv2551 = -5276						; size = 4
tv2925 = -5272						; size = 4
tv2549 = -5268						; size = 4
tv2924 = -5264						; size = 4
tv2547 = -5260						; size = 4
tv2923 = -5256						; size = 4
tv2545 = -5252						; size = 4
tv1647 = -5248						; size = 4
tv2543 = -5244						; size = 4
tv1650 = -5240						; size = 4
tv2539 = -5236						; size = 4
tv2922 = -5232						; size = 4
tv2537 = -5228						; size = 4
tv2921 = -5224						; size = 4
tv2535 = -5220						; size = 4
tv2920 = -5216						; size = 4
tv2533 = -5212						; size = 4
tv2919 = -5208						; size = 4
tv2531 = -5204						; size = 4
tv2918 = -5200						; size = 4
tv2529 = -5196						; size = 4
tv2917 = -5192						; size = 4
tv2527 = -5188						; size = 4
tv2916 = -5184						; size = 4
tv2525 = -5180						; size = 4
tv2915 = -5176						; size = 4
tv2523 = -5172						; size = 4
tv2914 = -5168						; size = 4
tv2521 = -5164						; size = 4
tv2913 = -5160						; size = 4
tv2519 = -5156						; size = 4
tv1020 = -5152						; size = 4
tv2517 = -5148						; size = 4
tv1023 = -5144						; size = 4
tv2513 = -5140						; size = 4
tv886 = -5136						; size = 4
tv2511 = -5132						; size = 4
tv889 = -5128						; size = 4
tv2507 = -5124						; size = 4
tv752 = -5120						; size = 4
tv2505 = -5116						; size = 4
tv755 = -5112						; size = 4
tv2501 = -5108						; size = 4
tv2872 = -5104						; size = 4
tv2499 = -5100						; size = 4
tv170 = -5096						; size = 4
tv2497 = -5092						; size = 4
tv2593 = -5088						; size = 4
tv2495 = -5084						; size = 4
tv181 = -5080						; size = 4
tv2493 = -5076						; size = 4
tv262 = -5072						; size = 4
tv2491 = -5068						; size = 4
tv265 = -5064						; size = 4
tv260 = -5060						; size = 4
_this$ = -5056						; size = 4
$T238741 = -5052					; size = 4
$T238734 = -5048					; size = 4
$T238730 = -5044					; size = 4
$T238726 = -5040					; size = 4
$T238722 = -5036					; size = 4
$T238718 = -5032					; size = 4
$T238714 = -5028					; size = 4
$T238710 = -5024					; size = 4
$T238706 = -5020					; size = 4
$T238702 = -5016					; size = 4
$T238698 = -5012					; size = 4
$T238694 = -5008					; size = 4
$T238690 = -5004					; size = 4
$T238686 = -5000					; size = 4
$T238682 = -4996					; size = 4
$T238678 = -4992					; size = 4
$T238674 = -4988					; size = 4
$T238670 = -4984					; size = 4
$T238666 = -4980					; size = 4
$T238662 = -4976					; size = 4
$T238658 = -4972					; size = 4
$T238654 = -4968					; size = 4
$T238650 = -4964					; size = 4
$T238646 = -4960					; size = 4
$T238642 = -4956					; size = 4
$T238638 = -4952					; size = 4
$T238634 = -4948					; size = 4
$T238630 = -4944					; size = 4
$T238626 = -4940					; size = 4
$T238622 = -4936					; size = 4
$T238618 = -4932					; size = 4
$T238614 = -4928					; size = 4
$T238610 = -4924					; size = 4
$T238606 = -4920					; size = 4
$T238602 = -4916					; size = 4
$T238598 = -4912					; size = 4
$T238594 = -4908					; size = 4
$T238590 = -4904					; size = 4
$T238586 = -4900					; size = 4
$T238582 = -4896					; size = 4
$T238578 = -4892					; size = 4
$T238574 = -4888					; size = 4
$T238570 = -4884					; size = 4
$T238566 = -4880					; size = 4
$T238562 = -4876					; size = 4
$T238558 = -4872					; size = 4
$T238554 = -4868					; size = 4
$T238550 = -4864					; size = 4
$T238546 = -4860					; size = 4
$T238542 = -4856					; size = 4
$T238538 = -4852					; size = 4
$T238534 = -4848					; size = 4
$T238530 = -4844					; size = 4
$T238521 = -4840					; size = 4
$T238517 = -4836					; size = 4
$T238513 = -4832					; size = 4
$T238509 = -4828					; size = 4
$T238505 = -4824					; size = 4
$T238501 = -4820					; size = 4
$T238497 = -4816					; size = 4
$T238493 = -4812					; size = 4
$T238489 = -4808					; size = 4
$T238485 = -4804					; size = 4
$T238481 = -4800					; size = 4
$T238477 = -4796					; size = 4
$T238473 = -4792					; size = 4
$T238469 = -4788					; size = 4
$T238465 = -4784					; size = 4
$T238461 = -4780					; size = 4
$T238457 = -4776					; size = 4
$T238453 = -4772					; size = 4
$T238449 = -4768					; size = 4
$T238445 = -4764					; size = 4
$T238441 = -4760					; size = 4
$T238437 = -4756					; size = 4
$T238433 = -4752					; size = 4
$T238429 = -4748					; size = 4
$T238425 = -4744					; size = 4
$T238421 = -4740					; size = 4
$T238417 = -4736					; size = 4
$T238413 = -4732					; size = 4
$T238409 = -4728					; size = 4
$T238405 = -4724					; size = 4
$T238401 = -4720					; size = 4
$T238397 = -4716					; size = 4
$T238393 = -4712					; size = 4
$T238389 = -4708					; size = 4
$T238385 = -4704					; size = 4
$T238381 = -4700					; size = 4
$T238377 = -4696					; size = 4
$T238373 = -4692					; size = 4
$T238369 = -4688					; size = 4
$T238365 = -4684					; size = 4
$T238361 = -4680					; size = 4
$T238357 = -4676					; size = 4
$T238348 = -4672					; size = 4
$T238344 = -4668					; size = 4
$T238340 = -4664					; size = 4
$T238336 = -4660					; size = 4
$T238332 = -4656					; size = 4
$T238328 = -4652					; size = 4
$T238324 = -4648					; size = 4
$T238320 = -4644					; size = 4
$T238316 = -4640					; size = 4
$T238312 = -4636					; size = 4
$T238308 = -4632					; size = 4
$T238304 = -4628					; size = 4
$T238300 = -4624					; size = 4
$T238296 = -4620					; size = 4
$T238292 = -4616					; size = 4
$T238288 = -4612					; size = 4
$T238284 = -4608					; size = 4
$T238280 = -4604					; size = 4
$T238276 = -4600					; size = 4
$T238272 = -4596					; size = 4
$T238268 = -4592					; size = 4
$T238264 = -4588					; size = 4
$T238260 = -4584					; size = 4
$T238256 = -4580					; size = 4
$T238252 = -4576					; size = 4
$T238248 = -4572					; size = 4
$T238244 = -4568					; size = 4
$T238240 = -4564					; size = 4
$T238236 = -4560					; size = 4
$T238232 = -4556					; size = 4
$T238228 = -4552					; size = 4
$T238224 = -4548					; size = 4
$T238220 = -4544					; size = 4
$T238216 = -4540					; size = 4
$T238212 = -4536					; size = 4
$T238208 = -4532					; size = 4
$T238204 = -4528					; size = 4
$T238200 = -4524					; size = 4
$T238196 = -4520					; size = 4
$T238192 = -4516					; size = 4
$T238188 = -4512					; size = 4
$T238184 = -4508					; size = 4
$T238180 = -4504					; size = 4
$T238176 = -4500					; size = 4
$T238172 = -4496					; size = 4
$T238168 = -4492					; size = 4
$T238164 = -4488					; size = 4
$T238160 = -4484					; size = 4
$T238156 = -4480					; size = 4
$T238152 = -4476					; size = 4
$T238148 = -4472					; size = 4
$T238144 = -4468					; size = 4
$T238140 = -4464					; size = 4
$T238136 = -4460					; size = 4
$T238132 = -4456					; size = 4
$T238128 = -4452					; size = 4
$T238124 = -4448					; size = 4
$T238120 = -4444					; size = 4
$T238116 = -4440					; size = 4
$T238103 = -4436					; size = 4
$T238061 = -4408					; size = 4
$T238055 = -4404					; size = 4
$T238051 = -4400					; size = 4
$T238047 = -4396					; size = 4
$T238033 = -4392					; size = 4
$T238025 = -4388					; size = 4
$T238006 = -4384					; size = 4
$T238002 = -4380					; size = 4
$T237989 = -4376					; size = 4
$T237921 = -4372					; size = 4
$T237920 = -4368					; size = 4
$T237919 = -4364					; size = 4
$T237918 = -4360					; size = 4
$T237917 = -4356					; size = 4
$T237916 = -4352					; size = 4
$T237915 = -4348					; size = 4
$T237914 = -4344					; size = 4
$T237913 = -4340					; size = 4
$T237912 = -4336					; size = 4
$T237911 = -4332					; size = 4
$T237910 = -4328					; size = 4
$T237909 = -4324					; size = 4
$T237908 = -4320					; size = 4
$T237907 = -4316					; size = 4
$T237906 = -4312					; size = 4
$T237905 = -4308					; size = 80
$T237904 = -4228					; size = 80
$T237903 = -4148					; size = 80
$T237902 = -4068					; size = 80
$T237901 = -3988					; size = 4
$T237900 = -3984					; size = 4
$T237899 = -3980					; size = 4
$T237898 = -3976					; size = 4
$T237897 = -3972					; size = 80
$T237896 = -3892					; size = 4
$T237895 = -3888					; size = 4
$T237894 = -3884					; size = 4
$T237893 = -3880					; size = 4
$T237892 = -3876					; size = 80
$T237891 = -3796					; size = 4
$T237890 = -3792					; size = 4
$T237889 = -3788					; size = 4
$T237888 = -3784					; size = 4
$T237887 = -3780					; size = 4
$T237886 = -3776					; size = 80
$T237885 = -3696					; size = 4
$T237884 = -3692					; size = 4
$T237883 = -3688					; size = 4
$T237882 = -3684					; size = 80
$T237881 = -3604					; size = 4
$T237880 = -3600					; size = 4
$T237879 = -3596					; size = 4
$T237878 = -3592					; size = 80
$T237877 = -3512					; size = 4
$T237876 = -3508					; size = 4
$T237875 = -3504					; size = 80
$T237874 = -3424					; size = 4
$T237873 = -3420					; size = 4
$T237872 = -3416					; size = 4
$T237871 = -3412					; size = 4
$T237870 = -3408					; size = 80
$T237869 = -3328					; size = 4
$T237868 = -3324					; size = 4
$T237867 = -3320					; size = 4
$T237866 = -3316					; size = 80
$T237865 = -3236					; size = 4
$T237864 = -3232					; size = 4
$T237863 = -3228					; size = 4
$T237862 = -3224					; size = 4
$T237861 = -3220					; size = 4
$T237860 = -3216					; size = 80
$T237859 = -3136					; size = 80
$T237858 = -3056					; size = 80
$T237857 = -2976					; size = 80
$T237856 = -2896					; size = 4
$T237855 = -2892					; size = 4
$T237854 = -2888					; size = 4
$T237853 = -2884					; size = 4
$T237852 = -2880					; size = 80
$T237851 = -2800					; size = 4
$T237850 = -2796					; size = 4
$T237849 = -2792					; size = 4
$T237848 = -2788					; size = 4
$T237847 = -2784					; size = 80
$T237846 = -2704					; size = 4
$T237845 = -2700					; size = 4
$T237844 = -2696					; size = 4
$T237843 = -2692					; size = 4
$T237842 = -2688					; size = 4
$T237841 = -2684					; size = 80
$T237840 = -2604					; size = 4
$T237839 = -2600					; size = 4
$T237838 = -2596					; size = 4
$T237837 = -2592					; size = 80
$T237836 = -2512					; size = 4
$T237835 = -2508					; size = 4
$T237834 = -2504					; size = 4
$T237833 = -2500					; size = 80
$T237832 = -2420					; size = 4
$T237831 = -2416					; size = 4
$T237830 = -2412					; size = 80
$T237829 = -2332					; size = 4
$T237828 = -2328					; size = 4
$T237827 = -2324					; size = 4
$T237826 = -2320					; size = 4
$T237825 = -2316					; size = 80
$T237824 = -2236					; size = 4
$T237823 = -2232					; size = 4
$T237822 = -2228					; size = 4
$T237821 = -2224					; size = 80
$T237820 = -2144					; size = 4
$T237819 = -2140					; size = 4
$T237818 = -2136					; size = 4
$T237817 = -2132					; size = 4
$T237816 = -2128					; size = 80
$T237815 = -2048					; size = 4
$T237814 = -2044					; size = 4
$T237813 = -2040					; size = 80
$T237812 = -1960					; size = 4
$T237811 = -1956					; size = 4
$T237810 = -1952					; size = 4
$T237809 = -1948					; size = 4
$T237808 = -1944					; size = 80
$T237807 = -1864					; size = 4
$T237806 = -1860					; size = 4
$T237805 = -1856					; size = 80
$T237804 = -1776					; size = 4
$T237803 = -1772					; size = 4
$T237802 = -1768					; size = 4
$T237801 = -1764					; size = 4
$T237800 = -1760					; size = 4
$T237799 = -1756					; size = 4
$T237798 = -1752					; size = 4
$T237797 = -1748					; size = 80
$T237796 = -1668					; size = 4
$T237795 = -1664					; size = 4
$T237794 = -1660					; size = 4
$T237793 = -1656					; size = 4
$T237792 = -1652					; size = 80
$T237791 = -1572					; size = 4
$T237790 = -1568					; size = 4
$T237789 = -1564					; size = 4
$T237788 = -1560					; size = 4
$T237787 = -1556					; size = 4
$T237786 = -1552					; size = 80
$T237785 = -1472					; size = 4
$T237784 = -1468					; size = 4
$T237783 = -1464					; size = 80
$T237782 = -1384					; size = 4
$T237781 = -1380					; size = 4
$T237780 = -1376					; size = 4
$T237779 = -1372					; size = 4
$T237778 = -1368					; size = 4
$T237777 = -1364					; size = 80
$T237776 = -1284					; size = 4
$T237775 = -1280					; size = 4
$T237774 = -1276					; size = 80
$T237773 = -1196					; size = 4
$T237772 = -1192					; size = 4
_pProjectInfo$223742 = -1188				; size = 4
_pBuildingInfo$223737 = -1184				; size = 4
_pProjectInfo$223724 = -1180				; size = 4
_pBuildingInfo$223719 = -1176				; size = 4
_strNotification$223727 = -1172				; size = 80
_strSummary$223711 = -1092				; size = 80
_strNotification$223629 = -1012				; size = 80
_strSummary$223628 = -932				; size = 80
_eNotification$223630 = -848				; size = 4
_strNotification$223546 = -844				; size = 80
_strSummary$223545 = -764				; size = 80
_eNotification$223547 = -680				; size = 4
_strNotification$223529 = -676				; size = 80
_strSummary$223528 = -596				; size = 80
_strNotification$223512 = -516				; size = 80
_strSummary$223511 = -436				; size = 80
_strNotification$223449 = -356				; size = 80
_strSummary$223448 = -276				; size = 80
_pNotifications$223441 = -192				; size = 4
_str$223435 = -188					; size = 80
_bDuplicateTimer$223426 = -101				; size = 1
_ui$223421 = -100					; size = 4
_iCityY$ = -96						; size = 4
_kMessage$ = -92					; size = 68
__$ArrayPad$ = -20					; size = 4
_iCityX$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_eDiscoveringPlayer$ = 8				; size = 4
_eSourcePlayer$ = 12					; size = 4
_eTargetPlayer$ = 16					; size = 4
_eBuilding$ = 20					; size = 4
_eProject$ = 24						; size = 4
_eIntrigueType$ = 28					; size = 4
_uiSpyIndex$ = 32					; size = 4
_pCity$ = 36						; size = 4
_bShowNotification$ = 40				; size = 1
?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z PROC ; CvPlayerEspionage::AddIntrigueMessage, COMDAT
; _this$ = ecx

; 2617 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 5320				; 000014c8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2618 : 	CvAssertMsg(GetNumSpies() > 0, "How can you add an intrigue message when there are no spies?");
; 2619 : 
; 2620 : 	int iCityX = -1;

	mov	DWORD PTR _iCityX$[ebp], -1

; 2621 : 	int iCityY = -1;

	mov	DWORD PTR _iCityY$[ebp], -1

; 2622 : 	if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN112@AddIntrigu

; 2623 : 	{
; 2624 : 		iCityX = pCity->getX();

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _iCityX$[ebp], ecx

; 2625 : 		iCityY = pCity->getY();

	mov	edx, DWORD PTR _pCity$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _iCityY$[ebp], eax
$LN112@AddIntrigu:

; 2626 : 	}
; 2627 : 
; 2628 : 	// go through all the intrigue messages to see if there is a duplicate
; 2629 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223421[ebp], 0
	jmp	SHORT $LN111@AddIntrigu
$LN110@AddIntrigu:
	mov	ecx, DWORD PTR _ui$223421[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$223421[ebp], ecx
$LN111@AddIntrigu:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1280				; 00000500H
	mov	DWORD PTR $T237989[ebp], edx
	mov	eax, DWORD PTR $T237989[ebp]
	mov	ecx, DWORD PTR $T237989[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$223421[ebp], eax
	jae	$LN109@AddIntrigu

; 2630 : 	{
; 2631 : 		if (m_aIntrigueNotificationMessages[ui].m_eSourcePlayer == eSourcePlayer &&
; 2632 : 			m_aIntrigueNotificationMessages[ui].m_eTargetPlayer == eTargetPlayer &&
; 2633 : 			m_aIntrigueNotificationMessages[ui].m_iIntrigueType == eIntrigueType)

	mov	edx, DWORD PTR _ui$223421[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	mov	edx, DWORD PTR [ecx+edx+4]
	cmp	edx, DWORD PTR _eSourcePlayer$[ebp]
	jne	$LN108@AddIntrigu
	mov	eax, DWORD PTR _ui$223421[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	mov	eax, DWORD PTR [edx+eax+8]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	jne	$LN108@AddIntrigu
	mov	ecx, DWORD PTR _ui$223421[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	mov	ecx, DWORD PTR [eax+ecx+20]
	cmp	ecx, DWORD PTR _eIntrigueType$[ebp]
	jne	$LN108@AddIntrigu

; 2634 : 		{
; 2635 : 			bool bDuplicateTimer = GC.getGame().getGameTurn() - m_aIntrigueNotificationMessages[ui].m_iTurnNum < 30;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238002[ebp], edx
	mov	eax, DWORD PTR _ui$223421[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T238006[ebp], eax
	mov	ecx, DWORD PTR $T238002[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	edx, DWORD PTR $T238006[ebp]
	sub	eax, DWORD PTR [edx+24]
	xor	ecx, ecx
	cmp	eax, 30					; 0000001eH
	setl	cl
	mov	BYTE PTR _bDuplicateTimer$223426[ebp], cl

; 2636 : 
; 2637 : 			if (eIntrigueType == INTRIGUE_TYPE_DECEPTION || eIntrigueType == INTRIGUE_TYPE_BUILDING_ARMY || eIntrigueType == INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY)

	cmp	DWORD PTR _eIntrigueType$[ebp], 0
	je	SHORT $LN106@AddIntrigu
	cmp	DWORD PTR _eIntrigueType$[ebp], 1
	je	SHORT $LN106@AddIntrigu
	cmp	DWORD PTR _eIntrigueType$[ebp], 2
	jne	SHORT $LN183@AddIntrigu
$LN106@AddIntrigu:

; 2638 : 			{
; 2639 : 				if(bDuplicateTimer)

	movzx	edx, BYTE PTR _bDuplicateTimer$223426[ebp]
	test	edx, edx
	je	SHORT $LN105@AddIntrigu

; 2640 : 				{
; 2641 : 					// if duplicate is found, exit the function
; 2642 : 					return;

	jmp	$LN113@AddIntrigu
$LN105@AddIntrigu:

; 2643 : 				}
; 2644 : 			}
; 2645 : 			else if (m_aIntrigueNotificationMessages[ui].m_eBuilding == eBuilding &&

	jmp	SHORT $LN108@AddIntrigu

; 2646 : 					 m_aIntrigueNotificationMessages[ui].m_eProject == eProject &&
; 2647 : 					 m_aIntrigueNotificationMessages[ui].m_iCityX == iCityX &&
; 2648 : 					 m_aIntrigueNotificationMessages[ui].m_iCityY == iCityY)

$LN183@AddIntrigu:
	mov	eax, DWORD PTR _ui$223421[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	mov	eax, DWORD PTR [edx+eax+12]
	cmp	eax, DWORD PTR _eBuilding$[ebp]
	jne	SHORT $LN108@AddIntrigu
	mov	ecx, DWORD PTR _ui$223421[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	mov	ecx, DWORD PTR [eax+ecx+16]
	cmp	ecx, DWORD PTR _eProject$[ebp]
	jne	SHORT $LN108@AddIntrigu
	mov	edx, DWORD PTR _ui$223421[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	mov	edx, DWORD PTR [ecx+edx+28]
	cmp	edx, DWORD PTR _iCityX$[ebp]
	jne	SHORT $LN108@AddIntrigu
	mov	eax, DWORD PTR _ui$223421[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	mov	eax, DWORD PTR [edx+eax+32]
	cmp	eax, DWORD PTR _iCityY$[ebp]
	jne	SHORT $LN108@AddIntrigu

; 2649 : 			{
; 2650 : 				if(bDuplicateTimer)

	movzx	ecx, BYTE PTR _bDuplicateTimer$223426[ebp]
	test	ecx, ecx
	je	SHORT $LN108@AddIntrigu

; 2651 : 				{
; 2652 : 					// if duplicate is found, exit the function
; 2653 : 					return;

	jmp	$LN113@AddIntrigu
$LN108@AddIntrigu:

; 2654 : 				}
; 2655 : 			}
; 2656 : 		}
; 2657 : 	}

	jmp	$LN110@AddIntrigu
$LN109@AddIntrigu:

; 2658 : 
; 2659 : 	// no matching message found so adding it to the list
; 2660 : 	IntrigueNotificationMessage kMessage;

	lea	edx, DWORD PTR _kMessage$[ebp+36]
	mov	DWORD PTR $T238025[ebp], edx
	mov	ecx, DWORD PTR $T238025[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2661 : 	kMessage.m_eDiscoveringPlayer = eDiscoveringPlayer;

	mov	eax, DWORD PTR _eDiscoveringPlayer$[ebp]
	mov	DWORD PTR _kMessage$[ebp], eax

; 2662 : 	kMessage.m_eSourcePlayer = eSourcePlayer;

	mov	ecx, DWORD PTR _eSourcePlayer$[ebp]
	mov	DWORD PTR _kMessage$[ebp+4], ecx

; 2663 : 	kMessage.m_eTargetPlayer = eTargetPlayer;

	mov	edx, DWORD PTR _eTargetPlayer$[ebp]
	mov	DWORD PTR _kMessage$[ebp+8], edx

; 2664 : 	kMessage.m_eBuilding = eBuilding;

	mov	eax, DWORD PTR _eBuilding$[ebp]
	mov	DWORD PTR _kMessage$[ebp+12], eax

; 2665 : 	kMessage.m_eProject = eProject;

	mov	ecx, DWORD PTR _eProject$[ebp]
	mov	DWORD PTR _kMessage$[ebp+16], ecx

; 2666 : 	kMessage.m_iIntrigueType = eIntrigueType;

	mov	edx, DWORD PTR _eIntrigueType$[ebp]
	mov	DWORD PTR _kMessage$[ebp+20], edx

; 2667 : 	kMessage.m_iCityX = iCityX;

	mov	eax, DWORD PTR _iCityX$[ebp]
	mov	DWORD PTR _kMessage$[ebp+28], eax

; 2668 : 	kMessage.m_iCityY = iCityY;

	mov	ecx, DWORD PTR _iCityY$[ebp]
	mov	DWORD PTR _kMessage$[ebp+32], ecx

; 2669 : 	kMessage.m_iTurnNum = GC.getGame().getGameTurn();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238033[ebp], edx
	mov	ecx, DWORD PTR $T238033[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	DWORD PTR _kMessage$[ebp+24], eax

; 2670 : 	kMessage.m_strSpyName = "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	eax, eax
	je	SHORT $LN200@AddIntrigu
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _kMessage$[ebp+36]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN205@AddIntrigu
$LN200@AddIntrigu:
	lea	ecx, DWORD PTR _kMessage$[ebp+36]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ

; 2671 : 	if (eDiscoveringPlayer == m_pPlayer->GetID())

$LN205@AddIntrigu:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T238047[ebp], eax
	mov	ecx, DWORD PTR _eDiscoveringPlayer$[ebp]
	cmp	ecx, DWORD PTR $T238047[ebp]
	jne	$LN101@AddIntrigu

; 2672 : 	{
; 2673 : 		Localization::String str = Localization::Lookup("TXT_KEY_SPY_FULL_NAME");

	push	OFFSET ??_C@_0BG@NHMNMFKP@TXT_KEY_SPY_FULL_NAME?$AA@
	lea	edx, DWORD PTR _str$223435[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2674 : 		str << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238051[ebp], eax
	mov	edx, DWORD PTR $T238051[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237772[ebp], eax
	lea	ecx, DWORD PTR $T237772[ebp]
	push	ecx
	lea	edx, DWORD PTR _str$223435[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2675 : 		str << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238055[ebp], eax
	mov	edx, DWORD PTR $T238055[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237773[ebp], eax
	lea	edx, DWORD PTR $T237773[ebp]
	push	edx
	lea	eax, DWORD PTR _str$223435[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2676 : 		kMessage.m_strSpyName = str.toUTF8();

	lea	ecx, DWORD PTR _str$223435[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	DWORD PTR $T238061[ebp], eax
	cmp	DWORD PTR $T238061[ebp], 0
	je	SHORT $LN212@AddIntrigu
	mov	ecx, DWORD PTR $T238061[ebp]
	push	ecx
	lea	ecx, DWORD PTR _kMessage$[ebp+36]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN213@AddIntrigu
$LN212@AddIntrigu:
	lea	ecx, DWORD PTR _kMessage$[ebp+36]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN213@AddIntrigu:

; 2677 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _str$223435[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN101@AddIntrigu:

; 2678 : 	kMessage.m_bShared = false;

	mov	BYTE PTR _kMessage$[ebp+64], 0

; 2679 : 	m_aIntrigueNotificationMessages.push_back(kMessage);

	lea	edx, DWORD PTR _kMessage$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	call	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back

; 2680 : 
; 2681 : 	if (bShowNotification)

	movzx	eax, BYTE PTR _bShowNotification$[ebp]
	test	eax, eax
	je	$LN100@AddIntrigu

; 2682 : 	{
; 2683 : 		CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$223441[ebp], eax

; 2684 : 		CvAssertMsg(pNotifications, "No notifications found. This is wrong!");
; 2685 : 		if(!pNotifications)

	cmp	DWORD PTR _pNotifications$223441[ebp], 0
	jne	SHORT $LN99@AddIntrigu

; 2686 : 		{
; 2687 : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	edx, DWORD PTR _kMessage$[ebp+36]
	mov	DWORD PTR $T238103[ebp], edx
	mov	ecx, DWORD PTR $T238103[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN113@AddIntrigu
$LN99@AddIntrigu:

; 2688 : 		}
; 2689 : 
; 2690 : 		switch(kMessage.m_iIntrigueType)

	mov	eax, DWORD PTR _kMessage$[ebp+20]
	mov	DWORD PTR tv260[ebp], eax
	cmp	DWORD PTR tv260[ebp], 5
	ja	$LN100@AddIntrigu
	mov	ecx, DWORD PTR tv260[ebp]
	jmp	DWORD PTR $LN558@AddIntrigu[ecx*4]
$LN96@AddIntrigu:

; 2691 : 		{
; 2692 : 		case INTRIGUE_TYPE_DECEPTION:
; 2693 : 			{
; 2694 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 2695 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 2696 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())  // if we found intrigue related to us

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T238116[ebp], ecx
	mov	edx, DWORD PTR _kMessage$[ebp+8]
	cmp	edx, DWORD PTR $T238116[ebp]
	jne	$LN95@AddIntrigu

; 2697 : 				{
; 2698 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU_S");

	push	OFFSET ??_C@_0DF@ILKPOFHI@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	eax, DWORD PTR $T237774[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv265[ebp], eax
	mov	ecx, DWORD PTR tv265[ebp]
	mov	DWORD PTR tv2491[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv2491[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237774[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2699 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238120[ebp], eax
	mov	ecx, DWORD PTR $T238120[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN94@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238124[ebp], edx
	mov	ecx, DWORD PTR $T238124[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN94@AddIntrigu

; 2700 : 					{
; 2701 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238128[ebp], ecx
	mov	ecx, DWORD PTR $T238128[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237775[ebp], eax
	lea	edx, DWORD PTR $T237775[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223448[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2702 : 					}
; 2703 : 					else

	jmp	SHORT $LN93@AddIntrigu
$LN94@AddIntrigu:

; 2704 : 					{
; 2705 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238132[ebp], ecx
	mov	ecx, DWORD PTR $T238132[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237776[ebp], eax
	lea	edx, DWORD PTR $T237776[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223448[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN93@AddIntrigu:

; 2706 : 					}
; 2707 : 
; 2708 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU");

	push	OFFSET ??_C@_0DD@KHENEKON@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	ecx, DWORD PTR $T237777[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv262[ebp], eax
	mov	edx, DWORD PTR tv262[ebp]
	mov	DWORD PTR tv2493[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR tv2493[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237777[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2709 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238136[ebp], ecx
	mov	eax, DWORD PTR $T238136[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237778[ebp], eax
	lea	edx, DWORD PTR $T237778[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2710 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238140[ebp], ecx
	mov	eax, DWORD PTR $T238140[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237779[ebp], eax
	lea	eax, DWORD PTR $T237779[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2711 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2712 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN92@AddIntrigu

; 2713 : 					{
; 2714 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237780[ebp], eax
	lea	edx, DWORD PTR $T237780[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN92@AddIntrigu:

; 2715 : 					}
; 2716 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238144[ebp], ecx
	mov	ecx, DWORD PTR $T238144[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN91@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238148[ebp], eax
	mov	ecx, DWORD PTR $T238148[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN91@AddIntrigu

; 2717 : 					{
; 2718 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238152[ebp], edx
	mov	ecx, DWORD PTR $T238152[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237781[ebp], eax
	lea	eax, DWORD PTR $T237781[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2719 : 					}
; 2720 : 					else

	jmp	SHORT $LN90@AddIntrigu
$LN91@AddIntrigu:

; 2721 : 					{
; 2722 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238156[ebp], edx
	mov	ecx, DWORD PTR $T238156[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237782[ebp], eax
	lea	eax, DWORD PTR $T237782[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN90@AddIntrigu:

; 2723 : 					}

	jmp	$LN89@AddIntrigu
$LN95@AddIntrigu:

; 2724 : 				}
; 2725 : 				else if(kMessage.m_eTargetPlayer == NO_PLAYER)  // if we don't know who the intrigue information is about

	cmp	DWORD PTR _kMessage$[ebp+8], -1
	jne	$LN88@AddIntrigu

; 2726 : 				{
; 2727 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN_S");

	push	OFFSET ??_C@_0DJ@IEBCLJDH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	edx, DWORD PTR $T237783[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv181[ebp], eax
	mov	eax, DWORD PTR tv181[ebp]
	mov	DWORD PTR tv2495[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv2495[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237783[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2728 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238160[ebp], edx
	mov	ecx, DWORD PTR $T238160[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN87@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238164[ebp], ecx
	mov	ecx, DWORD PTR $T238164[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN87@AddIntrigu

; 2729 : 					{
; 2730 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238168[ebp], eax
	mov	ecx, DWORD PTR $T238168[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237784[ebp], eax
	lea	ecx, DWORD PTR $T237784[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223448[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2731 : 					}
; 2732 : 					else

	jmp	SHORT $LN86@AddIntrigu
$LN87@AddIntrigu:

; 2733 : 					{
; 2734 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238172[ebp], eax
	mov	ecx, DWORD PTR $T238172[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237785[ebp], eax
	lea	ecx, DWORD PTR $T237785[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223448[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN86@AddIntrigu:

; 2735 : 					}
; 2736 : 
; 2737 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0DH@LPMEBPBN@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	eax, DWORD PTR $T237786[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2593[ebp], eax
	mov	ecx, DWORD PTR tv2593[ebp]
	mov	DWORD PTR tv2497[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv2497[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237786[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2738 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238176[ebp], eax
	mov	edx, DWORD PTR $T238176[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237787[ebp], eax
	lea	ecx, DWORD PTR $T237787[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223449[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2739 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238180[ebp], eax
	mov	edx, DWORD PTR $T238180[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237788[ebp], eax
	lea	edx, DWORD PTR $T237788[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2740 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2741 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN85@AddIntrigu

; 2742 : 					{
; 2743 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237789[ebp], eax
	lea	ecx, DWORD PTR $T237789[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223449[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN85@AddIntrigu:

; 2744 : 					}
; 2745 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238184[ebp], eax
	mov	ecx, DWORD PTR $T238184[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN84@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238188[ebp], edx
	mov	ecx, DWORD PTR $T238188[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN84@AddIntrigu

; 2746 : 					{
; 2747 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238192[ebp], ecx
	mov	ecx, DWORD PTR $T238192[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237790[ebp], eax
	lea	edx, DWORD PTR $T237790[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2748 : 					}
; 2749 : 					else

	jmp	SHORT $LN83@AddIntrigu
$LN84@AddIntrigu:

; 2750 : 					{
; 2751 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238196[ebp], ecx
	mov	ecx, DWORD PTR $T238196[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237791[ebp], eax
	lea	edx, DWORD PTR $T237791[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN83@AddIntrigu:

; 2752 : 					}
; 2753 : 				}
; 2754 : 				else // if we found intrigue related to another player

	jmp	$LN89@AddIntrigu
$LN88@AddIntrigu:

; 2755 : 				{
; 2756 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN_S");

	push	OFFSET ??_C@_0DH@GJFHNBCA@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	ecx, DWORD PTR $T237792[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv170[ebp], eax
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv2499[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv2499[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237792[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2757 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238200[ebp], ecx
	mov	ecx, DWORD PTR $T238200[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN81@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238204[ebp], eax
	mov	ecx, DWORD PTR $T238204[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN81@AddIntrigu

; 2758 : 					{
; 2759 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238208[ebp], edx
	mov	ecx, DWORD PTR $T238208[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237793[ebp], eax
	lea	eax, DWORD PTR $T237793[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2760 : 					}
; 2761 : 					else

	jmp	SHORT $LN80@AddIntrigu
$LN81@AddIntrigu:

; 2762 : 					{
; 2763 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238212[ebp], edx
	mov	ecx, DWORD PTR $T238212[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237794[ebp], eax
	lea	eax, DWORD PTR $T237794[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN80@AddIntrigu:

; 2764 : 					}
; 2765 : 
; 2766 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238216[ebp], edx
	mov	ecx, DWORD PTR $T238216[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN79@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238220[ebp], ecx
	mov	ecx, DWORD PTR $T238220[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN79@AddIntrigu

; 2767 : 					{
; 2768 : 						strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238224[ebp], eax
	mov	ecx, DWORD PTR $T238224[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237795[ebp], eax
	lea	ecx, DWORD PTR $T237795[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223448[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2769 : 					}
; 2770 : 					else

	jmp	SHORT $LN78@AddIntrigu
$LN79@AddIntrigu:

; 2771 : 					{
; 2772 : 						strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238228[ebp], eax
	mov	ecx, DWORD PTR $T238228[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237796[ebp], eax
	lea	ecx, DWORD PTR $T237796[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223448[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN78@AddIntrigu:

; 2773 : 					}
; 2774 : 
; 2775 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN");

	push	OFFSET ??_C@_0DF@DGAKOFAH@TXT_KEY_NOTIFICATION_INTRIGUE_PL@
	lea	eax, DWORD PTR $T237797[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2872[ebp], eax
	mov	ecx, DWORD PTR tv2872[ebp]
	mov	DWORD PTR tv2501[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv2501[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T237797[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2776 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238232[ebp], eax
	mov	edx, DWORD PTR $T238232[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237798[ebp], eax
	lea	ecx, DWORD PTR $T237798[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223449[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2777 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238236[ebp], eax
	mov	edx, DWORD PTR $T238236[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237799[ebp], eax
	lea	edx, DWORD PTR $T237799[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2778 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2779 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN77@AddIntrigu

; 2780 : 					{
; 2781 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237800[ebp], eax
	lea	ecx, DWORD PTR $T237800[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223449[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN77@AddIntrigu:

; 2782 : 					}
; 2783 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238240[ebp], eax
	mov	ecx, DWORD PTR $T238240[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN76@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238244[ebp], edx
	mov	ecx, DWORD PTR $T238244[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN76@AddIntrigu

; 2784 : 					{
; 2785 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238248[ebp], ecx
	mov	ecx, DWORD PTR $T238248[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237801[ebp], eax
	lea	edx, DWORD PTR $T237801[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2786 : 					}
; 2787 : 					else

	jmp	SHORT $LN75@AddIntrigu
$LN76@AddIntrigu:

; 2788 : 					{
; 2789 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238252[ebp], ecx
	mov	ecx, DWORD PTR $T238252[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237802[ebp], eax
	lea	edx, DWORD PTR $T237802[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223449[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN75@AddIntrigu:

; 2790 : 					}
; 2791 : 
; 2792 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238256[ebp], ecx
	mov	ecx, DWORD PTR $T238256[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN74@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238260[ebp], eax
	mov	ecx, DWORD PTR $T238260[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN74@AddIntrigu

; 2793 : 					{
; 2794 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238264[ebp], edx
	mov	ecx, DWORD PTR $T238264[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237803[ebp], eax
	lea	eax, DWORD PTR $T237803[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2795 : 					}
; 2796 : 					else

	jmp	SHORT $LN89@AddIntrigu
$LN74@AddIntrigu:

; 2797 : 					{
; 2798 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238268[ebp], edx
	mov	ecx, DWORD PTR $T238268[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237804[ebp], eax
	lea	eax, DWORD PTR $T237804[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN89@AddIntrigu:

; 2799 : 					}
; 2800 : 				}
; 2801 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_DECEPTION, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	push	-1
	mov	edx, DWORD PTR _kMessage$[ebp+8]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	507398241				; 1e3e4861H
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2802 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2803 : 			break;

	jmp	$LN100@AddIntrigu
$LN72@AddIntrigu:

; 2804 : 		case INTRIGUE_TYPE_BUILDING_ARMY:
; 2805 : 			{
; 2806 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223511[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 2807 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 2808 : 
; 2809 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY_S");

	push	OFFSET ??_C@_0CO@FODHCKOO@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
	lea	eax, DWORD PTR $T237805[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv755[ebp], eax
	mov	ecx, DWORD PTR tv755[ebp]
	mov	DWORD PTR tv2505[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR tv2505[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223511[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T237805[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2810 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238272[ebp], eax
	mov	ecx, DWORD PTR $T238272[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN71@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238276[ebp], edx
	mov	ecx, DWORD PTR $T238276[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN71@AddIntrigu

; 2811 : 				{
; 2812 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238280[ebp], ecx
	mov	ecx, DWORD PTR $T238280[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237806[ebp], eax
	lea	edx, DWORD PTR $T237806[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223511[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2813 : 				}
; 2814 : 				else

	jmp	SHORT $LN70@AddIntrigu
$LN71@AddIntrigu:

; 2815 : 				{
; 2816 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238284[ebp], ecx
	mov	ecx, DWORD PTR $T238284[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237807[ebp], eax
	lea	edx, DWORD PTR $T237807[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223511[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN70@AddIntrigu:

; 2817 : 				}
; 2818 : 
; 2819 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY");

	push	OFFSET ??_C@_0CM@ELJBABDA@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
	lea	ecx, DWORD PTR $T237808[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv752[ebp], eax
	mov	edx, DWORD PTR tv752[ebp]
	mov	DWORD PTR tv2507[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv2507[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T237808[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2820 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238288[ebp], ecx
	mov	eax, DWORD PTR $T238288[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237809[ebp], eax
	lea	edx, DWORD PTR $T237809[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223512[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2821 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238292[ebp], ecx
	mov	eax, DWORD PTR $T238292[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237810[ebp], eax
	lea	eax, DWORD PTR $T237810[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2822 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238296[ebp], edx
	mov	ecx, DWORD PTR $T238296[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN69@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238300[ebp], ecx
	mov	ecx, DWORD PTR $T238300[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN69@AddIntrigu

; 2823 : 				{
; 2824 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238304[ebp], eax
	mov	ecx, DWORD PTR $T238304[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237811[ebp], eax
	lea	ecx, DWORD PTR $T237811[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223512[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2825 : 				}
; 2826 : 				else

	jmp	SHORT $LN68@AddIntrigu
$LN69@AddIntrigu:

; 2827 : 				{
; 2828 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238308[ebp], eax
	mov	ecx, DWORD PTR $T238308[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237812[ebp], eax
	lea	ecx, DWORD PTR $T237812[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223512[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN68@AddIntrigu:

; 2829 : 				}
; 2830 : 
; 2831 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_ARMY, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223511[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	402583486				; 17feefbeH
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2832 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223511[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2833 : 			break;

	jmp	$LN100@AddIntrigu
$LN67@AddIntrigu:

; 2834 : 		case INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY:
; 2835 : 			{
; 2836 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223528[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH

; 2837 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH

; 2838 : 
; 2839 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY_S");

	push	OFFSET ??_C@_0DJ@CALCBAHM@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
	lea	eax, DWORD PTR $T237813[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv889[ebp], eax
	mov	ecx, DWORD PTR tv889[ebp]
	mov	DWORD PTR tv2511[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR tv2511[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223528[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T237813[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2840 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238312[ebp], eax
	mov	ecx, DWORD PTR $T238312[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN66@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238316[ebp], edx
	mov	ecx, DWORD PTR $T238316[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN66@AddIntrigu

; 2841 : 				{
; 2842 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238320[ebp], ecx
	mov	ecx, DWORD PTR $T238320[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237814[ebp], eax
	lea	edx, DWORD PTR $T237814[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223528[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2843 : 				}
; 2844 : 				else

	jmp	SHORT $LN65@AddIntrigu
$LN66@AddIntrigu:

; 2845 : 				{
; 2846 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238324[ebp], ecx
	mov	ecx, DWORD PTR $T238324[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237815[ebp], eax
	lea	edx, DWORD PTR $T237815[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223528[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN65@AddIntrigu:

; 2847 : 				}
; 2848 : 
; 2849 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY");

	push	OFFSET ??_C@_0DH@GDGHPAFJ@TXT_KEY_NOTIFICATION_INTRIGUE_BU@
	lea	ecx, DWORD PTR $T237816[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv886[ebp], eax
	mov	edx, DWORD PTR tv886[ebp]
	mov	DWORD PTR tv2513[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	eax, DWORD PTR tv2513[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T237816[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2850 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238328[ebp], ecx
	mov	eax, DWORD PTR $T238328[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237817[ebp], eax
	lea	edx, DWORD PTR $T237817[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223529[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2851 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238332[ebp], ecx
	mov	eax, DWORD PTR $T238332[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237818[ebp], eax
	lea	eax, DWORD PTR $T237818[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2852 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238336[ebp], edx
	mov	ecx, DWORD PTR $T238336[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN64@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238340[ebp], ecx
	mov	ecx, DWORD PTR $T238340[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN64@AddIntrigu

; 2853 : 				{
; 2854 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238344[ebp], eax
	mov	ecx, DWORD PTR $T238344[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237819[ebp], eax
	lea	ecx, DWORD PTR $T237819[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223529[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2855 : 				}
; 2856 : 				else

	jmp	SHORT $LN63@AddIntrigu
$LN64@AddIntrigu:

; 2857 : 				{
; 2858 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238348[ebp], eax
	mov	ecx, DWORD PTR $T238348[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237820[ebp], eax
	lea	ecx, DWORD PTR $T237820[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223529[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN63@AddIntrigu:

; 2859 : 				}
; 2860 : 
; 2861 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_AMPHIBIOUS, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223528[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	48950482				; 02eaecd2H
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2862 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223528[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2863 : 			break;

	jmp	$LN100@AddIntrigu
$LN62@AddIntrigu:

; 2864 : 
; 2865 : 		case INTRIGUE_TYPE_ARMY_SNEAK_ATTACK:
; 2866 : 			{
; 2867 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H

; 2868 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H

; 2869 : 				NotificationTypes eNotification;
; 2870 : 
; 2871 : 				// targeting me
; 2872 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T238357[ebp], edx
	mov	eax, DWORD PTR _kMessage$[ebp+8]
	cmp	eax, DWORD PTR $T238357[ebp]
	jne	$LN61@AddIntrigu

; 2873 : 				{
; 2874 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN60@AddIntrigu

; 2875 : 					{
; 2876 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN;

	mov	DWORD PTR _eNotification$223547[ebp], 617384028 ; 24cc885cH

; 2877 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN_S");

	push	OFFSET ??_C@_0EJ@CKPGMBDG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237821[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1023[ebp], eax
	mov	edx, DWORD PTR tv1023[ebp]
	mov	DWORD PTR tv2517[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	eax, DWORD PTR tv2517[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237821[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2878 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238361[ebp], ecx
	mov	ecx, DWORD PTR $T238361[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN59@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238365[ebp], eax
	mov	ecx, DWORD PTR $T238365[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@AddIntrigu

; 2879 : 						{
; 2880 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238369[ebp], edx
	mov	ecx, DWORD PTR $T238369[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237822[ebp], eax
	lea	eax, DWORD PTR $T237822[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2881 : 						}
; 2882 : 						else

	jmp	SHORT $LN58@AddIntrigu
$LN59@AddIntrigu:

; 2883 : 						{
; 2884 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238373[ebp], edx
	mov	ecx, DWORD PTR $T238373[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237823[ebp], eax
	lea	eax, DWORD PTR $T237823[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN58@AddIntrigu:

; 2885 : 						}
; 2886 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237824[ebp], eax
	lea	edx, DWORD PTR $T237824[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2887 : 
; 2888 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN");

	push	OFFSET ??_C@_0EH@BICHANDF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237825[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1020[ebp], eax
	mov	edx, DWORD PTR tv1020[ebp]
	mov	DWORD PTR tv2519[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	eax, DWORD PTR tv2519[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237825[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2889 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238377[ebp], ecx
	mov	eax, DWORD PTR $T238377[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237826[ebp], eax
	lea	edx, DWORD PTR $T237826[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2890 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238381[ebp], ecx
	mov	eax, DWORD PTR $T238381[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237827[ebp], eax
	lea	eax, DWORD PTR $T237827[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2891 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238385[ebp], edx
	mov	ecx, DWORD PTR $T238385[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237828[ebp], eax
	lea	eax, DWORD PTR $T237828[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2892 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237829[ebp], eax
	lea	edx, DWORD PTR $T237829[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2893 : 					}
; 2894 : 					else

	jmp	$LN57@AddIntrigu
$LN60@AddIntrigu:

; 2895 : 					{
; 2896 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN;

	mov	DWORD PTR _eNotification$223547[ebp], 2135009779 ; 7f41a9f3H

; 2897 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN_S");

	push	OFFSET ??_C@_0EL@IFDNFPCF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237830[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2913[ebp], eax
	mov	edx, DWORD PTR tv2913[ebp]
	mov	DWORD PTR tv2521[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	eax, DWORD PTR tv2521[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237830[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2898 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238389[ebp], ecx
	mov	ecx, DWORD PTR $T238389[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN56@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238393[ebp], eax
	mov	ecx, DWORD PTR $T238393[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN56@AddIntrigu

; 2899 : 						{
; 2900 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238397[ebp], edx
	mov	ecx, DWORD PTR $T238397[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237831[ebp], eax
	lea	eax, DWORD PTR $T237831[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2901 : 						}
; 2902 : 						else

	jmp	SHORT $LN55@AddIntrigu
$LN56@AddIntrigu:

; 2903 : 						{
; 2904 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238401[ebp], edx
	mov	ecx, DWORD PTR $T238401[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237832[ebp], eax
	lea	eax, DWORD PTR $T237832[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN55@AddIntrigu:

; 2905 : 						}
; 2906 : 
; 2907 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN");

	push	OFFSET ??_C@_0EJ@PMGFAPAL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	edx, DWORD PTR $T237833[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2914[ebp], eax
	mov	eax, DWORD PTR tv2914[ebp]
	mov	DWORD PTR tv2523[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	ecx, DWORD PTR tv2523[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237833[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2908 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238405[ebp], edx
	mov	ecx, DWORD PTR $T238405[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237834[ebp], eax
	lea	eax, DWORD PTR $T237834[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2909 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238409[ebp], edx
	mov	ecx, DWORD PTR $T238409[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237835[ebp], eax
	lea	ecx, DWORD PTR $T237835[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2910 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238413[ebp], eax
	mov	ecx, DWORD PTR $T238413[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237836[ebp], eax
	lea	ecx, DWORD PTR $T237836[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN57@AddIntrigu:

; 2911 : 					}

	jmp	$LN54@AddIntrigu
$LN61@AddIntrigu:

; 2912 : 				}
; 2913 : 				// targeting somebody else I know
; 2914 : 				else if(kMessage.m_eTargetPlayer != NO_PLAYER && kMessage.m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	DWORD PTR _kMessage$[ebp+8], -1
	je	$LN53@AddIntrigu
	cmp	DWORD PTR _kMessage$[ebp+8], 22		; 00000016H
	je	$LN53@AddIntrigu

; 2915 : 				{
; 2916 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN52@AddIntrigu

; 2917 : 					{
; 2918 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN;

	mov	DWORD PTR _eNotification$223547[ebp], -1432015642 ; aaa52ce6H

; 2919 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN_S");

	push	OFFSET ??_C@_0EL@HOEDHEAE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237837[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2915[ebp], eax
	mov	ecx, DWORD PTR tv2915[ebp]
	mov	DWORD PTR tv2525[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	edx, DWORD PTR tv2525[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237837[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2920 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238417[ebp], eax
	mov	ecx, DWORD PTR $T238417[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN51@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238421[ebp], edx
	mov	ecx, DWORD PTR $T238421[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@AddIntrigu

; 2921 : 						{
; 2922 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238425[ebp], ecx
	mov	ecx, DWORD PTR $T238425[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237838[ebp], eax
	lea	edx, DWORD PTR $T237838[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2923 : 						}
; 2924 : 						else

	jmp	SHORT $LN50@AddIntrigu
$LN51@AddIntrigu:

; 2925 : 						{
; 2926 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238429[ebp], ecx
	mov	ecx, DWORD PTR $T238429[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237839[ebp], eax
	lea	edx, DWORD PTR $T237839[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN50@AddIntrigu:

; 2927 : 						}
; 2928 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237840[ebp], eax
	lea	ecx, DWORD PTR $T237840[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223545[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2929 : 
; 2930 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN");

	push	OFFSET ??_C@_0EJ@JBGNAPGF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237841[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2916[ebp], eax
	mov	ecx, DWORD PTR tv2916[ebp]
	mov	DWORD PTR tv2527[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	edx, DWORD PTR tv2527[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237841[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2931 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238433[ebp], eax
	mov	edx, DWORD PTR $T238433[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237842[ebp], eax
	lea	ecx, DWORD PTR $T237842[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2932 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238437[ebp], eax
	mov	edx, DWORD PTR $T238437[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237843[ebp], eax
	lea	edx, DWORD PTR $T237843[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2933 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238441[ebp], ecx
	mov	ecx, DWORD PTR $T238441[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237844[ebp], eax
	lea	edx, DWORD PTR $T237844[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2934 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238445[ebp], ecx
	mov	ecx, DWORD PTR $T238445[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237845[ebp], eax
	lea	edx, DWORD PTR $T237845[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2935 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237846[ebp], eax
	lea	ecx, DWORD PTR $T237846[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2936 : 					}
; 2937 : 					else

	jmp	$LN49@AddIntrigu
$LN52@AddIntrigu:

; 2938 : 					{
; 2939 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN;

	mov	DWORD PTR _eNotification$223547[ebp], -1328544167 ; b0d00659H

; 2940 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN_S");

	push	OFFSET ??_C@_0EN@NDEGBIOC@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237847[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2917[ebp], eax
	mov	ecx, DWORD PTR tv2917[ebp]
	mov	DWORD PTR tv2529[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	mov	edx, DWORD PTR tv2529[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237847[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2941 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238449[ebp], eax
	mov	ecx, DWORD PTR $T238449[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN48@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238453[ebp], edx
	mov	ecx, DWORD PTR $T238453[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN48@AddIntrigu

; 2942 : 						{
; 2943 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238457[ebp], ecx
	mov	ecx, DWORD PTR $T238457[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237848[ebp], eax
	lea	edx, DWORD PTR $T237848[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2944 : 						}
; 2945 : 						else

	jmp	SHORT $LN47@AddIntrigu
$LN48@AddIntrigu:

; 2946 : 						{
; 2947 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238461[ebp], ecx
	mov	ecx, DWORD PTR $T238461[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237849[ebp], eax
	lea	edx, DWORD PTR $T237849[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN47@AddIntrigu:

; 2948 : 						}
; 2949 : 
; 2950 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238465[ebp], ecx
	mov	ecx, DWORD PTR $T238465[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN46@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238469[ebp], eax
	mov	ecx, DWORD PTR $T238469[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN46@AddIntrigu

; 2951 : 						{
; 2952 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238473[ebp], edx
	mov	ecx, DWORD PTR $T238473[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237850[ebp], eax
	lea	eax, DWORD PTR $T237850[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2953 : 						}
; 2954 : 						else

	jmp	SHORT $LN45@AddIntrigu
$LN46@AddIntrigu:

; 2955 : 						{
; 2956 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238477[ebp], edx
	mov	ecx, DWORD PTR $T238477[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237851[ebp], eax
	lea	eax, DWORD PTR $T237851[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN45@AddIntrigu:

; 2957 : 						}
; 2958 : 
; 2959 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN");

	push	OFFSET ??_C@_0EL@KINALKDJ@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	edx, DWORD PTR $T237852[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2918[ebp], eax
	mov	eax, DWORD PTR tv2918[ebp]
	mov	DWORD PTR tv2531[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	mov	ecx, DWORD PTR tv2531[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237852[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2960 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238481[ebp], edx
	mov	ecx, DWORD PTR $T238481[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237853[ebp], eax
	lea	eax, DWORD PTR $T237853[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2961 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238485[ebp], edx
	mov	ecx, DWORD PTR $T238485[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237854[ebp], eax
	lea	ecx, DWORD PTR $T237854[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2962 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238489[ebp], eax
	mov	ecx, DWORD PTR $T238489[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237855[ebp], eax
	lea	ecx, DWORD PTR $T237855[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2963 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationDescriptionKey();

	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238493[ebp], eax
	mov	ecx, DWORD PTR $T238493[ebp]
	call	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationDescriptionKey
	mov	DWORD PTR $T237856[ebp], eax
	lea	ecx, DWORD PTR $T237856[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223546[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN49@AddIntrigu:

; 2964 : 					}
; 2965 : 				}
; 2966 : 				// targeting an unknown player
; 2967 : 				else

	jmp	$LN54@AddIntrigu
$LN53@AddIntrigu:

; 2968 : 				{
; 2969 : 					eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN;

	mov	DWORD PTR _eNotification$223547[ebp], -265092093 ; f0330403H

; 2970 : 					// if the spy wasn't high enough rank to know who was being attacked
; 2971 : 					if (kMessage.m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	DWORD PTR _kMessage$[ebp+8], 22		; 00000016H
	jne	$LN43@AddIntrigu

; 2972 : 					{
; 2973 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE_S");

	push	OFFSET ??_C@_0EC@HADMBDDP@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237857[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2919[ebp], eax
	mov	ecx, DWORD PTR tv2919[ebp]
	mov	DWORD PTR tv2533[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	edx, DWORD PTR tv2533[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237857[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2974 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE");

	push	OFFSET ??_C@_0EA@KPKAGKAD@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237858[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2920[ebp], eax
	mov	ecx, DWORD PTR tv2920[ebp]
	mov	DWORD PTR tv2535[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	mov	edx, DWORD PTR tv2535[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237858[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2975 : 					}
; 2976 : 					else

	jmp	$LN42@AddIntrigu
$LN43@AddIntrigu:

; 2977 : 					{
; 2978 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN_S");

	push	OFFSET ??_C@_0EC@BEMAFILE@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237859[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2921[ebp], eax
	mov	ecx, DWORD PTR tv2921[ebp]
	mov	DWORD PTR tv2537[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	mov	edx, DWORD PTR tv2537[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237859[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2979 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0EA@JODCPLAI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237860[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2922[ebp], eax
	mov	ecx, DWORD PTR tv2922[ebp]
	mov	DWORD PTR tv2539[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
	mov	edx, DWORD PTR tv2539[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR $T237860[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN42@AddIntrigu:

; 2980 : 					}
; 2981 : 
; 2982 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238497[ebp], eax
	mov	ecx, DWORD PTR $T238497[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238501[ebp], edx
	mov	ecx, DWORD PTR $T238501[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@AddIntrigu

; 2983 : 					{
; 2984 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238505[ebp], ecx
	mov	ecx, DWORD PTR $T238505[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237861[ebp], eax
	lea	edx, DWORD PTR $T237861[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2985 : 					}
; 2986 : 					else

	jmp	SHORT $LN40@AddIntrigu
$LN41@AddIntrigu:

; 2987 : 					{
; 2988 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238509[ebp], ecx
	mov	ecx, DWORD PTR $T238509[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237862[ebp], eax
	lea	edx, DWORD PTR $T237862[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223545[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN40@AddIntrigu:

; 2989 : 					}
; 2990 : 
; 2991 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238513[ebp], ecx
	mov	eax, DWORD PTR $T238513[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237863[ebp], eax
	lea	edx, DWORD PTR $T237863[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223546[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2992 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238517[ebp], ecx
	mov	eax, DWORD PTR $T238517[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237864[ebp], eax
	lea	eax, DWORD PTR $T237864[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 2993 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238521[ebp], edx
	mov	ecx, DWORD PTR $T238521[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237865[ebp], eax
	lea	eax, DWORD PTR $T237865[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN54@AddIntrigu:

; 2994 : 				}
; 2995 : 
; 2996 : 				pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	push	-1
	mov	edx, DWORD PTR _kMessage$[ebp+8]
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	eax, DWORD PTR _eNotification$223547[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2997 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2998 : 			break;

	jmp	$LN100@AddIntrigu
$LN39@AddIntrigu:

; 2999 : 		case INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK:
; 3000 : 			{
; 3001 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H

; 3002 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H

; 3003 : 				NotificationTypes eNotification;
; 3004 : 
; 3005 : 				// targeting me
; 3006 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1296]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T238530[ebp], eax
	mov	ecx, DWORD PTR _kMessage$[ebp+8]
	cmp	ecx, DWORD PTR $T238530[ebp]
	jne	$LN38@AddIntrigu

; 3007 : 				{
; 3008 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN37@AddIntrigu

; 3009 : 					{
; 3010 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN;

	mov	DWORD PTR _eNotification$223630[ebp], -56440186 ; fca2ca86H

; 3011 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN_S");

	push	OFFSET ??_C@_0EL@KANEHOLL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	edx, DWORD PTR $T237866[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1650[ebp], eax
	mov	eax, DWORD PTR tv1650[ebp]
	mov	DWORD PTR tv2543[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 34		; 00000022H
	mov	ecx, DWORD PTR tv2543[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237866[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3012 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238534[ebp], edx
	mov	ecx, DWORD PTR $T238534[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN36@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238538[ebp], ecx
	mov	ecx, DWORD PTR $T238538[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@AddIntrigu

; 3013 : 						{
; 3014 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238542[ebp], eax
	mov	ecx, DWORD PTR $T238542[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237867[ebp], eax
	lea	ecx, DWORD PTR $T237867[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3015 : 						}
; 3016 : 						else

	jmp	SHORT $LN35@AddIntrigu
$LN36@AddIntrigu:

; 3017 : 						{
; 3018 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238546[ebp], eax
	mov	ecx, DWORD PTR $T238546[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237868[ebp], eax
	lea	ecx, DWORD PTR $T237868[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN35@AddIntrigu:

; 3019 : 						}
; 3020 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237869[ebp], eax
	lea	eax, DWORD PTR $T237869[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3021 : 
; 3022 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN");

	push	OFFSET ??_C@_0EJ@NMIJGJNL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	edx, DWORD PTR $T237870[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1647[ebp], eax
	mov	eax, DWORD PTR tv1647[ebp]
	mov	DWORD PTR tv2545[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 35		; 00000023H
	mov	ecx, DWORD PTR tv2545[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237870[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3023 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238550[ebp], edx
	mov	ecx, DWORD PTR $T238550[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237871[ebp], eax
	lea	eax, DWORD PTR $T237871[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3024 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238554[ebp], edx
	mov	ecx, DWORD PTR $T238554[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237872[ebp], eax
	lea	ecx, DWORD PTR $T237872[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3025 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238558[ebp], eax
	mov	ecx, DWORD PTR $T238558[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237873[ebp], eax
	lea	ecx, DWORD PTR $T237873[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3026 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237874[ebp], eax
	lea	eax, DWORD PTR $T237874[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3027 : 					}
; 3028 : 					else

	jmp	$LN34@AddIntrigu
$LN37@AddIntrigu:

; 3029 : 					{
; 3030 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN;

	mov	DWORD PTR _eNotification$223630[ebp], -1673233228 ; 9c447cb4H

; 3031 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN_S");

	push	OFFSET ??_C@_0EN@FAMOJNBM@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	edx, DWORD PTR $T237875[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2923[ebp], eax
	mov	eax, DWORD PTR tv2923[ebp]
	mov	DWORD PTR tv2547[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 36		; 00000024H
	mov	ecx, DWORD PTR tv2547[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237875[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3032 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238562[ebp], edx
	mov	ecx, DWORD PTR $T238562[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238566[ebp], ecx
	mov	ecx, DWORD PTR $T238566[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN33@AddIntrigu

; 3033 : 						{
; 3034 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238570[ebp], eax
	mov	ecx, DWORD PTR $T238570[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237876[ebp], eax
	lea	ecx, DWORD PTR $T237876[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3035 : 						}
; 3036 : 						else

	jmp	SHORT $LN32@AddIntrigu
$LN33@AddIntrigu:

; 3037 : 						{
; 3038 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238574[ebp], eax
	mov	ecx, DWORD PTR $T238574[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237877[ebp], eax
	lea	ecx, DWORD PTR $T237877[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN32@AddIntrigu:

; 3039 : 						}
; 3040 : 
; 3041 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN");

	push	OFFSET ??_C@_0EL@HGEHLAIG@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237878[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2924[ebp], eax
	mov	ecx, DWORD PTR tv2924[ebp]
	mov	DWORD PTR tv2549[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 37		; 00000025H
	mov	edx, DWORD PTR tv2549[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237878[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3042 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238578[ebp], eax
	mov	edx, DWORD PTR $T238578[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237879[ebp], eax
	lea	ecx, DWORD PTR $T237879[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3043 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238582[ebp], eax
	mov	edx, DWORD PTR $T238582[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237880[ebp], eax
	lea	edx, DWORD PTR $T237880[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3044 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238586[ebp], ecx
	mov	ecx, DWORD PTR $T238586[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237881[ebp], eax
	lea	edx, DWORD PTR $T237881[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN34@AddIntrigu:

; 3045 : 					}

	jmp	$LN31@AddIntrigu
$LN38@AddIntrigu:

; 3046 : 				}
; 3047 : 				// targeting somebody else I know
; 3048 : 				else if(kMessage.m_eTargetPlayer != NO_PLAYER && kMessage.m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	DWORD PTR _kMessage$[ebp+8], -1
	je	$LN30@AddIntrigu
	cmp	DWORD PTR _kMessage$[ebp+8], 22		; 00000016H
	je	$LN30@AddIntrigu

; 3049 : 				{
; 3050 : 					if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN29@AddIntrigu

; 3051 : 					{
; 3052 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN;

	mov	DWORD PTR _eNotification$223630[ebp], 1235286433 ; 49a0f9a1H

; 3053 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN_S");

	push	OFFSET ??_C@_0EN@KLLALGDN@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237882[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2925[ebp], eax
	mov	edx, DWORD PTR tv2925[ebp]
	mov	DWORD PTR tv2551[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 38		; 00000026H
	mov	eax, DWORD PTR tv2551[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237882[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3054 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238590[ebp], ecx
	mov	ecx, DWORD PTR $T238590[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN28@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238594[ebp], eax
	mov	ecx, DWORD PTR $T238594[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN28@AddIntrigu

; 3055 : 						{
; 3056 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238598[ebp], edx
	mov	ecx, DWORD PTR $T238598[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237883[ebp], eax
	lea	eax, DWORD PTR $T237883[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3057 : 						}
; 3058 : 						else

	jmp	SHORT $LN27@AddIntrigu
$LN28@AddIntrigu:

; 3059 : 						{
; 3060 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238602[ebp], edx
	mov	ecx, DWORD PTR $T238602[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237884[ebp], eax
	lea	eax, DWORD PTR $T237884[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN27@AddIntrigu:

; 3061 : 						}
; 3062 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237885[ebp], eax
	lea	edx, DWORD PTR $T237885[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223628[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3063 : 
; 3064 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN");

	push	OFFSET ??_C@_0EL@BLEPLAOI@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237886[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2926[ebp], eax
	mov	edx, DWORD PTR tv2926[ebp]
	mov	DWORD PTR tv2553[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 39		; 00000027H
	mov	eax, DWORD PTR tv2553[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237886[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3065 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238606[ebp], ecx
	mov	eax, DWORD PTR $T238606[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237887[ebp], eax
	lea	edx, DWORD PTR $T237887[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3066 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	ecx, DWORD PTR _uiSpyIndex$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T238610[ebp], ecx
	mov	eax, DWORD PTR $T238610[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237888[ebp], eax
	lea	eax, DWORD PTR $T237888[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3067 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238614[ebp], edx
	mov	ecx, DWORD PTR $T238614[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237889[ebp], eax
	lea	eax, DWORD PTR $T237889[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3068 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	edx, DWORD PTR _kMessage$[ebp+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238618[ebp], edx
	mov	ecx, DWORD PTR $T238618[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237890[ebp], eax
	lea	eax, DWORD PTR $T237890[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3069 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237891[ebp], eax
	lea	edx, DWORD PTR $T237891[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3070 : 					}
; 3071 : 					else

	jmp	$LN26@AddIntrigu
$LN29@AddIntrigu:

; 3072 : 					{
; 3073 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN;

	mov	DWORD PTR _eNotification$223630[ebp], -112125243 ; f9511ac5H

; 3074 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN_S");

	push	OFFSET ??_C@_0EP@KIKIODDH@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237892[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2927[ebp], eax
	mov	edx, DWORD PTR tv2927[ebp]
	mov	DWORD PTR tv2555[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 40		; 00000028H
	mov	eax, DWORD PTR tv2555[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237892[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3075 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238622[ebp], ecx
	mov	ecx, DWORD PTR $T238622[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238626[ebp], eax
	mov	ecx, DWORD PTR $T238626[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@AddIntrigu

; 3076 : 						{
; 3077 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238630[ebp], edx
	mov	ecx, DWORD PTR $T238630[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237893[ebp], eax
	lea	eax, DWORD PTR $T237893[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3078 : 						}
; 3079 : 						else

	jmp	SHORT $LN24@AddIntrigu
$LN25@AddIntrigu:

; 3080 : 						{
; 3081 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238634[ebp], edx
	mov	ecx, DWORD PTR $T238634[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237894[ebp], eax
	lea	eax, DWORD PTR $T237894[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN24@AddIntrigu:

; 3082 : 						}
; 3083 : 
; 3084 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238638[ebp], edx
	mov	ecx, DWORD PTR $T238638[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[ebp+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238642[ebp], ecx
	mov	ecx, DWORD PTR $T238642[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN23@AddIntrigu

; 3085 : 						{
; 3086 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238646[ebp], eax
	mov	ecx, DWORD PTR $T238646[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237895[ebp], eax
	lea	ecx, DWORD PTR $T237895[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3087 : 						}
; 3088 : 						else

	jmp	SHORT $LN22@AddIntrigu
$LN23@AddIntrigu:

; 3089 : 						{
; 3090 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	eax, DWORD PTR _kMessage$[ebp+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238650[ebp], eax
	mov	ecx, DWORD PTR $T238650[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237896[ebp], eax
	lea	ecx, DWORD PTR $T237896[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSummary$223628[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN22@AddIntrigu:

; 3091 : 						}
; 3092 : 
; 3093 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN");

	push	OFFSET ??_C@_0EN@HNCDHIAA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	eax, DWORD PTR $T237897[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2928[ebp], eax
	mov	ecx, DWORD PTR tv2928[ebp]
	mov	DWORD PTR tv2557[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 41		; 00000029H
	mov	edx, DWORD PTR tv2557[ebp]
	push	edx
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237897[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3094 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238654[ebp], eax
	mov	edx, DWORD PTR $T238654[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237898[ebp], eax
	lea	ecx, DWORD PTR $T237898[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3095 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR _uiSpyIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR $T238658[ebp], eax
	mov	edx, DWORD PTR $T238658[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237899[ebp], eax
	lea	edx, DWORD PTR $T237899[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3096 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238662[ebp], ecx
	mov	ecx, DWORD PTR $T238662[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237900[ebp], eax
	lea	edx, DWORD PTR $T237900[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3097 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationDescriptionKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238666[ebp], ecx
	mov	ecx, DWORD PTR $T238666[ebp]
	call	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationDescriptionKey
	mov	DWORD PTR $T237901[ebp], eax
	lea	edx, DWORD PTR $T237901[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223629[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN26@AddIntrigu:

; 3098 : 					}
; 3099 : 				}
; 3100 : 				// targeting an unknown player
; 3101 : 				else

	jmp	$LN31@AddIntrigu
$LN30@AddIntrigu:

; 3102 : 				{
; 3103 : 					eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN;

	mov	DWORD PTR _eNotification$223630[ebp], 772849235 ; 2e10be53H

; 3104 : 
; 3105 : 					// if the spy wasn't high enough rank to know who was being attacked
; 3106 : 					if (kMessage.m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	DWORD PTR _kMessage$[ebp+8], 22		; 00000016H
	jne	$LN20@AddIntrigu

; 3107 : 					{
; 3108 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE_S");

	push	OFFSET ??_C@_0EE@OHDACGBL@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237902[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2929[ebp], eax
	mov	edx, DWORD PTR tv2929[ebp]
	mov	DWORD PTR tv2559[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 42		; 0000002aH
	mov	eax, DWORD PTR tv2559[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237902[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3109 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE");

	push	OFFSET ??_C@_0EC@PIJCKEOO@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237903[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2930[ebp], eax
	mov	edx, DWORD PTR tv2930[ebp]
	mov	DWORD PTR tv2561[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 43		; 0000002bH
	mov	eax, DWORD PTR tv2561[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237903[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3110 : 					}
; 3111 : 					else

	jmp	$LN19@AddIntrigu
$LN20@AddIntrigu:

; 3112 : 					{
; 3113 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN_S");

	push	OFFSET ??_C@_0EE@IDMMGNJA@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237904[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2931[ebp], eax
	mov	edx, DWORD PTR tv2931[ebp]
	mov	DWORD PTR tv2563[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 44		; 0000002cH
	mov	eax, DWORD PTR tv2563[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237904[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3114 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0EC@MJAADFOF@TXT_KEY_NOTIFICATION_INTRIGUE_SN@
	lea	ecx, DWORD PTR $T237905[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv2932[ebp], eax
	mov	edx, DWORD PTR tv2932[ebp]
	mov	DWORD PTR tv2565[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 45		; 0000002dH
	mov	eax, DWORD PTR tv2565[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 33		; 00000021H
	lea	ecx, DWORD PTR $T237905[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN19@AddIntrigu:

; 3115 : 					}
; 3116 : 
; 3117 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238670[ebp], ecx
	mov	ecx, DWORD PTR $T238670[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@AddIntrigu
	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238674[ebp], eax
	mov	ecx, DWORD PTR $T238674[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@AddIntrigu

; 3118 : 					{
; 3119 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238678[ebp], edx
	mov	ecx, DWORD PTR $T238678[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237906[ebp], eax
	lea	eax, DWORD PTR $T237906[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3120 : 					}
; 3121 : 					else

	jmp	SHORT $LN17@AddIntrigu
$LN18@AddIntrigu:

; 3122 : 					{
; 3123 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238682[ebp], edx
	mov	ecx, DWORD PTR $T238682[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237907[ebp], eax
	lea	eax, DWORD PTR $T237907[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN17@AddIntrigu:

; 3124 : 					}
; 3125 : 
; 3126 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238686[ebp], edx
	mov	ecx, DWORD PTR $T238686[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237908[ebp], eax
	lea	eax, DWORD PTR $T237908[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3127 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238690[ebp], edx
	mov	ecx, DWORD PTR $T238690[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237909[ebp], eax
	lea	ecx, DWORD PTR $T237909[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3128 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _kMessage$[ebp+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238694[ebp], eax
	mov	ecx, DWORD PTR $T238694[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T237910[ebp], eax
	lea	ecx, DWORD PTR $T237910[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223629[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN31@AddIntrigu:

; 3129 : 				}
; 3130 : 
; 3131 : 				pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	push	-1
	mov	eax, DWORD PTR _kMessage$[ebp+8]
	push	eax
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _eNotification$223630[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 3132 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 32		; 00000020H
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3133 : 			break;

	jmp	$LN100@AddIntrigu
$LN16@AddIntrigu:

; 3134 : 		case INTRIGUE_TYPE_CONSTRUCTING_WONDER:
; 3135 : 			{
; 3136 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER_S");

	push	OFFSET ??_C@_0DB@ELFPPEBP@TXT_KEY_NOTIFICATION_INTRIGUE_CO@
	lea	edx, DWORD PTR _strSummary$223711[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 46		; 0000002eH

; 3137 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238698[ebp], eax
	mov	ecx, DWORD PTR $T238698[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238702[ebp], edx
	mov	ecx, DWORD PTR $T238702[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@AddIntrigu

; 3138 : 				{
; 3139 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238706[ebp], ecx
	mov	ecx, DWORD PTR $T238706[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237911[ebp], eax
	lea	edx, DWORD PTR $T237911[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223711[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3140 : 				}
; 3141 : 				else

	jmp	SHORT $LN14@AddIntrigu
$LN15@AddIntrigu:

; 3142 : 				{
; 3143 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238710[ebp], ecx
	mov	ecx, DWORD PTR $T238710[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237912[ebp], eax
	lea	edx, DWORD PTR $T237912[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223711[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN14@AddIntrigu:

; 3144 : 				}
; 3145 : 				
; 3146 : 				if (kMessage.m_eBuilding != NO_BUILDING)

	cmp	DWORD PTR _kMessage$[ebp+12], -1
	je	SHORT $LN13@AddIntrigu

; 3147 : 				{
; 3148 : 					CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(kMessage.m_eBuilding);

	mov	ecx, DWORD PTR _kMessage$[ebp+12]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuildingInfo$223719[ebp], eax

; 3149 : 					CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3150 : 					if (pBuildingInfo)

	cmp	DWORD PTR _pBuildingInfo$223719[ebp], 0
	je	SHORT $LN12@AddIntrigu

; 3151 : 					{
; 3152 : 						strSummary << pBuildingInfo->GetTextKey();

	mov	ecx, DWORD PTR _pBuildingInfo$223719[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T237913[ebp], eax
	lea	edx, DWORD PTR $T237913[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223711[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN12@AddIntrigu:

; 3153 : 					}
; 3154 : 				}

	jmp	SHORT $LN11@AddIntrigu
$LN13@AddIntrigu:

; 3155 : 				else if (kMessage.m_eProject != NO_PROJECT)

	cmp	DWORD PTR _kMessage$[ebp+16], -1
	je	SHORT $LN11@AddIntrigu

; 3156 : 				{
; 3157 : 					CvProjectEntry* pProjectInfo = GC.getProjectInfo(kMessage.m_eProject);

	mov	ecx, DWORD PTR _kMessage$[ebp+16]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
	mov	DWORD PTR _pProjectInfo$223724[ebp], eax

; 3158 : 					CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3159 : 					if (pProjectInfo)

	cmp	DWORD PTR _pProjectInfo$223724[ebp], 0
	je	SHORT $LN11@AddIntrigu

; 3160 : 					{
; 3161 : 						strSummary << pProjectInfo->GetTextKey();

	mov	ecx, DWORD PTR _pProjectInfo$223724[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T237914[ebp], eax
	lea	edx, DWORD PTR $T237914[ebp]
	push	edx
	lea	eax, DWORD PTR _strSummary$223711[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN11@AddIntrigu:

; 3162 : 					}
; 3163 : 				}
; 3164 : 
; 3165 : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER");

	push	OFFSET ??_C@_0CP@FCCHEIJ@TXT_KEY_NOTIFICATION_INTRIGUE_CO@
	lea	ecx, DWORD PTR _strNotification$223727[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 47		; 0000002fH

; 3166 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238714[ebp], edx
	mov	ecx, DWORD PTR $T238714[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR $T237915[ebp], eax
	lea	eax, DWORD PTR $T237915[ebp]
	push	eax
	lea	ecx, DWORD PTR _strNotification$223727[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3167 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	edx, DWORD PTR _uiSpyIndex$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238718[ebp], edx
	mov	ecx, DWORD PTR $T238718[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	DWORD PTR $T237916[ebp], eax
	lea	ecx, DWORD PTR $T237916[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223727[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3168 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238722[ebp], eax
	mov	ecx, DWORD PTR $T238722[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@AddIntrigu
	mov	edx, DWORD PTR _kMessage$[ebp+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238726[ebp], edx
	mov	ecx, DWORD PTR $T238726[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@AddIntrigu

; 3169 : 				{
; 3170 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238730[ebp], ecx
	mov	ecx, DWORD PTR $T238730[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T237917[ebp], eax
	lea	edx, DWORD PTR $T237917[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223727[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3171 : 				}
; 3172 : 				else

	jmp	SHORT $LN7@AddIntrigu
$LN8@AddIntrigu:

; 3173 : 				{
; 3174 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[ebp+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238734[ebp], ecx
	mov	ecx, DWORD PTR $T238734[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T237918[ebp], eax
	lea	edx, DWORD PTR $T237918[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223727[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN7@AddIntrigu:

; 3175 : 				}
; 3176 : 
; 3177 : 				if (kMessage.m_eBuilding != NO_BUILDING)

	cmp	DWORD PTR _kMessage$[ebp+12], -1
	je	SHORT $LN6@AddIntrigu

; 3178 : 				{
; 3179 : 					CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(kMessage.m_eBuilding);

	mov	ecx, DWORD PTR _kMessage$[ebp+12]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuildingInfo$223737[ebp], eax

; 3180 : 					CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3181 : 					if (pBuildingInfo)

	cmp	DWORD PTR _pBuildingInfo$223737[ebp], 0
	je	SHORT $LN5@AddIntrigu

; 3182 : 					{
; 3183 : 						strNotification << pBuildingInfo->GetTextKey();

	mov	ecx, DWORD PTR _pBuildingInfo$223737[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T237919[ebp], eax
	lea	edx, DWORD PTR $T237919[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223727[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN5@AddIntrigu:

; 3184 : 					}
; 3185 : 				}

	jmp	SHORT $LN4@AddIntrigu
$LN6@AddIntrigu:

; 3186 : 				else if (kMessage.m_eProject != NO_PROJECT)

	cmp	DWORD PTR _kMessage$[ebp+16], -1
	je	SHORT $LN4@AddIntrigu

; 3187 : 				{
; 3188 : 					CvProjectEntry* pProjectInfo = GC.getProjectInfo(kMessage.m_eProject);

	mov	ecx, DWORD PTR _kMessage$[ebp+16]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
	mov	DWORD PTR _pProjectInfo$223742[ebp], eax

; 3189 : 					CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3190 : 					if (pProjectInfo)

	cmp	DWORD PTR _pProjectInfo$223742[ebp], 0
	je	SHORT $LN4@AddIntrigu

; 3191 : 					{
; 3192 : 						strNotification << pProjectInfo->GetTextKey();

	mov	ecx, DWORD PTR _pProjectInfo$223742[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T237920[ebp], eax
	lea	edx, DWORD PTR $T237920[ebp]
	push	edx
	lea	eax, DWORD PTR _strNotification$223727[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN4@AddIntrigu:

; 3193 : 					}
; 3194 : 				}				
; 3195 : 
; 3196 : 				if (pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN1@AddIntrigu

; 3197 : 				{
; 3198 : 					strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T237921[ebp], eax
	lea	ecx, DWORD PTR $T237921[ebp]
	push	ecx
	lea	edx, DWORD PTR _strNotification$223727[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN1@AddIntrigu:

; 3199 : 				}
; 3200 : 
; 3201 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_CONSTRUCTING_WONDER, strNotification.toUTF8(), strSummary.toUTF8(), kMessage.m_iCityX, kMessage.m_iCityY, -1);

	push	-1
	push	-1
	mov	eax, DWORD PTR _kMessage$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _kMessage$[ebp+28]
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223711[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223727[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	push	1527505427				; 5b0be213H
	mov	ecx, DWORD PTR _pNotifications$223441[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 3202 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 46		; 0000002eH
	lea	ecx, DWORD PTR _strNotification$223727[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strSummary$223711[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN100@AddIntrigu:

; 3203 : 			break;
; 3204 : 		}
; 3205 : 	}
; 3206 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	edx, DWORD PTR _kMessage$[ebp+36]
	mov	DWORD PTR $T238741[ebp], edx
	mov	ecx, DWORD PTR $T238741[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN113@AddIntrigu:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	1
$LN558@AddIntrigu:
	DD	$LN96@AddIntrigu
	DD	$LN72@AddIntrigu
	DD	$LN67@AddIntrigu
	DD	$LN62@AddIntrigu
	DD	$LN39@AddIntrigu
	DD	$LN16@AddIntrigu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$0:
	lea	ecx, DWORD PTR _kMessage$[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$1:
	lea	ecx, DWORD PTR _str$223435[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$2:
	lea	ecx, DWORD PTR _strSummary$223448[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$3:
	lea	ecx, DWORD PTR _strNotification$223449[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$4:
	lea	ecx, DWORD PTR $T237774[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$5:
	lea	ecx, DWORD PTR $T237777[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$6:
	lea	ecx, DWORD PTR $T237783[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$7:
	lea	ecx, DWORD PTR $T237786[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$8:
	lea	ecx, DWORD PTR $T237792[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$9:
	lea	ecx, DWORD PTR $T237797[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$10:
	lea	ecx, DWORD PTR _strSummary$223511[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$11:
	lea	ecx, DWORD PTR _strNotification$223512[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$12:
	lea	ecx, DWORD PTR $T237805[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$13:
	lea	ecx, DWORD PTR $T237808[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$14:
	lea	ecx, DWORD PTR _strSummary$223528[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$15:
	lea	ecx, DWORD PTR _strNotification$223529[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$16:
	lea	ecx, DWORD PTR $T237813[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$17:
	lea	ecx, DWORD PTR $T237816[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$18:
	lea	ecx, DWORD PTR _strSummary$223545[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$19:
	lea	ecx, DWORD PTR _strNotification$223546[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$20:
	lea	ecx, DWORD PTR $T237821[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$21:
	lea	ecx, DWORD PTR $T237825[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$22:
	lea	ecx, DWORD PTR $T237830[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$23:
	lea	ecx, DWORD PTR $T237833[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$24:
	lea	ecx, DWORD PTR $T237837[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$25:
	lea	ecx, DWORD PTR $T237841[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$26:
	lea	ecx, DWORD PTR $T237847[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$27:
	lea	ecx, DWORD PTR $T237852[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$28:
	lea	ecx, DWORD PTR $T237857[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$29:
	lea	ecx, DWORD PTR $T237858[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$30:
	lea	ecx, DWORD PTR $T237859[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$31:
	lea	ecx, DWORD PTR $T237860[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$32:
	lea	ecx, DWORD PTR _strSummary$223628[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$33:
	lea	ecx, DWORD PTR _strNotification$223629[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$34:
	lea	ecx, DWORD PTR $T237866[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$35:
	lea	ecx, DWORD PTR $T237870[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$36:
	lea	ecx, DWORD PTR $T237875[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$37:
	lea	ecx, DWORD PTR $T237878[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$38:
	lea	ecx, DWORD PTR $T237882[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$39:
	lea	ecx, DWORD PTR $T237886[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$40:
	lea	ecx, DWORD PTR $T237892[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$41:
	lea	ecx, DWORD PTR $T237897[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$42:
	lea	ecx, DWORD PTR $T237902[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$43:
	lea	ecx, DWORD PTR $T237903[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$44:
	lea	ecx, DWORD PTR $T237904[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$45:
	lea	ecx, DWORD PTR $T237905[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$46:
	lea	ecx, DWORD PTR _strSummary$223711[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$47:
	lea	ecx, DWORD PTR _strNotification$223727[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-5324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ENDP ; CvPlayerEspionage::AddIntrigueMessage
; Function compile flags: /Odtp
;	COMDAT ??1IntrigueNotificationMessage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T238761 = -4						; size = 4
??1IntrigueNotificationMessage@@QAE@XZ PROC		; IntrigueNotificationMessage::~IntrigueNotificationMessage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T238761[ebp], eax
	mov	ecx, DWORD PTR $T238761[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1IntrigueNotificationMessage@@QAE@XZ ENDP		; IntrigueNotificationMessage::~IntrigueNotificationMessage
_TEXT	ENDS
PUBLIC	??_C@_0CK@HMJONHPF@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@ ; `string'
PUBLIC	??_C@_0CC@KIPNCDJA@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@ ; `string'
PUBLIC	??_C@_0DF@FJAGFEK@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0DF@DEACPEEB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0EA@EBCOKAIA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0DO@PMJGKGOA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0DO@JBJOKGIO@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0DM@IMHJLEAF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ ; `string'
PUBLIC	??_C@_0DD@LAAOOGMM@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0DD@IBJMHHMH@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0DO@EPAJKMDB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0DM@MBJNNCLL@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0DM@KMJFNCNF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0DK@LLABCKGC@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ ; `string'
PUBLIC	??_C@_0CK@INDOPILN@TXT_KEY_INTRIGUE_BUILDING_AMPHIB@ ; `string'
PUBLIC	??_C@_0BP@GMOJOJGM@TXT_KEY_INTRIGUE_BUILDING_ARMY?$AA@ ; `string'
PUBLIC	??_C@_0CI@DHHHMCHD@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ ; `string'
PUBLIC	??_C@_0CK@FBJNBHPJ@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ ; `string'
PUBLIC	??_C@_0CG@ENGIGMEI@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ ; `string'
PUBLIC	?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z ; CvPlayerEspionage::GetIntrigueMessage
EXTRN	__imp_??0String@Localization@@QAE@ABV01@@Z:PROC
;	COMDAT ??_C@_0CK@HMJONHPF@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_0CK@HMJONHPF@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@ DB 'TXT_KEY_INTRIGUE'
	DB	'_CONSTRUCT_WONDER_WO_CITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KIPNCDJA@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@
CONST	SEGMENT
??_C@_0CC@KIPNCDJA@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@ DB 'TXT_KEY_INTRIGUE'
	DB	'_CONSTRUCT_WONDER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FJAGFEK@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0DF@FJAGFEK@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE_'
	DB	'SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DEACPEEB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0DF@DEACPEEB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EBCOKAIA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0EA@EBCOKAIA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PMJGKGOA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0DO@PMJGKGOA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@JBJOKGIO@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0DO@JBJOKGIO@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IMHJLEAF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
CONST	SEGMENT
??_C@_0DM@IMHJLEAF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LAAOOGMM@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DD@LAAOOGMM@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IBJMHHMH@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DD@IBJMHHMH@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@EPAJKMDB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DO@EPAJKMDB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@MBJNNCLL@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DM@MBJNNCLL@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KMJFNCNF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DM@KMJFNCNF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@LLABCKGC@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
CONST	SEGMENT
??_C@_0DK@LLABCKGC@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@ DB 'TXT_KEY_INTRIGUE'
	DB	'_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@INDOPILN@TXT_KEY_INTRIGUE_BUILDING_AMPHIB@
CONST	SEGMENT
??_C@_0CK@INDOPILN@TXT_KEY_INTRIGUE_BUILDING_AMPHIB@ DB 'TXT_KEY_INTRIGUE'
	DB	'_BUILDING_AMPHIBIOUS_ARMY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMOJOJGM@TXT_KEY_INTRIGUE_BUILDING_ARMY?$AA@
CONST	SEGMENT
??_C@_0BP@GMOJOJGM@TXT_KEY_INTRIGUE_BUILDING_ARMY?$AA@ DB 'TXT_KEY_INTRIG'
	DB	'UE_BUILDING_ARMY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DHHHMCHD@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
CONST	SEGMENT
??_C@_0CI@DHHHMCHD@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ DB 'TXT_KEY_INTRIGUE'
	DB	'_PLOTTING_AGAINST_KNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FBJNBHPJ@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
CONST	SEGMENT
??_C@_0CK@FBJNBHPJ@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ DB 'TXT_KEY_INTRIGUE'
	DB	'_PLOTTING_AGAINST_UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ENGIGMEI@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
CONST	SEGMENT
??_C@_0CG@ENGIGMEI@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@ DB 'TXT_KEY_INTRIGUE'
	DB	'_PLOTTING_AGAINST_YOU', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z DD 019930522H
	DD	015H
	DD	FLAT:__unwindtable$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$8
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$14
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$16
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$17
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$18
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$19
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$20
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
_TEXT	SEGMENT
tv1529 = -2632						; size = 4
tv1898 = -2628						; size = 4
tv1527 = -2624						; size = 4
tv1897 = -2620						; size = 4
tv1525 = -2616						; size = 4
tv1896 = -2612						; size = 4
tv1523 = -2608						; size = 4
tv1895 = -2604						; size = 4
tv1521 = -2600						; size = 4
tv1894 = -2596						; size = 4
tv1519 = -2592						; size = 4
tv1893 = -2588						; size = 4
tv1517 = -2584						; size = 4
tv1892 = -2580						; size = 4
tv1515 = -2576						; size = 4
tv1891 = -2572						; size = 4
tv1513 = -2568						; size = 4
tv1890 = -2564						; size = 4
tv1511 = -2560						; size = 4
tv1889 = -2556						; size = 4
tv1509 = -2552						; size = 4
tv1888 = -2548						; size = 4
tv1507 = -2544						; size = 4
tv1855 = -2540						; size = 4
tv1505 = -2536						; size = 4
tv1854 = -2532						; size = 4
tv1503 = -2528						; size = 4
tv1853 = -2524						; size = 4
tv1501 = -2520						; size = 4
tv1852 = -2516						; size = 4
tv1499 = -2512						; size = 4
tv1851 = -2508						; size = 4
tv1497 = -2504						; size = 4
tv1463 = -2500						; size = 4
tv1495 = -2496						; size = 4
tv1465 = -2492						; size = 4
tv1493 = -2488						; size = 4
tv73 = -2484						; size = 4
tv144 = -2480						; size = 4
tv1569 = -2476						; size = 4
tv1578 = -2472						; size = 4
_this$ = -2468						; size = 4
$T239581 = -2464					; size = 4
$T239574 = -2460					; size = 4
$T239567 = -2456					; size = 4
$T239563 = -2452					; size = 4
$T239559 = -2448					; size = 4
$T239555 = -2444					; size = 4
$T239551 = -2440					; size = 4
$T239547 = -2436					; size = 4
$T239543 = -2432					; size = 4
$T239539 = -2428					; size = 4
$T239535 = -2424					; size = 4
$T239531 = -2420					; size = 4
$T239527 = -2416					; size = 4
$T239523 = -2412					; size = 4
$T239519 = -2408					; size = 4
$T239515 = -2404					; size = 4
$T239508 = -2400					; size = 4
$T239504 = -2396					; size = 4
$T239500 = -2392					; size = 4
$T239496 = -2388					; size = 4
$T239492 = -2384					; size = 4
$T239488 = -2380					; size = 4
$T239484 = -2376					; size = 4
$T239480 = -2372					; size = 4
$T239476 = -2368					; size = 4
$T239472 = -2364					; size = 4
$T239468 = -2360					; size = 4
$T239464 = -2356					; size = 4
$T239460 = -2352					; size = 4
$T239456 = -2348					; size = 4
$T239452 = -2344					; size = 4
$T239448 = -2340					; size = 4
$T239444 = -2336					; size = 4
$T239440 = -2332					; size = 4
$T239436 = -2328					; size = 4
$T239432 = -2324					; size = 4
$T239428 = -2320					; size = 4
$T239424 = -2316					; size = 4
$T239420 = -2312					; size = 4
$T239410 = -2308					; size = 4
$T239406 = -2304					; size = 4
$T239402 = -2300					; size = 4
$T239398 = -2296					; size = 4
$T239394 = -2292					; size = 4
$T239390 = -2288					; size = 4
$T239386 = -2284					; size = 4
$T239382 = -2280					; size = 4
$T239378 = -2276					; size = 4
$T239374 = -2272					; size = 4
$T239370 = -2268					; size = 4
$T239366 = -2264					; size = 4
$T239362 = -2260					; size = 4
$T239358 = -2256					; size = 4
$T239354 = -2252					; size = 4
$T239345 = -2248					; size = 4
$T239341 = -2244					; size = 4
$T239337 = -2240					; size = 4
$T239333 = -2236					; size = 4
$T239329 = -2232					; size = 4
$T239325 = -2228					; size = 4
$T239321 = -2224					; size = 4
$T239317 = -2220					; size = 4
$T239310 = -2216					; size = 4
$T239306 = -2212					; size = 4
$T239302 = -2208					; size = 4
$T239298 = -2204					; size = 4
$T239294 = -2200					; size = 4
$T239290 = -2196					; size = 4
$T239286 = -2192					; size = 4
$T239282 = -2188					; size = 4
$T239278 = -2184					; size = 4
$T239274 = -2180					; size = 4
$T239270 = -2176					; size = 4
$T239266 = -2172					; size = 4
$T239262 = -2168					; size = 4
$T239258 = -2164					; size = 4
$T239254 = -2160					; size = 4
$T239250 = -2156					; size = 4
$T239246 = -2152					; size = 4
$T239242 = -2148					; size = 4
$T239238 = -2144					; size = 4
$T239234 = -2140					; size = 4
$T239230 = -2136					; size = 4
$T239226 = -2132					; size = 4
$T239222 = -2128					; size = 4
$T239212 = -2124					; size = 4
$T239208 = -2120					; size = 4
$T239204 = -2116					; size = 4
$T239200 = -2112					; size = 4
$T239196 = -2108					; size = 4
$T239192 = -2104					; size = 4
$T239188 = -2100					; size = 4
$T239184 = -2096					; size = 4
$T239180 = -2092					; size = 4
$T239176 = -2088					; size = 4
$T239172 = -2084					; size = 4
$T239168 = -2080					; size = 4
$T239164 = -2076					; size = 4
$T239160 = -2072					; size = 4
$T239156 = -2068					; size = 4
$T239147 = -2064					; size = 4
$T239143 = -2060					; size = 4
$T239139 = -2056					; size = 4
$T239135 = -2052					; size = 4
$T239131 = -2048					; size = 4
$T239127 = -2044					; size = 4
$T239123 = -2040					; size = 4
$T239119 = -2036					; size = 4
$T239115 = -2032					; size = 4
$T239111 = -2028					; size = 4
$T239107 = -2024					; size = 4
$T239103 = -2020					; size = 4
$T239099 = -2016					; size = 4
$T239095 = -2012					; size = 4
$T239091 = -2008					; size = 4
$T239087 = -2004					; size = 4
$T239083 = -2000					; size = 4
$T239079 = -1996					; size = 4
$T239075 = -1992					; size = 4
$T239071 = -1988					; size = 4
$T239067 = -1984					; size = 4
$T239063 = -1980					; size = 4
$T239059 = -1976					; size = 4
$T239055 = -1972					; size = 4
$T239051 = -1968					; size = 4
$T239047 = -1964					; size = 4
$T239043 = -1960					; size = 4
$T239039 = -1956					; size = 4
$T239035 = -1952					; size = 4
$T239031 = -1948					; size = 4
$T239027 = -1944					; size = 4
$T239023 = -1940					; size = 4
$T239019 = -1936					; size = 4
$T239015 = -1932					; size = 4
$T239011 = -1928					; size = 4
$T239007 = -1924					; size = 4
$T239000 = -1920					; size = 4
$T238996 = -1916					; size = 4
$T238992 = -1912					; size = 4
$T238988 = -1908					; size = 4
$T238984 = -1904					; size = 4
$T238980 = -1900					; size = 4
$T238976 = -1896					; size = 4
$T238972 = -1892					; size = 4
$T238963 = -1888					; size = 4
$T238951 = -1880					; size = 4
$T238950 = -1876					; size = 4
$T238917 = -1872					; size = 4
$T238904 = -1868					; size = 4
$T238900 = -1864					; size = 4
$T238893 = -1860					; size = 4
$T238889 = -1853					; size = 1
$T238885 = -1852					; size = 4
$T238881 = -1845					; size = 1
_iMapY$238949 = -1844					; size = 4
_iMapX$238948 = -1840					; size = 4
$T238874 = -1836					; size = 4
$T238870 = -1832					; size = 4
$T238866 = -1828					; size = 4
$T238856 = -1824					; size = 4
$T238831 = -1820					; size = 4
$T238829 = -1816					; size = 4
$T238828 = -1812					; size = 4
$T238827 = -1808					; size = 4
$T238826 = -1804					; size = 4
$T238825 = -1800					; size = 4
$T238824 = -1796					; size = 80
$T238823 = -1716					; size = 80
$T238822 = -1636					; size = 4
$T238821 = -1632					; size = 4
$T238820 = -1628					; size = 80
$T238819 = -1548					; size = 80
$T238818 = -1468					; size = 4
$T238817 = -1464					; size = 4
$T238816 = -1460					; size = 4
$T238815 = -1456					; size = 4
$T238814 = -1452					; size = 80
$T238813 = -1372					; size = 4
$T238812 = -1368					; size = 4
$T238811 = -1364					; size = 4
$T238810 = -1360					; size = 4
$T238809 = -1356					; size = 80
$T238808 = -1276					; size = 4
$T238807 = -1272					; size = 4
$T238806 = -1268					; size = 80
$T238805 = -1188					; size = 4
$T238804 = -1184					; size = 4
$T238803 = -1180					; size = 4
$T238802 = -1176					; size = 80
$T238801 = -1096					; size = 4
$T238800 = -1092					; size = 4
$T238799 = -1088					; size = 80
$T238798 = -1008					; size = 80
$T238797 = -928						; size = 4
$T238796 = -924						; size = 4
$T238795 = -920						; size = 4
$T238794 = -916						; size = 4
$T238793 = -912						; size = 80
$T238792 = -832						; size = 4
$T238791 = -828						; size = 4
$T238790 = -824						; size = 4
$T238789 = -820						; size = 4
$T238788 = -816						; size = 80
$T238787 = -736						; size = 4
$T238786 = -732						; size = 4
$T238785 = -728						; size = 80
$T238784 = -648						; size = 4
$T238783 = -644						; size = 4
$T238782 = -640						; size = 4
$T238781 = -636						; size = 80
$T238780 = -556						; size = 4
$T238779 = -552						; size = 4
$T238778 = -548						; size = 80
$T238777 = -468						; size = 4
$T238776 = -464						; size = 4
$T238775 = -460						; size = 80
$T238774 = -380						; size = 4
$T238773 = -376						; size = 4
$T238772 = -372						; size = 4
$T238771 = -368						; size = 4
$T238770 = -364						; size = 80
$T238769 = -284						; size = 4
$T238768 = -280						; size = 4
$T238767 = -276						; size = 80
$T238766 = -196						; size = 4
$T238765 = -192						; size = 4
$T238764 = -188						; size = 80
_pProjectInfo$223924 = -108				; size = 4
_pBuildingInfo$223919 = -104				; size = 4
_pPlot$223760 = -100					; size = 4
_pCity$ = -96						; size = 4
_strResult$ = -92					; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_uiIndex$ = 12						; size = 4
?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z PROC ; CvPlayerEspionage::GetIntrigueMessage, COMDAT
; _this$ = ecx

; 3210 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2620				; 00000a3cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T238831[ebp], 0

; 3211 : 	CvAssertMsg(uiIndex < m_aIntrigueNotificationMessages.size(), "uiIndex out of bounds");
; 3212 : 	if(uiIndex >= m_aIntrigueNotificationMessages.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1280				; 00000500H
	mov	DWORD PTR $T238856[ebp], eax
	mov	ecx, DWORD PTR $T238856[ebp]
	mov	edx, DWORD PTR $T238856[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _uiIndex$[ebp], eax
	jb	SHORT $LN81@GetIntrigu

; 3213 : 	{
; 3214 : 		return "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T238831[ebp]
	or	edx, 1
	mov	DWORD PTR $T238831[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN82@GetIntrigu
$LN81@GetIntrigu:

; 3215 : 	}
; 3216 : 
; 3217 : 	Localization::String strResult = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 3218 : 
; 3219 : 	// get the city if it exists
; 3220 : 	CvCity* pCity = NULL;

	mov	DWORD PTR _pCity$[ebp], 0

; 3221 : 	if(m_aIntrigueNotificationMessages[uiIndex].m_iCityX != -1 && m_aIntrigueNotificationMessages[uiIndex].m_iCityY)

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+28], -1
	je	$LN149@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+32], 0
	je	$LN149@GetIntrigu

; 3222 : 	{
; 3223 : 		CvPlot* pPlot = GC.getMap().plot(m_aIntrigueNotificationMessages[uiIndex].m_iCityX, m_aIntrigueNotificationMessages[uiIndex].m_iCityY);

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T238866[ebp], eax
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T238870[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T238874[ebp], ecx
	mov	edx, DWORD PTR $T238866[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR $T238951[ebp], eax
	mov	ecx, DWORD PTR $T238870[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T238950[ebp], edx
	cmp	DWORD PTR $T238950[ebp], -2147483647	; 80000001H
	je	SHORT $LN118@GetIntrigu
	cmp	DWORD PTR $T238951[ebp], -2147483647	; 80000001H
	jne	SHORT $LN119@GetIntrigu
$LN118@GetIntrigu:
	mov	DWORD PTR _pPlot$223760[ebp], 0
	jmp	$LN120@GetIntrigu
$LN119@GetIntrigu:
	mov	eax, DWORD PTR $T238874[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T238881[ebp], cl
	mov	edx, DWORD PTR $T238874[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T238885[ebp], eax
	movzx	ecx, BYTE PTR $T238881[ebp]
	push	ecx
	mov	edx, DWORD PTR $T238885[ebp]
	push	edx
	mov	eax, DWORD PTR $T238950[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$238948[ebp], eax
	mov	ecx, DWORD PTR $T238874[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T238889[ebp], dl
	mov	eax, DWORD PTR $T238874[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T238893[ebp], ecx
	movzx	edx, BYTE PTR $T238889[ebp]
	push	edx
	mov	eax, DWORD PTR $T238893[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238951[ebp]
	push	ecx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$238949[ebp], eax
	cmp	DWORD PTR _iMapX$238948[ebp], 0
	jl	SHORT $LN134@GetIntrigu
	mov	edx, DWORD PTR $T238874[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T238900[ebp], eax
	mov	ecx, DWORD PTR _iMapX$238948[ebp]
	cmp	ecx, DWORD PTR $T238900[ebp]
	jge	SHORT $LN134@GetIntrigu
	cmp	DWORD PTR _iMapY$238949[ebp], 0
	jl	SHORT $LN134@GetIntrigu
	mov	edx, DWORD PTR $T238874[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T238904[ebp], eax
	mov	ecx, DWORD PTR _iMapY$238949[ebp]
	cmp	ecx, DWORD PTR $T238904[ebp]
	jge	SHORT $LN134@GetIntrigu
	mov	DWORD PTR tv1578[ebp], 1
	jmp	SHORT $LN132@GetIntrigu
$LN134@GetIntrigu:
	mov	DWORD PTR tv1578[ebp], 0
$LN132@GetIntrigu:
	cmp	DWORD PTR tv1578[ebp], 0
	je	SHORT $LN122@GetIntrigu
	mov	edx, DWORD PTR $T238874[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T238917[ebp], eax
	mov	ecx, DWORD PTR _iMapY$238949[ebp]
	imul	ecx, DWORD PTR $T238917[ebp]
	add	ecx, DWORD PTR _iMapX$238948[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T238874[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv1569[ebp], ecx
	jmp	SHORT $LN123@GetIntrigu
$LN122@GetIntrigu:
	mov	DWORD PTR tv1569[ebp], 0
$LN123@GetIntrigu:
	mov	eax, DWORD PTR tv1569[ebp]
	mov	DWORD PTR _pPlot$223760[ebp], eax
$LN120@GetIntrigu:

; 3224 : 		if(pPlot)

	cmp	DWORD PTR _pPlot$223760[ebp], 0
	je	SHORT $LN149@GetIntrigu

; 3225 : 		{
; 3226 : 			pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$223760[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[ebp], eax

; 3227 : 		}
; 3228 : 	}
; 3229 : 
; 3230 : 	switch(m_aIntrigueNotificationMessages[uiIndex].m_iIntrigueType)

$LN149@GetIntrigu:
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	mov	ecx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR tv144[ebp], ecx
	cmp	DWORD PTR tv144[ebp], 5
	ja	$LN77@GetIntrigu
	mov	edx, DWORD PTR tv144[ebp]
	jmp	DWORD PTR $LN466@GetIntrigu[edx*4]
$LN76@GetIntrigu:

; 3231 : 	{
; 3232 : 	case INTRIGUE_TYPE_DECEPTION:
; 3233 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())  // if we found intrigue related to us

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T238963[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T238972[ebp], ecx
	mov	edx, DWORD PTR $T238963[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR $T238972[ebp]
	jne	$LN171@GetIntrigu

; 3234 : 		{
; 3235 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_YOU");

	push	OFFSET ??_C@_0CG@ENGIGMEI@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
	lea	ecx, DWORD PTR $T238764[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv73[ebp], eax
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv1493[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv1493[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238764[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3236 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T238976[ebp], ecx
	mov	ecx, DWORD PTR $T238976[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN74@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T238980[ebp], eax
	mov	edx, DWORD PTR $T238980[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238984[ebp], eax
	mov	ecx, DWORD PTR $T238984[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN74@GetIntrigu

; 3237 : 			{
; 3238 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T238988[ebp], edx
	mov	ecx, DWORD PTR $T238988[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T238992[ebp], edx
	mov	ecx, DWORD PTR $T238992[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238765[ebp], eax
	lea	eax, DWORD PTR $T238765[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3239 : 			}
; 3240 : 			else

	jmp	SHORT $LN73@GetIntrigu
$LN74@GetIntrigu:

; 3241 : 			{
; 3242 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T238996[ebp], edx
	mov	ecx, DWORD PTR $T238996[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239000[ebp], edx
	mov	ecx, DWORD PTR $T239000[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238766[ebp], eax
	lea	eax, DWORD PTR $T238766[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN73@GetIntrigu:

; 3243 : 			}

	jmp	$LN72@GetIntrigu

; 3244 : 		}
; 3245 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == NO_PLAYER)  // if we don't know who the intrigue information is about

$LN171@GetIntrigu:
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	cmp	DWORD PTR [ecx+edx+8], -1
	jne	$LN71@GetIntrigu

; 3246 : 		{
; 3247 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0CK@FBJNBHPJ@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
	lea	edx, DWORD PTR $T238767[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1465[ebp], eax
	mov	eax, DWORD PTR tv1465[ebp]
	mov	DWORD PTR tv1495[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv1495[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238767[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3248 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239007[ebp], edx
	mov	ecx, DWORD PTR $T239007[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN70@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239011[ebp], ecx
	mov	eax, DWORD PTR $T239011[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239015[ebp], ecx
	mov	ecx, DWORD PTR $T239015[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN70@GetIntrigu

; 3249 : 			{
; 3250 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239019[ebp], eax
	mov	edx, DWORD PTR $T239019[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239023[ebp], eax
	mov	ecx, DWORD PTR $T239023[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238768[ebp], eax
	lea	ecx, DWORD PTR $T238768[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3251 : 			}
; 3252 : 			else

	jmp	SHORT $LN69@GetIntrigu
$LN70@GetIntrigu:

; 3253 : 			{
; 3254 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239027[ebp], eax
	mov	edx, DWORD PTR $T239027[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239031[ebp], eax
	mov	ecx, DWORD PTR $T239031[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238769[ebp], eax
	lea	ecx, DWORD PTR $T238769[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN69@GetIntrigu:

; 3255 : 			}
; 3256 : 		}
; 3257 : 		else // if we found intrigue related to another player

	jmp	$LN72@GetIntrigu
$LN71@GetIntrigu:

; 3258 : 		{
; 3259 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_KNOWN");

	push	OFFSET ??_C@_0CI@DHHHMCHD@TXT_KEY_INTRIGUE_PLOTTING_AGAINS@
	lea	eax, DWORD PTR $T238770[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1463[ebp], eax
	mov	ecx, DWORD PTR tv1463[ebp]
	mov	DWORD PTR tv1497[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv1497[ebp]
	push	edx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238770[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3260 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239035[ebp], eax
	mov	ecx, DWORD PTR $T239035[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN67@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239039[ebp], edx
	mov	ecx, DWORD PTR $T239039[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239043[ebp], edx
	mov	ecx, DWORD PTR $T239043[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@GetIntrigu

; 3261 : 			{
; 3262 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239047[ebp], ecx
	mov	eax, DWORD PTR $T239047[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239051[ebp], ecx
	mov	ecx, DWORD PTR $T239051[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238771[ebp], eax
	lea	edx, DWORD PTR $T238771[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3263 : 			}
; 3264 : 			else

	jmp	SHORT $LN66@GetIntrigu
$LN67@GetIntrigu:

; 3265 : 			{
; 3266 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239055[ebp], ecx
	mov	eax, DWORD PTR $T239055[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239059[ebp], ecx
	mov	ecx, DWORD PTR $T239059[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238772[ebp], eax
	lea	edx, DWORD PTR $T238772[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN66@GetIntrigu:

; 3267 : 			}
; 3268 : 
; 3269 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239063[ebp], ecx
	mov	ecx, DWORD PTR $T239063[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN65@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239067[ebp], eax
	mov	edx, DWORD PTR $T239067[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239071[ebp], eax
	mov	ecx, DWORD PTR $T239071[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN65@GetIntrigu

; 3270 : 			{
; 3271 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239075[ebp], edx
	mov	ecx, DWORD PTR $T239075[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239079[ebp], edx
	mov	ecx, DWORD PTR $T239079[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238773[ebp], eax
	lea	eax, DWORD PTR $T238773[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3272 : 			}
; 3273 : 			else

	jmp	SHORT $LN72@GetIntrigu
$LN65@GetIntrigu:

; 3274 : 			{
; 3275 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239083[ebp], edx
	mov	ecx, DWORD PTR $T239083[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239087[ebp], edx
	mov	ecx, DWORD PTR $T239087[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238774[ebp], eax
	lea	eax, DWORD PTR $T238774[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN72@GetIntrigu:

; 3276 : 			}
; 3277 : 		}
; 3278 : 		break;

	jmp	$LN77@GetIntrigu
$LN63@GetIntrigu:

; 3279 : 	case INTRIGUE_TYPE_BUILDING_ARMY:
; 3280 : 		strResult = Localization::Lookup("TXT_KEY_INTRIGUE_BUILDING_ARMY");

	push	OFFSET ??_C@_0BP@GMOJOJGM@TXT_KEY_INTRIGUE_BUILDING_ARMY?$AA@
	lea	edx, DWORD PTR $T238775[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1851[ebp], eax
	mov	eax, DWORD PTR tv1851[ebp]
	mov	DWORD PTR tv1499[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv1499[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238775[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3281 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239091[ebp], edx
	mov	ecx, DWORD PTR $T239091[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN62@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239095[ebp], ecx
	mov	eax, DWORD PTR $T239095[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239099[ebp], ecx
	mov	ecx, DWORD PTR $T239099[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN62@GetIntrigu

; 3282 : 		{
; 3283 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239103[ebp], eax
	mov	edx, DWORD PTR $T239103[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239107[ebp], eax
	mov	ecx, DWORD PTR $T239107[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238776[ebp], eax
	lea	ecx, DWORD PTR $T238776[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3284 : 		}
; 3285 : 		else

	jmp	SHORT $LN61@GetIntrigu
$LN62@GetIntrigu:

; 3286 : 		{
; 3287 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239111[ebp], eax
	mov	edx, DWORD PTR $T239111[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239115[ebp], eax
	mov	ecx, DWORD PTR $T239115[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238777[ebp], eax
	lea	ecx, DWORD PTR $T238777[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN61@GetIntrigu:

; 3288 : 		}
; 3289 : 		break;

	jmp	$LN77@GetIntrigu
$LN60@GetIntrigu:

; 3290 : 	case INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY:
; 3291 : 		strResult = Localization::Lookup("TXT_KEY_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY");

	push	OFFSET ??_C@_0CK@INDOPILN@TXT_KEY_INTRIGUE_BUILDING_AMPHIB@
	lea	eax, DWORD PTR $T238778[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1852[ebp], eax
	mov	ecx, DWORD PTR tv1852[ebp]
	mov	DWORD PTR tv1501[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR tv1501[ebp]
	push	edx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238778[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3292 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239119[ebp], eax
	mov	ecx, DWORD PTR $T239119[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN59@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239123[ebp], edx
	mov	ecx, DWORD PTR $T239123[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239127[ebp], edx
	mov	ecx, DWORD PTR $T239127[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@GetIntrigu

; 3293 : 		{
; 3294 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239131[ebp], ecx
	mov	eax, DWORD PTR $T239131[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239135[ebp], ecx
	mov	ecx, DWORD PTR $T239135[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238779[ebp], eax
	lea	edx, DWORD PTR $T238779[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3295 : 		}
; 3296 : 		else

	jmp	SHORT $LN58@GetIntrigu
$LN59@GetIntrigu:

; 3297 : 		{
; 3298 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239139[ebp], ecx
	mov	eax, DWORD PTR $T239139[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239143[ebp], ecx
	mov	ecx, DWORD PTR $T239143[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238780[ebp], eax
	lea	edx, DWORD PTR $T238780[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN58@GetIntrigu:

; 3299 : 		}
; 3300 : 		break;

	jmp	$LN77@GetIntrigu
$LN57@GetIntrigu:

; 3301 : 	case INTRIGUE_TYPE_ARMY_SNEAK_ATTACK:
; 3302 : 		// player is target
; 3303 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239147[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T239156[ebp], edx
	mov	eax, DWORD PTR $T239147[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR $T239156[ebp]
	jne	$LN277@GetIntrigu

; 3304 : 		{
; 3305 : 			if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN55@GetIntrigu

; 3306 : 			{
; 3307 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN");

	push	OFFSET ??_C@_0DK@LLABCKGC@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	edx, DWORD PTR $T238781[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1853[ebp], eax
	mov	eax, DWORD PTR tv1853[ebp]
	mov	DWORD PTR tv1503[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv1503[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238781[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3308 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239160[ebp], edx
	mov	ecx, DWORD PTR $T239160[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN54@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239164[ebp], ecx
	mov	eax, DWORD PTR $T239164[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239168[ebp], ecx
	mov	ecx, DWORD PTR $T239168[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN54@GetIntrigu

; 3309 : 				{
; 3310 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239172[ebp], eax
	mov	edx, DWORD PTR $T239172[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239176[ebp], eax
	mov	ecx, DWORD PTR $T239176[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238782[ebp], eax
	lea	ecx, DWORD PTR $T238782[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3311 : 				}
; 3312 : 				else

	jmp	SHORT $LN53@GetIntrigu
$LN54@GetIntrigu:

; 3313 : 				{
; 3314 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239180[ebp], eax
	mov	edx, DWORD PTR $T239180[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239184[ebp], eax
	mov	ecx, DWORD PTR $T239184[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238783[ebp], eax
	lea	ecx, DWORD PTR $T238783[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN53@GetIntrigu:

; 3315 : 				}
; 3316 : 				strResult << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T238784[ebp], eax
	lea	eax, DWORD PTR $T238784[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3317 : 			}
; 3318 : 			else

	jmp	$LN52@GetIntrigu
$LN55@GetIntrigu:

; 3319 : 			{
; 3320 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN");

	push	OFFSET ??_C@_0DM@KMJFNCNF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	edx, DWORD PTR $T238785[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1854[ebp], eax
	mov	eax, DWORD PTR tv1854[ebp]
	mov	DWORD PTR tv1505[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv1505[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238785[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3321 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239188[ebp], edx
	mov	ecx, DWORD PTR $T239188[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN51@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239192[ebp], ecx
	mov	eax, DWORD PTR $T239192[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239196[ebp], ecx
	mov	ecx, DWORD PTR $T239196[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN51@GetIntrigu

; 3322 : 				{
; 3323 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239200[ebp], eax
	mov	edx, DWORD PTR $T239200[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239204[ebp], eax
	mov	ecx, DWORD PTR $T239204[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238786[ebp], eax
	lea	ecx, DWORD PTR $T238786[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3324 : 				}
; 3325 : 				else

	jmp	SHORT $LN52@GetIntrigu
$LN51@GetIntrigu:

; 3326 : 				{
; 3327 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239208[ebp], eax
	mov	edx, DWORD PTR $T239208[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239212[ebp], eax
	mov	ecx, DWORD PTR $T239212[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238787[ebp], eax
	lea	ecx, DWORD PTR $T238787[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN52@GetIntrigu:

; 3328 : 				}
; 3329 : 			}

	jmp	$LN49@GetIntrigu

; 3330 : 		}
; 3331 : 		// other player is target
; 3332 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != NO_PLAYER && m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != MAX_MAJOR_CIVS)

$LN277@GetIntrigu:
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+8], -1
	je	$LN327@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+8], 22		; 00000016H
	je	$LN327@GetIntrigu

; 3333 : 		{
; 3334 : 			if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN47@GetIntrigu

; 3335 : 			{
; 3336 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN");

	push	OFFSET ??_C@_0DM@MBJNNCLL@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	eax, DWORD PTR $T238788[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1855[ebp], eax
	mov	ecx, DWORD PTR tv1855[ebp]
	mov	DWORD PTR tv1507[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv1507[ebp]
	push	edx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238788[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3337 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239222[ebp], eax
	mov	ecx, DWORD PTR $T239222[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN46@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239226[ebp], edx
	mov	ecx, DWORD PTR $T239226[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239230[ebp], edx
	mov	ecx, DWORD PTR $T239230[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN46@GetIntrigu

; 3338 : 				{
; 3339 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239234[ebp], ecx
	mov	eax, DWORD PTR $T239234[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239238[ebp], ecx
	mov	ecx, DWORD PTR $T239238[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238789[ebp], eax
	lea	edx, DWORD PTR $T238789[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3340 : 				}
; 3341 : 				else

	jmp	SHORT $LN45@GetIntrigu
$LN46@GetIntrigu:

; 3342 : 				{
; 3343 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239242[ebp], ecx
	mov	eax, DWORD PTR $T239242[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239246[ebp], ecx
	mov	ecx, DWORD PTR $T239246[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238790[ebp], eax
	lea	edx, DWORD PTR $T238790[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN45@GetIntrigu:

; 3344 : 				}
; 3345 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239250[ebp], ecx
	mov	eax, DWORD PTR $T239250[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239254[ebp], ecx
	mov	ecx, DWORD PTR $T239254[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T238791[ebp], eax
	lea	edx, DWORD PTR $T238791[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3346 : 				strResult << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T238792[ebp], eax
	lea	ecx, DWORD PTR $T238792[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3347 : 			}
; 3348 : 			else

	jmp	$LN44@GetIntrigu
$LN47@GetIntrigu:

; 3349 : 			{
; 3350 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN");

	push	OFFSET ??_C@_0DO@EPAJKMDB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	eax, DWORD PTR $T238793[ebp]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1888[ebp], eax
	mov	ecx, DWORD PTR tv1888[ebp]
	mov	DWORD PTR tv1509[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR tv1509[ebp]
	push	edx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238793[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3351 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239258[ebp], eax
	mov	ecx, DWORD PTR $T239258[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN43@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239262[ebp], edx
	mov	ecx, DWORD PTR $T239262[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239266[ebp], edx
	mov	ecx, DWORD PTR $T239266[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@GetIntrigu

; 3352 : 				{
; 3353 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239270[ebp], ecx
	mov	eax, DWORD PTR $T239270[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239274[ebp], ecx
	mov	ecx, DWORD PTR $T239274[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238794[ebp], eax
	lea	edx, DWORD PTR $T238794[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3354 : 				}
; 3355 : 				else

	jmp	SHORT $LN42@GetIntrigu
$LN43@GetIntrigu:

; 3356 : 				{
; 3357 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239278[ebp], ecx
	mov	eax, DWORD PTR $T239278[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239282[ebp], ecx
	mov	ecx, DWORD PTR $T239282[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238795[ebp], eax
	lea	edx, DWORD PTR $T238795[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN42@GetIntrigu:

; 3358 : 				}
; 3359 : 
; 3360 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239286[ebp], ecx
	mov	ecx, DWORD PTR $T239286[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN41@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239290[ebp], eax
	mov	edx, DWORD PTR $T239290[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239294[ebp], eax
	mov	ecx, DWORD PTR $T239294[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@GetIntrigu

; 3361 : 				{
; 3362 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239298[ebp], edx
	mov	ecx, DWORD PTR $T239298[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239302[ebp], edx
	mov	ecx, DWORD PTR $T239302[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238796[ebp], eax
	lea	eax, DWORD PTR $T238796[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3363 : 				}
; 3364 : 				else

	jmp	SHORT $LN44@GetIntrigu
$LN41@GetIntrigu:

; 3365 : 				{
; 3366 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239306[ebp], edx
	mov	ecx, DWORD PTR $T239306[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239310[ebp], edx
	mov	ecx, DWORD PTR $T239310[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238797[ebp], eax
	lea	eax, DWORD PTR $T238797[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN44@GetIntrigu:

; 3367 : 				}
; 3368 : 			}
; 3369 : 		}
; 3370 : 		// unknown player is target
; 3371 : 		else

	jmp	$LN49@GetIntrigu

; 3372 : 		{
; 3373 : 			if (m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == MAX_MAJOR_CIVS)

$LN327@GetIntrigu:
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	cmp	DWORD PTR [ecx+edx+8], 22		; 00000016H
	jne	SHORT $LN38@GetIntrigu

; 3374 : 			{
; 3375 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE");

	push	OFFSET ??_C@_0DD@IBJMHHMH@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	edx, DWORD PTR $T238798[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1889[ebp], eax
	mov	eax, DWORD PTR tv1889[ebp]
	mov	DWORD PTR tv1511[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR tv1511[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238798[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3376 : 			}
; 3377 : 			else

	jmp	SHORT $LN37@GetIntrigu
$LN38@GetIntrigu:

; 3378 : 			{
; 3379 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0DD@LAAOOGMM@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AR@
	lea	edx, DWORD PTR $T238799[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1890[ebp], eax
	mov	eax, DWORD PTR tv1890[ebp]
	mov	DWORD PTR tv1513[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR tv1513[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238799[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN37@GetIntrigu:

; 3380 : 			}
; 3381 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239317[ebp], edx
	mov	ecx, DWORD PTR $T239317[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN36@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239321[ebp], ecx
	mov	eax, DWORD PTR $T239321[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239325[ebp], ecx
	mov	ecx, DWORD PTR $T239325[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN36@GetIntrigu

; 3382 : 			{
; 3383 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239329[ebp], eax
	mov	edx, DWORD PTR $T239329[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239333[ebp], eax
	mov	ecx, DWORD PTR $T239333[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238800[ebp], eax
	lea	ecx, DWORD PTR $T238800[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3384 : 			}
; 3385 : 			else

	jmp	SHORT $LN49@GetIntrigu
$LN36@GetIntrigu:

; 3386 : 			{
; 3387 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239337[ebp], eax
	mov	edx, DWORD PTR $T239337[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239341[ebp], eax
	mov	ecx, DWORD PTR $T239341[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238801[ebp], eax
	lea	ecx, DWORD PTR $T238801[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN49@GetIntrigu:

; 3388 : 			}
; 3389 : 		}
; 3390 : 		break;

	jmp	$LN77@GetIntrigu
$LN34@GetIntrigu:

; 3391 : 	case INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK:
; 3392 : 		// player is target
; 3393 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239345[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1296]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T239354[ebp], ecx
	mov	edx, DWORD PTR $T239345[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR $T239354[ebp]
	jne	$LN377@GetIntrigu

; 3394 : 		{
; 3395 : 			if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN32@GetIntrigu

; 3396 : 			{
; 3397 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN");

	push	OFFSET ??_C@_0DM@IMHJLEAF@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	ecx, DWORD PTR $T238802[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1891[ebp], eax
	mov	edx, DWORD PTR tv1891[ebp]
	mov	DWORD PTR tv1515[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv1515[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238802[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3398 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239358[ebp], ecx
	mov	ecx, DWORD PTR $T239358[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN31@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239362[ebp], eax
	mov	edx, DWORD PTR $T239362[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239366[ebp], eax
	mov	ecx, DWORD PTR $T239366[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@GetIntrigu

; 3399 : 				{
; 3400 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239370[ebp], edx
	mov	ecx, DWORD PTR $T239370[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239374[ebp], edx
	mov	ecx, DWORD PTR $T239374[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238803[ebp], eax
	lea	eax, DWORD PTR $T238803[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3401 : 				}
; 3402 : 				else

	jmp	SHORT $LN30@GetIntrigu
$LN31@GetIntrigu:

; 3403 : 				{
; 3404 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239378[ebp], edx
	mov	ecx, DWORD PTR $T239378[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239382[ebp], edx
	mov	ecx, DWORD PTR $T239382[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238804[ebp], eax
	lea	eax, DWORD PTR $T238804[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN30@GetIntrigu:

; 3405 : 				}
; 3406 : 				strResult << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T238805[ebp], eax
	lea	edx, DWORD PTR $T238805[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3407 : 			}
; 3408 : 			else

	jmp	$LN29@GetIntrigu
$LN32@GetIntrigu:

; 3409 : 			{
; 3410 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN");

	push	OFFSET ??_C@_0DO@JBJOKGIO@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	ecx, DWORD PTR $T238806[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1892[ebp], eax
	mov	edx, DWORD PTR tv1892[ebp]
	mov	DWORD PTR tv1517[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR tv1517[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238806[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3411 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239386[ebp], ecx
	mov	ecx, DWORD PTR $T239386[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN28@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239390[ebp], eax
	mov	edx, DWORD PTR $T239390[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239394[ebp], eax
	mov	ecx, DWORD PTR $T239394[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN28@GetIntrigu

; 3412 : 				{
; 3413 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239398[ebp], edx
	mov	ecx, DWORD PTR $T239398[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239402[ebp], edx
	mov	ecx, DWORD PTR $T239402[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238807[ebp], eax
	lea	eax, DWORD PTR $T238807[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3414 : 				}
; 3415 : 				else

	jmp	SHORT $LN29@GetIntrigu
$LN28@GetIntrigu:

; 3416 : 				{
; 3417 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239406[ebp], edx
	mov	ecx, DWORD PTR $T239406[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239410[ebp], edx
	mov	ecx, DWORD PTR $T239410[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238808[ebp], eax
	lea	eax, DWORD PTR $T238808[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN29@GetIntrigu:

; 3418 : 				}
; 3419 : 			}

	jmp	$LN26@GetIntrigu

; 3420 : 		}
; 3421 : 		// other player is target
; 3422 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != NO_PLAYER && m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != MAX_MAJOR_CIVS)

$LN377@GetIntrigu:
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	cmp	DWORD PTR [ecx+edx+8], -1
	je	$LN427@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	cmp	DWORD PTR [ecx+edx+8], 22		; 00000016H
	je	$LN427@GetIntrigu

; 3423 : 		{
; 3424 : 			if(pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	$LN24@GetIntrigu

; 3425 : 			{
; 3426 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN");

	push	OFFSET ??_C@_0DO@PMJGKGOA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	edx, DWORD PTR $T238809[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1893[ebp], eax
	mov	eax, DWORD PTR tv1893[ebp]
	mov	DWORD PTR tv1519[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR tv1519[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238809[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3427 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239420[ebp], edx
	mov	ecx, DWORD PTR $T239420[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN23@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239424[ebp], ecx
	mov	eax, DWORD PTR $T239424[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239428[ebp], ecx
	mov	ecx, DWORD PTR $T239428[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN23@GetIntrigu

; 3428 : 				{
; 3429 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239432[ebp], eax
	mov	edx, DWORD PTR $T239432[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239436[ebp], eax
	mov	ecx, DWORD PTR $T239436[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238810[ebp], eax
	lea	ecx, DWORD PTR $T238810[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3430 : 				}
; 3431 : 				else

	jmp	SHORT $LN22@GetIntrigu
$LN23@GetIntrigu:

; 3432 : 				{
; 3433 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239440[ebp], eax
	mov	edx, DWORD PTR $T239440[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239444[ebp], eax
	mov	ecx, DWORD PTR $T239444[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238811[ebp], eax
	lea	ecx, DWORD PTR $T238811[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN22@GetIntrigu:

; 3434 : 				}
; 3435 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239448[ebp], eax
	mov	edx, DWORD PTR $T239448[ebp]
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239452[ebp], eax
	mov	ecx, DWORD PTR $T239452[ebp]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	mov	DWORD PTR $T238812[ebp], eax
	lea	ecx, DWORD PTR $T238812[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3436 : 				strResult << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T238813[ebp], eax
	lea	eax, DWORD PTR $T238813[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3437 : 			}
; 3438 : 			else

	jmp	$LN21@GetIntrigu
$LN24@GetIntrigu:

; 3439 : 			{
; 3440 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN");

	push	OFFSET ??_C@_0EA@EBCOKAIA@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	edx, DWORD PTR $T238814[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1894[ebp], eax
	mov	eax, DWORD PTR tv1894[ebp]
	mov	DWORD PTR tv1521[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv1521[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238814[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3441 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239456[ebp], edx
	mov	ecx, DWORD PTR $T239456[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN20@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239460[ebp], ecx
	mov	eax, DWORD PTR $T239460[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239464[ebp], ecx
	mov	ecx, DWORD PTR $T239464[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@GetIntrigu

; 3442 : 				{
; 3443 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239468[ebp], eax
	mov	edx, DWORD PTR $T239468[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239472[ebp], eax
	mov	ecx, DWORD PTR $T239472[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238815[ebp], eax
	lea	ecx, DWORD PTR $T238815[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3444 : 				}
; 3445 : 				else

	jmp	SHORT $LN19@GetIntrigu
$LN20@GetIntrigu:

; 3446 : 				{
; 3447 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239476[ebp], eax
	mov	edx, DWORD PTR $T239476[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239480[ebp], eax
	mov	ecx, DWORD PTR $T239480[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238816[ebp], eax
	lea	ecx, DWORD PTR $T238816[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN19@GetIntrigu:

; 3448 : 				}
; 3449 : 
; 3450 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239484[ebp], eax
	mov	ecx, DWORD PTR $T239484[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	$LN18@GetIntrigu
	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239488[ebp], edx
	mov	ecx, DWORD PTR $T239488[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239492[ebp], edx
	mov	ecx, DWORD PTR $T239492[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@GetIntrigu

; 3451 : 				{
; 3452 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239496[ebp], ecx
	mov	eax, DWORD PTR $T239496[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239500[ebp], ecx
	mov	ecx, DWORD PTR $T239500[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238817[ebp], eax
	lea	edx, DWORD PTR $T238817[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3453 : 				}
; 3454 : 				else

	jmp	SHORT $LN21@GetIntrigu
$LN18@GetIntrigu:

; 3455 : 				{
; 3456 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();

	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239504[ebp], ecx
	mov	eax, DWORD PTR $T239504[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239508[ebp], ecx
	mov	ecx, DWORD PTR $T239508[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238818[ebp], eax
	lea	edx, DWORD PTR $T238818[ebp]
	push	edx
	lea	eax, DWORD PTR _strResult$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN21@GetIntrigu:

; 3457 : 				}
; 3458 : 			}
; 3459 : 		}
; 3460 : 		// unknown player is target
; 3461 : 		else

	jmp	$LN26@GetIntrigu

; 3462 : 		{
; 3463 : 			if (m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == MAX_MAJOR_CIVS)

$LN427@GetIntrigu:
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	cmp	DWORD PTR [eax+ecx+8], 22		; 00000016H
	jne	SHORT $LN15@GetIntrigu

; 3464 : 			{
; 3465 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE");

	push	OFFSET ??_C@_0DF@DEACPEEB@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	ecx, DWORD PTR $T238819[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1895[ebp], eax
	mov	edx, DWORD PTR tv1895[ebp]
	mov	DWORD PTR tv1523[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	eax, DWORD PTR tv1523[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238819[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3466 : 			}
; 3467 : 			else

	jmp	SHORT $LN14@GetIntrigu
$LN15@GetIntrigu:

; 3468 : 			{
; 3469 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN");

	push	OFFSET ??_C@_0DF@FJAGFEK@TXT_KEY_INTRIGUE_SNEAK_ATTACK_AM@
	lea	ecx, DWORD PTR $T238820[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1896[ebp], eax
	mov	edx, DWORD PTR tv1896[ebp]
	mov	DWORD PTR tv1525[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	eax, DWORD PTR tv1525[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238820[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN14@GetIntrigu:

; 3470 : 			}
; 3471 : 
; 3472 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239515[ebp], ecx
	mov	ecx, DWORD PTR $T239515[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	edx, al
	test	edx, edx
	je	$LN13@GetIntrigu
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239519[ebp], eax
	mov	edx, DWORD PTR $T239519[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239523[ebp], eax
	mov	ecx, DWORD PTR $T239523[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@GetIntrigu

; 3473 : 			{
; 3474 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239527[ebp], edx
	mov	ecx, DWORD PTR $T239527[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239531[ebp], edx
	mov	ecx, DWORD PTR $T239531[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238821[ebp], eax
	lea	eax, DWORD PTR $T238821[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3475 : 			}
; 3476 : 			else

	jmp	SHORT $LN26@GetIntrigu
$LN13@GetIntrigu:

; 3477 : 			{
; 3478 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edx, DWORD PTR _uiIndex$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239535[ebp], edx
	mov	ecx, DWORD PTR $T239535[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239539[ebp], edx
	mov	ecx, DWORD PTR $T239539[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238822[ebp], eax
	lea	eax, DWORD PTR $T238822[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN26@GetIntrigu:

; 3479 : 			}
; 3480 : 		}
; 3481 : 		break;

	jmp	$LN77@GetIntrigu
$LN11@GetIntrigu:

; 3482 : 	case INTRIGUE_TYPE_CONSTRUCTING_WONDER:
; 3483 : 		if (pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN10@GetIntrigu

; 3484 : 		{
; 3485 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_CONSTRUCT_WONDER");

	push	OFFSET ??_C@_0CC@KIPNCDJA@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@
	lea	edx, DWORD PTR $T238823[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1897[ebp], eax
	mov	eax, DWORD PTR tv1897[ebp]
	mov	DWORD PTR tv1527[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	ecx, DWORD PTR tv1527[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238823[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3486 : 		}
; 3487 : 		else

	jmp	SHORT $LN9@GetIntrigu
$LN10@GetIntrigu:

; 3488 : 		{
; 3489 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_CONSTRUCT_WONDER_WO_CITY");

	push	OFFSET ??_C@_0CK@HMJONHPF@TXT_KEY_INTRIGUE_CONSTRUCT_WONDE@
	lea	edx, DWORD PTR $T238824[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv1898[ebp], eax
	mov	eax, DWORD PTR tv1898[ebp]
	mov	DWORD PTR tv1529[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	ecx, DWORD PTR tv1529[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T238824[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN9@GetIntrigu:

; 3490 : 		}
; 3491 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239543[ebp], edx
	mov	ecx, DWORD PTR $T239543[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	$LN8@GetIntrigu
	mov	ecx, DWORD PTR _uiIndex$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239547[ebp], ecx
	mov	eax, DWORD PTR $T239547[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239551[ebp], ecx
	mov	ecx, DWORD PTR $T239551[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@GetIntrigu

; 3492 : 		{
; 3493 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239555[ebp], eax
	mov	edx, DWORD PTR $T239555[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239559[ebp], eax
	mov	ecx, DWORD PTR $T239559[ebp]
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	mov	DWORD PTR $T238825[ebp], eax
	lea	ecx, DWORD PTR $T238825[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3494 : 		}
; 3495 : 		else

	jmp	SHORT $LN457@GetIntrigu
$LN8@GetIntrigu:

; 3496 : 		{
; 3497 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239563[ebp], eax
	mov	edx, DWORD PTR $T239563[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T239567[ebp], eax
	mov	ecx, DWORD PTR $T239567[ebp]
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	mov	DWORD PTR $T238826[ebp], eax
	lea	ecx, DWORD PTR $T238826[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 3498 : 		}
; 3499 : 		if (m_aIntrigueNotificationMessages[uiIndex].m_eBuilding != NO_BUILDING)

$LN457@GetIntrigu:
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+12], -1
	je	SHORT $LN461@GetIntrigu

; 3500 : 		{
; 3501 : 			CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(m_aIntrigueNotificationMessages[uiIndex].m_eBuilding);

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239574[ebp], eax
	mov	edx, DWORD PTR $T239574[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuildingInfo$223919[ebp], eax

; 3502 : 			CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3503 : 			if (pBuildingInfo)

	cmp	DWORD PTR _pBuildingInfo$223919[ebp], 0
	je	SHORT $LN5@GetIntrigu

; 3504 : 			{
; 3505 : 				strResult << pBuildingInfo->GetTextKey();

	mov	ecx, DWORD PTR _pBuildingInfo$223919[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T238827[ebp], eax
	lea	ecx, DWORD PTR $T238827[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN5@GetIntrigu:

; 3506 : 			}
; 3507 : 		}

	jmp	SHORT $LN4@GetIntrigu

; 3508 : 		else if (m_aIntrigueNotificationMessages[uiIndex].m_eProject != NO_PROJECT)

$LN461@GetIntrigu:
	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	cmp	DWORD PTR [edx+eax+16], -1
	je	SHORT $LN4@GetIntrigu

; 3509 : 		{
; 3510 : 			CvProjectEntry* pProjectInfo = GC.getProjectInfo(m_aIntrigueNotificationMessages[uiIndex].m_eProject);

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239581[ebp], eax
	mov	edx, DWORD PTR $T239581[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
	mov	DWORD PTR _pProjectInfo$223924[ebp], eax

; 3511 : 			CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3512 : 			if (pProjectInfo)

	cmp	DWORD PTR _pProjectInfo$223924[ebp], 0
	je	SHORT $LN4@GetIntrigu

; 3513 : 			{
; 3514 : 				strResult << pProjectInfo->GetTextKey();

	mov	ecx, DWORD PTR _pProjectInfo$223924[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	mov	DWORD PTR $T238828[ebp], eax
	lea	ecx, DWORD PTR $T238828[ebp]
	push	ecx
	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN4@GetIntrigu:

; 3515 : 			}
; 3516 : 		}
; 3517 : 
; 3518 : 		if (pCity)

	cmp	DWORD PTR _pCity$[ebp], 0
	je	SHORT $LN77@GetIntrigu

; 3519 : 		{
; 3520 : 			strResult << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	mov	DWORD PTR $T238829[ebp], eax
	lea	eax, DWORD PTR $T238829[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResult$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
$LN77@GetIntrigu:

; 3521 : 		}
; 3522 : 		break;
; 3523 : 	}
; 3524 : 
; 3525 : 	return strResult;

	lea	edx, DWORD PTR _strResult$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T238831[ebp]
	or	eax, 1
	mov	DWORD PTR $T238831[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strResult$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN82@GetIntrigu:

; 3526 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN466@GetIntrigu:
	DD	$LN76@GetIntrigu
	DD	$LN63@GetIntrigu
	DD	$LN60@GetIntrigu
	DD	$LN57@GetIntrigu
	DD	$LN34@GetIntrigu
	DD	$LN11@GetIntrigu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$0:
	mov	eax, DWORD PTR $T238831[ebp]
	and	eax, 1
	je	$LN85@GetIntrigu
	and	DWORD PTR $T238831[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN85@GetIntrigu:
	ret	0
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$1:
	lea	ecx, DWORD PTR _strResult$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$2:
	lea	ecx, DWORD PTR $T238764[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$3:
	lea	ecx, DWORD PTR $T238767[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$4:
	lea	ecx, DWORD PTR $T238770[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$5:
	lea	ecx, DWORD PTR $T238775[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$6:
	lea	ecx, DWORD PTR $T238778[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$7:
	lea	ecx, DWORD PTR $T238781[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$8:
	lea	ecx, DWORD PTR $T238785[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$9:
	lea	ecx, DWORD PTR $T238788[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$10:
	lea	ecx, DWORD PTR $T238793[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$11:
	lea	ecx, DWORD PTR $T238798[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$12:
	lea	ecx, DWORD PTR $T238799[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$13:
	lea	ecx, DWORD PTR $T238802[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$14:
	lea	ecx, DWORD PTR $T238806[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$15:
	lea	ecx, DWORD PTR $T238809[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$16:
	lea	ecx, DWORD PTR $T238814[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$17:
	lea	ecx, DWORD PTR $T238819[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$18:
	lea	ecx, DWORD PTR $T238820[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$19:
	lea	ecx, DWORD PTR $T238823[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$20:
	lea	ecx, DWORD PTR $T238824[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2624]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z ENDP ; CvPlayerEspionage::GetIntrigueMessage
PUBLIC	?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ; CvPlayerEspionage::GetRecentIntrigueInfo
PUBLIC	?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::HasRecentIntrigueAbout
; Function compile flags: /Odtp
;	COMDAT ?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pMessage$ = -4						; size = 4
_eTargetPlayer$ = 8					; size = 4
?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::HasRecentIntrigueAbout, COMDAT
; _this$ = ecx

; 3530 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3531 : 	IntrigueNotificationMessage* pMessage = GetRecentIntrigueInfo(eTargetPlayer);

	mov	eax, DWORD PTR _eTargetPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ; CvPlayerEspionage::GetRecentIntrigueInfo
	mov	DWORD PTR _pMessage$[ebp], eax

; 3532 : 	if(pMessage && pMessage->m_eSourcePlayer != NO_PLAYER && pMessage->m_iIntrigueType != NUM_INTRIGUE_TYPES)

	cmp	DWORD PTR _pMessage$[ebp], 0
	je	SHORT $LN2@HasRecentI
	mov	ecx, DWORD PTR _pMessage$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN2@HasRecentI
	mov	edx, DWORD PTR _pMessage$[ebp]
	cmp	DWORD PTR [edx+20], 6
	je	SHORT $LN2@HasRecentI

; 3533 : 	{
; 3534 : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@HasRecentI

; 3535 : 	}
; 3536 : 	else

	jmp	SHORT $LN3@HasRecentI
$LN2@HasRecentI:

; 3537 : 	{
; 3538 : 		return false;

	xor	al, al
$LN3@HasRecentI:

; 3539 : 	}
; 3540 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::HasRecentIntrigueAbout
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T239610 = -16						; size = 4
$T239606 = -12						; size = 4
$T239596 = -8						; size = 4
_ui$223940 = -4						; size = 4
_eTargetPlayer$ = 8					; size = 4
?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z PROC ; CvPlayerEspionage::GetRecentIntrigueInfo, COMDAT
; _this$ = ecx

; 3544 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3545 : 	/// GetRecentIntriguePlotter: returns the player id of whoever is currently plotting against this player
; 3546 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223940[ebp], 0
	jmp	SHORT $LN6@GetRecentI
$LN5@GetRecentI:
	mov	eax, DWORD PTR _ui$223940[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223940[ebp], eax
$LN6@GetRecentI:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T239596[ebp], ecx
	mov	edx, DWORD PTR $T239596[ebp]
	mov	eax, DWORD PTR $T239596[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$223940[ebp], eax
	jae	SHORT $LN4@GetRecentI

; 3547 : 	{
; 3548 : 		// if we've already shared this information, don't count it
; 3549 : 		if(m_aIntrigueNotificationMessages[ui].m_bShared)

	mov	edx, DWORD PTR _ui$223940[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	movzx	edx, BYTE PTR [ecx+edx+64]
	test	edx, edx
	je	SHORT $LN13@GetRecentI

; 3550 : 		{
; 3551 : 			continue;

	jmp	SHORT $LN5@GetRecentI

; 3552 : 		}
; 3553 : 
; 3554 : 		// if the message isn't about the target, ignore
; 3555 : 		if(m_aIntrigueNotificationMessages[ui].m_eTargetPlayer != eTargetPlayer)

$LN13@GetRecentI:
	mov	eax, DWORD PTR _ui$223940[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	mov	eax, DWORD PTR [edx+eax+8]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN2@GetRecentI

; 3556 : 		{
; 3557 : 			continue;

	jmp	SHORT $LN5@GetRecentI
$LN2@GetRecentI:

; 3558 : 		}
; 3559 : 
; 3560 : 		// if the message is too long ago, ignore
; 3561 : 		if(m_aIntrigueNotificationMessages[ui].m_iTurnNum < (GC.getGame().getGameTurn() - iIntrigueTurnsValid))  // todo: make 5 an xml global

	mov	ecx, DWORD PTR _ui$223940[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1284]
	mov	DWORD PTR $T239606[ebp], ecx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239610[ebp], eax
	mov	ecx, DWORD PTR $T239610[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	sub	eax, 5
	mov	ecx, DWORD PTR $T239606[ebp]
	cmp	DWORD PTR [ecx+24], eax
	jge	SHORT $LN19@GetRecentI

; 3562 : 		{
; 3563 : 			continue;

	jmp	$LN5@GetRecentI

; 3564 : 		}
; 3565 : 
; 3566 : 		return &(m_aIntrigueNotificationMessages[ui]);

$LN19@GetRecentI:
	mov	eax, DWORD PTR _ui$223940[ebp]
	imul	eax, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+1284]
	jmp	SHORT $LN7@GetRecentI

; 3567 : 	}

	jmp	$LN5@GetRecentI
$LN4@GetRecentI:

; 3568 : 
; 3569 : 	return NULL;

	xor	eax, eax
$LN7@GetRecentI:

; 3570 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::GetRecentIntrigueInfo
_TEXT	ENDS
PUBLIC	?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z ; CvPlayerEspionage::HasSharedIntrigue
; Function compile flags: /Odtp
;	COMDAT ?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T239639 = -24						; size = 4
$T239635 = -20						; size = 4
$T239631 = -16						; size = 4
$T239619 = -12						; size = 4
_pMessage$223957 = -8					; size = 4
_ui$223953 = -4						; size = 4
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
_eIntrigueType$ = 16					; size = 4
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z PROC ; CvPlayerEspionage::HasSharedIntrigue, COMDAT
; _this$ = ecx

; 3574 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 3575 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223953[ebp], 0
	jmp	SHORT $LN9@HasSharedI
$LN8@HasSharedI:
	mov	eax, DWORD PTR _ui$223953[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223953[ebp], eax
$LN9@HasSharedI:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T239619[ebp], ecx
	mov	edx, DWORD PTR $T239619[ebp]
	mov	eax, DWORD PTR $T239619[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$223953[ebp], eax
	jae	$LN7@HasSharedI

; 3576 : 	{
; 3577 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);

	mov	edx, DWORD PTR _ui$223953[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR _pMessage$223957[ebp], edx

; 3578 : 
; 3579 : 		// if we HAVE NOT shared this information, don't count it
; 3580 : 		if(!pMessage->m_bShared)

	mov	ecx, DWORD PTR _pMessage$223957[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	jne	SHORT $LN18@HasSharedI

; 3581 : 		{
; 3582 : 			continue;

	jmp	SHORT $LN8@HasSharedI

; 3583 : 		}
; 3584 : 
; 3585 : 		// if we did not discover the message, we cannot share the intrigue
; 3586 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

$LN18@HasSharedI:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T239631[ebp], edx
	mov	eax, DWORD PTR _pMessage$223957[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR $T239631[ebp]
	je	SHORT $LN5@HasSharedI

; 3587 : 		{
; 3588 : 			continue;

	jmp	SHORT $LN8@HasSharedI
$LN5@HasSharedI:

; 3589 : 		}
; 3590 : 
; 3591 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	edx, DWORD PTR _pMessage$223957[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN4@HasSharedI

; 3592 : 		{
; 3593 : 			continue;

	jmp	SHORT $LN8@HasSharedI
$LN4@HasSharedI:

; 3594 : 		}
; 3595 : 
; 3596 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	mov	ecx, DWORD PTR _pMessage$223957[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _eSourcePlayer$[ebp]
	je	SHORT $LN3@HasSharedI

; 3597 : 		{
; 3598 : 			continue;

	jmp	$LN8@HasSharedI
$LN3@HasSharedI:

; 3599 : 		}
; 3600 : 
; 3601 : 		if(pMessage->m_iIntrigueType != eIntrigueType)

	mov	eax, DWORD PTR _pMessage$223957[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _eIntrigueType$[ebp]
	je	SHORT $LN2@HasSharedI

; 3602 : 		{
; 3603 : 			continue;

	jmp	$LN8@HasSharedI
$LN2@HasSharedI:

; 3604 : 		}
; 3605 : 
; 3606 : 		// has this intrigue been shared the last 30 turns?
; 3607 : 		if((GC.getGame().getGameTurn() - m_aIntrigueNotificationMessages[ui].m_iTurnNum) > 30)

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239635[ebp], edx
	mov	eax, DWORD PTR _ui$223953[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1284]
	mov	DWORD PTR $T239639[ebp], eax
	mov	ecx, DWORD PTR $T239635[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	edx, DWORD PTR $T239639[ebp]
	sub	eax, DWORD PTR [edx+24]
	cmp	eax, 30					; 0000001eH
	jle	SHORT $LN1@HasSharedI

; 3608 : 		{
; 3609 : 			continue;

	jmp	$LN8@HasSharedI
$LN1@HasSharedI:

; 3610 : 		}
; 3611 : 
; 3612 : 		return true;

	mov	al, 1
	jmp	SHORT $LN10@HasSharedI

; 3613 : 	}

	jmp	$LN8@HasSharedI
$LN7@HasSharedI:

; 3614 : 
; 3615 : 	return false;

	xor	al, al
$LN10@HasSharedI:

; 3616 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z ENDP ; CvPlayerEspionage::HasSharedIntrigue
_TEXT	ENDS
PUBLIC	?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z ; CvPlayerEspionage::HasSharedIntrigue
; Function compile flags: /Odtp
;	COMDAT ?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T239657 = -16						; size = 4
$T239645 = -12						; size = 4
_pMessage$223973 = -8					; size = 4
_ui$223969 = -4						; size = 4
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z PROC ; CvPlayerEspionage::HasSharedIntrigue, COMDAT
; _this$ = ecx

; 3620 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3621 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223969[ebp], 0
	jmp	SHORT $LN7@HasSharedI@2
$LN6@HasSharedI@2:
	mov	eax, DWORD PTR _ui$223969[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223969[ebp], eax
$LN7@HasSharedI@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T239645[ebp], ecx
	mov	edx, DWORD PTR $T239645[ebp]
	mov	eax, DWORD PTR $T239645[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$223969[ebp], eax
	jae	SHORT $LN5@HasSharedI@2

; 3622 : 	{
; 3623 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);

	mov	edx, DWORD PTR _ui$223969[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR _pMessage$223973[ebp], edx

; 3624 : 
; 3625 : 		// if we HAVE NOT shared this information, don't count it
; 3626 : 		if(!pMessage->m_bShared)

	mov	ecx, DWORD PTR _pMessage$223973[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	jne	SHORT $LN16@HasSharedI@2

; 3627 : 		{
; 3628 : 			continue;

	jmp	SHORT $LN6@HasSharedI@2

; 3629 : 		}
; 3630 : 
; 3631 : 		// can't share intrigue we didn't discover
; 3632 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

$LN16@HasSharedI@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T239657[ebp], edx
	mov	eax, DWORD PTR _pMessage$223973[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR $T239657[ebp]
	je	SHORT $LN3@HasSharedI@2

; 3633 : 		{
; 3634 : 			continue;

	jmp	SHORT $LN6@HasSharedI@2
$LN3@HasSharedI@2:

; 3635 : 		}
; 3636 : 
; 3637 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	edx, DWORD PTR _pMessage$223973[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN2@HasSharedI@2

; 3638 : 		{
; 3639 : 			continue;

	jmp	SHORT $LN6@HasSharedI@2
$LN2@HasSharedI@2:

; 3640 : 		}
; 3641 : 
; 3642 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	mov	ecx, DWORD PTR _pMessage$223973[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _eSourcePlayer$[ebp]
	je	SHORT $LN1@HasSharedI@2

; 3643 : 		{
; 3644 : 			continue;

	jmp	$LN6@HasSharedI@2
$LN1@HasSharedI@2:

; 3645 : 		}
; 3646 : 
; 3647 : 		return true;

	mov	al, 1
	jmp	SHORT $LN8@HasSharedI@2

; 3648 : 	}

	jmp	$LN6@HasSharedI@2
$LN5@HasSharedI@2:

; 3649 : 
; 3650 : 	return false;

	xor	al, al
$LN8@HasSharedI@2:

; 3651 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z ENDP ; CvPlayerEspionage::HasSharedIntrigue
_TEXT	ENDS
PUBLIC	?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z ; CvPlayerEspionage::MarkRecentIntrigueAsShared
; Function compile flags: /Odtp
;	COMDAT ?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T239675 = -20						; size = 4
$T239663 = -16						; size = 4
_pMessage$223989 = -12					; size = 4
_ui$223985 = -8						; size = 4
_iNumShared$ = -4					; size = 4
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
_eIntrigueType$ = 16					; size = 4
?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z PROC ; CvPlayerEspionage::MarkRecentIntrigueAsShared, COMDAT
; _this$ = ecx

; 3656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3657 : 	int iNumShared = 0;

	mov	DWORD PTR _iNumShared$[ebp], 0

; 3658 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$223985[ebp], 0
	jmp	SHORT $LN8@MarkRecent
$LN7@MarkRecent:
	mov	eax, DWORD PTR _ui$223985[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$223985[ebp], eax
$LN8@MarkRecent:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T239663[ebp], ecx
	mov	edx, DWORD PTR $T239663[ebp]
	mov	eax, DWORD PTR $T239663[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$223985[ebp], eax
	jae	SHORT $LN6@MarkRecent

; 3659 : 	{
; 3660 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);

	mov	edx, DWORD PTR _ui$223985[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+1284]
	mov	DWORD PTR _pMessage$223989[ebp], edx

; 3661 : 		if(pMessage->m_bShared)

	mov	ecx, DWORD PTR _pMessage$223989[ebp]
	movzx	edx, BYTE PTR [ecx+64]
	test	edx, edx
	je	SHORT $LN17@MarkRecent

; 3662 : 		{
; 3663 : 			continue;

	jmp	SHORT $LN7@MarkRecent

; 3664 : 		}
; 3665 : 
; 3666 : 		// can't share intrigue messages we don't own
; 3667 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

$LN17@MarkRecent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T239675[ebp], edx
	mov	eax, DWORD PTR _pMessage$223989[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR $T239675[ebp]
	je	SHORT $LN4@MarkRecent

; 3668 : 		{
; 3669 : 			continue;

	jmp	SHORT $LN7@MarkRecent
$LN4@MarkRecent:

; 3670 : 		}
; 3671 : 
; 3672 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	edx, DWORD PTR _pMessage$223989[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _eTargetPlayer$[ebp]
	je	SHORT $LN3@MarkRecent

; 3673 : 		{
; 3674 : 			continue;

	jmp	SHORT $LN7@MarkRecent
$LN3@MarkRecent:

; 3675 : 		}
; 3676 : 
; 3677 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	mov	ecx, DWORD PTR _pMessage$223989[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _eSourcePlayer$[ebp]
	je	SHORT $LN2@MarkRecent

; 3678 : 		{
; 3679 : 			continue;

	jmp	$LN7@MarkRecent
$LN2@MarkRecent:

; 3680 : 		}
; 3681 : 
; 3682 : 		if(pMessage->m_iIntrigueType != eIntrigueType)

	mov	eax, DWORD PTR _pMessage$223989[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _eIntrigueType$[ebp]
	je	SHORT $LN1@MarkRecent

; 3683 : 		{
; 3684 : 			continue;

	jmp	$LN7@MarkRecent
$LN1@MarkRecent:

; 3685 : 		}
; 3686 : 
; 3687 : 		// this message has not been shared. Marking it as shared.
; 3688 : 		pMessage->m_bShared = true;

	mov	edx, DWORD PTR _pMessage$223989[ebp]
	mov	BYTE PTR [edx+64], 1

; 3689 : 		iNumShared++;

	mov	eax, DWORD PTR _iNumShared$[ebp]
	add	eax, 1
	mov	DWORD PTR _iNumShared$[ebp], eax

; 3690 : 	}

	jmp	$LN7@MarkRecent
$LN6@MarkRecent:

; 3691 : 
; 3692 : 	return iNumShared;

	mov	eax, DWORD PTR _iNumShared$[ebp]

; 3693 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z ENDP ; CvPlayerEspionage::MarkRecentIntrigueAsShared
_TEXT	ENDS
PUBLIC	?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::HasSharedIntrigueAboutMe
; Function compile flags: /Odtp
;	COMDAT ?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T239712 = -16						; size = 4
$T239688 = -12						; size = 4
$T239678 = -8						; size = 4
_it$224150 = -4						; size = 4
_eFromPlayer$ = 8					; size = 4
?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::HasSharedIntrigueAboutMe, COMDAT
; _this$ = ecx

; 3696 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3697 : 	for(std::vector<IntrigueNotificationMessage>::iterator it = m_aIntrigueNotificationMessages.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	mov	DWORD PTR $T239688[ebp], ecx
	mov	edx, DWORD PTR $T239688[ebp]
	mov	DWORD PTR _it$224150[ebp], edx

; 3698 : 		it != m_aIntrigueNotificationMessages.end(); ++it)

	jmp	SHORT $LN4@HasSharedI@3
$LN3@HasSharedI@3:
	mov	eax, DWORD PTR _it$224150[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR _it$224150[ebp], eax
$LN4@HasSharedI@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1288]
	mov	DWORD PTR $T239712[ebp], edx
	mov	eax, DWORD PTR $T239712[ebp]
	mov	DWORD PTR $T239678[ebp], eax
	mov	ecx, DWORD PTR _it$224150[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T239678[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@HasSharedI@3

; 3699 : 	{
; 3700 : 		if((*it).m_eDiscoveringPlayer == eFromPlayer)

	mov	edx, DWORD PTR _it$224150[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _eFromPlayer$[ebp]
	jne	SHORT $LN1@HasSharedI@3

; 3701 : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@HasSharedI@3
$LN1@HasSharedI@3:

; 3702 : 	}

	jmp	SHORT $LN3@HasSharedI@3
$LN2@HasSharedI@3:

; 3703 : 
; 3704 : 	return false;

	xor	al, al
$LN5@HasSharedI@3:

; 3705 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::HasSharedIntrigueAboutMe
_TEXT	ENDS
PUBLIC	??_C@_0BB@HPHJBNMO@EspionageLog?4csv?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ; CvPlayerEspionage::GetLogFileName
;	COMDAT ??_C@_0BB@HPHJBNMO@EspionageLog?4csv?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BB@HPHJBNMO@EspionageLog?4csv?$AA@ DB 'EspionageLog.csv', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$0
__ehfuncinfo$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T239740 = -48						; size = 4
_strLogName$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ PROC ; CvPlayerEspionage::GetLogFileName, COMDAT
; _this$ = ecx

; 3708 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T239740[ebp], 0

; 3709 : 	CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 3710 : 	strLogName = "EspionageLog.csv";

	mov	eax, OFFSET ??_C@_0BB@HPHJBNMO@EspionageLog?4csv?$AA@
	test	eax, eax
	je	SHORT $LN10@GetLogFile
	push	OFFSET ??_C@_0BB@HPHJBNMO@EspionageLog?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN11@GetLogFile
$LN10@GetLogFile:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN11@GetLogFile:

; 3711 : 	return strLogName;

	lea	ecx, DWORD PTR _strLogName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T239740[ebp]
	or	edx, 1
	mov	DWORD PTR $T239740[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3712 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$0:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$1:
	mov	eax, DWORD PTR $T239740[ebp]
	and	eax, 1
	je	$LN5@GetLogFile
	and	DWORD PTR $T239740[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLogFile:
	ret	0
__ehhandler$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ENDP ; CvPlayerEspionage::GetLogFileName
PUBLIC	??_C@_05CMAMCNEC@?$CF03d?0?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
;	COMDAT ??_C@_05CMAMCNEC@?$CF03d?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_05CMAMCNEC@?$CF03d?0?$AA@ DB '%03d,', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$3
__ehfuncinfo$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
_TEXT	SEGMENT
tv177 = -168						; size = 4
tv188 = -164						; size = 4
tv76 = -160						; size = 4
_this$ = -156						; size = 4
$T239802 = -152						; size = 4
$T239798 = -148						; size = 4
$T239794 = -144						; size = 4
$T239786 = -140						; size = 4
$T239785 = -136						; size = 4
$T239769 = -132						; size = 28
$T239768 = -104						; size = 28
_strOutBuf$224168 = -76					; size = 28
_pLog$224170 = -48					; size = 4
_strBaseString$224169 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strMsg$ = 8						; size = 4
?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z PROC ; CvPlayerEspionage::LogEspionageMsg, COMDAT
; _this$ = ecx

; 3715 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3716 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN2@LogEspiona

; 3717 : 	{
; 3718 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$224168[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3719 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$224169[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 3720 : 		FILogFile* pLog;
; 3721 : 
; 3722 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv76[ebp], eax
	lea	ecx, DWORD PTR $T239768[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ; CvPlayerEspionage::GetLogFileName
	mov	DWORD PTR tv188[ebp], eax
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR $T239785[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T239785[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T239786[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T239786[ebp]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv76[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$224170[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T239768[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3723 : 
; 3724 : 		// Get the leading info for this line
; 3725 : 		strBaseString.Format("%03d,", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T239794[ebp], ecx
	mov	ecx, DWORD PTR $T239794[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_05CMAMCNEC@?$CF03d?0?$AA@
	lea	edx, DWORD PTR _strBaseString$224169[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 3726 : 		strBaseString += m_pPlayer->getCivilizationShortDescription();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1296]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strBaseString$224169[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3727 : 		strBaseString += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strBaseString$224169[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3728 : 		strOutBuf = strBaseString + strMsg;

	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$224169[ebp]
	push	edx
	lea	eax, DWORD PTR $T239769[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR $T239798[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T239798[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$224168[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T239769[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3729 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$224168[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T239802[ebp], eax
	mov	edx, DWORD PTR $T239802[ebp]
	push	edx
	mov	eax, DWORD PTR _pLog$224170[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pLog$224170[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	add	esp, 8

; 3730 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$224169[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$224168[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@LogEspiona:

; 3731 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$224168[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$224169[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$2:
	lea	ecx, DWORD PTR $T239768[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$3:
	lea	ecx, DWORD PTR $T239769[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ENDP ; CvPlayerEspionage::LogEspionageMsg
PUBLIC	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ	; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
PUBLIC	?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z ; FStaticVector<enum TechTypes,1,0,297,0>::Free
PUBLIC	__$ArrayPad$
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z ; operator>>
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4BuildingTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z:PROC ; operator>>
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$1
__ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
_TEXT	SEGMENT
$T240153 = -388						; size = 4
_iProjectType$224244 = -256				; size = 4
_kMessage$224240 = -252					; size = 68
_i$224236 = -180					; size = 4
_kMessage$224235 = -176					; size = 20
_i$224231 = -156					; size = 4
_kHeistLocation$224229 = -152				; size = 8
_i$224225 = -144					; size = 4
_iNumEntries$224224 = -140				; size = 4
_iCiv$224220 = -136					; size = 4
_i$224215 = -132					; size = 4
_iNumTechsToSteal$224213 = -128				; size = 4
_uiCiv$224209 = -124					; size = 4
_eTech$224205 = -120					; size = 4
_uiTech$224201 = -116					; size = 4
_uiNumTechs$224200 = -112				; size = 4
_aTechList$224199 = -108				; size = 20
__$ArrayPad$ = -88					; size = 4
_uiCiv$224195 = -84					; size = 4
_iSpyNameIndex$224193 = -80				; size = 4
_i$224189 = -76						; size = 4
_i$224181 = -72						; size = 4
_kTempSpy$ = -68					; size = 28
_iMaxTechCostEntries$ = -40				; size = 4
_uiVersion$ = -36					; size = 4
_iNumSpies$ = -32					; size = 4
_iNumSpyNames$ = -28					; size = 4
_iNumMessages$ = -24					; size = 4
_uiNumCivs$ = -20					; size = 4
_iNumCivs$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z PROC ; operator>>, COMDAT

; 3735 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 376				; 00000178H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3736 : 	uint uiVersion;
; 3737 : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3738 : 
; 3739 : 	int iNumSpies;
; 3740 : 	loadFrom >> iNumSpies;

	lea	ecx, DWORD PTR _iNumSpies$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3741 : 
; 3742 : 	CvEspionageSpy kTempSpy;

	lea	ecx, DWORD PTR _kTempSpy$[ebp]
	call	??0CvEspionageSpy@@QAE@XZ		; CvEspionageSpy::CvEspionageSpy

; 3743 : 
; 3744 : 	for(int i = 0; i < iNumSpies; i++)

	mov	DWORD PTR _i$224181[ebp], 0
	jmp	SHORT $LN30@operator@2
$LN29@operator@2:
	mov	edx, DWORD PTR _i$224181[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224181[ebp], edx
$LN30@operator@2:
	mov	eax, DWORD PTR _i$224181[ebp]
	cmp	eax, DWORD PTR _iNumSpies$[ebp]
	jge	SHORT $LN28@operator@2

; 3745 : 	{
; 3746 : 		loadFrom >> kTempSpy;

	lea	ecx, DWORD PTR _kTempSpy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ; operator>>
	add	esp, 8

; 3747 : 		writeTo.m_aSpyList.push_back(kTempSpy);

	lea	eax, DWORD PTR _kTempSpy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back

; 3748 : 	}

	jmp	SHORT $LN29@operator@2
$LN28@operator@2:

; 3749 : 
; 3750 : 	int iNumSpyNames;
; 3751 : 	loadFrom >> iNumSpyNames;

	lea	ecx, DWORD PTR _iNumSpyNames$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3752 : 	for(int i = 0; i < iNumSpyNames; i++)

	mov	DWORD PTR _i$224189[ebp], 0
	jmp	SHORT $LN27@operator@2
$LN26@operator@2:
	mov	edx, DWORD PTR _i$224189[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224189[ebp], edx
$LN27@operator@2:
	mov	eax, DWORD PTR _i$224189[ebp]
	cmp	eax, DWORD PTR _iNumSpyNames$[ebp]
	jge	SHORT $LN25@operator@2

; 3753 : 	{
; 3754 : 		int iSpyNameIndex;
; 3755 : 		loadFrom >> iSpyNameIndex;

	lea	ecx, DWORD PTR _iSpyNameIndex$224193[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3756 : 		writeTo.m_aiSpyListNameOrder.push_back(iSpyNameIndex);

	lea	edx, DWORD PTR _iSpyNameIndex$224193[ebp]
	push	edx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 244				; 000000f4H
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 3757 : 	}

	jmp	SHORT $LN26@operator@2
$LN25@operator@2:

; 3758 : 
; 3759 : 	loadFrom >> writeTo.m_iSpyListNameOrderIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3760 : 
; 3761 : 	uint uiNumCivs;
; 3762 : 	loadFrom >> uiNumCivs;

	lea	ecx, DWORD PTR _uiNumCivs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3763 : 	for(uint uiCiv = 0; uiCiv < uiNumCivs; uiCiv++)

	mov	DWORD PTR _uiCiv$224195[ebp], 0
	jmp	SHORT $LN24@operator@2
$LN23@operator@2:
	mov	edx, DWORD PTR _uiCiv$224195[ebp]
	add	edx, 1
	mov	DWORD PTR _uiCiv$224195[ebp], edx
$LN24@operator@2:
	mov	eax, DWORD PTR _uiCiv$224195[ebp]
	cmp	eax, DWORD PTR _uiNumCivs$[ebp]
	jae	$LN22@operator@2

; 3764 : 	{
; 3765 : 		TechList aTechList;

	lea	ecx, DWORD PTR _aTechList$224199[ebp]
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3766 : 		writeTo.m_aaPlayerStealableTechList.push_back(aTechList);

	lea	ecx, DWORD PTR _aTechList$224199[ebp]
	push	ecx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 264				; 00000108H
	call	?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back

; 3767 : 
; 3768 : 		uint uiNumTechs;
; 3769 : 		loadFrom >> uiNumTechs;

	lea	edx, DWORD PTR _uiNumTechs$224200[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3770 : 		for(uint uiTech = 0; uiTech < uiNumTechs; uiTech++)

	mov	DWORD PTR _uiTech$224201[ebp], 0
	jmp	SHORT $LN21@operator@2
$LN20@operator@2:
	mov	eax, DWORD PTR _uiTech$224201[ebp]
	add	eax, 1
	mov	DWORD PTR _uiTech$224201[ebp], eax
$LN21@operator@2:
	mov	ecx, DWORD PTR _uiTech$224201[ebp]
	cmp	ecx, DWORD PTR _uiNumTechs$224200[ebp]
	jae	SHORT $LN19@operator@2

; 3771 : 		{
; 3772 : 			TechTypes eTech;
; 3773 : 			loadFrom >> eTech;

	lea	edx, DWORD PTR _eTech$224205[ebp]
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z ; operator>>
	add	esp, 8

; 3774 : 			writeTo.m_aaPlayerStealableTechList[uiCiv].push_back(eTech);

	lea	ecx, DWORD PTR _eTech$224205[ebp]
	push	ecx
	mov	ecx, DWORD PTR _uiCiv$224195[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _writeTo$[ebp]
	add	ecx, DWORD PTR [edx+264]
	call	?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::push_back

; 3775 : 		}

	jmp	SHORT $LN20@operator@2
$LN19@operator@2:

; 3776 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _aTechList$224199[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _aTechList$224199[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aTechList$224199[ebp]
	call	?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z ; FStaticVector<enum TechTypes,1,0,297,0>::Free
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	$LN23@operator@2
$LN22@operator@2:

; 3777 : 
; 3778 : 
; 3779 : 	loadFrom >> uiNumCivs;

	lea	edx, DWORD PTR _uiNumCivs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3780 : 	for(uint uiCiv = 0; uiCiv < uiNumCivs; uiCiv++)

	mov	DWORD PTR _uiCiv$224209[ebp], 0
	jmp	SHORT $LN18@operator@2
$LN17@operator@2:
	mov	eax, DWORD PTR _uiCiv$224209[ebp]
	add	eax, 1
	mov	DWORD PTR _uiCiv$224209[ebp], eax
$LN18@operator@2:
	mov	ecx, DWORD PTR _uiCiv$224209[ebp]
	cmp	ecx, DWORD PTR _uiNumCivs$[ebp]
	jae	SHORT $LN16@operator@2

; 3781 : 	{
; 3782 : 		int iNumTechsToSteal;
; 3783 : 		loadFrom >> iNumTechsToSteal;

	lea	edx, DWORD PTR _iNumTechsToSteal$224213[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3784 : 		writeTo.m_aiNumTechsToStealList.push_back(iNumTechsToSteal);

	lea	eax, DWORD PTR _iNumTechsToSteal$224213[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 720				; 000002d0H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 3785 : 	}

	jmp	SHORT $LN17@operator@2
$LN16@operator@2:

; 3786 : 
; 3787 : 	int iMaxTechCostEntries;
; 3788 : 	loadFrom >> iMaxTechCostEntries;

	lea	ecx, DWORD PTR _iMaxTechCostEntries$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3789 : 	for(int i = 0; i < iMaxTechCostEntries; i++)

	mov	DWORD PTR _i$224215[ebp], 0
	jmp	SHORT $LN15@operator@2
$LN14@operator@2:
	mov	edx, DWORD PTR _i$224215[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224215[ebp], edx
$LN15@operator@2:
	mov	eax, DWORD PTR _i$224215[ebp]
	cmp	eax, DWORD PTR _iMaxTechCostEntries$[ebp]
	jge	SHORT $LN13@operator@2

; 3790 : 	{
; 3791 : 		loadFrom >> writeTo.m_aiMaxTechCost[i];

	mov	ecx, DWORD PTR _i$224215[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+824]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3792 : 	}

	jmp	SHORT $LN14@operator@2
$LN13@operator@2:

; 3793 : 
; 3794 : 
; 3795 : 	int iNumCivs;
; 3796 : 	loadFrom >> iNumCivs;

	lea	ecx, DWORD PTR _iNumCivs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3797 : 	for(int iCiv = 0; iCiv < iNumCivs; iCiv++)

	mov	DWORD PTR _iCiv$224220[ebp], 0
	jmp	SHORT $LN12@operator@2
$LN11@operator@2:
	mov	edx, DWORD PTR _iCiv$224220[ebp]
	add	edx, 1
	mov	DWORD PTR _iCiv$224220[ebp], edx
$LN12@operator@2:
	mov	eax, DWORD PTR _iCiv$224220[ebp]
	cmp	eax, DWORD PTR _iNumCivs$[ebp]
	jge	SHORT $LN10@operator@2

; 3798 : 	{
; 3799 : 		int iNumEntries;
; 3800 : 		loadFrom >> iNumEntries;

	lea	ecx, DWORD PTR _iNumEntries$224224[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3801 : 		for(int i = 0; i < iNumEntries; i++)

	mov	DWORD PTR _i$224225[ebp], 0
	jmp	SHORT $LN9@operator@2
$LN8@operator@2:
	mov	edx, DWORD PTR _i$224225[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224225[ebp], edx
$LN9@operator@2:
	mov	eax, DWORD PTR _i$224225[ebp]
	cmp	eax, DWORD PTR _iNumEntries$224224[ebp]
	jge	SHORT $LN7@operator@2

; 3802 : 		{
; 3803 : 			HeistLocation kHeistLocation;
; 3804 : 			loadFrom >> kHeistLocation.m_iX;

	lea	ecx, DWORD PTR _kHeistLocation$224229[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3805 : 			loadFrom >> kHeistLocation.m_iY;

	lea	edx, DWORD PTR _kHeistLocation$224229[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3806 : 			writeTo.m_aHeistLocations[iCiv].push_back(kHeistLocation);

	lea	eax, DWORD PTR _kHeistLocation$224229[ebp]
	push	eax
	mov	ecx, DWORD PTR _iCiv$224220[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+912]
	call	?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back

; 3807 : 		}

	jmp	SHORT $LN8@operator@2
$LN7@operator@2:

; 3808 : 	}

	jmp	$LN11@operator@2
$LN10@operator@2:

; 3809 : 
; 3810 : 	int iNumMessages;
; 3811 : 	loadFrom >> iNumMessages;

	lea	eax, DWORD PTR _iNumMessages$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3812 : 	for(int i = 0; i < iNumMessages; i++)

	mov	DWORD PTR _i$224231[ebp], 0
	jmp	SHORT $LN6@operator@2
$LN5@operator@2:
	mov	ecx, DWORD PTR _i$224231[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$224231[ebp], ecx
$LN6@operator@2:
	mov	edx, DWORD PTR _i$224231[ebp]
	cmp	edx, DWORD PTR _iNumMessages$[ebp]
	jge	SHORT $LN4@operator@2

; 3813 : 	{
; 3814 : 		SpyNotificationMessage kMessage;
; 3815 : 		loadFrom >> kMessage.m_iCityX;

	lea	eax, DWORD PTR _kMessage$224235[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3816 : 		loadFrom >> kMessage.m_iCityY;

	lea	ecx, DWORD PTR _kMessage$224235[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3817 : 		loadFrom >> kMessage.m_eAttackingPlayer;

	lea	edx, DWORD PTR _kMessage$224235[ebp+8]
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 3818 : 		loadFrom >> kMessage.m_iSpyResult;

	lea	ecx, DWORD PTR _kMessage$224235[ebp+12]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3819 : 		loadFrom >> kMessage.m_eStolenTech;

	lea	edx, DWORD PTR _kMessage$224235[ebp+16]
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z ; operator>>
	add	esp, 8

; 3820 : 		writeTo.m_aSpyNotificationMessages.push_back(kMessage);

	lea	ecx, DWORD PTR _kMessage$224235[ebp]
	push	ecx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 1264				; 000004f0H
	call	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back

; 3821 : 	}

	jmp	$LN5@operator@2
$LN4@operator@2:

; 3822 : 
; 3823 : 	loadFrom >> iNumMessages;

	lea	edx, DWORD PTR _iNumMessages$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3824 : 	for(int i = 0; i < iNumMessages; i++)

	mov	DWORD PTR _i$224236[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	eax, DWORD PTR _i$224236[ebp]
	add	eax, 1
	mov	DWORD PTR _i$224236[ebp], eax
$LN3@operator@2:
	mov	ecx, DWORD PTR _i$224236[ebp]
	cmp	ecx, DWORD PTR _iNumMessages$[ebp]
	jge	$LN1@operator@2

; 3825 : 	{
; 3826 : 		IntrigueNotificationMessage kMessage;

	lea	ecx, DWORD PTR _kMessage$224240[ebp+36]
	call	??0CvString@@QAE@XZ			; CvString::CvString
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 3827 : 		loadFrom >> kMessage.m_eDiscoveringPlayer;

	lea	edx, DWORD PTR _kMessage$224240[ebp]
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 3828 : 		loadFrom >> kMessage.m_eSourcePlayer;

	lea	ecx, DWORD PTR _kMessage$224240[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _loadFrom$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 3829 : 		loadFrom >> kMessage.m_eTargetPlayer;

	lea	eax, DWORD PTR _kMessage$224240[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 3830 : 		loadFrom >> kMessage.m_eBuilding;

	lea	edx, DWORD PTR _kMessage$224240[ebp+12]
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4BuildingTypes@@@Z ; operator>>
	add	esp, 8

; 3831 : 		int iProjectType;
; 3832 : 		loadFrom >> iProjectType;

	lea	ecx, DWORD PTR _iProjectType$224244[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3833 : 		kMessage.m_eProject = (ProjectTypes)iProjectType;

	mov	edx, DWORD PTR _iProjectType$224244[ebp]
	mov	DWORD PTR _kMessage$224240[ebp+16], edx

; 3834 : 		loadFrom >> kMessage.m_iIntrigueType;

	lea	eax, DWORD PTR _kMessage$224240[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3835 : 		loadFrom >> kMessage.m_iTurnNum;

	lea	ecx, DWORD PTR _kMessage$224240[ebp+24]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3836 : 		loadFrom >> kMessage.m_iCityX;

	lea	edx, DWORD PTR _kMessage$224240[ebp+28]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3837 : 		loadFrom >> kMessage.m_iCityY;

	lea	eax, DWORD PTR _kMessage$224240[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3838 : 		loadFrom >> kMessage.m_strSpyName;

	lea	ecx, DWORD PTR _kMessage$224240[ebp+36]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 3839 : 		loadFrom >> kMessage.m_bShared;

	lea	edx, DWORD PTR _kMessage$224240[ebp+64]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 3840 : 		writeTo.m_aIntrigueNotificationMessages.push_back(kMessage);

	lea	eax, DWORD PTR _kMessage$224240[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 1280				; 00000500H
	call	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back

; 3841 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kMessage$224240[ebp+36]
	mov	DWORD PTR $T240153[ebp], ecx
	mov	ecx, DWORD PTR $T240153[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN2@operator@2
$LN1@operator@2:

; 3842 : 
; 3843 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 3844 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$0:
	lea	ecx, DWORD PTR _aTechList$224199[ebp]
	jmp	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$4:
	lea	ecx, DWORD PTR _aTechList$224199[ebp]
	jmp	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$1:
	lea	ecx, DWORD PTR _kMessage$224240[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-380]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z ENDP ; operator>>
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z ; operator<<
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z
_TEXT	SEGMENT
$T240427 = -216						; size = 4
$T240420 = -212						; size = 4
$T240413 = -208						; size = 4
$T240406 = -204						; size = 4
$T240399 = -200						; size = 4
$T240392 = -196						; size = 4
$T240367 = -192						; size = 4
$T240360 = -188						; size = 4
$T240353 = -184						; size = 4
$T240343 = -180						; size = 4
$T240336 = -176						; size = 4
$T240329 = -172						; size = 4
$T240322 = -168						; size = 4
$T240318 = -164						; size = 4
$T240308 = -160						; size = 4
$T240298 = -156						; size = 4
$T240288 = -152						; size = 4
$T240269 = -148						; size = 4
$T240262 = -144						; size = 4
$T240255 = -140						; size = 4
$T240248 = -136						; size = 4
$T240244 = -132						; size = 4
$T240240 = -128						; size = 4
$T240233 = -124						; size = 4
$T240229 = -120						; size = 4
$T240225 = -116						; size = 4
$T240218 = -112						; size = 4
$T240211 = -108						; size = 4
$T240204 = -104						; size = 4
$T240197 = -100						; size = 4
$T240190 = -96						; size = 4
$T240183 = -92						; size = 4
$T240176 = -88						; size = 4
$T240175 = -84						; size = 4
$T240174 = -80						; size = 4
$T240173 = -76						; size = 4
$T240172 = -72						; size = 4
$T240171 = -68						; size = 4
$T240170 = -64						; size = 4
$T240169 = -60						; size = 4
$T240168 = -56						; size = 4
$T240167 = -52						; size = 4
$T240166 = -48						; size = 4
_ui$224313 = -44					; size = 4
_ui$224308 = -40					; size = 4
_ui$224303 = -36					; size = 4
_uiCiv$224298 = -32					; size = 4
_ui$224293 = -28					; size = 4
_uiCiv$224288 = -24					; size = 4
_uiTech$224275 = -20					; size = 4
_uiCiv$224270 = -16					; size = 4
_ui$224265 = -12					; size = 4
_i$224252 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z PROC ; operator<<, COMDAT

; 3848 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H

; 3849 : 	uint uiVersion = 0;

	mov	DWORD PTR _uiVersion$[ebp], 0

; 3850 : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3851 : 
; 3852 : 	saveTo << readFrom.m_aSpyList.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T240183[ebp], edx
	mov	eax, DWORD PTR $T240183[ebp]
	mov	DWORD PTR $T240166[ebp], eax
	lea	ecx, DWORD PTR $T240166[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3853 : 	for(uint i = 0; i < readFrom.m_aSpyList.size(); i++)

	mov	DWORD PTR _i$224252[ebp], 0
	jmp	SHORT $LN30@operator@3
$LN29@operator@3:
	mov	edx, DWORD PTR _i$224252[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224252[ebp], edx
$LN30@operator@3:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T240190[ebp], ecx
	mov	edx, DWORD PTR _i$224252[ebp]
	cmp	edx, DWORD PTR $T240190[ebp]
	jae	SHORT $LN28@operator@3

; 3854 : 	{
; 3855 : 		saveTo << readFrom.m_aSpyList[i];

	mov	eax, DWORD PTR _i$224252[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	mov	edx, DWORD PTR _saveTo$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ; operator<<
	add	esp, 8

; 3856 : 	}

	jmp	SHORT $LN29@operator@3
$LN28@operator@3:

; 3857 : 
; 3858 : 	saveTo << readFrom.m_aiSpyListNameOrder.size();

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T240197[ebp], eax
	mov	ecx, DWORD PTR $T240197[ebp]
	mov	edx, DWORD PTR $T240197[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T240167[ebp], eax
	lea	ecx, DWORD PTR $T240167[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3859 : 	for(uint ui = 0; ui < readFrom.m_aiSpyListNameOrder.size(); ui++)

	mov	DWORD PTR _ui$224265[ebp], 0
	jmp	SHORT $LN27@operator@3
$LN26@operator@3:
	mov	edx, DWORD PTR _ui$224265[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224265[ebp], edx
$LN27@operator@3:
	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 244				; 000000f4H
	mov	DWORD PTR $T240204[ebp], eax
	mov	ecx, DWORD PTR $T240204[ebp]
	mov	edx, DWORD PTR $T240204[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _ui$224265[ebp], eax
	jae	SHORT $LN25@operator@3

; 3860 : 	{
; 3861 : 		saveTo << readFrom.m_aiSpyListNameOrder[ui];

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	eax, DWORD PTR _ui$224265[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T240211[ebp], ecx
	mov	edx, DWORD PTR $T240211[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3862 : 	}

	jmp	SHORT $LN26@operator@3
$LN25@operator@3:

; 3863 : 
; 3864 : 	saveTo << readFrom.m_iSpyListNameOrderIndex;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3865 : 
; 3866 : 	saveTo << readFrom.m_aaPlayerStealableTechList.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	DWORD PTR $T240218[ebp], edx
	mov	eax, DWORD PTR $T240218[ebp]
	mov	DWORD PTR $T240168[ebp], eax
	lea	ecx, DWORD PTR $T240168[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3867 : 	for(uint uiCiv = 0; uiCiv < readFrom.m_aaPlayerStealableTechList.size(); uiCiv++)

	mov	DWORD PTR _uiCiv$224270[ebp], 0
	jmp	SHORT $LN24@operator@3
$LN23@operator@3:
	mov	edx, DWORD PTR _uiCiv$224270[ebp]
	add	edx, 1
	mov	DWORD PTR _uiCiv$224270[ebp], edx
$LN24@operator@3:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR $T240225[ebp], ecx
	mov	edx, DWORD PTR _uiCiv$224270[ebp]
	cmp	edx, DWORD PTR $T240225[ebp]
	jae	$LN22@operator@3

; 3868 : 	{
; 3869 : 		saveTo << readFrom.m_aaPlayerStealableTechList[uiCiv].size();

	mov	eax, DWORD PTR _uiCiv$224270[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	eax, DWORD PTR [ecx+264]
	mov	DWORD PTR $T240229[ebp], eax
	mov	edx, DWORD PTR $T240229[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T240233[ebp], eax
	mov	ecx, DWORD PTR $T240233[ebp]
	mov	DWORD PTR $T240169[ebp], ecx
	lea	edx, DWORD PTR $T240169[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3870 : 		for(uint uiTech = 0; uiTech < readFrom.m_aaPlayerStealableTechList[uiCiv].size(); uiTech++)

	mov	DWORD PTR _uiTech$224275[ebp], 0
	jmp	SHORT $LN21@operator@3
$LN20@operator@3:
	mov	eax, DWORD PTR _uiTech$224275[ebp]
	add	eax, 1
	mov	DWORD PTR _uiTech$224275[ebp], eax
$LN21@operator@3:
	mov	ecx, DWORD PTR _uiCiv$224270[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _readFrom$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T240240[ebp], ecx
	mov	eax, DWORD PTR $T240240[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T240244[ebp], ecx
	mov	edx, DWORD PTR _uiTech$224275[ebp]
	cmp	edx, DWORD PTR $T240244[ebp]
	jae	SHORT $LN19@operator@3

; 3871 : 		{
; 3872 : 			saveTo << readFrom.m_aaPlayerStealableTechList[uiCiv][uiTech];

	mov	eax, DWORD PTR _uiCiv$224270[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	eax, DWORD PTR [ecx+264]
	mov	DWORD PTR $T240248[ebp], eax
	mov	edx, DWORD PTR $T240248[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _uiTech$224275[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z ; operator<<
	add	esp, 8

; 3873 : 		}

	jmp	SHORT $LN20@operator@3
$LN19@operator@3:

; 3874 : 	}

	jmp	$LN23@operator@3
$LN22@operator@3:

; 3875 : 
; 3876 : 	saveTo << readFrom.m_aiNumTechsToStealList.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+724]
	mov	DWORD PTR $T240255[ebp], edx
	mov	eax, DWORD PTR $T240255[ebp]
	mov	DWORD PTR $T240170[ebp], eax
	lea	ecx, DWORD PTR $T240170[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3877 : 	for(uint uiCiv = 0; uiCiv < readFrom.m_aiNumTechsToStealList.size(); uiCiv++)

	mov	DWORD PTR _uiCiv$224288[ebp], 0
	jmp	SHORT $LN18@operator@3
$LN17@operator@3:
	mov	edx, DWORD PTR _uiCiv$224288[ebp]
	add	edx, 1
	mov	DWORD PTR _uiCiv$224288[ebp], edx
$LN18@operator@3:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR $T240262[ebp], ecx
	mov	edx, DWORD PTR _uiCiv$224288[ebp]
	cmp	edx, DWORD PTR $T240262[ebp]
	jae	SHORT $LN16@operator@3

; 3878 : 	{
; 3879 : 		saveTo << readFrom.m_aiNumTechsToStealList[uiCiv];

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _uiCiv$224288[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T240269[ebp], eax
	mov	ecx, DWORD PTR $T240269[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3880 : 	}

	jmp	SHORT $LN17@operator@3
$LN16@operator@3:

; 3881 : 
; 3882 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240171[ebp], 22		; 00000016H
	lea	edx, DWORD PTR $T240171[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3883 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224293[ebp], 0
	jmp	SHORT $LN15@operator@3
$LN14@operator@3:
	mov	eax, DWORD PTR _ui$224293[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224293[ebp], eax
$LN15@operator@3:
	cmp	DWORD PTR _ui$224293[ebp], 22		; 00000016H
	jae	SHORT $LN13@operator@3

; 3884 : 	{
; 3885 : 		saveTo << readFrom.m_aiMaxTechCost[ui];

	mov	ecx, DWORD PTR _ui$224293[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+824]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3886 : 	}

	jmp	SHORT $LN14@operator@3
$LN13@operator@3:

; 3887 : 
; 3888 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240172[ebp], 22		; 00000016H
	lea	ecx, DWORD PTR $T240172[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3889 : 	for(uint uiCiv = 0; uiCiv < MAX_MAJOR_CIVS; uiCiv++)

	mov	DWORD PTR _uiCiv$224298[ebp], 0
	jmp	SHORT $LN12@operator@3
$LN11@operator@3:
	mov	edx, DWORD PTR _uiCiv$224298[ebp]
	add	edx, 1
	mov	DWORD PTR _uiCiv$224298[ebp], edx
$LN12@operator@3:
	cmp	DWORD PTR _uiCiv$224298[ebp], 22	; 00000016H
	jae	$LN10@operator@3

; 3890 : 	{
; 3891 : 		saveTo << readFrom.m_aHeistLocations[uiCiv].size();

	mov	eax, DWORD PTR _uiCiv$224298[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax+912]
	mov	DWORD PTR $T240288[ebp], edx
	mov	eax, DWORD PTR $T240288[ebp]
	mov	ecx, DWORD PTR $T240288[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T240173[ebp], edx
	lea	eax, DWORD PTR $T240173[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3892 : 		for(uint ui = 0; ui < readFrom.m_aHeistLocations[uiCiv].size(); ui++)

	mov	DWORD PTR _ui$224303[ebp], 0
	jmp	SHORT $LN99@operator@3
$LN8@operator@3:
	mov	ecx, DWORD PTR _ui$224303[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224303[ebp], ecx
$LN99@operator@3:
	mov	edx, DWORD PTR _uiCiv$224298[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _readFrom$[ebp]
	lea	ecx, DWORD PTR [eax+edx+912]
	mov	DWORD PTR $T240298[ebp], ecx
	mov	edx, DWORD PTR $T240298[ebp]
	mov	eax, DWORD PTR $T240298[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	cmp	DWORD PTR _ui$224303[ebp], ecx
	jae	SHORT $LN7@operator@3

; 3893 : 		{
; 3894 : 			saveTo << readFrom.m_aHeistLocations[uiCiv][ui].m_iX;

	mov	edx, DWORD PTR _uiCiv$224298[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+edx+916]
	mov	edx, DWORD PTR _ui$224303[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T240308[ebp], eax
	mov	ecx, DWORD PTR $T240308[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3895 : 			saveTo << readFrom.m_aHeistLocations[uiCiv][ui].m_iY;

	mov	edx, DWORD PTR _uiCiv$224298[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+edx+916]
	mov	edx, DWORD PTR _ui$224303[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR $T240318[ebp], eax
	mov	ecx, DWORD PTR $T240318[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3896 : 		}

	jmp	$LN8@operator@3
$LN7@operator@3:

; 3897 : 	}

	jmp	$LN11@operator@3
$LN10@operator@3:

; 3898 : 
; 3899 : 	saveTo << readFrom.m_aSpyNotificationMessages.size();

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 1264				; 000004f0H
	mov	DWORD PTR $T240322[ebp], edx
	mov	eax, DWORD PTR $T240322[ebp]
	mov	ecx, DWORD PTR $T240322[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR $T240174[ebp], eax
	lea	edx, DWORD PTR $T240174[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3900 : 	for(uint ui = 0; ui < readFrom.m_aSpyNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$224308[ebp], 0
	jmp	SHORT $LN6@operator@3
$LN5@operator@3:
	mov	eax, DWORD PTR _ui$224308[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224308[ebp], eax
$LN6@operator@3:
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 1264				; 000004f0H
	mov	DWORD PTR $T240329[ebp], ecx
	mov	edx, DWORD PTR $T240329[ebp]
	mov	eax, DWORD PTR $T240329[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	DWORD PTR _ui$224308[ebp], eax
	jae	$LN4@operator@3

; 3901 : 	{
; 3902 : #ifdef AUI_WARNING_FIXES
; 3903 : 		const SpyNotificationMessage& kSpyNotificationMessage = readFrom.m_aSpyNotificationMessages[ui];
; 3904 : 		saveTo << kSpyNotificationMessage.m_iCityX;
; 3905 : 		saveTo << kSpyNotificationMessage.m_iCityY;
; 3906 : 		saveTo << kSpyNotificationMessage.m_eAttackingPlayer;
; 3907 : 		saveTo << kSpyNotificationMessage.m_iSpyResult;
; 3908 : 		saveTo << kSpyNotificationMessage.m_eStolenTech;
; 3909 : #else
; 3910 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iCityX;

	mov	edx, DWORD PTR _ui$224308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _readFrom$[ebp]
	add	edx, DWORD PTR [eax+1268]
	mov	DWORD PTR $T240336[ebp], edx
	mov	ecx, DWORD PTR $T240336[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3911 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iCityY;

	mov	edx, DWORD PTR _ui$224308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	lea	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR $T240343[ebp], edx
	mov	eax, DWORD PTR $T240343[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3912 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_eAttackingPlayer;

	mov	ecx, DWORD PTR _ui$224308[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+1268]
	lea	ecx, DWORD PTR [eax+ecx+8]
	push	ecx
	mov	edx, DWORD PTR _saveTo$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 3913 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iSpyResult;

	mov	eax, DWORD PTR _ui$224308[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+1268]
	lea	eax, DWORD PTR [edx+eax+12]
	mov	DWORD PTR $T240353[ebp], eax
	mov	ecx, DWORD PTR $T240353[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3914 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_eStolenTech;

	mov	edx, DWORD PTR _ui$224308[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1268]
	lea	edx, DWORD PTR [ecx+edx+16]
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z ; operator<<
	add	esp, 8

; 3915 : #endif
; 3916 : 	}

	jmp	$LN5@operator@3
$LN4@operator@3:

; 3917 : 
; 3918 : 	saveTo << readFrom.m_aIntrigueNotificationMessages.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T240360[ebp], ecx
	mov	edx, DWORD PTR $T240360[ebp]
	mov	eax, DWORD PTR $T240360[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR $T240175[ebp], eax
	lea	edx, DWORD PTR $T240175[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3919 : 	for(uint ui = 0; ui < readFrom.m_aIntrigueNotificationMessages.size(); ui++)

	mov	DWORD PTR _ui$224313[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	eax, DWORD PTR _ui$224313[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224313[ebp], eax
$LN3@operator@3:
	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 1280				; 00000500H
	mov	DWORD PTR $T240367[ebp], ecx
	mov	edx, DWORD PTR $T240367[ebp]
	mov	eax, DWORD PTR $T240367[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	DWORD PTR _ui$224313[ebp], eax
	jae	$LN1@operator@3

; 3920 : 	{
; 3921 : #ifdef AUI_WARNING_FIXES
; 3922 : 		const IntrigueNotificationMessage& kIntrigueNotificationMessage = readFrom.m_aIntrigueNotificationMessages[ui];
; 3923 : 		saveTo << kIntrigueNotificationMessage.m_eDiscoveringPlayer;
; 3924 : 		saveTo << kIntrigueNotificationMessage.m_eSourcePlayer;
; 3925 : 		saveTo << kIntrigueNotificationMessage.m_eTargetPlayer;
; 3926 : 		saveTo << kIntrigueNotificationMessage.m_eBuilding;
; 3927 : 		saveTo << kIntrigueNotificationMessage.m_eProject;
; 3928 : 		saveTo << kIntrigueNotificationMessage.m_iIntrigueType;
; 3929 : 		saveTo << kIntrigueNotificationMessage.m_iTurnNum;
; 3930 : 		saveTo << kIntrigueNotificationMessage.m_iCityX;
; 3931 : 		saveTo << kIntrigueNotificationMessage.m_iCityY;
; 3932 : 		saveTo << kIntrigueNotificationMessage.m_strSpyName;
; 3933 : 		saveTo << kIntrigueNotificationMessage.m_bShared;
; 3934 : #else
; 3935 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eDiscoveringPlayer;

	mov	edx, DWORD PTR _ui$224313[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _readFrom$[ebp]
	add	edx, DWORD PTR [eax+1284]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 3936 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eSourcePlayer;

	mov	edx, DWORD PTR _ui$224313[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	lea	edx, DWORD PTR [ecx+edx+4]
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 3937 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eTargetPlayer;

	mov	ecx, DWORD PTR _ui$224313[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	lea	ecx, DWORD PTR [eax+ecx+8]
	push	ecx
	mov	edx, DWORD PTR _saveTo$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 3938 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eBuilding;

	mov	eax, DWORD PTR _ui$224313[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	lea	eax, DWORD PTR [edx+eax+12]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z ; operator<<
	add	esp, 8

; 3939 : 		saveTo << (int)(readFrom.m_aIntrigueNotificationMessages[ui].m_eProject);

	mov	edx, DWORD PTR _ui$224313[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	mov	edx, DWORD PTR [ecx+edx+16]
	mov	DWORD PTR $T240176[ebp], edx
	lea	eax, DWORD PTR $T240176[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3940 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iIntrigueType;

	mov	ecx, DWORD PTR _ui$224313[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	lea	ecx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR $T240392[ebp], ecx
	mov	edx, DWORD PTR $T240392[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3941 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iTurnNum;

	mov	eax, DWORD PTR _ui$224313[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	lea	eax, DWORD PTR [edx+eax+24]
	mov	DWORD PTR $T240399[ebp], eax
	mov	ecx, DWORD PTR $T240399[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3942 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iCityX;

	mov	edx, DWORD PTR _ui$224313[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	lea	edx, DWORD PTR [ecx+edx+28]
	mov	DWORD PTR $T240406[ebp], edx
	mov	eax, DWORD PTR $T240406[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3943 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iCityY;

	mov	ecx, DWORD PTR _ui$224313[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+1284]
	lea	ecx, DWORD PTR [eax+ecx+32]
	mov	DWORD PTR $T240413[ebp], ecx
	mov	edx, DWORD PTR $T240413[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3944 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_strSpyName;

	mov	eax, DWORD PTR _ui$224313[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+1284]
	lea	eax, DWORD PTR [edx+eax+36]
	mov	DWORD PTR $T240420[ebp], eax
	mov	ecx, DWORD PTR $T240420[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 3945 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_bShared;

	mov	edx, DWORD PTR _ui$224313[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	lea	edx, DWORD PTR [ecx+edx+64]
	mov	DWORD PTR $T240427[ebp], edx
	mov	eax, DWORD PTR $T240427[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 3946 : #endif
; 3947 : 	}

	jmp	$LN2@operator@3
$LN1@operator@3:

; 3948 : 
; 3949 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 3950 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	?Reset@CvCityEspionage@@QAEXXZ			; CvCityEspionage::Reset
PUBLIC	??0CvCityEspionage@@QAE@XZ			; CvCityEspionage::CvCityEspionage
; Function compile flags: /Odtp
;	COMDAT ??0CvCityEspionage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCityEspionage@@QAE@XZ PROC				; CvCityEspionage::CvCityEspionage, COMDAT
; _this$ = ecx

; 3959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3960 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset

; 3961 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCityEspionage@@QAE@XZ ENDP				; CvCityEspionage::CvCityEspionage
_TEXT	ENDS
PUBLIC	??1CvCityEspionage@@QAE@XZ			; CvCityEspionage::~CvCityEspionage
; Function compile flags: /Odtp
;	COMDAT ??1CvCityEspionage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvCityEspionage@@QAE@XZ PROC				; CvCityEspionage::~CvCityEspionage, COMDAT
; _this$ = ecx

; 3965 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3966 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvCityEspionage@@QAE@XZ ENDP				; CvCityEspionage::~CvCityEspionage
_TEXT	ENDS
PUBLIC	?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z	; CvCityEspionage::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pCity$ = 8						; size = 4
?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z PROC		; CvCityEspionage::Init, COMDAT
; _this$ = ecx

; 3970 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3971 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset

; 3972 : 
; 3973 : 	m_pCity = pCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [eax], ecx

; 3974 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z ENDP		; CvCityEspionage::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvCityEspionage@@QAEXXZ			; CvCityEspionage::Uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvCityEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninit@CvCityEspionage@@QAEXXZ PROC			; CvCityEspionage::Uninit, COMDAT
; _this$ = ecx

; 3978 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3979 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset

; 3980 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvCityEspionage@@QAEXXZ ENDP			; CvCityEspionage::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvCityEspionage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ui$224347 = -4						; size = 4
?Reset@CvCityEspionage@@QAEXXZ PROC			; CvCityEspionage::Reset, COMDAT
; _this$ = ecx

; 3984 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3985 : 	m_pCity = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3986 : 
; 3987 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224347[ebp], 0
	jmp	SHORT $LN3@Reset@2
$LN2@Reset@2:
	mov	ecx, DWORD PTR _ui$224347[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224347[ebp], ecx
$LN3@Reset@2:
	cmp	DWORD PTR _ui$224347[ebp], 22		; 00000016H
	jae	$LN4@Reset@2

; 3988 : 	{
; 3989 : 		m_aiSpyAssignment[ui] = -1;

	mov	edx, DWORD PTR _ui$224347[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+4], -1

; 3990 : 		m_aiAmount[ui] = -1;

	mov	ecx, DWORD PTR _ui$224347[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+92], -1

; 3991 : 		m_aiRate[ui] = -1;

	mov	eax, DWORD PTR _ui$224347[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+180], -1

; 3992 : 		m_aiGoal[ui] = -1;

	mov	edx, DWORD PTR _ui$224347[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+268], -1

; 3993 : 		m_aiLastProgress[ui] = -1;

	mov	ecx, DWORD PTR _ui$224347[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+356], -1

; 3994 : 		m_aiLastPotential[ui] = -1;

	mov	eax, DWORD PTR _ui$224347[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+444], -1

; 3995 : 		m_aiLastBasePotential[ui] = -1;

	mov	edx, DWORD PTR _ui$224347[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+532], -1

; 3996 : 		m_aiResult[ui] = SPY_RESULT_UNDETECTED;

	mov	ecx, DWORD PTR _ui$224347[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+620], 0

; 3997 : 		m_aiNumTimesCityRobbed[ui] = 0;

	mov	eax, DWORD PTR _ui$224347[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+708], 0
	jmp	$LN2@Reset@2
$LN4@Reset@2:

; 3998 : 	}
; 3999 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvCityEspionage@@QAEXXZ ENDP			; CvCityEspionage::Reset
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iAmount$ = 12						; size = 4
_iRate$ = 16						; size = 4
_iGoal$ = 20						; size = 4
?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z PROC ; CvCityEspionage::SetActivity, COMDAT
; _this$ = ecx

; 4003 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4004 : 	CvAssertMsg(m_aiAmount[ePlayer] == -1, "Amount has not been reset");
; 4005 : 	CvAssertMsg(m_aiRate[ePlayer] == -1, "Rate has not been reset");
; 4006 : 	CvAssertMsg(m_aiGoal[ePlayer] == -1, "Goal has not been reset");
; 4007 : 	m_aiAmount[ePlayer] = iAmount;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iAmount$[ebp]
	mov	DWORD PTR [ecx+eax*4+92], edx

; 4008 : 	m_aiRate[ePlayer] = iRate;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iRate$[ebp]
	mov	DWORD PTR [ecx+eax*4+180], edx

; 4009 : 	m_aiGoal[ePlayer] = iGoal;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iGoal$[ebp]
	mov	DWORD PTR [ecx+eax*4+268], edx

; 4010 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ENDP ; CvCityEspionage::SetActivity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z PROC	; CvCityEspionage::Process, COMDAT
; _this$ = ecx

; 4014 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4015 : 	CvAssertMsg(m_aiAmount[ePlayer] != -1, "Amount has not been set");
; 4016 : 	CvAssertMsg(m_aiRate[ePlayer] != -1, "Rate has not been set");
; 4017 : 	CvAssertMsg(m_aiGoal[ePlayer] != -1, "Goal has not been set");
; 4018 : 	m_aiAmount[ePlayer] += m_aiRate[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+92]
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+180]
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [edx], ecx

; 4019 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ENDP	; CvCityEspionage::Process
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvCityEspionage::HasReachedGoal, COMDAT
; _this$ = ecx

; 4023 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 4024 : 	CvAssertMsg(m_aiAmount[ePlayer] != -1, "Amount has not been set");
; 4025 : 	CvAssertMsg(m_aiRate[ePlayer] != -1, "Rate has not been set");
; 4026 : 	CvAssertMsg(m_aiGoal[ePlayer] != -1, "Goal has not been set");
; 4027 : 	return m_aiAmount[ePlayer] >= m_aiGoal[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+92]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*4+268]
	setge	cl
	mov	al, cl

; 4028 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvCityEspionage::HasReachedGoal
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z PROC ; CvCityEspionage::ResetProgress, COMDAT
; _this$ = ecx

; 4032 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4033 : 	m_aiAmount[ePlayer] = -1;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+92], -1

; 4034 : 	m_aiGoal[ePlayer] = -1;

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+268], -1

; 4035 : 	m_aiRate[ePlayer] = -1;

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+180], -1

; 4036 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ENDP ; CvCityEspionage::ResetProgress
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iProgress$ = 12					; size = 4
?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastProgress, COMDAT
; _this$ = ecx

; 4040 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4041 : 	m_aiLastProgress[ePlayer] = iProgress;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iProgress$[ebp]
	mov	DWORD PTR [ecx+eax*4+356], edx

; 4042 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastProgress
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iPotential$ = 12					; size = 4
?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastPotential, COMDAT
; _this$ = ecx

; 4046 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4047 : 	m_aiLastPotential[ePlayer] = iPotential;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iPotential$[ebp]
	mov	DWORD PTR [ecx+eax*4+444], edx

; 4048 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastPotential
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iPotential$ = 12					; size = 4
?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastBasePotential, COMDAT
; _this$ = ecx

; 4052 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4053 : 	m_aiLastBasePotential[ePlayer] = iPotential;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iPotential$[ebp]
	mov	DWORD PTR [ecx+eax*4+532], edx

; 4054 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastBasePotential
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eSpyOwner$ = 8						; size = 4
_iResult$ = 12						; size = 4
?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetSpyResult, COMDAT
; _this$ = ecx

; 4058 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4059 : 	m_aiResult[eSpyOwner] = iResult;

	mov	eax, DWORD PTR _eSpyOwner$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iResult$[ebp]
	mov	DWORD PTR [ecx+eax*4+620], edx

; 4060 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetSpyResult
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?HasCounterSpy@CvCityEspionage@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T240533 = -4						; size = 4
?HasCounterSpy@CvCityEspionage@@QAE_NXZ PROC		; CvCityEspionage::HasCounterSpy, COMDAT
; _this$ = ecx

; 4064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4065 : 	return m_aiSpyAssignment[m_pCity->getOwner()] != -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T240533[ebp], edx
	mov	eax, DWORD PTR $T240533[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+eax*4+4], -1
	setne	dl
	mov	al, dl

; 4066 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasCounterSpy@CvCityEspionage@@QAE_NXZ ENDP		; CvCityEspionage::HasCounterSpy
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z
_TEXT	SEGMENT
_i$224438 = -72						; size = 4
_i$224434 = -68						; size = 4
_i$224429 = -64						; size = 4
_i$224424 = -60						; size = 4
_i$224419 = -56						; size = 4
_ui$224414 = -52					; size = 4
_ui$224409 = -48					; size = 4
_ui$224404 = -44					; size = 4
_ui$224399 = -40					; size = 4
_uiNumSpyAssignment$ = -36				; size = 4
_uiVersion$ = -32					; size = 4
_iNumLastPotential$ = -28				; size = 4
_uiNumAmounts$ = -24					; size = 4
_iNumLastProgresses$ = -20				; size = 4
_iNumLastBasePotential$ = -16				; size = 4
_iNumResults$ = -12					; size = 4
_uiNumGoals$ = -8					; size = 4
_uiNumRates$ = -4					; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z PROC	; operator>>, COMDAT

; 4070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 4071 : 	uint uiVersion;
; 4072 : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4073 : 
; 4074 : 	uint uiNumSpyAssignment;
; 4075 : 	loadFrom >> uiNumSpyAssignment;

	lea	ecx, DWORD PTR _uiNumSpyAssignment$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4076 : 	for(uint ui = 0; ui < uiNumSpyAssignment; ui++)

	mov	DWORD PTR _ui$224399[ebp], 0
	jmp	SHORT $LN27@operator@4
$LN26@operator@4:
	mov	edx, DWORD PTR _ui$224399[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224399[ebp], edx
$LN27@operator@4:
	mov	eax, DWORD PTR _ui$224399[ebp]
	cmp	eax, DWORD PTR _uiNumSpyAssignment$[ebp]
	jae	SHORT $LN25@operator@4

; 4077 : 	{
; 4078 : 		loadFrom >> writeTo.m_aiSpyAssignment[ui];

	mov	ecx, DWORD PTR _ui$224399[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4079 : 	}

	jmp	SHORT $LN26@operator@4
$LN25@operator@4:

; 4080 : 
; 4081 : 	// amount
; 4082 : 	uint uiNumAmounts;
; 4083 : 	loadFrom >> uiNumAmounts;

	lea	ecx, DWORD PTR _uiNumAmounts$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4084 : 	for(uint ui = 0; ui < uiNumAmounts; ui++)

	mov	DWORD PTR _ui$224404[ebp], 0
	jmp	SHORT $LN24@operator@4
$LN23@operator@4:
	mov	edx, DWORD PTR _ui$224404[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224404[ebp], edx
$LN24@operator@4:
	mov	eax, DWORD PTR _ui$224404[ebp]
	cmp	eax, DWORD PTR _uiNumAmounts$[ebp]
	jae	SHORT $LN22@operator@4

; 4085 : 	{
; 4086 : 		loadFrom >> writeTo.m_aiAmount[ui];

	mov	ecx, DWORD PTR _ui$224404[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+92]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4087 : 	}

	jmp	SHORT $LN23@operator@4
$LN22@operator@4:

; 4088 : 
; 4089 : 	// rate
; 4090 : 	uint uiNumRates;
; 4091 : 	loadFrom >> uiNumRates;

	lea	ecx, DWORD PTR _uiNumRates$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4092 : 	for(uint ui = 0; ui < uiNumRates; ui++)

	mov	DWORD PTR _ui$224409[ebp], 0
	jmp	SHORT $LN21@operator@4
$LN20@operator@4:
	mov	edx, DWORD PTR _ui$224409[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224409[ebp], edx
$LN21@operator@4:
	mov	eax, DWORD PTR _ui$224409[ebp]
	cmp	eax, DWORD PTR _uiNumRates$[ebp]
	jae	SHORT $LN19@operator@4

; 4093 : 	{
; 4094 : 		loadFrom >> writeTo.m_aiRate[ui];

	mov	ecx, DWORD PTR _ui$224409[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+180]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4095 : 	}

	jmp	SHORT $LN20@operator@4
$LN19@operator@4:

; 4096 : 
; 4097 : 	// goal
; 4098 : 	uint uiNumGoals;
; 4099 : 	loadFrom >> uiNumGoals;

	lea	ecx, DWORD PTR _uiNumGoals$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4100 : 	for(uint ui = 0; ui < uiNumGoals; ui++)

	mov	DWORD PTR _ui$224414[ebp], 0
	jmp	SHORT $LN18@operator@4
$LN17@operator@4:
	mov	edx, DWORD PTR _ui$224414[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224414[ebp], edx
$LN18@operator@4:
	mov	eax, DWORD PTR _ui$224414[ebp]
	cmp	eax, DWORD PTR _uiNumGoals$[ebp]
	jae	SHORT $LN16@operator@4

; 4101 : 	{
; 4102 : 		loadFrom >> writeTo.m_aiGoal[ui];

	mov	ecx, DWORD PTR _ui$224414[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+268]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4103 : 	}

	jmp	SHORT $LN17@operator@4
$LN16@operator@4:

; 4104 : 
; 4105 : 	// last progress
; 4106 : 	int iNumLastProgresses;
; 4107 : 	loadFrom >> iNumLastProgresses;

	lea	ecx, DWORD PTR _iNumLastProgresses$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4108 : 	for(int i = 0; i < iNumLastProgresses; i++)

	mov	DWORD PTR _i$224419[ebp], 0
	jmp	SHORT $LN15@operator@4
$LN14@operator@4:
	mov	edx, DWORD PTR _i$224419[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224419[ebp], edx
$LN15@operator@4:
	mov	eax, DWORD PTR _i$224419[ebp]
	cmp	eax, DWORD PTR _iNumLastProgresses$[ebp]
	jge	SHORT $LN13@operator@4

; 4109 : 	{
; 4110 : 		loadFrom >> writeTo.m_aiLastProgress[i];

	mov	ecx, DWORD PTR _i$224419[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+356]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4111 : 	}

	jmp	SHORT $LN14@operator@4
$LN13@operator@4:

; 4112 : 
; 4113 : 	// last potential
; 4114 : 	int iNumLastPotential;
; 4115 : 	loadFrom >> iNumLastPotential;

	lea	ecx, DWORD PTR _iNumLastPotential$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4116 : 	for (int i = 0; i < iNumLastPotential; i++)

	mov	DWORD PTR _i$224424[ebp], 0
	jmp	SHORT $LN12@operator@4
$LN11@operator@4:
	mov	edx, DWORD PTR _i$224424[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224424[ebp], edx
$LN12@operator@4:
	mov	eax, DWORD PTR _i$224424[ebp]
	cmp	eax, DWORD PTR _iNumLastPotential$[ebp]
	jge	SHORT $LN10@operator@4

; 4117 : 	{
; 4118 : 		loadFrom >> writeTo.m_aiLastPotential[i];

	mov	ecx, DWORD PTR _i$224424[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+444]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4119 : 	}

	jmp	SHORT $LN11@operator@4
$LN10@operator@4:

; 4120 : 
; 4121 : 	// last base potential
; 4122 : 	int iNumLastBasePotential;
; 4123 : 	loadFrom >> iNumLastBasePotential;

	lea	ecx, DWORD PTR _iNumLastBasePotential$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4124 : 	for (int i = 0; i < iNumLastBasePotential; i++)

	mov	DWORD PTR _i$224429[ebp], 0
	jmp	SHORT $LN9@operator@4
$LN8@operator@4:
	mov	edx, DWORD PTR _i$224429[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224429[ebp], edx
$LN9@operator@4:
	mov	eax, DWORD PTR _i$224429[ebp]
	cmp	eax, DWORD PTR _iNumLastBasePotential$[ebp]
	jge	SHORT $LN7@operator@4

; 4125 : 	{
; 4126 : 		loadFrom >> writeTo.m_aiLastBasePotential[i];

	mov	ecx, DWORD PTR _i$224429[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+532]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4127 : 	}

	jmp	SHORT $LN8@operator@4
$LN7@operator@4:

; 4128 : 
; 4129 : 	// results
; 4130 : 	int iNumResults;
; 4131 : 	loadFrom >> iNumResults;

	lea	ecx, DWORD PTR _iNumResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4132 : 	for(int i = 0; i < iNumResults; i++)

	mov	DWORD PTR _i$224434[ebp], 0
	jmp	SHORT $LN6@operator@4
$LN5@operator@4:
	mov	edx, DWORD PTR _i$224434[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224434[ebp], edx
$LN6@operator@4:
	mov	eax, DWORD PTR _i$224434[ebp]
	cmp	eax, DWORD PTR _iNumResults$[ebp]
	jge	SHORT $LN4@operator@4

; 4133 : 	{
; 4134 : 		loadFrom >> writeTo.m_aiResult[i];

	mov	ecx, DWORD PTR _i$224434[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+620]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4135 : 	}

	jmp	SHORT $LN5@operator@4
$LN4@operator@4:

; 4136 : 
; 4137 : 	// num times robbed
; 4138 : 	loadFrom >> iNumResults;

	lea	ecx, DWORD PTR _iNumResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4139 : 	for (int i = 0; i < iNumResults; i++)

	mov	DWORD PTR _i$224438[ebp], 0
	jmp	SHORT $LN3@operator@4
$LN2@operator@4:
	mov	edx, DWORD PTR _i$224438[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224438[ebp], edx
$LN3@operator@4:
	mov	eax, DWORD PTR _i$224438[ebp]
	cmp	eax, DWORD PTR _iNumResults$[ebp]
	jge	SHORT $LN1@operator@4

; 4140 : 	{
; 4141 : 		loadFrom >> writeTo.m_aiNumTimesCityRobbed[i];

	mov	ecx, DWORD PTR _i$224438[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+708]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4142 : 	}

	jmp	SHORT $LN2@operator@4
$LN1@operator@4:

; 4143 : 
; 4144 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 4145 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z
_TEXT	SEGMENT
$T240633 = -76						; size = 4
$T240632 = -72						; size = 4
$T240631 = -68						; size = 4
$T240630 = -64						; size = 4
$T240629 = -60						; size = 4
$T240628 = -56						; size = 4
$T240627 = -52						; size = 4
$T240626 = -48						; size = 4
$T240625 = -44						; size = 4
_ui$224488 = -40					; size = 4
_ui$224483 = -36					; size = 4
_ui$224478 = -32					; size = 4
_ui$224473 = -28					; size = 4
_ui$224468 = -24					; size = 4
_ui$224463 = -20					; size = 4
_ui$224458 = -16					; size = 4
_ui$224453 = -12					; size = 4
_ui$224448 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z PROC	; operator<<, COMDAT

; 4149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 4150 : 	uint uiVersion = 0;

	mov	DWORD PTR _uiVersion$[ebp], 0

; 4151 : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 4152 : 
; 4153 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240625[ebp], 22		; 00000016H
	lea	ecx, DWORD PTR $T240625[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4154 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224448[ebp], 0
	jmp	SHORT $LN27@operator@5
$LN26@operator@5:
	mov	edx, DWORD PTR _ui$224448[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224448[ebp], edx
$LN27@operator@5:
	cmp	DWORD PTR _ui$224448[ebp], 22		; 00000016H
	jae	SHORT $LN25@operator@5

; 4155 : 	{
; 4156 : 		saveTo << readFrom.m_aiSpyAssignment[ui];

	mov	eax, DWORD PTR _ui$224448[ebp]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4157 : 	}

	jmp	SHORT $LN26@operator@5
$LN25@operator@5:

; 4158 : 
; 4159 : 	// amount
; 4160 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240626[ebp], 22		; 00000016H
	lea	eax, DWORD PTR $T240626[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4161 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224453[ebp], 0
	jmp	SHORT $LN24@operator@5
$LN23@operator@5:
	mov	ecx, DWORD PTR _ui$224453[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224453[ebp], ecx
$LN24@operator@5:
	cmp	DWORD PTR _ui$224453[ebp], 22		; 00000016H
	jae	SHORT $LN22@operator@5

; 4162 : 	{
; 4163 : 		saveTo << readFrom.m_aiAmount[ui];

	mov	edx, DWORD PTR _ui$224453[ebp]
	mov	eax, DWORD PTR _readFrom$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+92]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4164 : 	}

	jmp	SHORT $LN23@operator@5
$LN22@operator@5:

; 4165 : 
; 4166 : 	// rate
; 4167 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240627[ebp], 22		; 00000016H
	lea	edx, DWORD PTR $T240627[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4168 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224458[ebp], 0
	jmp	SHORT $LN21@operator@5
$LN20@operator@5:
	mov	eax, DWORD PTR _ui$224458[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224458[ebp], eax
$LN21@operator@5:
	cmp	DWORD PTR _ui$224458[ebp], 22		; 00000016H
	jae	SHORT $LN19@operator@5

; 4169 : 	{
; 4170 : 		saveTo << readFrom.m_aiRate[ui];

	mov	ecx, DWORD PTR _ui$224458[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+180]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4171 : 	}

	jmp	SHORT $LN20@operator@5
$LN19@operator@5:

; 4172 : 
; 4173 : 	// goal
; 4174 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240628[ebp], 22		; 00000016H
	lea	ecx, DWORD PTR $T240628[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4175 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224463[ebp], 0
	jmp	SHORT $LN18@operator@5
$LN17@operator@5:
	mov	edx, DWORD PTR _ui$224463[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224463[ebp], edx
$LN18@operator@5:
	cmp	DWORD PTR _ui$224463[ebp], 22		; 00000016H
	jae	SHORT $LN16@operator@5

; 4176 : 	{
; 4177 : 		saveTo << readFrom.m_aiGoal[ui];

	mov	eax, DWORD PTR _ui$224463[ebp]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+268]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4178 : 	}

	jmp	SHORT $LN17@operator@5
$LN16@operator@5:

; 4179 : 
; 4180 : 	// last progress
; 4181 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240629[ebp], 22		; 00000016H
	lea	eax, DWORD PTR $T240629[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4182 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224468[ebp], 0
	jmp	SHORT $LN15@operator@5
$LN14@operator@5:
	mov	ecx, DWORD PTR _ui$224468[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224468[ebp], ecx
$LN15@operator@5:
	cmp	DWORD PTR _ui$224468[ebp], 22		; 00000016H
	jae	SHORT $LN13@operator@5

; 4183 : 	{
; 4184 : 		saveTo << readFrom.m_aiLastProgress[ui];

	mov	edx, DWORD PTR _ui$224468[ebp]
	mov	eax, DWORD PTR _readFrom$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+356]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4185 : 	}

	jmp	SHORT $LN14@operator@5
$LN13@operator@5:

; 4186 : 
; 4187 : 	// last potential
; 4188 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240630[ebp], 22		; 00000016H
	lea	edx, DWORD PTR $T240630[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4189 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224473[ebp], 0
	jmp	SHORT $LN12@operator@5
$LN11@operator@5:
	mov	eax, DWORD PTR _ui$224473[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224473[ebp], eax
$LN12@operator@5:
	cmp	DWORD PTR _ui$224473[ebp], 22		; 00000016H
	jae	SHORT $LN10@operator@5

; 4190 : 	{
; 4191 : 		saveTo << readFrom.m_aiLastPotential[ui];

	mov	ecx, DWORD PTR _ui$224473[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+444]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4192 : 	}

	jmp	SHORT $LN11@operator@5
$LN10@operator@5:

; 4193 : 
; 4194 : 	// last base potential
; 4195 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240631[ebp], 22		; 00000016H
	lea	ecx, DWORD PTR $T240631[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4196 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224478[ebp], 0
	jmp	SHORT $LN9@operator@5
$LN8@operator@5:
	mov	edx, DWORD PTR _ui$224478[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224478[ebp], edx
$LN9@operator@5:
	cmp	DWORD PTR _ui$224478[ebp], 22		; 00000016H
	jae	SHORT $LN7@operator@5

; 4197 : 	{
; 4198 : 		saveTo << readFrom.m_aiLastBasePotential[ui];

	mov	eax, DWORD PTR _ui$224478[ebp]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+532]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4199 : 	}

	jmp	SHORT $LN8@operator@5
$LN7@operator@5:

; 4200 : 
; 4201 : 	// results
; 4202 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240632[ebp], 22		; 00000016H
	lea	eax, DWORD PTR $T240632[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4203 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224483[ebp], 0
	jmp	SHORT $LN6@operator@5
$LN5@operator@5:
	mov	ecx, DWORD PTR _ui$224483[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224483[ebp], ecx
$LN6@operator@5:
	cmp	DWORD PTR _ui$224483[ebp], 22		; 00000016H
	jae	SHORT $LN4@operator@5

; 4204 : 	{
; 4205 : 		saveTo << readFrom.m_aiResult[ui];

	mov	edx, DWORD PTR _ui$224483[ebp]
	mov	eax, DWORD PTR _readFrom$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+620]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4206 : 	}

	jmp	SHORT $LN5@operator@5
$LN4@operator@5:

; 4207 : 
; 4208 : 	// num times robbed
; 4209 : 	saveTo << MAX_MAJOR_CIVS;

	mov	DWORD PTR $T240633[ebp], 22		; 00000016H
	lea	edx, DWORD PTR $T240633[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4210 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224488[ebp], 0
	jmp	SHORT $LN3@operator@5
$LN2@operator@5:
	mov	eax, DWORD PTR _ui$224488[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224488[ebp], eax
$LN3@operator@5:
	cmp	DWORD PTR _ui$224488[ebp], 22		; 00000016H
	jae	SHORT $LN1@operator@5

; 4211 : 	{
; 4212 : 		saveTo << readFrom.m_aiNumTimesCityRobbed[ui];

	mov	ecx, DWORD PTR _ui$224488[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+708]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 4213 : 	}

	jmp	SHORT $LN2@operator@5
$LN1@operator@5:

; 4214 : 
; 4215 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 4216 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??0CvEspionageAI@@QAE@XZ			; CvEspionageAI::CvEspionageAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??0CvEspionageAI@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CvEspionageAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvEspionageAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$5
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvEspionageAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -72						; size = 4
__$EHRec$ = -12						; size = 12
??0CvEspionageAI@@QAE@XZ PROC				; CvEspionageAI::CvEspionageAI, COMDAT
; _this$ = ecx

; 4226 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvEspionageAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 628				; 00000274H
	call	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+732], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+736], -1

; 4227 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__ehhandler$??0CvEspionageAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvEspionageAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvEspionageAI@@QAE@XZ ENDP				; CvEspionageAI::CvEspionageAI
PUBLIC	?Uninit@CvEspionageAI@@QAEXXZ			; CvEspionageAI::Uninit
PUBLIC	??1CvEspionageAI@@QAE@XZ			; CvEspionageAI::~CvEspionageAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvEspionageAI@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1CvEspionageAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvEspionageAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvEspionageAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -88						; size = 4
__$EHRec$ = -12						; size = 12
??1CvEspionageAI@@QAE@XZ PROC				; CvEspionageAI::~CvEspionageAI, COMDAT
; _this$ = ecx

; 4231 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvEspionageAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 4232 : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Uninit

; 4233 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 628				; 00000274H
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 628				; 00000274H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__ehhandler$??1CvEspionageAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvEspionageAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvEspionageAI@@QAE@XZ ENDP				; CvEspionageAI::~CvEspionageAI
PUBLIC	?Reset@CvEspionageAI@@QAEXXZ			; CvEspionageAI::Reset
PUBLIC	?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z	; CvEspionageAI::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pPlayer$ = 8						; size = 4
?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z PROC		; CvEspionageAI::Init, COMDAT
; _this$ = ecx

; 4237 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4238 : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [eax], ecx

; 4239 : 
; 4240 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Reset

; 4241 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z ENDP		; CvEspionageAI::Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Uninit@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninit@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::Uninit, COMDAT
; _this$ = ecx

; 4245 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4246 : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Reset

; 4247 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::Uninit
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z		; BaseVector<int,0>::Destroy
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -124						; size = 4
$T241103 = -120						; size = 4
$T241092 = -112						; size = 4
$T241081 = -104						; size = 4
$T241070 = -96						; size = 4
$T241059 = -88						; size = 4
_i$241054 = -84						; size = 4
$T241033 = -76						; size = 4
_i$241028 = -72						; size = 4
$T241007 = -64						; size = 4
_i$241002 = -60						; size = 4
$T240988 = -56						; size = 4
$T240987 = -52						; size = 4
$T240986 = -48						; size = 4
$T240985 = -44						; size = 4
$T240984 = -40						; size = 4
$T240983 = -36						; size = 4
$T240982 = -32						; size = 4
_ui$224540 = -28					; size = 4
_ui$224535 = -24					; size = 4
_ui$224530 = -20					; size = 4
_ui$224525 = -16					; size = 4
_ui$224520 = -12					; size = 4
_ui$224515 = -8						; size = 4
_ui$224510 = -4						; size = 4
?Reset@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::Reset, COMDAT
; _this$ = ecx

; 4251 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 4252 : 	m_aiCivOutOfTechTurn.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T241007[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN30@Reset@3
	mov	DWORD PTR _i$241002[ebp], 0
	jmp	SHORT $LN28@Reset@3
$LN27@Reset@3:
	mov	edx, DWORD PTR _i$241002[ebp]
	add	edx, 1
	mov	DWORD PTR _i$241002[ebp], edx
$LN28@Reset@3:
	mov	eax, DWORD PTR $T241007[ebp]
	mov	ecx, DWORD PTR _i$241002[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN30@Reset@3
	jmp	SHORT $LN27@Reset@3
$LN30@Reset@3:
	mov	edx, DWORD PTR $T241007[ebp]
	mov	DWORD PTR [edx+4], 0

; 4253 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224510[ebp], 0
	jmp	SHORT $LN21@Reset@3
$LN20@Reset@3:
	mov	eax, DWORD PTR _ui$224510[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224510[ebp], eax
$LN21@Reset@3:
	cmp	DWORD PTR _ui$224510[ebp], 22		; 00000016H
	jae	SHORT $LN19@Reset@3

; 4254 : 	{
; 4255 : 		m_aiCivOutOfTechTurn.push_back(-1);

	mov	DWORD PTR $T240982[ebp], -1
	lea	ecx, DWORD PTR $T240982[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4256 : 	}

	jmp	SHORT $LN20@Reset@3
$LN19@Reset@3:

; 4257 : 
; 4258 : 	m_aiNumSpiesCaught.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 108				; 0000006cH
	mov	DWORD PTR $T241033[ebp], edx
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN45@Reset@3
	mov	DWORD PTR _i$241028[ebp], 0
	jmp	SHORT $LN43@Reset@3
$LN42@Reset@3:
	mov	ecx, DWORD PTR _i$241028[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$241028[ebp], ecx
$LN43@Reset@3:
	mov	edx, DWORD PTR $T241033[ebp]
	mov	eax, DWORD PTR _i$241028[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN45@Reset@3
	jmp	SHORT $LN42@Reset@3
$LN45@Reset@3:
	mov	ecx, DWORD PTR $T241033[ebp]
	mov	DWORD PTR [ecx+4], 0

; 4259 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224515[ebp], 0
	jmp	SHORT $LN18@Reset@3
$LN17@Reset@3:
	mov	edx, DWORD PTR _ui$224515[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224515[ebp], edx
$LN18@Reset@3:
	cmp	DWORD PTR _ui$224515[ebp], 22		; 00000016H
	jae	SHORT $LN16@Reset@3

; 4260 : 	{
; 4261 : 		m_aiNumSpiesCaught.push_back(0);

	mov	DWORD PTR $T240983[ebp], 0
	lea	eax, DWORD PTR $T240983[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4262 : 	}

	jmp	SHORT $LN17@Reset@3
$LN16@Reset@3:

; 4263 : 
; 4264 : 	m_aiNumSpiesKilled.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	mov	DWORD PTR $T241059[ebp], ecx
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN60@Reset@3
	mov	DWORD PTR _i$241054[ebp], 0
	jmp	SHORT $LN58@Reset@3
$LN57@Reset@3:
	mov	eax, DWORD PTR _i$241054[ebp]
	add	eax, 1
	mov	DWORD PTR _i$241054[ebp], eax
$LN58@Reset@3:
	mov	ecx, DWORD PTR $T241059[ebp]
	mov	edx, DWORD PTR _i$241054[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN60@Reset@3
	jmp	SHORT $LN57@Reset@3
$LN60@Reset@3:
	mov	eax, DWORD PTR $T241059[ebp]
	mov	DWORD PTR [eax+4], 0

; 4265 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224520[ebp], 0
	jmp	SHORT $LN15@Reset@3
$LN14@Reset@3:
	mov	ecx, DWORD PTR _ui$224520[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224520[ebp], ecx
$LN15@Reset@3:
	cmp	DWORD PTR _ui$224520[ebp], 22		; 00000016H
	jae	SHORT $LN13@Reset@3

; 4266 : 	{
; 4267 : 		m_aiNumSpiesKilled.push_back(0);

	mov	DWORD PTR $T240984[ebp], 0
	lea	edx, DWORD PTR $T240984[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4268 : 	}

	jmp	SHORT $LN14@Reset@3
$LN13@Reset@3:

; 4269 : 
; 4270 : 	m_aiNumSpiesDied.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 316				; 0000013cH
	mov	DWORD PTR $T241070[ebp], eax
	mov	ecx, DWORD PTR $T241070[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR $T241070[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T241070[ebp]
	call	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z	; BaseVector<int,0>::Destroy
	mov	edx, DWORD PTR $T241070[ebp]
	mov	DWORD PTR [edx+4], 0

; 4271 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224525[ebp], 0
	jmp	SHORT $LN12@Reset@3
$LN11@Reset@3:
	mov	eax, DWORD PTR _ui$224525[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224525[ebp], eax
$LN12@Reset@3:
	cmp	DWORD PTR _ui$224525[ebp], 22		; 00000016H
	jae	SHORT $LN10@Reset@3

; 4272 : 	{
; 4273 : 		m_aiNumSpiesDied.push_back(0);

	mov	DWORD PTR $T240985[ebp], 0
	lea	ecx, DWORD PTR $T240985[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4274 : 	}

	jmp	SHORT $LN11@Reset@3
$LN10@Reset@3:

; 4275 : 
; 4276 : 	m_aiTurnLastSpyCaught.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	mov	DWORD PTR $T241081[ebp], edx
	mov	eax, DWORD PTR $T241081[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR $T241081[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T241081[ebp]
	call	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z	; BaseVector<int,0>::Destroy
	mov	ecx, DWORD PTR $T241081[ebp]
	mov	DWORD PTR [ecx+4], 0

; 4277 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224530[ebp], 0
	jmp	SHORT $LN9@Reset@3
$LN8@Reset@3:
	mov	edx, DWORD PTR _ui$224530[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$224530[ebp], edx
$LN9@Reset@3:
	cmp	DWORD PTR _ui$224530[ebp], 22		; 00000016H
	jae	SHORT $LN7@Reset@3

; 4278 : 	{
; 4279 : 		m_aiTurnLastSpyCaught.push_back(-1);

	mov	DWORD PTR $T240986[ebp], -1
	lea	eax, DWORD PTR $T240986[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4280 : 	}

	jmp	SHORT $LN8@Reset@3
$LN7@Reset@3:

; 4281 : 
; 4282 : 	m_aiTurnLastSpyKilled.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	mov	DWORD PTR $T241092[ebp], ecx
	mov	edx, DWORD PTR $T241092[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR $T241092[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR $T241092[ebp]
	call	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z	; BaseVector<int,0>::Destroy
	mov	eax, DWORD PTR $T241092[ebp]
	mov	DWORD PTR [eax+4], 0

; 4283 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224535[ebp], 0
	jmp	SHORT $LN6@Reset@3
$LN5@Reset@3:
	mov	ecx, DWORD PTR _ui$224535[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$224535[ebp], ecx
$LN6@Reset@3:
	cmp	DWORD PTR _ui$224535[ebp], 22		; 00000016H
	jae	SHORT $LN4@Reset@3

; 4284 : 	{
; 4285 : 		m_aiTurnLastSpyKilled.push_back(-1);

	mov	DWORD PTR $T240987[ebp], -1
	lea	edx, DWORD PTR $T240987[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4286 : 	}

	jmp	SHORT $LN5@Reset@3
$LN4@Reset@3:

; 4287 : 
; 4288 : 	m_aiTurnLastSpyDied.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 628				; 00000274H
	mov	DWORD PTR $T241103[ebp], eax
	mov	ecx, DWORD PTR $T241103[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR $T241103[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T241103[ebp]
	call	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z	; BaseVector<int,0>::Destroy
	mov	edx, DWORD PTR $T241103[ebp]
	mov	DWORD PTR [edx+4], 0

; 4289 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$224540[ebp], 0
	jmp	SHORT $LN3@Reset@3
$LN2@Reset@3:
	mov	eax, DWORD PTR _ui$224540[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224540[ebp], eax
$LN3@Reset@3:
	cmp	DWORD PTR _ui$224540[ebp], 22		; 00000016H
	jae	SHORT $LN1@Reset@3

; 4290 : 	{
; 4291 : 		m_aiTurnLastSpyDied.push_back(-1);

	mov	DWORD PTR $T240988[ebp], -1
	lea	ecx, DWORD PTR $T240988[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 628				; 00000274H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 4292 : 	}

	jmp	SHORT $LN2@Reset@3
$LN1@Reset@3:

; 4293 : 
; 4294 : 	m_bUNCountdownStarted = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+732], 0

; 4295 : 	m_iTurnEspionageStarted = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+736], -1

; 4296 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::Reset
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >
PUBLIC	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
PUBLIC	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
PUBLIC	?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildMinorCityList
PUBLIC	?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDefenseCityList
PUBLIC	?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildOffenseCityList
PUBLIC	?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDiplomatCityList
PUBLIC	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
PUBLIC	?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ; CvEspionageAI::FindTargetSpyNumbers
PUBLIC	??_C@_0CG@OPGJNFPE@Re?9eval?3?5UN?5constructed?1reassign@ ; `string'
PUBLIC	?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateDiplomatSpies
PUBLIC	?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateDefensiveSpies
PUBLIC	?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateUnassignedSpies
PUBLIC	?AttemptCoups@CvEspionageAI@@QAEXXZ		; CvEspionageAI::AttemptCoups
PUBLIC	?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ	; CvEspionageAI::UpdateCivOutOfTechTurn
PUBLIC	?StealTechnology@CvEspionageAI@@QAEXXZ		; CvEspionageAI::StealTechnology
PUBLIC	__$ArrayPad$
PUBLIC	?DoTurn@CvEspionageAI@@QAEXXZ			; CvEspionageAI::DoTurn
EXTRN	?IsUnitedNationsActive@CvGame@@QAE_NXZ:PROC	; CvGame::IsUnitedNationsActive
;	COMDAT ??_C@_0CG@OPGJNFPE@Re?9eval?3?5UN?5constructed?1reassign@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0CG@OPGJNFPE@Re?9eval?3?5UN?5constructed?1reassign@ DB 'Re-eval: UN'
	DB	' constructed/reassign, %d,', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DoTurn@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?DoTurn@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DoTurn@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$17
	DD	03H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$19
	DD	02H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$23
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoTurn@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv477 = -472						; size = 4
tv487 = -468						; size = 4
_this$ = -464						; size = 4
$T241307 = -348						; size = 4
$T241264 = -344						; size = 4
$T241121 = -260						; size = 4
$T241117 = -256						; size = 4
$T241107 = -252						; size = 28
_pCity$224997 = -224					; size = 4
_iCity$224992 = -220					; size = 4
_pCity$224988 = -216					; size = 4
_iCity$224983 = -212					; size = 4
_pCity$224979 = -208					; size = 4
_iCity$224974 = -204					; size = 4
_pCity$224970 = -200					; size = 4
_iCity$224965 = -196					; size = 4
_pSpyCity$224962 = -192					; size = 4
_uiSpy$224956 = -188					; size = 4
_iCityStateIndex$224947 = -184				; size = 4
_iOffensiveIndex$224940 = -180				; size = 4
_iDefensiveIndex$224933 = -176				; size = 4
_iDiplomatIndex$224926 = -172				; size = 4
_pSpyCity$224922 = -168					; size = 4
_bAlreadyAssigned$224924 = -161				; size = 1
_uiSpy$224917 = -160					; size = 4
_strMsg$224586 = -156					; size = 28
__$ArrayPad$ = -128					; size = 4
_pSpy$224583 = -124					; size = 4
_ui$224579 = -120					; size = 4
_pEspionage$224578 = -116				; size = 4
_iTargetOffensiveSpies$ = -112				; size = 4
_apCityDefense$ = -108					; size = 16
_iTargetCityStateSpies$ = -92				; size = 4
_apCityMinor$ = -88					; size = 16
_iTargetDiplomatSpies$ = -72				; size = 4
_apCityOffense$ = -68					; size = 16
_iCorrectlyAssignedDefenseSpies$ = -52			; size = 4
_iCorrectlyAssignedCityStateSpies$ = -48		; size = 4
_iTargetDefensiveSpies$ = -44				; size = 4
_iCorrectlyAssignedOffenseSpies$ = -40			; size = 4
_pEspionage$ = -36					; size = 4
_apCityDiplomat$ = -32					; size = 16
_iCorrectlyAssignedDiplomatSpies$ = -16			; size = 4
__$EHRec$ = -12						; size = 12
?DoTurn@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::DoTurn, COMDAT
; _this$ = ecx

; 4322 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoTurn@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 460				; 000001ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4323 : 	// no humans, minor civs, or barbarians allowed!
; 4324 : 	if(m_pPlayer->isHuman() || m_pPlayer->isMinorCiv() || m_pPlayer->isBarbarian())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN68@DoTurn@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN68@DoTurn@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN69@DoTurn@2
$LN68@DoTurn@2:

; 4325 : 	{
; 4326 : 		return;

	jmp	$LN70@DoTurn@2
$LN69@DoTurn@2:

; 4327 : 	}
; 4328 : 
; 4329 : 	AI_PERF_FORMAT("AI-perf.csv", ("Espionage AI, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), m_pPlayer->getCivilizationShortDescription()) );
; 4330 : 
; 4331 : 	StealTechnology();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StealTechnology@CvEspionageAI@@QAEXXZ	; CvEspionageAI::StealTechnology

; 4332 : 	UpdateCivOutOfTechTurn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ ; CvEspionageAI::UpdateCivOutOfTechTurn

; 4333 : 	AttemptCoups();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AttemptCoups@CvEspionageAI@@QAEXXZ	; CvEspionageAI::AttemptCoups

; 4334 : 
; 4335 : 	// mark these spies available to reassign
; 4336 : 	EvaluateUnassignedSpies();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateUnassignedSpies

; 4337 : 	EvaluateDefensiveSpies();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateDefensiveSpies

; 4338 : 	EvaluateDiplomatSpies();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateDiplomatSpies

; 4339 : 
; 4340 : 	// when the UN countdown starts, mark all spies to be reassigned
; 4341 : 	if (!m_bUNCountdownStarted && GC.getGame().IsUnitedNationsActive())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+732]
	test	ecx, ecx
	jne	$LN67@DoTurn@2
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T241117[ebp], edx
	mov	ecx, DWORD PTR $T241117[ebp]
	call	?IsUnitedNationsActive@CvGame@@QAE_NXZ	; CvGame::IsUnitedNationsActive
	movzx	eax, al
	test	eax, eax
	je	$LN67@DoTurn@2

; 4342 : 	{
; 4343 : 		m_bUNCountdownStarted = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+732], 1

; 4344 : 		CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$224578[ebp], eax

; 4345 : 		for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$224579[ebp], 0
	jmp	SHORT $LN66@DoTurn@2
$LN65@DoTurn@2:
	mov	eax, DWORD PTR _ui$224579[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$224579[ebp], eax
$LN66@DoTurn@2:
	mov	ecx, DWORD PTR _pEspionage$224578[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T241121[ebp], edx
	mov	eax, DWORD PTR _ui$224579[ebp]
	cmp	eax, DWORD PTR $T241121[ebp]
	jae	$LN67@DoTurn@2

; 4346 : 		{
; 4347 : 			CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	ecx, DWORD PTR _ui$224579[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _pEspionage$224578[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _pSpy$224583[ebp], ecx

; 4348 : 			// don't process dead spies
; 4349 : 			if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	mov	eax, DWORD PTR _pSpy$224583[ebp]
	cmp	DWORD PTR [eax+16], 8
	jne	SHORT $LN63@DoTurn@2

; 4350 : 			{
; 4351 : 				continue;

	jmp	SHORT $LN65@DoTurn@2
$LN63@DoTurn@2:

; 4352 : 			}
; 4353 : 
; 4354 : 			pSpy->m_bEvaluateReassignment = true;

	mov	ecx, DWORD PTR _pSpy$224583[ebp]
	mov	BYTE PTR [ecx+25], 1

; 4355 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN62@DoTurn@2

; 4356 : 			{
; 4357 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$224586[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4358 : 				strMsg.Format("Re-eval: UN constructed/reassign, %d,", ui);

	mov	eax, DWORD PTR _ui$224579[ebp]
	push	eax
	push	OFFSET ??_C@_0CG@OPGJNFPE@Re?9eval?3?5UN?5constructed?1reassign@
	lea	ecx, DWORD PTR _strMsg$224586[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 4359 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR _pSpy$224583[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T241107[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv487[ebp], eax
	mov	eax, DWORD PTR tv487[ebp]
	mov	DWORD PTR tv477[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv477[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$224586[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T241107[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4360 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$224586[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$224578[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 4361 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$224586[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN62@DoTurn@2:

; 4362 : 		}

	jmp	$LN65@DoTurn@2
$LN67@DoTurn@2:

; 4363 : 	}
; 4364 : 
; 4365 : 	int iTargetOffensiveSpies = 0;

	mov	DWORD PTR _iTargetOffensiveSpies$[ebp], 0

; 4366 : 	int iTargetDefensiveSpies = 0;

	mov	DWORD PTR _iTargetDefensiveSpies$[ebp], 0

; 4367 : 	int iTargetCityStateSpies = 0;

	mov	DWORD PTR _iTargetCityStateSpies$[ebp], 0

; 4368 : 	int iTargetDiplomatSpies  = 0;

	mov	DWORD PTR _iTargetDiplomatSpies$[ebp], 0

; 4369 : 	FindTargetSpyNumbers(&iTargetOffensiveSpies, &iTargetDefensiveSpies, &iTargetCityStateSpies, &iTargetDiplomatSpies);

	lea	eax, DWORD PTR _iTargetDiplomatSpies$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iTargetCityStateSpies$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iTargetDefensiveSpies$[ebp]
	push	edx
	lea	eax, DWORD PTR _iTargetOffensiveSpies$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ; CvEspionageAI::FindTargetSpyNumbers

; 4370 : 
; 4371 : 	std::vector<CvCity*> apCityDiplomat;

	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	call	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 4372 : 	std::vector<CvCity*> apCityOffense;

	lea	ecx, DWORD PTR _apCityOffense$[ebp]
	call	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 4373 : 	std::vector<CvCity*> apCityDefense;

	lea	ecx, DWORD PTR _apCityDefense$[ebp]
	call	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 4374 : 	std::vector<CvCity*> apCityMinor;

	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	call	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 4375 : 	
; 4376 : 	if (iTargetDiplomatSpies > 0)

	cmp	DWORD PTR _iTargetDiplomatSpies$[ebp], 0
	jle	SHORT $LN61@DoTurn@2

; 4377 : 	{
; 4378 : 		BuildDiplomatCityList(apCityDiplomat);

	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDiplomatCityList
$LN61@DoTurn@2:

; 4379 : 	}
; 4380 : 
; 4381 : 	if (iTargetOffensiveSpies > 0)

	cmp	DWORD PTR _iTargetOffensiveSpies$[ebp], 0
	jle	SHORT $LN60@DoTurn@2

; 4382 : 	{
; 4383 : 		BuildOffenseCityList(apCityOffense);

	lea	edx, DWORD PTR _apCityOffense$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildOffenseCityList
$LN60@DoTurn@2:

; 4384 : 	}
; 4385 : 
; 4386 : 	if (iTargetDefensiveSpies > 0)

	cmp	DWORD PTR _iTargetDefensiveSpies$[ebp], 0
	jle	SHORT $LN59@DoTurn@2

; 4387 : 	{
; 4388 : 		BuildDefenseCityList(apCityDefense);

	lea	eax, DWORD PTR _apCityDefense$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDefenseCityList
$LN59@DoTurn@2:

; 4389 : 	}
; 4390 : 
; 4391 : 	if (iTargetCityStateSpies > 0)

	cmp	DWORD PTR _iTargetCityStateSpies$[ebp], 0
	jle	SHORT $LN58@DoTurn@2

; 4392 : 	{
; 4393 : 		BuildMinorCityList(apCityMinor);

	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildMinorCityList
$LN58@DoTurn@2:

; 4394 : 	}
; 4395 : 
; 4396 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 4397 : 
; 4398 : 	// loop through spies an extract all that aren't in a correct location
; 4399 : 	int iCorrectlyAssignedDiplomatSpies = 0;

	mov	DWORD PTR _iCorrectlyAssignedDiplomatSpies$[ebp], 0

; 4400 : 	int iCorrectlyAssignedDefenseSpies = 0;

	mov	DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp], 0

; 4401 : 	int iCorrectlyAssignedOffenseSpies = 0;

	mov	DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp], 0

; 4402 : 	int iCorrectlyAssignedCityStateSpies = 0;

	mov	DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp], 0

; 4403 : 
; 4404 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$224917[ebp], 0
	jmp	SHORT $LN57@DoTurn@2
$LN56@DoTurn@2:
	mov	eax, DWORD PTR _uiSpy$224917[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$224917[ebp], eax
$LN57@DoTurn@2:
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T241264[ebp], edx
	mov	eax, DWORD PTR _uiSpy$224917[ebp]
	cmp	eax, DWORD PTR $T241264[ebp]
	jae	$LN55@DoTurn@2

; 4405 : 	{
; 4406 : 		// dead spies are not processed
; 4407 : 		if(pEspionage->m_aSpyList[uiSpy].m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _uiSpy$224917[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+ecx+16], 8
	jne	SHORT $LN54@DoTurn@2

; 4408 : 		{
; 4409 : 			continue;

	jmp	SHORT $LN56@DoTurn@2
$LN54@DoTurn@2:

; 4410 : 		}
; 4411 : 
; 4412 : 		CvCity* pSpyCity = pEspionage->GetCityWithSpy(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$224917[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pSpyCity$224922[ebp], eax

; 4413 : 
; 4414 : 		// spies that are not assigned don't need to be processed
; 4415 : 		if(!pSpyCity)

	cmp	DWORD PTR _pSpyCity$224922[ebp], 0
	jne	SHORT $LN53@DoTurn@2

; 4416 : 		{
; 4417 : 			continue;

	jmp	SHORT $LN56@DoTurn@2
$LN53@DoTurn@2:

; 4418 : 		}
; 4419 : 
; 4420 : 		bool bAlreadyAssigned = false;

	mov	BYTE PTR _bAlreadyAssigned$224924[ebp], 0

; 4421 : 
; 4422 : 		// diplomat cities
; 4423 : 		if (!bAlreadyAssigned)

	movzx	edx, BYTE PTR _bAlreadyAssigned$224924[ebp]
	test	edx, edx
	jne	SHORT $LN52@DoTurn@2

; 4424 : 		{
; 4425 : 			// see if the spy is in any of the diplomat cities
; 4426 : 			for(int iDiplomatIndex = 0; iDiplomatIndex < iTargetDiplomatSpies && iDiplomatIndex < (int)apCityDiplomat.size(); iDiplomatIndex++)

	mov	DWORD PTR _iDiplomatIndex$224926[ebp], 0
	jmp	SHORT $LN51@DoTurn@2
$LN50@DoTurn@2:
	mov	eax, DWORD PTR _iDiplomatIndex$224926[ebp]
	add	eax, 1
	mov	DWORD PTR _iDiplomatIndex$224926[ebp], eax
$LN51@DoTurn@2:
	mov	ecx, DWORD PTR _iDiplomatIndex$224926[ebp]
	cmp	ecx, DWORD PTR _iTargetDiplomatSpies$[ebp]
	jge	SHORT $LN52@DoTurn@2
	mov	edx, DWORD PTR _apCityDiplomat$[ebp+8]
	sub	edx, DWORD PTR _apCityDiplomat$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _iDiplomatIndex$224926[ebp], edx
	jge	SHORT $LN52@DoTurn@2

; 4427 : 			{
; 4428 : 				if(pSpyCity == apCityDiplomat[iDiplomatIndex] && pEspionage->m_aSpyList[uiSpy].m_bIsDiplomat)

	mov	eax, DWORD PTR _apCityDiplomat$[ebp+4]
	mov	ecx, DWORD PTR _iDiplomatIndex$224926[ebp]
	mov	edx, DWORD PTR _pSpyCity$224922[ebp]
	cmp	edx, DWORD PTR [eax+ecx*4]
	jne	SHORT $LN48@DoTurn@2
	mov	eax, DWORD PTR _uiSpy$224917[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movzx	eax, BYTE PTR [edx+eax+24]
	test	eax, eax
	je	SHORT $LN48@DoTurn@2

; 4429 : 				{
; 4430 : 					iCorrectlyAssignedDiplomatSpies++;

	mov	ecx, DWORD PTR _iCorrectlyAssignedDiplomatSpies$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCorrectlyAssignedDiplomatSpies$[ebp], ecx

; 4431 : 					bAlreadyAssigned = true;

	mov	BYTE PTR _bAlreadyAssigned$224924[ebp], 1

; 4432 : 					break;

	jmp	SHORT $LN52@DoTurn@2
$LN48@DoTurn@2:

; 4433 : 				}
; 4434 : 			}

	jmp	SHORT $LN50@DoTurn@2
$LN52@DoTurn@2:

; 4435 : 		}
; 4436 : 
; 4437 : 		// defensive cities
; 4438 : 		if(!bAlreadyAssigned)

	movzx	edx, BYTE PTR _bAlreadyAssigned$224924[ebp]
	test	edx, edx
	jne	SHORT $LN47@DoTurn@2

; 4439 : 		{
; 4440 : 			// see if the spy is in any of the defensive cities
; 4441 : 			for(int iDefensiveIndex = 0; iDefensiveIndex < iTargetDefensiveSpies && iDefensiveIndex < (int)apCityDefense.size(); iDefensiveIndex++)

	mov	DWORD PTR _iDefensiveIndex$224933[ebp], 0
	jmp	SHORT $LN46@DoTurn@2
$LN45@DoTurn@2:
	mov	eax, DWORD PTR _iDefensiveIndex$224933[ebp]
	add	eax, 1
	mov	DWORD PTR _iDefensiveIndex$224933[ebp], eax
$LN46@DoTurn@2:
	mov	ecx, DWORD PTR _iDefensiveIndex$224933[ebp]
	cmp	ecx, DWORD PTR _iTargetDefensiveSpies$[ebp]
	jge	SHORT $LN47@DoTurn@2
	mov	edx, DWORD PTR _apCityDefense$[ebp+8]
	sub	edx, DWORD PTR _apCityDefense$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _iDefensiveIndex$224933[ebp], edx
	jge	SHORT $LN47@DoTurn@2

; 4442 : 			{
; 4443 : 				if(pSpyCity == apCityDefense[iDefensiveIndex])

	mov	eax, DWORD PTR _apCityDefense$[ebp+4]
	mov	ecx, DWORD PTR _iDefensiveIndex$224933[ebp]
	mov	edx, DWORD PTR _pSpyCity$224922[ebp]
	cmp	edx, DWORD PTR [eax+ecx*4]
	jne	SHORT $LN43@DoTurn@2

; 4444 : 				{
; 4445 : 					iCorrectlyAssignedDefenseSpies++;

	mov	eax, DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp], eax

; 4446 : 					bAlreadyAssigned = true;

	mov	BYTE PTR _bAlreadyAssigned$224924[ebp], 1

; 4447 : 					break;

	jmp	SHORT $LN47@DoTurn@2
$LN43@DoTurn@2:

; 4448 : 				}
; 4449 : 			}

	jmp	SHORT $LN45@DoTurn@2
$LN47@DoTurn@2:

; 4450 : 		}
; 4451 : 
; 4452 : 		// offensive cities
; 4453 : 		if(!bAlreadyAssigned)

	movzx	ecx, BYTE PTR _bAlreadyAssigned$224924[ebp]
	test	ecx, ecx
	jne	SHORT $LN42@DoTurn@2

; 4454 : 		{
; 4455 : 			// see if the spy is in any of the offensive cities
; 4456 : 			for(int iOffensiveIndex = 0; iOffensiveIndex < iTargetOffensiveSpies && iOffensiveIndex < (int)apCityOffense.size(); iOffensiveIndex++)

	mov	DWORD PTR _iOffensiveIndex$224940[ebp], 0
	jmp	SHORT $LN41@DoTurn@2
$LN40@DoTurn@2:
	mov	edx, DWORD PTR _iOffensiveIndex$224940[ebp]
	add	edx, 1
	mov	DWORD PTR _iOffensiveIndex$224940[ebp], edx
$LN41@DoTurn@2:
	mov	eax, DWORD PTR _iOffensiveIndex$224940[ebp]
	cmp	eax, DWORD PTR _iTargetOffensiveSpies$[ebp]
	jge	SHORT $LN42@DoTurn@2
	mov	ecx, DWORD PTR _apCityOffense$[ebp+8]
	sub	ecx, DWORD PTR _apCityOffense$[ebp+4]
	sar	ecx, 2
	cmp	DWORD PTR _iOffensiveIndex$224940[ebp], ecx
	jge	SHORT $LN42@DoTurn@2

; 4457 : 			{
; 4458 : 				if(pSpyCity == apCityOffense[iOffensiveIndex] && !pEspionage->m_aSpyList[uiSpy].m_bIsDiplomat)

	mov	edx, DWORD PTR _apCityOffense$[ebp+4]
	mov	eax, DWORD PTR _iOffensiveIndex$224940[ebp]
	mov	ecx, DWORD PTR _pSpyCity$224922[ebp]
	cmp	ecx, DWORD PTR [edx+eax*4]
	jne	SHORT $LN38@DoTurn@2
	mov	edx, DWORD PTR _uiSpy$224917[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+edx+24]
	test	edx, edx
	jne	SHORT $LN38@DoTurn@2

; 4459 : 				{
; 4460 : 					iCorrectlyAssignedOffenseSpies++;

	mov	eax, DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp], eax

; 4461 : 					bAlreadyAssigned = true;

	mov	BYTE PTR _bAlreadyAssigned$224924[ebp], 1

; 4462 : 					break;

	jmp	SHORT $LN42@DoTurn@2
$LN38@DoTurn@2:

; 4463 : 				}
; 4464 : 			}

	jmp	SHORT $LN40@DoTurn@2
$LN42@DoTurn@2:

; 4465 : 		}
; 4466 : 
; 4467 : 		// city-states
; 4468 : 		if (!bAlreadyAssigned)

	movzx	ecx, BYTE PTR _bAlreadyAssigned$224924[ebp]
	test	ecx, ecx
	jne	SHORT $LN173@DoTurn@2

; 4469 : 		{
; 4470 : 			// see if the spy is in any of the city-states
; 4471 : 			for (int iCityStateIndex = 0; iCityStateIndex < iTargetCityStateSpies && iCityStateIndex < (int)apCityMinor.size(); iCityStateIndex++)

	mov	DWORD PTR _iCityStateIndex$224947[ebp], 0
	jmp	SHORT $LN36@DoTurn@2
$LN35@DoTurn@2:
	mov	edx, DWORD PTR _iCityStateIndex$224947[ebp]
	add	edx, 1
	mov	DWORD PTR _iCityStateIndex$224947[ebp], edx
$LN36@DoTurn@2:
	mov	eax, DWORD PTR _iCityStateIndex$224947[ebp]
	cmp	eax, DWORD PTR _iTargetCityStateSpies$[ebp]
	jge	SHORT $LN173@DoTurn@2
	mov	ecx, DWORD PTR _apCityMinor$[ebp+8]
	sub	ecx, DWORD PTR _apCityMinor$[ebp+4]
	sar	ecx, 2
	cmp	DWORD PTR _iCityStateIndex$224947[ebp], ecx
	jge	SHORT $LN173@DoTurn@2

; 4472 : 			{
; 4473 : 				if (pSpyCity == apCityMinor[iCityStateIndex])

	mov	edx, DWORD PTR _apCityMinor$[ebp+4]
	mov	eax, DWORD PTR _iCityStateIndex$224947[ebp]
	mov	ecx, DWORD PTR _pSpyCity$224922[ebp]
	cmp	ecx, DWORD PTR [edx+eax*4]
	jne	SHORT $LN33@DoTurn@2

; 4474 : 				{
; 4475 : 					iCorrectlyAssignedCityStateSpies++;

	mov	edx, DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp]
	add	edx, 1
	mov	DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp], edx

; 4476 : 					bAlreadyAssigned = true;

	mov	BYTE PTR _bAlreadyAssigned$224924[ebp], 1

; 4477 : 					break;

	jmp	SHORT $LN173@DoTurn@2
$LN33@DoTurn@2:

; 4478 : 				}

	jmp	SHORT $LN35@DoTurn@2

; 4479 : 			}
; 4480 : 		}
; 4481 : 
; 4482 : 		// if the spy is flagged to be reassigned
; 4483 : 		if (pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment)

$LN173@DoTurn@2:
	mov	eax, DWORD PTR _uiSpy$224917[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movzx	eax, BYTE PTR [edx+eax+25]
	test	eax, eax
	je	SHORT $LN32@DoTurn@2

; 4484 : 		{
; 4485 : 			// if the spy is already assigned to a correct city, mark them as assigned
; 4486 : 			if (bAlreadyAssigned)

	movzx	ecx, BYTE PTR _bAlreadyAssigned$224924[ebp]
	test	ecx, ecx
	je	SHORT $LN31@DoTurn@2

; 4487 : 			{
; 4488 : 				pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment = false;		

	mov	edx, DWORD PTR _uiSpy$224917[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+edx+25], 0

; 4489 : 			}
; 4490 : 			else

	jmp	SHORT $LN32@DoTurn@2
$LN31@DoTurn@2:

; 4491 : 			{
; 4492 : 				// move spy out of target city
; 4493 : 				pEspionage->MoveSpyTo(NULL, uiSpy, false);

	push	0
	mov	edx, DWORD PTR _uiSpy$224917[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo
$LN32@DoTurn@2:

; 4494 : 			}
; 4495 : 		}
; 4496 : 	}

	jmp	$LN56@DoTurn@2
$LN55@DoTurn@2:

; 4497 : 
; 4498 : 	// go through spy list again and put spies in locations where they are needed
; 4499 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$224956[ebp], 0
	jmp	SHORT $LN29@DoTurn@2
$LN28@DoTurn@2:
	mov	eax, DWORD PTR _uiSpy$224956[ebp]
	add	eax, 1
	mov	DWORD PTR _uiSpy$224956[ebp], eax
$LN29@DoTurn@2:
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T241307[ebp], edx
	mov	eax, DWORD PTR _uiSpy$224956[ebp]
	cmp	eax, DWORD PTR $T241307[ebp]
	jae	$LN27@DoTurn@2

; 4500 : 	{
; 4501 : 		// dead spies are not processed
; 4502 : 		if(pEspionage->m_aSpyList[uiSpy].m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _uiSpy$224956[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+ecx+16], 8
	jne	SHORT $LN181@DoTurn@2

; 4503 : 		{
; 4504 : 			continue;

	jmp	SHORT $LN28@DoTurn@2

; 4505 : 		}
; 4506 : 
; 4507 : 		// if this spy is not to be re-evaluated
; 4508 : 		if (!pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment)

$LN181@DoTurn@2:
	mov	ecx, DWORD PTR _uiSpy$224956[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+ecx+25]
	test	ecx, ecx
	jne	SHORT $LN183@DoTurn@2

; 4509 : 		{
; 4510 : 			continue;

	jmp	SHORT $LN28@DoTurn@2

; 4511 : 		}
; 4512 : 
; 4513 : 		// we're assigning the spy now, so reset their evaluate statement
; 4514 : 		pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment = false;

$LN183@DoTurn@2:
	mov	edx, DWORD PTR _uiSpy$224956[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+edx+25], 0

; 4515 : 
; 4516 : 		CvCity* pSpyCity = pEspionage->GetCityWithSpy(uiSpy);

	mov	edx, DWORD PTR _uiSpy$224956[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pSpyCity$224962[ebp], eax

; 4517 : 
; 4518 : 		// spies that are already are in a city are assumed to be in the right place
; 4519 : 		if(pSpyCity)

	cmp	DWORD PTR _pSpyCity$224962[ebp], 0
	je	SHORT $LN24@DoTurn@2

; 4520 : 		{
; 4521 : 			continue;

	jmp	$LN28@DoTurn@2
$LN24@DoTurn@2:

; 4522 : 		}
; 4523 : 
; 4524 : 		// if we have remaining defensive spies to assign
; 4525 : 		if(iTargetDiplomatSpies > iCorrectlyAssignedDiplomatSpies)

	mov	eax, DWORD PTR _iTargetDiplomatSpies$[ebp]
	cmp	eax, DWORD PTR _iCorrectlyAssignedDiplomatSpies$[ebp]
	jle	$LN23@DoTurn@2

; 4526 : 		{
; 4527 : 			// walk through cities and an open spot for the spy
; 4528 : 			for(int iCity = 0; iCity < iTargetDiplomatSpies && iCity < (int)apCityDiplomat.size(); iCity++)

	mov	DWORD PTR _iCity$224965[ebp], 0
	jmp	SHORT $LN22@DoTurn@2
$LN21@DoTurn@2:
	mov	ecx, DWORD PTR _iCity$224965[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCity$224965[ebp], ecx
$LN22@DoTurn@2:
	mov	edx, DWORD PTR _iCity$224965[ebp]
	cmp	edx, DWORD PTR _iTargetDiplomatSpies$[ebp]
	jge	SHORT $LN20@DoTurn@2
	mov	eax, DWORD PTR _apCityDiplomat$[ebp+8]
	sub	eax, DWORD PTR _apCityDiplomat$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _iCity$224965[ebp], eax
	jge	SHORT $LN20@DoTurn@2

; 4529 : 			{
; 4530 : 				CvCity* pCity = apCityDiplomat[iCity];

	mov	ecx, DWORD PTR _apCityDiplomat$[ebp+4]
	mov	edx, DWORD PTR _iCity$224965[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pCity$224970[ebp], eax

; 4531 : 
; 4532 : 				// if a spy is already in this city, skip it
; 4533 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	mov	ecx, DWORD PTR _pCity$224970[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	cmp	eax, -1
	je	SHORT $LN19@DoTurn@2

; 4534 : 				{
; 4535 : 					continue;

	jmp	SHORT $LN21@DoTurn@2
$LN19@DoTurn@2:

; 4536 : 				}
; 4537 : 
; 4538 : 				pEspionage->MoveSpyTo(pCity, uiSpy, true);

	push	1
	mov	edx, DWORD PTR _uiSpy$224956[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$224970[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4539 : 				iCorrectlyAssignedDefenseSpies++;

	mov	ecx, DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp], ecx

; 4540 : 				break;

	jmp	SHORT $LN20@DoTurn@2

; 4541 : 			}

	jmp	SHORT $LN21@DoTurn@2
$LN20@DoTurn@2:

; 4542 : 		}
; 4543 : 		// if we have remaining defensive spies to assign
; 4544 : 		else if(iTargetDefensiveSpies > iCorrectlyAssignedDefenseSpies)

	jmp	$LN18@DoTurn@2
$LN23@DoTurn@2:
	mov	edx, DWORD PTR _iTargetDefensiveSpies$[ebp]
	cmp	edx, DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp]
	jle	$LN17@DoTurn@2

; 4545 : 		{
; 4546 : 			// walk through cities and an open spot for the spy
; 4547 : 			for(int iCity = 0; iCity < iTargetDefensiveSpies && iCity < (int)apCityDefense.size(); iCity++)

	mov	DWORD PTR _iCity$224974[ebp], 0
	jmp	SHORT $LN16@DoTurn@2
$LN15@DoTurn@2:
	mov	eax, DWORD PTR _iCity$224974[ebp]
	add	eax, 1
	mov	DWORD PTR _iCity$224974[ebp], eax
$LN16@DoTurn@2:
	mov	ecx, DWORD PTR _iCity$224974[ebp]
	cmp	ecx, DWORD PTR _iTargetDefensiveSpies$[ebp]
	jge	SHORT $LN14@DoTurn@2
	mov	edx, DWORD PTR _apCityDefense$[ebp+8]
	sub	edx, DWORD PTR _apCityDefense$[ebp+4]
	sar	edx, 2
	cmp	DWORD PTR _iCity$224974[ebp], edx
	jge	SHORT $LN14@DoTurn@2

; 4548 : 			{
; 4549 : 				CvCity* pCity = apCityDefense[iCity];

	mov	eax, DWORD PTR _apCityDefense$[ebp+4]
	mov	ecx, DWORD PTR _iCity$224974[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pCity$224979[ebp], edx

; 4550 : 
; 4551 : 				// if a spy is already in this city, skip it
; 4552 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	mov	eax, DWORD PTR _pCity$224979[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	cmp	eax, -1
	je	SHORT $LN13@DoTurn@2

; 4553 : 				{
; 4554 : 					continue;

	jmp	SHORT $LN15@DoTurn@2
$LN13@DoTurn@2:

; 4555 : 				}
; 4556 : 
; 4557 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	push	0
	mov	ecx, DWORD PTR _uiSpy$224956[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCity$224979[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4558 : 				iCorrectlyAssignedDefenseSpies++;

	mov	eax, DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCorrectlyAssignedDefenseSpies$[ebp], eax

; 4559 : 				break;

	jmp	SHORT $LN14@DoTurn@2

; 4560 : 			}

	jmp	SHORT $LN15@DoTurn@2
$LN14@DoTurn@2:

; 4561 : 		}
; 4562 : 		// if we have remaining offensive spies to assign
; 4563 : 		else if(iTargetOffensiveSpies > iCorrectlyAssignedOffenseSpies)

	jmp	$LN18@DoTurn@2
$LN17@DoTurn@2:
	mov	ecx, DWORD PTR _iTargetOffensiveSpies$[ebp]
	cmp	ecx, DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp]
	jle	$LN11@DoTurn@2

; 4564 : 		{
; 4565 : 			for(int iCity = 0; iCity < iTargetOffensiveSpies && iCity < (int)apCityOffense.size(); iCity++)

	mov	DWORD PTR _iCity$224983[ebp], 0
	jmp	SHORT $LN10@DoTurn@2
$LN9@DoTurn@2:
	mov	edx, DWORD PTR _iCity$224983[ebp]
	add	edx, 1
	mov	DWORD PTR _iCity$224983[ebp], edx
$LN10@DoTurn@2:
	mov	eax, DWORD PTR _iCity$224983[ebp]
	cmp	eax, DWORD PTR _iTargetOffensiveSpies$[ebp]
	jge	SHORT $LN8@DoTurn@2
	mov	ecx, DWORD PTR _apCityOffense$[ebp+8]
	sub	ecx, DWORD PTR _apCityOffense$[ebp+4]
	sar	ecx, 2
	cmp	DWORD PTR _iCity$224983[ebp], ecx
	jge	SHORT $LN8@DoTurn@2

; 4566 : 			{
; 4567 : 				CvCity* pCity = apCityOffense[iCity];

	mov	edx, DWORD PTR _apCityOffense$[ebp+4]
	mov	eax, DWORD PTR _iCity$224983[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pCity$224988[ebp], ecx

; 4568 : 
; 4569 : 				// if a spy is already in this city, skip it
; 4570 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	mov	edx, DWORD PTR _pCity$224988[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	cmp	eax, -1
	je	SHORT $LN7@DoTurn@2

; 4571 : 				{
; 4572 : 					continue;

	jmp	SHORT $LN9@DoTurn@2
$LN7@DoTurn@2:

; 4573 : 				}
; 4574 : 
; 4575 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	push	0
	mov	eax, DWORD PTR _uiSpy$224956[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$224988[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4576 : 				iCorrectlyAssignedOffenseSpies++;

	mov	edx, DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp]
	add	edx, 1
	mov	DWORD PTR _iCorrectlyAssignedOffenseSpies$[ebp], edx

; 4577 : 				break;

	jmp	SHORT $LN8@DoTurn@2

; 4578 : 			}

	jmp	SHORT $LN9@DoTurn@2
$LN8@DoTurn@2:

; 4579 : 		}
; 4580 : 		// if we have remaining city-state spies to assign
; 4581 : 		else if (iTargetCityStateSpies > iCorrectlyAssignedCityStateSpies)

	jmp	$LN18@DoTurn@2
$LN11@DoTurn@2:
	mov	eax, DWORD PTR _iTargetCityStateSpies$[ebp]
	cmp	eax, DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp]
	jle	$LN18@DoTurn@2

; 4582 : 		{
; 4583 : 			for (int iCity = 0; iCity < iTargetCityStateSpies && iCity < (int)apCityMinor.size(); iCity++)

	mov	DWORD PTR _iCity$224992[ebp], 0
	jmp	SHORT $LN4@DoTurn@2
$LN3@DoTurn@2:
	mov	ecx, DWORD PTR _iCity$224992[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCity$224992[ebp], ecx
$LN4@DoTurn@2:
	mov	edx, DWORD PTR _iCity$224992[ebp]
	cmp	edx, DWORD PTR _iTargetCityStateSpies$[ebp]
	jge	SHORT $LN18@DoTurn@2
	mov	eax, DWORD PTR _apCityMinor$[ebp+8]
	sub	eax, DWORD PTR _apCityMinor$[ebp+4]
	sar	eax, 2
	cmp	DWORD PTR _iCity$224992[ebp], eax
	jge	SHORT $LN18@DoTurn@2

; 4584 : 			{
; 4585 : 				CvCity* pCity = apCityMinor[iCity];

	mov	ecx, DWORD PTR _apCityMinor$[ebp+4]
	mov	edx, DWORD PTR _iCity$224992[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pCity$224997[ebp], eax

; 4586 : 
; 4587 : 				// if a spy is already in this city, skip it
; 4588 : 				if (pEspionage->GetSpyIndexInCity(pCity) != -1)

	mov	ecx, DWORD PTR _pCity$224997[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	cmp	eax, -1
	je	SHORT $LN1@DoTurn@2

; 4589 : 				{
; 4590 : 					continue;

	jmp	SHORT $LN3@DoTurn@2
$LN1@DoTurn@2:

; 4591 : 				}
; 4592 : 
; 4593 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	push	0
	mov	edx, DWORD PTR _uiSpy$224956[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$224997[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4594 : 				iCorrectlyAssignedCityStateSpies++;

	mov	ecx, DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iCorrectlyAssignedCityStateSpies$[ebp], ecx

; 4595 : 				break;

	jmp	SHORT $LN18@DoTurn@2

; 4596 : 			}

	jmp	SHORT $LN3@DoTurn@2
$LN18@DoTurn@2:

; 4597 : 		}
; 4598 : 	}

	jmp	$LN28@DoTurn@2
$LN27@DoTurn@2:

; 4599 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _apCityDefense$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _apCityOffense$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN70@DoTurn@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$224586[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T241107[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _apCityOffense$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _apCityDefense$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$17:
	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$19:
	lea	ecx, DWORD PTR _apCityDefense$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$21:
	lea	ecx, DWORD PTR _apCityOffense$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$23:
	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__ehhandler$?DoTurn@CvEspionageAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoTurn@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoTurn@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::DoTurn
EXTRN	?SetNoTradeTech@CvTeamTechs@@QAEXW4TechTypes@@_N@Z:PROC ; CvTeamTechs::SetNoTradeTech
EXTRN	?setHasTech@CvTeam@@QAEXW4TechTypes@@_NW4PlayerTypes@@11@Z:PROC ; CvTeam::setHasTech
; Function compile flags: /Odtp
;	COMDAT ?StealTechnology@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv233 = -148						; size = 4
tv283 = -144						; size = 4
_this$ = -140						; size = 4
$T241740 = -136						; size = 4
$T241736 = -132						; size = 4
$T241732 = -128						; size = 4
$T241723 = -124						; size = 4
$T241714 = -120						; size = 4
$T241702 = -116						; size = 4
$T241693 = -112						; size = 4
$T241684 = -104						; size = 4
$T241683 = -100						; size = 4
$T241652 = -96						; size = 4
$T241647 = -92						; size = 4
$T241643 = -85						; size = 1
$T241632 = -84						; size = 4
$T241628 = -77						; size = 1
_iMapY$241661 = -76					; size = 4
_iMapX$241660 = -72					; size = 4
$T241621 = -68						; size = 4
$T241617 = -64						; size = 4
$T241610 = -60						; size = 4
$T241603 = -56						; size = 4
$T241596 = -52						; size = 4
$T241584 = -48						; size = 4
$T241580 = -44						; size = 4
_pDefendingPlayerEspionage$225021 = -40			; size = 4
_pCityEspionage$225019 = -36				; size = 4
_pCity$225017 = -32					; size = 4
_pPlot$225015 = -28					; size = 4
_eStolenTech$225014 = -24				; size = 4
_eTeam$225013 = -20					; size = 4
_iHeistLocationCounter$225009 = -16			; size = 4
_eDefendingPlayer$225007 = -12				; size = 4
_uiDefendingPlayer$225003 = -8				; size = 4
_pEspionage$ = -4					; size = 4
?StealTechnology@CvEspionageAI@@QAEXXZ PROC		; CvEspionageAI::StealTechnology, COMDAT
; _this$ = ecx

; 4604 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	DWORD PTR _this$[ebp], ecx

; 4605 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 4606 : 
; 4607 : 	// try to steal technologies
; 4608 : 	for(uint uiDefendingPlayer = 0; uiDefendingPlayer < MAX_MAJOR_CIVS; uiDefendingPlayer++)

	mov	DWORD PTR _uiDefendingPlayer$225003[ebp], 0
	jmp	SHORT $LN11@StealTechn
$LN10@StealTechn:
	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	add	ecx, 1
	mov	DWORD PTR _uiDefendingPlayer$225003[ebp], ecx
$LN11@StealTechn:
	cmp	DWORD PTR _uiDefendingPlayer$225003[ebp], 22 ; 00000016H
	jae	$LN12@StealTechn

; 4609 : 	{
; 4610 : 		PlayerTypes eDefendingPlayer = (PlayerTypes)uiDefendingPlayer;

	mov	edx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	mov	DWORD PTR _eDefendingPlayer$225007[ebp], edx

; 4611 : 		int iHeistLocationCounter = 0;

	mov	DWORD PTR _iHeistLocationCounter$225009[ebp], 0

; 4612 : 		while(pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] > 0)

$LN14@StealTechn:
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jle	$LN7@StealTechn

; 4613 : 		{
; 4614 : 			// steal a tech
; 4615 : 			CvAssertMsg(pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer].size() > 0, "pEspionage->m_aaPlayerStealableTechList[uiPlayer] list is empty. Not good");
; 4616 : 			TeamTypes eTeam = m_pPlayer->getTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T241580[ebp], ecx
	mov	edx, DWORD PTR $T241580[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$225013[ebp], eax

; 4617 : 			TechTypes eStolenTech = pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer][0];

	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _pEspionage$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T241584[ebp], ecx
	xor	eax, eax
	shl	eax, 2
	mov	ecx, DWORD PTR $T241584[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR _eStolenTech$225014[ebp], eax

; 4618 : 			GET_TEAM(eTeam).setHasTech(eStolenTech, true, m_pPlayer->GetID(), true, true);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T241596[ebp], eax
	push	1
	push	1
	mov	ecx, DWORD PTR $T241596[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _eStolenTech$225014[ebp]
	push	edx
	mov	ecx, DWORD PTR _eTeam$225013[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	call	?setHasTech@CvTeam@@QAEXW4TechTypes@@_NW4PlayerTypes@@11@Z ; CvTeam::setHasTech

; 4619 : 			GET_TEAM(eTeam).GetTeamTechs()->SetNoTradeTech(eStolenTech, true);

	mov	eax, DWORD PTR _eTeam$225013[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T241603[ebp], eax
	push	1
	mov	ecx, DWORD PTR _eStolenTech$225014[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T241603[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?SetNoTradeTech@CvTeamTechs@@QAEXW4TechTypes@@_N@Z ; CvTeamTechs::SetNoTradeTech

; 4620 : 
; 4621 : 			// send out notifications to the parties that were stolen from
; 4622 : 			CvPlot* pPlot = GC.getMap().plot(pEspionage->m_aHeistLocations[uiDefendingPlayer][iHeistLocationCounter].m_iX, pEspionage->m_aHeistLocations[uiDefendingPlayer][iHeistLocationCounter].m_iY);

	mov	edx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+edx+916]
	mov	edx, DWORD PTR _iHeistLocationCounter$225009[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T241610[ebp], eax
	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+ecx+916]
	mov	ecx, DWORD PTR _iHeistLocationCounter$225009[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T241617[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T241621[ebp], eax
	mov	ecx, DWORD PTR $T241610[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T241684[ebp], edx
	mov	eax, DWORD PTR $T241617[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T241683[ebp], ecx
	cmp	DWORD PTR $T241683[ebp], -2147483647	; 80000001H
	je	SHORT $LN42@StealTechn
	cmp	DWORD PTR $T241684[ebp], -2147483647	; 80000001H
	jne	SHORT $LN43@StealTechn
$LN42@StealTechn:
	mov	DWORD PTR _pPlot$225015[ebp], 0
	jmp	$LN44@StealTechn
$LN43@StealTechn:
	mov	edx, DWORD PTR $T241621[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T241628[ebp], al
	mov	ecx, DWORD PTR $T241621[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T241632[ebp], edx
	movzx	eax, BYTE PTR $T241628[ebp]
	test	eax, eax
	je	SHORT $LN55@StealTechn
	cmp	DWORD PTR $T241683[ebp], 0
	jge	SHORT $LN54@StealTechn
	mov	eax, DWORD PTR $T241683[ebp]
	cdq
	idiv	DWORD PTR $T241632[ebp]
	add	edx, DWORD PTR $T241632[ebp]
	mov	DWORD PTR _iMapX$241660[ebp], edx
	jmp	SHORT $LN56@StealTechn
	jmp	SHORT $LN55@StealTechn
$LN54@StealTechn:
	mov	ecx, DWORD PTR $T241683[ebp]
	cmp	ecx, DWORD PTR $T241632[ebp]
	jl	SHORT $LN55@StealTechn
	mov	eax, DWORD PTR $T241683[ebp]
	cdq
	idiv	DWORD PTR $T241632[ebp]
	mov	DWORD PTR _iMapX$241660[ebp], edx
	jmp	SHORT $LN56@StealTechn
$LN55@StealTechn:
	mov	edx, DWORD PTR $T241683[ebp]
	mov	DWORD PTR _iMapX$241660[ebp], edx
$LN56@StealTechn:
	mov	eax, DWORD PTR $T241621[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T241643[ebp], cl
	mov	edx, DWORD PTR $T241621[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T241647[ebp], eax
	movzx	ecx, BYTE PTR $T241643[ebp]
	push	ecx
	mov	edx, DWORD PTR $T241647[ebp]
	push	edx
	mov	eax, DWORD PTR $T241684[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$241661[ebp], eax
	mov	ecx, DWORD PTR _iMapY$241661[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMapX$241660[ebp]
	push	edx
	mov	ecx, DWORD PTR $T241621[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN46@StealTechn
	mov	eax, DWORD PTR $T241621[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T241652[ebp], ecx
	mov	edx, DWORD PTR _iMapY$241661[ebp]
	imul	edx, DWORD PTR $T241652[ebp]
	add	edx, DWORD PTR _iMapX$241660[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T241621[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv283[ebp], edx
	jmp	SHORT $LN47@StealTechn
$LN46@StealTechn:
	mov	DWORD PTR tv283[ebp], 0
$LN47@StealTechn:
	mov	ecx, DWORD PTR tv283[ebp]
	mov	DWORD PTR _pPlot$225015[ebp], ecx
$LN44@StealTechn:

; 4623 : 			CvAssertMsg(pPlot, "Could not find plot location for HeistLocation");
; 4624 : 			if(pPlot)

	cmp	DWORD PTR _pPlot$225015[ebp], 0
	je	$LN6@StealTechn

; 4625 : 			{
; 4626 : 				CvCity* pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR _pPlot$225015[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$225017[ebp], eax

; 4627 : 				CvAssertMsg(pCity, "Plot does not contain a city");
; 4628 : 				if(pCity)

	cmp	DWORD PTR _pCity$225017[ebp], 0
	je	$LN6@StealTechn

; 4629 : 				{
; 4630 : 					CvAssertMsg(pCity->getOwner() == uiDefendingPlayer, "City does not belong to player. This is very strange");
; 4631 : 					CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pCity$225017[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$225019[ebp], eax

; 4632 : 					CvAssertMsg(pCityEspionage, "City did not have CityEspionage data");
; 4633 : 					if(pCityEspionage)

	cmp	DWORD PTR _pCityEspionage$225019[ebp], 0
	je	SHORT $LN6@StealTechn

; 4634 : 					{
; 4635 : 						CvPlayerEspionage* pDefendingPlayerEspionage = GET_PLAYER(eDefendingPlayer).GetEspionage();

	mov	edx, DWORD PTR _eDefendingPlayer$225007[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241693[ebp], edx
	mov	ecx, DWORD PTR $T241693[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pDefendingPlayerEspionage$225021[ebp], eax

; 4636 : 						if(pDefendingPlayerEspionage)

	cmp	DWORD PTR _pDefendingPlayerEspionage$225021[ebp], 0
	je	SHORT $LN6@StealTechn

; 4637 : 						{
; 4638 : 							pDefendingPlayerEspionage->AddSpyMessage(pCity->getX(), pCity->getY(), m_pPlayer->GetID(), pCityEspionage->m_aiResult[m_pPlayer->GetID()], eStolenTech);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T241702[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T241714[ebp], edx
	mov	eax, DWORD PTR _pCity$225017[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR $T241723[ebp], ecx
	mov	edx, DWORD PTR _pCity$225017[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T241732[ebp], eax
	mov	ecx, DWORD PTR _eStolenTech$225014[ebp]
	push	ecx
	mov	edx, DWORD PTR $T241702[ebp]
	mov	eax, DWORD PTR _pCityEspionage$225019[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+620]
	push	ecx
	mov	edx, DWORD PTR $T241714[ebp]
	push	edx
	mov	eax, DWORD PTR $T241723[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241732[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDefendingPlayerEspionage$225021[ebp]
	call	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
$LN6@StealTechn:

; 4639 : 						}
; 4640 : 					}
; 4641 : 				}
; 4642 : 			}
; 4643 : 			iHeistLocationCounter++;

	mov	edx, DWORD PTR _iHeistLocationCounter$225009[ebp]
	add	edx, 1
	mov	DWORD PTR _iHeistLocationCounter$225009[ebp], edx

; 4644 : 
; 4645 : 			// recalculate the num techs to steal list
; 4646 : 			pEspionage->BuildStealableTechList((PlayerTypes)uiDefendingPlayer);

	mov	eax, DWORD PTR _uiDefendingPlayer$225003[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 4647 : 			if(pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer].size() > 0 && pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] > 0)

	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _pEspionage$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T241736[ebp], ecx
	mov	eax, DWORD PTR $T241736[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T241740[ebp], ecx
	cmp	DWORD PTR $T241740[ebp], 0
	jbe	SHORT $LN99@StealTechn
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+720]
	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	jle	SHORT $LN99@StealTechn

; 4648 : 			{
; 4649 : 				pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer]--;

	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+720]
	mov	ecx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv233[ebp], edx
	mov	eax, DWORD PTR tv233[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR tv233[ebp]
	mov	DWORD PTR [edx], ecx

; 4650 : 			}
; 4651 : 			else

	jmp	SHORT $LN1@StealTechn

; 4652 : 			{
; 4653 : 				pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] = 0;

$LN99@StealTechn:
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR _uiDefendingPlayer$225003[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN1@StealTechn:

; 4654 : 			}
; 4655 : 		}

	jmp	$LN14@StealTechn
$LN7@StealTechn:

; 4656 : 	}

	jmp	$LN10@StealTechn
$LN12@StealTechn:

; 4657 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StealTechnology@CvEspionageAI@@QAEXXZ ENDP		; CvEspionageAI::StealTechnology
_TEXT	ENDS
PUBLIC	??_C@_0BK@EMNCELHG@AI?5no?5more?5tech?5to?5steal?0?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BK@EMNCELHG@AI?5no?5more?5tech?5to?5steal?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BK@EMNCELHG@AI?5no?5more?5tech?5to?5steal?0?$AA@ DB 'AI no more te'
	DB	'ch to steal,', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ$0
__ehfuncinfo$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T241786 = -80						; size = 4
$T241778 = -76						; size = 4
$T241774 = -72						; size = 4
$T241770 = -68						; size = 4
$T241766 = -64						; size = 4
$T241762 = -60						; size = 4
_strMsg$225040 = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_eOtherPlayer$225034 = -24				; size = 4
_ui$225030 = -20					; size = 4
_pEspionage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::UpdateCivOutOfTechTurn, COMDAT
; _this$ = ecx

; 4660 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4661 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 4662 : 
; 4663 : 	// determine which civs have run out of techs to steal
; 4664 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225030[ebp], 0
	jmp	SHORT $LN7@UpdateCivO
$LN6@UpdateCivO:
	mov	ecx, DWORD PTR _ui$225030[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225030[ebp], ecx
$LN7@UpdateCivO:
	cmp	DWORD PTR _ui$225030[ebp], 22		; 00000016H
	jae	$LN8@UpdateCivO

; 4665 : 	{
; 4666 : 		PlayerTypes eOtherPlayer = (PlayerTypes)ui;

	mov	edx, DWORD PTR _ui$225030[ebp]
	mov	DWORD PTR _eOtherPlayer$225034[ebp], edx

; 4667 : 
; 4668 : 		if(m_pPlayer->GetID() == eOtherPlayer)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T241762[ebp], edx
	mov	eax, DWORD PTR $T241762[ebp]
	cmp	eax, DWORD PTR _eOtherPlayer$225034[ebp]
	jne	SHORT $LN4@UpdateCivO

; 4669 : 		{
; 4670 : 			continue;

	jmp	SHORT $LN6@UpdateCivO
$LN4@UpdateCivO:

; 4671 : 		}
; 4672 : 
; 4673 : 		// if surveillance has not been established, continue
; 4674 : 		if(!pEspionage->IsAnySurveillanceEstablished(eOtherPlayer))

	mov	ecx, DWORD PTR _eOtherPlayer$225034[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsAnySurveillanceEstablished
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@UpdateCivO

; 4675 : 		{
; 4676 : 			continue;

	jmp	SHORT $LN6@UpdateCivO
$LN3@UpdateCivO:

; 4677 : 		}
; 4678 : 
; 4679 : 		pEspionage->BuildStealableTechList(eOtherPlayer);

	mov	eax, DWORD PTR _eOtherPlayer$225034[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 4680 : 		if(pEspionage->m_aaPlayerStealableTechList[eOtherPlayer].size() > 0)

	mov	ecx, DWORD PTR _eOtherPlayer$225034[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _pEspionage$[ebp]
	add	ecx, DWORD PTR [edx+264]
	mov	DWORD PTR $T241766[ebp], ecx
	mov	eax, DWORD PTR $T241766[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T241770[ebp], ecx
	cmp	DWORD PTR $T241770[ebp], 0
	jbe	SHORT $LN2@UpdateCivO

; 4681 : 		{
; 4682 : 			continue;

	jmp	SHORT $LN6@UpdateCivO
$LN2@UpdateCivO:

; 4683 : 		}
; 4684 : 		m_aiCivOutOfTechTurn[eOtherPlayer] = GC.getGame().getGameTurn();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T241774[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _eOtherPlayer$225034[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T241778[ebp], eax
	mov	ecx, DWORD PTR $T241774[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T241778[ebp]
	mov	DWORD PTR [ecx], eax

; 4685 : 		if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN1@UpdateCivO

; 4686 : 		{
; 4687 : 			CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4688 : 			strMsg.Format("AI no more tech to steal,");

	push	OFFSET ??_C@_0BK@EMNCELHG@AI?5no?5more?5tech?5to?5steal?0?$AA@
	lea	eax, DWORD PTR _strMsg$225040[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 4689 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4690 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4691 : 			strMsg += GET_PLAYER(eOtherPlayer).getCivilizationShortDescription();

	mov	ecx, DWORD PTR _eOtherPlayer$225034[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241786[ebp], ecx
	mov	ecx, DWORD PTR $T241786[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4692 : 			strMsg += ",";

	push	OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4693 : 			pEspionage->LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$225040[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 4694 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@UpdateCivO:
	jmp	$LN6@UpdateCivO
$LN8@UpdateCivO:

; 4695 : 	}
; 4696 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$225040[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::UpdateCivOutOfTechTurn
PUBLIC	??_C@_0CP@EHOJDMJF@Random?5roll?5to?5see?5if?5we?5should?5@ ; `string'
EXTRN	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsDoFAccepted
;	COMDAT ??_C@_0CP@EHOJDMJF@Random?5roll?5to?5see?5if?5we?5should?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0CP@EHOJDMJF@Random?5roll?5to?5see?5if?5we?5should?5@ DB 'Random ro'
	DB	'll to see if we should attempt a coup', 00H	; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
CONST	ENDS
;	COMDAT ?AttemptCoups@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T241841 = -56						; size = 4
$T241837 = -52						; size = 4
$T241828 = -48						; size = 4
$T241824 = -44						; size = 4
$T241815 = -40						; size = 4
$T241811 = -36						; size = 4
$T241802 = -32						; size = 4
_eCurrentAlly$225055 = -28				; size = 4
_pMinorCivAI$225053 = -24				; size = 4
_pCity$225051 = -20					; size = 4
_iRoll$225058 = -16					; size = 4
_iChanceOfSuccess$225057 = -12				; size = 4
_uiSpy$225046 = -8					; size = 4
_pEspionage$ = -4					; size = 4
?AttemptCoups@CvEspionageAI@@QAEXXZ PROC		; CvEspionageAI::AttemptCoups, COMDAT
; _this$ = ecx

; 4699 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 4700 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 4701 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$225046[ebp], 0
	jmp	SHORT $LN8@AttemptCou@2
$LN7@AttemptCou@2:
	mov	ecx, DWORD PTR _uiSpy$225046[ebp]
	add	ecx, 1
	mov	DWORD PTR _uiSpy$225046[ebp], ecx
$LN8@AttemptCou@2:
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T241802[ebp], eax
	mov	ecx, DWORD PTR _uiSpy$225046[ebp]
	cmp	ecx, DWORD PTR $T241802[ebp]
	jae	$LN9@AttemptCou@2

; 4702 : 	{
; 4703 : 		if (!pEspionage->CanStageCoup(uiSpy))

	mov	edx, DWORD PTR _uiSpy$225046[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@AttemptCou@2

; 4704 : 		{
; 4705 : 			continue;

	jmp	SHORT $LN7@AttemptCou@2
$LN5@AttemptCou@2:

; 4706 : 		}
; 4707 : 	
; 4708 : 		// special Lena fix: no couping on CS that are allies with your friend
; 4709 : 		CvCity* pCity = pEspionage->GetCityWithSpy(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$225046[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$225051[ebp], eax

; 4710 : 		if (pCity && GET_PLAYER(pCity->getOwner()).isMinorCiv())

	cmp	DWORD PTR _pCity$225051[ebp], 0
	je	$LN4@AttemptCou@2
	mov	edx, DWORD PTR _pCity$225051[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR $T241811[ebp], eax
	mov	ecx, DWORD PTR $T241811[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241815[ebp], ecx
	mov	ecx, DWORD PTR $T241815[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@AttemptCou@2

; 4711 : 		{
; 4712 : 			CvMinorCivAI* pMinorCivAI = GET_PLAYER(pCity->getOwner()).GetMinorCivAI();

	mov	eax, DWORD PTR _pCity$225051[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T241824[ebp], ecx
	mov	edx, DWORD PTR $T241824[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241828[ebp], edx
	mov	ecx, DWORD PTR $T241828[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	DWORD PTR _pMinorCivAI$225053[ebp], eax

; 4713 : 			if (pMinorCivAI)

	cmp	DWORD PTR _pMinorCivAI$225053[ebp], 0
	je	SHORT $LN4@AttemptCou@2

; 4714 : 			{
; 4715 : 				PlayerTypes eCurrentAlly = pMinorCivAI->GetAlly();

	mov	ecx, DWORD PTR _pMinorCivAI$225053[ebp]
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eCurrentAlly$225055[ebp], eax

; 4716 : 				if (eCurrentAlly != NO_PLAYER && eCurrentAlly != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsDoFAccepted(eCurrentAlly))

	cmp	DWORD PTR _eCurrentAlly$225055[ebp], -1
	je	SHORT $LN4@AttemptCou@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T241837[ebp], edx
	mov	eax, DWORD PTR _eCurrentAlly$225055[ebp]
	cmp	eax, DWORD PTR $T241837[ebp]
	je	SHORT $LN4@AttemptCou@2
	mov	ecx, DWORD PTR _eCurrentAlly$225055[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDoFAccepted
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@AttemptCou@2

; 4717 : 				{
; 4718 : 					continue;

	jmp	$LN7@AttemptCou@2
$LN4@AttemptCou@2:

; 4719 : 				}
; 4720 : 			}
; 4721 : 		}
; 4722 : 
; 4723 : 		int iChanceOfSuccess = pEspionage->GetCoupChanceOfSuccess(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$225046[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess
	mov	DWORD PTR _iChanceOfSuccess$225057[ebp], eax

; 4724 : 		int iRoll = GC.getGame().getJonRandNum(100, "Random roll to see if we should attempt a coup");

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T241841[ebp], edx
	push	OFFSET ??_C@_0CP@EHOJDMJF@Random?5roll?5to?5see?5if?5we?5should?5@
	push	100					; 00000064H
	mov	ecx, DWORD PTR $T241841[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iRoll$225058[ebp], eax

; 4725 : 		if (iRoll < iChanceOfSuccess)

	mov	eax, DWORD PTR _iRoll$225058[ebp]
	cmp	eax, DWORD PTR _iChanceOfSuccess$225057[ebp]
	jge	SHORT $LN1@AttemptCou@2

; 4726 : 		{
; 4727 : 			pEspionage->AttemptCoup(uiSpy);

	mov	ecx, DWORD PTR _uiSpy$225046[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::AttemptCoup
$LN1@AttemptCou@2:

; 4728 : 		}

	jmp	$LN7@AttemptCou@2
$LN9@AttemptCou@2:

; 4729 : 	}
; 4730 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AttemptCoups@CvEspionageAI@@QAEXXZ ENDP		; CvEspionageAI::AttemptCoups
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
EXTRN	?getNumCities@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumCities
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
EXTRN	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForSpaceshipVictory
EXTRN	?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ:PROC ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
EXTRN	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForCultureVictory
EXTRN	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ:PROC ; CvMinorCivAI::GetTrait
EXTRN	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForWorldConquest
EXTRN	__imp__ceil:PROC
EXTRN	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z:PROC ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
EXTRN	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ:PROC ; CvPlayer::GetLeagueAI
EXTRN	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForDiploVictory
EXTRN	?GetTechRatio@CvTechAI@@QAEMXZ:PROC		; CvTechAI::GetTechRatio
EXTRN	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ:PROC ; CvPlayerTechs::GetTechAI
EXTRN	__ftol2_sse:PROC
EXTRN	_floor:PROC
;	COMDAT __real@3e800000
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$3
__ehfuncinfo$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
_TEXT	SEGMENT
tv894 = -476						; size = 4
tv300 = -472						; size = 4
tv293 = -468						; size = 4
tv489 = -464						; size = 4
tv808 = -460						; size = 4
tv458 = -456						; size = 4
tv754 = -452						; size = 4
tv420 = -448						; size = 4
tv734 = -444						; size = 4
tv133 = -440						; size = 4
_this$ = -436						; size = 4
_uiOffset$242181 = -328					; size = 4
$T242172 = -324						; size = 4
$T242171 = -320						; size = 4
$T242162 = -316						; size = 4
$T242158 = -312						; size = 4
$T242154 = -308						; size = 4
$T242094 = -280						; size = 4
$T242082 = -276						; size = 4
$T242073 = -272						; size = 4
$T242064 = -268						; size = 4
$T242058 = -264						; size = 4
$T242054 = -260						; size = 4
$T242050 = -256						; size = 4
$T242046 = -252						; size = 4
$T242037 = -248						; size = 4
$T242033 = -244						; size = 4
$T242032 = -240						; size = 4
$T242023 = -236						; size = 4
$T242019 = -232						; size = 4
$T242018 = -228						; size = 4
$T242009 = -224						; size = 4
$T242000 = -220						; size = 4
$T241996 = -213						; size = 1
$T241987 = -212						; size = 4
$T241983 = -208						; size = 4
$T241971 = -204						; size = 4
$T241965 = -200						; size = 4
$T241961 = -196						; size = 4
$T241957 = -192						; size = 4
$T241948 = -188						; size = 4
$T241944 = -184						; size = 4
$T241943 = -180						; size = 4
$T241934 = -176						; size = 4
$T241930 = -172						; size = 4
$T241929 = -168						; size = 4
$T241920 = -164						; size = 4
$T241911 = -160						; size = 4
$T241907 = -153						; size = 1
$T241898 = -152						; size = 4
$T241894 = -148						; size = 4
$T241882 = -144						; size = 4
$T241868 = -137						; size = 1
$T241859 = -136						; size = 4
$T241855 = -132						; size = 4
$T241845 = -128						; size = 4
$T241844 = -124						; size = 4
_pCityPlot$225156 = -120				; size = 4
_eTargetPlayer$225150 = -116				; size = 4
_ui$225146 = -112					; size = 4
_iNumDiplomats$225130 = -108				; size = 4
_ePlayer$225122 = -104					; size = 4
_ui$225118 = -100					; size = 4
_iNumMilitaristicCityStates$225117 = -96		; size = 4
_ePlayer$225108 = -92					; size = 4
_ui$225104 = -88					; size = 4
_ePlayer$225082 = -84					; size = 4
_eUsefulnessLevel$225086 = -80				; size = 4
_ui$225078 = -76					; size = 4
_iNumCityStates$225103 = -72				; size = 4
_iNumDiplomats$225095 = -68				; size = 4
_fNumDiplomats$225077 = -64				; size = 4
_bAllocatedDiplomatSpies$ = -57				; size = 1
_fTechPositionRatio$ = -56				; size = 4
_bAllocatedOffensiveSpies$ = -50			; size = 1
_bAllocatedDefensiveSpies$ = -49			; size = 1
_iNumRemainingSpies$ = -48				; size = 4
_bAllocatedCityStateSpies$ = -41			; size = 1
_pDiploAI$ = -40					; size = 4
_apOtherCityList$ = -36					; size = 16
_pLoopCity$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_piTargetOffensiveSpies$ = 8				; size = 4
_piTargetDefensiveSpies$ = 12				; size = 4
_piTargetCityStateSpies$ = 16				; size = 4
_piTargetDiplomatSpies$ = 20				; size = 4
?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z PROC	; CvEspionageAI::FindTargetSpyNumbers, COMDAT
; _this$ = ecx

; 4734 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 464				; 000001d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4735 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDiploAI$[ebp], eax

; 4736 : 
; 4737 : 	int iNumRemainingSpies = m_pPlayer->GetEspionage()->GetNumAliveSpies();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNumAliveSpies
	mov	DWORD PTR _iNumRemainingSpies$[ebp], eax

; 4738 : 	if(iNumRemainingSpies == 0)

	cmp	DWORD PTR _iNumRemainingSpies$[ebp], 0
	jne	SHORT $LN53@FindTarget

; 4739 : 	{
; 4740 : 		*piTargetDefensiveSpies = 0;

	mov	edx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	DWORD PTR [edx], 0

; 4741 : 		*piTargetOffensiveSpies = 0;

	mov	eax, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [eax], 0

; 4742 : 		*piTargetCityStateSpies = 0;

	mov	ecx, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	DWORD PTR [ecx], 0

; 4743 : 		*piTargetDiplomatSpies  = 0;

	mov	edx, DWORD PTR _piTargetDiplomatSpies$[ebp]
	mov	DWORD PTR [edx], 0

; 4744 : 		return;

	jmp	$LN54@FindTarget
$LN53@FindTarget:

; 4745 : 	}
; 4746 : 
; 4747 : 	bool bAllocatedOffensiveSpies = false;

	mov	BYTE PTR _bAllocatedOffensiveSpies$[ebp], 0

; 4748 : 	bool bAllocatedDefensiveSpies = false;

	mov	BYTE PTR _bAllocatedDefensiveSpies$[ebp], 0

; 4749 : 	bool bAllocatedCityStateSpies = false;

	mov	BYTE PTR _bAllocatedCityStateSpies$[ebp], 0

; 4750 : 	bool bAllocatedDiplomatSpies  = false;

	mov	BYTE PTR _bAllocatedDiplomatSpies$[ebp], 0

; 4751 : 	float fTechPositionRatio = m_pPlayer->GetPlayerTechs()->GetTechAI()->GetTechRatio();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ ; CvPlayerTechs::GetTechAI
	mov	ecx, eax
	call	?GetTechRatio@CvTechAI@@QAEMXZ		; CvTechAI::GetTechRatio
	fstp	DWORD PTR _fTechPositionRatio$[ebp]

; 4752 : 
; 4753 : 	// if going for diplo or conquest, evaluate the offensive spies before assigning CS spies
; 4754 : 	if (pDiploAI->IsGoingForDiploVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	movzx	ecx, al
	test	ecx, ecx
	je	$LN52@FindTarget

; 4755 : 	{
; 4756 : 		// find out how many diplomats we need
; 4757 : 		float fNumDiplomats = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fNumDiplomats$225077[ebp], xmm0

; 4758 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225078[ebp], 0
	jmp	SHORT $LN51@FindTarget
$LN50@FindTarget:
	mov	edx, DWORD PTR _ui$225078[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225078[ebp], edx
$LN51@FindTarget:
	cmp	DWORD PTR _ui$225078[ebp], 22		; 00000016H
	jae	$LN49@FindTarget

; 4759 : 		{
; 4760 : 			PlayerTypes ePlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225078[ebp]
	mov	DWORD PTR _ePlayer$225082[ebp], eax

; 4761 : 			// must not be me and must be alive
; 4762 : 			if (ePlayer == m_pPlayer->GetID() || !GET_PLAYER(ePlayer).isAlive())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T241855[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$225082[ebp]
	cmp	ecx, DWORD PTR $T241855[ebp]
	je	SHORT $LN47@FindTarget
	mov	edx, DWORD PTR _ePlayer$225082[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241859[ebp], edx
	mov	eax, DWORD PTR $T241859[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T241868[ebp], cl
	movzx	edx, BYTE PTR $T241868[ebp]
	test	edx, edx
	jne	SHORT $LN48@FindTarget
$LN47@FindTarget:

; 4763 : 			{
; 4764 : 				continue;

	jmp	SHORT $LN50@FindTarget
$LN48@FindTarget:

; 4765 : 			}
; 4766 : 
; 4767 : 			CvLeagueAI::DiplomatUsefulnessLevels eUsefulnessLevel = m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(ePlayer);

	mov	eax, DWORD PTR _ePlayer$225082[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
	mov	DWORD PTR _eUsefulnessLevel$225086[ebp], eax

; 4768 : 			switch (eUsefulnessLevel)

	mov	edx, DWORD PTR _eUsefulnessLevel$225086[ebp]
	mov	DWORD PTR tv133[ebp], edx
	cmp	DWORD PTR tv133[ebp], 1
	je	SHORT $LN42@FindTarget
	cmp	DWORD PTR tv133[ebp], 2
	je	SHORT $LN43@FindTarget
	cmp	DWORD PTR tv133[ebp], 3
	je	SHORT $LN44@FindTarget
	jmp	SHORT $LN45@FindTarget
$LN44@FindTarget:

; 4769 : 			{
; 4770 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_HIGH:
; 4771 : 				fNumDiplomats += 1.0f;

	movss	xmm0, DWORD PTR _fNumDiplomats$225077[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _fNumDiplomats$225077[ebp], xmm0

; 4772 : 				break;

	jmp	SHORT $LN45@FindTarget
$LN43@FindTarget:

; 4773 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_MEDIUM:
; 4774 : 				fNumDiplomats += 0.5f;

	movss	xmm0, DWORD PTR _fNumDiplomats$225077[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _fNumDiplomats$225077[ebp], xmm0

; 4775 : 				break;

	jmp	SHORT $LN45@FindTarget
$LN42@FindTarget:

; 4776 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_LOW:
; 4777 : 				fNumDiplomats += 0.25f;

	movss	xmm0, DWORD PTR _fNumDiplomats$225077[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _fNumDiplomats$225077[ebp], xmm0
$LN45@FindTarget:

; 4778 : 				break;
; 4779 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_NONE:
; 4780 : 				break;
; 4781 : 			}
; 4782 : 		}

	jmp	$LN50@FindTarget
$LN49@FindTarget:

; 4783 : 
; 4784 : 		// assign spies to be diplomats
; 4785 : 		int iNumDiplomats = (int)floor(fNumDiplomats);

	fld	DWORD PTR _fNumDiplomats$225077[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	DWORD PTR tv734[ebp]
	fld	DWORD PTR tv734[ebp]
	call	__ftol2_sse
	mov	DWORD PTR _iNumDiplomats$225095[ebp], eax

; 4786 : 		*piTargetDiplomatSpies = min(iNumRemainingSpies, iNumDiplomats);

	mov	eax, DWORD PTR _iNumDiplomats$225095[ebp]
	cmp	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	jge	SHORT $LN73@FindTarget
	lea	ecx, DWORD PTR _iNumDiplomats$225095[ebp]
	mov	DWORD PTR tv420[ebp], ecx
	jmp	SHORT $LN74@FindTarget
$LN73@FindTarget:
	lea	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	mov	DWORD PTR tv420[ebp], edx
$LN74@FindTarget:
	mov	eax, DWORD PTR tv420[ebp]
	mov	DWORD PTR $T241882[ebp], eax
	mov	ecx, DWORD PTR _piTargetDiplomatSpies$[ebp]
	mov	edx, DWORD PTR $T241882[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 4787 : 		bAllocatedDiplomatSpies = true;

	mov	BYTE PTR _bAllocatedDiplomatSpies$[ebp], 1

; 4788 : 		iNumRemainingSpies -= *piTargetDiplomatSpies;

	mov	ecx, DWORD PTR _piTargetDiplomatSpies$[ebp]
	mov	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], edx

; 4789 : 
; 4790 : 		// assign offensive spies according to tech position
; 4791 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	cvtsi2ss xmm0, DWORD PTR _iNumRemainingSpies$[ebp]
	mulss	xmm0, DWORD PTR _fTechPositionRatio$[ebp]
	movss	DWORD PTR $T241894[ebp], xmm0
	cvtss2sd xmm0, DWORD PTR $T241894[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	DWORD PTR tv754[ebp]
	fld	DWORD PTR tv754[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [ecx], eax

; 4792 : 		bAllocatedOffensiveSpies = true;

	mov	BYTE PTR _bAllocatedOffensiveSpies$[ebp], 1

; 4793 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], eax

; 4794 : 
; 4795 : 		int iNumCityStates = 0;

	mov	DWORD PTR _iNumCityStates$225103[ebp], 0

; 4796 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$225104[ebp], 22		; 00000016H
	jmp	SHORT $LN40@FindTarget
$LN39@FindTarget:
	mov	ecx, DWORD PTR _ui$225104[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225104[ebp], ecx
$LN40@FindTarget:
	cmp	DWORD PTR _ui$225104[ebp], 63		; 0000003fH
	jae	$LN38@FindTarget

; 4797 : 		{
; 4798 : 			PlayerTypes ePlayer = (PlayerTypes)ui;

	mov	edx, DWORD PTR _ui$225104[ebp]
	mov	DWORD PTR _ePlayer$225108[ebp], edx

; 4799 : 			if (!GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR _ePlayer$225108[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241898[ebp], eax
	mov	ecx, DWORD PTR $T241898[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T241907[ebp], dl
	movzx	eax, BYTE PTR $T241907[ebp]
	test	eax, eax
	jne	SHORT $LN37@FindTarget

; 4800 : 			{
; 4801 : 				continue;

	jmp	SHORT $LN39@FindTarget
$LN37@FindTarget:

; 4802 : 			}
; 4803 : 
; 4804 : 			if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	ecx, DWORD PTR _ePlayer$225108[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241911[ebp], ecx
	mov	edx, DWORD PTR $T241911[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T241920[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T241929[ebp], edx
	mov	eax, DWORD PTR $T241929[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T241930[ebp], eax
	mov	edx, DWORD PTR $T241930[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T241934[ebp], edx
	mov	eax, DWORD PTR $T241920[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241934[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN36@FindTarget

; 4805 : 			{
; 4806 : 				continue;

	jmp	$LN39@FindTarget
$LN36@FindTarget:

; 4807 : 			}
; 4808 : 
; 4809 : 			// don't interact with city-states that are at war with us
; 4810 : 			if (GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isAtWar(m_pPlayer->getTeam()))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T241943[ebp], eax
	mov	ecx, DWORD PTR $T241943[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T241944[ebp], eax
	mov	eax, DWORD PTR _ePlayer$225108[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241948[ebp], eax
	mov	ecx, DWORD PTR $T241948[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T241957[ebp], eax
	mov	eax, DWORD PTR $T241957[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T241961[ebp], eax
	mov	ecx, DWORD PTR $T241944[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T241961[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN35@FindTarget

; 4811 : 			{
; 4812 : 				continue;

	jmp	$LN39@FindTarget
$LN35@FindTarget:

; 4813 : 			}
; 4814 : 
; 4815 : 			if (GET_PLAYER(ePlayer).isMinorCiv())

	mov	eax, DWORD PTR _ePlayer$225108[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241965[ebp], eax
	mov	ecx, DWORD PTR $T241965[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN34@FindTarget

; 4816 : 			{
; 4817 : 				iNumCityStates++;

	mov	edx, DWORD PTR _iNumCityStates$225103[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumCityStates$225103[ebp], edx
$LN34@FindTarget:

; 4818 : 			}
; 4819 : 		}

	jmp	$LN39@FindTarget
$LN38@FindTarget:

; 4820 : 
; 4821 : 		*piTargetCityStateSpies = min(iNumRemainingSpies, iNumCityStates);

	mov	eax, DWORD PTR _iNumCityStates$225103[ebp]
	cmp	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	jge	SHORT $LN113@FindTarget
	lea	ecx, DWORD PTR _iNumCityStates$225103[ebp]
	mov	DWORD PTR tv458[ebp], ecx
	jmp	SHORT $LN114@FindTarget
$LN113@FindTarget:
	lea	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	mov	DWORD PTR tv458[ebp], edx
$LN114@FindTarget:
	mov	eax, DWORD PTR tv458[ebp]
	mov	DWORD PTR $T241971[ebp], eax
	mov	ecx, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	edx, DWORD PTR $T241971[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 4822 : 		bAllocatedCityStateSpies = true;

	mov	BYTE PTR _bAllocatedCityStateSpies$[ebp], 1
	jmp	$LN19@FindTarget
$LN52@FindTarget:

; 4823 : 	}
; 4824 : 	else if (pDiploAI->IsGoingForWorldConquest())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	movzx	ecx, al
	test	ecx, ecx
	je	$LN32@FindTarget

; 4825 : 	{
; 4826 : 		// assign offensive spies according to tech position
; 4827 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	cvtsi2ss xmm0, DWORD PTR _iNumRemainingSpies$[ebp]
	mulss	xmm0, DWORD PTR _fTechPositionRatio$[ebp]
	movss	DWORD PTR $T241983[ebp], xmm0
	cvtss2sd xmm0, DWORD PTR $T241983[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	DWORD PTR tv808[ebp]
	fld	DWORD PTR tv808[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [edx], eax

; 4828 : 		bAllocatedOffensiveSpies = true;

	mov	BYTE PTR _bAllocatedOffensiveSpies$[ebp], 1

; 4829 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	mov	eax, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	ecx, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], ecx

; 4830 : 
; 4831 : 		// Assign the rest to militaristic city-states
; 4832 : 		// for now, assign spies to the militaristic city states
; 4833 : 		int iNumMilitaristicCityStates = 0;

	mov	DWORD PTR _iNumMilitaristicCityStates$225117[ebp], 0

; 4834 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$225118[ebp], 22		; 00000016H
	jmp	SHORT $LN31@FindTarget
$LN30@FindTarget:
	mov	edx, DWORD PTR _ui$225118[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225118[ebp], edx
$LN31@FindTarget:
	cmp	DWORD PTR _ui$225118[ebp], 63		; 0000003fH
	jae	$LN29@FindTarget

; 4835 : 		{
; 4836 : 			PlayerTypes ePlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225118[ebp]
	mov	DWORD PTR _ePlayer$225122[ebp], eax

; 4837 : 			if (!GET_PLAYER(ePlayer).isAlive())

	mov	ecx, DWORD PTR _ePlayer$225122[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T241987[ebp], ecx
	mov	edx, DWORD PTR $T241987[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T241996[ebp], al
	movzx	ecx, BYTE PTR $T241996[ebp]
	test	ecx, ecx
	jne	SHORT $LN28@FindTarget

; 4838 : 			{
; 4839 : 				continue;

	jmp	SHORT $LN30@FindTarget
$LN28@FindTarget:

; 4840 : 			}
; 4841 : 
; 4842 : 			if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	edx, DWORD PTR _ePlayer$225122[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242000[ebp], edx
	mov	eax, DWORD PTR $T242000[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242009[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T242018[ebp], eax
	mov	ecx, DWORD PTR $T242018[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242019[ebp], eax
	mov	eax, DWORD PTR $T242019[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T242023[ebp], eax
	mov	ecx, DWORD PTR $T242009[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T242023[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN27@FindTarget

; 4843 : 			{
; 4844 : 				continue;

	jmp	$LN30@FindTarget
$LN27@FindTarget:

; 4845 : 			}
; 4846 : 
; 4847 : 			// don't interact with city-states that are at war with us
; 4848 : 			if (GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isAtWar(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T242032[ebp], ecx
	mov	edx, DWORD PTR $T242032[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242033[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$225122[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242037[ebp], ecx
	mov	edx, DWORD PTR $T242037[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242046[ebp], eax
	mov	ecx, DWORD PTR $T242046[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T242050[ebp], ecx
	mov	edx, DWORD PTR $T242033[ebp]
	push	edx
	mov	ecx, DWORD PTR $T242050[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@FindTarget

; 4849 : 			{
; 4850 : 				continue;

	jmp	$LN30@FindTarget
$LN26@FindTarget:

; 4851 : 			}
; 4852 : 
; 4853 : 			if (GET_PLAYER(ePlayer).isMinorCiv() && GET_PLAYER(ePlayer).GetMinorCivAI()->GetTrait() == MINOR_CIV_TRAIT_MILITARISTIC)

	mov	ecx, DWORD PTR _ePlayer$225122[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242054[ebp], ecx
	mov	ecx, DWORD PTR $T242054[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@FindTarget
	mov	eax, DWORD PTR _ePlayer$225122[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242058[ebp], eax
	mov	ecx, DWORD PTR $T242058[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ ; CvMinorCivAI::GetTrait
	cmp	eax, 1
	jne	SHORT $LN25@FindTarget

; 4854 : 			{
; 4855 : 				iNumMilitaristicCityStates++;

	mov	ecx, DWORD PTR _iNumMilitaristicCityStates$225117[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNumMilitaristicCityStates$225117[ebp], ecx
$LN25@FindTarget:

; 4856 : 			}
; 4857 : 		}

	jmp	$LN30@FindTarget
$LN29@FindTarget:

; 4858 : 
; 4859 : 		*piTargetCityStateSpies = min(iNumRemainingSpies, iNumMilitaristicCityStates);

	mov	edx, DWORD PTR _iNumMilitaristicCityStates$225117[ebp]
	cmp	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	jge	SHORT $LN155@FindTarget
	lea	eax, DWORD PTR _iNumMilitaristicCityStates$225117[ebp]
	mov	DWORD PTR tv489[ebp], eax
	jmp	SHORT $LN156@FindTarget
$LN155@FindTarget:
	lea	ecx, DWORD PTR _iNumRemainingSpies$[ebp]
	mov	DWORD PTR tv489[ebp], ecx
$LN156@FindTarget:
	mov	edx, DWORD PTR tv489[ebp]
	mov	DWORD PTR $T242064[ebp], edx
	mov	eax, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	ecx, DWORD PTR $T242064[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 4860 : 		bAllocatedCityStateSpies = true;

	mov	BYTE PTR _bAllocatedCityStateSpies$[ebp], 1
	jmp	$LN19@FindTarget
$LN32@FindTarget:

; 4861 : 	}
; 4862 : 	else if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	movzx	eax, al
	test	eax, eax
	je	$LN23@FindTarget

; 4863 : 	{
; 4864 : 		// assign two spies to be diplomats
; 4865 : 		int iNumDiplomats = min(iNumRemainingSpies, 2);

	mov	DWORD PTR $T241844[ebp], 2
	mov	ecx, DWORD PTR $T241844[ebp]
	cmp	ecx, DWORD PTR _iNumRemainingSpies$[ebp]
	jge	SHORT $LN159@FindTarget
	lea	edx, DWORD PTR $T241844[ebp]
	mov	DWORD PTR tv293[ebp], edx
	jmp	SHORT $LN160@FindTarget
$LN159@FindTarget:
	lea	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	mov	DWORD PTR tv293[ebp], eax
$LN160@FindTarget:
	mov	ecx, DWORD PTR tv293[ebp]
	mov	DWORD PTR $T242073[ebp], ecx
	mov	edx, DWORD PTR $T242073[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iNumDiplomats$225130[ebp], eax

; 4866 : 		iNumDiplomats = min(iNumDiplomats, m_pPlayer->GetCulture()->GetMaxPropagandaDiplomatsWanted());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
	mov	DWORD PTR $T241845[ebp], eax
	mov	edx, DWORD PTR $T241845[ebp]
	cmp	edx, DWORD PTR _iNumDiplomats$225130[ebp]
	jge	SHORT $LN163@FindTarget
	lea	eax, DWORD PTR $T241845[ebp]
	mov	DWORD PTR tv300[ebp], eax
	jmp	SHORT $LN164@FindTarget
$LN163@FindTarget:
	lea	ecx, DWORD PTR _iNumDiplomats$225130[ebp]
	mov	DWORD PTR tv300[ebp], ecx
$LN164@FindTarget:
	mov	edx, DWORD PTR tv300[ebp]
	mov	DWORD PTR $T242082[ebp], edx
	mov	eax, DWORD PTR $T242082[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iNumDiplomats$225130[ebp], ecx

; 4867 : 		*piTargetDiplomatSpies = iNumDiplomats;

	mov	edx, DWORD PTR _piTargetDiplomatSpies$[ebp]
	mov	eax, DWORD PTR _iNumDiplomats$225130[ebp]
	mov	DWORD PTR [edx], eax

; 4868 : 
; 4869 : 		if (iNumDiplomats > 0)

	cmp	DWORD PTR _iNumDiplomats$225130[ebp], 0
	jle	SHORT $LN22@FindTarget

; 4870 : 		{
; 4871 : 			bAllocatedDiplomatSpies = true;

	mov	BYTE PTR _bAllocatedDiplomatSpies$[ebp], 1

; 4872 : 			iNumRemainingSpies -= *piTargetDiplomatSpies;

	mov	ecx, DWORD PTR _piTargetDiplomatSpies$[ebp]
	mov	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], edx
$LN22@FindTarget:

; 4873 : 		}
; 4874 : 	}

	jmp	SHORT $LN19@FindTarget
$LN23@FindTarget:

; 4875 : 	else if (pDiploAI->IsGoingForSpaceshipVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForSpaceshipVictory
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@FindTarget

; 4876 : 	{
; 4877 : 		// assign none to CS
; 4878 : 		*piTargetCityStateSpies = 0;

	mov	ecx, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	DWORD PTR [ecx], 0

; 4879 : 		bAllocatedCityStateSpies = true;

	mov	BYTE PTR _bAllocatedCityStateSpies$[ebp], 1

; 4880 : 	}
; 4881 : 	else

	jmp	SHORT $LN19@FindTarget
$LN20@FindTarget:

; 4882 : 	{
; 4883 : 		// assign 1/3rd to CS
; 4884 : 		*piTargetCityStateSpies = iNumRemainingSpies / 3;

	mov	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	DWORD PTR [edx], eax

; 4885 : 		bAllocatedCityStateSpies = true;

	mov	BYTE PTR _bAllocatedCityStateSpies$[ebp], 1
$LN19@FindTarget:

; 4886 : 	}
; 4887 : 
; 4888 : 	iNumRemainingSpies -= *piTargetCityStateSpies;

	mov	eax, DWORD PTR _piTargetCityStateSpies$[ebp]
	mov	ecx, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], ecx

; 4889 : 	if (!bAllocatedOffensiveSpies)

	movzx	edx, BYTE PTR _bAllocatedOffensiveSpies$[ebp]
	test	edx, edx
	jne	SHORT $LN18@FindTarget

; 4890 : 	{
; 4891 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	cvtsi2ss xmm0, DWORD PTR _iNumRemainingSpies$[ebp]
	mulss	xmm0, DWORD PTR _fTechPositionRatio$[ebp]
	movss	DWORD PTR $T242094[ebp], xmm0
	cvtss2sd xmm0, DWORD PTR $T242094[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__ceil
	add	esp, 8
	fstp	DWORD PTR tv894[ebp]
	fld	DWORD PTR tv894[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [ecx], eax

; 4892 : 		bAllocatedOffensiveSpies = true;

	mov	BYTE PTR _bAllocatedOffensiveSpies$[ebp], 1

; 4893 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	eax, DWORD PTR _iNumRemainingSpies$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _iNumRemainingSpies$[ebp], eax
$LN18@FindTarget:

; 4894 : 	}
; 4895 : 
; 4896 : 	*piTargetDefensiveSpies = iNumRemainingSpies;

	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	edx, DWORD PTR _iNumRemainingSpies$[ebp]
	mov	DWORD PTR [ecx], edx

; 4897 : 	bAllocatedDefensiveSpies = true;

	mov	BYTE PTR _bAllocatedDefensiveSpies$[ebp], 1

; 4898 : 
; 4899 : 	// rationalization
; 4900 : 	std::vector<CvCity*> apOtherCityList;

	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	call	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4901 : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 4902 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 4903 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225146[ebp], 0
	jmp	SHORT $LN17@FindTarget
$LN16@FindTarget:
	mov	eax, DWORD PTR _ui$225146[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$225146[ebp], eax
$LN17@FindTarget:
	cmp	DWORD PTR _ui$225146[ebp], 22		; 00000016H
	jae	$LN15@FindTarget

; 4904 : 	{
; 4905 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	ecx, DWORD PTR _ui$225146[ebp]
	mov	DWORD PTR _eTargetPlayer$225150[ebp], ecx

; 4906 : 
; 4907 : 		// don't count the player's own cities
; 4908 : 		if(eTargetPlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T242154[ebp], ecx
	mov	edx, DWORD PTR _eTargetPlayer$225150[ebp]
	cmp	edx, DWORD PTR $T242154[ebp]
	jne	SHORT $LN14@FindTarget

; 4909 : 		{
; 4910 : 			continue;

	jmp	SHORT $LN16@FindTarget
$LN14@FindTarget:

; 4911 : 		}
; 4912 : 
; 4913 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	eax, DWORD PTR _eTargetPlayer$225150[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242158[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T242158[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN13@FindTarget
$LN12@FindTarget:
	mov	edx, DWORD PTR _eTargetPlayer$225150[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242162[ebp], edx
	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T242162[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN13@FindTarget:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN11@FindTarget

; 4914 : 		{
; 4915 : 			CvPlot* pCityPlot = pLoopCity->plot();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	DWORD PTR _pCityPlot$225156[ebp], eax

; 4916 : 			CvAssertMsg(pCityPlot, "City plot is null!");
; 4917 : 			if(pCityPlot)

	cmp	DWORD PTR _pCityPlot$225156[ebp], 0
	je	SHORT $LN9@FindTarget

; 4918 : 			{
; 4919 : 				if(pCityPlot->isRevealed(m_pPlayer->getTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T242171[ebp], edx
	mov	eax, DWORD PTR $T242171[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242172[ebp], eax
	mov	edx, DWORD PTR $T242172[ebp]
	shr	edx, 5
	mov	DWORD PTR _uiOffset$242181[ebp], edx
	mov	eax, DWORD PTR _uiOffset$242181[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR $T242172[ebp]
	sub	ecx, eax
	mov	edx, 1
	shl	edx, cl
	mov	eax, DWORD PTR _uiOffset$242181[ebp]
	mov	ecx, DWORD PTR _pCityPlot$225156[ebp]
	and	edx, DWORD PTR [ecx+eax*4+8]
	setne	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN9@FindTarget

; 4920 : 				{
; 4921 : 					apOtherCityList.push_back(pLoopCity);

	lea	ecx, DWORD PTR _pLoopCity$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
$LN9@FindTarget:

; 4922 : 				}
; 4923 : 			}
; 4924 : 		}

	jmp	$LN12@FindTarget
$LN11@FindTarget:

; 4925 : 	}

	jmp	$LN16@FindTarget
$LN15@FindTarget:

; 4926 : 
; 4927 : 	while(*piTargetDefensiveSpies > m_pPlayer->getNumCities())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	cmp	DWORD PTR [ecx], eax
	jle	SHORT $LN7@FindTarget

; 4928 : 	{
; 4929 : 		if(*piTargetOffensiveSpies < (int)apOtherCityList.size())

	mov	edx, DWORD PTR _apOtherCityList$[ebp+8]
	sub	edx, DWORD PTR _apOtherCityList$[ebp+4]
	sar	edx, 2
	mov	eax, DWORD PTR _piTargetOffensiveSpies$[ebp]
	cmp	DWORD PTR [eax], edx
	jge	SHORT $LN6@FindTarget

; 4930 : 		{
; 4931 : 			(*piTargetDefensiveSpies)--;

	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	DWORD PTR [eax], edx

; 4932 : 			(*piTargetOffensiveSpies)++;

	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [eax], edx

; 4933 : 		}
; 4934 : 		else

	jmp	SHORT $LN5@FindTarget
$LN6@FindTarget:

; 4935 : 		{
; 4936 : 			// spies will be unused
; 4937 : 			(*piTargetDefensiveSpies)--;

	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	DWORD PTR [eax], edx
$LN5@FindTarget:

; 4938 : 		}

	jmp	SHORT $LN15@FindTarget
$LN7@FindTarget:

; 4939 : 	}
; 4940 : 
; 4941 : 	while(*piTargetOffensiveSpies > (int)apOtherCityList.size())

	mov	ecx, DWORD PTR _apOtherCityList$[ebp+8]
	sub	ecx, DWORD PTR _apOtherCityList$[ebp+4]
	sar	ecx, 2
	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	cmp	DWORD PTR [edx], ecx
	jle	SHORT $LN3@FindTarget

; 4942 : 	{
; 4943 : 		if(*piTargetDefensiveSpies < m_pPlayer->getNumCities())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	cmp	DWORD PTR [ecx], eax
	jge	SHORT $LN2@FindTarget

; 4944 : 		{
; 4945 : 			(*piTargetDefensiveSpies)++;

	mov	edx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _piTargetDefensiveSpies$[ebp]
	mov	DWORD PTR [ecx], eax

; 4946 : 			(*piTargetOffensiveSpies)--;

	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [ecx], eax

; 4947 : 		}
; 4948 : 		else

	jmp	SHORT $LN1@FindTarget
$LN2@FindTarget:

; 4949 : 		{
; 4950 : 			// spies will be unused
; 4951 : 			(*piTargetOffensiveSpies)--;

	mov	edx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@FindTarget:

; 4952 : 		}
; 4953 : 	}

	jmp	SHORT $LN7@FindTarget
$LN3@FindTarget:

; 4954 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN54@FindTarget:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$0:
	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$3:
	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__ehhandler$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-468]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ENDP	; CvEspionageAI::FindTargetSpyNumbers
PUBLIC	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
PUBLIC	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
PUBLIC	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
PUBLIC	??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
PUBLIC	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
PUBLIC	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
PUBLIC	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase
EXTRN	?isRevealed@CvCity@@QBE_NW4TeamTypes@@_N@Z:PROC	; CvCity::isRevealed
EXTRN	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::WantsDiplomatDoingPropaganda
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3
__ehfuncinfo$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -352						; size = 4
$T242606 = -204						; size = 4
$T242590 = -200						; size = 4
$T242545 = -172						; size = 4
$T242544 = -168						; size = 4
$T242535 = -164						; size = 4
$T242531 = -157						; size = 1
$T242522 = -156						; size = 4
$T242518 = -152						; size = 4
$T242467 = -116						; size = 4
$T242438 = -112						; size = 4
$T242422 = -108						; size = 4
$T242451 = -104						; size = 4
$T242450 = -100						; size = 4
$T242449 = -96						; size = 4
$T242448 = -92						; size = 4
$T242447 = -88						; size = 4
$T242405 = -84						; size = 4
$T242404 = -80						; size = 4
$T242403 = -73						; size = 1
$T242402 = -72						; size = 4
_ui$225692 = -68					; size = 4
_kEntry$225534 = -64					; size = 8
_eTargetPlayer$225526 = -56				; size = 4
_pCapitalCity$225531 = -52				; size = 4
_ui$225522 = -48					; size = 4
_aCityScores$225521 = -44				; size = 16
_eTargetPlayer$225215 = -28				; size = 4
_ui$225211 = -24					; size = 4
_pCulture$ = -20					; size = 4
_pDiploAI$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_aDiplomatCityList$ = 8					; size = 4
?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildDiplomatCityList, COMDAT
; _this$ = ecx

; 4979 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4980 : 	aDiplomatCityList.clear();

	mov	eax, DWORD PTR _aDiplomatCityList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T242422[ebp], ecx
	mov	edx, DWORD PTR $T242422[ebp]
	mov	DWORD PTR $T242448[ebp], edx
	mov	eax, DWORD PTR $T242448[ebp]
	mov	DWORD PTR $T242447[ebp], eax
	mov	ecx, DWORD PTR _aDiplomatCityList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T242438[ebp], edx
	mov	eax, DWORD PTR $T242438[ebp]
	mov	DWORD PTR $T242450[ebp], eax
	mov	ecx, DWORD PTR $T242450[ebp]
	mov	DWORD PTR $T242449[ebp], ecx
	mov	edx, DWORD PTR $T242447[ebp]
	push	edx
	mov	eax, DWORD PTR $T242449[ebp]
	push	eax
	lea	ecx, DWORD PTR $T242451[ebp]
	push	ecx
	mov	ecx, DWORD PTR _aDiplomatCityList$[ebp]
	call	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase

; 4981 : 	CvPlayerCulture* pCulture = m_pPlayer->GetCulture();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	DWORD PTR _pCulture$[ebp], eax

; 4982 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDiploAI$[ebp], eax

; 4983 : 
; 4984 : 	if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@BuildDiplo

; 4985 : 	{
; 4986 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225211[ebp], 0
	jmp	SHORT $LN16@BuildDiplo
$LN15@BuildDiplo:
	mov	edx, DWORD PTR _ui$225211[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225211[ebp], edx
$LN16@BuildDiplo:
	cmp	DWORD PTR _ui$225211[ebp], 22		; 00000016H
	jae	SHORT $LN14@BuildDiplo

; 4987 : 		{
; 4988 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225211[ebp]
	mov	DWORD PTR _eTargetPlayer$225215[ebp], eax

; 4989 : 			if (pCulture->WantsDiplomatDoingPropaganda(eTargetPlayer))

	mov	ecx, DWORD PTR _eTargetPlayer$225215[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCulture$[ebp]
	call	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z ; CvPlayerCulture::WantsDiplomatDoingPropaganda
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@BuildDiplo

; 4990 : 			{
; 4991 : 				aDiplomatCityList.push_back(GET_PLAYER(eTargetPlayer).getCapitalCity());

	mov	eax, DWORD PTR _eTargetPlayer$225215[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242467[ebp], eax
	mov	ecx, DWORD PTR $T242467[ebp]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	DWORD PTR $T242402[ebp], eax
	lea	ecx, DWORD PTR $T242402[ebp]
	push	ecx
	mov	ecx, DWORD PTR _aDiplomatCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
$LN13@BuildDiplo:

; 4992 : 			}
; 4993 : 		}

	jmp	SHORT $LN15@BuildDiplo
$LN14@BuildDiplo:

; 4994 : 	}
; 4995 : 	else // Going for diplo victory and others

	jmp	$LN18@BuildDiplo
$LN17@BuildDiplo:

; 4996 : 	{
; 4997 : 		std::vector<ScoreCityEntry> aCityScores;

	lea	ecx, DWORD PTR _aCityScores$225521[ebp]
	call	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4998 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225522[ebp], 0
	jmp	SHORT $LN11@BuildDiplo
$LN10@BuildDiplo:
	mov	edx, DWORD PTR _ui$225522[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225522[ebp], edx
$LN11@BuildDiplo:
	cmp	DWORD PTR _ui$225522[ebp], 22		; 00000016H
	jae	$LN9@BuildDiplo

; 4999 : 		{
; 5000 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225522[ebp]
	mov	DWORD PTR _eTargetPlayer$225526[ebp], eax

; 5001 : 
; 5002 : 			// don't count the player's own cities
; 5003 : 			if(eTargetPlayer == m_pPlayer->GetID() || !GET_PLAYER(eTargetPlayer).isAlive())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T242518[ebp], eax
	mov	ecx, DWORD PTR _eTargetPlayer$225526[ebp]
	cmp	ecx, DWORD PTR $T242518[ebp]
	je	SHORT $LN7@BuildDiplo
	mov	edx, DWORD PTR _eTargetPlayer$225526[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242522[ebp], edx
	mov	eax, DWORD PTR $T242522[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T242531[ebp], cl
	movzx	edx, BYTE PTR $T242531[ebp]
	test	edx, edx
	jne	SHORT $LN8@BuildDiplo
$LN7@BuildDiplo:

; 5004 : 			{
; 5005 : 				continue;

	jmp	SHORT $LN10@BuildDiplo
$LN8@BuildDiplo:

; 5006 : 			}
; 5007 : 
; 5008 : 			if (m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(eTargetPlayer) == CvLeagueAI::DIPLOMAT_USEFULNESS_NONE)

	mov	eax, DWORD PTR _eTargetPlayer$225526[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
	test	eax, eax
	jne	SHORT $LN6@BuildDiplo

; 5009 : 			{
; 5010 : 				continue;

	jmp	$LN10@BuildDiplo
$LN6@BuildDiplo:

; 5011 : 			}
; 5012 : 
; 5013 : 			CvCity* pCapitalCity = GET_PLAYER(eTargetPlayer).getCapitalCity();

	mov	edx, DWORD PTR _eTargetPlayer$225526[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242535[ebp], edx
	mov	ecx, DWORD PTR $T242535[ebp]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	DWORD PTR _pCapitalCity$225531[ebp], eax

; 5014 : 			if (!pCapitalCity)

	cmp	DWORD PTR _pCapitalCity$225531[ebp], 0
	jne	SHORT $LN5@BuildDiplo

; 5015 : 			{
; 5016 : 				continue;

	jmp	$LN10@BuildDiplo
$LN5@BuildDiplo:

; 5017 : 			}
; 5018 : 
; 5019 : 			// if we can't see it, we can't move a diplomat there.
; 5020 : 			if (!pCapitalCity->isRevealed(m_pPlayer->getTeam(), false))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T242544[ebp], ecx
	mov	edx, DWORD PTR $T242544[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T242545[ebp], eax
	push	0
	mov	ecx, DWORD PTR $T242545[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCapitalCity$225531[ebp]
	call	?isRevealed@CvCity@@QBE_NW4TeamTypes@@_N@Z ; CvCity::isRevealed
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@BuildDiplo

; 5021 : 			{
; 5022 : 				continue;

	jmp	$LN10@BuildDiplo
$LN4@BuildDiplo:

; 5023 : 			}
; 5024 : 
; 5025 : 			ScoreCityEntry kEntry;
; 5026 : 			kEntry.m_pCity = pCapitalCity;

	mov	eax, DWORD PTR _pCapitalCity$225531[ebp]
	mov	DWORD PTR _kEntry$225534[ebp], eax

; 5027 : 			kEntry.m_iScore = m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(eTargetPlayer);

	mov	ecx, DWORD PTR _eTargetPlayer$225526[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
	mov	DWORD PTR _kEntry$225534[ebp+4], eax

; 5028 : 			aCityScores.push_back(kEntry);

	lea	eax, DWORD PTR _kEntry$225534[ebp]
	push	eax
	lea	ecx, DWORD PTR _aCityScores$225521[ebp]
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back

; 5029 : 		}

	jmp	$LN10@BuildDiplo
$LN9@BuildDiplo:

; 5030 : 
; 5031 : 		// sort
; 5032 : 		std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	xor	ecx, ecx
	mov	BYTE PTR $T242403[ebp], cl
	mov	edx, DWORD PTR _aCityScores$225521[ebp+8]
	mov	DWORD PTR $T242590[ebp], edx
	mov	eax, DWORD PTR $T242590[ebp]
	mov	DWORD PTR $T242404[ebp], eax
	mov	ecx, DWORD PTR _aCityScores$225521[ebp+4]
	mov	DWORD PTR $T242606[ebp], ecx
	mov	edx, DWORD PTR $T242606[ebp]
	mov	DWORD PTR $T242405[ebp], edx
	movzx	eax, BYTE PTR $T242403[ebp]
	push	eax
	mov	ecx, DWORD PTR $T242404[ebp]
	push	ecx
	mov	edx, DWORD PTR $T242405[ebp]
	push	edx
	call	??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 12					; 0000000cH

; 5033 : 
; 5034 : 		// transfer values to OffenseCityList
; 5035 : 		for(uint ui = 0; ui < aCityScores.size(); ui++)

	mov	DWORD PTR _ui$225692[ebp], 0
	jmp	SHORT $LN130@BuildDiplo
$LN2@BuildDiplo:
	mov	eax, DWORD PTR _ui$225692[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$225692[ebp], eax
$LN130@BuildDiplo:
	mov	ecx, DWORD PTR _aCityScores$225521[ebp+8]
	sub	ecx, DWORD PTR _aCityScores$225521[ebp+4]
	sar	ecx, 3
	cmp	DWORD PTR _ui$225692[ebp], ecx
	jae	SHORT $LN1@BuildDiplo

; 5036 : 		{
; 5037 : 			aDiplomatCityList.push_back(aCityScores[ui].m_pCity);

	mov	edx, DWORD PTR _aCityScores$225521[ebp+4]
	mov	eax, DWORD PTR _ui$225692[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	push	ecx
	mov	ecx, DWORD PTR _aDiplomatCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back

; 5038 : 		}

	jmp	SHORT $LN2@BuildDiplo
$LN1@BuildDiplo:

; 5039 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aCityScores$225521[ebp]
	call	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN18@BuildDiplo:

; 5040 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$225521[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3:
	lea	ecx, DWORD PTR _aCityScores$225521[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-344]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildDiplomatCityList
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
EXTRN	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsAllowsOpenBordersToTeam
EXTRN	?IsHasDefensivePact@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsHasDefensivePact
EXTRN	?IsHasResearchAgreement@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsHasResearchAgreement
EXTRN	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsDenouncedPlayer
EXTRN	?IsPlayerStopSpyingRequestAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsPlayerStopSpyingRequestAccepted
EXTRN	?GetWarGoal@CvDiplomacyAI@@QBE?AW4WarGoalTypes@@W4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetWarGoal
EXTRN	?getPopulation@CvCity@@QBEHXZ:PROC		; CvCity::getPopulation
EXTRN	?getNumTechInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumTechInfos
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3
__ehfuncinfo$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -516						; size = 4
$T243407 = -389						; size = 1
$T243406 = -388						; size = 4
$T243405 = -384						; size = 4
$T243269 = -316						; size = 4
$T243253 = -312						; size = 4
$T243121 = -252						; size = 4
$T243117 = -248						; size = 4
$T243113 = -244						; size = 4
$T243109 = -240						; size = 4
$T243105 = -236						; size = 4
$T243101 = -232						; size = 4
$T243097 = -228						; size = 4
$T243084 = -224						; size = 4
$T243066 = -220						; size = 4
_uiOffset$243041 = -216					; size = 4
$T243032 = -212						; size = 4
$T243023 = -208						; size = 4
$T243019 = -204						; size = 4
$T243015 = -200						; size = 4
$T243011 = -196						; size = 4
$T242999 = -192						; size = 4
$T242980 = -180						; size = 4
$T242943 = -176						; size = 4
$T242927 = -172						; size = 4
$T242955 = -168						; size = 4
$T242954 = -164						; size = 4
$T242953 = -160						; size = 4
$T242952 = -156						; size = 4
$T242951 = -152						; size = 4
$T242910 = -148						; size = 4
$T242909 = -144						; size = 4
$T242908 = -137						; size = 1
_ui$225781 = -136					; size = 4
_iCost$225749 = -132					; size = 4
_iCost$225746 = -128					; size = 4
_pCityPlot$225736 = -124				; size = 4
_iDiploModifier$225752 = -120				; size = 4
_pCityEspionage$225739 = -116				; size = 4
_kEntry$225766 = -112					; size = 8
_iNumRemainingTurns$225740 = -104			; size = 4
_iSpyIndex$225741 = -100				; size = 4
_iScore$225767 = -96					; size = 4
_eTargetTeam$225731 = -92				; size = 4
_eTargetPlayer$225728 = -88				; size = 4
_pTargetDiploAI$225732 = -84				; size = 4
_ui$225724 = -80					; size = 4
_iTechCost$225715 = -76					; size = 4
_eTech$225710 = -72					; size = 4
_pkTechInfo$225712 = -68				; size = 4
_iTechLoop$225706 = -64					; size = 4
_pMyPlayerTechs$ = -60					; size = 4
_ePlayer$ = -56						; size = 4
_aCityScores$ = -52					; size = 16
_pEspionage$ = -36					; size = 4
_iMaxTechCost$ = -32					; size = 4
_eTeam$ = -28						; size = 4
_pDiploAI$ = -24					; size = 4
_pLoopCity$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_aOffenseCityList$ = 8					; size = 4
?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildOffenseCityList, COMDAT
; _this$ = ecx

; 5043 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5044 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5045 : 
; 5046 : 	aOffenseCityList.clear();

	mov	ecx, DWORD PTR _aOffenseCityList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T242927[ebp], edx
	mov	eax, DWORD PTR $T242927[ebp]
	mov	DWORD PTR $T242952[ebp], eax
	mov	ecx, DWORD PTR $T242952[ebp]
	mov	DWORD PTR $T242951[ebp], ecx
	mov	edx, DWORD PTR _aOffenseCityList$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242943[ebp], eax
	mov	ecx, DWORD PTR $T242943[ebp]
	mov	DWORD PTR $T242954[ebp], ecx
	mov	edx, DWORD PTR $T242954[ebp]
	mov	DWORD PTR $T242953[ebp], edx
	mov	eax, DWORD PTR $T242951[ebp]
	push	eax
	mov	ecx, DWORD PTR $T242953[ebp]
	push	ecx
	lea	edx, DWORD PTR $T242955[ebp]
	push	edx
	mov	ecx, DWORD PTR _aOffenseCityList$[ebp]
	call	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase

; 5047 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 5048 : 	TeamTypes eTeam = GET_PLAYER(ePlayer).getTeam();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242980[ebp], eax
	mov	ecx, DWORD PTR $T242980[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$[ebp], eax

; 5049 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDiploAI$[ebp], eax

; 5050 : 
; 5051 : 	// find the most expensive available research
; 5052 : 	int iMaxTechCost = -1;

	mov	DWORD PTR _iMaxTechCost$[ebp], -1

; 5053 : 	CvPlayerTechs* pMyPlayerTechs = m_pPlayer->GetPlayerTechs();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	DWORD PTR _pMyPlayerTechs$[ebp], eax

; 5054 : 
; 5055 : #ifdef AUI_WARNING_FIXES
; 5056 : 	for (uint iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)
; 5057 : #else
; 5058 : 	for(int iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)

	mov	DWORD PTR _iTechLoop$225706[ebp], 0
	jmp	SHORT $LN42@BuildOffen
$LN41@BuildOffen:
	mov	edx, DWORD PTR _iTechLoop$225706[ebp]
	add	edx, 1
	mov	DWORD PTR _iTechLoop$225706[ebp], edx
$LN42@BuildOffen:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTechInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTechInfos
	cmp	DWORD PTR _iTechLoop$225706[ebp], eax
	jge	SHORT $LN40@BuildOffen

; 5059 : #endif
; 5060 : 	{
; 5061 : 		const TechTypes eTech = static_cast<TechTypes>(iTechLoop);

	mov	eax, DWORD PTR _iTechLoop$225706[ebp]
	mov	DWORD PTR _eTech$225710[ebp], eax

; 5062 : 		CvTechEntry* pkTechInfo = GC.getTechInfo(eTech);

	mov	ecx, DWORD PTR _eTech$225710[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pkTechInfo$225712[ebp], eax

; 5063 : 		if(!pkTechInfo)

	cmp	DWORD PTR _pkTechInfo$225712[ebp], 0
	jne	SHORT $LN39@BuildOffen

; 5064 : 		{
; 5065 : 			continue;

	jmp	SHORT $LN41@BuildOffen
$LN39@BuildOffen:

; 5066 : 		}
; 5067 : 		
; 5068 : 		//check if it is disabled for spy stealing
; 5069 : 		//if (!pkTechInfo->IsDisableTechSteal())
; 5070 : 		//{
; 5071 : 		//	continue;
; 5072 : 		//}
; 5073 : 
; 5074 : 		// try to find the most expensive tech that can be researched
; 5075 : 		if(pMyPlayerTechs->CanResearch(eTech))

	push	0
	mov	edx, DWORD PTR _eTech$225710[ebp]
	push	edx
	mov	ecx, DWORD PTR _pMyPlayerTechs$[ebp]
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@BuildOffen

; 5076 : 		{
; 5077 : 			int iTechCost = m_pPlayer->GetPlayerTechs()->GetResearchCost(eTech) * 100;

	mov	ecx, DWORD PTR _eTech$225710[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z ; CvPlayerTechs::GetResearchCost
	imul	eax, 100				; 00000064H
	mov	DWORD PTR _iTechCost$225715[ebp], eax

; 5078 : 			if(iTechCost > iMaxTechCost)

	mov	eax, DWORD PTR _iTechCost$225715[ebp]
	cmp	eax, DWORD PTR _iMaxTechCost$[ebp]
	jle	SHORT $LN38@BuildOffen

; 5079 : 			{
; 5080 : 				iMaxTechCost = iTechCost;

	mov	ecx, DWORD PTR _iTechCost$225715[ebp]
	mov	DWORD PTR _iMaxTechCost$[ebp], ecx
$LN38@BuildOffen:

; 5081 : 			}
; 5082 : 		}
; 5083 : 	}

	jmp	SHORT $LN41@BuildOffen
$LN40@BuildOffen:

; 5084 : 
; 5085 : 	std::vector<ScoreCityEntry> aCityScores;

	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5086 : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 5087 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 5088 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225724[ebp], 0
	jmp	SHORT $LN36@BuildOffen
$LN35@BuildOffen:
	mov	edx, DWORD PTR _ui$225724[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225724[ebp], edx
$LN36@BuildOffen:
	cmp	DWORD PTR _ui$225724[ebp], 22		; 00000016H
	jae	$LN34@BuildOffen

; 5089 : 	{
; 5090 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225724[ebp]
	mov	DWORD PTR _eTargetPlayer$225728[ebp], eax

; 5091 : 
; 5092 : 		// don't count the player's own cities
; 5093 : 		if(eTargetPlayer == ePlayer)

	mov	ecx, DWORD PTR _eTargetPlayer$225728[ebp]
	cmp	ecx, DWORD PTR _ePlayer$[ebp]
	jne	SHORT $LN33@BuildOffen

; 5094 : 		{
; 5095 : 			continue;

	jmp	SHORT $LN35@BuildOffen
$LN33@BuildOffen:

; 5096 : 		}
; 5097 : 
; 5098 : 		TeamTypes eTargetTeam = GET_PLAYER(eTargetPlayer).getTeam();

	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T242999[ebp], edx
	mov	eax, DWORD PTR $T242999[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTargetTeam$225731[ebp], eax

; 5099 : 		CvDiplomacyAI* pTargetDiploAI = GET_PLAYER(eTargetPlayer).GetDiplomacyAI();

	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243011[ebp], edx
	mov	ecx, DWORD PTR $T243011[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pTargetDiploAI$225732[ebp], eax

; 5100 : 
; 5101 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	eax, DWORD PTR _eTargetPlayer$225728[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243015[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T243015[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN32@BuildOffen
$LN31@BuildOffen:
	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243019[ebp], edx
	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243019[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN32@BuildOffen:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN30@BuildOffen

; 5102 : 		{
; 5103 : 			CvPlot* pCityPlot = pLoopCity->plot();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	DWORD PTR _pCityPlot$225736[ebp], eax

; 5104 : 			CvAssertMsg(pCityPlot, "City plot is null!");
; 5105 : 			if(!pCityPlot)

	cmp	DWORD PTR _pCityPlot$225736[ebp], 0
	jne	SHORT $LN29@BuildOffen

; 5106 : 			{
; 5107 : 				continue;

	jmp	SHORT $LN31@BuildOffen
$LN29@BuildOffen:

; 5108 : 			}
; 5109 : 
; 5110 : 			if(!pCityPlot->isRevealed(GET_PLAYER(ePlayer).getTeam()))

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243023[ebp], ecx
	mov	edx, DWORD PTR $T243023[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T243032[ebp], eax
	mov	ecx, DWORD PTR $T243032[ebp]
	shr	ecx, 5
	mov	DWORD PTR _uiOffset$243041[ebp], ecx
	mov	edx, DWORD PTR _uiOffset$243041[ebp]
	shl	edx, 5
	mov	ecx, DWORD PTR $T243032[ebp]
	sub	ecx, edx
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _uiOffset$243041[ebp]
	mov	edx, DWORD PTR _pCityPlot$225736[ebp]
	and	eax, DWORD PTR [edx+ecx*4+8]
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN28@BuildOffen

; 5111 : 			{
; 5112 : 				continue;

	jmp	$LN31@BuildOffen
$LN28@BuildOffen:

; 5113 : 			}
; 5114 : 
; 5115 : 			CvCityEspionage* pCityEspionage = pLoopCity->GetCityEspionage();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR _pCityEspionage$225739[ebp], eax

; 5116 : 
; 5117 : 			int iNumRemainingTurns = MAX_INT;

	mov	DWORD PTR _iNumRemainingTurns$225740[ebp], 2147483647 ; 7fffffffH

; 5118 : 			int iSpyIndex = pEspionage->GetSpyIndexInCity(pLoopCity);

	mov	edx, DWORD PTR _pLoopCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
	mov	DWORD PTR _iSpyIndex$225741[ebp], eax

; 5119 : 			// if there is a spy currently stealing there, use the actual data
; 5120 : 			if(iSpyIndex >= 0 && pEspionage->m_aSpyList[iSpyIndex].m_eSpyState == SPY_STATE_GATHERING_INTEL)

	cmp	DWORD PTR _iSpyIndex$225741[ebp], 0
	jl	SHORT $LN109@BuildOffen
	mov	eax, DWORD PTR _iSpyIndex$225741[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+eax+16], 3
	jne	SHORT $LN109@BuildOffen

; 5121 : 			{
; 5122 : 				if(pCityEspionage->m_aiRate[ePlayer] != 0)

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _pCityEspionage$225739[ebp]
	cmp	DWORD PTR [ecx+eax*4+180], 0
	je	SHORT $LN26@BuildOffen

; 5123 : 				{
; 5124 : 					iNumRemainingTurns = (pCityEspionage->m_aiGoal[ePlayer] - pCityEspionage->m_aiAmount[ePlayer]) / pCityEspionage->m_aiRate[ePlayer];

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _pCityEspionage$225739[ebp]
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$225739[ebp]
	mov	eax, DWORD PTR [eax+edx*4+268]
	sub	eax, DWORD PTR [esi+ecx*4+92]
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	esi, DWORD PTR _pCityEspionage$225739[ebp]
	cdq
	idiv	DWORD PTR [esi+ecx*4+180]
	mov	DWORD PTR _iNumRemainingTurns$225740[ebp], eax
$LN26@BuildOffen:

; 5125 : 				}
; 5126 : 			}

	jmp	$LN25@BuildOffen

; 5127 : 			// if we have any history with the city, use that data instead
; 5128 : 			else if(pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()] > 0)

$LN109@BuildOffen:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T243066[ebp], ecx
	mov	edx, DWORD PTR $T243066[ebp]
	mov	eax, DWORD PTR _pCityEspionage$225739[ebp]
	cmp	DWORD PTR [eax+edx*4+532], 0
	jle	SHORT $LN24@BuildOffen

; 5129 : 			{
; 5130 : 				int iCost = iMaxTechCost;

	mov	ecx, DWORD PTR _iMaxTechCost$[ebp]
	mov	DWORD PTR _iCost$225746[ebp], ecx

; 5131 : 				if(pEspionage->m_aiMaxTechCost[eTargetPlayer] > 0)

	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	mov	eax, DWORD PTR _pEspionage$[ebp]
	cmp	DWORD PTR [eax+edx*4+824], 0
	jle	SHORT $LN119@BuildOffen

; 5132 : 				{
; 5133 : 					iCost = pEspionage->m_aiMaxTechCost[eTargetPlayer];

	mov	ecx, DWORD PTR _eTargetPlayer$225728[ebp]
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+824]
	mov	DWORD PTR _iCost$225746[ebp], eax

; 5134 : 				}
; 5135 : 
; 5136 : 				iNumRemainingTurns = iCost / pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()];

$LN119@BuildOffen:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T243084[ebp], eax
	mov	ecx, DWORD PTR $T243084[ebp]
	mov	esi, DWORD PTR _pCityEspionage$225739[ebp]
	mov	eax, DWORD PTR _iCost$225746[ebp]
	cdq
	idiv	DWORD PTR [esi+ecx*4+532]
	mov	DWORD PTR _iNumRemainingTurns$225740[ebp], eax

; 5137 : 			}
; 5138 : 			// estimate the number of turns using the population
; 5139 : 			else

	jmp	SHORT $LN25@BuildOffen
$LN24@BuildOffen:

; 5140 : 			{
; 5141 : 				int iCost = iMaxTechCost;

	mov	edx, DWORD PTR _iMaxTechCost$[ebp]
	mov	DWORD PTR _iCost$225749[ebp], edx

; 5142 : 				if(pEspionage->m_aiMaxTechCost[eTargetPlayer] > 0)

	mov	eax, DWORD PTR _eTargetPlayer$225728[ebp]
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	cmp	DWORD PTR [ecx+eax*4+824], 0
	jle	SHORT $LN21@BuildOffen

; 5143 : 				{
; 5144 : 					iCost = pEspionage->m_aiMaxTechCost[eTargetPlayer];

	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	mov	eax, DWORD PTR _pEspionage$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+824]
	mov	DWORD PTR _iCost$225749[ebp], ecx
$LN21@BuildOffen:

; 5145 : 				}
; 5146 : 				if(pLoopCity->getPopulation() > 0)

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	test	eax, eax
	jle	SHORT $LN25@BuildOffen

; 5147 : 				{
; 5148 : 					iNumRemainingTurns = iCost / (pLoopCity->getPopulation() * 100);

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	mov	ecx, eax
	imul	ecx, 100				; 00000064H
	mov	eax, DWORD PTR _iCost$225749[ebp]
	cdq
	idiv	ecx
	mov	DWORD PTR _iNumRemainingTurns$225740[ebp], eax
$LN25@BuildOffen:

; 5149 : 				}
; 5150 : 			}
; 5151 : 
; 5152 : 			int iDiploModifier = 1;

	mov	DWORD PTR _iDiploModifier$225752[ebp], 1

; 5153 : 			if (pDiploAI->GetWarGoal(eTargetPlayer) == WAR_GOAL_PREPARE)

	mov	edx, DWORD PTR _eTargetPlayer$225728[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?GetWarGoal@CvDiplomacyAI@@QBE?AW4WarGoalTypes@@W4PlayerTypes@@@Z ; CvDiplomacyAI::GetWarGoal
	cmp	eax, 1
	jne	SHORT $LN19@BuildOffen

; 5154 : 			{
; 5155 : 				iDiploModifier = 1;

	mov	DWORD PTR _iDiploModifier$225752[ebp], 1
	jmp	$LN18@BuildOffen
$LN19@BuildOffen:

; 5156 : 			}
; 5157 : 			else if (GET_TEAM(eTeam).isAtWar(eTargetTeam))

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T243097[ebp], eax
	mov	ecx, DWORD PTR _eTargetTeam$225731[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T243097[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@BuildOffen

; 5158 : 			{
; 5159 : 				// ignore promises
; 5160 : 				// bonus targeting!
; 5161 : 				iDiploModifier = 1;

	mov	DWORD PTR _iDiploModifier$225752[ebp], 1

; 5162 : 			}
; 5163 : 			else // we're not at war with them, so look at other factors

	jmp	$LN18@BuildOffen
$LN17@BuildOffen:

; 5164 : 			{
; 5165 : 				// raise our diplo modifier by a scale of 10 so that we're less likely to target those we aren't at war with
; 5166 : 				iDiploModifier = 10;

	mov	DWORD PTR _iDiploModifier$225752[ebp], 10 ; 0000000aH

; 5167 : 				// if we promised not to spy, make it less likely that we will spy
; 5168 : 				if (pDiploAI->IsPlayerStopSpyingRequestAccepted(eTargetPlayer))

	mov	eax, DWORD PTR _eTargetPlayer$225728[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsPlayerStopSpyingRequestAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsPlayerStopSpyingRequestAccepted
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@BuildOffen

; 5169 : 				{
; 5170 : 					// target far less frequently
; 5171 : 					iDiploModifier *= 100;

	mov	edx, DWORD PTR _iDiploModifier$225752[ebp]
	imul	edx, 100				; 00000064H
	mov	DWORD PTR _iDiploModifier$225752[ebp], edx
$LN15@BuildOffen:

; 5172 : 				}
; 5173 : 
; 5174 : 				// if we've denounced them or they've denounced us, spy bonus!
; 5175 : 				if (pDiploAI->IsDenouncedPlayer(eTargetPlayer) || pTargetDiploAI->IsDenouncedPlayer(ePlayer))

	mov	eax, DWORD PTR _eTargetPlayer$225728[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDenouncedPlayer
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@BuildOffen
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTargetDiploAI$225732[ebp]
	call	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDenouncedPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@BuildOffen
$LN13@BuildOffen:

; 5176 : 				{
; 5177 : 					iDiploModifier /= 2;

	mov	eax, DWORD PTR _iDiploModifier$225752[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iDiploModifier$225752[ebp], eax
	jmp	SHORT $LN12@BuildOffen
$LN14@BuildOffen:

; 5178 : 				}
; 5179 : 				else if (pDiploAI->IsDoFAccepted(eTargetPlayer))

	mov	ecx, DWORD PTR _eTargetPlayer$225728[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDoFAccepted
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@BuildOffen

; 5180 : 				{
; 5181 : 					iDiploModifier *= 50;

	mov	eax, DWORD PTR _iDiploModifier$225752[ebp]
	imul	eax, 50					; 00000032H
	mov	DWORD PTR _iDiploModifier$225752[ebp], eax
$LN12@BuildOffen:

; 5182 : 				}
; 5183 : 
; 5184 : 				if (GET_TEAM(eTeam).IsHasResearchAgreement(eTargetTeam))

	mov	ecx, DWORD PTR _eTeam$[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T243101[ebp], ecx
	mov	edx, DWORD PTR _eTargetTeam$225731[ebp]
	push	edx
	mov	ecx, DWORD PTR $T243101[ebp]
	call	?IsHasResearchAgreement@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsHasResearchAgreement
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@BuildOffen

; 5185 : 				{
; 5186 : 					iDiploModifier *= 5;

	mov	ecx, DWORD PTR _iDiploModifier$225752[ebp]
	imul	ecx, 5
	mov	DWORD PTR _iDiploModifier$225752[ebp], ecx
$LN10@BuildOffen:

; 5187 : 				}
; 5188 : 
; 5189 : 				if (GET_TEAM(eTeam).IsHasDefensivePact(eTargetTeam))

	mov	edx, DWORD PTR _eTeam$[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T243105[ebp], edx
	mov	eax, DWORD PTR _eTargetTeam$225731[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243105[ebp]
	call	?IsHasDefensivePact@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsHasDefensivePact
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@BuildOffen

; 5190 : 				{
; 5191 : 					iDiploModifier *= 50;

	mov	edx, DWORD PTR _iDiploModifier$225752[ebp]
	imul	edx, 50					; 00000032H
	mov	DWORD PTR _iDiploModifier$225752[ebp], edx
$LN9@BuildOffen:

; 5192 : 				}
; 5193 : 
; 5194 : 				if (GET_TEAM(eTeam).IsAllowsOpenBordersToTeam(eTargetTeam))

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T243109[ebp], eax
	mov	ecx, DWORD PTR _eTargetTeam$225731[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T243109[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@BuildOffen

; 5195 : 				{
; 5196 : 					iDiploModifier *= 2;

	mov	eax, DWORD PTR _iDiploModifier$225752[ebp]
	shl	eax, 1
	mov	DWORD PTR _iDiploModifier$225752[ebp], eax
$LN8@BuildOffen:

; 5197 : 				}
; 5198 : 
; 5199 : 				if (GET_TEAM(eTargetTeam).IsAllowsOpenBordersToTeam(eTeam))

	mov	ecx, DWORD PTR _eTargetTeam$225731[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T243113[ebp], ecx
	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T243113[ebp]
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@BuildOffen

; 5200 : 				{
; 5201 : 					iDiploModifier *= 2;

	mov	ecx, DWORD PTR _iDiploModifier$225752[ebp]
	shl	ecx, 1
	mov	DWORD PTR _iDiploModifier$225752[ebp], ecx
$LN18@BuildOffen:

; 5202 : 				}
; 5203 : 			}
; 5204 : 
; 5205 : 			ScoreCityEntry kEntry;
; 5206 : 			kEntry.m_pCity = pLoopCity;

	mov	edx, DWORD PTR _pLoopCity$[ebp]
	mov	DWORD PTR _kEntry$225766[ebp], edx

; 5207 : 
; 5208 : 			int iScore = iNumRemainingTurns * iDiploModifier;

	mov	eax, DWORD PTR _iNumRemainingTurns$225740[ebp]
	imul	eax, DWORD PTR _iDiploModifier$225752[ebp]
	mov	DWORD PTR _iScore$225767[ebp], eax

; 5209 : 			if (m_aiCivOutOfTechTurn[eTargetPlayer] == GC.getGame().getGameTurn())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _eTargetPlayer$225728[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T243117[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T243121[ebp], edx
	mov	ecx, DWORD PTR $T243121[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T243117[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN141@BuildOffen

; 5210 : 			{
; 5211 : 				iScore = MAX_INT;

	mov	DWORD PTR _iScore$225767[ebp], 2147483647 ; 7fffffffH
	jmp	SHORT $LN5@BuildOffen

; 5212 : 			}
; 5213 : 			else if(m_aiCivOutOfTechTurn[eTargetPlayer] > 0)

$LN141@BuildOffen:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _eTargetPlayer$225728[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	jle	SHORT $LN5@BuildOffen

; 5214 : 			{
; 5215 : 				iScore = iScore * m_aiCivOutOfTechTurn[eTargetPlayer];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _eTargetPlayer$225728[ebp]
	mov	edx, DWORD PTR _iScore$225767[ebp]
	imul	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _iScore$225767[ebp], edx
$LN5@BuildOffen:

; 5216 : 			}
; 5217 : 
; 5218 : 			kEntry.m_iScore = iScore;

	mov	eax, DWORD PTR _iScore$225767[ebp]
	mov	DWORD PTR _kEntry$225766[ebp+4], eax

; 5219 : 
; 5220 : 			aCityScores.push_back(kEntry);

	lea	ecx, DWORD PTR _kEntry$225766[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back

; 5221 : 		}

	jmp	$LN31@BuildOffen
$LN30@BuildOffen:

; 5222 : 	}

	jmp	$LN35@BuildOffen
$LN34@BuildOffen:

; 5223 : 
; 5224 : 	// sort
; 5225 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryLowEval());

	xor	edx, edx
	mov	BYTE PTR $T242908[ebp], dl
	mov	eax, DWORD PTR _aCityScores$[ebp+8]
	mov	DWORD PTR $T243253[ebp], eax
	mov	ecx, DWORD PTR $T243253[ebp]
	mov	DWORD PTR $T242909[ebp], ecx
	mov	edx, DWORD PTR _aCityScores$[ebp+4]
	mov	DWORD PTR $T243269[ebp], edx
	mov	eax, DWORD PTR $T243269[ebp]
	mov	DWORD PTR $T242910[ebp], eax
	mov	cl, BYTE PTR $T242908[ebp]
	mov	BYTE PTR $T243407[ebp], cl
	mov	edx, DWORD PTR $T242909[ebp]
	mov	DWORD PTR $T243406[ebp], edx
	mov	eax, DWORD PTR $T242910[ebp]
	mov	DWORD PTR $T243405[ebp], eax
	mov	ecx, DWORD PTR $T243405[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T243406[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN206@BuildOffen
	movzx	edx, BYTE PTR $T243407[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR $T243406[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243405[ebp]
	push	ecx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H
$LN206@BuildOffen:

; 5226 : 
; 5227 : 	// transfer values to OffenseCityList
; 5228 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	mov	DWORD PTR _ui$225781[ebp], 0
	jmp	SHORT $LN261@BuildOffen
$LN2@BuildOffen:
	mov	edx, DWORD PTR _ui$225781[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225781[ebp], edx
$LN261@BuildOffen:
	mov	eax, DWORD PTR _aCityScores$[ebp+8]
	sub	eax, DWORD PTR _aCityScores$[ebp+4]
	sar	eax, 3
	cmp	DWORD PTR _ui$225781[ebp], eax
	jae	SHORT $LN1@BuildOffen

; 5229 : 	{
; 5230 : 		aOffenseCityList.push_back(aCityScores[ui].m_pCity);

	mov	ecx, DWORD PTR _aCityScores$[ebp+4]
	mov	edx, DWORD PTR _ui$225781[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _aOffenseCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back

; 5231 : 	}

	jmp	SHORT $LN2@BuildOffen
$LN1@BuildOffen:

; 5232 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-512]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildOffenseCityList
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3
__ehfuncinfo$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_this$ = -300						; size = 4
$T243916 = -197						; size = 1
$T243915 = -196						; size = 4
$T243914 = -192						; size = 4
$T243839 = -144						; size = 4
$T243823 = -140						; size = 4
$T243778 = -112						; size = 4
$T243774 = -108						; size = 4
$T243730 = -96						; size = 4
$T243714 = -92						; size = 4
$T243755 = -88						; size = 4
$T243754 = -84						; size = 4
$T243753 = -80						; size = 4
$T243752 = -76						; size = 4
$T243751 = -72						; size = 4
$T243697 = -68						; size = 4
$T243696 = -64						; size = 4
$T243695 = -57						; size = 1
_ui$225805 = -56					; size = 4
_kEntry$225801 = -52					; size = 8
_ePlayer$ = -44						; size = 4
_aCityScores$ = -40					; size = 16
_pEspionage$ = -24					; size = 4
_pLoopCity$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_aDefenseCityList$ = 8					; size = 4
?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildDefenseCityList, COMDAT
; _this$ = ecx

; 5235 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5236 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5237 : 
; 5238 : 	aDefenseCityList.clear();

	mov	ecx, DWORD PTR _aDefenseCityList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T243714[ebp], edx
	mov	eax, DWORD PTR $T243714[ebp]
	mov	DWORD PTR $T243752[ebp], eax
	mov	ecx, DWORD PTR $T243752[ebp]
	mov	DWORD PTR $T243751[ebp], ecx
	mov	edx, DWORD PTR _aDefenseCityList$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T243730[ebp], eax
	mov	ecx, DWORD PTR $T243730[ebp]
	mov	DWORD PTR $T243754[ebp], ecx
	mov	edx, DWORD PTR $T243754[ebp]
	mov	DWORD PTR $T243753[ebp], edx
	mov	eax, DWORD PTR $T243751[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243753[ebp]
	push	ecx
	lea	edx, DWORD PTR $T243755[ebp]
	push	edx
	mov	ecx, DWORD PTR _aDefenseCityList$[ebp]
	call	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase

; 5239 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 5240 : 
; 5241 : 	std::vector<ScoreCityEntry> aCityScores;

	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5242 : 
; 5243 : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 5244 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 5245 : 	for(pLoopCity = GET_PLAYER(ePlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(ePlayer).nextCity(&iLoop))

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243774[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T243774[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN6@BuildDefen
$LN5@BuildDefen:
	mov	edx, DWORD PTR _ePlayer$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T243778[ebp], edx
	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T243778[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN6@BuildDefen:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN4@BuildDefen

; 5246 : 	{
; 5247 : 		ScoreCityEntry kEntry;
; 5248 : 		kEntry.m_pCity = pLoopCity;

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	mov	DWORD PTR _kEntry$225801[ebp], ecx

; 5249 : 		kEntry.m_iScore = pEspionage->CalcPerTurn(SPY_STATE_GATHERING_INTEL, pLoopCity, -1);

	push	-1
	mov	edx, DWORD PTR _pLoopCity$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _kEntry$225801[ebp+4], eax

; 5250 : 		aCityScores.push_back(kEntry);

	lea	eax, DWORD PTR _kEntry$225801[ebp]
	push	eax
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back

; 5251 : 	}

	jmp	SHORT $LN5@BuildDefen
$LN4@BuildDefen:

; 5252 : 
; 5253 : 	// sort
; 5254 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	xor	ecx, ecx
	mov	BYTE PTR $T243695[ebp], cl
	mov	edx, DWORD PTR _aCityScores$[ebp+8]
	mov	DWORD PTR $T243823[ebp], edx
	mov	eax, DWORD PTR $T243823[ebp]
	mov	DWORD PTR $T243696[ebp], eax
	mov	ecx, DWORD PTR _aCityScores$[ebp+4]
	mov	DWORD PTR $T243839[ebp], ecx
	mov	edx, DWORD PTR $T243839[ebp]
	mov	DWORD PTR $T243697[ebp], edx
	mov	al, BYTE PTR $T243695[ebp]
	mov	BYTE PTR $T243916[ebp], al
	mov	ecx, DWORD PTR $T243696[ebp]
	mov	DWORD PTR $T243915[ebp], ecx
	mov	edx, DWORD PTR $T243697[ebp]
	mov	DWORD PTR $T243914[ebp], edx
	mov	eax, DWORD PTR $T243914[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T243915[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN68@BuildDefen
	movzx	ecx, BYTE PTR $T243916[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR $T243915[ebp]
	push	edx
	mov	eax, DWORD PTR $T243914[ebp]
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN68@BuildDefen:

; 5255 : 
; 5256 : 	// transfer values to aDefenseCityList
; 5257 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	mov	DWORD PTR _ui$225805[ebp], 0
	jmp	SHORT $LN93@BuildDefen
$LN2@BuildDefen:
	mov	ecx, DWORD PTR _ui$225805[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225805[ebp], ecx
$LN93@BuildDefen:
	mov	edx, DWORD PTR _aCityScores$[ebp+8]
	sub	edx, DWORD PTR _aCityScores$[ebp+4]
	sar	edx, 3
	cmp	DWORD PTR _ui$225805[ebp], edx
	jae	SHORT $LN1@BuildDefen

; 5258 : 	{
; 5259 : 		aDefenseCityList.push_back(aCityScores[ui].m_pCity);

	mov	eax, DWORD PTR _aCityScores$[ebp+4]
	mov	ecx, DWORD PTR _ui$225805[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	ecx, DWORD PTR _aDefenseCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back

; 5260 : 	}

	jmp	SHORT $LN2@BuildDefen
$LN1@BuildDefen:

; 5261 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-292]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildDefenseCityList
PUBLIC	?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ; CvEspionageAI::GetCityStatePlan
PUBLIC	??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@		; `string'
EXTRN	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsCloseToNotBeingAllies
EXTRN	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsAllies
EXTRN	?IsRecentlyBulliedByMajor@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsRecentlyBulliedByMajor
EXTRN	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z:PROC ; CvPlayer::GetProximityToPlayer
EXTRN	?GetPersonality@CvMinorCivAI@@QBE?AW4MinorCivPersonalityTypes@@XZ:PROC ; CvMinorCivAI::GetPersonality
EXTRN	?GetNumResourcesMajorLacks@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetNumResourcesMajorLacks
EXTRN	?IsEmpireUnhappy@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::IsEmpireUnhappy
EXTRN	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ:PROC	; CvMinorCivInfo::GetMinorCivTrait
EXTRN	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetMinorCivApproach
EXTRN	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z:PROC ; CvGlobals::getMinorCivInfo
EXTRN	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ:PROC ; CvMinorCivAI::GetMinorCivType
EXTRN	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z:PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
;	COMDAT ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@ DB 'FLAVOR_GROWTH', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3
__ehfuncinfo$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
tv499 = -560						; size = 4
tv221 = -556						; size = 4
_this$ = -552						; size = 4
$T244677 = -425						; size = 1
$T244676 = -424						; size = 4
$T244675 = -420						; size = 4
$T244539 = -352						; size = 4
$T244523 = -348						; size = 4
$T244397 = -288						; size = 4
$T244388 = -284						; size = 4
$T244379 = -280						; size = 4
$T244370 = -276						; size = 4
$T244361 = -272						; size = 4
$T244352 = -268						; size = 4
$T244348 = -264						; size = 4
$T244344 = -260						; size = 4
$T244340 = -256						; size = 4
$T244336 = -252						; size = 4
$T244332 = -248						; size = 4
$T244328 = -244						; size = 4
$T244319 = -240						; size = 4
$T244313 = -236						; size = 4
$T244306 = -232						; size = 4
$T244302 = -228						; size = 4
$T244298 = -224						; size = 4
$T244294 = -220						; size = 4
$T244285 = -216						; size = 4
$T244281 = -212						; size = 4
$T244277 = -208						; size = 4
$T244276 = -204						; size = 4
$T244267 = -200						; size = 4
$T244258 = -196						; size = 4
$T244254 = -192						; size = 4
$T244250 = -188						; size = 4
$T244249 = -184						; size = 4
$T244240 = -180						; size = 4
$T244231 = -176						; size = 4
$T244227 = -169						; size = 1
$T244218 = -168						; size = 4
$T244214 = -164						; size = 4
$T244178 = -152						; size = 4
$T244162 = -148						; size = 4
$T244190 = -144						; size = 4
$T244189 = -140						; size = 4
$T244188 = -136						; size = 4
$T244187 = -132						; size = 4
$T244186 = -128						; size = 4
$T244145 = -124						; size = 4
$T244144 = -120						; size = 4
$T244143 = -113						; size = 1
$T244142 = -112						; size = 4
$T244141 = -108						; size = 4
_ui$225895 = -104					; size = 4
_iResourcesWeLack$225860 = -100				; size = 4
_kEntry$225847 = -96					; size = 8
_iValue$225848 = -88					; size = 4
_iFriendshipWithMinor$225840 = -84			; size = 4
_bAlreadyScoredCity$225841 = -77			; size = 1
_eTargetPlayer$225831 = -76				; size = 4
_pMinorCivAI$225837 = -72				; size = 4
_eApproach$225839 = -68					; size = 4
_pMinorInfo$225838 = -64				; size = 4
_ui$225827 = -60					; size = 4
_aCityScores$ = -56					; size = 16
_pEspionage$ = -40					; size = 4
_eCurrentDiploThreat$ = -36				; size = 4
_pDiploAI$ = -32					; size = 4
_iCityStatePlan$ = -28					; size = 4
_pLoopCity$ = -24					; size = 4
_iGrowthFlavor$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_aMinorCityList$ = 8					; size = 4
?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildMinorCityList, COMDAT
; _this$ = ecx

; 5264 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 548				; 00000224H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5265 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5266 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDiploAI$[ebp], eax

; 5267 : 
; 5268 : 	aMinorCityList.clear();

	mov	edx, DWORD PTR _aMinorCityList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T244162[ebp], eax
	mov	ecx, DWORD PTR $T244162[ebp]
	mov	DWORD PTR $T244187[ebp], ecx
	mov	edx, DWORD PTR $T244187[ebp]
	mov	DWORD PTR $T244186[ebp], edx
	mov	eax, DWORD PTR _aMinorCityList$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T244178[ebp], ecx
	mov	edx, DWORD PTR $T244178[ebp]
	mov	DWORD PTR $T244189[ebp], edx
	mov	eax, DWORD PTR $T244189[ebp]
	mov	DWORD PTR $T244188[ebp], eax
	mov	ecx, DWORD PTR $T244186[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244188[ebp]
	push	edx
	lea	eax, DWORD PTR $T244190[ebp]
	push	eax
	mov	ecx, DWORD PTR _aMinorCityList$[ebp]
	call	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase

; 5269 : 
; 5270 : 	int iGrowthFlavor = m_pPlayer->GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes) GC.getInfoTypeForString("FLAVOR_GROWTH"));

	push	0
	push	OFFSET ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
	mov	DWORD PTR _iGrowthFlavor$[ebp], eax

; 5271 : 	PlayerTypes eCurrentDiploThreat = NO_PLAYER;

	mov	DWORD PTR _eCurrentDiploThreat$[ebp], -1

; 5272 : 	int iCityStatePlan = GetCityStatePlan(&eCurrentDiploThreat);

	lea	edx, DWORD PTR _eCurrentDiploThreat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ; CvEspionageAI::GetCityStatePlan
	mov	DWORD PTR _iCityStatePlan$[ebp], eax

; 5273 : 
; 5274 : 	std::vector<ScoreCityEntry> aCityScores;

	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5275 : 	CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 5276 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[ebp], 0

; 5277 : 	for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$225827[ebp], 22		; 00000016H
	jmp	SHORT $LN53@BuildMinor
$LN52@BuildMinor:
	mov	eax, DWORD PTR _ui$225827[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$225827[ebp], eax
$LN53@BuildMinor:
	cmp	DWORD PTR _ui$225827[ebp], 63		; 0000003fH
	jae	$LN51@BuildMinor

; 5278 : 	{
; 5279 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	ecx, DWORD PTR _ui$225827[ebp]
	mov	DWORD PTR _eTargetPlayer$225831[ebp], ecx

; 5280 : 
; 5281 : 		// only count minor civs
; 5282 : 		if (!GET_PLAYER(eTargetPlayer).isMinorCiv())

	mov	edx, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244214[ebp], edx
	mov	ecx, DWORD PTR $T244214[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN50@BuildMinor

; 5283 : 		{
; 5284 : 			continue;

	jmp	SHORT $LN52@BuildMinor
$LN50@BuildMinor:

; 5285 : 		}
; 5286 : 
; 5287 : 		if (!GET_PLAYER(eTargetPlayer).isAlive())

	mov	ecx, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244218[ebp], ecx
	mov	edx, DWORD PTR $T244218[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T244227[ebp], al
	movzx	ecx, BYTE PTR $T244227[ebp]
	test	ecx, ecx
	jne	SHORT $LN49@BuildMinor

; 5288 : 		{
; 5289 : 			continue;

	jmp	SHORT $LN52@BuildMinor
$LN49@BuildMinor:

; 5290 : 		}
; 5291 : 
; 5292 : 		// if we haven't met the civ, ignore
; 5293 : 		if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet((GET_PLAYER(eTargetPlayer).getTeam())))

	mov	edx, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244231[ebp], edx
	mov	eax, DWORD PTR $T244231[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244240[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T244249[ebp], eax
	mov	ecx, DWORD PTR $T244249[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244250[ebp], eax
	mov	eax, DWORD PTR $T244250[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T244254[ebp], eax
	mov	ecx, DWORD PTR $T244240[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T244254[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN48@BuildMinor

; 5294 : 		{
; 5295 : 			continue;

	jmp	$LN52@BuildMinor
$LN48@BuildMinor:

; 5296 : 		}
; 5297 : 
; 5298 : 		// if at war with the minor civ, do not try to assign a spy in the city
; 5299 : 		if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(GET_PLAYER(eTargetPlayer).getTeam()))

	mov	eax, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244258[ebp], eax
	mov	ecx, DWORD PTR $T244258[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244267[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T244276[ebp], ecx
	mov	edx, DWORD PTR $T244276[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T244277[ebp], eax
	mov	ecx, DWORD PTR $T244277[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T244281[ebp], ecx
	mov	edx, DWORD PTR $T244267[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244281[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@BuildMinor

; 5300 : 		{
; 5301 : 			continue;

	jmp	$LN52@BuildMinor
$LN47@BuildMinor:

; 5302 : 		}
; 5303 : 
; 5304 : 		CvMinorCivAI* pMinorCivAI = GET_PLAYER(eTargetPlayer).GetMinorCivAI();

	mov	ecx, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244285[ebp], ecx
	mov	ecx, DWORD PTR $T244285[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	DWORD PTR _pMinorCivAI$225837[ebp], eax

; 5305 : 		CvMinorCivInfo* pMinorInfo = GC.getMinorCivInfo(pMinorCivAI->GetMinorCivType());

	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ ; CvMinorCivAI::GetMinorCivType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ; CvGlobals::getMinorCivInfo
	mov	DWORD PTR _pMinorInfo$225838[ebp], eax

; 5306 : 		MinorCivApproachTypes eApproach = pDiploAI->GetMinorCivApproach(eTargetPlayer);

	mov	edx, DWORD PTR _eTargetPlayer$225831[ebp]
	push	edx
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z ; CvDiplomacyAI::GetMinorCivApproach
	mov	DWORD PTR _eApproach$225839[ebp], eax

; 5307 : 		int iFriendshipWithMinor = pMinorCivAI->GetEffectiveFriendshipWithMajor(m_pPlayer->GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244294[ebp], edx
	mov	eax, DWORD PTR $T244294[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	DWORD PTR _iFriendshipWithMinor$225840[ebp], eax

; 5308 : 		
; 5309 : 		bool bAlreadyScoredCity = false;

	mov	BYTE PTR _bAlreadyScoredCity$225841[ebp], 0

; 5310 : 		for (pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	ecx, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244298[ebp], ecx
	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T244298[ebp]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN46@BuildMinor
$LN45@BuildMinor:
	mov	eax, DWORD PTR _eTargetPlayer$225831[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244302[ebp], eax
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T244302[ebp]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN46@BuildMinor:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN44@BuildMinor

; 5311 : 		{
; 5312 : 			if(!pEspionage->CanEverMoveSpyTo(pLoopCity))

	mov	edx, DWORD PTR _pLoopCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN43@BuildMinor

; 5313 : 			{
; 5314 : 				continue;

	jmp	SHORT $LN45@BuildMinor
$LN43@BuildMinor:

; 5315 : 			}
; 5316 : 
; 5317 : 			// if we've already scored a city for this minor civ, we don't need to score another because the values would be the same
; 5318 : 			if (bAlreadyScoredCity)

	movzx	ecx, BYTE PTR _bAlreadyScoredCity$225841[ebp]
	test	ecx, ecx
	je	SHORT $LN42@BuildMinor

; 5319 : 			{
; 5320 : 				break;

	jmp	$LN44@BuildMinor
$LN42@BuildMinor:

; 5321 : 			}
; 5322 : 			bAlreadyScoredCity = true;

	mov	BYTE PTR _bAlreadyScoredCity$225841[ebp], 1

; 5323 : 
; 5324 : 			ScoreCityEntry kEntry;
; 5325 : 			kEntry.m_pCity = pLoopCity;

	mov	edx, DWORD PTR _pLoopCity$[ebp]
	mov	DWORD PTR _kEntry$225847[ebp], edx

; 5326 : 
; 5327 : 			int iValue = 100;

	mov	DWORD PTR _iValue$225848[ebp], 100	; 00000064H

; 5328 : 			switch (iCityStatePlan)

	mov	eax, DWORD PTR _iCityStatePlan$[ebp]
	mov	DWORD PTR tv221[ebp], eax
	cmp	DWORD PTR tv221[ebp], 3
	ja	$LN40@BuildMinor
	mov	ecx, DWORD PTR tv221[ebp]
	jmp	DWORD PTR $LN372@BuildMinor[ecx*4]
$LN39@BuildMinor:

; 5329 : 			{
; 5330 : 			case PLAN_PLAY_NORMAL:
; 5331 : 				// If we're not protective or friendly, then don't bother with minor diplo
; 5332 : 				if(eApproach == MINOR_CIV_APPROACH_PROTECTIVE || eApproach == MINOR_CIV_APPROACH_FRIENDLY)

	cmp	DWORD PTR _eApproach$225839[ebp], 2
	je	SHORT $LN37@BuildMinor
	cmp	DWORD PTR _eApproach$225839[ebp], 1
	jne	$LN38@BuildMinor
$LN37@BuildMinor:

; 5333 : 				{
; 5334 : 					// Nearly everyone likes to grow
; 5335 : 					if(pMinorInfo->GetMinorCivTrait() == MINOR_CIV_TRAIT_MARITIME && !m_pPlayer->IsEmpireUnhappy())

	mov	ecx, DWORD PTR _pMinorInfo$225838[ebp]
	call	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ ; CvMinorCivInfo::GetMinorCivTrait
	cmp	eax, 2
	jne	$LN36@BuildMinor
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsEmpireUnhappy@CvPlayer@@QBE_NXZ	; CvPlayer::IsEmpireUnhappy
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@BuildMinor

; 5336 : 					{
; 5337 : 						iValue += /*20*/ GC.getMC_GIFT_WEIGHT_MARITIME_GROWTH() * iGrowthFlavor * max(1, m_pPlayer->getNumCities() / 3);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR $T244141[ebp], eax
	mov	DWORD PTR $T244142[ebp], 1
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3460
	mov	DWORD PTR $T244306[ebp], edx
	mov	eax, DWORD PTR $T244142[ebp]
	cmp	eax, DWORD PTR $T244141[ebp]
	jge	SHORT $LN122@BuildMinor
	lea	ecx, DWORD PTR $T244141[ebp]
	mov	DWORD PTR tv499[ebp], ecx
	jmp	SHORT $LN123@BuildMinor
$LN122@BuildMinor:
	lea	edx, DWORD PTR $T244142[ebp]
	mov	DWORD PTR tv499[ebp], edx
$LN123@BuildMinor:
	mov	eax, DWORD PTR tv499[ebp]
	mov	DWORD PTR $T244313[ebp], eax
	mov	ecx, DWORD PTR $T244306[ebp]
	imul	ecx, DWORD PTR _iGrowthFlavor$[ebp]
	mov	edx, DWORD PTR $T244313[ebp]
	imul	ecx, DWORD PTR [edx]
	add	ecx, DWORD PTR _iValue$225848[ebp]
	mov	DWORD PTR _iValue$225848[ebp], ecx
$LN36@BuildMinor:

; 5338 : 					}
; 5339 : 
; 5340 : 					// Slight negative weight towards militaristic
; 5341 : 					if(pMinorInfo->GetMinorCivTrait() == MINOR_CIV_TRAIT_MILITARISTIC && !pDiploAI->IsGoingForWorldConquest())

	mov	ecx, DWORD PTR _pMinorInfo$225838[ebp]
	call	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ ; CvMinorCivInfo::GetMinorCivTrait
	cmp	eax, 1
	jne	SHORT $LN128@BuildMinor
	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN128@BuildMinor

; 5342 : 					{
; 5343 : 						iValue += /*-50*/ GC.getMC_GIFT_WEIGHT_MILITARISTIC();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3476
	mov	DWORD PTR $T244319[ebp], ecx
	mov	edx, DWORD PTR _iValue$225848[ebp]
	add	edx, DWORD PTR $T244319[ebp]
	mov	DWORD PTR _iValue$225848[ebp], edx

; 5344 : 					}
; 5345 : 
; 5346 : 					// If they have a resource we don't have, add extra weight
; 5347 : 					int iResourcesWeLack = pMinorCivAI->GetNumResourcesMajorLacks(m_pPlayer->GetID());

$LN128@BuildMinor:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244328[ebp], edx
	mov	eax, DWORD PTR $T244328[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetNumResourcesMajorLacks@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetNumResourcesMajorLacks
	mov	DWORD PTR _iResourcesWeLack$225860[ebp], eax

; 5348 : 					if(iResourcesWeLack > 0)

	cmp	DWORD PTR _iResourcesWeLack$225860[ebp], 0
	jle	SHORT $LN34@BuildMinor

; 5349 : 					{
; 5350 : 						iValue += (iResourcesWeLack* /*80*/ GC.getMC_GIFT_WEIGHT_RESOURCE_WE_NEED());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3480
	mov	DWORD PTR $T244332[ebp], ecx
	mov	edx, DWORD PTR _iResourcesWeLack$225860[ebp]
	imul	edx, DWORD PTR $T244332[ebp]
	add	edx, DWORD PTR _iValue$225848[ebp]
	mov	DWORD PTR _iValue$225848[ebp], edx
$LN34@BuildMinor:

; 5351 : 					}
; 5352 : 
; 5353 : 					// If we're protective this is worth more than if we're friendly
; 5354 : 					if(eApproach == MINOR_CIV_APPROACH_PROTECTIVE)

	cmp	DWORD PTR _eApproach$225839[ebp], 2
	jne	SHORT $LN33@BuildMinor

; 5355 : 					{
; 5356 : 						iValue += /*10*/ GC.getMC_GIFT_WEIGHT_PROTECTIVE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3488
	mov	DWORD PTR $T244336[ebp], eax
	mov	ecx, DWORD PTR _iValue$225848[ebp]
	add	ecx, DWORD PTR $T244336[ebp]
	mov	DWORD PTR _iValue$225848[ebp], ecx
$LN33@BuildMinor:

; 5357 : 					}
; 5358 : 
; 5359 : 					// If the minor is hostile, then reduce the weighting
; 5360 : 					if(pMinorCivAI->GetPersonality() == MINOR_CIV_PERSONALITY_HOSTILE)

	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetPersonality@CvMinorCivAI@@QBE?AW4MinorCivPersonalityTypes@@XZ ; CvMinorCivAI::GetPersonality
	cmp	eax, 2
	jne	SHORT $LN32@BuildMinor

; 5361 : 					{
; 5362 : 						iValue += /*-20*/ GC.getMC_GIFT_WEIGHT_HOSTILE();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3492
	mov	DWORD PTR $T244340[ebp], edx
	mov	eax, DWORD PTR _iValue$225848[ebp]
	add	eax, DWORD PTR $T244340[ebp]
	mov	DWORD PTR _iValue$225848[ebp], eax
$LN32@BuildMinor:

; 5363 : 					}
; 5364 : 
; 5365 : 					// The closer we are the better
; 5366 : 					if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_NEIGHBORS)

	mov	ecx, DWORD PTR _eTargetPlayer$225831[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 3
	jne	SHORT $LN31@BuildMinor

; 5367 : 						iValue += /*5*/ GC.getMC_GIFT_WEIGHT_NEIGHBORS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3496
	mov	DWORD PTR $T244344[ebp], eax
	mov	ecx, DWORD PTR _iValue$225848[ebp]
	add	ecx, DWORD PTR $T244344[ebp]
	mov	DWORD PTR _iValue$225848[ebp], ecx
	jmp	SHORT $LN144@BuildMinor
$LN31@BuildMinor:

; 5368 : 					else if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_CLOSE)

	mov	edx, DWORD PTR _eTargetPlayer$225831[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 2
	jne	SHORT $LN29@BuildMinor

; 5369 : 						iValue += /*4*/ GC.getMC_GIFT_WEIGHT_CLOSE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3500
	mov	DWORD PTR $T244348[ebp], ecx
	mov	edx, DWORD PTR _iValue$225848[ebp]
	add	edx, DWORD PTR $T244348[ebp]
	mov	DWORD PTR _iValue$225848[ebp], edx
	jmp	SHORT $LN144@BuildMinor
$LN29@BuildMinor:

; 5370 : 					else if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_FAR)

	mov	eax, DWORD PTR _eTargetPlayer$225831[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 1
	jne	SHORT $LN144@BuildMinor

; 5371 : 						iValue += /*3*/ GC.getMC_GIFT_WEIGHT_FAR();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3504
	mov	DWORD PTR $T244352[ebp], edx
	mov	eax, DWORD PTR _iValue$225848[ebp]
	add	eax, DWORD PTR $T244352[ebp]
	mov	DWORD PTR _iValue$225848[ebp], eax

; 5372 : 
; 5373 : 					// Did we bully you recently?  If so, giving you gold now would be very odd.
; 5374 : 					if(pMinorCivAI->IsRecentlyBulliedByMajor(m_pPlayer->GetID()))

$LN144@BuildMinor:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244361[ebp], eax
	mov	ecx, DWORD PTR $T244361[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsRecentlyBulliedByMajor@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsRecentlyBulliedByMajor
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN148@BuildMinor

; 5375 : 					{
; 5376 : 						iValue -= 100; //antonjs: todo: constant/XML

	mov	eax, DWORD PTR _iValue$225848[ebp]
	sub	eax, 100				; 00000064H
	mov	DWORD PTR _iValue$225848[ebp], eax

; 5377 : 					}
; 5378 : 
; 5379 : 					// if we're allies
; 5380 : 					if (pMinorCivAI->IsAllies(m_pPlayer->GetID()))

$LN148@BuildMinor:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244370[ebp], eax
	mov	ecx, DWORD PTR $T244370[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@BuildMinor

; 5381 : 					{
; 5382 : 						// and we're secure as their allies, ignore the scoring
; 5383 : 						if (!pMinorCivAI->IsCloseToNotBeingAllies(m_pPlayer->GetID()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244379[ebp], edx
	mov	eax, DWORD PTR $T244379[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsCloseToNotBeingAllies
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@BuildMinor

; 5384 : 						{
; 5385 : 							iValue = 0;

	mov	DWORD PTR _iValue$225848[ebp], 0
$LN24@BuildMinor:

; 5386 : 						}
; 5387 : 					}
; 5388 : 					else

	jmp	SHORT $LN38@BuildMinor
$LN25@BuildMinor:

; 5389 : 					{
; 5390 : 						// count however much we've invested into the friendship toward maintaining the friendship
; 5391 : 						iValue += iFriendshipWithMinor;

	mov	edx, DWORD PTR _iValue$225848[ebp]
	add	edx, DWORD PTR _iFriendshipWithMinor$225840[ebp]
	mov	DWORD PTR _iValue$225848[ebp], edx
$LN38@BuildMinor:

; 5392 : 					}
; 5393 : 				}
; 5394 : 
; 5395 : 				if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN22@BuildMinor
	jmp	SHORT $LN21@BuildMinor
$LN22@BuildMinor:

; 5396 : 				{
; 5397 : 					// no modifiers
; 5398 : 				}
; 5399 : 				else if (pDiploAI->IsGoingForWorldConquest())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@BuildMinor

; 5400 : 				{
; 5401 : 					if (pMinorCivAI->GetTrait() == MINOR_CIV_TRAIT_MILITARISTIC)

	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ ; CvMinorCivAI::GetTrait
	cmp	eax, 1
	jne	SHORT $LN19@BuildMinor

; 5402 : 					{
; 5403 : 						iValue += 999;

	mov	edx, DWORD PTR _iValue$225848[ebp]
	add	edx, 999				; 000003e7H
	mov	DWORD PTR _iValue$225848[ebp], edx
$LN19@BuildMinor:

; 5404 : 					}
; 5405 : 				}

	jmp	SHORT $LN21@BuildMinor
$LN20@BuildMinor:

; 5406 : 				else if (pDiploAI->IsGoingForDiploVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@BuildMinor
	jmp	SHORT $LN21@BuildMinor
$LN17@BuildMinor:

; 5407 : 				{
; 5408 : 					// no modifiers
; 5409 : 				}
; 5410 : 				else if (pDiploAI->IsGoingForSpaceshipVictory())

	mov	ecx, DWORD PTR _pDiploAI$[ebp]
	call	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForSpaceshipVictory
$LN21@BuildMinor:

; 5411 : 				{
; 5412 : 					// no modifiers
; 5413 : 				}
; 5414 : 				else // the player doesn't know how they're going to try to win yet
; 5415 : 				{
; 5416 : 					// no modifiers
; 5417 : 				}
; 5418 : 				break;

	jmp	$LN40@BuildMinor

; 5419 : 
; 5420 : 			case PLAN_COLLECT_VOTES:
; 5421 : 				// if we're allies
; 5422 : 				if (pMinorCivAI->IsAllies(m_pPlayer->GetID()))

$LN156@BuildMinor:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T244388[ebp], ecx
	mov	edx, DWORD PTR $T244388[ebp]
	push	edx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@BuildMinor

; 5423 : 				{
; 5424 : 					// and we're secure as their allies, ignore the scoring
; 5425 : 					if (!pMinorCivAI->IsCloseToNotBeingAllies(m_pPlayer->GetID()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T244397[ebp], eax
	mov	ecx, DWORD PTR $T244397[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsCloseToNotBeingAllies
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN11@BuildMinor

; 5426 : 					{
; 5427 : 						iValue = 0;

	mov	DWORD PTR _iValue$225848[ebp], 0
$LN11@BuildMinor:

; 5428 : 					}
; 5429 : 				}
; 5430 : 				else

	jmp	SHORT $LN10@BuildMinor
$LN12@BuildMinor:

; 5431 : 				{
; 5432 : 					// if the minor is allied with someone else
; 5433 : 					if (pMinorCivAI->GetAlly() != NO_PLAYER)

	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	cmp	eax, -1
	je	SHORT $LN9@BuildMinor

; 5434 : 					{
; 5435 : 						iValue += iFriendshipWithMinor;

	mov	eax, DWORD PTR _iValue$225848[ebp]
	add	eax, DWORD PTR _iFriendshipWithMinor$225840[ebp]
	mov	DWORD PTR _iValue$225848[ebp], eax

; 5436 : 					}
; 5437 : 					else

	jmp	SHORT $LN10@BuildMinor
$LN9@BuildMinor:

; 5438 : 					{
; 5439 : 						// count however much we've invested into the friendship toward maintaining the friendship
; 5440 : 						iValue += iFriendshipWithMinor * 2;

	mov	ecx, DWORD PTR _iFriendshipWithMinor$225840[ebp]
	mov	edx, DWORD PTR _iValue$225848[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _iValue$225848[ebp], eax
$LN10@BuildMinor:

; 5441 : 					}
; 5442 : 				}
; 5443 : 				break;

	jmp	SHORT $LN40@BuildMinor
$LN7@BuildMinor:

; 5444 : 			case PLAN_ATTACK_CS_TO_PREVENT_DEFEAT:
; 5445 : 				// attack the least protected cities
; 5446 : 				if (pMinorCivAI->IsAllies(eCurrentDiploThreat))

	mov	ecx, DWORD PTR _eCurrentDiploThreat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@BuildMinor

; 5447 : 				{
; 5448 : 					iValue = MAX_INT - pMinorCivAI->GetEffectiveFriendshipWithMajor(eCurrentDiploThreat);

	mov	eax, DWORD PTR _eCurrentDiploThreat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	ecx, 2147483647				; 7fffffffH
	sub	ecx, eax
	mov	DWORD PTR _iValue$225848[ebp], ecx
$LN6@BuildMinor:

; 5449 : 				}
; 5450 : 				break;

	jmp	SHORT $LN40@BuildMinor
$LN5@BuildMinor:

; 5451 : 			case PLAN_DEFEND_CS_FOR_WIN:
; 5452 : 				// defend the least defended cities!
; 5453 : 				if (pMinorCivAI->IsAllies(eCurrentDiploThreat))

	mov	edx, DWORD PTR _eCurrentDiploThreat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN40@BuildMinor

; 5454 : 				{
; 5455 : 					iValue = MAX_INT - pMinorCivAI->GetEffectiveFriendshipWithMajor(eCurrentDiploThreat);

	mov	ecx, DWORD PTR _eCurrentDiploThreat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$225837[ebp]
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	edx, 2147483647				; 7fffffffH
	sub	edx, eax
	mov	DWORD PTR _iValue$225848[ebp], edx
$LN40@BuildMinor:

; 5456 : 				}
; 5457 : 			}
; 5458 : 
; 5459 : 			kEntry.m_iScore = iValue;

	mov	eax, DWORD PTR _iValue$225848[ebp]
	mov	DWORD PTR _kEntry$225847[ebp+4], eax

; 5460 : 			aCityScores.push_back(kEntry);

	lea	ecx, DWORD PTR _kEntry$225847[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back

; 5461 : 		}

	jmp	$LN45@BuildMinor
$LN44@BuildMinor:

; 5462 : 	}

	jmp	$LN52@BuildMinor
$LN51@BuildMinor:

; 5463 : 
; 5464 : 	// sort
; 5465 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	xor	edx, edx
	mov	BYTE PTR $T244143[ebp], dl
	mov	eax, DWORD PTR _aCityScores$[ebp+8]
	mov	DWORD PTR $T244523[ebp], eax
	mov	ecx, DWORD PTR $T244523[ebp]
	mov	DWORD PTR $T244144[ebp], ecx
	mov	edx, DWORD PTR _aCityScores$[ebp+4]
	mov	DWORD PTR $T244539[ebp], edx
	mov	eax, DWORD PTR $T244539[ebp]
	mov	DWORD PTR $T244145[ebp], eax
	mov	cl, BYTE PTR $T244143[ebp]
	mov	BYTE PTR $T244677[ebp], cl
	mov	edx, DWORD PTR $T244144[ebp]
	mov	DWORD PTR $T244676[ebp], edx
	mov	eax, DWORD PTR $T244145[ebp]
	mov	DWORD PTR $T244675[ebp], eax
	mov	ecx, DWORD PTR $T244675[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T244676[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN223@BuildMinor
	movzx	edx, BYTE PTR $T244677[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR $T244676[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244675[ebp]
	push	ecx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN223@BuildMinor:

; 5466 : 
; 5467 : 	// transfer values to OffenseCityList
; 5468 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	mov	DWORD PTR _ui$225895[ebp], 0
	jmp	SHORT $LN278@BuildMinor
$LN2@BuildMinor:
	mov	edx, DWORD PTR _ui$225895[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225895[ebp], edx
$LN278@BuildMinor:
	mov	eax, DWORD PTR _aCityScores$[ebp+8]
	sub	eax, DWORD PTR _aCityScores$[ebp+4]
	sar	eax, 3
	cmp	DWORD PTR _ui$225895[ebp], eax
	jae	SHORT $LN1@BuildMinor

; 5469 : 	{
; 5470 : 		aMinorCityList.push_back(aCityScores[ui].m_pCity);

	mov	ecx, DWORD PTR _aCityScores$[ebp+4]
	mov	edx, DWORD PTR _ui$225895[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _aMinorCityList$[ebp]
	call	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back

; 5471 : 	}

	jmp	SHORT $LN2@BuildMinor
$LN1@BuildMinor:

; 5472 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	call	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN372@BuildMinor:
	DD	$LN5@BuildMinor
	DD	$LN7@BuildMinor
	DD	$LN156@BuildMinor
	DD	$LN39@BuildMinor
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$3:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-552]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildMinorCityList
; Function compile flags: /Odtp
;	COMDAT ?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -152						; size = 4
$T244995 = -148						; size = 4
$T244986 = -144						; size = 4
$T244982 = -137						; size = 1
$T244973 = -136						; size = 4
$T244969 = -132						; size = 4
_eTargetPlayer$225927 = -128				; size = 4
_ui$225923 = -124					; size = 4
_eTargetPlayer$225916 = -120				; size = 4
_eAllyPlayer$225920 = -116				; size = 4
_ui$225912 = -112					; size = 4
_ui$225907 = -108					; size = 4
_aiMajorCivVotes$225906 = -104				; size = 88
_iMaxVotes$225922 = -16					; size = 4
_iAliveMinorCivs$225911 = -12				; size = 4
_iCurrentPlan$ = -8					; size = 4
_eCurrentDiploThreat$ = -4				; size = 4
_peDiploThreat$ = 8					; size = 4
?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z PROC ; CvEspionageAI::GetCityStatePlan, COMDAT
; _this$ = ecx

; 5475 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	DWORD PTR _this$[ebp], ecx

; 5476 : 	int iCurrentPlan = PLAN_PLAY_NORMAL; 

	mov	DWORD PTR _iCurrentPlan$[ebp], 3

; 5477 : 	PlayerTypes eCurrentDiploThreat = NO_PLAYER;

	mov	DWORD PTR _eCurrentDiploThreat$[ebp], -1

; 5478 : 	if (m_bUNCountdownStarted)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+732]
	test	ecx, ecx
	je	$LN21@GetCitySta

; 5479 : 	{
; 5480 : 		int aiMajorCivVotes[MAX_MAJOR_CIVS];
; 5481 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225907[ebp], 0
	jmp	SHORT $LN20@GetCitySta
$LN19@GetCitySta:
	mov	edx, DWORD PTR _ui$225907[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225907[ebp], edx
$LN20@GetCitySta:
	cmp	DWORD PTR _ui$225907[ebp], 22		; 00000016H
	jae	SHORT $LN18@GetCitySta

; 5482 : 		{
; 5483 : 			aiMajorCivVotes[ui] = 0;

	mov	eax, DWORD PTR _ui$225907[ebp]
	mov	DWORD PTR _aiMajorCivVotes$225906[ebp+eax*4], 0

; 5484 : 		}

	jmp	SHORT $LN19@GetCitySta
$LN18@GetCitySta:

; 5485 : 
; 5486 : 		int iAliveMinorCivs = 0;

	mov	DWORD PTR _iAliveMinorCivs$225911[ebp], 0

; 5487 : 
; 5488 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$225912[ebp], 22		; 00000016H
	jmp	SHORT $LN17@GetCitySta
$LN16@GetCitySta:
	mov	ecx, DWORD PTR _ui$225912[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225912[ebp], ecx
$LN17@GetCitySta:
	cmp	DWORD PTR _ui$225912[ebp], 63		; 0000003fH
	jae	$LN15@GetCitySta

; 5489 : 		{
; 5490 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	edx, DWORD PTR _ui$225912[ebp]
	mov	DWORD PTR _eTargetPlayer$225916[ebp], edx

; 5491 : 
; 5492 : 			// only count minor civs
; 5493 : 			if (!GET_PLAYER(eTargetPlayer).isMinorCiv())

	mov	eax, DWORD PTR _eTargetPlayer$225916[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244969[ebp], eax
	mov	ecx, DWORD PTR $T244969[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@GetCitySta

; 5494 : 			{
; 5495 : 				continue;

	jmp	SHORT $LN16@GetCitySta
$LN14@GetCitySta:

; 5496 : 			}
; 5497 : 
; 5498 : 			if (!GET_PLAYER(eTargetPlayer).isAlive())

	mov	edx, DWORD PTR _eTargetPlayer$225916[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244973[ebp], edx
	mov	eax, DWORD PTR $T244973[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T244982[ebp], cl
	movzx	edx, BYTE PTR $T244982[ebp]
	test	edx, edx
	jne	SHORT $LN13@GetCitySta

; 5499 : 			{
; 5500 : 				continue;

	jmp	SHORT $LN16@GetCitySta
$LN13@GetCitySta:

; 5501 : 			}
; 5502 : 
; 5503 : 			iAliveMinorCivs++;

	mov	eax, DWORD PTR _iAliveMinorCivs$225911[ebp]
	add	eax, 1
	mov	DWORD PTR _iAliveMinorCivs$225911[ebp], eax

; 5504 : 
; 5505 : 			PlayerTypes eAllyPlayer = GET_PLAYER(eTargetPlayer).GetMinorCivAI()->GetAlly();

	mov	ecx, DWORD PTR _eTargetPlayer$225916[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T244986[ebp], ecx
	mov	ecx, DWORD PTR $T244986[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _eAllyPlayer$225920[ebp], eax

; 5506 : 			if (eAllyPlayer != NO_PLAYER)

	cmp	DWORD PTR _eAllyPlayer$225920[ebp], -1
	je	SHORT $LN12@GetCitySta

; 5507 : 			{
; 5508 : 				aiMajorCivVotes[eAllyPlayer]++;

	mov	edx, DWORD PTR _eAllyPlayer$225920[ebp]
	mov	eax, DWORD PTR _aiMajorCivVotes$225906[ebp+edx*4]
	add	eax, 1
	mov	ecx, DWORD PTR _eAllyPlayer$225920[ebp]
	mov	DWORD PTR _aiMajorCivVotes$225906[ebp+ecx*4], eax
$LN12@GetCitySta:

; 5509 : 			}
; 5510 : 		}

	jmp	$LN16@GetCitySta
$LN15@GetCitySta:

; 5511 : 
; 5512 : 		int iMaxVotes = 0;

	mov	DWORD PTR _iMaxVotes$225922[ebp], 0

; 5513 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225923[ebp], 0
	jmp	SHORT $LN11@GetCitySta
$LN10@GetCitySta:
	mov	edx, DWORD PTR _ui$225923[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$225923[ebp], edx
$LN11@GetCitySta:
	cmp	DWORD PTR _ui$225923[ebp], 22		; 00000016H
	jae	SHORT $LN9@GetCitySta

; 5514 : 		{
; 5515 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;

	mov	eax, DWORD PTR _ui$225923[ebp]
	mov	DWORD PTR _eTargetPlayer$225927[ebp], eax

; 5516 : 			if (aiMajorCivVotes[eTargetPlayer] > iMaxVotes)

	mov	ecx, DWORD PTR _eTargetPlayer$225927[ebp]
	mov	edx, DWORD PTR _aiMajorCivVotes$225906[ebp+ecx*4]
	cmp	edx, DWORD PTR _iMaxVotes$225922[ebp]
	jle	SHORT $LN8@GetCitySta

; 5517 : 			{
; 5518 : 				iMaxVotes = aiMajorCivVotes[eTargetPlayer];

	mov	eax, DWORD PTR _eTargetPlayer$225927[ebp]
	mov	ecx, DWORD PTR _aiMajorCivVotes$225906[ebp+eax*4]
	mov	DWORD PTR _iMaxVotes$225922[ebp], ecx

; 5519 : 				eCurrentDiploThreat = eTargetPlayer;

	mov	edx, DWORD PTR _eTargetPlayer$225927[ebp]
	mov	DWORD PTR _eCurrentDiploThreat$[ebp], edx
$LN8@GetCitySta:

; 5520 : 			}
; 5521 : 		}

	jmp	SHORT $LN10@GetCitySta
$LN9@GetCitySta:

; 5522 : 
; 5523 : 		if (eCurrentDiploThreat != NO_PLAYER)

	cmp	DWORD PTR _eCurrentDiploThreat$[ebp], -1
	je	SHORT $LN21@GetCitySta

; 5524 : 		{
; 5525 : 			if (iMaxVotes >= iAliveMinorCivs / 2)

	mov	eax, DWORD PTR _iAliveMinorCivs$225911[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _iMaxVotes$225922[ebp], eax
	jl	SHORT $LN6@GetCitySta

; 5526 : 			{
; 5527 : 				if (eCurrentDiploThreat == m_pPlayer->GetID())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T244995[ebp], edx
	mov	eax, DWORD PTR _eCurrentDiploThreat$[ebp]
	cmp	eax, DWORD PTR $T244995[ebp]
	jne	SHORT $LN5@GetCitySta

; 5528 : 				{
; 5529 : 					iCurrentPlan = PLAN_DEFEND_CS_FOR_WIN;

	mov	DWORD PTR _iCurrentPlan$[ebp], 0

; 5530 : 				}
; 5531 : 				else

	jmp	SHORT $LN4@GetCitySta
$LN5@GetCitySta:

; 5532 : 				{
; 5533 : 					iCurrentPlan = PLAN_ATTACK_CS_TO_PREVENT_DEFEAT;

	mov	DWORD PTR _iCurrentPlan$[ebp], 1
$LN4@GetCitySta:

; 5534 : 				}

	jmp	SHORT $LN21@GetCitySta
$LN6@GetCitySta:

; 5535 : 			}
; 5536 : 			else if (iMaxVotes >= iAliveMinorCivs / 4)

	mov	eax, DWORD PTR _iAliveMinorCivs$225911[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _iMaxVotes$225922[ebp], eax
	jl	SHORT $LN21@GetCitySta

; 5537 : 			{
; 5538 : 				iCurrentPlan = PLAN_COLLECT_VOTES;

	mov	DWORD PTR _iCurrentPlan$[ebp], 2
$LN21@GetCitySta:

; 5539 : 			}
; 5540 : 		}
; 5541 : 	}
; 5542 : 
; 5543 : 	if (peDiploThreat)

	cmp	DWORD PTR _peDiploThreat$[ebp], 0
	je	SHORT $LN1@GetCitySta

; 5544 : 	{
; 5545 : 		*peDiploThreat = eCurrentDiploThreat;

	mov	ecx, DWORD PTR _peDiploThreat$[ebp]
	mov	edx, DWORD PTR _eCurrentDiploThreat$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@GetCitySta:

; 5546 : 	}
; 5547 : 	return iCurrentPlan;

	mov	eax, DWORD PTR _iCurrentPlan$[ebp]

; 5548 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ENDP ; CvEspionageAI::GetCityStatePlan
_TEXT	ENDS
PUBLIC	??_C@_0CJ@CEGBPMNA@Re?9eval?3?5assigned?5to?5promise?5pla@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer
;	COMDAT ??_C@_0CJ@CEGBPMNA@Re?9eval?3?5assigned?5to?5promise?5pla@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CJ@CEGBPMNA@Re?9eval?3?5assigned?5to?5promise?5pla@ DB 'Re-eval: a'
	DB	'ssigned to promise player, %d,', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$1
__ehfuncinfo$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv159 = -108						; size = 4
tv167 = -104						; size = 4
_this$ = -100						; size = 4
$T245017 = -96						; size = 4
$T245005 = -92						; size = 4
$T244999 = -88						; size = 28
_strMsg$225951 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_pSpy$225946 = -28					; size = 4
_pCity$225948 = -24					; size = 4
_ui$225942 = -20					; size = 4
_pEspionage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ePlayer$ = 8						; size = 4
?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z PROC ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer, COMDAT
; _this$ = ecx

; 5552 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5553 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5554 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$225942[ebp], 0
	jmp	SHORT $LN6@EvaluateSp
$LN5@EvaluateSp:
	mov	ecx, DWORD PTR _ui$225942[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225942[ebp], ecx
$LN6@EvaluateSp:
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T245005[ebp], eax
	mov	ecx, DWORD PTR _ui$225942[ebp]
	cmp	ecx, DWORD PTR $T245005[ebp]
	jae	$LN7@EvaluateSp

; 5555 : 	{
; 5556 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	edx, DWORD PTR _ui$225942[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pSpy$225946[ebp], edx

; 5557 : 		// don't process dead spies
; 5558 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _pSpy$225946[ebp]
	cmp	DWORD PTR [ecx+16], 8
	jne	SHORT $LN3@EvaluateSp

; 5559 : 		{
; 5560 : 			continue;

	jmp	SHORT $LN5@EvaluateSp
$LN3@EvaluateSp:

; 5561 : 		}
; 5562 : 
; 5563 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	mov	edx, DWORD PTR _ui$225942[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$225948[ebp], eax

; 5564 : 		if (pCity && pCity->getOwner() == ePlayer)

	cmp	DWORD PTR _pCity$225948[ebp], 0
	je	$LN2@EvaluateSp
	mov	eax, DWORD PTR _pCity$225948[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T245017[ebp], ecx
	mov	edx, DWORD PTR $T245017[ebp]
	cmp	edx, DWORD PTR _ePlayer$[ebp]
	jne	$LN2@EvaluateSp

; 5565 : 		{
; 5566 : 			pSpy->m_bEvaluateReassignment = true;

	mov	eax, DWORD PTR _pSpy$225946[ebp]
	mov	BYTE PTR [eax+25], 1

; 5567 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@EvaluateSp

; 5568 : 			{
; 5569 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225951[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5570 : 				strMsg.Format("Re-eval: assigned to promise player, %d,", ui);

	mov	edx, DWORD PTR _ui$225942[ebp]
	push	edx
	push	OFFSET ??_C@_0CJ@CEGBPMNA@Re?9eval?3?5assigned?5to?5promise?5pla@
	lea	eax, DWORD PTR _strMsg$225951[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5571 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$225946[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T244999[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv167[ebp], eax
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR tv159[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$225951[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T244999[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5572 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$225951[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5573 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$225951[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@EvaluateSp:

; 5574 : 		}

	jmp	$LN5@EvaluateSp
$LN7@EvaluateSp:

; 5575 : 	}
; 5576 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _strMsg$225951[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR $T244999[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z ENDP ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer
PUBLIC	??_C@_0BN@IGKMCKEB@Re?9eval?3?5unassigned?5spy?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BN@IGKMCKEB@Re?9eval?3?5unassigned?5spy?0?5?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BN@IGKMCKEB@Re?9eval?3?5unassigned?5spy?0?5?$CFd?0?$AA@ DB 'Re-eva'
	DB	'l: unassigned spy, %d,', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv156 = -104						; size = 4
tv162 = -100						; size = 4
_this$ = -96						; size = 4
$T245045 = -92						; size = 4
$T245039 = -88						; size = 28
_strMsg$225968 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_pSpy$225963 = -28					; size = 4
_pCity$225965 = -24					; size = 4
_ui$225959 = -20					; size = 4
_pEspionage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateUnassignedSpies, COMDAT
; _this$ = ecx

; 5580 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5581 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5582 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$225959[ebp], 0
	jmp	SHORT $LN6@EvaluateUn
$LN5@EvaluateUn:
	mov	ecx, DWORD PTR _ui$225959[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225959[ebp], ecx
$LN6@EvaluateUn:
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T245045[ebp], eax
	mov	ecx, DWORD PTR _ui$225959[ebp]
	cmp	ecx, DWORD PTR $T245045[ebp]
	jae	$LN7@EvaluateUn

; 5583 : 	{
; 5584 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	edx, DWORD PTR _ui$225959[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pSpy$225963[ebp], edx

; 5585 : 		// don't process dead spies
; 5586 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _pSpy$225963[ebp]
	cmp	DWORD PTR [ecx+16], 8
	jne	SHORT $LN3@EvaluateUn

; 5587 : 		{
; 5588 : 			continue;

	jmp	SHORT $LN5@EvaluateUn
$LN3@EvaluateUn:

; 5589 : 		}
; 5590 : 
; 5591 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	mov	edx, DWORD PTR _ui$225959[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$225965[ebp], eax

; 5592 : 		if (!pCity)

	cmp	DWORD PTR _pCity$225965[ebp], 0
	jne	$LN2@EvaluateUn

; 5593 : 		{
; 5594 : 			pSpy->m_bEvaluateReassignment = true;

	mov	eax, DWORD PTR _pSpy$225963[ebp]
	mov	BYTE PTR [eax+25], 1

; 5595 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@EvaluateUn

; 5596 : 			{
; 5597 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225968[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5598 : 				strMsg.Format("Re-eval: unassigned spy, %d,", ui);

	mov	edx, DWORD PTR _ui$225959[ebp]
	push	edx
	push	OFFSET ??_C@_0BN@IGKMCKEB@Re?9eval?3?5unassigned?5spy?0?5?$CFd?0?$AA@
	lea	eax, DWORD PTR _strMsg$225968[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5599 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$225963[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T245039[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv162[ebp], eax
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR tv156[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$225968[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T245039[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5600 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$225968[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5601 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$225968[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@EvaluateUn:

; 5602 : 		}

	jmp	$LN5@EvaluateUn
$LN7@EvaluateUn:

; 5603 : 	}
; 5604 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$225968[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T245039[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateUnassignedSpies
PUBLIC	??_C@_0BM@DNGELIOM@Re?9eval?3?5defensive?5spy?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BM@DNGELIOM@Re?9eval?3?5defensive?5spy?0?5?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BM@DNGELIOM@Re?9eval?3?5defensive?5spy?0?5?$CFd?0?$AA@ DB 'Re-eval'
	DB	': defensive spy, %d,', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv161 = -112						; size = 4
tv171 = -108						; size = 4
_this$ = -104						; size = 4
$T245097 = -100						; size = 4
$T245088 = -96						; size = 4
$T245076 = -92						; size = 4
$T245070 = -88						; size = 28
_strMsg$225985 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_pSpy$225980 = -28					; size = 4
_pCity$225982 = -24					; size = 4
_ui$225976 = -20					; size = 4
_pEspionage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateDefensiveSpies, COMDAT
; _this$ = ecx

; 5608 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5609 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5610 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$225976[ebp], 0
	jmp	SHORT $LN6@EvaluateDe
$LN5@EvaluateDe:
	mov	ecx, DWORD PTR _ui$225976[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225976[ebp], ecx
$LN6@EvaluateDe:
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T245076[ebp], eax
	mov	ecx, DWORD PTR _ui$225976[ebp]
	cmp	ecx, DWORD PTR $T245076[ebp]
	jae	$LN7@EvaluateDe

; 5611 : 	{
; 5612 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	edx, DWORD PTR _ui$225976[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pSpy$225980[ebp], edx

; 5613 : 		// don't process dead spies
; 5614 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _pSpy$225980[ebp]
	cmp	DWORD PTR [ecx+16], 8
	jne	SHORT $LN3@EvaluateDe

; 5615 : 		{
; 5616 : 			continue;

	jmp	SHORT $LN5@EvaluateDe
$LN3@EvaluateDe:

; 5617 : 		}
; 5618 : 
; 5619 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	mov	edx, DWORD PTR _ui$225976[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	DWORD PTR _pCity$225982[ebp], eax

; 5620 : 		if (pCity && pCity->getOwner() == m_pPlayer->GetID())

	cmp	DWORD PTR _pCity$225982[ebp], 0
	je	$LN2@EvaluateDe
	mov	eax, DWORD PTR _pCity$225982[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T245088[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T245097[ebp], ecx
	mov	edx, DWORD PTR $T245088[ebp]
	cmp	edx, DWORD PTR $T245097[ebp]
	jne	$LN2@EvaluateDe

; 5621 : 		{
; 5622 : 			pSpy->m_bEvaluateReassignment = true;

	mov	eax, DWORD PTR _pSpy$225980[ebp]
	mov	BYTE PTR [eax+25], 1

; 5623 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@EvaluateDe

; 5624 : 			{
; 5625 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225985[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5626 : 				strMsg.Format("Re-eval: defensive spy, %d,", ui);

	mov	edx, DWORD PTR _ui$225976[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@DNGELIOM@Re?9eval?3?5defensive?5spy?0?5?$CFd?0?$AA@
	lea	eax, DWORD PTR _strMsg$225985[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5627 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR _pSpy$225980[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T245070[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv171[ebp], eax
	mov	edx, DWORD PTR tv171[ebp]
	mov	DWORD PTR tv161[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	lea	ecx, DWORD PTR _strMsg$225985[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T245070[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5628 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$225985[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5629 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$225985[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@EvaluateDe:

; 5630 : 
; 5631 : 		}

	jmp	$LN5@EvaluateDe
$LN7@EvaluateDe:

; 5632 : 	}
; 5633 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$225985[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T245070[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateDefensiveSpies
PUBLIC	??_C@_0BL@JKGJKOAL@Re?9eval?3?5diplomat?5spy?0?5?$CFd?0?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BL@JKGJKOAL@Re?9eval?3?5diplomat?5spy?0?5?$CFd?0?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BL@JKGJKOAL@Re?9eval?3?5diplomat?5spy?0?5?$CFd?0?$AA@ DB 'Re-eval:'
	DB	' diplomat spy, %d,', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv155 = -100						; size = 4
tv161 = -96						; size = 4
_this$ = -92						; size = 4
$T245125 = -88						; size = 4
$T245119 = -84						; size = 28
_strMsg$226001 = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_pSpy$225997 = -24					; size = 4
_ui$225993 = -20					; size = 4
_pEspionage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateDiplomatSpies, COMDAT
; _this$ = ecx

; 5637 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 5638 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$[ebp], eax

; 5639 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	mov	DWORD PTR _ui$225993[ebp], 0
	jmp	SHORT $LN6@EvaluateDi
$LN5@EvaluateDi:
	mov	ecx, DWORD PTR _ui$225993[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$225993[ebp], ecx
$LN6@EvaluateDi:
	mov	edx, DWORD PTR _pEspionage$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T245125[ebp], eax
	mov	ecx, DWORD PTR _ui$225993[ebp]
	cmp	ecx, DWORD PTR $T245125[ebp]
	jae	$LN7@EvaluateDi

; 5640 : 	{
; 5641 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	edx, DWORD PTR _ui$225993[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _pEspionage$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pSpy$225997[ebp], edx

; 5642 : 		// don't process dead spies
; 5643 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR _pSpy$225997[ebp]
	cmp	DWORD PTR [ecx+16], 8
	jne	SHORT $LN3@EvaluateDi

; 5644 : 		{
; 5645 : 			continue;

	jmp	SHORT $LN5@EvaluateDi
$LN3@EvaluateDi:

; 5646 : 		}
; 5647 : 
; 5648 : 		if (pSpy->m_bIsDiplomat)

	mov	edx, DWORD PTR _pSpy$225997[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	$LN2@EvaluateDi

; 5649 : 		{
; 5650 : 			pSpy->m_bEvaluateReassignment = true;

	mov	ecx, DWORD PTR _pSpy$225997[ebp]
	mov	BYTE PTR [ecx+25], 1

; 5651 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN2@EvaluateDi

; 5652 : 			{
; 5653 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$226001[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5654 : 				strMsg.Format("Re-eval: diplomat spy, %d,", ui);

	mov	eax, DWORD PTR _ui$225993[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@JKGJKOAL@Re?9eval?3?5diplomat?5spy?0?5?$CFd?0?$AA@
	lea	ecx, DWORD PTR _strMsg$226001[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 5655 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR _pSpy$225997[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T245119[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv161[ebp], eax
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv155[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strMsg$226001[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T245119[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5656 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$226001[ebp]
	push	edx
	mov	ecx, DWORD PTR _pEspionage$[ebp]
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5657 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strMsg$226001[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@EvaluateDi:

; 5658 : 
; 5659 : 		}

	jmp	$LN5@EvaluateDi
$LN7@EvaluateDi:

; 5660 : 	}
; 5661 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$226001[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T245119[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateDiplomatSpies
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z
_TEXT	SEGMENT
_ui$226035 = -40					; size = 4
_ui$226031 = -36					; size = 4
_ui$226027 = -32					; size = 4
_ui$226023 = -28					; size = 4
_ui$226019 = -24					; size = 4
_ui$226015 = -20					; size = 4
_ui$226011 = -16					; size = 4
_uiCount$ = -12						; size = 4
_uiVersion$ = -8					; size = 4
_iValue$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z PROC	; operator>>, COMDAT

; 5665 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 5666 : 	uint uiVersion;
; 5667 : 	loadFrom >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5668 : 
; 5669 : 	uint uiCount;
; 5670 : 	loadFrom >> uiCount;

	lea	ecx, DWORD PTR _uiCount$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5671 : 	int iValue;
; 5672 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226011[ebp], 0
	jmp	SHORT $LN21@operator@6
$LN20@operator@6:
	mov	edx, DWORD PTR _ui$226011[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226011[ebp], edx
$LN21@operator@6:
	mov	eax, DWORD PTR _ui$226011[ebp]
	cmp	eax, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN19@operator@6

; 5673 : 	{
; 5674 : 		loadFrom >> iValue;

	lea	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5675 : 		writeTo.m_aiCivOutOfTechTurn.push_back(iValue);

	lea	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5676 : 	}

	jmp	SHORT $LN20@operator@6
$LN19@operator@6:

; 5677 : 
; 5678 : 	loadFrom >> uiCount;

	lea	eax, DWORD PTR _uiCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5679 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226015[ebp], 0
	jmp	SHORT $LN18@operator@6
$LN17@operator@6:
	mov	ecx, DWORD PTR _ui$226015[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$226015[ebp], ecx
$LN18@operator@6:
	mov	edx, DWORD PTR _ui$226015[ebp]
	cmp	edx, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN16@operator@6

; 5680 : 	{
; 5681 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5682 : 		writeTo.m_aiNumSpiesCaught.push_back(iValue);

	lea	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 108				; 0000006cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5683 : 	}

	jmp	SHORT $LN17@operator@6
$LN16@operator@6:

; 5684 : 
; 5685 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5686 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226019[ebp], 0
	jmp	SHORT $LN15@operator@6
$LN14@operator@6:
	mov	eax, DWORD PTR _ui$226019[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226019[ebp], eax
$LN15@operator@6:
	mov	ecx, DWORD PTR _ui$226019[ebp]
	cmp	ecx, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN13@operator@6

; 5687 : 	{
; 5688 : 		loadFrom >> iValue;

	lea	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5689 : 		writeTo.m_aiNumSpiesKilled.push_back(iValue);

	lea	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 212				; 000000d4H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5690 : 	}

	jmp	SHORT $LN14@operator@6
$LN13@operator@6:

; 5691 : 
; 5692 : 	loadFrom >> uiCount;

	lea	ecx, DWORD PTR _uiCount$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5693 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226023[ebp], 0
	jmp	SHORT $LN12@operator@6
$LN11@operator@6:
	mov	edx, DWORD PTR _ui$226023[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226023[ebp], edx
$LN12@operator@6:
	mov	eax, DWORD PTR _ui$226023[ebp]
	cmp	eax, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN10@operator@6

; 5694 : 	{
; 5695 : 		loadFrom >> iValue;

	lea	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5696 : 		writeTo.m_aiNumSpiesDied.push_back(iValue);

	lea	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 316				; 0000013cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5697 : 	}

	jmp	SHORT $LN11@operator@6
$LN10@operator@6:

; 5698 : 
; 5699 : 	loadFrom >> uiCount;

	lea	eax, DWORD PTR _uiCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5700 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226027[ebp], 0
	jmp	SHORT $LN9@operator@6
$LN8@operator@6:
	mov	ecx, DWORD PTR _ui$226027[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$226027[ebp], ecx
$LN9@operator@6:
	mov	edx, DWORD PTR _ui$226027[ebp]
	cmp	edx, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN7@operator@6

; 5701 : 	{
; 5702 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5703 : 		writeTo.m_aiTurnLastSpyCaught.push_back(iValue);

	lea	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 420				; 000001a4H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5704 : 	}

	jmp	SHORT $LN8@operator@6
$LN7@operator@6:

; 5705 : 
; 5706 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5707 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226031[ebp], 0
	jmp	SHORT $LN6@operator@6
$LN5@operator@6:
	mov	eax, DWORD PTR _ui$226031[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226031[ebp], eax
$LN6@operator@6:
	mov	ecx, DWORD PTR _ui$226031[ebp]
	cmp	ecx, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN4@operator@6

; 5708 : 	{
; 5709 : 		loadFrom >> iValue;

	lea	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5710 : 		writeTo.m_aiTurnLastSpyKilled.push_back(iValue);

	lea	eax, DWORD PTR _iValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 524				; 0000020cH
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5711 : 	}

	jmp	SHORT $LN5@operator@6
$LN4@operator@6:

; 5712 : 
; 5713 : 	loadFrom >> uiCount;

	lea	ecx, DWORD PTR _uiCount$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5714 : 	for(uint ui = 0; ui < uiCount; ui++)

	mov	DWORD PTR _ui$226035[ebp], 0
	jmp	SHORT $LN3@operator@6
$LN2@operator@6:
	mov	edx, DWORD PTR _ui$226035[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226035[ebp], edx
$LN3@operator@6:
	mov	eax, DWORD PTR _ui$226035[ebp]
	cmp	eax, DWORD PTR _uiCount$[ebp]
	jae	SHORT $LN1@operator@6

; 5715 : 	{
; 5716 : 		loadFrom >> iValue;

	lea	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5717 : 		writeTo.m_aiTurnLastSpyDied.push_back(iValue);

	lea	edx, DWORD PTR _iValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 628				; 00000274H
	call	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back

; 5718 : 	}

	jmp	SHORT $LN2@operator@6
$LN1@operator@6:

; 5719 : 
; 5720 : 	loadFrom >> writeTo.m_bUNCountdownStarted;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 732				; 000002dcH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 5721 : 	loadFrom >> writeTo.m_iTurnEspionageStarted;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 736				; 000002e0H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5722 : 	
; 5723 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 5724 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z
_TEXT	SEGMENT
$T245386 = -144						; size = 4
$T245379 = -140						; size = 4
$T245372 = -136						; size = 4
$T245368 = -132						; size = 4
$T245361 = -128						; size = 4
$T245354 = -124						; size = 4
$T245350 = -120						; size = 4
$T245343 = -116						; size = 4
$T245336 = -112						; size = 4
$T245332 = -108						; size = 4
$T245325 = -104						; size = 4
$T245318 = -100						; size = 4
$T245314 = -96						; size = 4
$T245307 = -92						; size = 4
$T245300 = -88						; size = 4
$T245296 = -84						; size = 4
$T245289 = -80						; size = 4
$T245282 = -76						; size = 4
$T245278 = -72						; size = 4
$T245271 = -68						; size = 4
$T245264 = -64						; size = 4
$T245257 = -60						; size = 4
$T245256 = -56						; size = 4
$T245255 = -52						; size = 4
$T245254 = -48						; size = 4
$T245253 = -44						; size = 4
$T245252 = -40						; size = 4
$T245251 = -36						; size = 4
_ui$226075 = -32					; size = 4
_ui$226070 = -28					; size = 4
_ui$226065 = -24					; size = 4
_ui$226060 = -20					; size = 4
_ui$226055 = -16					; size = 4
_ui$226050 = -12					; size = 4
_ui$226045 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z PROC	; operator<<, COMDAT

; 5728 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H

; 5729 : 	uint uiVersion = 0;

	mov	DWORD PTR _uiVersion$[ebp], 0

; 5730 : 	saveTo << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5731 : 
; 5732 : 	saveTo << readFrom.m_aiCivOutOfTechTurn.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245264[ebp], edx
	mov	eax, DWORD PTR $T245264[ebp]
	mov	DWORD PTR $T245251[ebp], eax
	lea	ecx, DWORD PTR $T245251[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5733 : 	for(uint ui = 0; ui < readFrom.m_aiCivOutOfTechTurn.size(); ui++)

	mov	DWORD PTR _ui$226045[ebp], 0
	jmp	SHORT $LN21@operator@7
$LN20@operator@7:
	mov	edx, DWORD PTR _ui$226045[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226045[ebp], edx
$LN21@operator@7:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245271[ebp], ecx
	mov	edx, DWORD PTR _ui$226045[ebp]
	cmp	edx, DWORD PTR $T245271[ebp]
	jae	SHORT $LN19@operator@7

; 5734 : 	{
; 5735 : 		saveTo << readFrom.m_aiCivOutOfTechTurn[ui];

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _ui$226045[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T245278[ebp], eax
	mov	ecx, DWORD PTR $T245278[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5736 : 	}

	jmp	SHORT $LN20@operator@7
$LN19@operator@7:

; 5737 : 
; 5738 : 	saveTo << readFrom.m_aiNumSpiesCaught.size();

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR $T245282[ebp], eax
	mov	ecx, DWORD PTR $T245282[ebp]
	mov	DWORD PTR $T245252[ebp], ecx
	lea	edx, DWORD PTR $T245252[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5739 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesCaught.size(); ui++)

	mov	DWORD PTR _ui$226050[ebp], 0
	jmp	SHORT $LN18@operator@7
$LN17@operator@7:
	mov	eax, DWORD PTR _ui$226050[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226050[ebp], eax
$LN18@operator@7:
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR $T245289[ebp], edx
	mov	eax, DWORD PTR _ui$226050[ebp]
	cmp	eax, DWORD PTR $T245289[ebp]
	jae	SHORT $LN16@operator@7

; 5740 : 	{
; 5741 : 		saveTo << readFrom.m_aiNumSpiesCaught[ui];

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	eax, DWORD PTR _ui$226050[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T245296[ebp], ecx
	mov	edx, DWORD PTR $T245296[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5742 : 	}

	jmp	SHORT $LN17@operator@7
$LN16@operator@7:

; 5743 : 
; 5744 : 	saveTo << readFrom.m_aiNumSpiesKilled.size();

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+216]
	mov	DWORD PTR $T245300[ebp], ecx
	mov	edx, DWORD PTR $T245300[ebp]
	mov	DWORD PTR $T245253[ebp], edx
	lea	eax, DWORD PTR $T245253[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5745 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesKilled.size(); ui++)

	mov	DWORD PTR _ui$226055[ebp], 0
	jmp	SHORT $LN15@operator@7
$LN14@operator@7:
	mov	ecx, DWORD PTR _ui$226055[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$226055[ebp], ecx
$LN15@operator@7:
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+216]
	mov	DWORD PTR $T245307[ebp], eax
	mov	ecx, DWORD PTR _ui$226055[ebp]
	cmp	ecx, DWORD PTR $T245307[ebp]
	jae	SHORT $LN13@operator@7

; 5746 : 	{
; 5747 : 		saveTo << readFrom.m_aiNumSpiesKilled[ui];

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+212]
	mov	ecx, DWORD PTR _ui$226055[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T245314[ebp], edx
	mov	eax, DWORD PTR $T245314[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5748 : 	}

	jmp	SHORT $LN14@operator@7
$LN13@operator@7:

; 5749 : 
; 5750 : 	saveTo << readFrom.m_aiNumSpiesDied.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	mov	DWORD PTR $T245318[ebp], edx
	mov	eax, DWORD PTR $T245318[ebp]
	mov	DWORD PTR $T245254[ebp], eax
	lea	ecx, DWORD PTR $T245254[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5751 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesDied.size(); ui++)

	mov	DWORD PTR _ui$226060[ebp], 0
	jmp	SHORT $LN12@operator@7
$LN11@operator@7:
	mov	edx, DWORD PTR _ui$226060[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226060[ebp], edx
$LN12@operator@7:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	DWORD PTR $T245325[ebp], ecx
	mov	edx, DWORD PTR _ui$226060[ebp]
	cmp	edx, DWORD PTR $T245325[ebp]
	jae	SHORT $LN10@operator@7

; 5752 : 	{
; 5753 : 		saveTo << readFrom.m_aiNumSpiesDied[ui];

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	edx, DWORD PTR _ui$226060[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T245332[ebp], eax
	mov	ecx, DWORD PTR $T245332[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5754 : 	}

	jmp	SHORT $LN11@operator@7
$LN10@operator@7:

; 5755 : 
; 5756 : 	saveTo << readFrom.m_aiTurnLastSpyCaught.size();

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+424]
	mov	DWORD PTR $T245336[ebp], eax
	mov	ecx, DWORD PTR $T245336[ebp]
	mov	DWORD PTR $T245255[ebp], ecx
	lea	edx, DWORD PTR $T245255[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5757 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyCaught.size(); ui++)

	mov	DWORD PTR _ui$226065[ebp], 0
	jmp	SHORT $LN9@operator@7
$LN8@operator@7:
	mov	eax, DWORD PTR _ui$226065[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$226065[ebp], eax
$LN9@operator@7:
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	mov	DWORD PTR $T245343[ebp], edx
	mov	eax, DWORD PTR _ui$226065[ebp]
	cmp	eax, DWORD PTR $T245343[ebp]
	jae	SHORT $LN7@operator@7

; 5758 : 	{
; 5759 : 		saveTo << readFrom.m_aiTurnLastSpyCaught[ui];

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	mov	eax, DWORD PTR _ui$226065[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T245350[ebp], ecx
	mov	edx, DWORD PTR $T245350[ebp]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5760 : 	}

	jmp	SHORT $LN8@operator@7
$LN7@operator@7:

; 5761 : 
; 5762 : 	saveTo << readFrom.m_aiTurnLastSpyKilled.size();

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR $T245354[ebp], ecx
	mov	edx, DWORD PTR $T245354[ebp]
	mov	DWORD PTR $T245256[ebp], edx
	lea	eax, DWORD PTR $T245256[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5763 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyKilled.size(); ui++)

	mov	DWORD PTR _ui$226070[ebp], 0
	jmp	SHORT $LN6@operator@7
$LN5@operator@7:
	mov	ecx, DWORD PTR _ui$226070[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$226070[ebp], ecx
$LN6@operator@7:
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+528]
	mov	DWORD PTR $T245361[ebp], eax
	mov	ecx, DWORD PTR _ui$226070[ebp]
	cmp	ecx, DWORD PTR $T245361[ebp]
	jae	SHORT $LN4@operator@7

; 5764 : 	{
; 5765 : 		saveTo << readFrom.m_aiTurnLastSpyKilled[ui];

	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+524]
	mov	ecx, DWORD PTR _ui$226070[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T245368[ebp], edx
	mov	eax, DWORD PTR $T245368[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5766 : 	}

	jmp	SHORT $LN5@operator@7
$LN4@operator@7:

; 5767 : 
; 5768 : 	saveTo << readFrom.m_aiTurnLastSpyDied.size();

	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+632]
	mov	DWORD PTR $T245372[ebp], edx
	mov	eax, DWORD PTR $T245372[ebp]
	mov	DWORD PTR $T245257[ebp], eax
	lea	ecx, DWORD PTR $T245257[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5769 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyDied.size(); ui++)

	mov	DWORD PTR _ui$226075[ebp], 0
	jmp	SHORT $LN3@operator@7
$LN2@operator@7:
	mov	edx, DWORD PTR _ui$226075[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$226075[ebp], edx
$LN3@operator@7:
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+632]
	mov	DWORD PTR $T245379[ebp], ecx
	mov	edx, DWORD PTR _ui$226075[ebp]
	cmp	edx, DWORD PTR $T245379[ebp]
	jae	SHORT $LN1@operator@7

; 5770 : 	{
; 5771 : 		saveTo << readFrom.m_aiTurnLastSpyDied[ui];

	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [eax+628]
	mov	edx, DWORD PTR _ui$226075[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T245386[ebp], eax
	mov	ecx, DWORD PTR $T245386[ebp]
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5772 : 	}

	jmp	SHORT $LN2@operator@7
$LN1@operator@7:

; 5773 : 
; 5774 : 	saveTo << readFrom.m_bUNCountdownStarted;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 732				; 000002dcH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 5775 : 	saveTo << readFrom.m_iTurnEspionageStarted;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 736				; 000002e0H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5776 : 
; 5777 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 5778 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T245405 = -20						; size = 4
_pRet$245401 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 8

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245405[ebp], edx
	cmp	DWORD PTR $T245405[ebp], 8
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T245405[ebp]
	imul	eax, 28					; 0000001cH
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$245401[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T245405[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$245401[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 8
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$245401[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ ; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
__ehhandler$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T245436 = -24						; size = 4
$T245435 = -20						; size = 4
_i$245430 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T245436[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T245435[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$245430[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$245430[ebp]
	add	eax, 1
	mov	DWORD PTR _i$245430[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$245430[ebp]
	cmp	ecx, DWORD PTR $T245436[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T245435[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T245435[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ ; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
__ehhandler$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
PUBLIC	?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z
_TEXT	SEGMENT
tv141 = -52						; size = 4
tv132 = -48						; size = 4
_this$ = -44						; size = 4
$T245448 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+236], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T245448[ebp], ecx
	je	SHORT $LN4@push_back
	mov	esi, DWORD PTR _element$[ebp]
	mov	ecx, 7
	mov	edi, DWORD PTR $T245448[ebp]
	rep movsd
	mov	eax, DWORD PTR $T245448[ebp]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv132[ebp], 0
$LN5@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv141[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv141[ebp]

; 682  : 	};

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T245502 = -20						; size = 4
_pRet$245498 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245502[ebp], edx
	cmp	DWORD PTR $T245502[ebp], 22		; 00000016H
	jbe	SHORT $LN7@FStaticVec@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T245502[ebp]
	imul	eax, 20					; 00000014H
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$245498[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T245502[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@3
$LN7@FStaticVec@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$245498[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 22			; 00000016H
$LN8@FStaticVec@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$245498[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
__ehhandler$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
__ehhandler$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
PUBLIC	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z$0
__ehfuncinfo$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	ENDS
;	COMDAT ?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
_TEXT	SEGMENT
tv157 = -84						; size = 4
tv149 = -80						; size = 4
_this$ = -76						; size = 4
$T245568 = -20						; size = 4
$T245567 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_element$ = 8						; size = 4
?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+452], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN40@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN40@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T245568[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T245568[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245568[ebp]
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@2:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T245567[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 681  : 		return m_uiCurrSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z$0:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR $T245568[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T245647 = -20						; size = 4
_pRet$245643 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245647[ebp], edx
	cmp	DWORD PTR $T245647[ebp], 1
	jbe	SHORT $LN7@FStaticVec@4
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T245647[ebp]
	shl	eax, 2
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$245643[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T245647[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@4
$LN7@FStaticVec@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$245643[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@FStaticVec@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$245643[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
__ehhandler$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T245678 = -24						; size = 4
$T245677 = -20						; size = 4
_i$245672 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T245678[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T245677[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@FStaticVec@5
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@FStaticVec@5
	mov	DWORD PTR _i$245672[ebp], 0
	jmp	SHORT $LN10@FStaticVec@5
$LN9@FStaticVec@5:
	mov	eax, DWORD PTR _i$245672[ebp]
	add	eax, 1
	mov	DWORD PTR _i$245672[ebp], eax
$LN10@FStaticVec@5:
	mov	ecx, DWORD PTR _i$245672[ebp]
	cmp	ecx, DWORD PTR $T245678[ebp]
	jae	SHORT $LN5@FStaticVec@5
	jmp	SHORT $LN9@FStaticVec@5
$LN5@FStaticVec@5:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T245677[ebp], edx
	je	SHORT $LN1@FStaticVec@5
	mov	eax, DWORD PTR $T245677[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@5:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
__ehhandler$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
PUBLIC	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z
_TEXT	SEGMENT
tv140 = -52						; size = 4
tv131 = -48						; size = 4
_this$ = -44						; size = 4
$T245690 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T245690[ebp], ecx
	cmp	DWORD PTR $T245690[ebp], 0
	je	SHORT $LN4@push_back@3
	mov	edx, DWORD PTR $T245690[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T245690[ebp]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:
	mov	DWORD PTR tv131[ebp], 0
$LN5@push_back@3:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv140[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$BaseVector@H$0A@@@QAE@XZ			; BaseVector<int,0>::~BaseVector<int,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T245744 = -20						; size = 4
_pRet$245740 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245744[ebp], edx
	cmp	DWORD PTR $T245744[ebp], 22		; 00000016H
	jbe	SHORT $LN7@FStaticVec@6
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T245744[ebp]
	shl	eax, 2
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$245740[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T245744[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@6
$LN7@FStaticVec@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$245740[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 22			; 00000016H
$LN8@FStaticVec@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$245740[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@H$0A@@@QAE@XZ		; BaseVector<int,0>::~BaseVector<int,0>
__ehhandler$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T245775 = -24						; size = 4
$T245774 = -20						; size = 4
_i$245772 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T245775[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T245774[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@FStaticVec@7
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@FStaticVec@7
	mov	DWORD PTR _i$245772[ebp], 0
	jmp	SHORT $LN10@FStaticVec@7
$LN9@FStaticVec@7:
	mov	eax, DWORD PTR _i$245772[ebp]
	add	eax, 1
	mov	DWORD PTR _i$245772[ebp], eax
$LN10@FStaticVec@7:
	mov	ecx, DWORD PTR _i$245772[ebp]
	cmp	ecx, DWORD PTR $T245775[ebp]
	jae	SHORT $LN5@FStaticVec@7
	jmp	SHORT $LN9@FStaticVec@7
$LN5@FStaticVec@7:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T245774[ebp], edx
	je	SHORT $LN1@FStaticVec@7
	mov	eax, DWORD PTR $T245774[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@7:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@H$0A@@@QAE@XZ		; BaseVector<int,0>::~BaseVector<int,0>
__ehhandler$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
PUBLIC	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z
_TEXT	SEGMENT
tv140 = -52						; size = 4
tv131 = -48						; size = 4
_this$ = -44						; size = 4
$T245787 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z PROC ; FStaticVector<int,22,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+100], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back@4

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T245787[ebp], ecx
	cmp	DWORD PTR $T245787[ebp], 0
	je	SHORT $LN4@push_back@4
	mov	edx, DWORD PTR $T245787[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T245787[ebp]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN5@push_back@4
$LN4@push_back@4:
	mov	DWORD PTR tv131[ebp], 0
$LN5@push_back@4:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv140[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ENDP ; FStaticVector<int,22,0,297,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >
PUBLIC	?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T245860 = -30						; size = 1
$T245847 = -29						; size = 1
$T245843 = -28						; size = 4
$T245836 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T245860[ebp]
	mov	DWORD PTR $T245836[ebp], eax
	lea	ecx, DWORD PTR $T245847[ebp]
	mov	DWORD PTR $T245843[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
PUBLIC	?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
PUBLIC	?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert
PUBLIC	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T246046 = -32						; size = 4
$T246036 = -28						; size = 4
$T246026 = -24						; size = 4
__Cat$246033 = -19					; size = 1
$T246030 = -18						; size = 1
$T246029 = -17						; size = 1
$T246003 = -16						; size = 4
$T245999 = -12						; size = 4
$T245998 = -8						; size = 4
$T245997 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T246003[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@5
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@5
$LN9@push_back@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@5:
	mov	ecx, DWORD PTR $T246003[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@5

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T246036[ebp], eax
	mov	ecx, DWORD PTR $T246036[ebp]
	mov	DWORD PTR $T246026[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T246029[ebp], dl
	mov	al, BYTE PTR __Cat$246033[ebp]
	mov	BYTE PTR $T246030[ebp], al
	movzx	ecx, BYTE PTR $T246029[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T246030[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T246026[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 3
	add	eax, DWORD PTR $T246036[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@5
$LN2@push_back@5:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T246046[ebp], eax
	mov	ecx, DWORD PTR $T246046[ebp]
	mov	DWORD PTR $T245998[ebp], ecx
	mov	edx, DWORD PTR $T245998[ebp]
	mov	DWORD PTR $T245997[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245997[ebp]
	push	ecx
	lea	edx, DWORD PTR $T245999[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert
$LN3@push_back@5:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
PUBLIC	?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
PUBLIC	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T246249 = -32						; size = 4
$T246239 = -28						; size = 4
$T246229 = -24						; size = 4
__Cat$246236 = -19					; size = 1
$T246233 = -18						; size = 1
$T246232 = -17						; size = 1
$T246206 = -16						; size = 4
$T246202 = -12						; size = 4
$T246201 = -8						; size = 4
$T246200 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR $T246206[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@6
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@6
$LN9@push_back@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@6:
	mov	edx, DWORD PTR $T246206[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@6

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T246239[ebp], ecx
	mov	edx, DWORD PTR $T246239[ebp]
	mov	DWORD PTR $T246229[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T246232[ebp], al
	mov	cl, BYTE PTR __Cat$246236[ebp]
	mov	BYTE PTR $T246233[ebp], cl
	movzx	edx, BYTE PTR $T246232[ebp]
	push	edx
	movzx	eax, BYTE PTR $T246233[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T246229[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR $T246239[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@6
$LN2@push_back@6:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T246249[ebp], ecx
	mov	edx, DWORD PTR $T246249[ebp]
	mov	DWORD PTR $T246201[ebp], edx
	mov	eax, DWORD PTR $T246201[ebp]
	mov	DWORD PTR $T246200[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246200[ebp]
	push	edx
	lea	eax, DWORD PTR $T246202[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
$LN3@push_back@6:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
PUBLIC	?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
PUBLIC	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T246507 = -32						; size = 4
$T246497 = -28						; size = 4
$T246487 = -24						; size = 4
__Cat$246493 = -19					; size = 1
$T246491 = -18						; size = 1
$T246490 = -17						; size = 1
$T246464 = -16						; size = 4
$T246460 = -12						; size = 4
$T246459 = -8						; size = 4
$T246458 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR $T246464[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@7
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@7
$LN9@push_back@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@7:
	mov	edx, DWORD PTR $T246464[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@7

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T246497[ebp], ecx
	mov	edx, DWORD PTR $T246497[ebp]
	mov	DWORD PTR $T246487[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T246490[ebp], al
	mov	cl, BYTE PTR __Cat$246493[ebp]
	mov	BYTE PTR $T246491[ebp], cl
	movzx	edx, BYTE PTR $T246490[ebp]
	push	edx
	movzx	eax, BYTE PTR $T246491[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T246487[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 68					; 00000044H
	add	ecx, DWORD PTR $T246497[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@7
$LN2@push_back@7:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T246507[ebp], ecx
	mov	edx, DWORD PTR $T246507[ebp]
	mov	DWORD PTR $T246459[ebp], edx
	mov	eax, DWORD PTR $T246459[ebp]
	mov	DWORD PTR $T246458[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246458[ebp]
	push	edx
	lea	eax, DWORD PTR $T246460[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
$LN3@push_back@7:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T246604 = -30						; size = 1
$T246591 = -29						; size = 1
$T246587 = -28						; size = 4
$T246580 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T246604[ebp]
	mov	DWORD PTR $T246580[ebp], eax
	lea	ecx, DWORD PTR $T246591[ebp]
	mov	DWORD PTR $T246587[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
PUBLIC	?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::insert
PUBLIC	??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T246797 = -64						; size = 4
$T246787 = -60						; size = 4
$T246775 = -56						; size = 4
$T246765 = -49						; size = 1
$T246764 = -48						; size = 4
__Cat$246782 = -19					; size = 1
$T246780 = -18						; size = 1
$T246779 = -17						; size = 1
$T246716 = -16						; size = 4
$T246712 = -12						; size = 4
$T246711 = -8						; size = 4
$T246710 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T246716[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@8
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@8
$LN9@push_back@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@8:
	mov	ecx, DWORD PTR $T246716[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@8

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T246787[ebp], eax
	mov	ecx, DWORD PTR $T246787[ebp]
	mov	DWORD PTR $T246775[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T246779[ebp], dl
	mov	al, BYTE PTR __Cat$246782[ebp]
	mov	BYTE PTR $T246780[ebp], al
	mov	cl, BYTE PTR $T246779[ebp]
	mov	BYTE PTR $T246765[ebp], cl
	mov	edx, DWORD PTR $T246775[ebp]
	mov	DWORD PTR $T246764[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T246764[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T246787[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@8
$LN2@push_back@8:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T246797[ebp], edx
	mov	eax, DWORD PTR $T246797[ebp]
	mov	DWORD PTR $T246711[ebp], eax
	mov	ecx, DWORD PTR $T246711[ebp]
	mov	DWORD PTR $T246710[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T246710[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246712[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::insert
$LN3@push_back@8:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T246894 = -30						; size = 1
$T246881 = -29						; size = 1
$T246877 = -28						; size = 4
$T246870 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T246894[ebp]
	mov	DWORD PTR $T246870[ebp], eax
	lea	ecx, DWORD PTR $T246881[ebp]
	mov	DWORD PTR $T246877[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
PUBLIC	?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert
PUBLIC	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T247079 = -32						; size = 4
$T247069 = -28						; size = 4
$T247059 = -24						; size = 4
__Cat$247066 = -19					; size = 1
$T247063 = -18						; size = 1
$T247062 = -17						; size = 1
$T247036 = -16						; size = 4
$T247032 = -12						; size = 4
$T247031 = -8						; size = 4
$T247030 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T247036[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@9
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@9
$LN9@push_back@9:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@9:
	mov	ecx, DWORD PTR $T247036[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@9

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T247069[ebp], eax
	mov	ecx, DWORD PTR $T247069[ebp]
	mov	DWORD PTR $T247059[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T247062[ebp], dl
	mov	al, BYTE PTR __Cat$247066[ebp]
	mov	BYTE PTR $T247063[ebp], al
	movzx	ecx, BYTE PTR $T247062[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T247063[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T247059[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 3
	add	eax, DWORD PTR $T247069[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@9
$LN2@push_back@9:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T247079[ebp], eax
	mov	ecx, DWORD PTR $T247079[ebp]
	mov	DWORD PTR $T247031[ebp], ecx
	mov	edx, DWORD PTR $T247031[ebp]
	mov	DWORD PTR $T247030[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247030[ebp]
	push	ecx
	lea	edx, DWORD PTR $T247032[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert
$LN3@push_back@9:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@H$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@H$0A@@@QAE@XZ PROC			; BaseVector<int,0>::~BaseVector<int,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@H$0A@@@QAE@XZ ENDP			; BaseVector<int,0>::~BaseVector<int,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$226804 = -4						; size = 4
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z PROC		; BaseVector<int,0>::Destroy, COMDAT
; _this$ = ecx

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 		if( !bPODType){

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@Destroy

; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){

	mov	DWORD PTR _i$226804[ebp], 0
	jmp	SHORT $LN3@Destroy
$LN2@Destroy:
	mov	ecx, DWORD PTR _i$226804[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$226804[ebp], ecx
$LN3@Destroy:
	mov	edx, DWORD PTR _i$226804[ebp]
	cmp	edx, DWORD PTR _uiNumElements$[ebp]
	jae	SHORT $LN5@Destroy

; 223  : 				pVal[i].~T();
; 224  : 			}

	jmp	SHORT $LN2@Destroy
$LN5@Destroy:

; 225  : 		}
; 226  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z ENDP		; BaseVector<int,0>::Destroy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv179 = -44						; size = 4
_this$ = -40						; size = 4
$T247215 = -36						; size = 4
$T247214 = -32						; size = 4
_i$247207 = -28						; size = 4
$T247190 = -24						; size = 4
_pRet$247187 = -20					; size = 4
$T247181 = -16						; size = 4
_i$226822 = -12						; size = 4
_uiNewSize$226814 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$226814[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$226814[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$226814[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247190[ebp], ecx
	cmp	DWORD PTR $T247190[ebp], 8
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T247190[ebp]
	imul	edx, 28					; 0000001cH
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$247187[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T247190[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize
$LN15@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$247187[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 8
$LN16@GrowSize:
	mov	ecx, DWORD PTR _pRet$247187[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	xor	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$226822[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$226822[ebp]
	add	edx, 1
	mov	DWORD PTR _i$226822[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$226822[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$226822[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T247181[ebp], edx
	je	SHORT $LN12@GrowSize
	mov	eax, DWORD PTR _i$226822[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx]
	add	esi, eax
	mov	ecx, 7
	mov	edi, DWORD PTR $T247181[ebp]
	rep movsd
	mov	edx, DWORD PTR $T247181[ebp]
	mov	DWORD PTR tv179[ebp], edx
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv179[ebp], 0
$LN13@GrowSize:
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T247215[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T247214[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN21@GrowSize
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@GrowSize
	mov	DWORD PTR _i$247207[ebp], 0
	jmp	SHORT $LN26@GrowSize
$LN25@GrowSize:
	mov	eax, DWORD PTR _i$247207[ebp]
	add	eax, 1
	mov	DWORD PTR _i$247207[ebp], eax
$LN26@GrowSize:
	mov	ecx, DWORD PTR _i$247207[ebp]
	cmp	ecx, DWORD PTR $T247215[ebp]
	jae	SHORT $LN21@GrowSize
	jmp	SHORT $LN25@GrowSize
$LN21@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T247214[ebp], edx
	je	SHORT $LN22@GrowSize
	mov	eax, DWORD PTR $T247214[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [ecx], edx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+236], 1

; 772  : 	};

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ PROC	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ ENDP	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0
__ehfuncinfo$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -84						; size = 4
_this$ = -80						; size = 4
$T247232 = -40						; size = 4
_pRet$247229 = -36					; size = 4
$T247222 = -32						; size = 4
$T247221 = -28						; size = 4
_i$226869 = -24						; size = 4
_uiNewSize$226861 = -20					; size = 4
_pTemp$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@2

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$226861[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$226861[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@2

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@2
$LN6@GrowSize@2:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$226861[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@2
$LN7@GrowSize@2:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247232[ebp], ecx
	cmp	DWORD PTR $T247232[ebp], 22		; 00000016H
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T247232[ebp]
	imul	edx, 20					; 00000014H
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$247229[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T247232[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@2
$LN16@GrowSize@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$247229[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H
$LN17@GrowSize@2:
	mov	ecx, DWORD PTR _pRet$247229[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	xor	edx, edx
	je	SHORT $LN5@GrowSize@2

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@2
$LN5@GrowSize@2:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$226869[ebp], 0
	jmp	SHORT $LN3@GrowSize@2
$LN2@GrowSize@2:
	mov	edx, DWORD PTR _i$226869[ebp]
	add	edx, 1
	mov	DWORD PTR _i$226869[ebp], edx
$LN3@GrowSize@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$226869[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@2

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$226869[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T247222[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T247222[ebp], 0
	je	SHORT $LN12@GrowSize@2
	mov	eax, DWORD PTR _i$226869[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR $T247222[ebp]
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@2
$LN12@GrowSize@2:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@2:
	mov	edx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T247221[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	SHORT $LN2@GrowSize@2
$LN4@GrowSize@2:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free

; 769  : 		m_pData = pTemp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [ecx], edx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+452], 1

; 772  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0:
	mov	eax, DWORD PTR _i$226869[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _pTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247222[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T247339 = -20						; size = 4
_i$247346 = -4						; size = 4
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free, COMDAT
; _this$ = ecx

; 809  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Free
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@Free
	mov	DWORD PTR _i$247346[ebp], 0
	jmp	SHORT $LN7@Free
$LN6@Free:
	mov	edx, DWORD PTR _i$247346[ebp]
	add	edx, 1
	mov	DWORD PTR _i$247346[ebp], edx
$LN7@Free:
	mov	eax, DWORD PTR _i$247346[ebp]
	cmp	eax, DWORD PTR _uiNumElements$[ebp]
	jae	SHORT $LN2@Free
	mov	ecx, DWORD PTR _i$247346[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR $T247339[ebp], ecx
	mov	ecx, DWORD PTR $T247339[ebp]
	call	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN12@Free
	mov	eax, DWORD PTR $T247339[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN12@Free:
	jmp	SHORT $LN6@Free
$LN2@Free:

; 811  : 		if( pVal != (T*)m_aData )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR _pVal$[ebp], ecx
	je	SHORT $LN3@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	mov	edx, DWORD PTR _pVal$[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN3@Free:

; 813  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T247385 = -20						; size = 4
_i$226901 = -4						; size = 4
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy, COMDAT
; _this$ = ecx

; 220  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 		if( !bPODType){

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@Destroy@2

; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){

	mov	DWORD PTR _i$226901[ebp], 0
	jmp	SHORT $LN3@Destroy@2
$LN2@Destroy@2:
	mov	ecx, DWORD PTR _i$226901[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$226901[ebp], ecx
$LN3@Destroy@2:
	mov	edx, DWORD PTR _i$226901[ebp]
	cmp	edx, DWORD PTR _uiNumElements$[ebp]
	jae	SHORT $LN5@Destroy@2

; 223  : 				pVal[i].~T();

	mov	eax, DWORD PTR _i$226901[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _pVal$[ebp]
	mov	DWORD PTR $T247385[ebp], eax
	mov	ecx, DWORD PTR $T247385[ebp]
	call	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN8@Destroy@2
	mov	edx, DWORD PTR $T247385[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@Destroy@2:

; 224  : 			}

	jmp	SHORT $LN2@Destroy@2
$LN5@Destroy@2:

; 225  : 		}
; 226  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
_TEXT	ENDS
PUBLIC	?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ; BaseVector<enum TechTypes,0>::Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z$0
__ehfuncinfo$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T247398 = -20						; size = 4
_pRet$247395 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_RHS$ = 8						; size = 4
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 591  : 	FStaticVector(const THIS_TYPE& RHS)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 592  : 	{
; 593  : 		m_uiCurrSize = RHS.m_uiCurrSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RHS$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 594  : 		m_uiCurrMaxSize = RHS.m_uiCurrMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RHS$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 595  : 		m_pData = Alloc(RHS.m_uiCurrMaxSize);

	mov	eax, DWORD PTR _RHS$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247398[ebp], ecx
	cmp	DWORD PTR $T247398[ebp], 1
	jbe	SHORT $LN7@FStaticVec@8
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T247398[ebp]
	shl	edx, 2
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$247395[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T247398[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN8@FStaticVec@8
$LN7@FStaticVec@8:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$247395[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN8@FStaticVec@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pRet$247395[ebp]
	mov	DWORD PTR [ecx], edx

; 596  : #ifdef BREAK_ON_STATIC_RESIZE
; 597  : 		m_iNumResized = 0;
; 598  : #endif
; 599  : 		Copy(RHS);

	mov	eax, DWORD PTR _RHS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ; BaseVector<enum TechTypes,0>::Copy

; 600  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
__ehhandler$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv178 = -44						; size = 4
_this$ = -40						; size = 4
$T247448 = -36						; size = 4
$T247447 = -32						; size = 4
_i$247443 = -28						; size = 4
$T247423 = -24						; size = 4
_pRet$247419 = -20					; size = 4
$T247414 = -16						; size = 4
_i$226921 = -12						; size = 4
_uiNewSize$226913 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@3

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$226913[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$226913[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@3

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@3
$LN6@GrowSize@3:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$226913[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@3
$LN7@GrowSize@3:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247423[ebp], ecx
	cmp	DWORD PTR $T247423[ebp], 1
	jbe	SHORT $LN15@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T247423[ebp]
	shl	edx, 2
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$247419[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T247423[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize@3
$LN15@GrowSize@3:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$247419[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN16@GrowSize@3:
	mov	ecx, DWORD PTR _pRet$247419[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	xor	edx, edx
	je	SHORT $LN5@GrowSize@3

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@3
$LN5@GrowSize@3:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$226921[ebp], 0
	jmp	SHORT $LN3@GrowSize@3
$LN2@GrowSize@3:
	mov	edx, DWORD PTR _i$226921[ebp]
	add	edx, 1
	mov	DWORD PTR _i$226921[ebp], edx
$LN3@GrowSize@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$226921[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@3

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$226921[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T247414[ebp], ecx
	cmp	DWORD PTR $T247414[ebp], 0
	je	SHORT $LN12@GrowSize@3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T247414[ebp]
	mov	edx, DWORD PTR _i$226921[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T247414[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN13@GrowSize@3
$LN12@GrowSize@3:
	mov	DWORD PTR tv178[ebp], 0
$LN13@GrowSize@3:
	jmp	SHORT $LN2@GrowSize@3
$LN4@GrowSize@3:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247448[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T247447[ebp], edx
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN21@GrowSize@3
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN21@GrowSize@3
	mov	DWORD PTR _i$247443[ebp], 0
	jmp	SHORT $LN26@GrowSize@3
$LN25@GrowSize@3:
	mov	edx, DWORD PTR _i$247443[ebp]
	add	edx, 1
	mov	DWORD PTR _i$247443[ebp], edx
$LN26@GrowSize@3:
	mov	eax, DWORD PTR _i$247443[ebp]
	cmp	eax, DWORD PTR $T247448[ebp]
	jae	SHORT $LN21@GrowSize@3
	jmp	SHORT $LN25@GrowSize@3
$LN21@GrowSize@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T247447[ebp], ecx
	je	SHORT $LN22@GrowSize@3
	mov	edx, DWORD PTR $T247447[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$247454 = -4						; size = 4
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::Free, COMDAT
; _this$ = ecx

; 809  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Free@2
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@Free@2
	mov	DWORD PTR _i$247454[ebp], 0
	jmp	SHORT $LN7@Free@2
$LN6@Free@2:
	mov	edx, DWORD PTR _i$247454[ebp]
	add	edx, 1
	mov	DWORD PTR _i$247454[ebp], edx
$LN7@Free@2:
	mov	eax, DWORD PTR _i$247454[ebp]
	cmp	eax, DWORD PTR _uiNumElements$[ebp]
	jae	SHORT $LN2@Free@2
	jmp	SHORT $LN6@Free@2
$LN2@Free@2:

; 811  : 		if( pVal != (T*)m_aData )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR _pVal$[ebp], ecx
	je	SHORT $LN3@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	mov	edx, DWORD PTR _pVal$[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN3@Free@2:

; 813  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::Free
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ PROC		; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ENDP		; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv178 = -44						; size = 4
_this$ = -40						; size = 4
$T247497 = -36						; size = 4
$T247496 = -32						; size = 4
_i$247491 = -28						; size = 4
$T247472 = -24						; size = 4
_pRet$247468 = -20					; size = 4
$T247463 = -16						; size = 4
_i$226968 = -12						; size = 4
_uiNewSize$226960 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<int,22,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@4:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@4

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$226960[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$226960[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@4

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@4
$LN6@GrowSize@4:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$226960[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@4
$LN7@GrowSize@4:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247472[ebp], ecx
	cmp	DWORD PTR $T247472[ebp], 22		; 00000016H
	jbe	SHORT $LN15@GrowSize@4
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T247472[ebp]
	shl	edx, 2
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$247468[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T247472[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize@4
$LN15@GrowSize@4:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$247468[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 22			; 00000016H
$LN16@GrowSize@4:
	mov	ecx, DWORD PTR _pRet$247468[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	xor	edx, edx
	je	SHORT $LN5@GrowSize@4

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@4
$LN5@GrowSize@4:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$226968[ebp], 0
	jmp	SHORT $LN3@GrowSize@4
$LN2@GrowSize@4:
	mov	edx, DWORD PTR _i$226968[ebp]
	add	edx, 1
	mov	DWORD PTR _i$226968[ebp], edx
$LN3@GrowSize@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$226968[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@4

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$226968[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T247463[ebp], ecx
	cmp	DWORD PTR $T247463[ebp], 0
	je	SHORT $LN12@GrowSize@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T247463[ebp]
	mov	edx, DWORD PTR _i$226968[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T247463[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN13@GrowSize@4
$LN12@GrowSize@4:
	mov	DWORD PTR tv178[ebp], 0
$LN13@GrowSize@4:
	jmp	SHORT $LN2@GrowSize@4
$LN4@GrowSize@4:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247497[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T247496[ebp], edx
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN21@GrowSize@4
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN21@GrowSize@4
	mov	DWORD PTR _i$247491[ebp], 0
	jmp	SHORT $LN26@GrowSize@4
$LN25@GrowSize@4:
	mov	edx, DWORD PTR _i$247491[ebp]
	add	edx, 1
	mov	DWORD PTR _i$247491[ebp], edx
$LN26@GrowSize@4:
	mov	eax, DWORD PTR _i$247491[ebp]
	cmp	eax, DWORD PTR $T247497[ebp]
	jae	SHORT $LN21@GrowSize@4
	jmp	SHORT $LN25@GrowSize@4
$LN21@GrowSize@4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T247496[ebp], ecx
	je	SHORT $LN22@GrowSize@4
	mov	edx, DWORD PTR $T247496[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize@4:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+100], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<int,22,0,297,0>::GrowSize
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$247558 = -24					; size = 4
$T247541 = -20						; size = 4
$T247522 = -16						; size = 4
$T247509 = -12						; size = 4
$T247506 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	test	edx, edx
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T247522[ebp], ecx
	mov	edx, DWORD PTR $T247522[ebp]
	mov	DWORD PTR $T247506[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T247506[ebp]
	sar	eax, 3
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T247541[ebp], edx
	mov	eax, DWORD PTR $T247541[ebp]
	mov	DWORD PTR $T247509[ebp], eax
	mov	ecx, DWORD PTR $T247509[ebp]
	mov	DWORD PTR __Tmp$247558[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$247558[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$247558[ebp], ecx
	mov	edx, DWORD PTR __Tmp$247558[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T247705 = -64						; size = 4
$T247687 = -60						; size = 4
$T247686 = -56						; size = 4
$T247670 = -52						; size = 4
__Cat$247693 = -46					; size = 1
$T247691 = -45						; size = 1
$T247644 = -44						; size = 4
$T247643 = -40						; size = 4
$T247642 = -36						; size = 4
$T247625 = -30						; size = 1
$T247624 = -29						; size = 1
$T247623 = -28						; size = 4
$T247622 = -24						; size = 4
__Cat$247632 = -16					; size = 1
$T247630 = -15						; size = 1
$T247629 = -14						; size = 1
$T247628 = -13						; size = 1
__Ptr$227016 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T247644[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T247643[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T247642[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T247628[ebp], cl
	mov	dl, BYTE PTR __Cat$247632[ebp]
	mov	BYTE PTR $T247629[ebp], dl
	mov	al, BYTE PTR $T247628[ebp]
	mov	BYTE PTR $T247625[ebp], al
	mov	cl, BYTE PTR $T247630[ebp]
	mov	BYTE PTR $T247624[ebp], cl
	mov	edx, DWORD PTR $T247644[ebp]
	mov	DWORD PTR $T247623[ebp], edx
	mov	eax, DWORD PTR $T247642[ebp]
	mov	DWORD PTR $T247622[ebp], eax
	jmp	SHORT $LN28@erase
$LN27@erase:
	mov	ecx, DWORD PTR $T247623[ebp]
	add	ecx, 8
	mov	DWORD PTR $T247623[ebp], ecx
	mov	edx, DWORD PTR $T247622[ebp]
	add	edx, 8
	mov	DWORD PTR $T247622[ebp], edx
$LN28@erase:
	mov	eax, DWORD PTR $T247622[ebp]
	cmp	eax, DWORD PTR $T247643[ebp]
	je	SHORT $LN20@erase
	mov	ecx, DWORD PTR $T247622[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T247623[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN27@erase
$LN20@erase:
	mov	edx, DWORD PTR $T247623[ebp]
	mov	DWORD PTR __Ptr$227016[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247705[ebp], ecx
	mov	edx, DWORD PTR $T247705[ebp]
	mov	DWORD PTR $T247687[ebp], edx
	mov	eax, DWORD PTR __Ptr$227016[ebp]
	mov	DWORD PTR $T247686[ebp], eax
	mov	cl, BYTE PTR __Cat$247693[ebp]
	mov	BYTE PTR $T247691[ebp], cl
	mov	edx, DWORD PTR $T247686[ebp]
	mov	DWORD PTR $T247670[ebp], edx
	jmp	SHORT $LN39@erase
$LN38@erase:
	mov	eax, DWORD PTR $T247670[ebp]
	add	eax, 8
	mov	DWORD PTR $T247670[ebp], eax
$LN39@erase:
	mov	ecx, DWORD PTR $T247670[ebp]
	cmp	ecx, DWORD PTR $T247687[ebp]
	je	SHORT $LN31@erase
	jmp	SHORT $LN38@erase
$LN31@erase:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$227016[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
PUBLIC	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$247719 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$247719[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$247719[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$247719[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T247816 = -32						; size = 4
$T247815 = -28						; size = 4
$T247811 = -24						; size = 4
$T247810 = -20						; size = 4
$T247792 = -16						; size = 4
$T247791 = -12						; size = 4
$T247775 = -8						; size = 4
__Cat$247798 = -2					; size = 1
$T247796 = -1						; size = 1
?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T247811[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T247810[ebp], ecx
	mov	edx, DWORD PTR $T247811[ebp]
	mov	DWORD PTR $T247792[ebp], edx
	mov	eax, DWORD PTR $T247810[ebp]
	mov	DWORD PTR $T247791[ebp], eax
	mov	cl, BYTE PTR __Cat$247798[ebp]
	mov	BYTE PTR $T247796[ebp], cl
	mov	edx, DWORD PTR $T247791[ebp]
	mov	DWORD PTR $T247775[ebp], edx
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	eax, DWORD PTR $T247775[ebp]
	add	eax, 8
	mov	DWORD PTR $T247775[ebp], eax
$LN12@Tidy:
	mov	ecx, DWORD PTR $T247775[ebp]
	cmp	ecx, DWORD PTR $T247792[ebp]
	je	SHORT $LN4@Tidy
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	mov	DWORD PTR $T247816[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247815[ebp], eax
	mov	ecx, DWORD PTR $T247815[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$247876 = -24					; size = 4
$T247854 = -20						; size = 4
$T247835 = -16						; size = 4
$T247822 = -12						; size = 4
$T247819 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247835[ebp], eax
	mov	ecx, DWORD PTR $T247835[ebp]
	mov	DWORD PTR $T247819[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T247819[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@2:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247854[ebp], eax
	mov	ecx, DWORD PTR $T247854[ebp]
	mov	DWORD PTR $T247822[ebp], ecx
	mov	edx, DWORD PTR $T247822[ebp]
	mov	DWORD PTR __Tmp$247876[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Tmp$247876[ebp]
	mov	DWORD PTR __Tmp$247876[ebp], eax
	mov	ecx, DWORD PTR __Tmp$247876[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T248018 = -64						; size = 4
$T248000 = -60						; size = 4
$T247999 = -56						; size = 4
$T247983 = -52						; size = 4
__Cat$248007 = -46					; size = 1
$T248004 = -45						; size = 1
$T247957 = -44						; size = 4
$T247956 = -40						; size = 4
$T247955 = -36						; size = 4
$T247938 = -30						; size = 1
$T247937 = -29						; size = 1
$T247936 = -28						; size = 4
$T247935 = -24						; size = 4
__Cat$247945 = -16					; size = 1
$T247942 = -15						; size = 1
$T247941 = -14						; size = 1
$T247940 = -13						; size = 1
__Ptr$227079 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T247957[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T247956[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T247955[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T247940[ebp], cl
	mov	dl, BYTE PTR __Cat$247945[ebp]
	mov	BYTE PTR $T247941[ebp], dl
	mov	al, BYTE PTR $T247940[ebp]
	mov	BYTE PTR $T247938[ebp], al
	mov	cl, BYTE PTR $T247942[ebp]
	mov	BYTE PTR $T247937[ebp], cl
	mov	edx, DWORD PTR $T247957[ebp]
	mov	DWORD PTR $T247936[ebp], edx
	mov	eax, DWORD PTR $T247955[ebp]
	mov	DWORD PTR $T247935[ebp], eax
	jmp	SHORT $LN28@erase@2
$LN27@erase@2:
	mov	ecx, DWORD PTR $T247936[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T247936[ebp], ecx
	mov	edx, DWORD PTR $T247935[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T247935[ebp], edx
$LN28@erase@2:
	mov	eax, DWORD PTR $T247935[ebp]
	cmp	eax, DWORD PTR $T247956[ebp]
	je	SHORT $LN20@erase@2
	mov	ecx, DWORD PTR $T247935[ebp]
	mov	edx, DWORD PTR $T247936[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	jmp	SHORT $LN27@erase@2
$LN20@erase@2:
	mov	edx, DWORD PTR $T247936[ebp]
	mov	DWORD PTR __Ptr$227079[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248018[ebp], ecx
	mov	edx, DWORD PTR $T248018[ebp]
	mov	DWORD PTR $T248000[ebp], edx
	mov	eax, DWORD PTR __Ptr$227079[ebp]
	mov	DWORD PTR $T247999[ebp], eax
	mov	cl, BYTE PTR __Cat$248007[ebp]
	mov	BYTE PTR $T248004[ebp], cl
	mov	edx, DWORD PTR $T247999[ebp]
	mov	DWORD PTR $T247983[ebp], edx
	jmp	SHORT $LN39@erase@2
$LN38@erase@2:
	mov	eax, DWORD PTR $T247983[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR $T247983[ebp], eax
$LN39@erase@2:
	mov	ecx, DWORD PTR $T247983[ebp]
	cmp	ecx, DWORD PTR $T248000[ebp]
	je	SHORT $LN31@erase@2
	jmp	SHORT $LN38@erase@2
$LN31@erase@2:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$227079[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>
PUBLIC	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$248036 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$248036[ebp], 214748364 ; 0cccccccH
	cmp	DWORD PTR __Count$248036[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$248036[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T248129 = -32						; size = 4
$T248128 = -28						; size = 4
$T248124 = -24						; size = 4
$T248123 = -20						; size = 4
$T248105 = -16						; size = 4
$T248104 = -12						; size = 4
$T248088 = -8						; size = 4
__Cat$248113 = -2					; size = 1
$T248110 = -1						; size = 1
?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248124[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248123[ebp], ecx
	mov	edx, DWORD PTR $T248124[ebp]
	mov	DWORD PTR $T248105[ebp], edx
	mov	eax, DWORD PTR $T248123[ebp]
	mov	DWORD PTR $T248104[ebp], eax
	mov	cl, BYTE PTR __Cat$248113[ebp]
	mov	BYTE PTR $T248110[ebp], cl
	mov	edx, DWORD PTR $T248104[ebp]
	mov	DWORD PTR $T248088[ebp], edx
	jmp	SHORT $LN12@Tidy@2
$LN11@Tidy@2:
	mov	eax, DWORD PTR $T248088[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR $T248088[ebp], eax
$LN12@Tidy@2:
	mov	ecx, DWORD PTR $T248088[ebp]
	cmp	ecx, DWORD PTR $T248105[ebp]
	je	SHORT $LN4@Tidy@2
	jmp	SHORT $LN11@Tidy@2
$LN4@Tidy@2:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR $T248129[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248128[ebp], eax
	mov	ecx, DWORD PTR $T248128[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$248184 = -24					; size = 4
$T248167 = -20						; size = 4
$T248148 = -16						; size = 4
$T248135 = -12						; size = 4
$T248132 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@3
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@3
$LN3@insert@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248148[ebp], eax
	mov	ecx, DWORD PTR $T248148[ebp]
	mov	DWORD PTR $T248132[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T248132[ebp]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@3:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248167[ebp], eax
	mov	ecx, DWORD PTR $T248167[ebp]
	mov	DWORD PTR $T248135[ebp], ecx
	mov	edx, DWORD PTR $T248135[ebp]
	mov	DWORD PTR __Tmp$248184[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 68					; 00000044H
	add	eax, DWORD PTR __Tmp$248184[ebp]
	mov	DWORD PTR __Tmp$248184[ebp], eax
	mov	ecx, DWORD PTR __Tmp$248184[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
_TEXT	ENDS
PUBLIC	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z	; IntrigueNotificationMessage::operator=
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -80						; size = 4
$T248391 = -76						; size = 4
$T248366 = -72						; size = 4
$T248365 = -68						; size = 4
$T248342 = -64						; size = 4
$T248341 = -60						; size = 4
$T248293 = -56						; size = 4
__Cat$248374 = -50					; size = 1
$T248371 = -49						; size = 1
$T248275 = -48						; size = 4
$T248274 = -44						; size = 4
$T248273 = -40						; size = 4
$T248256 = -34						; size = 1
$T248255 = -33						; size = 1
$T248254 = -32						; size = 4
$T248253 = -28						; size = 4
__Cat$248263 = -16					; size = 1
$T248260 = -15						; size = 1
$T248259 = -14						; size = 1
$T248258 = -13						; size = 1
__Ptr$227134 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T248275[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248274[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T248273[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248258[ebp], cl
	mov	dl, BYTE PTR __Cat$248263[ebp]
	mov	BYTE PTR $T248259[ebp], dl
	mov	al, BYTE PTR $T248258[ebp]
	mov	BYTE PTR $T248256[ebp], al
	mov	cl, BYTE PTR $T248260[ebp]
	mov	BYTE PTR $T248255[ebp], cl
	mov	edx, DWORD PTR $T248275[ebp]
	mov	DWORD PTR $T248254[ebp], edx
	mov	eax, DWORD PTR $T248273[ebp]
	mov	DWORD PTR $T248253[ebp], eax
	jmp	SHORT $LN28@erase@3
$LN27@erase@3:
	mov	ecx, DWORD PTR $T248254[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T248254[ebp], ecx
	mov	edx, DWORD PTR $T248253[ebp]
	add	edx, 68					; 00000044H
	mov	DWORD PTR $T248253[ebp], edx
$LN28@erase@3:
	mov	eax, DWORD PTR $T248253[ebp]
	cmp	eax, DWORD PTR $T248274[ebp]
	je	SHORT $LN20@erase@3
	mov	ecx, DWORD PTR $T248253[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T248254[ebp]
	call	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN27@erase@3
$LN20@erase@3:
	mov	edx, DWORD PTR $T248254[ebp]
	mov	DWORD PTR __Ptr$227134[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248391[ebp], ecx
	mov	edx, DWORD PTR $T248391[ebp]
	mov	DWORD PTR $T248366[ebp], edx
	mov	eax, DWORD PTR __Ptr$227134[ebp]
	mov	DWORD PTR $T248365[ebp], eax
	mov	cl, BYTE PTR __Cat$248374[ebp]
	mov	BYTE PTR $T248371[ebp], cl
	mov	edx, DWORD PTR $T248366[ebp]
	mov	DWORD PTR $T248342[ebp], edx
	mov	eax, DWORD PTR $T248365[ebp]
	mov	DWORD PTR $T248341[ebp], eax
	jmp	SHORT $LN43@erase@3
$LN42@erase@3:
	mov	ecx, DWORD PTR $T248341[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T248341[ebp], ecx
$LN43@erase@3:
	mov	edx, DWORD PTR $T248341[ebp]
	cmp	edx, DWORD PTR $T248342[ebp]
	je	SHORT $LN35@erase@3
	mov	eax, DWORD PTR $T248341[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T248293[ebp], eax
	mov	ecx, DWORD PTR $T248293[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN46@erase@3
	mov	edx, DWORD PTR $T248341[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN46@erase@3:
	jmp	SHORT $LN42@erase@3
$LN35@erase@3:

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$227134[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T248419 = -2092					; size = 4
$T248418 = -2088					; size = 4
$T248417 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T248417[ebp], eax
	mov	ecx, DWORD PTR $T248417[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T248418[ebp], eax
	mov	eax, DWORD PTR $T248418[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T248419[ebp], eax
	mov	ecx, DWORD PTR $T248419[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>
PUBLIC	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$248434 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$248434[ebp], 63161283	; 03c3c3c3H
	cmp	DWORD PTR __Count$248434[ebp], 0
	jbe	SHORT $LN11@Buy@3
	mov	eax, DWORD PTR __Count$248434[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@3
$LN11@Buy@3:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@3:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T248585 = -40						; size = 4
$T248584 = -36						; size = 4
$T248580 = -32						; size = 4
$T248579 = -28						; size = 4
$T248554 = -24						; size = 4
$T248553 = -20						; size = 4
$T248530 = -16						; size = 4
$T248529 = -12						; size = 4
$T248481 = -8						; size = 4
__Cat$248562 = -2					; size = 1
$T248559 = -1						; size = 1
?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248580[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248579[ebp], ecx
	mov	edx, DWORD PTR $T248580[ebp]
	mov	DWORD PTR $T248554[ebp], edx
	mov	eax, DWORD PTR $T248579[ebp]
	mov	DWORD PTR $T248553[ebp], eax
	mov	cl, BYTE PTR __Cat$248562[ebp]
	mov	BYTE PTR $T248559[ebp], cl
	mov	edx, DWORD PTR $T248554[ebp]
	mov	DWORD PTR $T248530[ebp], edx
	mov	eax, DWORD PTR $T248553[ebp]
	mov	DWORD PTR $T248529[ebp], eax
	jmp	SHORT $LN12@Tidy@3
$LN11@Tidy@3:
	mov	ecx, DWORD PTR $T248529[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T248529[ebp], ecx
$LN12@Tidy@3:
	mov	edx, DWORD PTR $T248529[ebp]
	cmp	edx, DWORD PTR $T248530[ebp]
	je	SHORT $LN4@Tidy@3
	mov	eax, DWORD PTR $T248529[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T248481[ebp], eax
	mov	ecx, DWORD PTR $T248481[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN15@Tidy@3
	mov	edx, DWORD PTR $T248529[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN15@Tidy@3:
	jmp	SHORT $LN11@Tidy@3
$LN4@Tidy@3:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR $T248585[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248584[ebp], eax
	mov	ecx, DWORD PTR $T248584[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$248640 = -24					; size = 4
$T248623 = -20						; size = 4
$T248604 = -16						; size = 4
$T248591 = -12						; size = 4
$T248588 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@4
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@4
$LN3@insert@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248604[ebp], ecx
	mov	edx, DWORD PTR $T248604[ebp]
	mov	DWORD PTR $T248588[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T248588[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@4:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T248623[ebp], edx
	mov	eax, DWORD PTR $T248623[ebp]
	mov	DWORD PTR $T248591[ebp], eax
	mov	ecx, DWORD PTR $T248591[ebp]
	mov	DWORD PTR __Tmp$248640[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$248640[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$248640[ebp], ecx
	mov	edx, DWORD PTR __Tmp$248640[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::insert
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCity * *,CvCity * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T248738 = -52						; size = 4
$T248727 = -48						; size = 4
$T248726 = -44						; size = 4
__Cat$248734 = -40					; size = 1
$T248732 = -39						; size = 1
__Ptr$227205 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCity * *,CvCity * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$227205[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248738[ebp], edx
	mov	eax, DWORD PTR $T248738[ebp]
	mov	DWORD PTR $T248727[ebp], eax
	mov	ecx, DWORD PTR __Ptr$227205[ebp]
	mov	DWORD PTR $T248726[ebp], ecx
	mov	dl, BYTE PTR __Cat$248734[ebp]
	mov	BYTE PTR $T248732[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$227205[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
PUBLIC	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$248753 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$248753[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$248753[ebp], 0
	jbe	SHORT $LN11@Buy@4
	mov	eax, DWORD PTR __Count$248753[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@4
$LN11@Buy@4:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@4:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T248819 = -28						; size = 4
$T248818 = -24						; size = 4
$T248814 = -20						; size = 4
$T248813 = -16						; size = 4
$T248802 = -12						; size = 4
$T248801 = -8						; size = 4
__Cat$248809 = -2					; size = 1
$T248807 = -1						; size = 1
?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248814[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248813[ebp], ecx
	mov	edx, DWORD PTR $T248814[ebp]
	mov	DWORD PTR $T248802[ebp], edx
	mov	eax, DWORD PTR $T248813[ebp]
	mov	DWORD PTR $T248801[ebp], eax
	mov	cl, BYTE PTR __Cat$248809[ebp]
	mov	BYTE PTR $T248807[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T248819[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248818[ebp], eax
	mov	ecx, DWORD PTR $T248818[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$248879 = -24					; size = 4
$T248857 = -20						; size = 4
$T248838 = -16						; size = 4
$T248825 = -12						; size = 4
$T248822 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	test	edx, edx
	jne	SHORT $LN3@insert@5
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@5
$LN3@insert@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248838[ebp], ecx
	mov	edx, DWORD PTR $T248838[ebp]
	mov	DWORD PTR $T248822[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T248822[ebp]
	sar	eax, 3
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@5:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T248857[ebp], edx
	mov	eax, DWORD PTR $T248857[ebp]
	mov	DWORD PTR $T248825[ebp], eax
	mov	ecx, DWORD PTR $T248825[ebp]
	mov	DWORD PTR __Tmp$248879[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$248879[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$248879[ebp], ecx
	mov	edx, DWORD PTR __Tmp$248879[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert
_TEXT	ENDS
PUBLIC	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
PUBLIC	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$248896 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@5

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@5
	jmp	SHORT $LN3@Buy@5
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$248896[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$248896[ebp], 0
	jbe	SHORT $LN11@Buy@5
	mov	eax, DWORD PTR __Count$248896[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@5
$LN11@Buy@5:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@5:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@5

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@5:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@5:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@5:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T248990 = -32						; size = 4
$T248989 = -28						; size = 4
$T248985 = -24						; size = 4
$T248984 = -20						; size = 4
$T248966 = -16						; size = 4
$T248965 = -12						; size = 4
$T248949 = -8						; size = 4
__Cat$248972 = -2					; size = 1
$T248969 = -1						; size = 1
?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248985[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T248984[ebp], ecx
	mov	edx, DWORD PTR $T248985[ebp]
	mov	DWORD PTR $T248966[ebp], edx
	mov	eax, DWORD PTR $T248984[ebp]
	mov	DWORD PTR $T248965[ebp], eax
	mov	cl, BYTE PTR __Cat$248972[ebp]
	mov	BYTE PTR $T248969[ebp], cl
	mov	edx, DWORD PTR $T248965[ebp]
	mov	DWORD PTR $T248949[ebp], edx
	jmp	SHORT $LN12@Tidy@5
$LN11@Tidy@5:
	mov	eax, DWORD PTR $T248949[ebp]
	add	eax, 8
	mov	DWORD PTR $T248949[ebp], eax
$LN12@Tidy@5:
	mov	ecx, DWORD PTR $T248949[ebp]
	cmp	ecx, DWORD PTR $T248966[ebp]
	je	SHORT $LN4@Tidy@5
	jmp	SHORT $LN11@Tidy@5
$LN4@Tidy@5:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	mov	DWORD PTR $T248990[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248989[ebp], eax
	mov	ecx, DWORD PTR $T248989[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z
_TEXT	SEGMENT
tv83 = -16						; size = 4
_this$ = -12						; size = 4
$T248993 = -8						; size = 4
_i$227294 = -4						; size = 4
_RHS$ = 8						; size = 4
?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z PROC	; BaseVector<enum TechTypes,0>::Copy, COMDAT
; _this$ = ecx

; 229  : 	void Copy(const THIS_TYPE& RHS){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 		m_uiCurrSize = RHS.m_uiCurrSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RHS$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 231  : 		if( bPODType ){

	xor	eax, eax
	je	SHORT $LN5@Copy

; 232  : 			memcpy( (void*)m_pData, (void*)RHS.m_pData, sizeof(T)*RHS.m_uiCurrSize);

	mov	ecx, DWORD PTR _RHS$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _RHS$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 233  : 		}else{

	jmp	SHORT $LN6@Copy
$LN5@Copy:

; 234  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i){

	mov	DWORD PTR _i$227294[ebp], 0
	jmp	SHORT $LN3@Copy
$LN2@Copy:
	mov	ecx, DWORD PTR _i$227294[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$227294[ebp], ecx
$LN3@Copy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$227294[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN6@Copy

; 235  : 				new( (void*)&m_pData[i] )T( RHS.m_pData[i] );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$227294[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T248993[ebp], ecx
	cmp	DWORD PTR $T248993[ebp], 0
	je	SHORT $LN8@Copy
	mov	edx, DWORD PTR _RHS$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T248993[ebp]
	mov	edx, DWORD PTR _i$227294[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T248993[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN9@Copy
$LN8@Copy:
	mov	DWORD PTR tv83[ebp], 0
$LN9@Copy:

; 236  : 			}

	jmp	SHORT $LN2@Copy
$LN6@Copy:

; 237  : 		}
; 238  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ENDP	; BaseVector<enum TechTypes,0>::Copy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
PUBLIC	??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$2
__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$0
__unwindtable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv304 = -428						; size = 4
tv290 = -424						; size = 4
tv282 = -420						; size = 4
_this$ = -416						; size = 4
$T249682 = -412						; size = 4
$T249674 = -408						; size = 4
$T249673 = -404						; size = 4
$T249650 = -398						; size = 1
$T249649 = -397						; size = 1
$T249648 = -396						; size = 4
$T249647 = -392						; size = 4
$T249635 = -385						; size = 1
$T249634 = -384						; size = 4
$T249633 = -380						; size = 4
$T249632 = -376						; size = 4
__Cat$249667 = -372					; size = 1
$T249665 = -371						; size = 1
$T249664 = -370						; size = 1
__Cat$249657 = -368					; size = 1
$T249655 = -367						; size = 1
$T249654 = -366						; size = 1
$T249653 = -365						; size = 1
$T249607 = -364						; size = 4
$T249588 = -360						; size = 4
$T249571 = -353						; size = 1
$T249570 = -352						; size = 4
$T249560 = -348						; size = 4
$T249559 = -344						; size = 4
__Cat$249604 = -338					; size = 1
$T249602 = -337						; size = 1
$T249601 = -336						; size = 1
__Cat$249596 = -335					; size = 1
$T249593 = -334						; size = 1
$T249592 = -333						; size = 1
$T249535 = -332						; size = 4
$T249527 = -328						; size = 4
$T249519 = -324						; size = 4
$T249501 = -320						; size = 4
$T249500 = -316						; size = 4
$T249484 = -312						; size = 4
__Cat$249508 = -306					; size = 1
$T249505 = -305						; size = 1
$T249458 = -304						; size = 4
$T249457 = -300						; size = 4
$T249447 = -296						; size = 4
__Cat$249454 = -291					; size = 1
$T249451 = -290						; size = 1
$T249450 = -289						; size = 1
$T249431 = -288						; size = 4
$T249412 = -284						; size = 4
$T249395 = -277						; size = 1
$T249394 = -276						; size = 4
$T249384 = -272						; size = 4
$T249383 = -268						; size = 4
__Cat$249428 = -262					; size = 1
$T249425 = -261						; size = 1
$T249424 = -260						; size = 1
__Cat$249420 = -259					; size = 1
$T249417 = -258						; size = 1
$T249416 = -257						; size = 1
$T249359 = -256						; size = 4
$T249358 = -252						; size = 4
$T249354 = -248						; size = 4
$T249353 = -244						; size = 4
$T249335 = -240						; size = 4
$T249334 = -236						; size = 4
$T249318 = -232						; size = 4
__Cat$249342 = -226					; size = 1
$T249339 = -225						; size = 1
$T249269 = -224						; size = 4
$T249268 = -220						; size = 4
$T249252 = -216						; size = 4
__Cat$249276 = -210					; size = 1
$T249273 = -209						; size = 1
$T249209 = -208						; size = 4
$T249208 = -204						; size = 4
$T249192 = -200						; size = 4
__Cat$249216 = -194					; size = 1
$T249213 = -193						; size = 1
$T249166 = -192						; size = 4
$T249154 = -188						; size = 4
$T249144 = -181						; size = 1
$T249143 = -180						; size = 4
__Cat$249162 = -175					; size = 1
$T249159 = -174						; size = 1
$T249158 = -173						; size = 1
$T249131 = -172						; size = 4
$T249119 = -168						; size = 4
$T249109 = -161						; size = 1
$T249108 = -160						; size = 4
__Cat$249127 = -155					; size = 1
$T249124 = -154						; size = 1
$T249123 = -153						; size = 1
$T249096 = -152						; size = 4
$T249086 = -148						; size = 4
__Cat$249093 = -143					; size = 1
$T249090 = -142						; size = 1
$T249089 = -141						; size = 1
__Count$249058 = -128					; size = 4
__Count$249032 = -56					; size = 4
__Tmp$227349 = -52					; size = 8
__Oldend$227350 = -44					; size = 4
__Tmp$227339 = -40					; size = 8
__Ncopied$227326 = -32					; size = 4
__Newvec$227324 = -28					; size = 4
__Whereoff$227325 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$249032[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$249032[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	edx, DWORD PTR __Count$249032[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$249058[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$249058[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	ecx, DWORD PTR __Count$249058[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
	add	esp, 8
	mov	DWORD PTR __Newvec$227324[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR __Whereoff$227325[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$227326[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$227325[ebp]
	mov	ecx, DWORD PTR __Newvec$227324[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T249096[ebp], edx
	mov	eax, DWORD PTR $T249096[ebp]
	mov	DWORD PTR $T249086[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T249089[ebp], cl
	mov	dl, BYTE PTR __Cat$249093[ebp]
	mov	BYTE PTR $T249090[ebp], dl
	movzx	eax, BYTE PTR $T249089[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T249090[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249086[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227326[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227326[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T249131[ebp], edx
	mov	eax, DWORD PTR __Newvec$227324[ebp]
	mov	DWORD PTR $T249119[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T249123[ebp], cl
	mov	dl, BYTE PTR __Cat$249127[ebp]
	mov	BYTE PTR $T249124[ebp], dl
	mov	al, BYTE PTR $T249123[ebp]
	mov	BYTE PTR $T249109[ebp], al
	mov	ecx, DWORD PTR $T249119[ebp]
	mov	DWORD PTR $T249108[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T249108[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249131[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227326[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227326[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T249166[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227325[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$227324[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T249154[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T249158[ebp], al
	mov	cl, BYTE PTR __Cat$249162[ebp]
	mov	BYTE PTR $T249159[ebp], cl
	mov	dl, BYTE PTR $T249158[ebp]
	mov	BYTE PTR $T249144[ebp], dl
	mov	eax, DWORD PTR $T249154[ebp]
	mov	DWORD PTR $T249143[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249143[ebp]
	push	edx
	mov	eax, DWORD PTR $T249166[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227326[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$227325[ebp]
	mov	eax, DWORD PTR __Newvec$227324[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T249209[ebp], ecx
	mov	edx, DWORD PTR __Newvec$227324[ebp]
	mov	DWORD PTR $T249208[ebp], edx
	mov	al, BYTE PTR __Cat$249216[ebp]
	mov	BYTE PTR $T249213[ebp], al
	mov	ecx, DWORD PTR $T249208[ebp]
	mov	DWORD PTR $T249192[ebp], ecx
	jmp	SHORT $LN91@Insert_n
$LN90@Insert_n:
	mov	edx, DWORD PTR $T249192[ebp]
	add	edx, 8
	mov	DWORD PTR $T249192[ebp], edx
$LN91@Insert_n:
	mov	eax, DWORD PTR $T249192[ebp]
	cmp	eax, DWORD PTR $T249209[ebp]
	je	SHORT $LN7@Insert_n
	jmp	SHORT $LN90@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227326[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$227325[ebp]
	mov	edx, DWORD PTR __Newvec$227324[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T249269[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227325[ebp]
	mov	ecx, DWORD PTR __Newvec$227324[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T249268[ebp], edx
	mov	al, BYTE PTR __Cat$249276[ebp]
	mov	BYTE PTR $T249273[ebp], al
	mov	ecx, DWORD PTR $T249268[ebp]
	mov	DWORD PTR $T249252[ebp], ecx
	jmp	SHORT $LN106@Insert_n
$LN105@Insert_n:
	mov	edx, DWORD PTR $T249252[ebp]
	add	edx, 8
	mov	DWORD PTR $T249252[ebp], edx
$LN106@Insert_n:
	mov	eax, DWORD PTR $T249252[ebp]
	cmp	eax, DWORD PTR $T249269[ebp]
	je	SHORT $LN6@Insert_n
	jmp	SHORT $LN105@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$227324[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T249354[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T249353[ebp], eax
	mov	ecx, DWORD PTR $T249354[ebp]
	mov	DWORD PTR $T249335[ebp], ecx
	mov	edx, DWORD PTR $T249353[ebp]
	mov	DWORD PTR $T249334[ebp], edx
	mov	al, BYTE PTR __Cat$249342[ebp]
	mov	BYTE PTR $T249339[ebp], al
	mov	ecx, DWORD PTR $T249334[ebp]
	mov	DWORD PTR $T249318[ebp], ecx
	jmp	SHORT $LN125@Insert_n
$LN124@Insert_n:
	mov	edx, DWORD PTR $T249318[ebp]
	add	edx, 8
	mov	DWORD PTR $T249318[ebp], edx
$LN125@Insert_n:
	mov	eax, DWORD PTR $T249318[ebp]
	cmp	eax, DWORD PTR $T249335[ebp]
	je	SHORT $LN117@Insert_n
	jmp	SHORT $LN124@Insert_n
$LN117@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR $T249359[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T249358[ebp], edx
	mov	eax, DWORD PTR $T249358[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$227324[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$227324[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$227324[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$227339[ebp], edx
	mov	DWORD PTR __Tmp$227339[ebp+4], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T249431[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T249412[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T249416[ebp], al
	mov	cl, BYTE PTR __Cat$249420[ebp]
	mov	BYTE PTR $T249417[ebp], cl
	mov	dl, BYTE PTR $T249416[ebp]
	mov	BYTE PTR $T249395[ebp], dl
	mov	eax, DWORD PTR $T249412[ebp]
	mov	DWORD PTR $T249394[ebp], eax
	mov	ecx, DWORD PTR $T249394[ebp]
	mov	DWORD PTR $T249384[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T249383[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T249424[ebp], al
	mov	cl, BYTE PTR __Cat$249428[ebp]
	mov	BYTE PTR $T249425[ebp], cl
	movzx	edx, BYTE PTR $T249424[ebp]
	push	edx
	movzx	eax, BYTE PTR $T249425[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249384[ebp]
	push	edx
	mov	eax, DWORD PTR $T249431[ebp]
	push	eax
	mov	ecx, DWORD PTR $T249383[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T249458[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T249457[ebp], eax
	mov	ecx, DWORD PTR $T249457[ebp]
	mov	DWORD PTR $T249447[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T249450[ebp], dl
	mov	al, BYTE PTR __Cat$249454[ebp]
	mov	BYTE PTR $T249451[ebp], al
	movzx	ecx, BYTE PTR $T249450[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T249451[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$227339[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249458[ebp]
	push	edx
	mov	eax, DWORD PTR $T249447[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR $T249519[ebp], ecx
	mov	edx, DWORD PTR $T249519[ebp]
	mov	DWORD PTR $T249501[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T249500[ebp], edx
	mov	al, BYTE PTR __Cat$249508[ebp]
	mov	BYTE PTR $T249505[ebp], al
	mov	ecx, DWORD PTR $T249500[ebp]
	mov	DWORD PTR $T249484[ebp], ecx
	jmp	SHORT $LN160@Insert_n
$LN159@Insert_n:
	mov	edx, DWORD PTR $T249484[ebp]
	add	edx, 8
	mov	DWORD PTR $T249484[ebp], edx
$LN160@Insert_n:
	mov	eax, DWORD PTR $T249484[ebp]
	cmp	eax, DWORD PTR $T249501[ebp]
	je	SHORT $LN152@Insert_n
	jmp	SHORT $LN159@Insert_n
$LN152@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T249535[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T249527[ebp], eax
	jmp	SHORT $LN171@Insert_n
$LN170@Insert_n:
	mov	ecx, DWORD PTR $T249527[ebp]
	add	ecx, 8
	mov	DWORD PTR $T249527[ebp], ecx
$LN171@Insert_n:
	mov	edx, DWORD PTR $T249527[ebp]
	cmp	edx, DWORD PTR $T249535[ebp]
	je	SHORT $LN167@Insert_n
	mov	eax, DWORD PTR __Tmp$227339[ebp]
	mov	ecx, DWORD PTR __Tmp$227339[ebp+4]
	mov	edx, DWORD PTR $T249527[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN170@Insert_n
$LN167@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$227349[ebp], ecx
	mov	DWORD PTR __Tmp$227349[ebp+4], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$227350[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T249607[ebp], eax
	mov	ecx, DWORD PTR $T249607[ebp]
	mov	DWORD PTR $T249588[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T249592[ebp], dl
	mov	al, BYTE PTR __Cat$249596[ebp]
	mov	BYTE PTR $T249593[ebp], al
	mov	cl, BYTE PTR $T249592[ebp]
	mov	BYTE PTR $T249571[ebp], cl
	mov	edx, DWORD PTR $T249588[ebp]
	mov	DWORD PTR $T249570[ebp], edx
	mov	eax, DWORD PTR $T249570[ebp]
	mov	DWORD PTR $T249560[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$227350[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T249559[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T249601[ebp], al
	mov	cl, BYTE PTR __Cat$249604[ebp]
	mov	BYTE PTR $T249602[ebp], cl
	movzx	edx, BYTE PTR $T249601[ebp]
	push	edx
	movzx	eax, BYTE PTR $T249602[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249560[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$227350[ebp]
	push	eax
	mov	ecx, DWORD PTR $T249559[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$227350[ebp]
	mov	DWORD PTR $T249674[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T249673[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T249653[ebp], dl
	mov	al, BYTE PTR __Cat$249657[ebp]
	mov	BYTE PTR $T249654[ebp], al
	mov	cl, BYTE PTR $T249653[ebp]
	mov	BYTE PTR $T249650[ebp], cl
	mov	dl, BYTE PTR $T249655[ebp]
	mov	BYTE PTR $T249649[ebp], dl
	mov	eax, DWORD PTR $T249674[ebp]
	mov	DWORD PTR $T249648[ebp], eax
	mov	ecx, DWORD PTR $T249673[ebp]
	mov	DWORD PTR $T249647[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T249664[ebp], dl
	mov	al, BYTE PTR __Cat$249667[ebp]
	mov	BYTE PTR $T249665[ebp], al
	mov	cl, BYTE PTR $T249664[ebp]
	mov	BYTE PTR $T249635[ebp], cl
	mov	edx, DWORD PTR $T249648[ebp]
	mov	DWORD PTR $T249634[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$227350[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T249633[ebp], ecx
	mov	edx, DWORD PTR $T249647[ebp]
	mov	DWORD PTR $T249632[ebp], edx
$LN197@Insert_n:
	mov	eax, DWORD PTR $T249632[ebp]
	cmp	eax, DWORD PTR $T249633[ebp]
	je	SHORT $LN186@Insert_n
	mov	ecx, DWORD PTR $T249633[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T249633[ebp], ecx
	mov	edx, DWORD PTR $T249634[ebp]
	sub	edx, 8
	mov	DWORD PTR $T249634[ebp], edx
	mov	eax, DWORD PTR $T249633[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T249634[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN197@Insert_n
$LN186@Insert_n:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T249682[ebp], ecx
	jmp	SHORT $LN204@Insert_n
$LN203@Insert_n:
	mov	edx, DWORD PTR $T249682[ebp]
	add	edx, 8
	mov	DWORD PTR $T249682[ebp], edx
$LN204@Insert_n:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR $T249682[ebp], edx
	je	SHORT $LN16@Insert_n
	mov	eax, DWORD PTR __Tmp$227349[ebp]
	mov	ecx, DWORD PTR __Tmp$227349[ebp+4]
	mov	edx, DWORD PTR $T249682[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN203@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T249704 = -80						; size = 28
$T249703 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T249704[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T249703[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T249703[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T249704[ebp]
	push	eax
	lea	ecx, DWORD PTR $T249703[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T249703[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T249703[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T249704[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T249704[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T249703[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
PUBLIC	??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$2
__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$0
__unwindtable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
tv84 = -456						; size = 4
tv304 = -452						; size = 4
tv290 = -448						; size = 4
tv282 = -444						; size = 4
_this$ = -440						; size = 4
$T250438 = -436						; size = 4
$T250430 = -432						; size = 4
$T250429 = -428						; size = 4
$T250406 = -422						; size = 1
$T250405 = -421						; size = 1
$T250404 = -420						; size = 4
$T250403 = -416						; size = 4
$T250391 = -409						; size = 1
$T250390 = -408						; size = 4
$T250389 = -404						; size = 4
$T250388 = -400						; size = 4
__Cat$250423 = -396					; size = 1
$T250420 = -395						; size = 1
$T250419 = -394						; size = 1
__Cat$250414 = -392					; size = 1
$T250411 = -391						; size = 1
$T250410 = -390						; size = 1
$T250409 = -389						; size = 1
$T250363 = -388						; size = 4
$T250344 = -384						; size = 4
$T250327 = -377						; size = 1
$T250326 = -376						; size = 4
$T250316 = -372						; size = 4
$T250315 = -368						; size = 4
__Cat$250360 = -362					; size = 1
$T250357 = -361						; size = 1
$T250356 = -360						; size = 1
__Cat$250352 = -359					; size = 1
$T250349 = -358						; size = 1
$T250348 = -357						; size = 1
$T250291 = -356						; size = 4
$T250283 = -352						; size = 4
$T250275 = -348						; size = 4
$T250257 = -344						; size = 4
$T250256 = -340						; size = 4
$T250240 = -336						; size = 4
__Cat$250265 = -330					; size = 1
$T250262 = -329						; size = 1
$T250214 = -328						; size = 4
$T250213 = -324						; size = 4
$T250203 = -320						; size = 4
__Cat$250210 = -315					; size = 1
$T250207 = -314						; size = 1
$T250206 = -313						; size = 1
$T250187 = -312						; size = 4
$T250168 = -308						; size = 4
$T250151 = -301						; size = 1
$T250150 = -300						; size = 4
$T250140 = -296						; size = 4
$T250139 = -292						; size = 4
__Cat$250184 = -286					; size = 1
$T250181 = -285						; size = 1
$T250180 = -284						; size = 1
__Cat$250176 = -283					; size = 1
$T250173 = -282						; size = 1
$T250172 = -281						; size = 1
$T250115 = -280						; size = 4
$T250114 = -276						; size = 4
$T250110 = -272						; size = 4
$T250109 = -268						; size = 4
$T250091 = -264						; size = 4
$T250090 = -260						; size = 4
$T250074 = -256						; size = 4
__Cat$250099 = -250					; size = 1
$T250096 = -249						; size = 1
$T250025 = -248						; size = 4
$T250024 = -244						; size = 4
$T250008 = -240						; size = 4
__Cat$250032 = -234					; size = 1
$T250029 = -233						; size = 1
$T249965 = -232						; size = 4
$T249964 = -228						; size = 4
$T249948 = -224						; size = 4
__Cat$249972 = -218					; size = 1
$T249969 = -217						; size = 1
$T249922 = -216						; size = 4
$T249910 = -212						; size = 4
$T249900 = -205						; size = 1
$T249899 = -204						; size = 4
__Cat$249917 = -199					; size = 1
$T249914 = -198						; size = 1
$T249913 = -197						; size = 1
$T249887 = -196						; size = 4
$T249875 = -192						; size = 4
$T249865 = -185						; size = 1
$T249864 = -184						; size = 4
__Cat$249879 = -179					; size = 1
$T249876 = -178						; size = 1
$T249884 = -177						; size = 1
$T249852 = -176						; size = 4
$T249842 = -172						; size = 4
__Cat$249850 = -167					; size = 1
$T249848 = -166						; size = 1
$T249847 = -165						; size = 1
__Count$249812 = -152					; size = 4
__Count$249786 = -80					; size = 4
__Tmp$227424 = -76					; size = 20
__Oldend$227425 = -56					; size = 4
__Tmp$227414 = -52					; size = 20
__Ncopied$227401 = -32					; size = 4
__Newvec$227399 = -28					; size = 4
__Whereoff$227400 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@2
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@2
$LN29@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@2:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$249786[ebp], 214748364 ; 0cccccccH
	cmp	DWORD PTR __Count$249786[ebp], 0
	jbe	SHORT $LN35@Insert_n@2
	mov	eax, DWORD PTR __Count$249786[ebp]
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN37@Insert_n@2
$LN35@Insert_n@2:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	edx, DWORD PTR tv290[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
	jmp	$LN16@Insert_n@2

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$249812[ebp], 214748364 ; 0cccccccH
	cmp	DWORD PTR __Count$249812[ebp], 0
	jbe	SHORT $LN48@Insert_n@2
	mov	edx, DWORD PTR __Count$249812[ebp]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN44@Insert_n@2
$LN48@Insert_n@2:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@2:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv304[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@2:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN54@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>
	add	esp, 8
	mov	DWORD PTR __Newvec$227399[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR __Whereoff$227400[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$227401[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$227400[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T249852[ebp], edx
	mov	eax, DWORD PTR $T249852[ebp]
	mov	DWORD PTR $T249842[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T249847[ebp], cl
	mov	dl, BYTE PTR __Cat$249850[ebp]
	mov	BYTE PTR $T249848[ebp], dl
	movzx	eax, BYTE PTR $T249847[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T249848[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249842[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227401[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227401[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T249887[ebp], edx
	mov	eax, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T249875[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T249884[ebp], cl
	mov	dl, BYTE PTR __Cat$249879[ebp]
	mov	BYTE PTR $T249876[ebp], dl
	mov	al, BYTE PTR $T249884[ebp]
	mov	BYTE PTR $T249865[ebp], al
	mov	ecx, DWORD PTR $T249875[ebp]
	mov	DWORD PTR $T249864[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T249864[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T249887[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227401[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227401[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T249922[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227400[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T249910[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T249913[ebp], cl
	mov	dl, BYTE PTR __Cat$249917[ebp]
	mov	BYTE PTR $T249914[ebp], dl
	mov	al, BYTE PTR $T249913[ebp]
	mov	BYTE PTR $T249900[ebp], al
	mov	ecx, DWORD PTR $T249910[ebp]
	mov	DWORD PTR $T249899[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T249899[ebp]
	push	eax
	mov	ecx, DWORD PTR $T249922[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@2
__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227401[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$227400[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T249965[ebp], eax
	mov	ecx, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T249964[ebp], ecx
	mov	dl, BYTE PTR __Cat$249972[ebp]
	mov	BYTE PTR $T249969[ebp], dl
	mov	eax, DWORD PTR $T249964[ebp]
	mov	DWORD PTR $T249948[ebp], eax
	jmp	SHORT $LN91@Insert_n@2
$LN90@Insert_n@2:
	mov	ecx, DWORD PTR $T249948[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T249948[ebp], ecx
$LN91@Insert_n@2:
	mov	edx, DWORD PTR $T249948[ebp]
	cmp	edx, DWORD PTR $T249965[ebp]
	je	SHORT $LN7@Insert_n@2
	jmp	SHORT $LN90@Insert_n@2
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227401[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR __Whereoff$227400[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Newvec$227399[ebp]
	add	ecx, eax
	mov	DWORD PTR $T250025[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$227400[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR $T250024[ebp], edx
	mov	al, BYTE PTR __Cat$250032[ebp]
	mov	BYTE PTR $T250029[ebp], al
	mov	ecx, DWORD PTR $T250024[ebp]
	mov	DWORD PTR $T250008[ebp], ecx
	jmp	SHORT $LN106@Insert_n@2
$LN105@Insert_n@2:
	mov	edx, DWORD PTR $T250008[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T250008[ebp], edx
$LN106@Insert_n@2:
	mov	eax, DWORD PTR $T250008[ebp]
	cmp	eax, DWORD PTR $T250025[ebp]
	je	SHORT $LN6@Insert_n@2
	jmp	SHORT $LN105@Insert_n@2
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$227399[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@2
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250110[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250109[ebp], eax
	mov	ecx, DWORD PTR $T250110[ebp]
	mov	DWORD PTR $T250091[ebp], ecx
	mov	edx, DWORD PTR $T250109[ebp]
	mov	DWORD PTR $T250090[ebp], edx
	mov	al, BYTE PTR __Cat$250099[ebp]
	mov	BYTE PTR $T250096[ebp], al
	mov	ecx, DWORD PTR $T250090[ebp]
	mov	DWORD PTR $T250074[ebp], ecx
	jmp	SHORT $LN125@Insert_n@2
$LN124@Insert_n@2:
	mov	edx, DWORD PTR $T250074[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T250074[ebp], edx
$LN125@Insert_n@2:
	mov	eax, DWORD PTR $T250074[ebp]
	cmp	eax, DWORD PTR $T250091[ebp]
	je	SHORT $LN117@Insert_n@2
	jmp	SHORT $LN124@Insert_n@2
$LN117@Insert_n@2:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR $T250115[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250114[ebp], eax
	mov	ecx, DWORD PTR $T250114[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Newvec$227399[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR __Newvec$227399[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$227399[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$227414[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$227414[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$227414[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$227414[ebp+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR __Tmp$227414[ebp+16], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250187[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250168[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T250172[ebp], al
	mov	cl, BYTE PTR __Cat$250176[ebp]
	mov	BYTE PTR $T250173[ebp], cl
	mov	dl, BYTE PTR $T250172[ebp]
	mov	BYTE PTR $T250151[ebp], dl
	mov	eax, DWORD PTR $T250168[ebp]
	mov	DWORD PTR $T250150[ebp], eax
	mov	ecx, DWORD PTR $T250150[ebp]
	mov	DWORD PTR $T250140[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250139[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T250180[ebp], al
	mov	cl, BYTE PTR __Cat$250184[ebp]
	mov	BYTE PTR $T250181[ebp], cl
	movzx	edx, BYTE PTR $T250180[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250181[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T250140[ebp]
	push	edx
	mov	eax, DWORD PTR $T250187[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250139[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T250214[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250213[ebp], ecx
	mov	edx, DWORD PTR $T250213[ebp]
	mov	DWORD PTR $T250203[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T250206[ebp], al
	mov	cl, BYTE PTR __Cat$250210[ebp]
	mov	BYTE PTR $T250207[ebp], cl
	movzx	edx, BYTE PTR $T250206[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250207[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$227414[ebp]
	push	edx
	mov	eax, DWORD PTR $T250214[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250203[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250275[ebp], edx
	mov	ecx, DWORD PTR $T250275[ebp]
	mov	DWORD PTR $T250257[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250256[ebp], edx
	mov	al, BYTE PTR __Cat$250265[ebp]
	mov	BYTE PTR $T250262[ebp], al
	mov	ecx, DWORD PTR $T250256[ebp]
	mov	DWORD PTR $T250240[ebp], ecx
	jmp	SHORT $LN160@Insert_n@2
$LN159@Insert_n@2:
	mov	edx, DWORD PTR $T250240[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T250240[ebp], edx
$LN160@Insert_n@2:
	mov	eax, DWORD PTR $T250240[ebp]
	cmp	eax, DWORD PTR $T250257[ebp]
	je	SHORT $LN152@Insert_n@2
	jmp	SHORT $LN159@Insert_n@2
$LN152@Insert_n@2:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T250291[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250283[ebp], ecx
	jmp	SHORT $LN171@Insert_n@2
$LN170@Insert_n@2:
	mov	edx, DWORD PTR $T250283[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T250283[ebp], edx
$LN171@Insert_n@2:
	mov	eax, DWORD PTR $T250283[ebp]
	cmp	eax, DWORD PTR $T250291[ebp]
	je	SHORT $LN167@Insert_n@2
	mov	ecx, DWORD PTR $T250283[ebp]
	mov	edx, DWORD PTR __Tmp$227414[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$227414[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$227414[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$227414[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR __Tmp$227414[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	jmp	SHORT $LN170@Insert_n@2
$LN167@Insert_n@2:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$227424[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$227424[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$227424[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$227424[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR __Tmp$227424[ebp+16], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$227425[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T250363[ebp], ecx
	mov	edx, DWORD PTR $T250363[ebp]
	mov	DWORD PTR $T250344[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T250348[ebp], al
	mov	cl, BYTE PTR __Cat$250352[ebp]
	mov	BYTE PTR $T250349[ebp], cl
	mov	dl, BYTE PTR $T250348[ebp]
	mov	BYTE PTR $T250327[ebp], dl
	mov	eax, DWORD PTR $T250344[ebp]
	mov	DWORD PTR $T250326[ebp], eax
	mov	ecx, DWORD PTR $T250326[ebp]
	mov	DWORD PTR $T250316[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR __Oldend$227425[ebp]
	sub	eax, edx
	mov	DWORD PTR $T250315[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250356[ebp], cl
	mov	dl, BYTE PTR __Cat$250360[ebp]
	mov	BYTE PTR $T250357[ebp], dl
	movzx	eax, BYTE PTR $T250356[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T250357[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T250316[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$227425[ebp]
	push	ecx
	mov	edx, DWORD PTR $T250315[ebp]
	push	edx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$227425[ebp]
	mov	DWORD PTR $T250430[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250429[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250409[ebp], cl
	mov	dl, BYTE PTR __Cat$250414[ebp]
	mov	BYTE PTR $T250410[ebp], dl
	mov	al, BYTE PTR $T250409[ebp]
	mov	BYTE PTR $T250406[ebp], al
	mov	cl, BYTE PTR $T250411[ebp]
	mov	BYTE PTR $T250405[ebp], cl
	mov	edx, DWORD PTR $T250430[ebp]
	mov	DWORD PTR $T250404[ebp], edx
	mov	eax, DWORD PTR $T250429[ebp]
	mov	DWORD PTR $T250403[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250419[ebp], cl
	mov	dl, BYTE PTR __Cat$250423[ebp]
	mov	BYTE PTR $T250420[ebp], dl
	mov	al, BYTE PTR $T250419[ebp]
	mov	BYTE PTR $T250391[ebp], al
	mov	ecx, DWORD PTR $T250404[ebp]
	mov	DWORD PTR $T250390[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	mov	eax, DWORD PTR __Oldend$227425[ebp]
	sub	eax, edx
	mov	DWORD PTR $T250389[ebp], eax
	mov	ecx, DWORD PTR $T250403[ebp]
	mov	DWORD PTR $T250388[ebp], ecx
$LN197@Insert_n@2:
	mov	edx, DWORD PTR $T250388[ebp]
	cmp	edx, DWORD PTR $T250389[ebp]
	je	SHORT $LN186@Insert_n@2
	mov	eax, DWORD PTR $T250389[ebp]
	sub	eax, 20					; 00000014H
	mov	DWORD PTR $T250389[ebp], eax
	mov	ecx, DWORD PTR $T250390[ebp]
	sub	ecx, 20					; 00000014H
	mov	DWORD PTR $T250390[ebp], ecx
	mov	edx, DWORD PTR $T250389[ebp]
	mov	eax, DWORD PTR $T250390[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	jmp	SHORT $LN197@Insert_n@2
$LN186@Insert_n@2:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250438[ebp], eax
	jmp	SHORT $LN204@Insert_n@2
$LN203@Insert_n@2:
	mov	ecx, DWORD PTR $T250438[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T250438[ebp], ecx
$LN204@Insert_n@2:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T250438[ebp], edx
	je	SHORT $LN16@Insert_n@2
	mov	eax, DWORD PTR $T250438[ebp]
	mov	ecx, DWORD PTR __Tmp$227424[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$227424[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$227424[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$227424[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR __Tmp$227424[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	jmp	SHORT $LN203@Insert_n@2
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-460]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T250460 = -80						; size = 28
$T250459 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T250460[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T250459[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T250459[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T250460[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250459[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T250459[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T250459[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T250460[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T250460[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T250459[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
PUBLIC	??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
PUBLIC	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
PUBLIC	??0IntrigueNotificationMessage@@QAE@ABU0@@Z	; IntrigueNotificationMessage::IntrigueNotificationMessage
PUBLIC	??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$24 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$2
__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$23 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$23
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$24
__unwindtable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$5
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
tv84 = -592						; size = 4
tv312 = -588						; size = 4
tv298 = -584						; size = 4
tv290 = -580						; size = 4
_this$ = -576						; size = 4
$T251366 = -572						; size = 4
$T251352 = -568						; size = 4
$T251296 = -524						; size = 4
$T251277 = -520						; size = 4
$T251260 = -513						; size = 1
$T251259 = -512						; size = 4
$T251249 = -508						; size = 4
$T251248 = -504						; size = 4
__Cat$251293 = -498					; size = 1
$T251290 = -497						; size = 1
$T251289 = -496						; size = 1
__Cat$251285 = -495					; size = 1
$T251282 = -494						; size = 1
$T251281 = -493						; size = 1
$T251213 = -488						; size = 4
$T251206 = -484						; size = 4
$T251198 = -480						; size = 4
$T251190 = -476						; size = 4
$T251165 = -472						; size = 4
$T251164 = -468						; size = 4
$T251141 = -464						; size = 4
$T251140 = -460						; size = 4
$T251092 = -456						; size = 4
__Cat$251172 = -450					; size = 1
$T251169 = -449						; size = 1
$T251074 = -448						; size = 4
$T251073 = -444						; size = 4
$T251063 = -440						; size = 4
__Cat$251070 = -435					; size = 1
$T251067 = -434						; size = 1
$T251066 = -433						; size = 1
$T251047 = -432						; size = 4
$T251035 = -428						; size = 4
$T251025 = -421						; size = 1
$T251024 = -420						; size = 4
__Cat$251042 = -415					; size = 1
$T251039 = -414						; size = 1
$T251038 = -413						; size = 1
$T251005 = -408						; size = 4
$T251004 = -404						; size = 4
$T251000 = -400						; size = 4
$T250999 = -396						; size = 4
$T250974 = -392						; size = 4
$T250973 = -388						; size = 4
$T250950 = -384						; size = 4
$T250949 = -380						; size = 4
$T250901 = -376						; size = 4
__Cat$250980 = -370					; size = 1
$T250977 = -369						; size = 1
$T250853 = -368						; size = 4
$T250852 = -364						; size = 4
$T250829 = -360						; size = 4
$T250828 = -356						; size = 4
$T250780 = -352						; size = 4
__Cat$250860 = -346					; size = 1
$T250858 = -345						; size = 1
$T250738 = -344						; size = 4
$T250737 = -340						; size = 4
$T250714 = -336						; size = 4
$T250713 = -332						; size = 4
$T250665 = -328						; size = 4
__Cat$250745 = -322					; size = 1
$T250743 = -321						; size = 1
$T250647 = -320						; size = 4
$T250635 = -316						; size = 4
$T250625 = -309						; size = 1
$T250624 = -308						; size = 4
__Cat$250643 = -303					; size = 1
$T250640 = -302						; size = 1
$T250639 = -301						; size = 1
$T250612 = -300						; size = 4
$T250600 = -296						; size = 4
$T250590 = -289						; size = 1
$T250589 = -288						; size = 4
__Cat$250608 = -283					; size = 1
$T250605 = -282						; size = 1
$T250604 = -281						; size = 1
$T250577 = -280						; size = 4
$T250567 = -276						; size = 4
__Cat$250573 = -271					; size = 1
$T250571 = -270						; size = 1
$T250570 = -269						; size = 1
__Count$250539 = -268					; size = 4
__Count$250513 = -196					; size = 4
__Tmp$227499 = -192					; size = 68
__Oldend$227500 = -116					; size = 4
__Tmp$227489 = -112					; size = 68
__$ArrayPad$ = -36					; size = 4
__Ncopied$227476 = -32					; size = 4
__Newvec$227474 = -28					; size = 4
__Whereoff$227475 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 576				; 00000240H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN31@Insert_n@3
	mov	DWORD PTR tv290[ebp], 0
	jmp	SHORT $LN29@Insert_n@3
$LN31@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR tv290[ebp], eax
$LN29@Insert_n@3:
	mov	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN16@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$250513[ebp], 63161283	; 03c3c3c3H
	cmp	DWORD PTR __Count$250513[ebp], 0
	jbe	SHORT $LN37@Insert_n@3
	mov	eax, DWORD PTR __Count$250513[ebp]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN39@Insert_n@3
$LN37@Insert_n@3:
	mov	DWORD PTR tv298[ebp], 1
$LN39@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	edx, DWORD PTR tv298[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN44@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
	jmp	$LN16@Insert_n@3

; 1167 : 		else if (_Capacity < size() + _Count)

$LN44@Insert_n@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$250539[ebp], 63161283	; 03c3c3c3H
	cmp	DWORD PTR __Count$250539[ebp], 0
	jbe	SHORT $LN50@Insert_n@3
	mov	edx, DWORD PTR __Count$250539[ebp]
	mov	DWORD PTR tv312[ebp], edx
	jmp	SHORT $LN46@Insert_n@3
$LN50@Insert_n@3:
	mov	DWORD PTR tv312[ebp], 1
$LN46@Insert_n@3:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv312[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@3:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN56@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN56@Insert_n@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>
	add	esp, 8
	mov	DWORD PTR __Newvec$227474[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR __Whereoff$227475[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$227476[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$227475[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250577[ebp], edx
	mov	eax, DWORD PTR $T250577[ebp]
	mov	DWORD PTR $T250567[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250570[ebp], cl
	mov	dl, BYTE PTR __Cat$250573[ebp]
	mov	BYTE PTR $T250571[ebp], dl
	movzx	eax, BYTE PTR $T250570[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T250571[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T250567[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227476[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227476[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T250612[ebp], edx
	mov	eax, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250600[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250604[ebp], cl
	mov	dl, BYTE PTR __Cat$250608[ebp]
	mov	BYTE PTR $T250605[ebp], dl
	mov	al, BYTE PTR $T250604[ebp]
	mov	BYTE PTR $T250590[ebp], al
	mov	ecx, DWORD PTR $T250600[ebp]
	mov	DWORD PTR $T250589[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T250589[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T250612[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227476[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227476[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250647[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227475[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 68					; 00000044H
	add	eax, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250635[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T250639[ebp], cl
	mov	dl, BYTE PTR __Cat$250643[ebp]
	mov	BYTE PTR $T250640[ebp], dl
	mov	al, BYTE PTR $T250639[ebp]
	mov	BYTE PTR $T250625[ebp], al
	mov	ecx, DWORD PTR $T250635[ebp]
	mov	DWORD PTR $T250624[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T250624[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250647[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@3
__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227476[ebp], 1
	jle	$LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$227475[ebp]
	imul	eax, 68					; 00000044H
	add	eax, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250738[ebp], eax
	mov	ecx, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250737[ebp], ecx
	mov	dl, BYTE PTR __Cat$250745[ebp]
	mov	BYTE PTR $T250743[ebp], dl
	mov	eax, DWORD PTR $T250738[ebp]
	mov	DWORD PTR $T250714[ebp], eax
	mov	ecx, DWORD PTR $T250737[ebp]
	mov	DWORD PTR $T250713[ebp], ecx
	jmp	SHORT $LN88@Insert_n@3
$LN87@Insert_n@3:
	mov	edx, DWORD PTR $T250713[ebp]
	add	edx, 68					; 00000044H
	mov	DWORD PTR $T250713[ebp], edx
$LN88@Insert_n@3:
	mov	eax, DWORD PTR $T250713[ebp]
	cmp	eax, DWORD PTR $T250714[ebp]
	je	SHORT $LN7@Insert_n@3
	mov	ecx, DWORD PTR $T250713[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T250665[ebp], ecx
	mov	ecx, DWORD PTR $T250665[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN91@Insert_n@3
	mov	eax, DWORD PTR $T250713[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN91@Insert_n@3:
	jmp	SHORT $LN87@Insert_n@3
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227476[ebp], 0
	jle	$LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR __Whereoff$227475[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Newvec$227474[ebp]
	add	edx, ecx
	mov	DWORD PTR $T250853[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227475[ebp]
	imul	eax, 68					; 00000044H
	add	eax, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR $T250852[ebp], eax
	mov	cl, BYTE PTR __Cat$250860[ebp]
	mov	BYTE PTR $T250858[ebp], cl
	mov	edx, DWORD PTR $T250853[ebp]
	mov	DWORD PTR $T250829[ebp], edx
	mov	eax, DWORD PTR $T250852[ebp]
	mov	DWORD PTR $T250828[ebp], eax
	jmp	SHORT $LN112@Insert_n@3
$LN111@Insert_n@3:
	mov	ecx, DWORD PTR $T250828[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T250828[ebp], ecx
$LN112@Insert_n@3:
	mov	edx, DWORD PTR $T250828[ebp]
	cmp	edx, DWORD PTR $T250829[ebp]
	je	SHORT $LN6@Insert_n@3
	mov	eax, DWORD PTR $T250828[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T250780[ebp], eax
	mov	ecx, DWORD PTR $T250780[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN115@Insert_n@3
	mov	edx, DWORD PTR $T250828[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN115@Insert_n@3:
	jmp	SHORT $LN111@Insert_n@3
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$227474[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN130@Insert_n@3
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN130@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251000[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250999[ebp], eax
	mov	ecx, DWORD PTR $T251000[ebp]
	mov	DWORD PTR $T250974[ebp], ecx
	mov	edx, DWORD PTR $T250999[ebp]
	mov	DWORD PTR $T250973[ebp], edx
	mov	al, BYTE PTR __Cat$250980[ebp]
	mov	BYTE PTR $T250977[ebp], al
	mov	ecx, DWORD PTR $T250974[ebp]
	mov	DWORD PTR $T250950[ebp], ecx
	mov	edx, DWORD PTR $T250973[ebp]
	mov	DWORD PTR $T250949[ebp], edx
	jmp	SHORT $LN140@Insert_n@3
$LN139@Insert_n@3:
	mov	eax, DWORD PTR $T250949[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR $T250949[ebp], eax
$LN140@Insert_n@3:
	mov	ecx, DWORD PTR $T250949[ebp]
	cmp	ecx, DWORD PTR $T250950[ebp]
	je	SHORT $LN132@Insert_n@3
	mov	edx, DWORD PTR $T250949[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T250901[ebp], edx
	mov	ecx, DWORD PTR $T250901[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN143@Insert_n@3
	mov	ecx, DWORD PTR $T250949[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN143@Insert_n@3:
	jmp	SHORT $LN139@Insert_n@3
$LN132@Insert_n@3:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR $T251005[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T251004[ebp], eax
	mov	ecx, DWORD PTR $T251004[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Newvec$227474[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 68					; 00000044H
	add	ecx, DWORD PTR __Newvec$227474[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$227474[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$227489[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251047[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251035[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T251038[ebp], al
	mov	cl, BYTE PTR __Cat$251042[ebp]
	mov	BYTE PTR $T251039[ebp], cl
	mov	dl, BYTE PTR $T251038[ebp]
	mov	BYTE PTR $T251025[ebp], dl
	mov	eax, DWORD PTR $T251035[ebp]
	mov	DWORD PTR $T251024[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T251024[ebp]
	push	edx
	mov	eax, DWORD PTR $T251047[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
	add	esp, 16					; 00000010H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T251074[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251073[ebp], ecx
	mov	edx, DWORD PTR $T251073[ebp]
	mov	DWORD PTR $T251063[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T251066[ebp], al
	mov	cl, BYTE PTR __Cat$251070[ebp]
	mov	BYTE PTR $T251067[ebp], cl
	movzx	edx, BYTE PTR $T251066[ebp]
	push	edx
	movzx	eax, BYTE PTR $T251067[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$227489[ebp]
	push	edx
	mov	eax, DWORD PTR $T251074[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251063[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H
	jmp	$LN21@Insert_n@3
__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251190[ebp], edx
	mov	ecx, DWORD PTR $T251190[ebp]
	mov	DWORD PTR $T251165[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251164[ebp], edx
	mov	al, BYTE PTR __Cat$251172[ebp]
	mov	BYTE PTR $T251169[ebp], al
	mov	ecx, DWORD PTR $T251165[ebp]
	mov	DWORD PTR $T251141[ebp], ecx
	mov	edx, DWORD PTR $T251164[ebp]
	mov	DWORD PTR $T251140[ebp], edx
	jmp	SHORT $LN186@Insert_n@3
$LN185@Insert_n@3:
	mov	eax, DWORD PTR $T251140[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR $T251140[ebp], eax
$LN186@Insert_n@3:
	mov	ecx, DWORD PTR $T251140[ebp]
	cmp	ecx, DWORD PTR $T251141[ebp]
	je	SHORT $LN178@Insert_n@3
	mov	edx, DWORD PTR $T251140[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T251092[ebp], edx
	mov	ecx, DWORD PTR $T251092[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN189@Insert_n@3
	mov	ecx, DWORD PTR $T251140[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN189@Insert_n@3:
	jmp	SHORT $LN185@Insert_n@3
$LN178@Insert_n@3:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	mov	eax, __tryend$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], 2
__tryend$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T251206[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251198[ebp], edx
	jmp	SHORT $LN206@Insert_n@3
$LN205@Insert_n@3:
	mov	eax, DWORD PTR $T251198[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR $T251198[ebp], eax
$LN206@Insert_n@3:
	mov	ecx, DWORD PTR $T251198[ebp]
	cmp	ecx, DWORD PTR $T251206[ebp]
	je	SHORT $LN202@Insert_n@3
	lea	edx, DWORD PTR __Tmp$227489[ebp]
	push	edx
	mov	ecx, DWORD PTR $T251198[ebp]
	call	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN205@Insert_n@3
$LN202@Insert_n@3:

; 1232 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	eax, DWORD PTR __Tmp$227489[ebp+36]
	mov	DWORD PTR $T251213[ebp], eax
	mov	ecx, DWORD PTR $T251213[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1233 : 		else

	jmp	$LN16@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$227499[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 5

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Oldend$227500[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T251296[ebp], edx
	mov	eax, DWORD PTR $T251296[ebp]
	mov	DWORD PTR $T251277[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T251281[ebp], cl
	mov	dl, BYTE PTR __Cat$251285[ebp]
	mov	BYTE PTR $T251282[ebp], dl
	mov	al, BYTE PTR $T251281[ebp]
	mov	BYTE PTR $T251260[ebp], al
	mov	ecx, DWORD PTR $T251277[ebp]
	mov	DWORD PTR $T251259[ebp], ecx
	mov	edx, DWORD PTR $T251259[ebp]
	mov	DWORD PTR $T251249[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR __Oldend$227500[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T251248[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T251289[ebp], dl
	mov	al, BYTE PTR __Cat$251293[ebp]
	mov	BYTE PTR $T251290[ebp], al
	movzx	ecx, BYTE PTR $T251289[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T251290[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251249[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$227500[ebp]
	push	edx
	mov	eax, DWORD PTR $T251248[ebp]
	push	eax
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$227500[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 68					; 00000044H
	mov	ecx, DWORD PTR __Oldend$227500[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251352[ebp], eax
	jmp	SHORT $LN251@Insert_n@3
$LN250@Insert_n@3:
	mov	ecx, DWORD PTR $T251352[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR $T251352[ebp], ecx
$LN251@Insert_n@3:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T251352[ebp], edx
	je	SHORT $LN247@Insert_n@3
	lea	eax, DWORD PTR __Tmp$227499[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251352[ebp]
	call	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN250@Insert_n@3
$LN247@Insert_n@3:

; 1249 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Tmp$227499[ebp+36]
	mov	DWORD PTR $T251366[ebp], ecx
	mov	ecx, DWORD PTR $T251366[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@Insert_n@3:

; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$227489[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$227499[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T251385 = -80						; size = 28
$T251384 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T251385[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T251384[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T251384[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T251385[ebp]
	push	eax
	lea	ecx, DWORD PTR $T251384[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T251384[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T251384[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T251385[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T251385[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T251384[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
PUBLIC	??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>
PUBLIC	?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill
PUBLIC	??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
PUBLIC	??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$2
__catchsym$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$0
__unwindtable$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T251957 = -412						; size = 4
$T251905 = -368						; size = 4
$T251893 = -364						; size = 4
$T251883 = -357						; size = 1
$T251882 = -356						; size = 4
__Cat$251901 = -327					; size = 1
$T251899 = -326						; size = 1
$T251898 = -325						; size = 1
$T251854 = -324						; size = 4
$T251846 = -320						; size = 4
$T251838 = -316						; size = 4
$T251827 = -312						; size = 4
$T251826 = -308						; size = 4
__Cat$251834 = -302					; size = 1
$T251832 = -301						; size = 1
$T251755 = -276						; size = 4
$T251736 = -272						; size = 4
$T251719 = -265						; size = 1
$T251718 = -264						; size = 4
$T251708 = -260						; size = 4
$T251707 = -256						; size = 4
__Cat$251752 = -250					; size = 1
$T251750 = -249						; size = 1
$T251749 = -248						; size = 1
__Cat$251744 = -247					; size = 1
$T251741 = -246						; size = 1
$T251740 = -245						; size = 1
$T251683 = -244						; size = 4
$T251682 = -240						; size = 4
$T251678 = -236						; size = 4
$T251677 = -232						; size = 4
$T251666 = -228						; size = 4
$T251665 = -224						; size = 4
__Cat$251673 = -218					; size = 1
$T251671 = -217						; size = 1
$T251630 = -216						; size = 4
$T251629 = -212						; size = 4
__Cat$251637 = -206					; size = 1
$T251635 = -205						; size = 1
$T251600 = -204						; size = 4
$T251599 = -200						; size = 4
__Cat$251608 = -194					; size = 1
$T251605 = -193						; size = 1
$T251580 = -192						; size = 4
$T251568 = -188						; size = 4
$T251558 = -181						; size = 1
$T251557 = -180						; size = 4
__Cat$251576 = -175					; size = 1
$T251573 = -174						; size = 1
$T251572 = -173						; size = 1
$T251545 = -172						; size = 4
$T251533 = -168						; size = 4
$T251523 = -161						; size = 1
$T251522 = -160						; size = 4
__Cat$251541 = -155					; size = 1
$T251538 = -154						; size = 1
$T251537 = -153						; size = 1
$T251510 = -152						; size = 4
$T251498 = -148						; size = 4
$T251488 = -141						; size = 1
$T251487 = -140						; size = 4
__Cat$251505 = -135					; size = 1
$T251502 = -134						; size = 1
$T251501 = -133						; size = 1
__Count$251461 = -120					; size = 4
__Count$251435 = -48					; size = 4
__Tmp$227582 = -44					; size = 4
__Oldend$227583 = -40					; size = 4
__Tmp$227572 = -36					; size = 4
__Ncopied$227559 = -32					; size = 4
__Newvec$227557 = -28					; size = 4
__Whereoff$227558 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@4
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@4
$LN29@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@4:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$251435[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$251435[ebp], 0
	jbe	SHORT $LN35@Insert_n@4
	mov	edx, DWORD PTR __Count$251435[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@4
$LN35@Insert_n@4:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
	jmp	$LN16@Insert_n@4

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$251461[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$251461[ebp], 0
	jbe	SHORT $LN48@Insert_n@4
	mov	ecx, DWORD PTR __Count$251461[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@4
$LN48@Insert_n@4:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@4:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@4:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
	add	esp, 8
	mov	DWORD PTR __Newvec$227557[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$227558[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$227559[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$227558[ebp]
	mov	ecx, DWORD PTR __Newvec$227557[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T251510[ebp], edx
	mov	eax, DWORD PTR $T251510[ebp]
	mov	DWORD PTR $T251498[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T251501[ebp], cl
	mov	dl, BYTE PTR __Cat$251505[ebp]
	mov	BYTE PTR $T251502[ebp], dl
	mov	al, BYTE PTR $T251501[ebp]
	mov	BYTE PTR $T251488[ebp], al
	mov	ecx, DWORD PTR $T251498[ebp]
	mov	DWORD PTR $T251487[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251487[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$227559[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$227559[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T251545[ebp], ecx
	mov	edx, DWORD PTR __Newvec$227557[ebp]
	mov	DWORD PTR $T251533[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T251537[ebp], al
	mov	cl, BYTE PTR __Cat$251541[ebp]
	mov	BYTE PTR $T251538[ebp], cl
	mov	dl, BYTE PTR $T251537[ebp]
	mov	BYTE PTR $T251523[ebp], dl
	mov	eax, DWORD PTR $T251533[ebp]
	mov	DWORD PTR $T251522[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T251522[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251545[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$227559[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$227559[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251580[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$227558[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$227557[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T251568[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T251572[ebp], dl
	mov	al, BYTE PTR __Cat$251576[ebp]
	mov	BYTE PTR $T251573[ebp], al
	mov	cl, BYTE PTR $T251572[ebp]
	mov	BYTE PTR $T251558[ebp], cl
	mov	edx, DWORD PTR $T251568[ebp]
	mov	DWORD PTR $T251557[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251557[ebp]
	push	ecx
	mov	edx, DWORD PTR $T251580[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@4
__catch$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227559[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$227558[ebp]
	mov	edx, DWORD PTR __Newvec$227557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T251600[ebp], eax
	mov	ecx, DWORD PTR __Newvec$227557[ebp]
	mov	DWORD PTR $T251599[ebp], ecx
	mov	dl, BYTE PTR __Cat$251608[ebp]
	mov	BYTE PTR $T251605[ebp], dl
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227559[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$227558[ebp]
	mov	ecx, DWORD PTR __Newvec$227557[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T251630[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$227558[ebp]
	mov	eax, DWORD PTR __Newvec$227557[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T251629[ebp], ecx
	mov	dl, BYTE PTR __Cat$251637[ebp]
	mov	BYTE PTR $T251635[ebp], dl
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$227557[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@4
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T251678[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T251677[ebp], edx
	mov	eax, DWORD PTR $T251678[ebp]
	mov	DWORD PTR $T251666[ebp], eax
	mov	ecx, DWORD PTR $T251677[ebp]
	mov	DWORD PTR $T251665[ebp], ecx
	mov	dl, BYTE PTR __Cat$251673[ebp]
	mov	BYTE PTR $T251671[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T251683[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T251682[ebp], ecx
	mov	edx, DWORD PTR $T251682[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$227557[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$227557[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$227557[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$227572[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T251755[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T251736[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T251740[ebp], cl
	mov	dl, BYTE PTR __Cat$251744[ebp]
	mov	BYTE PTR $T251741[ebp], dl
	mov	al, BYTE PTR $T251740[ebp]
	mov	BYTE PTR $T251719[ebp], al
	mov	ecx, DWORD PTR $T251736[ebp]
	mov	DWORD PTR $T251718[ebp], ecx
	mov	edx, DWORD PTR $T251718[ebp]
	mov	DWORD PTR $T251708[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251707[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T251749[ebp], cl
	mov	dl, BYTE PTR __Cat$251752[ebp]
	mov	BYTE PTR $T251750[ebp], dl
	movzx	eax, BYTE PTR $T251749[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T251750[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T251708[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251755[ebp]
	push	ecx
	mov	edx, DWORD PTR $T251707[ebp]
	push	edx
	call	??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$227572[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T251838[ebp], eax
	mov	ecx, DWORD PTR $T251838[ebp]
	mov	DWORD PTR $T251827[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T251826[ebp], ecx
	mov	dl, BYTE PTR __Cat$251834[ebp]
	mov	BYTE PTR $T251832[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T251854[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251846[ebp], edx
	jmp	SHORT $LN151@Insert_n@4
$LN150@Insert_n@4:
	mov	eax, DWORD PTR $T251846[ebp]
	add	eax, 4
	mov	DWORD PTR $T251846[ebp], eax
$LN151@Insert_n@4:
	mov	ecx, DWORD PTR $T251846[ebp]
	cmp	ecx, DWORD PTR $T251854[ebp]
	je	SHORT $LN147@Insert_n@4
	mov	edx, DWORD PTR $T251846[ebp]
	mov	eax, DWORD PTR __Tmp$227572[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@4
$LN147@Insert_n@4:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$227582[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$227583[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T251905[ebp], eax
	mov	ecx, DWORD PTR $T251905[ebp]
	mov	DWORD PTR $T251893[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T251898[ebp], dl
	mov	al, BYTE PTR __Cat$251901[ebp]
	mov	BYTE PTR $T251899[ebp], al
	mov	cl, BYTE PTR $T251898[ebp]
	mov	BYTE PTR $T251883[ebp], cl
	mov	edx, DWORD PTR $T251893[ebp]
	mov	DWORD PTR $T251882[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251882[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$227583[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$227583[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$227583[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$227583[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T251957[ebp], ecx
	jmp	SHORT $LN186@Insert_n@4
$LN185@Insert_n@4:
	mov	edx, DWORD PTR $T251957[ebp]
	add	edx, 4
	mov	DWORD PTR $T251957[ebp], edx
$LN186@Insert_n@4:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T251957[ebp], edx
	je	SHORT $LN16@Insert_n@4
	mov	eax, DWORD PTR $T251957[ebp]
	mov	ecx, DWORD PTR __Tmp$227582[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@4
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T252028 = -40						; size = 4
$T252018 = -33						; size = 1
$T252017 = -32						; size = 4
__Cat$252024 = -3					; size = 1
$T252021 = -2						; size = 1
$T252020 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T252028[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252020[ebp], cl
	mov	dl, BYTE PTR __Cat$252024[ebp]
	mov	BYTE PTR $T252021[ebp], dl
	mov	al, BYTE PTR $T252020[ebp]
	mov	BYTE PTR $T252018[ebp], al
	mov	ecx, DWORD PTR $T252028[ebp]
	mov	DWORD PTR $T252017[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252017[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T252032 = -80						; size = 28
$T252031 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T252032[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T252031[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T252031[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T252032[ebp]
	push	eax
	lea	ecx, DWORD PTR $T252031[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T252031[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T252031[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T252032[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T252032[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T252031[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
PUBLIC	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
PUBLIC	??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$2
__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$0
__unwindtable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv304 = -428						; size = 4
tv290 = -424						; size = 4
tv282 = -420						; size = 4
_this$ = -416						; size = 4
$T252734 = -412						; size = 4
$T252726 = -408						; size = 4
$T252725 = -404						; size = 4
$T252702 = -398						; size = 1
$T252701 = -397						; size = 1
$T252700 = -396						; size = 4
$T252699 = -392						; size = 4
$T252687 = -385						; size = 1
$T252686 = -384						; size = 4
$T252685 = -380						; size = 4
$T252684 = -376						; size = 4
__Cat$252719 = -372					; size = 1
$T252717 = -371						; size = 1
$T252716 = -370						; size = 1
__Cat$252709 = -368					; size = 1
$T252707 = -367						; size = 1
$T252706 = -366						; size = 1
$T252705 = -365						; size = 1
$T252659 = -364						; size = 4
$T252640 = -360						; size = 4
$T252623 = -353						; size = 1
$T252622 = -352						; size = 4
$T252612 = -348						; size = 4
$T252611 = -344						; size = 4
__Cat$252656 = -338					; size = 1
$T252653 = -337						; size = 1
$T252652 = -336						; size = 1
__Cat$252647 = -335					; size = 1
$T252645 = -334						; size = 1
$T252644 = -333						; size = 1
$T252587 = -332						; size = 4
$T252579 = -328						; size = 4
$T252571 = -324						; size = 4
$T252553 = -320						; size = 4
$T252552 = -316						; size = 4
$T252536 = -312						; size = 4
__Cat$252561 = -306					; size = 1
$T252558 = -305						; size = 1
$T252510 = -304						; size = 4
$T252509 = -300						; size = 4
$T252499 = -296						; size = 4
__Cat$252506 = -291					; size = 1
$T252503 = -290						; size = 1
$T252502 = -289						; size = 1
$T252483 = -288						; size = 4
$T252464 = -284						; size = 4
$T252447 = -277						; size = 1
$T252446 = -276						; size = 4
$T252436 = -272						; size = 4
$T252435 = -268						; size = 4
__Cat$252480 = -262					; size = 1
$T252477 = -261						; size = 1
$T252476 = -260						; size = 1
__Cat$252471 = -259					; size = 1
$T252469 = -258						; size = 1
$T252468 = -257						; size = 1
$T252411 = -256						; size = 4
$T252410 = -252						; size = 4
$T252406 = -248						; size = 4
$T252405 = -244						; size = 4
$T252387 = -240						; size = 4
$T252386 = -236						; size = 4
$T252370 = -232						; size = 4
__Cat$252395 = -226					; size = 1
$T252392 = -225						; size = 1
$T252321 = -224						; size = 4
$T252320 = -220						; size = 4
$T252304 = -216						; size = 4
__Cat$252328 = -210					; size = 1
$T252325 = -209						; size = 1
$T252261 = -208						; size = 4
$T252260 = -204						; size = 4
$T252244 = -200						; size = 4
__Cat$252268 = -194					; size = 1
$T252265 = -193						; size = 1
$T252218 = -192						; size = 4
$T252206 = -188						; size = 4
$T252196 = -181						; size = 1
$T252195 = -180						; size = 4
__Cat$252212 = -175					; size = 1
$T252210 = -174						; size = 1
$T252209 = -173						; size = 1
$T252183 = -172						; size = 4
$T252171 = -168						; size = 4
$T252161 = -161						; size = 1
$T252160 = -160						; size = 4
__Cat$252177 = -155					; size = 1
$T252175 = -154						; size = 1
$T252174 = -153						; size = 1
$T252148 = -152						; size = 4
$T252138 = -148						; size = 4
__Cat$252145 = -143					; size = 1
$T252142 = -142						; size = 1
$T252141 = -141						; size = 1
__Count$252110 = -128					; size = 4
__Count$252084 = -56					; size = 4
__Tmp$227653 = -52					; size = 8
__Oldend$227654 = -44					; size = 4
__Tmp$227643 = -40					; size = 8
__Ncopied$227630 = -32					; size = 4
__Newvec$227628 = -28					; size = 4
__Whereoff$227629 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@5
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@5
$LN29@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@5:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@5
	jmp	$LN16@Insert_n@5
$LN14@Insert_n@5:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$252084[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$252084[ebp], 0
	jbe	SHORT $LN35@Insert_n@5
	mov	edx, DWORD PTR __Count$252084[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n@5
$LN35@Insert_n@5:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
	jmp	$LN16@Insert_n@5

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$252110[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$252110[ebp], 0
	jbe	SHORT $LN48@Insert_n@5
	mov	ecx, DWORD PTR __Count$252110[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n@5
$LN48@Insert_n@5:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@5:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@5:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@5:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
	add	esp, 8
	mov	DWORD PTR __Newvec$227628[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR __Whereoff$227629[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$227630[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$227629[ebp]
	mov	ecx, DWORD PTR __Newvec$227628[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T252148[ebp], edx
	mov	eax, DWORD PTR $T252148[ebp]
	mov	DWORD PTR $T252138[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252141[ebp], cl
	mov	dl, BYTE PTR __Cat$252145[ebp]
	mov	BYTE PTR $T252142[ebp], dl
	movzx	eax, BYTE PTR $T252141[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T252142[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252138[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227630[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227630[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T252183[ebp], edx
	mov	eax, DWORD PTR __Newvec$227628[ebp]
	mov	DWORD PTR $T252171[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T252174[ebp], cl
	mov	dl, BYTE PTR __Cat$252177[ebp]
	mov	BYTE PTR $T252175[ebp], dl
	mov	al, BYTE PTR $T252174[ebp]
	mov	BYTE PTR $T252161[ebp], al
	mov	ecx, DWORD PTR $T252171[ebp]
	mov	DWORD PTR $T252160[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T252160[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252183[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$227630[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$227630[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252218[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227629[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$227628[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T252206[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252209[ebp], al
	mov	cl, BYTE PTR __Cat$252212[ebp]
	mov	BYTE PTR $T252210[ebp], cl
	mov	dl, BYTE PTR $T252209[ebp]
	mov	BYTE PTR $T252196[ebp], dl
	mov	eax, DWORD PTR $T252206[ebp]
	mov	DWORD PTR $T252195[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252195[ebp]
	push	edx
	mov	eax, DWORD PTR $T252218[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@5
__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227630[ebp], 1
	jle	SHORT $LN7@Insert_n@5

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$227629[ebp]
	mov	eax, DWORD PTR __Newvec$227628[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T252261[ebp], ecx
	mov	edx, DWORD PTR __Newvec$227628[ebp]
	mov	DWORD PTR $T252260[ebp], edx
	mov	al, BYTE PTR __Cat$252268[ebp]
	mov	BYTE PTR $T252265[ebp], al
	mov	ecx, DWORD PTR $T252260[ebp]
	mov	DWORD PTR $T252244[ebp], ecx
	jmp	SHORT $LN91@Insert_n@5
$LN90@Insert_n@5:
	mov	edx, DWORD PTR $T252244[ebp]
	add	edx, 8
	mov	DWORD PTR $T252244[ebp], edx
$LN91@Insert_n@5:
	mov	eax, DWORD PTR $T252244[ebp]
	cmp	eax, DWORD PTR $T252261[ebp]
	je	SHORT $LN7@Insert_n@5
	jmp	SHORT $LN90@Insert_n@5
$LN7@Insert_n@5:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$227630[ebp], 0
	jle	SHORT $LN6@Insert_n@5

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$227629[ebp]
	mov	edx, DWORD PTR __Newvec$227628[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T252321[ebp], edx
	mov	eax, DWORD PTR __Whereoff$227629[ebp]
	mov	ecx, DWORD PTR __Newvec$227628[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T252320[ebp], edx
	mov	al, BYTE PTR __Cat$252328[ebp]
	mov	BYTE PTR $T252325[ebp], al
	mov	ecx, DWORD PTR $T252320[ebp]
	mov	DWORD PTR $T252304[ebp], ecx
	jmp	SHORT $LN106@Insert_n@5
$LN105@Insert_n@5:
	mov	edx, DWORD PTR $T252304[ebp]
	add	edx, 8
	mov	DWORD PTR $T252304[ebp], edx
$LN106@Insert_n@5:
	mov	eax, DWORD PTR $T252304[ebp]
	cmp	eax, DWORD PTR $T252321[ebp]
	je	SHORT $LN6@Insert_n@5
	jmp	SHORT $LN105@Insert_n@5
$LN6@Insert_n@5:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$227628[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@5
	ret	0
$LN19@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252406[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252405[ebp], eax
	mov	ecx, DWORD PTR $T252406[ebp]
	mov	DWORD PTR $T252387[ebp], ecx
	mov	edx, DWORD PTR $T252405[ebp]
	mov	DWORD PTR $T252386[ebp], edx
	mov	al, BYTE PTR __Cat$252395[ebp]
	mov	BYTE PTR $T252392[ebp], al
	mov	ecx, DWORD PTR $T252386[ebp]
	mov	DWORD PTR $T252370[ebp], ecx
	jmp	SHORT $LN125@Insert_n@5
$LN124@Insert_n@5:
	mov	edx, DWORD PTR $T252370[ebp]
	add	edx, 8
	mov	DWORD PTR $T252370[ebp], edx
$LN125@Insert_n@5:
	mov	eax, DWORD PTR $T252370[ebp]
	cmp	eax, DWORD PTR $T252387[ebp]
	je	SHORT $LN117@Insert_n@5
	jmp	SHORT $LN124@Insert_n@5
$LN117@Insert_n@5:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR $T252411[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T252410[ebp], edx
	mov	eax, DWORD PTR $T252410[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$227628[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$227628[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$227628[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@5
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$227643[ebp], edx
	mov	DWORD PTR __Tmp$227643[ebp+4], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252483[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T252464[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252468[ebp], al
	mov	cl, BYTE PTR __Cat$252471[ebp]
	mov	BYTE PTR $T252469[ebp], cl
	mov	dl, BYTE PTR $T252468[ebp]
	mov	BYTE PTR $T252447[ebp], dl
	mov	eax, DWORD PTR $T252464[ebp]
	mov	DWORD PTR $T252446[ebp], eax
	mov	ecx, DWORD PTR $T252446[ebp]
	mov	DWORD PTR $T252436[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T252435[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252476[ebp], al
	mov	cl, BYTE PTR __Cat$252480[ebp]
	mov	BYTE PTR $T252477[ebp], cl
	movzx	edx, BYTE PTR $T252476[ebp]
	push	edx
	movzx	eax, BYTE PTR $T252477[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252436[ebp]
	push	edx
	mov	eax, DWORD PTR $T252483[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252435[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T252510[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252509[ebp], eax
	mov	ecx, DWORD PTR $T252509[ebp]
	mov	DWORD PTR $T252499[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252502[ebp], dl
	mov	al, BYTE PTR __Cat$252506[ebp]
	mov	BYTE PTR $T252503[ebp], al
	movzx	ecx, BYTE PTR $T252502[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T252503[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$227643[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252510[ebp]
	push	edx
	mov	eax, DWORD PTR $T252499[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@5
__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR $T252571[ebp], ecx
	mov	edx, DWORD PTR $T252571[ebp]
	mov	DWORD PTR $T252553[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T252552[ebp], edx
	mov	al, BYTE PTR __Cat$252561[ebp]
	mov	BYTE PTR $T252558[ebp], al
	mov	ecx, DWORD PTR $T252552[ebp]
	mov	DWORD PTR $T252536[ebp], ecx
	jmp	SHORT $LN160@Insert_n@5
$LN159@Insert_n@5:
	mov	edx, DWORD PTR $T252536[ebp]
	add	edx, 8
	mov	DWORD PTR $T252536[ebp], edx
$LN160@Insert_n@5:
	mov	eax, DWORD PTR $T252536[ebp]
	cmp	eax, DWORD PTR $T252553[ebp]
	je	SHORT $LN152@Insert_n@5
	jmp	SHORT $LN159@Insert_n@5
$LN152@Insert_n@5:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$3
	ret	0
$LN21@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T252587[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T252579[ebp], eax
	jmp	SHORT $LN171@Insert_n@5
$LN170@Insert_n@5:
	mov	ecx, DWORD PTR $T252579[ebp]
	add	ecx, 8
	mov	DWORD PTR $T252579[ebp], ecx
$LN171@Insert_n@5:
	mov	edx, DWORD PTR $T252579[ebp]
	cmp	edx, DWORD PTR $T252587[ebp]
	je	SHORT $LN167@Insert_n@5
	mov	eax, DWORD PTR __Tmp$227643[ebp]
	mov	ecx, DWORD PTR __Tmp$227643[ebp+4]
	mov	edx, DWORD PTR $T252579[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN170@Insert_n@5
$LN167@Insert_n@5:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@5
$LN3@Insert_n@5:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$227653[ebp], ecx
	mov	DWORD PTR __Tmp$227653[ebp+4], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$227654[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252659[ebp], eax
	mov	ecx, DWORD PTR $T252659[ebp]
	mov	DWORD PTR $T252640[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252644[ebp], dl
	mov	al, BYTE PTR __Cat$252647[ebp]
	mov	BYTE PTR $T252645[ebp], al
	mov	cl, BYTE PTR $T252644[ebp]
	mov	BYTE PTR $T252623[ebp], cl
	mov	edx, DWORD PTR $T252640[ebp]
	mov	DWORD PTR $T252622[ebp], edx
	mov	eax, DWORD PTR $T252622[ebp]
	mov	DWORD PTR $T252612[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$227654[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T252611[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T252652[ebp], al
	mov	cl, BYTE PTR __Cat$252656[ebp]
	mov	BYTE PTR $T252653[ebp], cl
	movzx	edx, BYTE PTR $T252652[ebp]
	push	edx
	movzx	eax, BYTE PTR $T252653[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252612[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$227654[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252611[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$227654[ebp]
	mov	DWORD PTR $T252726[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T252725[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252705[ebp], dl
	mov	al, BYTE PTR __Cat$252709[ebp]
	mov	BYTE PTR $T252706[ebp], al
	mov	cl, BYTE PTR $T252705[ebp]
	mov	BYTE PTR $T252702[ebp], cl
	mov	dl, BYTE PTR $T252707[ebp]
	mov	BYTE PTR $T252701[ebp], dl
	mov	eax, DWORD PTR $T252726[ebp]
	mov	DWORD PTR $T252700[ebp], eax
	mov	ecx, DWORD PTR $T252725[ebp]
	mov	DWORD PTR $T252699[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T252716[ebp], dl
	mov	al, BYTE PTR __Cat$252719[ebp]
	mov	BYTE PTR $T252717[ebp], al
	mov	cl, BYTE PTR $T252716[ebp]
	mov	BYTE PTR $T252687[ebp], cl
	mov	edx, DWORD PTR $T252700[ebp]
	mov	DWORD PTR $T252686[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$227654[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T252685[ebp], ecx
	mov	edx, DWORD PTR $T252699[ebp]
	mov	DWORD PTR $T252684[ebp], edx
$LN197@Insert_n@5:
	mov	eax, DWORD PTR $T252684[ebp]
	cmp	eax, DWORD PTR $T252685[ebp]
	je	SHORT $LN186@Insert_n@5
	mov	ecx, DWORD PTR $T252685[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T252685[ebp], ecx
	mov	edx, DWORD PTR $T252686[ebp]
	sub	edx, 8
	mov	DWORD PTR $T252686[ebp], edx
	mov	eax, DWORD PTR $T252685[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T252686[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN197@Insert_n@5
$LN186@Insert_n@5:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T252734[ebp], ecx
	jmp	SHORT $LN204@Insert_n@5
$LN203@Insert_n@5:
	mov	edx, DWORD PTR $T252734[ebp]
	add	edx, 8
	mov	DWORD PTR $T252734[ebp], edx
$LN204@Insert_n@5:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR $T252734[ebp], edx
	je	SHORT $LN16@Insert_n@5
	mov	eax, DWORD PTR __Tmp$227653[ebp]
	mov	ecx, DWORD PTR __Tmp$227653[ebp+4]
	mov	edx, DWORD PTR $T252734[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN203@Insert_n@5
$LN16@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T252756 = -80						; size = 28
$T252755 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T252756[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T252755[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T252755[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T252756[ebp]
	push	eax
	lea	ecx, DWORD PTR $T252755[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T252755[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T252755[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T252756[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T252756[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T252755[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ??0IntrigueNotificationMessage@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T252782 = -4						; size = 4
___that$ = 8						; size = 4
??0IntrigueNotificationMessage@@QAE@ABU0@@Z PROC	; IntrigueNotificationMessage::IntrigueNotificationMessage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T252782[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR $T252782[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [edx+64], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0IntrigueNotificationMessage@@QAE@ABU0@@Z ENDP	; IntrigueNotificationMessage::IntrigueNotificationMessage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1
__ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
_TEXT	SEGMENT
$T252789 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z PROC	; GetLocalizedText<char const *>, COMDAT

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T252789[ebp], 0

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 503  : 	text << arg1;

	lea	edx, DWORD PTR _arg1$[ebp]
	push	edx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 504  : 
; 505  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 507  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 508  : 	str.assign(szComposedString, bytes);

	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _szComposedString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 509  : 	return str;

	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T252789[ebp]
	or	edx, 1
	mov	DWORD PTR $T252789[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$2:
	mov	eax, DWORD PTR $T252789[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@2
	and	DWORD PTR $T252789[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ENDP	; GetLocalizedText<char const *>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$1
__ehfuncinfo$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
_TEXT	SEGMENT
$T252817 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z PROC ; GetLocalizedText<char const *,char const *,char const *>, COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T252817[ebp], 0

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg3$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8
	push	eax
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 530  : 
; 531  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 533  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 534  : 	str.assign(szComposedString, bytes);

	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szComposedString$[ebp]
	push	edx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 535  : 	return str;

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T252817[ebp]
	or	ecx, 1
	mov	DWORD PTR $T252817[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$2:
	mov	eax, DWORD PTR $T252817[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz@3
	and	DWORD PTR $T252817[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ENDP ; GetLocalizedText<char const *,char const *,char const *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z PROC ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 3570 : 	{	// sort preserving order of equivalents, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3571 : 	_DEBUG_RANGE(_First, _Last);
; 3572 : 	_DEBUG_POINTER(_Pred);
; 3573 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@stable_sor

; 3574 : 		{
; 3575 : 		_Stable_sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 3576 : 			_Dist_type(_First), _Val_type(_First), _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN2@stable_sor:

; 3577 : 		}
; 3578 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ENDP ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z
_TEXT	SEGMENT
$T253043 = -26						; size = 1
$T253042 = -25						; size = 1
$T253041 = -24						; size = 4
$T253040 = -20						; size = 4
__Off$253037 = -16					; size = 4
__Result$253038 = -12					; size = 4
__Cat$253029 = -4					; size = 1
$T253025 = -3						; size = 1
$T253024 = -2						; size = 1
$T253023 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCity * *,CvCity * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T253023[ebp], al
	mov	cl, BYTE PTR __Cat$253029[ebp]
	mov	BYTE PTR $T253024[ebp], cl
	mov	dl, BYTE PTR $T253023[ebp]
	mov	BYTE PTR $T253043[ebp], dl
	mov	al, BYTE PTR $T253025[ebp]
	mov	BYTE PTR $T253042[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T253041[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253040[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T253040[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$253037[ebp], eax
	mov	ecx, DWORD PTR __Off$253037[ebp]
	mov	edx, DWORD PTR $T253041[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$253038[ebp], eax
	cmp	DWORD PTR __Off$253037[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$253037[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T253040[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$253037[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T253041[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$253038[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCity * *,CvCity * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z
_TEXT	SEGMENT
$T253050 = -16						; size = 4
$T253046 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z PROC ; std::_Allocate<HeistLocation>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253050[ebp], 0
	lea	eax, DWORD PTR $T253050[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253046[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253046[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253046[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ENDP ; std::_Allocate<HeistLocation>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z
_TEXT	SEGMENT
$T253064 = -16						; size = 4
$T253060 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z PROC ; std::_Allocate<SpyNotificationMessage>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 20					; 00000014H
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253064[ebp], 0
	lea	eax, DWORD PTR $T253064[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253060[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253060[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253060[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ENDP ; std::_Allocate<SpyNotificationMessage>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z
_TEXT	SEGMENT
$T253113 = -38						; size = 1
$T253112 = -37						; size = 1
$T253111 = -36						; size = 4
$T253110 = -32						; size = 4
$T253098 = -25						; size = 1
$T253097 = -24						; size = 4
$T253096 = -20						; size = 4
$T253095 = -16						; size = 4
__Cat$253104 = -8					; size = 1
$T253101 = -7						; size = 1
$T253100 = -6						; size = 1
__Cat$253073 = -4					; size = 1
$T253069 = -3						; size = 1
$T253068 = -2						; size = 1
$T253067 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T253067[ebp], al
	mov	cl, BYTE PTR __Cat$253073[ebp]
	mov	BYTE PTR $T253068[ebp], cl
	mov	dl, BYTE PTR $T253067[ebp]
	mov	BYTE PTR $T253113[ebp], dl
	mov	al, BYTE PTR $T253069[ebp]
	mov	BYTE PTR $T253112[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T253111[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253110[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T253100[ebp], al
	mov	cl, BYTE PTR __Cat$253104[ebp]
	mov	BYTE PTR $T253101[ebp], cl
	mov	dl, BYTE PTR $T253100[ebp]
	mov	BYTE PTR $T253098[ebp], dl
	mov	eax, DWORD PTR $T253111[ebp]
	mov	DWORD PTR $T253097[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T253096[ebp], ecx
	mov	edx, DWORD PTR $T253110[ebp]
	mov	DWORD PTR $T253095[ebp], edx
$LN12@Unchecked_:
	mov	eax, DWORD PTR $T253095[ebp]
	cmp	eax, DWORD PTR $T253096[ebp]
	je	SHORT $LN7@Unchecked_
	mov	ecx, DWORD PTR $T253096[ebp]
	sub	ecx, 68					; 00000044H
	mov	DWORD PTR $T253096[ebp], ecx
	mov	edx, DWORD PTR $T253097[ebp]
	sub	edx, 68					; 00000044H
	mov	DWORD PTR $T253097[ebp], edx
	mov	eax, DWORD PTR $T253096[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253097[ebp]
	call	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN12@Unchecked_
$LN7@Unchecked_:
	mov	eax, DWORD PTR $T253097[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z
_TEXT	SEGMENT
$T253120 = -16						; size = 4
$T253116 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z PROC ; std::_Allocate<IntrigueNotificationMessage>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 68					; 00000044H
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253120[ebp], 0
	lea	eax, DWORD PTR $T253120[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253116[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253116[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253116[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 68					; 00000044H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ENDP ; std::_Allocate<IntrigueNotificationMessage>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z
_TEXT	SEGMENT
$T253165 = -38						; size = 1
$T253164 = -37						; size = 1
$T253163 = -36						; size = 4
$T253162 = -32						; size = 4
$T253149 = -25						; size = 1
$T253148 = -24						; size = 4
$T253147 = -20						; size = 4
__Off$253158 = -16					; size = 4
__Result$253159 = -12					; size = 4
__Cat$253155 = -8					; size = 1
$T253152 = -7						; size = 1
$T253151 = -6						; size = 1
__Cat$253129 = -4					; size = 1
$T253125 = -3						; size = 1
$T253124 = -2						; size = 1
$T253123 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z PROC ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T253123[ebp], al
	mov	cl, BYTE PTR __Cat$253129[ebp]
	mov	BYTE PTR $T253124[ebp], cl
	mov	dl, BYTE PTR $T253123[ebp]
	mov	BYTE PTR $T253165[ebp], dl
	mov	al, BYTE PTR $T253125[ebp]
	mov	BYTE PTR $T253164[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T253163[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253162[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T253151[ebp], al
	mov	cl, BYTE PTR __Cat$253155[ebp]
	mov	BYTE PTR $T253152[ebp], cl
	mov	dl, BYTE PTR $T253151[ebp]
	mov	BYTE PTR $T253149[ebp], dl
	mov	eax, DWORD PTR $T253163[ebp]
	mov	DWORD PTR $T253148[ebp], eax
	mov	ecx, DWORD PTR $T253162[ebp]
	mov	DWORD PTR $T253147[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T253147[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$253158[ebp], edx
	mov	eax, DWORD PTR __Off$253158[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T253148[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$253159[ebp], ecx
	cmp	DWORD PTR __Off$253158[ebp], 0
	jle	SHORT $LN7@Unchecked_@2
	mov	edx, DWORD PTR __Off$253158[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T253147[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$253158[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$253159[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_@2:
	mov	eax, DWORD PTR __Result$253159[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ENDP ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z
_TEXT	SEGMENT
$T253172 = -16						; size = 4
$T253168 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z PROC ; std::_Allocate<CvCity *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253172[ebp], 0
	lea	eax, DWORD PTR $T253172[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253168[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253168[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253168[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCity *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z
_TEXT	SEGMENT
$T253179 = -16						; size = 4
$T253175 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z PROC ; std::_Allocate<ScoreCityEntry>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253179[ebp], 0
	lea	eax, DWORD PTR $T253179[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253175[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253175[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253175[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ENDP ; std::_Allocate<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z$0
__ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T253337 = -120						; size = 4
__Next$253340 = -116					; size = 4
$T253222 = -56						; size = 4
$T253218 = -52						; size = 4
$T253205 = -48						; size = 4
$T253204 = -44						; size = 4
__Tempbuf$ = -36					; size = 20
__Count$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3560 : 	{	// sort preserving order of equivalents, using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3561 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 3562 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253218[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T253205[ebp], ecx
	mov	edx, DWORD PTR $T253218[ebp]
	mov	DWORD PTR $T253204[ebp], edx
	mov	eax, DWORD PTR $T253205[ebp]
	sub	eax, DWORD PTR $T253204[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 3563 : 	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR $T253222[ebp], eax
	mov	DWORD PTR __Tempbuf$[ebp], 0
	mov	DWORD PTR __Tempbuf$[ebp+4], 0
	mov	DWORD PTR __Tempbuf$[ebp+8], 0
	mov	ecx, DWORD PTR $T253222[ebp]
	mov	DWORD PTR __Tempbuf$[ebp+12], ecx
	lea	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR __Tempbuf$[ebp+16], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3564 : 	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H

; 3565 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Tempbuf$[ebp], 0
	je	SHORT $LN1@Stable_sor
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR __Next$253340[ebp], edx
	jmp	SHORT $LN74@Stable_sor
$LN73@Stable_sor:
	mov	eax, DWORD PTR __Next$253340[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$253340[ebp], eax
$LN74@Stable_sor:
	mov	ecx, DWORD PTR __Next$253340[ebp]
	cmp	ecx, DWORD PTR __Tempbuf$[ebp+8]
	je	SHORT $LN72@Stable_sor
	jmp	SHORT $LN73@Stable_sor
$LN72@Stable_sor:
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR $T253337[ebp], edx
	mov	eax, DWORD PTR $T253337[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Stable_sor:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z$0:
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z$0
__ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T253512 = -120						; size = 4
__Next$253515 = -116					; size = 4
$T253397 = -56						; size = 4
$T253393 = -52						; size = 4
$T253380 = -48						; size = 4
$T253379 = -44						; size = 4
__Tempbuf$ = -36					; size = 20
__Count$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3560 : 	{	// sort preserving order of equivalents, using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3561 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 3562 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253393[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T253380[ebp], ecx
	mov	edx, DWORD PTR $T253393[ebp]
	mov	DWORD PTR $T253379[ebp], edx
	mov	eax, DWORD PTR $T253380[ebp]
	sub	eax, DWORD PTR $T253379[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 3563 : 	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR $T253397[ebp], eax
	mov	DWORD PTR __Tempbuf$[ebp], 0
	mov	DWORD PTR __Tempbuf$[ebp+4], 0
	mov	DWORD PTR __Tempbuf$[ebp+8], 0
	mov	ecx, DWORD PTR $T253397[ebp]
	mov	DWORD PTR __Tempbuf$[ebp+12], ecx
	lea	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR __Tempbuf$[ebp+16], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3564 : 	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H

; 3565 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Tempbuf$[ebp], 0
	je	SHORT $LN1@Stable_sor@2
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR __Next$253515[ebp], edx
	jmp	SHORT $LN74@Stable_sor@2
$LN73@Stable_sor@2:
	mov	eax, DWORD PTR __Next$253515[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$253515[ebp], eax
$LN74@Stable_sor@2:
	mov	ecx, DWORD PTR __Next$253515[ebp]
	cmp	ecx, DWORD PTR __Tempbuf$[ebp+8]
	je	SHORT $LN72@Stable_sor@2
	jmp	SHORT $LN73@Stable_sor@2
$LN72@Stable_sor@2:
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	DWORD PTR $T253512[ebp], edx
	mov	eax, DWORD PTR $T253512[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Stable_sor@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z$0:
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T253557 = -28						; size = 4
__Vptr$253555 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$253555[ebp], eax
	mov	ecx, DWORD PTR __Vptr$253555[ebp]
	mov	DWORD PTR $T253557[ebp], ecx
	cmp	DWORD PTR $T253557[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T253557[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T253557[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil:
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T253606 = -28						; size = 4
__Vptr$253604 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$253604[ebp], eax
	mov	ecx, DWORD PTR __Vptr$253604[ebp]
	mov	DWORD PTR $T253606[ebp], ecx
	cmp	DWORD PTR $T253606[ebp], 0
	je	SHORT $LN18@Uninit_fil@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T253606[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR $T253606[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@2
$LN18@Uninit_fil@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@2:
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@2:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -48						; size = 4
tv68 = -44						; size = 4
$T253680 = -40						; size = 4
$T253666 = -32						; size = 4
$T253665 = -28						; size = 4
__Vptr$253663 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 68					; 00000044H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$253663[ebp], eax
	mov	ecx, DWORD PTR __Vptr$253663[ebp]
	mov	DWORD PTR $T253666[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T253666[ebp], 0
	je	SHORT $LN18@Uninit_fil@3
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T253666[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN19@Uninit_fil@3
$LN18@Uninit_fil@3:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_fil@3:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T253665[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 68					; 00000044H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@3:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T253680[ebp], ecx
	mov	ecx, DWORD PTR $T253680[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN29@Uninit_fil@3
	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN29@Uninit_fil@3:
	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$253663[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253666[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T253748 = -28						; size = 4
__Vptr$253746 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$253746[ebp], eax
	mov	ecx, DWORD PTR __Vptr$253746[ebp]
	mov	DWORD PTR $T253748[ebp], ecx
	cmp	DWORD PTR $T253748[ebp], 0
	je	SHORT $LN18@Uninit_fil@4
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T253748[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T253748[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@4
$LN18@Uninit_fil@4:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@4:
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@4:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T253775 = -4						; size = 4
___that$ = 8						; size = 4
??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z PROC	; IntrigueNotificationMessage::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T253775[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR $T253775[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+64]
	mov	BYTE PTR [edx+64], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z ENDP	; IntrigueNotificationMessage::operator=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T253784 = -8						; size = 4
__Next$229474 = -4					; size = 4
??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ PROC	; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 		if (_Buf._Begin != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Temp_itera

; 547  : 			{	// destroy any constructed elements in buffer
; 548  : 			for (_Pty _Next = _Buf._Begin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Next$229474[ebp], edx

; 549  : 				_Next != _Buf._Hiwater; ++_Next)

	jmp	SHORT $LN3@Temp_itera
$LN2@Temp_itera:
	mov	eax, DWORD PTR __Next$229474[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$229474[ebp], eax
$LN3@Temp_itera:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Next$229474[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN1@Temp_itera

; 550  : 				_Destroy(&*_Next);

	jmp	SHORT $LN2@Temp_itera
$LN1@Temp_itera:

; 551  : 			std::return_temporary_buffer(_Buf._Begin);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T253784[ebp], ecx
	mov	edx, DWORD PTR $T253784[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Temp_itera:

; 552  : 			}
; 553  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ENDP	; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
PUBLIC	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
PUBLIC	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
PUBLIC	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__Count2$229531 = -8					; size = 4
__Mid$229532 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3529 : 	{	// sort preserving order of equivalents, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH

; 3530 : 	if (_Count <= _ISORT_MAX)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jg	SHORT $LN4@Stable_sor@3

; 3531 : 		std::_Insertion_sort(_First, _Last, _Pred);	// small

	push	0
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3532 : 	else

	jmp	$LN5@Stable_sor@3
$LN4@Stable_sor@3:

; 3533 : 		{	// sort halves and merge
; 3534 : 		_Diff _Count2 = (_Count + 1) / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$229531[ebp], eax

; 3535 : 		_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$229532[ebp], eax

; 3536 : 		std::advance(_Mid, _Count2);

	mov	ecx, DWORD PTR __Count2$229531[ebp]
	mov	edx, DWORD PTR __Mid$229532[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid$229532[ebp], eax

; 3537 : 
; 3538 : 		if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count2$229531[ebp], eax
	jg	SHORT $LN2@Stable_sor@3

; 3539 : 			{	// temp buffer big enough, sort each half using buffer
; 3540 : 			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$229531[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229532[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H

; 3541 : 			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
; 3542 : 				_Tempbuf, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, DWORD PTR __Count2$229531[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229532[ebp]
	push	ecx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H

; 3543 : 			}
; 3544 : 		else

	jmp	SHORT $LN1@Stable_sor@3
$LN2@Stable_sor@3:

; 3545 : 			{	// temp buffer not big enough, divide and conquer
; 3546 : 			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count2$229531[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229532[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H

; 3547 : 			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Count2$229531[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229532[ebp]
	push	edx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN1@Stable_sor@3:

; 3548 : 			}
; 3549 : 
; 3550 : 		_Buffered_merge(_First, _Mid, _Last,
; 3551 : 			_Count2, _Count - _Count2, _Tempbuf, _Pred);	// merge halves

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, DWORD PTR __Count2$229531[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$229531[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229532[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH
$LN5@Stable_sor@3:

; 3552 : 		}
; 3553 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
PUBLIC	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
PUBLIC	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
; Function compile flags: /Odtp
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
__Count2$229577 = -8					; size = 4
__Mid$229578 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3529 : 	{	// sort preserving order of equivalents, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH

; 3530 : 	if (_Count <= _ISORT_MAX)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jg	SHORT $LN4@Stable_sor@4

; 3531 : 		std::_Insertion_sort(_First, _Last, _Pred);	// small

	push	0
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3532 : 	else

	jmp	$LN5@Stable_sor@4
$LN4@Stable_sor@4:

; 3533 : 		{	// sort halves and merge
; 3534 : 		_Diff _Count2 = (_Count + 1) / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$229577[ebp], eax

; 3535 : 		_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$229578[ebp], eax

; 3536 : 		std::advance(_Mid, _Count2);

	mov	ecx, DWORD PTR __Count2$229577[ebp]
	mov	edx, DWORD PTR __Mid$229578[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid$229578[ebp], eax

; 3537 : 
; 3538 : 		if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count2$229577[ebp], eax
	jg	SHORT $LN2@Stable_sor@4

; 3539 : 			{	// temp buffer big enough, sort each half using buffer
; 3540 : 			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$229577[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229578[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H

; 3541 : 			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
; 3542 : 				_Tempbuf, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, DWORD PTR __Count2$229577[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$229578[ebp]
	push	ecx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H

; 3543 : 			}
; 3544 : 		else

	jmp	SHORT $LN1@Stable_sor@4
$LN2@Stable_sor@4:

; 3545 : 			{	// temp buffer not big enough, divide and conquer
; 3546 : 			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count2$229577[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229578[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H

; 3547 : 			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Count2$229577[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229578[ebp]
	push	edx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H
$LN1@Stable_sor@4:

; 3548 : 			}
; 3549 : 
; 3550 : 		_Buffered_merge(_First, _Mid, _Last,
; 3551 : 			_Count2, _Count - _Count2, _Tempbuf, _Pred);	// merge halves

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, DWORD PTR __Count2$229577[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$229577[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$229578[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH
$LN5@Stable_sor@4:

; 3552 : 		}
; 3553 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z
_TEXT	SEGMENT
$T254808 = -22						; size = 1
$T254807 = -21						; size = 1
$T254806 = -20						; size = 4
$T254797 = -13						; size = 1
$T254796 = -12						; size = 4
$T254795 = -8						; size = 4
$T254800 = -4						; size = 1
$T254782 = -2						; size = 1
$T254781 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z PROC ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T254781[ebp], al
	mov	cl, BYTE PTR $T254781[ebp]
	mov	BYTE PTR $T254808[ebp], cl
	mov	dl, BYTE PTR $T254782[ebp]
	mov	BYTE PTR $T254807[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T254806[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254800[ebp], cl
	mov	dl, BYTE PTR $T254800[ebp]
	mov	BYTE PTR $T254797[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T254796[ebp], eax
	mov	ecx, DWORD PTR $T254806[ebp]
	mov	DWORD PTR $T254795[ebp], ecx
	jmp	SHORT $LN9@unchecked_@2
$LN8@unchecked_@2:
	mov	edx, DWORD PTR $T254796[ebp]
	sub	edx, 1
	mov	DWORD PTR $T254796[ebp], edx
	mov	eax, DWORD PTR $T254795[ebp]
	add	eax, 4
	mov	DWORD PTR $T254795[ebp], eax
$LN9@unchecked_@2:
	cmp	DWORD PTR $T254796[ebp], 0
	jbe	SHORT $LN1@unchecked_@2
	mov	ecx, DWORD PTR $T254795[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@2
$LN1@unchecked_@2:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ENDP ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
_TEXT	ENDS
PUBLIC	??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ; std::get_temporary_buffer<ScoreCityEntry>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
__Pair$229756 = -8					; size = 8
?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ PROC ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen, COMDAT
; _this$ = ecx

; 607  : 		{	// return size of buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 608  : 		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@Maxlen
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN1@Maxlen

; 609  : 			{	// allocate buffer on first size query
; 610  : 			pair<_Pty, _PDFT> _Pair =
; 611  : 				std::get_temporary_buffer<_Ty>(_Pbuf->_Size);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR __Pair$229756[ebp]
	push	ecx
	call	??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ; std::get_temporary_buffer<ScoreCityEntry>
	add	esp, 8

; 612  : 
; 613  : 			_Pbuf->_Begin = _Pair.first;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$229756[ebp]
	mov	DWORD PTR [eax], ecx

; 614  : 			_Pbuf->_Current = _Pair.first;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$229756[ebp]
	mov	DWORD PTR [eax+4], ecx

; 615  : 			_Pbuf->_Hiwater = _Pair.first;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$229756[ebp]
	mov	DWORD PTR [eax+8], ecx

; 616  : 			_Pbuf->_Size = _Pair.second;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR __Pair$229756[ebp+4]
	mov	DWORD PTR [eax+12], ecx
$LN1@Maxlen:

; 617  : 			}
; 618  : 		return (_Pbuf->_Size);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+12]

; 619  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
PUBLIC	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
tv144 = -216						; size = 4
$T255256 = -61						; size = 1
$T254926 = -60						; size = 4
$T254922 = -56						; size = 4
$T254885 = -32						; size = 4
$T254865 = -28						; size = 4
$T254822 = -20						; size = 4
__Chunk$229826 = -16					; size = 4
__Midn$229824 = -12					; size = 4
__Nleft$229820 = -8					; size = 4
__Mid$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3502 : 	{	// sort using temp buffer for merges, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H

; 3503 : 	_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3504 : 	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Nleft$229820[ebp], ecx
	jmp	SHORT $LN6@Buffered_m
$LN5@Buffered_m:
	mov	edx, DWORD PTR __Nleft$229820[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR __Nleft$229820[ebp], edx
$LN6@Buffered_m:
	cmp	DWORD PTR __Nleft$229820[ebp], 32	; 00000020H
	jl	SHORT $LN26@Buffered_m

; 3505 : 		{	// sort chunks
; 3506 : 		_BidIt _Midn = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Midn$229824[ebp], eax

; 3507 : 		std::advance(_Midn, (int)_ISORT_MAX);

	mov	ecx, 32					; 00000020H
	shl	ecx, 3
	add	ecx, DWORD PTR __Midn$229824[ebp]
	mov	DWORD PTR __Midn$229824[ebp], ecx

; 3508 : 
; 3509 : 		std::_Insertion_sort(_Mid, _Midn, _Pred);

	mov	edx, DWORD PTR __Midn$229824[ebp]
	mov	DWORD PTR $T254865[ebp], edx
	push	0
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254865[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3510 : 		_Mid = _Midn;

	mov	eax, DWORD PTR __Midn$229824[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3511 : 		}

	jmp	SHORT $LN5@Buffered_m

; 3512 : 	std::_Insertion_sort(_Mid, _Last, _Pred);	// sort partial last chunk

$LN26@Buffered_m:
	push	0
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3513 : 
; 3514 : 	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)

	mov	DWORD PTR __Chunk$229826[ebp], 32	; 00000020H
	jmp	SHORT $LN3@Buffered_m
$LN2@Buffered_m:
	mov	ecx, DWORD PTR __Chunk$229826[ebp]
	shl	ecx, 1
	mov	DWORD PTR __Chunk$229826[ebp], ecx
$LN3@Buffered_m:
	mov	edx, DWORD PTR __Chunk$229826[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jge	$LN7@Buffered_m

; 3515 : 		{	// merge adjacent pairs of chunks to and from temp buffer
; 3516 : 		_STDEXT _Unchecked_chunked_merge(_First, _Last, _Tempbuf._Init(),
; 3517 : 			_Chunk, _Count, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Chunk$229826[ebp]
	push	edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T254822[ebp], esp
	mov	DWORD PTR $T254885[ebp], edx
	mov	eax, DWORD PTR $T254885[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T254885[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T254885[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T254885[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T254885[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T254885[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
	add	esp, 40					; 00000028H

; 3518 : 		_STDEXT _Unchecked_chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
; 3519 : 			_Chunk *= 2, _Count, _Pred);

	mov	ecx, DWORD PTR __Chunk$229826[ebp]
	shl	ecx, 1
	mov	DWORD PTR __Chunk$229826[ebp], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254922[ebp], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T254926[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T255256[ebp], dl
	movzx	eax, BYTE PTR $T255256[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Chunk$229826[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T254922[ebp]
	push	edx
	mov	eax, DWORD PTR $T254926[ebp]
	push	eax
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH

; 3520 : 		}

	jmp	$LN2@Buffered_m
$LN7@Buffered_m:

; 3521 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
PUBLIC	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
PUBLIC	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
PUBLIC	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
PUBLIC	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
PUBLIC	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
tv244 = -344						; size = 4
tv243 = -340						; size = 4
tv240 = -336						; size = 4
tv239 = -332						; size = 4
$T255634 = -272						; size = 4
$T255621 = -268						; size = 4
$T255620 = -264						; size = 4
$T255598 = -257						; size = 1
$T255597 = -256						; size = 4
$T255596 = -252						; size = 4
$T255593 = -248						; size = 4
$T255585 = -244						; size = 4
$T255543 = -236						; size = 4
$T255530 = -232						; size = 4
$T255529 = -228						; size = 4
$T255507 = -221						; size = 1
$T255506 = -220						; size = 4
$T255503 = -216						; size = 4
$T255495 = -212						; size = 4
$T255437 = -205						; size = 1
$T255436 = -204						; size = 4
$T255435 = -200						; size = 4
$T255434 = -193						; size = 1
$T255429 = -192						; size = 4
$T255425 = -188						; size = 4
$T255410 = -184						; size = 4
__Next$255413 = -180					; size = 4
$T255402 = -176						; size = 4
$T255389 = -161						; size = 1
$T255388 = -160						; size = 4
$T255387 = -156						; size = 4
$T255386 = -152						; size = 4
$T255382 = -146						; size = 1
$T255381 = -145						; size = 1
$T255371 = -144						; size = 4
$T255367 = -140						; size = 4
$T255352 = -136						; size = 4
__Next$255355 = -132					; size = 4
$T255344 = -128						; size = 4
$T255331 = -116						; size = 4
$T255330 = -112						; size = 4
$T255315 = -108						; size = 4
__Tmp$255328 = -104					; size = 8
$T255301 = -96						; size = 4
$T255288 = -92						; size = 4
$T255279 = -88						; size = 4
$T255266 = -84						; size = 4
$T255265 = -80						; size = 4
$T255264 = -76						; size = 4
$T255263 = -72						; size = 20
$T255262 = -52						; size = 4
$T255261 = -48						; size = 4
$T255260 = -44						; size = 20
$T255259 = -24						; size = 4
__Firstn$229906 = -20					; size = 4
__Count2n$229909 = -16					; size = 4
__Midn$229932 = -12					; size = 4
__Lastn$229907 = -8					; size = 4
__Count1n$229908 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 2889 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H

; 2890 : 	if (_Count1 + _Count2 == 2)

	mov	eax, DWORD PTR __Count1$[ebp]
	add	eax, DWORD PTR __Count2$[ebp]
	cmp	eax, 2
	jne	SHORT $LN9@Buffered_m@2

; 2891 : 		{	// order two one-element partitions
; 2892 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255279[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255288[ebp], edx
	mov	eax, DWORD PTR $T255288[ebp]
	mov	ecx, DWORD PTR $T255279[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@Buffered_m@2

; 2893 : 			std::iter_swap(_First, _Mid);

	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255331[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255330[ebp], eax
	mov	ecx, DWORD PTR $T255331[ebp]
	mov	DWORD PTR $T255301[ebp], ecx
	mov	edx, DWORD PTR $T255330[ebp]
	mov	DWORD PTR $T255315[ebp], edx
	mov	eax, DWORD PTR $T255315[ebp]
	cmp	eax, DWORD PTR $T255301[ebp]
	je	SHORT $LN8@Buffered_m@2
	mov	ecx, DWORD PTR $T255315[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$255328[ebp], edx
	mov	DWORD PTR __Tmp$255328[ebp+4], eax
	mov	ecx, DWORD PTR $T255301[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T255315[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T255301[ebp]
	mov	eax, DWORD PTR __Tmp$255328[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$255328[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN8@Buffered_m@2:

; 2894 : 		}

	jmp	$LN10@Buffered_m@2
$LN9@Buffered_m@2:

; 2895 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	mov	edx, DWORD PTR __Count1$[ebp]
	cmp	edx, DWORD PTR __Count2$[ebp]
	jg	$LN6@Buffered_m@2
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count1$[ebp], eax
	jg	$LN6@Buffered_m@2

; 2896 : 		{	// buffer left partition, then merge
; 2897 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T255259[ebp], esp
	mov	DWORD PTR $T255344[ebp], edx
	mov	eax, DWORD PTR $T255344[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T255344[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T255344[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T255344[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T255344[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T255344[ebp]
	mov	DWORD PTR tv239[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T255260[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv240[ebp], eax
	cmp	DWORD PTR $T255260[ebp], 0
	je	SHORT $LN52@Buffered_m@2
	mov	edx, DWORD PTR $T255260[ebp]
	mov	DWORD PTR __Next$255355[ebp], edx
	jmp	SHORT $LN50@Buffered_m@2
$LN49@Buffered_m@2:
	mov	eax, DWORD PTR __Next$255355[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$255355[ebp], eax
$LN50@Buffered_m@2:
	mov	ecx, DWORD PTR __Next$255355[ebp]
	cmp	ecx, DWORD PTR $T255260[ebp+8]
	je	SHORT $LN48@Buffered_m@2
	jmp	SHORT $LN49@Buffered_m@2
$LN48@Buffered_m@2:
	mov	edx, DWORD PTR $T255260[ebp]
	mov	DWORD PTR $T255352[ebp], edx
	mov	eax, DWORD PTR $T255352[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN52@Buffered_m@2:

; 2898 : 		_STDEXT unchecked_merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2899 : 			_Mid, _Last, _First, _Pred);

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T255367[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T255371[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T255389[ebp], cl
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255388[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255387[ebp], eax
	mov	ecx, DWORD PTR $T255371[ebp]
	mov	DWORD PTR $T255386[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T255381[ebp], dl
	movzx	eax, BYTE PTR $T255381[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T255382[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T255389[ebp]
	push	edx
	mov	eax, DWORD PTR $T255388[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255387[ebp]
	push	edx
	mov	eax, DWORD PTR $T255367[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255386[ebp]
	push	ecx
	lea	edx, DWORD PTR $T255261[ebp]
	push	edx
	call	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H

; 2900 : 		}
; 2901 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	jmp	$LN10@Buffered_m@2
$LN6@Buffered_m@2:
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count2$[ebp], eax
	jg	$LN4@Buffered_m@2

; 2902 : 		{	// buffer right partition, then merge
; 2903 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T255262[ebp], esp
	mov	DWORD PTR $T255402[ebp], edx
	mov	eax, DWORD PTR $T255402[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T255402[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T255402[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T255402[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T255402[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T255402[ebp]
	mov	DWORD PTR tv243[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T255263[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv244[ebp], eax
	cmp	DWORD PTR $T255263[ebp], 0
	je	SHORT $LN79@Buffered_m@2
	mov	edx, DWORD PTR $T255263[ebp]
	mov	DWORD PTR __Next$255413[ebp], edx
	jmp	SHORT $LN77@Buffered_m@2
$LN76@Buffered_m@2:
	mov	eax, DWORD PTR __Next$255413[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$255413[ebp], eax
$LN77@Buffered_m@2:
	mov	ecx, DWORD PTR __Next$255413[ebp]
	cmp	ecx, DWORD PTR $T255263[ebp+8]
	je	SHORT $LN75@Buffered_m@2
	jmp	SHORT $LN76@Buffered_m@2
$LN75@Buffered_m@2:
	mov	edx, DWORD PTR $T255263[ebp]
	mov	DWORD PTR $T255410[ebp], edx
	mov	eax, DWORD PTR $T255410[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN79@Buffered_m@2:

; 2904 : 		_STDEXT _Unchecked_merge_backward(_First, _Mid, _Tempbuf._First(), _Tempbuf._Last(),
; 2905 : 			_Last, _Pred);

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T255425[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T255429[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T255437[ebp], cl
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255436[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255435[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255434[ebp], cl
	movzx	edx, BYTE PTR $T255434[ebp]
	push	edx
	movzx	eax, BYTE PTR $T255437[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255425[ebp]
	push	edx
	mov	eax, DWORD PTR $T255429[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255436[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255435[ebp]
	push	edx
	lea	eax, DWORD PTR $T255264[ebp]
	push	eax
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 32					; 00000020H

; 2906 : 		}
; 2907 : 	else

	jmp	$LN10@Buffered_m@2
$LN4@Buffered_m@2:

; 2908 : 		{	// buffer too small, divide and conquer
; 2909 : 		_BidIt _Firstn, _Lastn;

	mov	DWORD PTR __Firstn$229906[ebp], 0
	mov	DWORD PTR __Lastn$229907[ebp], 0

; 2910 : 		_Diff _Count1n, _Count2n;
; 2911 : 		if (_Count2 < _Count1)

	mov	ecx, DWORD PTR __Count2$[ebp]
	cmp	ecx, DWORD PTR __Count1$[ebp]
	jge	$LN2@Buffered_m@2

; 2912 : 			{	// left larger, cut it in half and partition right to match
; 2913 : 			_Count1n = _Count1 / 2, _Count2n = 0;

	mov	eax, DWORD PTR __Count1$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count1n$229908[ebp], eax
	mov	DWORD PTR __Count2n$229909[ebp], 0

; 2914 : 			_Firstn = _First;

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Firstn$229906[ebp], edx

; 2915 : 			std::advance(_Firstn, _Count1n);

	mov	eax, DWORD PTR __Count1n$229908[ebp]
	mov	ecx, DWORD PTR __Firstn$229906[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Firstn$229906[ebp], edx

; 2916 : 			_Lastn = lower_bound(_Mid, _Last, *_Firstn, _Pred);

	mov	eax, DWORD PTR __Firstn$229906[ebp]
	mov	DWORD PTR $T255495[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T255507[ebp], cl
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255506[ebp], edx
	push	0
	movzx	eax, BYTE PTR $T255507[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255495[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR $T255506[ebp]
	push	eax
	lea	ecx, DWORD PTR $T255503[ebp]
	push	ecx
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T255506[ebp], edx
	mov	eax, DWORD PTR $T255506[ebp]
	mov	DWORD PTR $T255265[ebp], eax
	mov	ecx, DWORD PTR $T255265[ebp]
	mov	DWORD PTR __Lastn$229907[ebp], ecx

; 2917 : 			_Distance(_Mid, _Lastn, _Count2n);

	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255543[ebp], edx
	mov	eax, DWORD PTR __Lastn$229907[ebp]
	mov	DWORD PTR $T255530[ebp], eax
	mov	ecx, DWORD PTR $T255543[ebp]
	mov	DWORD PTR $T255529[ebp], ecx
	mov	edx, DWORD PTR $T255530[ebp]
	sub	edx, DWORD PTR $T255529[ebp]
	sar	edx, 3
	add	edx, DWORD PTR __Count2n$229909[ebp]
	mov	DWORD PTR __Count2n$229909[ebp], edx

; 2918 : 			}
; 2919 : 		else

	jmp	$LN1@Buffered_m@2
$LN2@Buffered_m@2:

; 2920 : 			{	// right larger, cut it in half and partition left to match
; 2921 : 			_Count1n = 0, _Count2n = _Count2 / 2;

	mov	DWORD PTR __Count1n$229908[ebp], 0
	mov	eax, DWORD PTR __Count2$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2n$229909[ebp], eax

; 2922 : 			_Lastn = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Lastn$229907[ebp], eax

; 2923 : 			std::advance(_Lastn, _Count2n);

	mov	ecx, DWORD PTR __Count2n$229909[ebp]
	mov	edx, DWORD PTR __Lastn$229907[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Lastn$229907[ebp], eax

; 2924 : 			_Firstn = upper_bound(_First, _Mid, *_Lastn, _Pred);

	mov	ecx, DWORD PTR __Lastn$229907[ebp]
	mov	DWORD PTR $T255585[ebp], ecx
	mov	dl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T255598[ebp], dl
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T255597[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255596[ebp], ecx
	push	0
	movzx	edx, BYTE PTR $T255598[ebp]
	push	edx
	mov	eax, DWORD PTR $T255585[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255597[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255596[ebp]
	push	edx
	lea	eax, DWORD PTR $T255593[ebp]
	push	eax
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T255596[ebp], ecx
	mov	edx, DWORD PTR $T255596[ebp]
	mov	DWORD PTR $T255266[ebp], edx
	mov	eax, DWORD PTR $T255266[ebp]
	mov	DWORD PTR __Firstn$229906[ebp], eax

; 2925 : 			_Distance(_First, _Firstn, _Count1n);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255634[ebp], ecx
	mov	edx, DWORD PTR __Firstn$229906[ebp]
	mov	DWORD PTR $T255621[ebp], edx
	mov	eax, DWORD PTR $T255634[ebp]
	mov	DWORD PTR $T255620[ebp], eax
	mov	ecx, DWORD PTR $T255621[ebp]
	sub	ecx, DWORD PTR $T255620[ebp]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count1n$229908[ebp]
	mov	DWORD PTR __Count1n$229908[ebp], ecx
$LN1@Buffered_m@2:

; 2926 : 			}
; 2927 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2928 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle

	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2n$229909[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count1$[ebp]
	sub	ecx, DWORD PTR __Count1n$229908[ebp]
	push	ecx
	mov	edx, DWORD PTR __Lastn$229907[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Firstn$229906[ebp]
	push	ecx
	lea	edx, DWORD PTR __Midn$229932[ebp]
	push	edx
	call	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	add	esp, 28					; 0000001cH

; 2929 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2930 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2n$229909[ebp]
	push	edx
	mov	eax, DWORD PTR __Count1n$229908[ebp]
	push	eax
	mov	ecx, DWORD PTR __Midn$229932[ebp]
	push	ecx
	mov	edx, DWORD PTR __Firstn$229906[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH

; 2931 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2932 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$[ebp]
	sub	eax, DWORD PTR __Count2n$229909[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count1$[ebp]
	sub	ecx, DWORD PTR __Count1n$229908[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Lastn$229907[ebp]
	push	eax
	mov	ecx, DWORD PTR __Midn$229932[ebp]
	push	ecx
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH
$LN10@Buffered_m@2:

; 2933 : 		}
; 2934 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
PUBLIC	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
tv144 = -216						; size = 4
$T256082 = -61						; size = 1
$T255752 = -60						; size = 4
$T255748 = -56						; size = 4
$T255711 = -32						; size = 4
$T255691 = -28						; size = 4
$T255648 = -20						; size = 4
__Chunk$229964 = -16					; size = 4
__Midn$229962 = -12					; size = 4
__Nleft$229958 = -8					; size = 4
__Mid$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3502 : 	{	// sort using temp buffer for merges, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H

; 3503 : 	_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3504 : 	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Nleft$229958[ebp], ecx
	jmp	SHORT $LN6@Buffered_m@3
$LN5@Buffered_m@3:
	mov	edx, DWORD PTR __Nleft$229958[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR __Nleft$229958[ebp], edx
$LN6@Buffered_m@3:
	cmp	DWORD PTR __Nleft$229958[ebp], 32	; 00000020H
	jl	SHORT $LN26@Buffered_m@3

; 3505 : 		{	// sort chunks
; 3506 : 		_BidIt _Midn = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Midn$229962[ebp], eax

; 3507 : 		std::advance(_Midn, (int)_ISORT_MAX);

	mov	ecx, 32					; 00000020H
	shl	ecx, 3
	add	ecx, DWORD PTR __Midn$229962[ebp]
	mov	DWORD PTR __Midn$229962[ebp], ecx

; 3508 : 
; 3509 : 		std::_Insertion_sort(_Mid, _Midn, _Pred);

	mov	edx, DWORD PTR __Midn$229962[ebp]
	mov	DWORD PTR $T255691[ebp], edx
	push	0
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T255691[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3510 : 		_Mid = _Midn;

	mov	eax, DWORD PTR __Midn$229962[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3511 : 		}

	jmp	SHORT $LN5@Buffered_m@3

; 3512 : 	std::_Insertion_sort(_Mid, _Last, _Pred);	// sort partial last chunk

$LN26@Buffered_m@3:
	push	0
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3513 : 
; 3514 : 	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)

	mov	DWORD PTR __Chunk$229964[ebp], 32	; 00000020H
	jmp	SHORT $LN3@Buffered_m@3
$LN2@Buffered_m@3:
	mov	ecx, DWORD PTR __Chunk$229964[ebp]
	shl	ecx, 1
	mov	DWORD PTR __Chunk$229964[ebp], ecx
$LN3@Buffered_m@3:
	mov	edx, DWORD PTR __Chunk$229964[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jge	$LN7@Buffered_m@3

; 3515 : 		{	// merge adjacent pairs of chunks to and from temp buffer
; 3516 : 		_STDEXT _Unchecked_chunked_merge(_First, _Last, _Tempbuf._Init(),
; 3517 : 			_Chunk, _Count, _Pred);

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Chunk$229964[ebp]
	push	edx
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T255648[ebp], esp
	mov	DWORD PTR $T255711[ebp], edx
	mov	eax, DWORD PTR $T255711[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T255711[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T255711[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T255711[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T255711[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T255711[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
	add	esp, 40					; 00000028H

; 3518 : 		_STDEXT _Unchecked_chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
; 3519 : 			_Chunk *= 2, _Count, _Pred);

	mov	ecx, DWORD PTR __Chunk$229964[ebp]
	shl	ecx, 1
	mov	DWORD PTR __Chunk$229964[ebp], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T255748[ebp], ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T255752[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T256082[ebp], dl
	movzx	eax, BYTE PTR $T256082[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Chunk$229964[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T255748[ebp]
	push	edx
	mov	eax, DWORD PTR $T255752[ebp]
	push	eax
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH

; 3520 : 		}

	jmp	$LN2@Buffered_m@3
$LN7@Buffered_m@3:

; 3521 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
PUBLIC	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
PUBLIC	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
PUBLIC	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
tv244 = -344						; size = 4
tv243 = -340						; size = 4
tv240 = -336						; size = 4
tv239 = -332						; size = 4
$T256460 = -272						; size = 4
$T256447 = -268						; size = 4
$T256446 = -264						; size = 4
$T256424 = -257						; size = 1
$T256423 = -256						; size = 4
$T256422 = -252						; size = 4
$T256419 = -248						; size = 4
$T256411 = -244						; size = 4
$T256369 = -236						; size = 4
$T256356 = -232						; size = 4
$T256355 = -228						; size = 4
$T256333 = -221						; size = 1
$T256332 = -220						; size = 4
$T256329 = -216						; size = 4
$T256321 = -212						; size = 4
$T256263 = -205						; size = 1
$T256262 = -204						; size = 4
$T256261 = -200						; size = 4
$T256260 = -193						; size = 1
$T256255 = -192						; size = 4
$T256251 = -188						; size = 4
$T256236 = -184						; size = 4
__Next$256239 = -180					; size = 4
$T256228 = -176						; size = 4
$T256215 = -161						; size = 1
$T256214 = -160						; size = 4
$T256213 = -156						; size = 4
$T256212 = -152						; size = 4
$T256207 = -146						; size = 1
$T256206 = -145						; size = 1
$T256197 = -144						; size = 4
$T256193 = -140						; size = 4
$T256178 = -136						; size = 4
__Next$256181 = -132					; size = 4
$T256170 = -128						; size = 4
$T256157 = -116						; size = 4
$T256156 = -112						; size = 4
$T256141 = -108						; size = 4
__Tmp$256154 = -104					; size = 8
$T256127 = -96						; size = 4
$T256114 = -92						; size = 4
$T256105 = -88						; size = 4
$T256092 = -84						; size = 4
$T256091 = -80						; size = 4
$T256090 = -76						; size = 4
$T256089 = -72						; size = 20
$T256088 = -52						; size = 4
$T256087 = -48						; size = 4
$T256086 = -44						; size = 20
$T256085 = -24						; size = 4
__Firstn$230031 = -20					; size = 4
__Count2n$230034 = -16					; size = 4
__Midn$230057 = -12					; size = 4
__Lastn$230032 = -8					; size = 4
__Count1n$230033 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 2889 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H

; 2890 : 	if (_Count1 + _Count2 == 2)

	mov	eax, DWORD PTR __Count1$[ebp]
	add	eax, DWORD PTR __Count2$[ebp]
	cmp	eax, 2
	jne	SHORT $LN9@Buffered_m@4

; 2891 : 		{	// order two one-element partitions
; 2892 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256105[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256114[ebp], edx
	mov	eax, DWORD PTR $T256114[ebp]
	mov	ecx, DWORD PTR $T256105[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@Buffered_m@4

; 2893 : 			std::iter_swap(_First, _Mid);

	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256157[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256156[ebp], eax
	mov	ecx, DWORD PTR $T256157[ebp]
	mov	DWORD PTR $T256127[ebp], ecx
	mov	edx, DWORD PTR $T256156[ebp]
	mov	DWORD PTR $T256141[ebp], edx
	mov	eax, DWORD PTR $T256141[ebp]
	cmp	eax, DWORD PTR $T256127[ebp]
	je	SHORT $LN8@Buffered_m@4
	mov	ecx, DWORD PTR $T256141[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$256154[ebp], edx
	mov	DWORD PTR __Tmp$256154[ebp+4], eax
	mov	ecx, DWORD PTR $T256127[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T256141[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T256127[ebp]
	mov	eax, DWORD PTR __Tmp$256154[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$256154[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN8@Buffered_m@4:

; 2894 : 		}

	jmp	$LN10@Buffered_m@4
$LN9@Buffered_m@4:

; 2895 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	mov	edx, DWORD PTR __Count1$[ebp]
	cmp	edx, DWORD PTR __Count2$[ebp]
	jg	$LN6@Buffered_m@4
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count1$[ebp], eax
	jg	$LN6@Buffered_m@4

; 2896 : 		{	// buffer left partition, then merge
; 2897 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T256085[ebp], esp
	mov	DWORD PTR $T256170[ebp], edx
	mov	eax, DWORD PTR $T256170[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T256170[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T256170[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T256170[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T256170[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T256170[ebp]
	mov	DWORD PTR tv239[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T256086[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv240[ebp], eax
	cmp	DWORD PTR $T256086[ebp], 0
	je	SHORT $LN52@Buffered_m@4
	mov	edx, DWORD PTR $T256086[ebp]
	mov	DWORD PTR __Next$256181[ebp], edx
	jmp	SHORT $LN50@Buffered_m@4
$LN49@Buffered_m@4:
	mov	eax, DWORD PTR __Next$256181[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$256181[ebp], eax
$LN50@Buffered_m@4:
	mov	ecx, DWORD PTR __Next$256181[ebp]
	cmp	ecx, DWORD PTR $T256086[ebp+8]
	je	SHORT $LN48@Buffered_m@4
	jmp	SHORT $LN49@Buffered_m@4
$LN48@Buffered_m@4:
	mov	edx, DWORD PTR $T256086[ebp]
	mov	DWORD PTR $T256178[ebp], edx
	mov	eax, DWORD PTR $T256178[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN52@Buffered_m@4:

; 2898 : 		_STDEXT unchecked_merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2899 : 			_Mid, _Last, _First, _Pred);

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T256193[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T256197[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T256215[ebp], cl
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256214[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256213[ebp], eax
	mov	ecx, DWORD PTR $T256197[ebp]
	mov	DWORD PTR $T256212[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T256206[ebp], dl
	movzx	eax, BYTE PTR $T256206[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T256207[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T256215[ebp]
	push	edx
	mov	eax, DWORD PTR $T256214[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256213[ebp]
	push	edx
	mov	eax, DWORD PTR $T256193[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256212[ebp]
	push	ecx
	lea	edx, DWORD PTR $T256087[ebp]
	push	edx
	call	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H

; 2900 : 		}
; 2901 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	jmp	$LN10@Buffered_m@4
$LN6@Buffered_m@4:
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count2$[ebp], eax
	jg	$LN4@Buffered_m@4

; 2902 : 		{	// buffer right partition, then merge
; 2903 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T256088[ebp], esp
	mov	DWORD PTR $T256228[ebp], edx
	mov	eax, DWORD PTR $T256228[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T256228[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T256228[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T256228[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T256228[ebp]
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T256228[ebp]
	mov	DWORD PTR tv243[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T256089[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv244[ebp], eax
	cmp	DWORD PTR $T256089[ebp], 0
	je	SHORT $LN79@Buffered_m@4
	mov	edx, DWORD PTR $T256089[ebp]
	mov	DWORD PTR __Next$256239[ebp], edx
	jmp	SHORT $LN77@Buffered_m@4
$LN76@Buffered_m@4:
	mov	eax, DWORD PTR __Next$256239[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$256239[ebp], eax
$LN77@Buffered_m@4:
	mov	ecx, DWORD PTR __Next$256239[ebp]
	cmp	ecx, DWORD PTR $T256089[ebp+8]
	je	SHORT $LN75@Buffered_m@4
	jmp	SHORT $LN76@Buffered_m@4
$LN75@Buffered_m@4:
	mov	edx, DWORD PTR $T256089[ebp]
	mov	DWORD PTR $T256236[ebp], edx
	mov	eax, DWORD PTR $T256236[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN79@Buffered_m@4:

; 2904 : 		_STDEXT _Unchecked_merge_backward(_First, _Mid, _Tempbuf._First(), _Tempbuf._Last(),
; 2905 : 			_Last, _Pred);

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T256251[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T256255[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T256263[ebp], cl
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256262[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256261[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T256260[ebp], cl
	movzx	edx, BYTE PTR $T256260[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256263[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256251[ebp]
	push	edx
	mov	eax, DWORD PTR $T256255[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256262[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256261[ebp]
	push	edx
	lea	eax, DWORD PTR $T256090[ebp]
	push	eax
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
	add	esp, 32					; 00000020H

; 2906 : 		}
; 2907 : 	else

	jmp	$LN10@Buffered_m@4
$LN4@Buffered_m@4:

; 2908 : 		{	// buffer too small, divide and conquer
; 2909 : 		_BidIt _Firstn, _Lastn;

	mov	DWORD PTR __Firstn$230031[ebp], 0
	mov	DWORD PTR __Lastn$230032[ebp], 0

; 2910 : 		_Diff _Count1n, _Count2n;
; 2911 : 		if (_Count2 < _Count1)

	mov	ecx, DWORD PTR __Count2$[ebp]
	cmp	ecx, DWORD PTR __Count1$[ebp]
	jge	$LN2@Buffered_m@4

; 2912 : 			{	// left larger, cut it in half and partition right to match
; 2913 : 			_Count1n = _Count1 / 2, _Count2n = 0;

	mov	eax, DWORD PTR __Count1$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count1n$230033[ebp], eax
	mov	DWORD PTR __Count2n$230034[ebp], 0

; 2914 : 			_Firstn = _First;

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Firstn$230031[ebp], edx

; 2915 : 			std::advance(_Firstn, _Count1n);

	mov	eax, DWORD PTR __Count1n$230033[ebp]
	mov	ecx, DWORD PTR __Firstn$230031[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Firstn$230031[ebp], edx

; 2916 : 			_Lastn = lower_bound(_Mid, _Last, *_Firstn, _Pred);

	mov	eax, DWORD PTR __Firstn$230031[ebp]
	mov	DWORD PTR $T256321[ebp], eax
	mov	cl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T256333[ebp], cl
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256332[ebp], edx
	push	0
	movzx	eax, BYTE PTR $T256333[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256321[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR $T256332[ebp]
	push	eax
	lea	ecx, DWORD PTR $T256329[ebp]
	push	ecx
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T256332[ebp], edx
	mov	eax, DWORD PTR $T256332[ebp]
	mov	DWORD PTR $T256091[ebp], eax
	mov	ecx, DWORD PTR $T256091[ebp]
	mov	DWORD PTR __Lastn$230032[ebp], ecx

; 2917 : 			_Distance(_Mid, _Lastn, _Count2n);

	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256369[ebp], edx
	mov	eax, DWORD PTR __Lastn$230032[ebp]
	mov	DWORD PTR $T256356[ebp], eax
	mov	ecx, DWORD PTR $T256369[ebp]
	mov	DWORD PTR $T256355[ebp], ecx
	mov	edx, DWORD PTR $T256356[ebp]
	sub	edx, DWORD PTR $T256355[ebp]
	sar	edx, 3
	add	edx, DWORD PTR __Count2n$230034[ebp]
	mov	DWORD PTR __Count2n$230034[ebp], edx

; 2918 : 			}
; 2919 : 		else

	jmp	$LN1@Buffered_m@4
$LN2@Buffered_m@4:

; 2920 : 			{	// right larger, cut it in half and partition left to match
; 2921 : 			_Count1n = 0, _Count2n = _Count2 / 2;

	mov	DWORD PTR __Count1n$230033[ebp], 0
	mov	eax, DWORD PTR __Count2$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2n$230034[ebp], eax

; 2922 : 			_Lastn = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Lastn$230032[ebp], eax

; 2923 : 			std::advance(_Lastn, _Count2n);

	mov	ecx, DWORD PTR __Count2n$230034[ebp]
	mov	edx, DWORD PTR __Lastn$230032[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Lastn$230032[ebp], eax

; 2924 : 			_Firstn = upper_bound(_First, _Mid, *_Lastn, _Pred);

	mov	ecx, DWORD PTR __Lastn$230032[ebp]
	mov	DWORD PTR $T256411[ebp], ecx
	mov	dl, BYTE PTR __Pred$[ebp]
	mov	BYTE PTR $T256424[ebp], dl
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T256423[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256422[ebp], ecx
	push	0
	movzx	edx, BYTE PTR $T256424[ebp]
	push	edx
	mov	eax, DWORD PTR $T256411[ebp]
	push	eax
	mov	ecx, DWORD PTR $T256423[ebp]
	push	ecx
	mov	edx, DWORD PTR $T256422[ebp]
	push	edx
	lea	eax, DWORD PTR $T256419[ebp]
	push	eax
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T256422[ebp], ecx
	mov	edx, DWORD PTR $T256422[ebp]
	mov	DWORD PTR $T256092[ebp], edx
	mov	eax, DWORD PTR $T256092[ebp]
	mov	DWORD PTR __Firstn$230031[ebp], eax

; 2925 : 			_Distance(_First, _Firstn, _Count1n);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256460[ebp], ecx
	mov	edx, DWORD PTR __Firstn$230031[ebp]
	mov	DWORD PTR $T256447[ebp], edx
	mov	eax, DWORD PTR $T256460[ebp]
	mov	DWORD PTR $T256446[ebp], eax
	mov	ecx, DWORD PTR $T256447[ebp]
	sub	ecx, DWORD PTR $T256446[ebp]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count1n$230033[ebp]
	mov	DWORD PTR __Count1n$230033[ebp], ecx
$LN1@Buffered_m@4:

; 2926 : 			}
; 2927 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2928 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle

	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2n$230034[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count1$[ebp]
	sub	ecx, DWORD PTR __Count1n$230033[ebp]
	push	ecx
	mov	edx, DWORD PTR __Lastn$230032[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Firstn$230031[ebp]
	push	ecx
	lea	edx, DWORD PTR __Midn$230057[ebp]
	push	edx
	call	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	add	esp, 28					; 0000001cH

; 2929 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2930 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part

	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count2n$230034[ebp]
	push	edx
	mov	eax, DWORD PTR __Count1n$230033[ebp]
	push	eax
	mov	ecx, DWORD PTR __Midn$230057[ebp]
	push	ecx
	mov	edx, DWORD PTR __Firstn$230031[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH

; 2931 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2932 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tempbuf$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count2$[ebp]
	sub	eax, DWORD PTR __Count2n$230034[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count1$[ebp]
	sub	ecx, DWORD PTR __Count1n$230033[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Lastn$230032[ebp]
	push	eax
	mov	ecx, DWORD PTR __Midn$230057[ebp]
	push	ecx
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH
$LN10@Buffered_m@4:

; 2933 : 		}
; 2934 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z
_TEXT	SEGMENT
__Cat$256479 = -3					; size = 1
$T256475 = -2						; size = 1
$T256474 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256474[ebp], al
	mov	cl, BYTE PTR __Cat$256479[ebp]
	mov	BYTE PTR $T256475[ebp], cl
	movzx	edx, BYTE PTR $T256474[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256475[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
__Cat$256487 = -3					; size = 1
$T256483 = -2						; size = 1
$T256482 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256482[ebp], al
	mov	cl, BYTE PTR __Cat$256487[ebp]
	mov	BYTE PTR $T256483[ebp], cl
	movzx	edx, BYTE PTR $T256482[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256483[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
__Cat$256495 = -3					; size = 1
$T256491 = -2						; size = 1
$T256490 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256490[ebp], al
	mov	cl, BYTE PTR __Cat$256495[ebp]
	mov	BYTE PTR $T256491[ebp], cl
	movzx	edx, BYTE PTR $T256490[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256491[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z
_TEXT	SEGMENT
$T256512 = -21						; size = 1
$T256511 = -20						; size = 4
$T256510 = -16						; size = 4
__Result$256507 = -12					; size = 4
__Count$256506 = -8					; size = 4
__Cat$256503 = -3					; size = 1
$T256499 = -2						; size = 1
$T256498 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256498[ebp], al
	mov	cl, BYTE PTR __Cat$256503[ebp]
	mov	BYTE PTR $T256499[ebp], cl
	mov	dl, BYTE PTR $T256498[ebp]
	mov	BYTE PTR $T256512[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T256511[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256510[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T256510[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$256506[ebp], edx
	mov	eax, DWORD PTR __Count$256506[ebp]
	mov	ecx, DWORD PTR $T256511[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$256507[ebp], edx
	cmp	DWORD PTR __Count$256506[ebp], 0
	jbe	SHORT $LN6@unchecked_@3
	mov	eax, DWORD PTR __Count$256506[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T256510[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$256506[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T256511[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@3:
	mov	eax, DWORD PTR __Result$256507[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z
_TEXT	SEGMENT
__Cat$256520 = -3					; size = 1
$T256516 = -2						; size = 1
$T256515 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256515[ebp], al
	mov	cl, BYTE PTR __Cat$256520[ebp]
	mov	BYTE PTR $T256516[ebp], cl
	movzx	edx, BYTE PTR $T256515[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256516[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
; Function compile flags: /Odtp
;	COMDAT ??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z
_TEXT	SEGMENT
$T256527 = -20						; size = 4
$T256523 = -16						; size = 12
__Pbuf$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Count$ = 12						; size = 4
??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z PROC ; std::get_temporary_buffer<ScoreCityEntry>, COMDAT

; 19   : 	{	// get raw temporary buffer of up to _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 20   : 	_Ty _FARQ *_Pbuf;
; 21   : 
; 22   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jg	SHORT $LN7@get_tempor

; 23   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN6@get_tempor
$LN7@get_tempor:

; 24   : 	else if (((size_t)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN6@get_tempor

; 25   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T256527[ebp], 0
	lea	eax, DWORD PTR $T256527[ebp]
	push	eax
	lea	ecx, DWORD PTR $T256523[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T256523[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T256523[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN6@get_tempor:

; 26   : 
; 27   : 	for (_Pbuf = 0; 0 < _Count; _Count /= 2)

	mov	DWORD PTR __Pbuf$[ebp], 0
	jmp	SHORT $LN4@get_tempor
$LN3@get_tempor:
	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN4@get_tempor:
	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN2@get_tempor

; 28   : 		if ((_Pbuf = (_Ty _FARQ *)operator new(
; 29   : 			(_SIZT)_Count * sizeof (_Ty), nothrow)) != 0)

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR __Pbuf$[ebp], eax
	cmp	DWORD PTR __Pbuf$[ebp], 0
	je	SHORT $LN1@get_tempor

; 30   : 			break;

	jmp	SHORT $LN2@get_tempor
$LN1@get_tempor:

; 31   : 
; 32   : 	return (pair<_Ty _FARQ *, _PDFT>(_Pbuf, _Count));

	jmp	SHORT $LN3@get_tempor
$LN2@get_tempor:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Pbuf$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN9@get_tempor:

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ENDP ; std::get_temporary_buffer<ScoreCityEntry>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T256743 = -76						; size = 4
$T256731 = -72						; size = 4
$T256706 = -68						; size = 4
$T256705 = -64						; size = 4
$T256704 = -60						; size = 4
$T256668 = -54						; size = 1
$T256667 = -53						; size = 1
$T256666 = -52						; size = 4
$T256665 = -48						; size = 4
$T256664 = -44						; size = 4
$T256623 = -40						; size = 4
__Cat$256676 = -32					; size = 1
$T256673 = -31						; size = 1
$T256672 = -30						; size = 1
$T256671 = -29						; size = 1
$T256574 = -28						; size = 4
$T256533 = -24						; size = 4
__First1$230262 = -20					; size = 4
__Val$230251 = -16					; size = 8
__Next1$230250 = -8					; size = 4
__Next$230246 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z PROC ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>, COMDAT

; 3123 : 	{	// insertion sort [_First, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 3124 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$230246[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$230246[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$230246[ebp], edx
	mov	eax, DWORD PTR __Next$230246[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_

; 3126 : 			{	// order next element
; 3127 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$230246[ebp]
	mov	DWORD PTR __Next1$230250[ebp], ecx

; 3128 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$230246[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$230251[ebp], eax
	mov	DWORD PTR __Val$230251[ebp+4], ecx

; 3129 : 
; 3130 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256574[ebp], edx
	mov	eax, DWORD PTR $T256574[ebp]
	mov	ecx, DWORD PTR __Val$230251[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN5@Insertion_

; 3131 : 				{	// found new earliest element, move to front
; 3132 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$230250[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$230250[ebp], ecx
	mov	edx, DWORD PTR __Next1$230250[ebp]
	mov	DWORD PTR $T256706[ebp], edx
	mov	eax, DWORD PTR __Next$230246[ebp]
	mov	DWORD PTR $T256705[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T256704[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T256671[ebp], dl
	mov	al, BYTE PTR __Cat$256676[ebp]
	mov	BYTE PTR $T256672[ebp], al
	mov	cl, BYTE PTR $T256671[ebp]
	mov	BYTE PTR $T256668[ebp], cl
	mov	dl, BYTE PTR $T256673[ebp]
	mov	BYTE PTR $T256667[ebp], dl
	mov	eax, DWORD PTR $T256706[ebp]
	mov	DWORD PTR $T256666[ebp], eax
	mov	ecx, DWORD PTR $T256705[ebp]
	mov	DWORD PTR $T256665[ebp], ecx
	mov	edx, DWORD PTR $T256704[ebp]
	mov	DWORD PTR $T256664[ebp], edx
$LN47@Insertion_:
	mov	eax, DWORD PTR $T256664[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T256665[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN43@Insertion_
	mov	ecx, DWORD PTR $T256665[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T256665[ebp], ecx
	mov	edx, DWORD PTR $T256665[ebp]
	mov	DWORD PTR $T256623[ebp], edx
	mov	eax, DWORD PTR $T256666[ebp]
	sub	eax, 8
	mov	DWORD PTR $T256666[ebp], eax
	mov	ecx, DWORD PTR $T256623[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T256666[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN47@Insertion_
$LN43@Insertion_:
	mov	edx, DWORD PTR $T256666[ebp]
	mov	DWORD PTR $T256533[ebp], edx

; 3133 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$230251[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$230251[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 3134 : 				}
; 3135 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 3136 : 				{	// look for insertion point after first
; 3137 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$230250[ebp]
	mov	DWORD PTR __First1$230262[ebp], eax

; 3138 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3139 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$230262[ebp]
	mov	DWORD PTR __Next1$230250[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$230262[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$230262[ebp], edx
	mov	eax, DWORD PTR __First1$230262[ebp]
	mov	DWORD PTR $T256731[ebp], eax
	mov	ecx, DWORD PTR $T256731[ebp]
	mov	edx, DWORD PTR __Val$230251[ebp+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN89@Insertion_

; 3140 : 					*_Next1 = *_First1;	// move hole down

	mov	edx, DWORD PTR __First1$230262[ebp]
	mov	DWORD PTR $T256743[ebp], edx
	mov	eax, DWORD PTR $T256743[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Next1$230250[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Insertion_

; 3141 : 				*_Next1 = _Val;	// insert element in hole

$LN89@Insertion_:
	mov	ecx, DWORD PTR __Next1$230250[ebp]
	mov	edx, DWORD PTR __Val$230251[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val$230251[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN4@Insertion_:

; 3142 : 				}
; 3143 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 3144 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ENDP ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z$0
__ehfuncinfo$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
tv94 = -160						; size = 4
$T256955 = -156						; size = 4
__Next$256958 = -152					; size = 4
$T256774 = -24						; size = 4
$T256763 = -20						; size = 4
$T256762 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>, COMDAT

; 5285 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T256762[ebp], al
	movzx	ecx, BYTE PTR $T256762[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T256763[ebp], esp
	mov	DWORD PTR $T256774[ebp], edx
	mov	eax, DWORD PTR $T256774[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T256774[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T256774[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T256774[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T256774[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T256774[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
	add	esp, 44					; 0000002cH

; 5287 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN1@Unchecked_@3
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$256958[ebp], eax
	jmp	SHORT $LN85@Unchecked_@3
$LN84@Unchecked_@3:
	mov	ecx, DWORD PTR __Next$256958[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$256958[ebp], ecx
$LN85@Unchecked_@3:
	mov	edx, DWORD PTR __Next$256958[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN83@Unchecked_@3
	jmp	SHORT $LN84@Unchecked_@3
$LN83@Unchecked_@3:
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T256955[ebp], eax
	mov	ecx, DWORD PTR $T256955[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Unchecked_@3:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
PUBLIC	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z$0
__ehfuncinfo$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	ENDS
;	COMDAT ??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z
_TEXT	SEGMENT
tv135 = -48						; size = 4
tv134 = -44						; size = 4
$T257008 = -40						; size = 4
__Next$257011 = -36					; size = 4
$T257000 = -32						; size = 4
__Cat$256986 = -25					; size = 1
$T256982 = -24						; size = 4
$T256978 = -20						; size = 4
$T256977 = -15						; size = 1
$T256976 = -14						; size = 1
$T256975 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z PROC ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T256982[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T256975[ebp], al
	mov	cl, BYTE PTR __Cat$256986[ebp]
	mov	BYTE PTR $T256976[ebp], cl
	movzx	edx, BYTE PTR $T256975[ebp]
	push	edx
	movzx	eax, BYTE PTR $T256976[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T256977[ebp]
	push	ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T256978[ebp], esp
	mov	DWORD PTR $T257000[ebp], edx
	mov	eax, DWORD PTR $T257000[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T257000[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T257000[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T257000[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T257000[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T257000[ebp]
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
	add	esp, 44					; 0000002cH
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR $T256982[ebp]
	or	ecx, 1
	mov	DWORD PTR $T256982[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN19@unchecked_@4
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$257011[ebp], edx
	jmp	SHORT $LN17@unchecked_@4
$LN16@unchecked_@4:
	mov	eax, DWORD PTR __Next$257011[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$257011[ebp], eax
$LN17@unchecked_@4:
	mov	ecx, DWORD PTR __Next$257011[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN15@unchecked_@4
	jmp	SHORT $LN16@unchecked_@4
$LN15@unchecked_@4:
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T257008[ebp], edx
	mov	eax, DWORD PTR $T257008[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN19@unchecked_@4:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3607 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ENDP ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
PUBLIC	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
PUBLIC	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
PUBLIC	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
tv180 = -256						; size = 4
tv179 = -252						; size = 4
tv176 = -248						; size = 4
tv175 = -244						; size = 4
$T257373 = -236						; size = 4
$T257372 = -232						; size = 4
$T257371 = -228						; size = 4
$T257349 = -221						; size = 1
$T257348 = -220						; size = 4
$T257347 = -216						; size = 4
$T257346 = -212						; size = 4
$T257351 = -205						; size = 1
$T257310 = -204						; size = 4
$T257309 = -200						; size = 4
$T257284 = -194						; size = 1
$T257283 = -193						; size = 1
$T257282 = -192						; size = 4
$T257281 = -188						; size = 4
__Cat$257291 = -180					; size = 1
$T257288 = -179						; size = 1
$T257287 = -178						; size = 1
$T257286 = -177						; size = 1
$T257238 = -176						; size = 4
$T257234 = -172						; size = 4
$T257230 = -168						; size = 4
$T257229 = -164						; size = 4
__Cat$257224 = -156					; size = 1
$T257221 = -155						; size = 1
$T257220 = -154						; size = 1
$T257219 = -153						; size = 1
$T257194 = -152						; size = 4
__Next$257197 = -148					; size = 4
$T257186 = -144						; size = 4
$T257173 = -132						; size = 4
$T257172 = -128						; size = 4
$T257148 = -122						; size = 1
$T257147 = -121						; size = 1
$T257146 = -120						; size = 4
$T257145 = -116						; size = 4
$T257144 = -112						; size = 4
__Cat$257155 = -104					; size = 1
$T257152 = -103						; size = 1
$T257151 = -102						; size = 1
$T257150 = -101						; size = 1
$T257102 = -100						; size = 4
$T257098 = -96						; size = 4
$T257094 = -92						; size = 4
$T257093 = -88						; size = 4
__Cat$257088 = -80					; size = 1
$T257085 = -79						; size = 1
$T257084 = -78						; size = 1
$T257083 = -77						; size = 1
$T257058 = -76						; size = 4
__Next$257066 = -72					; size = 4
$T257050 = -68						; size = 4
$T257033 = -56						; size = 4
$T257032 = -52						; size = 20
$T257031 = -32						; size = 4
$T257030 = -28						; size = 4
$T257029 = -24						; size = 20
$T257028 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Mid$ = 16						; size = 4
__Last$ = 20						; size = 4
__Count1$ = 24						; size = 4
__Count2$ = 28						; size = 4
__Tempbuf$ = 32						; size = 4
??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z PROC ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>, COMDAT

; 2683 : 	{	// rotate [_First, _Last) using temp buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H

; 2684 : 	if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	mov	eax, DWORD PTR __Count1$[ebp]
	cmp	eax, DWORD PTR __Count2$[ebp]
	jg	$LN4@Buffered_r
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count1$[ebp], eax
	jg	$LN4@Buffered_r

; 2685 : 		{	// buffer left partition, then copy parts
; 2686 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T257028[ebp], esp
	mov	DWORD PTR $T257050[ebp], eax
	mov	ecx, DWORD PTR $T257050[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T257050[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T257050[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T257050[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T257050[ebp]
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR $T257050[ebp]
	mov	DWORD PTR tv175[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T257029[ebp]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv176[ebp], eax
	cmp	DWORD PTR $T257029[ebp], 0
	je	SHORT $LN24@Buffered_r
	mov	eax, DWORD PTR $T257029[ebp]
	mov	DWORD PTR __Next$257066[ebp], eax
	jmp	SHORT $LN22@Buffered_r
$LN21@Buffered_r:
	mov	ecx, DWORD PTR __Next$257066[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$257066[ebp], ecx
$LN22@Buffered_r:
	mov	edx, DWORD PTR __Next$257066[ebp]
	cmp	edx, DWORD PTR $T257029[ebp+8]
	je	SHORT $LN20@Buffered_r
	jmp	SHORT $LN21@Buffered_r
$LN20@Buffered_r:
	mov	eax, DWORD PTR $T257029[ebp]
	mov	DWORD PTR $T257058[ebp], eax
	mov	ecx, DWORD PTR $T257058[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@Buffered_r:

; 2687 : 		_STDEXT unchecked_copy(_Mid, _Last, _First);

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257094[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T257093[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257083[ebp], cl
	mov	dl, BYTE PTR __Cat$257088[ebp]
	mov	BYTE PTR $T257084[ebp], dl
	movzx	eax, BYTE PTR $T257083[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T257084[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T257085[ebp]
	push	edx
	mov	eax, DWORD PTR $T257094[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257093[ebp]
	push	edx
	lea	eax, DWORD PTR $T257030[ebp]
	push	eax
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH

; 2688 : 		return (_STDEXT unchecked_copy_backward(_Tempbuf._First(), _Tempbuf._Last(),
; 2689 : 			_Last));

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T257098[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T257102[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T257173[ebp], ecx
	mov	edx, DWORD PTR $T257102[ebp]
	mov	DWORD PTR $T257172[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T257150[ebp], al
	mov	cl, BYTE PTR __Cat$257155[ebp]
	mov	BYTE PTR $T257151[ebp], cl
	mov	dl, BYTE PTR $T257150[ebp]
	mov	BYTE PTR $T257148[ebp], dl
	mov	al, BYTE PTR $T257152[ebp]
	mov	BYTE PTR $T257147[ebp], al
	mov	ecx, DWORD PTR $T257173[ebp]
	mov	DWORD PTR $T257146[ebp], ecx
	mov	edx, DWORD PTR $T257098[ebp]
	mov	DWORD PTR $T257145[ebp], edx
	mov	eax, DWORD PTR $T257172[ebp]
	mov	DWORD PTR $T257144[ebp], eax
$LN47@Buffered_r:
	mov	ecx, DWORD PTR $T257144[ebp]
	cmp	ecx, DWORD PTR $T257145[ebp]
	je	SHORT $LN46@Buffered_r
	mov	edx, DWORD PTR $T257145[ebp]
	sub	edx, 8
	mov	DWORD PTR $T257145[ebp], edx
	mov	eax, DWORD PTR $T257146[ebp]
	sub	eax, 8
	mov	DWORD PTR $T257146[ebp], eax
	mov	ecx, DWORD PTR $T257145[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T257146[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN47@Buffered_r
$LN46@Buffered_r:
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T257146[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@Buffered_r
	jmp	$LN5@Buffered_r
$LN4@Buffered_r:

; 2690 : 		}
; 2691 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	DWORD PTR __Count2$[ebp], eax
	jg	$LN2@Buffered_r

; 2692 : 		{	// buffer right partition, then copy parts
; 2693 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T257031[ebp], esp
	mov	DWORD PTR $T257186[ebp], eax
	mov	ecx, DWORD PTR $T257186[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T257186[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T257186[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T257186[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T257186[ebp]
	mov	eax, DWORD PTR __Tempbuf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR $T257186[ebp]
	mov	DWORD PTR tv179[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T257032[ebp]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv180[ebp], eax
	cmp	DWORD PTR $T257032[ebp], 0
	je	SHORT $LN71@Buffered_r
	mov	eax, DWORD PTR $T257032[ebp]
	mov	DWORD PTR __Next$257197[ebp], eax
	jmp	SHORT $LN69@Buffered_r
$LN68@Buffered_r:
	mov	ecx, DWORD PTR __Next$257197[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$257197[ebp], ecx
$LN69@Buffered_r:
	mov	edx, DWORD PTR __Next$257197[ebp]
	cmp	edx, DWORD PTR $T257032[ebp+8]
	je	SHORT $LN67@Buffered_r
	jmp	SHORT $LN68@Buffered_r
$LN67@Buffered_r:
	mov	eax, DWORD PTR $T257032[ebp]
	mov	DWORD PTR $T257194[ebp], eax
	mov	ecx, DWORD PTR $T257194[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN71@Buffered_r:

; 2694 : 		_STDEXT unchecked_copy_backward(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T257230[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257229[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T257219[ebp], cl
	mov	dl, BYTE PTR __Cat$257224[ebp]
	mov	BYTE PTR $T257220[ebp], dl
	movzx	eax, BYTE PTR $T257219[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T257220[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T257221[ebp]
	push	edx
	mov	eax, DWORD PTR $T257230[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257229[ebp]
	push	edx
	lea	eax, DWORD PTR $T257033[ebp]
	push	eax
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH

; 2695 : 		return (_STDEXT unchecked_copy(_Tempbuf._First(), _Tempbuf._Last(), _First));

	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T257234[ebp], eax
	mov	ecx, DWORD PTR __Tempbuf$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T257238[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257310[ebp], ecx
	mov	edx, DWORD PTR $T257238[ebp]
	mov	DWORD PTR $T257309[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T257286[ebp], al
	mov	cl, BYTE PTR __Cat$257291[ebp]
	mov	BYTE PTR $T257287[ebp], cl
	mov	dl, BYTE PTR $T257286[ebp]
	mov	BYTE PTR $T257284[ebp], dl
	mov	al, BYTE PTR $T257288[ebp]
	mov	BYTE PTR $T257283[ebp], al
	mov	ecx, DWORD PTR $T257310[ebp]
	mov	DWORD PTR $T257282[ebp], ecx
	mov	edx, DWORD PTR $T257309[ebp]
	mov	DWORD PTR $T257281[ebp], edx
	jmp	SHORT $LN95@Buffered_r
$LN94@Buffered_r:
	mov	eax, DWORD PTR $T257282[ebp]
	add	eax, 8
	mov	DWORD PTR $T257282[ebp], eax
	mov	ecx, DWORD PTR $T257281[ebp]
	add	ecx, 8
	mov	DWORD PTR $T257281[ebp], ecx
$LN95@Buffered_r:
	mov	edx, DWORD PTR $T257281[ebp]
	cmp	edx, DWORD PTR $T257234[ebp]
	je	SHORT $LN93@Buffered_r
	mov	eax, DWORD PTR $T257281[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T257282[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN94@Buffered_r
$LN93@Buffered_r:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T257282[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@Buffered_r

; 2696 : 		}
; 2697 : 	else

	jmp	$LN5@Buffered_r
$LN2@Buffered_r:

; 2698 : 		{	// buffer too small, rotate in place
; 2699 : 		std::rotate(_First, _Mid, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T257373[ebp], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR $T257372[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257371[ebp], edx
	mov	eax, DWORD PTR $T257371[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T257372[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN127@Buffered_r
	mov	ecx, DWORD PTR $T257372[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T257373[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN127@Buffered_r
	mov	dl, BYTE PTR $T257351[ebp]
	mov	BYTE PTR $T257349[ebp], dl
	mov	eax, DWORD PTR $T257373[ebp]
	mov	DWORD PTR $T257348[ebp], eax
	mov	ecx, DWORD PTR $T257372[ebp]
	mov	DWORD PTR $T257347[ebp], ecx
	mov	edx, DWORD PTR $T257371[ebp]
	mov	DWORD PTR $T257346[ebp], edx
	push	0
	push	0
	mov	eax, DWORD PTR $T257348[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257347[ebp]
	push	ecx
	mov	edx, DWORD PTR $T257346[ebp]
	push	edx
	call	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	add	esp, 20					; 00000014H

; 2700 : 		std::advance(_First, _Count2);

$LN127@Buffered_r:
	mov	eax, DWORD PTR __Count2$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __First$[ebp], edx

; 2701 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@Buffered_r:

; 2702 : 		}
; 2703 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ENDP ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T257619 = -76						; size = 4
$T257607 = -72						; size = 4
$T257582 = -68						; size = 4
$T257581 = -64						; size = 4
$T257580 = -60						; size = 4
$T257544 = -54						; size = 1
$T257543 = -53						; size = 1
$T257542 = -52						; size = 4
$T257541 = -48						; size = 4
$T257540 = -44						; size = 4
$T257499 = -40						; size = 4
__Cat$257552 = -32					; size = 1
$T257549 = -31						; size = 1
$T257548 = -30						; size = 1
$T257547 = -29						; size = 1
$T257450 = -28						; size = 4
$T257409 = -24						; size = 4
__First1$230572 = -20					; size = 4
__Val$230568 = -16					; size = 8
__Next1$230567 = -8					; size = 4
__Next$230563 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z PROC ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>, COMDAT

; 3123 : 	{	// insertion sort [_First, _Last), using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 3124 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_@2

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$230563[ebp], ecx
$LN7@Insertion_@2:
	mov	edx, DWORD PTR __Next$230563[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$230563[ebp], edx
	mov	eax, DWORD PTR __Next$230563[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN9@Insertion_@2

; 3126 : 			{	// order next element
; 3127 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$230563[ebp]
	mov	DWORD PTR __Next1$230567[ebp], ecx

; 3128 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$230563[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$230568[ebp], eax
	mov	DWORD PTR __Val$230568[ebp+4], ecx

; 3129 : 
; 3130 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257450[ebp], edx
	mov	eax, DWORD PTR $T257450[ebp]
	mov	ecx, DWORD PTR __Val$230568[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setl	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN5@Insertion_@2

; 3131 : 				{	// found new earliest element, move to front
; 3132 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$230567[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$230567[ebp], ecx
	mov	edx, DWORD PTR __Next1$230567[ebp]
	mov	DWORD PTR $T257582[ebp], edx
	mov	eax, DWORD PTR __Next$230563[ebp]
	mov	DWORD PTR $T257581[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T257580[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T257547[ebp], dl
	mov	al, BYTE PTR __Cat$257552[ebp]
	mov	BYTE PTR $T257548[ebp], al
	mov	cl, BYTE PTR $T257547[ebp]
	mov	BYTE PTR $T257544[ebp], cl
	mov	dl, BYTE PTR $T257549[ebp]
	mov	BYTE PTR $T257543[ebp], dl
	mov	eax, DWORD PTR $T257582[ebp]
	mov	DWORD PTR $T257542[ebp], eax
	mov	ecx, DWORD PTR $T257581[ebp]
	mov	DWORD PTR $T257541[ebp], ecx
	mov	edx, DWORD PTR $T257580[ebp]
	mov	DWORD PTR $T257540[ebp], edx
$LN47@Insertion_@2:
	mov	eax, DWORD PTR $T257540[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T257541[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN43@Insertion_@2
	mov	ecx, DWORD PTR $T257541[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T257541[ebp], ecx
	mov	edx, DWORD PTR $T257541[ebp]
	mov	DWORD PTR $T257499[ebp], edx
	mov	eax, DWORD PTR $T257542[ebp]
	sub	eax, 8
	mov	DWORD PTR $T257542[ebp], eax
	mov	ecx, DWORD PTR $T257499[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T257542[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN47@Insertion_@2
$LN43@Insertion_@2:
	mov	edx, DWORD PTR $T257542[ebp]
	mov	DWORD PTR $T257409[ebp], edx

; 3133 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$230568[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$230568[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 3134 : 				}
; 3135 : 			else

	jmp	SHORT $LN4@Insertion_@2
$LN5@Insertion_@2:

; 3136 : 				{	// look for insertion point after first
; 3137 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$230567[ebp]
	mov	DWORD PTR __First1$230572[ebp], eax

; 3138 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3139 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@2
$LN2@Insertion_@2:
	mov	ecx, DWORD PTR __First1$230572[ebp]
	mov	DWORD PTR __Next1$230567[ebp], ecx
$LN3@Insertion_@2:
	mov	edx, DWORD PTR __First1$230572[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$230572[ebp], edx
	mov	eax, DWORD PTR __First1$230572[ebp]
	mov	DWORD PTR $T257607[ebp], eax
	mov	ecx, DWORD PTR $T257607[ebp]
	mov	edx, DWORD PTR __Val$230568[ebp+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN89@Insertion_@2

; 3140 : 					*_Next1 = *_First1;	// move hole down

	mov	edx, DWORD PTR __First1$230572[ebp]
	mov	DWORD PTR $T257619[ebp], edx
	mov	eax, DWORD PTR $T257619[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Next1$230567[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Insertion_@2

; 3141 : 				*_Next1 = _Val;	// insert element in hole

$LN89@Insertion_@2:
	mov	ecx, DWORD PTR __Next1$230567[ebp]
	mov	edx, DWORD PTR __Val$230568[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val$230568[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN4@Insertion_@2:

; 3142 : 				}
; 3143 : 			}

	jmp	$LN7@Insertion_@2
$LN9@Insertion_@2:

; 3144 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ENDP ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z$0
__ehfuncinfo$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
tv94 = -160						; size = 4
$T257831 = -156						; size = 4
__Next$257834 = -152					; size = 4
$T257650 = -24						; size = 4
$T257639 = -20						; size = 4
$T257638 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>, COMDAT

; 5285 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T257638[ebp], al
	movzx	ecx, BYTE PTR $T257638[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Chunk$[ebp]
	push	ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T257639[ebp], esp
	mov	DWORD PTR $T257650[ebp], edx
	mov	eax, DWORD PTR $T257650[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T257650[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T257650[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T257650[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T257650[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T257650[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
	add	esp, 44					; 0000002cH

; 5287 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN1@Unchecked_@4
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$257834[ebp], eax
	jmp	SHORT $LN85@Unchecked_@4
$LN84@Unchecked_@4:
	mov	ecx, DWORD PTR __Next$257834[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$257834[ebp], ecx
$LN85@Unchecked_@4:
	mov	edx, DWORD PTR __Next$257834[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN83@Unchecked_@4
	jmp	SHORT $LN84@Unchecked_@4
$LN83@Unchecked_@4:
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T257831[ebp], eax
	mov	ecx, DWORD PTR $T257831[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Unchecked_@4:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T257876 = -28						; size = 4
__Vptr$257874 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$257874[ebp], ecx
	mov	edx, DWORD PTR __Vptr$257874[ebp]
	mov	DWORD PTR $T257876[ebp], edx
	cmp	DWORD PTR $T257876[ebp], 0
	je	SHORT $LN18@Uninit_cop
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T257876[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T257876[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop
$LN18@Uninit_cop:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T257925 = -28						; size = 4
__Vptr$257923 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$257923[ebp], ecx
	mov	edx, DWORD PTR __Vptr$257923[ebp]
	mov	DWORD PTR $T257925[ebp], edx
	cmp	DWORD PTR $T257925[ebp], 0
	je	SHORT $LN18@Uninit_cop@2
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T257925[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR $T257925[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@2
$LN18@Uninit_cop@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@2:
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -48						; size = 4
tv68 = -44						; size = 4
$T257999 = -40						; size = 4
$T257985 = -32						; size = 4
$T257984 = -28						; size = 4
__Vptr$257982 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 68					; 00000044H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$257982[ebp], ecx
	mov	edx, DWORD PTR __Vptr$257982[ebp]
	mov	DWORD PTR $T257985[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T257985[ebp], 0
	je	SHORT $LN18@Uninit_cop@3
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257985[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN19@Uninit_cop@3
$LN18@Uninit_cop@3:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_cop@3:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T257984[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 68					; 00000044H
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T257999[ebp], edx
	mov	ecx, DWORD PTR $T257999[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN29@Uninit_cop@3
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN29@Uninit_cop@3:
	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$257982[ebp]
	push	eax
	mov	ecx, DWORD PTR $T257985[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Odtp
;	COMDAT ??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@4

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@4:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T258066 = -28						; size = 4
__Vptr$258072 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@5
$LN5@Uninit_cop@5:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@5:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@5

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$258072[ebp], ecx
	mov	edx, DWORD PTR __Vptr$258072[ebp]
	mov	DWORD PTR $T258066[ebp], edx
	cmp	DWORD PTR $T258066[ebp], 0
	je	SHORT $LN18@Uninit_cop@5
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T258066[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T258066[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@5
$LN18@Uninit_cop@5:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@5:
	jmp	SHORT $LN5@Uninit_cop@5
$LN4@Uninit_cop@5:
	jmp	SHORT $LN10@Uninit_cop@5
__catch$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@5
$LN2@Uninit_cop@5:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@5:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@5

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@5
$LN1@Uninit_cop@5:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@5:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
PUBLIC	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv187 = -180						; size = 4
tv186 = -176						; size = 4
tv182 = -172						; size = 4
tv181 = -168						; size = 4
tv177 = -164						; size = 4
tv176 = -160						; size = 4
$T258300 = -156						; size = 4
__Next$258303 = -152					; size = 4
$T258281 = -148						; size = 4
__Next$258284 = -144					; size = 4
$T258273 = -140						; size = 4
$T258220 = -132						; size = 4
__Next$258223 = -128					; size = 4
$T258212 = -124						; size = 4
$T258192 = -120						; size = 4
__Next$258195 = -116					; size = 4
$T258184 = -112						; size = 4
$T258180 = -108						; size = 4
$T258098 = -100						; size = 20
$T258097 = -80						; size = 4
$T258096 = -76						; size = 20
$T258095 = -56						; size = 4
$T258094 = -52						; size = 20
$T258093 = -32						; size = 4
__Mid1$230826 = -28					; size = 4
__Mid2$230807 = -24					; size = 4
__Mid1$230806 = -20					; size = 4
__Chunk2$230802 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$230802[ebp], eax
	jmp	SHORT $LN5@Chunked_me
$LN4@Chunked_me:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$230802[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me:
	mov	edx, DWORD PTR __Chunk2$230802[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	$LN3@Chunked_me

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$230806[ebp], eax

; 3438 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$230806[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$230806[ebp], eax

; 3439 : 		_BidIt _Mid2 = _Mid1;

	mov	ecx, DWORD PTR __Mid1$230806[ebp]
	mov	DWORD PTR __Mid2$230807[ebp], ecx

; 3440 : 		std::advance(_Mid2, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid2$230807[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid2$230807[ebp], ecx

; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T258093[ebp], esp
	mov	DWORD PTR $T258180[ebp], eax
	mov	ecx, DWORD PTR $T258180[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T258180[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T258180[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T258180[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T258180[ebp]
	mov	eax, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T258180[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	edx, DWORD PTR __Mid2$230807[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$230806[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid1$230806[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T258094[ebp]
	push	eax
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
	add	esp, 44					; 0000002cH
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR $T258184[ebp], ecx
	mov	edx, DWORD PTR $T258184[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Dest$[ebp+16], eax
	cmp	DWORD PTR $T258094[ebp], 0
	je	SHORT $LN45@Chunked_me
	mov	ecx, DWORD PTR $T258094[ebp]
	mov	DWORD PTR __Next$258195[ebp], ecx
	jmp	SHORT $LN43@Chunked_me
$LN42@Chunked_me:
	mov	edx, DWORD PTR __Next$258195[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$258195[ebp], edx
$LN43@Chunked_me:
	mov	eax, DWORD PTR __Next$258195[ebp]
	cmp	eax, DWORD PTR $T258094[ebp+8]
	je	SHORT $LN41@Chunked_me
	jmp	SHORT $LN42@Chunked_me
$LN41@Chunked_me:
	mov	ecx, DWORD PTR $T258094[ebp]
	mov	DWORD PTR $T258192[ebp], ecx
	mov	edx, DWORD PTR $T258192[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN45@Chunked_me:

; 3443 : 		_First = _Mid2;

	mov	eax, DWORD PTR __Mid2$230807[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 3444 : 		}

	jmp	$LN4@Chunked_me
$LN3@Chunked_me:

; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Chunk$[ebp]
	jg	$LN2@Chunked_me

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T258095[ebp], esp
	mov	DWORD PTR $T258212[ebp], edx
	mov	eax, DWORD PTR $T258212[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T258212[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T258212[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T258212[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T258212[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T258212[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T258096[ebp]
	push	eax
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv182[ebp], eax
	cmp	DWORD PTR $T258096[ebp], 0
	je	SHORT $LN59@Chunked_me
	mov	ecx, DWORD PTR $T258096[ebp]
	mov	DWORD PTR __Next$258223[ebp], ecx
	jmp	SHORT $LN57@Chunked_me
$LN56@Chunked_me:
	mov	edx, DWORD PTR __Next$258223[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$258223[ebp], edx
$LN57@Chunked_me:
	mov	eax, DWORD PTR __Next$258223[ebp]
	cmp	eax, DWORD PTR $T258096[ebp+8]
	je	SHORT $LN55@Chunked_me
	jmp	SHORT $LN56@Chunked_me
$LN55@Chunked_me:
	mov	ecx, DWORD PTR $T258096[ebp]
	mov	DWORD PTR $T258220[ebp], ecx
	mov	edx, DWORD PTR $T258220[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN59@Chunked_me:

; 3448 : 	else

	jmp	$LN1@Chunked_me
$LN2@Chunked_me:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$230826[ebp], eax

; 3451 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$230826[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$230826[ebp], eax

; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T258097[ebp], esp
	mov	DWORD PTR $T258273[ebp], edx
	mov	eax, DWORD PTR $T258273[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T258273[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T258273[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T258273[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T258273[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T258273[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$230826[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$230826[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T258098[ebp]
	push	edx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
	add	esp, 44					; 0000002cH
	mov	DWORD PTR tv187[ebp], eax
	cmp	DWORD PTR $T258098[ebp], 0
	je	SHORT $LN1@Chunked_me
	mov	eax, DWORD PTR $T258098[ebp]
	mov	DWORD PTR __Next$258284[ebp], eax
	jmp	SHORT $LN81@Chunked_me
$LN80@Chunked_me:
	mov	ecx, DWORD PTR __Next$258284[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$258284[ebp], ecx
$LN81@Chunked_me:
	mov	edx, DWORD PTR __Next$258284[ebp]
	cmp	edx, DWORD PTR $T258098[ebp+8]
	je	SHORT $LN79@Chunked_me
	jmp	SHORT $LN80@Chunked_me
$LN79@Chunked_me:
	mov	eax, DWORD PTR $T258098[ebp]
	mov	DWORD PTR $T258281[ebp], eax
	mov	ecx, DWORD PTR $T258281[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Chunked_me:

; 3454 : 		}
; 3455 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN6@Chunked_me
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$258303[ebp], edx
	jmp	SHORT $LN91@Chunked_me
$LN90@Chunked_me:
	mov	eax, DWORD PTR __Next$258303[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$258303[ebp], eax
$LN91@Chunked_me:
	mov	ecx, DWORD PTR __Next$258303[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN89@Chunked_me
	jmp	SHORT $LN90@Chunked_me
$LN89@Chunked_me:
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T258300[ebp], edx
	mov	eax, DWORD PTR $T258300[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@Chunked_me:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
PUBLIC	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
;	COMDAT ??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T258736 = -180						; size = 4
$T258735 = -176						; size = 4
$T258734 = -172						; size = 4
$T258733 = -168						; size = 4
$T258728 = -100						; size = 1
$T258727 = -99						; size = 1
$T258528 = -96						; size = 4
$T258527 = -92						; size = 4
$T258502 = -86						; size = 1
$T258501 = -85						; size = 1
$T258500 = -84						; size = 4
$T258499 = -80						; size = 4
__Cat$258509 = -75					; size = 1
$T258506 = -74						; size = 1
$T258505 = -73						; size = 1
$T258504 = -72						; size = 1
$T258322 = -28						; size = 4
$T258321 = -24						; size = 4
$T258320 = -20						; size = 4
__Mid1$230858 = -16					; size = 4
__Mid2$230841 = -12					; size = 4
__Mid1$230834 = -8					; size = 4
__Chunk2$230830 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Chunk$ = 20						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$230830[ebp], eax
	jmp	SHORT $LN5@Chunked_me@2
$LN4@Chunked_me@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$230830[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me@2:
	mov	edx, DWORD PTR __Chunk2$230830[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	SHORT $LN3@Chunked_me@2

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$230834[ebp], eax

; 3438 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$230834[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$230834[ebp], eax

; 3439 : 		_BidIt _Mid2 = _Mid1;

	mov	ecx, DWORD PTR __Mid1$230834[ebp]
	mov	DWORD PTR __Mid2$230841[ebp], ecx

; 3440 : 		std::advance(_Mid2, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid2$230841[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid2$230841[ebp], ecx

; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid2$230841[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$230834[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$230834[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T258320[ebp]
	push	edx
	call	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[ebp], eax

; 3443 : 		_First = _Mid2;

	mov	ecx, DWORD PTR __Mid2$230841[ebp]
	mov	DWORD PTR __First$[ebp], ecx

; 3444 : 		}

	jmp	SHORT $LN4@Chunked_me@2
$LN3@Chunked_me@2:

; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	mov	edx, DWORD PTR __Count$[ebp]
	cmp	edx, DWORD PTR __Chunk$[ebp]
	jg	SHORT $LN2@Chunked_me@2

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T258528[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T258527[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T258504[ebp], dl
	mov	al, BYTE PTR __Cat$258509[ebp]
	mov	BYTE PTR $T258505[ebp], al
	mov	cl, BYTE PTR $T258504[ebp]
	mov	BYTE PTR $T258502[ebp], cl
	mov	dl, BYTE PTR $T258506[ebp]
	mov	BYTE PTR $T258501[ebp], dl
	mov	eax, DWORD PTR $T258528[ebp]
	mov	DWORD PTR $T258500[ebp], eax
	mov	ecx, DWORD PTR $T258527[ebp]
	mov	DWORD PTR $T258499[ebp], ecx
	jmp	SHORT $LN59@Chunked_me@2
$LN58@Chunked_me@2:
	mov	edx, DWORD PTR $T258500[ebp]
	add	edx, 8
	mov	DWORD PTR $T258500[ebp], edx
	mov	eax, DWORD PTR $T258499[ebp]
	add	eax, 8
	mov	DWORD PTR $T258499[ebp], eax
$LN59@Chunked_me@2:
	mov	ecx, DWORD PTR $T258499[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN57@Chunked_me@2
	mov	edx, DWORD PTR $T258499[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T258500[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN58@Chunked_me@2
$LN57@Chunked_me@2:
	mov	eax, DWORD PTR $T258500[ebp]
	mov	DWORD PTR $T258321[ebp], eax

; 3448 : 	else

	jmp	SHORT $LN6@Chunked_me@2
$LN2@Chunked_me@2:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$230858[ebp], ecx

; 3451 : 		std::advance(_Mid1, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid1$230858[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid1$230858[ebp], ecx

; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T258736[ebp], edx
	mov	eax, DWORD PTR __Mid1$230858[ebp]
	mov	DWORD PTR $T258735[ebp], eax
	mov	ecx, DWORD PTR __Mid1$230858[ebp]
	mov	DWORD PTR $T258734[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T258733[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T258727[ebp], al
	movzx	ecx, BYTE PTR $T258727[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T258728[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258736[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR $T258735[ebp]
	push	eax
	mov	ecx, DWORD PTR $T258734[ebp]
	push	ecx
	mov	edx, DWORD PTR $T258733[ebp]
	push	edx
	lea	eax, DWORD PTR $T258322[ebp]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
$LN6@Chunked_me@2:

; 3454 : 		}
; 3455 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	ENDS
;	COMDAT ??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T258805 = -40						; size = 4
__Next$258808 = -36					; size = 4
$T258770 = -20						; size = 4
$T258741 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T258741[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN15@Copy_opt
$LN9@Copy_opt:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN15@Copy_opt:
	mov	ecx, DWORD PTR __First$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Last$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_opt

; 2472 : 		*_Dest = *_First;

	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T258770[ebp], edx
	mov	eax, DWORD PTR $T258770[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
	jmp	SHORT $LN9@Copy_opt
$LN1@Copy_opt:

; 2473 : 	return (_Dest);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T258741[ebp]
	or	ecx, 1
	mov	DWORD PTR $T258741[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN43@Copy_opt
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$258808[ebp], edx
	jmp	SHORT $LN41@Copy_opt
$LN40@Copy_opt:
	mov	eax, DWORD PTR __Next$258808[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$258808[ebp], eax
$LN41@Copy_opt:
	mov	ecx, DWORD PTR __Next$258808[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN39@Copy_opt
	jmp	SHORT $LN40@Copy_opt
$LN39@Copy_opt:
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T258805[ebp], edx
	mov	eax, DWORD PTR $T258805[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN43@Copy_opt:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2474 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T259081 = -80						; size = 4
$T259080 = -76						; size = 4
$T259079 = -72						; size = 4
$T259042 = -66						; size = 1
$T259041 = -65						; size = 1
$T259040 = -64						; size = 4
$T259039 = -60						; size = 4
$T259038 = -56						; size = 4
$T259004 = -52						; size = 4
__Cat$259049 = -44					; size = 1
$T259047 = -43						; size = 1
$T259046 = -42						; size = 1
$T259045 = -41						; size = 1
$T258958 = -40						; size = 4
$T258957 = -36						; size = 4
$T258932 = -30						; size = 1
$T258931 = -29						; size = 1
$T258930 = -28						; size = 4
$T258929 = -24						; size = 4
__Cat$258940 = -16					; size = 1
$T258937 = -15						; size = 1
$T258936 = -14						; size = 1
$T258935 = -13						; size = 1
$T258862 = -12						; size = 4
$T258850 = -8						; size = 4
$T258825 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	jmp	SHORT $LN5@Merge
$LN4@Merge:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
$LN5@Merge:
	mov	ecx, DWORD PTR __First1$[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN3@Merge
	mov	edx, DWORD PTR __First2$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last2$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@Merge

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T258850[ebp], eax
	mov	ecx, DWORD PTR $T258850[ebp]
	mov	edx, DWORD PTR __First1$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN34@Merge

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T258862[ebp], eax
	mov	ecx, DWORD PTR $T258862[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First2$[ebp]
	add	edx, 8
	mov	DWORD PTR __First2$[ebp], edx

; 2600 : 		else

	jmp	SHORT $LN1@Merge

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN34@Merge:
	mov	eax, DWORD PTR __First1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __First1$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First1$[ebp], ecx
$LN1@Merge:
	jmp	$LN4@Merge
$LN3@Merge:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T258958[ebp], edx
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T258957[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T258935[ebp], cl
	mov	dl, BYTE PTR __Cat$258940[ebp]
	mov	BYTE PTR $T258936[ebp], dl
	mov	al, BYTE PTR $T258935[ebp]
	mov	BYTE PTR $T258932[ebp], al
	mov	cl, BYTE PTR $T258937[ebp]
	mov	BYTE PTR $T258931[ebp], cl
	mov	edx, DWORD PTR $T258958[ebp]
	mov	DWORD PTR $T258930[ebp], edx
	mov	eax, DWORD PTR $T258957[ebp]
	mov	DWORD PTR $T258929[ebp], eax
	jmp	SHORT $LN46@Merge
$LN45@Merge:
	mov	ecx, DWORD PTR $T258930[ebp]
	add	ecx, 8
	mov	DWORD PTR $T258930[ebp], ecx
	mov	edx, DWORD PTR $T258929[ebp]
	add	edx, 8
	mov	DWORD PTR $T258929[ebp], edx
$LN46@Merge:
	mov	eax, DWORD PTR $T258929[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	je	SHORT $LN44@Merge
	mov	ecx, DWORD PTR $T258929[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T258930[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN45@Merge
$LN44@Merge:
	mov	edx, DWORD PTR $T258930[ebp]
	mov	DWORD PTR $T258825[ebp], edx
	mov	eax, DWORD PTR $T258825[ebp]
	mov	DWORD PTR __Dest$[ebp], eax

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259081[ebp], ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	mov	DWORD PTR $T259080[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T259079[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T259045[ebp], cl
	mov	dl, BYTE PTR __Cat$259049[ebp]
	mov	BYTE PTR $T259046[ebp], dl
	mov	al, BYTE PTR $T259045[ebp]
	mov	BYTE PTR $T259042[ebp], al
	mov	cl, BYTE PTR $T259047[ebp]
	mov	BYTE PTR $T259041[ebp], cl
	mov	edx, DWORD PTR $T259081[ebp]
	mov	DWORD PTR $T259040[ebp], edx
	mov	eax, DWORD PTR $T259080[ebp]
	mov	DWORD PTR $T259039[ebp], eax
	mov	ecx, DWORD PTR $T259079[ebp]
	mov	DWORD PTR $T259038[ebp], ecx
	jmp	SHORT $LN76@Merge
$LN64@Merge:
	mov	edx, DWORD PTR $T259040[ebp]
	add	edx, 8
	mov	DWORD PTR $T259040[ebp], edx
	mov	eax, DWORD PTR $T259038[ebp]
	add	eax, 8
	mov	DWORD PTR $T259038[ebp], eax
$LN76@Merge:
	mov	ecx, DWORD PTR $T259038[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T259039[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN63@Merge
	mov	edx, DWORD PTR $T259038[ebp]
	mov	DWORD PTR $T259004[ebp], edx
	mov	eax, DWORD PTR $T259004[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T259040[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN64@Merge
$LN63@Merge:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T259040[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T259307 = -80						; size = 4
$T259295 = -76						; size = 4
$T259278 = -72						; size = 4
$T259277 = -68						; size = 4
$T259276 = -64						; size = 4
$T259240 = -58						; size = 1
$T259239 = -57						; size = 1
$T259238 = -56						; size = 4
$T259237 = -52						; size = 4
$T259236 = -48						; size = 4
$T259195 = -44						; size = 4
__Cat$259247 = -36					; size = 1
$T259244 = -35						; size = 1
$T259243 = -34						; size = 1
$T259242 = -33						; size = 1
$T259157 = -32						; size = 4
$T259156 = -28						; size = 4
$T259132 = -22						; size = 1
$T259131 = -21						; size = 1
$T259130 = -20						; size = 4
$T259129 = -16						; size = 4
$T259128 = -12						; size = 4
__Cat$259139 = -4					; size = 1
$T259136 = -3						; size = 1
$T259135 = -2						; size = 1
$T259134 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 2839 : 	{	// merge backwards to _Dest, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 2840 : 	for (; ; )
; 2841 : 		if (_First1 == _Last1)

$LN11@Merge_back:
	mov	eax, DWORD PTR __First1$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last1$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@Merge_back

; 2842 : 			return (_STDEXT unchecked_copy_backward(_First2, _Last2, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259157[ebp], eax
	mov	ecx, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T259156[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T259134[ebp], dl
	mov	al, BYTE PTR __Cat$259139[ebp]
	mov	BYTE PTR $T259135[ebp], al
	mov	cl, BYTE PTR $T259134[ebp]
	mov	BYTE PTR $T259132[ebp], cl
	mov	dl, BYTE PTR $T259136[ebp]
	mov	BYTE PTR $T259131[ebp], dl
	mov	eax, DWORD PTR $T259157[ebp]
	mov	DWORD PTR $T259130[ebp], eax
	mov	ecx, DWORD PTR __Last2$[ebp]
	mov	DWORD PTR $T259129[ebp], ecx
	mov	edx, DWORD PTR $T259156[ebp]
	mov	DWORD PTR $T259128[ebp], edx
$LN20@Merge_back:
	mov	eax, DWORD PTR $T259128[ebp]
	cmp	eax, DWORD PTR $T259129[ebp]
	je	SHORT $LN19@Merge_back
	mov	ecx, DWORD PTR $T259129[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T259129[ebp], ecx
	mov	edx, DWORD PTR $T259130[ebp]
	sub	edx, 8
	mov	DWORD PTR $T259130[ebp], edx
	mov	eax, DWORD PTR $T259129[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T259130[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN20@Merge_back
$LN19@Merge_back:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T259130[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@Merge_back
	jmp	$LN5@Merge_back
$LN6@Merge_back:

; 2843 : 		else if (_First2 == _Last2)

	mov	eax, DWORD PTR __First2$[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
	jne	$LN4@Merge_back

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259278[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T259277[ebp], edx
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T259276[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T259242[ebp], cl
	mov	dl, BYTE PTR __Cat$259247[ebp]
	mov	BYTE PTR $T259243[ebp], dl
	mov	al, BYTE PTR $T259242[ebp]
	mov	BYTE PTR $T259240[ebp], al
	mov	cl, BYTE PTR $T259244[ebp]
	mov	BYTE PTR $T259239[ebp], cl
	mov	edx, DWORD PTR $T259278[ebp]
	mov	DWORD PTR $T259238[ebp], edx
	mov	eax, DWORD PTR $T259277[ebp]
	mov	DWORD PTR $T259237[ebp], eax
	mov	ecx, DWORD PTR $T259276[ebp]
	mov	DWORD PTR $T259236[ebp], ecx
$LN41@Merge_back:
	mov	edx, DWORD PTR $T259236[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T259237[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN37@Merge_back
	mov	eax, DWORD PTR $T259237[ebp]
	sub	eax, 8
	mov	DWORD PTR $T259237[ebp], eax
	mov	ecx, DWORD PTR $T259237[ebp]
	mov	DWORD PTR $T259195[ebp], ecx
	mov	edx, DWORD PTR $T259238[ebp]
	sub	edx, 8
	mov	DWORD PTR $T259238[ebp], edx
	mov	eax, DWORD PTR $T259195[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T259238[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN41@Merge_back
$LN37@Merge_back:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T259238[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@Merge_back
	jmp	SHORT $LN5@Merge_back
$LN4@Merge_back:

; 2845 : 		else if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))

	mov	eax, DWORD PTR __Last2$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Last2$[ebp], eax
	mov	ecx, DWORD PTR __Last1$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last1$[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T259295[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	mov	ecx, DWORD PTR $T259295[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Merge_back

; 2846 : 			*--_Dest = *_Last1, ++_Last2;

	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T259307[ebp], edx
	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR $T259307[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Last2$[ebp]
	add	edx, 8
	mov	DWORD PTR __Last2$[ebp], edx

; 2847 : 		else

	jmp	SHORT $LN5@Merge_back
$LN2@Merge_back:

; 2848 : 			*--_Dest = *_Last2, ++_Last1;

	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __Last2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Last1$[ebp]
	add	edx, 8
	mov	DWORD PTR __Last1$[ebp], edx
$LN5@Merge_back:
	jmp	$LN11@Merge_back
$LN9@Merge_back:

; 2849 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z
_TEXT	SEGMENT
$T259427 = -36						; size = 4
$T259385 = -28						; size = 4
$T259372 = -24						; size = 4
$T259371 = -20						; size = 4
__Count2$230916 = -12					; size = 4
__Mid$230917 = -8					; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z PROC ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>, COMDAT

; 2288 : 	{	// find first element not before _Val, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 2289 : 	_DEBUG_POINTER(_Pred);
; 2290 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2291 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 2292 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259385[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T259372[ebp], ecx
	mov	edx, DWORD PTR $T259385[ebp]
	mov	DWORD PTR $T259371[ebp], edx
	mov	eax, DWORD PTR $T259372[ebp]
	sub	eax, DWORD PTR $T259371[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Lower_boun:

; 2293 : 	for (; 0 < _Count; )

	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Lower_boun

; 2294 : 		{	// divide and conquer, find half that contains answer
; 2295 : 		_Diff _Count2 = _Count / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$230916[ebp], eax

; 2296 : 		_FwdIt _Mid = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$230917[ebp], ecx

; 2297 : 		std::advance(_Mid, _Count2);

	mov	edx, DWORD PTR __Count2$230916[ebp]
	mov	eax, DWORD PTR __Mid$230917[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid$230917[ebp], ecx

; 2298 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2299 : 
; 2300 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))

	mov	edx, DWORD PTR __Mid$230917[ebp]
	mov	DWORD PTR $T259427[ebp], edx
	mov	eax, DWORD PTR $T259427[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Lower_boun

; 2301 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	mov	edx, DWORD PTR __Mid$230917[ebp]
	add	edx, 8
	mov	DWORD PTR __Mid$230917[ebp], edx
	mov	eax, DWORD PTR __Mid$230917[ebp]
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __Count2$230916[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx

; 2302 : 		else

	jmp	SHORT $LN1@Lower_boun
$LN2@Lower_boun:

; 2303 : 			_Count = _Count2;

	mov	eax, DWORD PTR __Count2$230916[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Lower_boun:

; 2304 : 		}

	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:

; 2305 : 	return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2306 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ENDP ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z
_TEXT	SEGMENT
$T259518 = -36						; size = 4
$T259476 = -28						; size = 4
$T259463 = -24						; size = 4
$T259462 = -20						; size = 4
__Count2$230926 = -12					; size = 4
__Mid$230927 = -8					; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z PROC ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>, COMDAT

; 2359 : 	{	// find first element that _Val is before, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 2360 : 	_DEBUG_POINTER(_Pred);
; 2361 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2362 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 2363 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259476[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T259463[ebp], ecx
	mov	edx, DWORD PTR $T259476[ebp]
	mov	DWORD PTR $T259462[ebp], edx
	mov	eax, DWORD PTR $T259463[ebp]
	sub	eax, DWORD PTR $T259462[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Upper_boun:

; 2364 : 	for (; 0 < _Count; )

	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Upper_boun

; 2365 : 		{	// divide and conquer, find half that contains answer
; 2366 : 		_Diff _Count2 = _Count / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$230926[ebp], eax

; 2367 : 		_FwdIt _Mid = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$230927[ebp], ecx

; 2368 : 		std::advance(_Mid, _Count2);

	mov	edx, DWORD PTR __Count2$230926[ebp]
	mov	eax, DWORD PTR __Mid$230927[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid$230927[ebp], ecx

; 2369 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2370 : 
; 2371 : 		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))

	mov	edx, DWORD PTR __Mid$230927[ebp]
	mov	DWORD PTR $T259518[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR $T259518[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Upper_boun

; 2372 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	mov	edx, DWORD PTR __Mid$230927[ebp]
	add	edx, 8
	mov	DWORD PTR __Mid$230927[ebp], edx
	mov	eax, DWORD PTR __Mid$230927[ebp]
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __Count2$230926[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx

; 2373 : 		else

	jmp	SHORT $LN1@Upper_boun
$LN2@Upper_boun:

; 2374 : 			_Count = _Count2;

	mov	eax, DWORD PTR __Count2$230926[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Upper_boun:

; 2375 : 		}

	jmp	SHORT $LN4@Upper_boun
$LN3@Upper_boun:

; 2376 : 	return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2377 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ENDP ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv187 = -180						; size = 4
tv186 = -176						; size = 4
tv182 = -172						; size = 4
tv181 = -168						; size = 4
tv177 = -164						; size = 4
tv176 = -160						; size = 4
$T259739 = -156						; size = 4
__Next$259742 = -152					; size = 4
$T259720 = -148						; size = 4
__Next$259723 = -144					; size = 4
$T259712 = -140						; size = 4
$T259659 = -132						; size = 4
__Next$259662 = -128					; size = 4
$T259651 = -124						; size = 4
$T259631 = -120						; size = 4
__Next$259634 = -116					; size = 4
$T259623 = -112						; size = 4
$T259619 = -108						; size = 4
$T259537 = -100						; size = 20
$T259536 = -80						; size = 4
$T259535 = -76						; size = 20
$T259534 = -56						; size = 4
$T259533 = -52						; size = 20
$T259532 = -32						; size = 4
__Mid1$231109 = -28					; size = 4
__Mid2$231090 = -24					; size = 4
__Mid1$231089 = -20					; size = 4
__Chunk2$231085 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$231085[ebp], eax
	jmp	SHORT $LN5@Chunked_me@3
$LN4@Chunked_me@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$231085[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me@3:
	mov	edx, DWORD PTR __Chunk2$231085[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	$LN3@Chunked_me@3

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$231089[ebp], eax

; 3438 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$231089[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$231089[ebp], eax

; 3439 : 		_BidIt _Mid2 = _Mid1;

	mov	ecx, DWORD PTR __Mid1$231089[ebp]
	mov	DWORD PTR __Mid2$231090[ebp], ecx

; 3440 : 		std::advance(_Mid2, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid2$231090[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid2$231090[ebp], ecx

; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T259532[ebp], esp
	mov	DWORD PTR $T259619[ebp], eax
	mov	ecx, DWORD PTR $T259619[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T259619[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T259619[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T259619[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T259619[ebp]
	mov	eax, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T259619[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	edx, DWORD PTR __Mid2$231090[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$231089[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid1$231089[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T259533[ebp]
	push	eax
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
	add	esp, 44					; 0000002cH
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR $T259623[ebp], ecx
	mov	edx, DWORD PTR $T259623[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR __Dest$[ebp+16], eax
	cmp	DWORD PTR $T259533[ebp], 0
	je	SHORT $LN45@Chunked_me@3
	mov	ecx, DWORD PTR $T259533[ebp]
	mov	DWORD PTR __Next$259634[ebp], ecx
	jmp	SHORT $LN43@Chunked_me@3
$LN42@Chunked_me@3:
	mov	edx, DWORD PTR __Next$259634[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$259634[ebp], edx
$LN43@Chunked_me@3:
	mov	eax, DWORD PTR __Next$259634[ebp]
	cmp	eax, DWORD PTR $T259533[ebp+8]
	je	SHORT $LN41@Chunked_me@3
	jmp	SHORT $LN42@Chunked_me@3
$LN41@Chunked_me@3:
	mov	ecx, DWORD PTR $T259533[ebp]
	mov	DWORD PTR $T259631[ebp], ecx
	mov	edx, DWORD PTR $T259631[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN45@Chunked_me@3:

; 3443 : 		_First = _Mid2;

	mov	eax, DWORD PTR __Mid2$231090[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 3444 : 		}

	jmp	$LN4@Chunked_me@3
$LN3@Chunked_me@3:

; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Chunk$[ebp]
	jg	$LN2@Chunked_me@3

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T259534[ebp], esp
	mov	DWORD PTR $T259651[ebp], edx
	mov	eax, DWORD PTR $T259651[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T259651[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T259651[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T259651[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T259651[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T259651[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR $T259535[ebp]
	push	eax
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv182[ebp], eax
	cmp	DWORD PTR $T259535[ebp], 0
	je	SHORT $LN59@Chunked_me@3
	mov	ecx, DWORD PTR $T259535[ebp]
	mov	DWORD PTR __Next$259662[ebp], ecx
	jmp	SHORT $LN57@Chunked_me@3
$LN56@Chunked_me@3:
	mov	edx, DWORD PTR __Next$259662[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$259662[ebp], edx
$LN57@Chunked_me@3:
	mov	eax, DWORD PTR __Next$259662[ebp]
	cmp	eax, DWORD PTR $T259535[ebp+8]
	je	SHORT $LN55@Chunked_me@3
	jmp	SHORT $LN56@Chunked_me@3
$LN55@Chunked_me@3:
	mov	ecx, DWORD PTR $T259535[ebp]
	mov	DWORD PTR $T259659[ebp], ecx
	mov	edx, DWORD PTR $T259659[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN59@Chunked_me@3:

; 3448 : 	else

	jmp	$LN1@Chunked_me@3
$LN2@Chunked_me@3:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$231109[ebp], eax

; 3451 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$231109[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$231109[ebp], eax

; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	movzx	ecx, BYTE PTR __Pred$[ebp]
	push	ecx
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	DWORD PTR $T259536[ebp], esp
	mov	DWORD PTR $T259712[ebp], edx
	mov	eax, DWORD PTR $T259712[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T259712[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR $T259712[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR $T259712[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR $T259712[ebp]
	mov	edx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR $T259712[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$231109[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$231109[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T259537[ebp]
	push	edx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
	add	esp, 44					; 0000002cH
	mov	DWORD PTR tv187[ebp], eax
	cmp	DWORD PTR $T259537[ebp], 0
	je	SHORT $LN1@Chunked_me@3
	mov	eax, DWORD PTR $T259537[ebp]
	mov	DWORD PTR __Next$259723[ebp], eax
	jmp	SHORT $LN81@Chunked_me@3
$LN80@Chunked_me@3:
	mov	ecx, DWORD PTR __Next$259723[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$259723[ebp], ecx
$LN81@Chunked_me@3:
	mov	edx, DWORD PTR __Next$259723[ebp]
	cmp	edx, DWORD PTR $T259537[ebp+8]
	je	SHORT $LN79@Chunked_me@3
	jmp	SHORT $LN80@Chunked_me@3
$LN79@Chunked_me@3:
	mov	eax, DWORD PTR $T259537[ebp]
	mov	DWORD PTR $T259720[ebp], eax
	mov	ecx, DWORD PTR $T259720[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Chunked_me@3:

; 3454 : 		}
; 3455 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN6@Chunked_me@3
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$259742[ebp], edx
	jmp	SHORT $LN91@Chunked_me@3
$LN90@Chunked_me@3:
	mov	eax, DWORD PTR __Next$259742[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$259742[ebp], eax
$LN91@Chunked_me@3:
	mov	ecx, DWORD PTR __Next$259742[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN89@Chunked_me@3
	jmp	SHORT $LN90@Chunked_me@3
$LN89@Chunked_me@3:
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259739[ebp], edx
	mov	eax, DWORD PTR $T259739[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@Chunked_me@3:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
PUBLIC	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
;	COMDAT ??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T260175 = -180						; size = 4
$T260174 = -176						; size = 4
$T260173 = -172						; size = 4
$T260172 = -168						; size = 4
$T260167 = -100						; size = 1
$T260166 = -99						; size = 1
$T259967 = -96						; size = 4
$T259966 = -92						; size = 4
$T259941 = -86						; size = 1
$T259940 = -85						; size = 1
$T259939 = -84						; size = 4
$T259938 = -80						; size = 4
__Cat$259949 = -75					; size = 1
$T259946 = -74						; size = 1
$T259945 = -73						; size = 1
$T259944 = -72						; size = 1
$T259761 = -28						; size = 4
$T259760 = -24						; size = 4
$T259759 = -20						; size = 4
__Mid1$231135 = -16					; size = 4
__Mid2$231118 = -12					; size = 4
__Mid1$231117 = -8					; size = 4
__Chunk2$231113 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Chunk$ = 20						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	eax, DWORD PTR __Chunk$[ebp]
	shl	eax, 1
	mov	DWORD PTR __Chunk2$231113[ebp], eax
	jmp	SHORT $LN5@Chunked_me@4
$LN4@Chunked_me@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Chunk2$231113[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN5@Chunked_me@4:
	mov	edx, DWORD PTR __Chunk2$231113[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jg	SHORT $LN3@Chunked_me@4

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$231117[ebp], eax

; 3438 : 		std::advance(_Mid1, _Chunk);

	mov	ecx, DWORD PTR __Chunk$[ebp]
	mov	edx, DWORD PTR __Mid1$231117[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Mid1$231117[ebp], eax

; 3439 : 		_BidIt _Mid2 = _Mid1;

	mov	ecx, DWORD PTR __Mid1$231117[ebp]
	mov	DWORD PTR __Mid2$231118[ebp], ecx

; 3440 : 		std::advance(_Mid2, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid2$231118[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid2$231118[ebp], ecx

; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	movzx	edx, BYTE PTR __Pred$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid2$231118[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid1$231117[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid1$231117[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T259759[ebp]
	push	edx
	call	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Dest$[ebp], eax

; 3443 : 		_First = _Mid2;

	mov	ecx, DWORD PTR __Mid2$231118[ebp]
	mov	DWORD PTR __First$[ebp], ecx

; 3444 : 		}

	jmp	SHORT $LN4@Chunked_me@4
$LN3@Chunked_me@4:

; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	mov	edx, DWORD PTR __Count$[ebp]
	cmp	edx, DWORD PTR __Chunk$[ebp]
	jg	SHORT $LN2@Chunked_me@4

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T259967[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T259966[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T259944[ebp], dl
	mov	al, BYTE PTR __Cat$259949[ebp]
	mov	BYTE PTR $T259945[ebp], al
	mov	cl, BYTE PTR $T259944[ebp]
	mov	BYTE PTR $T259941[ebp], cl
	mov	dl, BYTE PTR $T259946[ebp]
	mov	BYTE PTR $T259940[ebp], dl
	mov	eax, DWORD PTR $T259967[ebp]
	mov	DWORD PTR $T259939[ebp], eax
	mov	ecx, DWORD PTR $T259966[ebp]
	mov	DWORD PTR $T259938[ebp], ecx
	jmp	SHORT $LN59@Chunked_me@4
$LN58@Chunked_me@4:
	mov	edx, DWORD PTR $T259939[ebp]
	add	edx, 8
	mov	DWORD PTR $T259939[ebp], edx
	mov	eax, DWORD PTR $T259938[ebp]
	add	eax, 8
	mov	DWORD PTR $T259938[ebp], eax
$LN59@Chunked_me@4:
	mov	ecx, DWORD PTR $T259938[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN57@Chunked_me@4
	mov	edx, DWORD PTR $T259938[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T259939[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN58@Chunked_me@4
$LN57@Chunked_me@4:
	mov	eax, DWORD PTR $T259939[ebp]
	mov	DWORD PTR $T259760[ebp], eax

; 3448 : 	else

	jmp	SHORT $LN6@Chunked_me@4
$LN2@Chunked_me@4:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid1$231135[ebp], ecx

; 3451 : 		std::advance(_Mid1, _Chunk);

	mov	edx, DWORD PTR __Chunk$[ebp]
	mov	eax, DWORD PTR __Mid1$231135[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid1$231135[ebp], ecx

; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260175[ebp], edx
	mov	eax, DWORD PTR __Mid1$231135[ebp]
	mov	DWORD PTR $T260174[ebp], eax
	mov	ecx, DWORD PTR __Mid1$231135[ebp]
	mov	DWORD PTR $T260173[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T260172[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T260166[ebp], al
	movzx	ecx, BYTE PTR $T260166[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T260167[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260175[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR $T260174[ebp]
	push	eax
	mov	ecx, DWORD PTR $T260173[ebp]
	push	ecx
	mov	edx, DWORD PTR $T260172[ebp]
	push	edx
	lea	eax, DWORD PTR $T259761[ebp]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
$LN6@Chunked_me@4:

; 3454 : 		}
; 3455 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T260434 = -80						; size = 4
$T260433 = -76						; size = 4
$T260432 = -72						; size = 4
$T260395 = -66						; size = 1
$T260394 = -65						; size = 1
$T260393 = -64						; size = 4
$T260392 = -60						; size = 4
$T260391 = -56						; size = 4
$T260357 = -52						; size = 4
__Cat$260402 = -44					; size = 1
$T260399 = -43						; size = 1
$T260398 = -42						; size = 1
$T260397 = -41						; size = 1
$T260311 = -40						; size = 4
$T260310 = -36						; size = 4
$T260285 = -30						; size = 1
$T260284 = -29						; size = 1
$T260283 = -28						; size = 4
$T260282 = -24						; size = 4
__Cat$260292 = -16					; size = 1
$T260289 = -15						; size = 1
$T260288 = -14						; size = 1
$T260287 = -13						; size = 1
$T260215 = -12						; size = 4
$T260203 = -8						; size = 4
$T260178 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	jmp	SHORT $LN5@Merge@2
$LN4@Merge@2:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
$LN5@Merge@2:
	mov	ecx, DWORD PTR __First1$[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN3@Merge@2
	mov	edx, DWORD PTR __First2$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last2$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@Merge@2

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T260203[ebp], eax
	mov	ecx, DWORD PTR $T260203[ebp]
	mov	edx, DWORD PTR __First1$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN34@Merge@2

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T260215[ebp], eax
	mov	ecx, DWORD PTR $T260215[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First2$[ebp]
	add	edx, 8
	mov	DWORD PTR __First2$[ebp], edx

; 2600 : 		else

	jmp	SHORT $LN1@Merge@2

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN34@Merge@2:
	mov	eax, DWORD PTR __First1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __First1$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First1$[ebp], ecx
$LN1@Merge@2:
	jmp	$LN4@Merge@2
$LN3@Merge@2:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260311[ebp], edx
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T260310[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T260287[ebp], cl
	mov	dl, BYTE PTR __Cat$260292[ebp]
	mov	BYTE PTR $T260288[ebp], dl
	mov	al, BYTE PTR $T260287[ebp]
	mov	BYTE PTR $T260285[ebp], al
	mov	cl, BYTE PTR $T260289[ebp]
	mov	BYTE PTR $T260284[ebp], cl
	mov	edx, DWORD PTR $T260311[ebp]
	mov	DWORD PTR $T260283[ebp], edx
	mov	eax, DWORD PTR $T260310[ebp]
	mov	DWORD PTR $T260282[ebp], eax
	jmp	SHORT $LN46@Merge@2
$LN45@Merge@2:
	mov	ecx, DWORD PTR $T260283[ebp]
	add	ecx, 8
	mov	DWORD PTR $T260283[ebp], ecx
	mov	edx, DWORD PTR $T260282[ebp]
	add	edx, 8
	mov	DWORD PTR $T260282[ebp], edx
$LN46@Merge@2:
	mov	eax, DWORD PTR $T260282[ebp]
	cmp	eax, DWORD PTR __Last1$[ebp]
	je	SHORT $LN44@Merge@2
	mov	ecx, DWORD PTR $T260282[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T260283[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN45@Merge@2
$LN44@Merge@2:
	mov	edx, DWORD PTR $T260283[ebp]
	mov	DWORD PTR $T260178[ebp], edx
	mov	eax, DWORD PTR $T260178[ebp]
	mov	DWORD PTR __Dest$[ebp], eax

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260434[ebp], ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	mov	DWORD PTR $T260433[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T260432[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T260397[ebp], cl
	mov	dl, BYTE PTR __Cat$260402[ebp]
	mov	BYTE PTR $T260398[ebp], dl
	mov	al, BYTE PTR $T260397[ebp]
	mov	BYTE PTR $T260395[ebp], al
	mov	cl, BYTE PTR $T260399[ebp]
	mov	BYTE PTR $T260394[ebp], cl
	mov	edx, DWORD PTR $T260434[ebp]
	mov	DWORD PTR $T260393[ebp], edx
	mov	eax, DWORD PTR $T260433[ebp]
	mov	DWORD PTR $T260392[ebp], eax
	mov	ecx, DWORD PTR $T260432[ebp]
	mov	DWORD PTR $T260391[ebp], ecx
	jmp	SHORT $LN76@Merge@2
$LN64@Merge@2:
	mov	edx, DWORD PTR $T260393[ebp]
	add	edx, 8
	mov	DWORD PTR $T260393[ebp], edx
	mov	eax, DWORD PTR $T260391[ebp]
	add	eax, 8
	mov	DWORD PTR $T260391[ebp], eax
$LN76@Merge@2:
	mov	ecx, DWORD PTR $T260391[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T260392[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN63@Merge@2
	mov	edx, DWORD PTR $T260391[ebp]
	mov	DWORD PTR $T260357[ebp], edx
	mov	eax, DWORD PTR $T260357[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T260393[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN64@Merge@2
$LN63@Merge@2:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T260393[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T260660 = -80						; size = 4
$T260648 = -76						; size = 4
$T260631 = -72						; size = 4
$T260630 = -68						; size = 4
$T260629 = -64						; size = 4
$T260593 = -58						; size = 1
$T260592 = -57						; size = 1
$T260591 = -56						; size = 4
$T260590 = -52						; size = 4
$T260589 = -48						; size = 4
$T260548 = -44						; size = 4
__Cat$260601 = -36					; size = 1
$T260598 = -35						; size = 1
$T260597 = -34						; size = 1
$T260596 = -33						; size = 1
$T260510 = -32						; size = 4
$T260509 = -28						; size = 4
$T260485 = -22						; size = 1
$T260484 = -21						; size = 1
$T260483 = -20						; size = 4
$T260482 = -16						; size = 4
$T260481 = -12						; size = 4
__Cat$260492 = -4					; size = 1
$T260489 = -3						; size = 1
$T260488 = -2						; size = 1
$T260487 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 2839 : 	{	// merge backwards to _Dest, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 2840 : 	for (; ; )
; 2841 : 		if (_First1 == _Last1)

$LN11@Merge_back@2:
	mov	eax, DWORD PTR __First1$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last1$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@Merge_back@2

; 2842 : 			return (_STDEXT unchecked_copy_backward(_First2, _Last2, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260510[ebp], eax
	mov	ecx, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T260509[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T260487[ebp], dl
	mov	al, BYTE PTR __Cat$260492[ebp]
	mov	BYTE PTR $T260488[ebp], al
	mov	cl, BYTE PTR $T260487[ebp]
	mov	BYTE PTR $T260485[ebp], cl
	mov	dl, BYTE PTR $T260489[ebp]
	mov	BYTE PTR $T260484[ebp], dl
	mov	eax, DWORD PTR $T260510[ebp]
	mov	DWORD PTR $T260483[ebp], eax
	mov	ecx, DWORD PTR __Last2$[ebp]
	mov	DWORD PTR $T260482[ebp], ecx
	mov	edx, DWORD PTR $T260509[ebp]
	mov	DWORD PTR $T260481[ebp], edx
$LN20@Merge_back@2:
	mov	eax, DWORD PTR $T260481[ebp]
	cmp	eax, DWORD PTR $T260482[ebp]
	je	SHORT $LN19@Merge_back@2
	mov	ecx, DWORD PTR $T260482[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T260482[ebp], ecx
	mov	edx, DWORD PTR $T260483[ebp]
	sub	edx, 8
	mov	DWORD PTR $T260483[ebp], edx
	mov	eax, DWORD PTR $T260482[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T260483[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN20@Merge_back@2
$LN19@Merge_back@2:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T260483[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@Merge_back@2
	jmp	$LN5@Merge_back@2
$LN6@Merge_back@2:

; 2843 : 		else if (_First2 == _Last2)

	mov	eax, DWORD PTR __First2$[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
	jne	$LN4@Merge_back@2

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260631[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T260630[ebp], edx
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T260629[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T260596[ebp], cl
	mov	dl, BYTE PTR __Cat$260601[ebp]
	mov	BYTE PTR $T260597[ebp], dl
	mov	al, BYTE PTR $T260596[ebp]
	mov	BYTE PTR $T260593[ebp], al
	mov	cl, BYTE PTR $T260598[ebp]
	mov	BYTE PTR $T260592[ebp], cl
	mov	edx, DWORD PTR $T260631[ebp]
	mov	DWORD PTR $T260591[ebp], edx
	mov	eax, DWORD PTR $T260630[ebp]
	mov	DWORD PTR $T260590[ebp], eax
	mov	ecx, DWORD PTR $T260629[ebp]
	mov	DWORD PTR $T260589[ebp], ecx
$LN41@Merge_back@2:
	mov	edx, DWORD PTR $T260589[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T260590[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN37@Merge_back@2
	mov	eax, DWORD PTR $T260590[ebp]
	sub	eax, 8
	mov	DWORD PTR $T260590[ebp], eax
	mov	ecx, DWORD PTR $T260590[ebp]
	mov	DWORD PTR $T260548[ebp], ecx
	mov	edx, DWORD PTR $T260591[ebp]
	sub	edx, 8
	mov	DWORD PTR $T260591[ebp], edx
	mov	eax, DWORD PTR $T260548[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T260591[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN41@Merge_back@2
$LN37@Merge_back@2:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T260591[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@Merge_back@2
	jmp	SHORT $LN5@Merge_back@2
$LN4@Merge_back@2:

; 2845 : 		else if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))

	mov	eax, DWORD PTR __Last2$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Last2$[ebp], eax
	mov	ecx, DWORD PTR __Last1$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last1$[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T260648[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	mov	ecx, DWORD PTR $T260648[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Merge_back@2

; 2846 : 			*--_Dest = *_Last1, ++_Last2;

	mov	edx, DWORD PTR __Last1$[ebp]
	mov	DWORD PTR $T260660[ebp], edx
	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR $T260660[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Last2$[ebp]
	add	edx, 8
	mov	DWORD PTR __Last2$[ebp], edx

; 2847 : 		else

	jmp	SHORT $LN5@Merge_back@2
$LN2@Merge_back@2:

; 2848 : 			*--_Dest = *_Last2, ++_Last1;

	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __Last2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Last1$[ebp]
	add	edx, 8
	mov	DWORD PTR __Last1$[ebp], edx
$LN5@Merge_back@2:
	jmp	$LN11@Merge_back@2
$LN9@Merge_back@2:

; 2849 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z
_TEXT	SEGMENT
$T260780 = -36						; size = 4
$T260738 = -28						; size = 4
$T260725 = -24						; size = 4
$T260724 = -20						; size = 4
__Count2$231165 = -12					; size = 4
__Mid$231166 = -8					; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z PROC ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>, COMDAT

; 2288 : 	{	// find first element not before _Val, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 2289 : 	_DEBUG_POINTER(_Pred);
; 2290 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2291 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 2292 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T260738[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T260725[ebp], ecx
	mov	edx, DWORD PTR $T260738[ebp]
	mov	DWORD PTR $T260724[ebp], edx
	mov	eax, DWORD PTR $T260725[ebp]
	sub	eax, DWORD PTR $T260724[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Lower_boun@2:

; 2293 : 	for (; 0 < _Count; )

	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Lower_boun@2

; 2294 : 		{	// divide and conquer, find half that contains answer
; 2295 : 		_Diff _Count2 = _Count / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$231165[ebp], eax

; 2296 : 		_FwdIt _Mid = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$231166[ebp], ecx

; 2297 : 		std::advance(_Mid, _Count2);

	mov	edx, DWORD PTR __Count2$231165[ebp]
	mov	eax, DWORD PTR __Mid$231166[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid$231166[ebp], ecx

; 2298 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2299 : 
; 2300 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))

	mov	edx, DWORD PTR __Mid$231166[ebp]
	mov	DWORD PTR $T260780[ebp], edx
	mov	eax, DWORD PTR $T260780[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Lower_boun@2

; 2301 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	mov	edx, DWORD PTR __Mid$231166[ebp]
	add	edx, 8
	mov	DWORD PTR __Mid$231166[ebp], edx
	mov	eax, DWORD PTR __Mid$231166[ebp]
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __Count2$231165[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx

; 2302 : 		else

	jmp	SHORT $LN1@Lower_boun@2
$LN2@Lower_boun@2:

; 2303 : 			_Count = _Count2;

	mov	eax, DWORD PTR __Count2$231165[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Lower_boun@2:

; 2304 : 		}

	jmp	SHORT $LN4@Lower_boun@2
$LN3@Lower_boun@2:

; 2305 : 	return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2306 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ENDP ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z
_TEXT	SEGMENT
$T260871 = -36						; size = 4
$T260829 = -28						; size = 4
$T260816 = -24						; size = 4
$T260815 = -20						; size = 4
__Count2$231175 = -12					; size = 4
__Mid$231176 = -8					; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z PROC ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>, COMDAT

; 2359 : 	{	// find first element that _Val is before, using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 2360 : 	_DEBUG_POINTER(_Pred);
; 2361 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2362 : 	_Diff _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 2363 : 	_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T260829[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T260816[ebp], ecx
	mov	edx, DWORD PTR $T260829[ebp]
	mov	DWORD PTR $T260815[ebp], edx
	mov	eax, DWORD PTR $T260816[ebp]
	sub	eax, DWORD PTR $T260815[ebp]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Upper_boun@2:

; 2364 : 	for (; 0 < _Count; )

	cmp	DWORD PTR __Count$[ebp], 0
	jle	SHORT $LN3@Upper_boun@2

; 2365 : 		{	// divide and conquer, find half that contains answer
; 2366 : 		_Diff _Count2 = _Count / 2;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Count2$231175[ebp], eax

; 2367 : 		_FwdIt _Mid = _First;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$231176[ebp], ecx

; 2368 : 		std::advance(_Mid, _Count2);

	mov	edx, DWORD PTR __Count2$231175[ebp]
	mov	eax, DWORD PTR __Mid$231176[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Mid$231176[ebp], ecx

; 2369 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2370 : 
; 2371 : 		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))

	mov	edx, DWORD PTR __Mid$231176[ebp]
	mov	DWORD PTR $T260871[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR $T260871[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Upper_boun@2

; 2372 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	mov	edx, DWORD PTR __Mid$231176[ebp]
	add	edx, 8
	mov	DWORD PTR __Mid$231176[ebp], edx
	mov	eax, DWORD PTR __Mid$231176[ebp]
	mov	DWORD PTR __First$[ebp], eax
	mov	ecx, DWORD PTR __Count2$231175[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Count$[ebp], edx

; 2373 : 		else

	jmp	SHORT $LN1@Upper_boun@2
$LN2@Upper_boun@2:

; 2374 : 			_Count = _Count2;

	mov	eax, DWORD PTR __Count2$231175[ebp]
	mov	DWORD PTR __Count$[ebp], eax
$LN1@Upper_boun@2:

; 2375 : 		}

	jmp	SHORT $LN4@Upper_boun@2
$LN3@Upper_boun@2:

; 2376 : 	return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2377 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ENDP ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z
_TEXT	SEGMENT
tv128 = -20						; size = 4
_this$ = -16						; size = 4
$T260895 = -12						; size = 4
__Vptr$260893 = -8					; size = 4
__Ptr$231183 = -4					; size = 4
__Val$ = 8						; size = 4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z PROC ; std::_Temp_iterator<ScoreCityEntry>::operator=, COMDAT
; _this$ = ecx

; 562  : 		{	// assign or construct value into active buffer, and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 563  : 		if (_Pbuf->_Current < _Pbuf->_Hiwater)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN2@operator@8

; 564  : 			*_Pbuf->_Current++ = _Val;	// below high water mark, assign

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+4], edx

; 565  : 		else

	jmp	SHORT $LN1@operator@8
$LN2@operator@8:

; 566  : 			{	// above high water mark, construct
; 567  : 			_SCL_SECURE_VALIDATE((_Pbuf->_Current - _Pbuf->_Begin) < _Pbuf->_Size);
; 568  : 			_Pty _Ptr = &*_Pbuf->_Current;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$231183[ebp], ecx

; 569  : 			_Construct(_Ptr, _Val);

	mov	edx, DWORD PTR __Ptr$231183[ebp]
	mov	DWORD PTR __Vptr$260893[ebp], edx
	mov	eax, DWORD PTR __Vptr$260893[ebp]
	mov	DWORD PTR $T260895[ebp], eax
	cmp	DWORD PTR $T260895[ebp], 0
	je	SHORT $LN7@operator@8
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T260895[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T260895[ebp]
	mov	DWORD PTR tv128[ebp], edx
	jmp	SHORT $LN5@operator@8
$LN7@operator@8:
	mov	DWORD PTR tv128[ebp], 0
$LN5@operator@8:

; 570  : 			_Pbuf->_Hiwater = ++_Pbuf->_Current;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], eax
$LN1@operator@8:

; 571  : 			}
; 572  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 573  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ENDP ; std::_Temp_iterator<ScoreCityEntry>::operator=
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T260926 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

$LN5@Copy_backw:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Copy_backw

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Last$[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T260926[ebp], edx
	mov	eax, DWORD PTR __Dest$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR $T260926[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN5@Copy_backw
$LN1@Copy_backw:

; 2677 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2678 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z$0
__ehfuncinfo$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
tv135 = -48						; size = 4
tv134 = -44						; size = 4
$T260973 = -40						; size = 4
__Next$260976 = -36					; size = 4
$T260965 = -32						; size = 4
$T260951 = -24						; size = 4
$T260947 = -20						; size = 4
$T260946 = -14						; size = 1
$T260945 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z PROC ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T260951[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T260945[ebp], al
	movzx	ecx, BYTE PTR $T260945[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T260946[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T260947[ebp], esp
	mov	DWORD PTR $T260965[ebp], ecx
	mov	edx, DWORD PTR $T260965[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T260965[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR $T260965[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T260965[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR $T260965[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR $T260965[ebp]
	mov	DWORD PTR tv134[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
	add	esp, 52					; 00000034H
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR $T260951[ebp]
	or	edx, 1
	mov	DWORD PTR $T260951[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN17@unchecked_@5
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$260976[ebp], eax
	jmp	SHORT $LN15@unchecked_@5
$LN14@unchecked_@5:
	mov	ecx, DWORD PTR __Next$260976[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$260976[ebp], ecx
$LN15@unchecked_@5:
	mov	edx, DWORD PTR __Next$260976[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN13@unchecked_@5
	jmp	SHORT $LN14@unchecked_@5
$LN13@unchecked_@5:
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T260973[ebp], eax
	mov	ecx, DWORD PTR $T260973[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@unchecked_@5:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5160 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ENDP ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T260994 = -2						; size = 1
$T260993 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T260993[ebp], al
	movzx	ecx, BYTE PTR $T260993[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T260994[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5160 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T261206 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN14@Copy_opt@2
$LN2@Copy_opt@2:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN14@Copy_opt@2:
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@Copy_opt@2

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T261206[ebp], eax
	mov	ecx, DWORD PTR $T261206[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Copy_opt@2
$LN1@Copy_opt@2:

; 2473 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2474 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z$0
__ehfuncinfo$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
tv135 = -48						; size = 4
tv134 = -44						; size = 4
$T261245 = -40						; size = 4
__Next$261248 = -36					; size = 4
$T261237 = -32						; size = 4
$T261223 = -24						; size = 4
$T261219 = -20						; size = 4
$T261218 = -14						; size = 1
$T261217 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z PROC ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T261223[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T261217[ebp], al
	movzx	ecx, BYTE PTR $T261217[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T261218[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T261219[ebp], esp
	mov	DWORD PTR $T261237[ebp], ecx
	mov	edx, DWORD PTR $T261237[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T261237[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR $T261237[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T261237[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR $T261237[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR $T261237[ebp]
	mov	DWORD PTR tv134[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
	add	esp, 52					; 00000034H
	mov	DWORD PTR tv135[ebp], eax
	mov	edx, DWORD PTR $T261223[ebp]
	or	edx, 1
	mov	DWORD PTR $T261223[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN17@unchecked_@6
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$261248[ebp], eax
	jmp	SHORT $LN15@unchecked_@6
$LN14@unchecked_@6:
	mov	ecx, DWORD PTR __Next$261248[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$261248[ebp], ecx
$LN15@unchecked_@6:
	mov	edx, DWORD PTR __Next$261248[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN13@unchecked_@6
	jmp	SHORT $LN14@unchecked_@6
$LN13@unchecked_@6:
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T261245[ebp], eax
	mov	ecx, DWORD PTR $T261245[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@unchecked_@6:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5160 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ENDP ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T261266 = -2						; size = 1
$T261265 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T261265[ebp], al
	movzx	ecx, BYTE PTR $T261265[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T261266[ebp]
	push	edx
	movzx	eax, BYTE PTR __Pred$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last1$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5160 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv197 = -128						; size = 4
tv196 = -124						; size = 4
tv192 = -120						; size = 4
tv191 = -116						; size = 4
$T261616 = -112						; size = 4
__Next$261619 = -108					; size = 4
$T261608 = -104						; size = 4
$T261588 = -100						; size = 4
__Next$261591 = -96					; size = 4
$T261580 = -92						; size = 4
$T261576 = -88						; size = 4
$T261540 = -72						; size = 4
$T261504 = -56						; size = 4
$T261492 = -52						; size = 4
$T261483 = -48						; size = 4
$T261454 = -44						; size = 4
$T261448 = -40						; size = 4
$T261447 = -36						; size = 20
$T261446 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T261454[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

$LN16@Merge@3:
	mov	eax, DWORD PTR __First1$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last1$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN3@Merge@3
	mov	ecx, DWORD PTR __First2$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Last2$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Merge@3

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	edx, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T261483[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T261492[ebp], eax
	mov	ecx, DWORD PTR $T261492[ebp]
	mov	edx, DWORD PTR $T261483[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN56@Merge@3

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T261504[ebp], eax
	mov	ecx, DWORD PTR $T261504[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
	mov	edx, DWORD PTR __First2$[ebp]
	add	edx, 8
	mov	DWORD PTR __First2$[ebp], edx

; 2600 : 		else

	jmp	SHORT $LN1@Merge@3

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN56@Merge@3:
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T261540[ebp], eax
	mov	ecx, DWORD PTR $T261540[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
	mov	edx, DWORD PTR __First1$[ebp]
	add	edx, 8
	mov	DWORD PTR __First1$[ebp], edx
$LN1@Merge@3:
	jmp	$LN16@Merge@3
$LN3@Merge@3:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T261446[ebp], esp
	mov	DWORD PTR $T261576[ebp], eax
	mov	ecx, DWORD PTR $T261576[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T261576[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T261576[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T261576[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T261576[ebp]
	mov	eax, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T261576[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T261447[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv192[ebp], eax
	mov	edx, DWORD PTR tv192[ebp]
	mov	DWORD PTR $T261580[ebp], edx
	mov	eax, DWORD PTR $T261580[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Dest$[ebp+16], ecx
	cmp	DWORD PTR $T261447[ebp], 0
	je	SHORT $LN84@Merge@3
	mov	edx, DWORD PTR $T261447[ebp]
	mov	DWORD PTR __Next$261591[ebp], edx
	jmp	SHORT $LN82@Merge@3
$LN81@Merge@3:
	mov	eax, DWORD PTR __Next$261591[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$261591[ebp], eax
$LN82@Merge@3:
	mov	ecx, DWORD PTR __Next$261591[ebp]
	cmp	ecx, DWORD PTR $T261447[ebp+8]
	je	SHORT $LN80@Merge@3
	jmp	SHORT $LN81@Merge@3
$LN80@Merge@3:
	mov	edx, DWORD PTR $T261447[ebp]
	mov	DWORD PTR $T261588[ebp], edx
	mov	eax, DWORD PTR $T261588[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN84@Merge@3:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T261448[ebp], esp
	mov	DWORD PTR $T261608[ebp], ecx
	mov	edx, DWORD PTR $T261608[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T261608[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR $T261608[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T261608[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR $T261608[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR $T261608[ebp]
	mov	DWORD PTR tv196[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR $T261454[ebp]
	or	eax, 1
	mov	DWORD PTR $T261454[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN98@Merge@3
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$261619[ebp], ecx
	jmp	SHORT $LN96@Merge@3
$LN95@Merge@3:
	mov	edx, DWORD PTR __Next$261619[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$261619[ebp], edx
$LN96@Merge@3:
	mov	eax, DWORD PTR __Next$261619[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN94@Merge@3
	jmp	SHORT $LN95@Merge@3
$LN94@Merge@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T261616[ebp], ecx
	mov	edx, DWORD PTR $T261616[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN98@Merge@3:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T261807 = -60						; size = 4
$T261806 = -56						; size = 4
$T261781 = -50						; size = 1
$T261780 = -49						; size = 1
$T261779 = -48						; size = 4
$T261778 = -44						; size = 4
__Cat$261788 = -36					; size = 1
$T261785 = -35						; size = 1
$T261784 = -34						; size = 1
$T261783 = -33						; size = 1
$T261735 = -32						; size = 4
$T261734 = -28						; size = 4
$T261709 = -22						; size = 1
$T261708 = -21						; size = 1
$T261707 = -20						; size = 4
$T261706 = -16						; size = 4
__Cat$261716 = -8					; size = 1
$T261713 = -7						; size = 1
$T261712 = -6						; size = 1
$T261711 = -5						; size = 1
$T261636 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	jmp	SHORT $LN5@Merge@4
$LN4@Merge@4:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
$LN5@Merge@4:
	mov	ecx, DWORD PTR __First1$[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN3@Merge@4
	mov	edx, DWORD PTR __First2$[ebp]
	cmp	edx, DWORD PTR __Last2$[ebp]
	je	SHORT $LN3@Merge@4

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	eax, DWORD PTR __First2$[ebp]
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Merge@4

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	edx, DWORD PTR __First2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First2$[ebp]
	add	eax, 8
	mov	DWORD PTR __First2$[ebp], eax

; 2600 : 		else

	jmp	SHORT $LN1@Merge@4

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN18@Merge@4:
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First1$[ebp]
	add	edx, 8
	mov	DWORD PTR __First1$[ebp], edx
$LN1@Merge@4:
	jmp	SHORT $LN4@Merge@4
$LN3@Merge@4:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T261735[ebp], eax
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T261734[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T261711[ebp], dl
	mov	al, BYTE PTR __Cat$261716[ebp]
	mov	BYTE PTR $T261712[ebp], al
	mov	cl, BYTE PTR $T261711[ebp]
	mov	BYTE PTR $T261709[ebp], cl
	mov	dl, BYTE PTR $T261713[ebp]
	mov	BYTE PTR $T261708[ebp], dl
	mov	eax, DWORD PTR $T261735[ebp]
	mov	DWORD PTR $T261707[ebp], eax
	mov	ecx, DWORD PTR $T261734[ebp]
	mov	DWORD PTR $T261706[ebp], ecx
	jmp	SHORT $LN30@Merge@4
$LN29@Merge@4:
	mov	edx, DWORD PTR $T261707[ebp]
	add	edx, 8
	mov	DWORD PTR $T261707[ebp], edx
	mov	eax, DWORD PTR $T261706[ebp]
	add	eax, 8
	mov	DWORD PTR $T261706[ebp], eax
$LN30@Merge@4:
	mov	ecx, DWORD PTR $T261706[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN28@Merge@4
	mov	edx, DWORD PTR $T261706[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T261707[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN29@Merge@4
$LN28@Merge@4:
	mov	eax, DWORD PTR $T261707[ebp]
	mov	DWORD PTR $T261636[ebp], eax
	mov	ecx, DWORD PTR $T261636[ebp]
	mov	DWORD PTR __Dest$[ebp], ecx

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T261807[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T261806[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T261783[ebp], cl
	mov	dl, BYTE PTR __Cat$261788[ebp]
	mov	BYTE PTR $T261784[ebp], dl
	mov	al, BYTE PTR $T261783[ebp]
	mov	BYTE PTR $T261781[ebp], al
	mov	cl, BYTE PTR $T261785[ebp]
	mov	BYTE PTR $T261780[ebp], cl
	mov	edx, DWORD PTR $T261807[ebp]
	mov	DWORD PTR $T261779[ebp], edx
	mov	eax, DWORD PTR $T261806[ebp]
	mov	DWORD PTR $T261778[ebp], eax
	jmp	SHORT $LN49@Merge@4
$LN48@Merge@4:
	mov	ecx, DWORD PTR $T261779[ebp]
	add	ecx, 8
	mov	DWORD PTR $T261779[ebp], ecx
	mov	edx, DWORD PTR $T261778[ebp]
	add	edx, 8
	mov	DWORD PTR $T261778[ebp], edx
$LN49@Merge@4:
	mov	eax, DWORD PTR $T261778[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
	je	SHORT $LN47@Merge@4
	mov	ecx, DWORD PTR $T261778[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T261779[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN48@Merge@4
$LN47@Merge@4:
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T261779[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z
_TEXT	SEGMENT
tv193 = -96						; size = 4
tv149 = -92						; size = 4
__Tmp$261971 = -88					; size = 4
$T261960 = -84						; size = 4
__Tmp$261946 = -80					; size = 4
$T261919 = -76						; size = 4
__Tmp$261897 = -72					; size = 4
__Tmp$261878 = -68					; size = 4
__Tmp$261854 = -64					; size = 4
$T261817 = -60						; size = 4
$T261816 = -56						; size = 4
$T261815 = -52						; size = 4
$T261812 = -48						; size = 4
$T261811 = -44						; size = 4
$T261810 = -40						; size = 4
__Hole$231452 = -36					; size = 4
__Holeval$231455 = -32					; size = 8
__Next1$231456 = -24					; size = 4
__Next$231454 = -20					; size = 4
__Tmp$231447 = -16					; size = 4
__Factor$231443 = -12					; size = 4
__Shift$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z PROC ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>, COMDAT

; 1679 : 	{	// rotate [_First, _Last), random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H

; 1680 : 	_DEBUG_RANGE(_First, _Mid);
; 1681 : 	_DEBUG_RANGE(_Mid, _Last);
; 1682 : 	_Diff _Shift = _Mid - _First;

	mov	eax, DWORD PTR __Mid$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Shift$[ebp], eax

; 1683 : 	_Diff _Count = _Last - _First;

	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	DWORD PTR __Count$[ebp], ecx

; 1684 : 
; 1685 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

	mov	edx, DWORD PTR __Shift$[ebp]
	mov	DWORD PTR __Factor$231443[ebp], edx
$LN8@Rotate:
	cmp	DWORD PTR __Factor$231443[ebp], 0
	je	SHORT $LN23@Rotate

; 1686 : 		{	// find subcycle count as GCD of shift count and length
; 1687 : 		_Diff _Tmp = _Count % _Factor;

	mov	eax, DWORD PTR __Count$[ebp]
	cdq
	idiv	DWORD PTR __Factor$231443[ebp]
	mov	DWORD PTR __Tmp$231447[ebp], edx

; 1688 : 		_Count = _Factor, _Factor = _Tmp;

	mov	eax, DWORD PTR __Factor$231443[ebp]
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Tmp$231447[ebp]
	mov	DWORD PTR __Factor$231443[ebp], ecx

; 1689 : 		}

	jmp	SHORT $LN8@Rotate

; 1690 : 
; 1691 : 	if (_Count < _Last - _First)

$LN23@Rotate:
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	DWORD PTR __Count$[ebp], edx
	jge	$LN9@Rotate

; 1692 : 		for (; 0 < _Count; --_Count)

	jmp	SHORT $LN5@Rotate
$LN4@Rotate:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN5@Rotate:
	cmp	DWORD PTR __Count$[ebp], 0
	jle	$LN9@Rotate

; 1693 : 			{	// rotate each subcycle
; 1694 : 			_RanIt _Hole = _First + _Count;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$261854[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Tmp$261854[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$261854[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261854[ebp]
	mov	DWORD PTR __Hole$231452[ebp], edx

; 1695 : 			_RanIt _Next = _Hole;

	mov	eax, DWORD PTR __Hole$231452[ebp]
	mov	DWORD PTR __Next$231454[ebp], eax

; 1696 : 			_Ty _Holeval = *_Hole;

	mov	ecx, DWORD PTR __Hole$231452[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Holeval$231455[ebp], edx
	mov	DWORD PTR __Holeval$231455[ebp+4], eax

; 1697 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

	mov	ecx, DWORD PTR __Next$231454[ebp]
	mov	DWORD PTR __Tmp$261878[ebp], ecx
	mov	edx, DWORD PTR __Shift$[ebp]
	mov	eax, DWORD PTR __Tmp$261878[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$261878[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261878[ebp]
	mov	DWORD PTR $T261811[ebp], edx
	mov	eax, DWORD PTR $T261811[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN11@Rotate
	lea	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN12@Rotate
$LN11@Rotate:
	mov	ecx, DWORD PTR __Next$231454[ebp]
	mov	DWORD PTR __Tmp$261897[ebp], ecx
	mov	edx, DWORD PTR __Shift$[ebp]
	mov	eax, DWORD PTR __Tmp$261897[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$261897[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261897[ebp]
	mov	DWORD PTR $T261812[ebp], edx
	lea	eax, DWORD PTR $T261812[ebp]
	mov	DWORD PTR tv149[ebp], eax
$LN12@Rotate:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T261810[ebp], ecx
	mov	edx, DWORD PTR $T261810[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Next1$231456[ebp], eax

; 1698 : 			while (_Next1 != _Hole)

$LN51@Rotate:
	mov	ecx, DWORD PTR __Next1$231456[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Hole$231452[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN83@Rotate

; 1699 : 				{	// percolate elements back around subcycle
; 1700 : 				*_Next = *_Next1;

	mov	edx, DWORD PTR __Next1$231456[ebp]
	mov	DWORD PTR $T261919[ebp], edx
	mov	eax, DWORD PTR $T261919[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Next$231454[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 1701 : 				_Next = _Next1;

	mov	ecx, DWORD PTR __Next1$231456[ebp]
	mov	DWORD PTR __Next$231454[ebp], ecx

; 1702 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 1703 : 					: _First + (_Shift - (_Last - _Next1));

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Next1$231456[ebp]
	sar	edx, 3
	cmp	DWORD PTR __Shift$[ebp], edx
	jge	SHORT $LN75@Rotate
	mov	eax, DWORD PTR __Next1$231456[ebp]
	mov	DWORD PTR __Tmp$261946[ebp], eax
	mov	ecx, DWORD PTR __Shift$[ebp]
	mov	edx, DWORD PTR __Tmp$261946[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR __Tmp$261946[ebp], eax
	mov	ecx, DWORD PTR __Tmp$261946[ebp]
	mov	DWORD PTR $T261816[ebp], ecx
	lea	edx, DWORD PTR $T261816[ebp]
	mov	DWORD PTR tv193[ebp], edx
	jmp	SHORT $LN14@Rotate
$LN75@Rotate:
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Next1$231456[ebp]
	sar	eax, 3
	mov	DWORD PTR $T261960[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$261971[ebp], ecx
	mov	edx, DWORD PTR __Shift$[ebp]
	sub	edx, DWORD PTR $T261960[ebp]
	mov	eax, DWORD PTR __Tmp$261971[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$261971[ebp], ecx
	mov	edx, DWORD PTR __Tmp$261971[ebp]
	mov	DWORD PTR $T261817[ebp], edx
	lea	eax, DWORD PTR $T261817[ebp]
	mov	DWORD PTR tv193[ebp], eax
$LN14@Rotate:
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR $T261815[ebp], ecx
	mov	edx, DWORD PTR $T261815[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Next1$231456[ebp], eax

; 1704 : 				}

	jmp	$LN51@Rotate

; 1705 : 			*_Next = _Holeval;

$LN83@Rotate:
	mov	ecx, DWORD PTR __Next$231454[ebp]
	mov	edx, DWORD PTR __Holeval$231455[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Holeval$231455[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 1706 : 			}

	jmp	$LN4@Rotate
$LN9@Rotate:

; 1707 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ENDP ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__ehfuncinfo$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv197 = -128						; size = 4
tv196 = -124						; size = 4
tv192 = -120						; size = 4
tv191 = -116						; size = 4
$T262157 = -112						; size = 4
__Next$262165 = -108					; size = 4
$T262149 = -104						; size = 4
$T262129 = -100						; size = 4
__Next$262132 = -96					; size = 4
$T262121 = -92						; size = 4
$T262117 = -88						; size = 4
$T262081 = -72						; size = 4
$T262045 = -56						; size = 4
$T262033 = -52						; size = 4
$T262024 = -48						; size = 4
$T261995 = -44						; size = 4
$T261989 = -40						; size = 4
$T261988 = -36						; size = 20
$T261987 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T261995[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

$LN16@Merge@5:
	mov	eax, DWORD PTR __First1$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last1$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN3@Merge@5
	mov	ecx, DWORD PTR __First2$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR __Last2$[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Merge@5

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	edx, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T262024[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T262033[ebp], eax
	mov	ecx, DWORD PTR $T262033[ebp]
	mov	edx, DWORD PTR $T262024[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN56@Merge@5

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T262045[ebp], eax
	mov	ecx, DWORD PTR $T262045[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
	mov	edx, DWORD PTR __First2$[ebp]
	add	edx, 8
	mov	DWORD PTR __First2$[ebp], edx

; 2600 : 		else

	jmp	SHORT $LN1@Merge@5

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN56@Merge@5:
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T262081[ebp], eax
	mov	ecx, DWORD PTR $T262081[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
	mov	edx, DWORD PTR __First1$[ebp]
	add	edx, 8
	mov	DWORD PTR __First1$[ebp], edx
$LN1@Merge@5:
	jmp	$LN16@Merge@5
$LN3@Merge@5:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR $T261987[ebp], esp
	mov	DWORD PTR $T262117[ebp], eax
	mov	ecx, DWORD PTR $T262117[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T262117[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR $T262117[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR $T262117[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR $T262117[ebp]
	mov	eax, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR $T262117[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	edx, DWORD PTR __Last1$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T261988[ebp]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv192[ebp], eax
	mov	edx, DWORD PTR tv192[ebp]
	mov	DWORD PTR $T262121[ebp], edx
	mov	eax, DWORD PTR $T262121[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Dest$[ebp+16], ecx
	cmp	DWORD PTR $T261988[ebp], 0
	je	SHORT $LN84@Merge@5
	mov	edx, DWORD PTR $T261988[ebp]
	mov	DWORD PTR __Next$262132[ebp], edx
	jmp	SHORT $LN82@Merge@5
$LN81@Merge@5:
	mov	eax, DWORD PTR __Next$262132[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$262132[ebp], eax
$LN82@Merge@5:
	mov	ecx, DWORD PTR __Next$262132[ebp]
	cmp	ecx, DWORD PTR $T261988[ebp+8]
	je	SHORT $LN80@Merge@5
	jmp	SHORT $LN81@Merge@5
$LN80@Merge@5:
	mov	edx, DWORD PTR $T261988[ebp]
	mov	DWORD PTR $T262129[ebp], edx
	mov	eax, DWORD PTR $T262129[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN84@Merge@5:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	sub	esp, 20					; 00000014H
	mov	ecx, esp
	mov	DWORD PTR $T261989[ebp], esp
	mov	DWORD PTR $T262149[ebp], ecx
	mov	edx, DWORD PTR $T262149[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T262149[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR $T262149[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T262149[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR $T262149[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR $T262149[ebp]
	mov	DWORD PTR tv196[ebp], edx
	mov	eax, DWORD PTR __Last2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR $T261995[ebp]
	or	eax, 1
	mov	DWORD PTR $T261995[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR __Dest$[ebp], 0
	je	SHORT $LN98@Merge@5
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$262165[ebp], ecx
	jmp	SHORT $LN96@Merge@5
$LN95@Merge@5:
	mov	edx, DWORD PTR __Next$262165[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$262165[ebp], edx
$LN96@Merge@5:
	mov	eax, DWORD PTR __Next$262165[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp+8]
	je	SHORT $LN94@Merge@5
	jmp	SHORT $LN95@Merge@5
$LN94@Merge@5:
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T262157[ebp], ecx
	mov	edx, DWORD PTR $T262157[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN98@Merge@5:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:
	lea	ecx, DWORD PTR __Dest$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
; Function compile flags: /Odtp
;	COMDAT ??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T262348 = -60						; size = 4
$T262347 = -56						; size = 4
$T262322 = -50						; size = 1
$T262321 = -49						; size = 1
$T262320 = -48						; size = 4
$T262319 = -44						; size = 4
__Cat$262329 = -36					; size = 1
$T262326 = -35						; size = 1
$T262325 = -34						; size = 1
$T262324 = -33						; size = 1
$T262276 = -32						; size = 4
$T262275 = -28						; size = 4
$T262250 = -22						; size = 1
$T262249 = -21						; size = 1
$T262248 = -20						; size = 4
$T262247 = -16						; size = 4
__Cat$262257 = -8					; size = 1
$T262254 = -7						; size = 1
$T262253 = -6						; size = 1
$T262252 = -5						; size = 1
$T262177 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	jmp	SHORT $LN5@Merge@6
$LN4@Merge@6:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
$LN5@Merge@6:
	mov	ecx, DWORD PTR __First1$[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN3@Merge@6
	mov	edx, DWORD PTR __First2$[ebp]
	cmp	edx, DWORD PTR __Last2$[ebp]
	je	SHORT $LN3@Merge@6

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	eax, DWORD PTR __First2$[ebp]
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Merge@6

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	edx, DWORD PTR __First2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First2$[ebp]
	add	eax, 8
	mov	DWORD PTR __First2$[ebp], eax

; 2600 : 		else

	jmp	SHORT $LN1@Merge@6

; 2601 : 			*_Dest = *_First1, ++_First1;

$LN18@Merge@6:
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First1$[ebp]
	add	edx, 8
	mov	DWORD PTR __First1$[ebp], edx
$LN1@Merge@6:
	jmp	SHORT $LN4@Merge@6
$LN3@Merge@6:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T262276[ebp], eax
	mov	ecx, DWORD PTR __First1$[ebp]
	mov	DWORD PTR $T262275[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T262252[ebp], dl
	mov	al, BYTE PTR __Cat$262257[ebp]
	mov	BYTE PTR $T262253[ebp], al
	mov	cl, BYTE PTR $T262252[ebp]
	mov	BYTE PTR $T262250[ebp], cl
	mov	dl, BYTE PTR $T262254[ebp]
	mov	BYTE PTR $T262249[ebp], dl
	mov	eax, DWORD PTR $T262276[ebp]
	mov	DWORD PTR $T262248[ebp], eax
	mov	ecx, DWORD PTR $T262275[ebp]
	mov	DWORD PTR $T262247[ebp], ecx
	jmp	SHORT $LN30@Merge@6
$LN29@Merge@6:
	mov	edx, DWORD PTR $T262248[ebp]
	add	edx, 8
	mov	DWORD PTR $T262248[ebp], edx
	mov	eax, DWORD PTR $T262247[ebp]
	add	eax, 8
	mov	DWORD PTR $T262247[ebp], eax
$LN30@Merge@6:
	mov	ecx, DWORD PTR $T262247[ebp]
	cmp	ecx, DWORD PTR __Last1$[ebp]
	je	SHORT $LN28@Merge@6
	mov	edx, DWORD PTR $T262247[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T262248[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN29@Merge@6
$LN28@Merge@6:
	mov	eax, DWORD PTR $T262248[ebp]
	mov	DWORD PTR $T262177[ebp], eax
	mov	ecx, DWORD PTR $T262177[ebp]
	mov	DWORD PTR __Dest$[ebp], ecx

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T262348[ebp], edx
	mov	eax, DWORD PTR __First2$[ebp]
	mov	DWORD PTR $T262347[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T262324[ebp], cl
	mov	dl, BYTE PTR __Cat$262329[ebp]
	mov	BYTE PTR $T262325[ebp], dl
	mov	al, BYTE PTR $T262324[ebp]
	mov	BYTE PTR $T262322[ebp], al
	mov	cl, BYTE PTR $T262326[ebp]
	mov	BYTE PTR $T262321[ebp], cl
	mov	edx, DWORD PTR $T262348[ebp]
	mov	DWORD PTR $T262320[ebp], edx
	mov	eax, DWORD PTR $T262347[ebp]
	mov	DWORD PTR $T262319[ebp], eax
	jmp	SHORT $LN49@Merge@6
$LN48@Merge@6:
	mov	ecx, DWORD PTR $T262320[ebp]
	add	ecx, 8
	mov	DWORD PTR $T262320[ebp], ecx
	mov	edx, DWORD PTR $T262319[ebp]
	add	edx, 8
	mov	DWORD PTR $T262319[ebp], edx
$LN49@Merge@6:
	mov	eax, DWORD PTR $T262319[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
	je	SHORT $LN47@Merge@6
	mov	ecx, DWORD PTR $T262319[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T262320[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN48@Merge@6
$LN47@Merge@6:
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T262320[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2605 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T262359 = -4						; size = 4
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 532  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@getPlotCit
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T262359[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T262359[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	jmp	SHORT $LN2@getPlotCit
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax
$LN2@getPlotCit:

; 537  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
_TEXT	ENDS
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	if(bWrap)

	movzx	eax, BYTE PTR _bWrap$[ebp]
	test	eax, eax
	je	SHORT $LN4@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)

	cmp	DWORD PTR _iCoord$[ebp], 0
	jge	SHORT $LN3@coordRange

; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	add	edx, DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
	jmp	SHORT $LN4@coordRange
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	mov	ecx, DWORD PTR _iCoord$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jl	SHORT $LN4@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
$LN4@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;

	mov	eax, DWORD PTR _iCoord$[ebp]
$LN5@coordRange:

; 101  : }

	pop	ebp
	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
_this$ = -12						; size = 4
$T262373 = -8						; size = 4
$T262369 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	cmp	DWORD PTR _iX$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T262369[ebp], ecx
	mov	edx, DWORD PTR _iX$[ebp]
	cmp	edx, DWORD PTR $T262369[ebp]
	jge	SHORT $LN3@isPlot
	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T262373[ebp], ecx
	mov	edx, DWORD PTR _iY$[ebp]
	cmp	edx, DWORD PTR $T262373[ebp]
	jge	SHORT $LN3@isPlot
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@isPlot
$LN3@isPlot:
	mov	DWORD PTR tv72[ebp], 0
$LN4@isPlot:
	mov	eax, DWORD PTR tv72[ebp]

; 161  : #endif
; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T262405 = -30						; size = 1
$T262392 = -29						; size = 1
$T262388 = -28						; size = 4
$T262381 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T262405[ebp]
	mov	DWORD PTR $T262381[ebp], eax
	lea	ecx, DWORD PTR $T262392[ebp]
	mov	DWORD PTR $T262388[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$262532 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@6

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@6
	jmp	SHORT $LN3@Buy@6
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$262532[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$262532[ebp], 0
	jbe	SHORT $LN11@Buy@6
	mov	eax, DWORD PTR __Count$262532[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@6
$LN11@Buy@6:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@6:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@6

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@6:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@6:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@6:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T262595 = -28						; size = 4
$T262594 = -24						; size = 4
$T262590 = -20						; size = 4
$T262589 = -16						; size = 4
$T262578 = -12						; size = 4
$T262577 = -8						; size = 4
__Cat$262584 = -2					; size = 1
$T262582 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@6

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T262590[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T262589[ebp], ecx
	mov	edx, DWORD PTR $T262590[ebp]
	mov	DWORD PTR $T262578[ebp], edx
	mov	eax, DWORD PTR $T262589[ebp]
	mov	DWORD PTR $T262577[ebp], eax
	mov	cl, BYTE PTR __Cat$262584[ebp]
	mov	BYTE PTR $T262582[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T262595[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T262594[ebp], eax
	mov	ecx, DWORD PTR $T262594[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@6:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T262613 = -80						; size = 28
$T262612 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T262613[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T262612[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T262612[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T262613[ebp]
	push	eax
	lea	ecx, DWORD PTR $T262612[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T262612[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T262612[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T262613[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T262613[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T262612[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T262638 = -16						; size = 4
$T262634 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T262638[ebp], 0
	lea	eax, DWORD PTR $T262638[ebp]
	push	eax
	lea	ecx, DWORD PTR $T262634[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T262634[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T262634[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T262734 = -52						; size = 4
$T262723 = -48						; size = 4
$T262722 = -44						; size = 4
__Cat$262729 = -40					; size = 1
$T262727 = -39						; size = 1
__Ptr$210227 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$210227[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T262734[ebp], edx
	mov	eax, DWORD PTR $T262734[ebp]
	mov	DWORD PTR $T262723[ebp], eax
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR $T262722[ebp], ecx
	mov	dl, BYTE PTR __Cat$262729[ebp]
	mov	BYTE PTR $T262727[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T262757 = -26						; size = 1
$T262756 = -25						; size = 1
$T262755 = -24						; size = 4
$T262754 = -20						; size = 4
__Off$262750 = -16					; size = 4
__Result$262751 = -12					; size = 4
__Cat$262742 = -4					; size = 1
$T262739 = -3						; size = 1
$T262738 = -2						; size = 1
$T262737 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T262737[ebp], al
	mov	cl, BYTE PTR __Cat$262742[ebp]
	mov	BYTE PTR $T262738[ebp], cl
	mov	dl, BYTE PTR $T262737[ebp]
	mov	BYTE PTR $T262757[ebp], dl
	mov	al, BYTE PTR $T262739[ebp]
	mov	BYTE PTR $T262756[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T262755[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T262754[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T262754[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$262750[ebp], eax
	mov	ecx, DWORD PTR __Off$262750[ebp]
	mov	edx, DWORD PTR $T262755[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$262751[ebp], eax
	cmp	DWORD PTR __Off$262750[ebp], 0
	jle	SHORT $LN8@unchecked_@7
	mov	ecx, DWORD PTR __Off$262750[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T262754[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$262750[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T262755[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@7:
	mov	eax, DWORD PTR __Result$262751[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T262847 = -64						; size = 4
$T262837 = -60						; size = 4
$T262825 = -56						; size = 4
$T262815 = -49						; size = 1
$T262814 = -48						; size = 4
__Cat$262832 = -19					; size = 1
$T262830 = -18						; size = 1
$T262829 = -17						; size = 1
$T262766 = -16						; size = 4
$T262762 = -12						; size = 4
$T262761 = -8						; size = 4
$T262760 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T262766[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@10
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@10
$LN9@push_back@10:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@10:
	mov	ecx, DWORD PTR $T262766[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@10

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T262837[ebp], eax
	mov	ecx, DWORD PTR $T262837[ebp]
	mov	DWORD PTR $T262825[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T262829[ebp], dl
	mov	al, BYTE PTR __Cat$262832[ebp]
	mov	BYTE PTR $T262830[ebp], al
	mov	cl, BYTE PTR $T262829[ebp]
	mov	BYTE PTR $T262815[ebp], cl
	mov	edx, DWORD PTR $T262825[ebp]
	mov	DWORD PTR $T262814[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T262814[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T262837[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@10
$LN2@push_back@10:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T262847[ebp], edx
	mov	eax, DWORD PTR $T262847[ebp]
	mov	DWORD PTR $T262761[ebp], eax
	mov	ecx, DWORD PTR $T262761[ebp]
	mov	DWORD PTR $T262760[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T262760[ebp]
	push	eax
	lea	ecx, DWORD PTR $T262762[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
$LN3@push_back@10:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$262972 = -24					; size = 4
$T262950 = -20						; size = 4
$T262931 = -16						; size = 4
$T262918 = -12						; size = 4
$T262915 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@6
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@6
$LN3@insert@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T262931[ebp], ecx
	mov	edx, DWORD PTR $T262931[ebp]
	mov	DWORD PTR $T262915[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T262915[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@6:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T262950[ebp], edx
	mov	eax, DWORD PTR $T262950[ebp]
	mov	DWORD PTR $T262918[ebp], eax
	mov	ecx, DWORD PTR $T262918[ebp]
	mov	DWORD PTR __Tmp$262972[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$262972[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$262972[ebp], ecx
	mov	edx, DWORD PTR __Tmp$262972[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T263526 = -412						; size = 4
$T263474 = -368						; size = 4
$T263462 = -364						; size = 4
$T263452 = -357						; size = 1
$T263451 = -356						; size = 4
__Cat$263469 = -327					; size = 1
$T263466 = -326						; size = 1
$T263465 = -325						; size = 1
$T263423 = -324						; size = 4
$T263415 = -320						; size = 4
$T263407 = -316						; size = 4
$T263396 = -312						; size = 4
$T263395 = -308						; size = 4
__Cat$263402 = -302					; size = 1
$T263400 = -301						; size = 1
$T263324 = -276						; size = 4
$T263305 = -272						; size = 4
$T263288 = -265						; size = 1
$T263287 = -264						; size = 4
$T263277 = -260						; size = 4
$T263276 = -256						; size = 4
__Cat$263319 = -250					; size = 1
$T263316 = -249						; size = 1
$T263315 = -248						; size = 1
__Cat$263312 = -247					; size = 1
$T263309 = -246						; size = 1
$T263308 = -245						; size = 1
$T263252 = -244						; size = 4
$T263251 = -240						; size = 4
$T263247 = -236						; size = 4
$T263246 = -232						; size = 4
$T263235 = -228						; size = 4
$T263234 = -224						; size = 4
__Cat$263241 = -218					; size = 1
$T263238 = -217						; size = 1
$T263199 = -216						; size = 4
$T263198 = -212						; size = 4
__Cat$263205 = -206					; size = 1
$T263202 = -205						; size = 1
$T263169 = -204						; size = 4
$T263168 = -200						; size = 4
__Cat$263176 = -194					; size = 1
$T263174 = -193						; size = 1
$T263149 = -192						; size = 4
$T263137 = -188						; size = 4
$T263127 = -181						; size = 1
$T263126 = -180						; size = 4
__Cat$263145 = -175					; size = 1
$T263143 = -174						; size = 1
$T263142 = -173						; size = 1
$T263114 = -172						; size = 4
$T263102 = -168						; size = 4
$T263092 = -161						; size = 1
$T263091 = -160						; size = 4
__Cat$263111 = -155					; size = 1
$T263108 = -154						; size = 1
$T263107 = -153						; size = 1
$T263079 = -152						; size = 4
$T263067 = -148						; size = 4
$T263057 = -141						; size = 1
$T263056 = -140						; size = 4
__Cat$263075 = -135					; size = 1
$T263073 = -134						; size = 1
$T263072 = -133						; size = 1
__Count$263030 = -120					; size = 4
__Count$263004 = -48					; size = 4
__Tmp$214818 = -44					; size = 4
__Oldend$214819 = -40					; size = 4
__Tmp$214808 = -36					; size = 4
__Ncopied$214795 = -32					; size = 4
__Newvec$214793 = -28					; size = 4
__Whereoff$214794 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@6
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@6
$LN29@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@6:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@6
	jmp	$LN16@Insert_n@6
$LN14@Insert_n@6:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$263004[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$263004[ebp], 0
	jbe	SHORT $LN35@Insert_n@6
	mov	edx, DWORD PTR __Count$263004[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@6
$LN35@Insert_n@6:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@6

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN16@Insert_n@6

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@6

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$263030[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$263030[ebp], 0
	jbe	SHORT $LN48@Insert_n@6
	mov	ecx, DWORD PTR __Count$263030[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@6
$LN48@Insert_n@6:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@6:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@6
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@6
$LN17@Insert_n@6:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@6:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@6

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@6:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	DWORD PTR __Newvec$214793[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$214794[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$214795[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T263079[ebp], edx
	mov	eax, DWORD PTR $T263079[ebp]
	mov	DWORD PTR $T263067[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T263072[ebp], cl
	mov	dl, BYTE PTR __Cat$263075[ebp]
	mov	BYTE PTR $T263073[ebp], dl
	mov	al, BYTE PTR $T263072[ebp]
	mov	BYTE PTR $T263057[ebp], al
	mov	ecx, DWORD PTR $T263067[ebp]
	mov	DWORD PTR $T263056[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263056[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T263114[ebp], ecx
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T263102[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T263107[ebp], al
	mov	cl, BYTE PTR __Cat$263111[ebp]
	mov	BYTE PTR $T263108[ebp], cl
	mov	dl, BYTE PTR $T263107[ebp]
	mov	BYTE PTR $T263092[ebp], dl
	mov	eax, DWORD PTR $T263102[ebp]
	mov	DWORD PTR $T263091[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T263091[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263114[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T263149[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T263137[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T263142[ebp], dl
	mov	al, BYTE PTR __Cat$263145[ebp]
	mov	BYTE PTR $T263143[ebp], al
	mov	cl, BYTE PTR $T263142[ebp]
	mov	BYTE PTR $T263127[ebp], cl
	mov	edx, DWORD PTR $T263137[ebp]
	mov	DWORD PTR $T263126[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263126[ebp]
	push	ecx
	mov	edx, DWORD PTR $T263149[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@6
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 1
	jle	SHORT $LN7@Insert_n@6

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$214794[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T263169[ebp], eax
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T263168[ebp], ecx
	mov	dl, BYTE PTR __Cat$263176[ebp]
	mov	BYTE PTR $T263174[ebp], dl
$LN7@Insert_n@6:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 0
	jle	SHORT $LN6@Insert_n@6

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T263199[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T263198[ebp], ecx
	mov	dl, BYTE PTR __Cat$263205[ebp]
	mov	BYTE PTR $T263202[ebp], dl
$LN6@Insert_n@6:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$214793[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@6
	ret	0
$LN19@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@6

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T263247[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T263246[ebp], edx
	mov	eax, DWORD PTR $T263247[ebp]
	mov	DWORD PTR $T263235[ebp], eax
	mov	ecx, DWORD PTR $T263246[ebp]
	mov	DWORD PTR $T263234[ebp], ecx
	mov	dl, BYTE PTR __Cat$263241[ebp]
	mov	BYTE PTR $T263238[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T263252[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T263251[ebp], ecx
	mov	edx, DWORD PTR $T263251[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@6:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@6
$LN10@Insert_n@6:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@6

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$214808[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T263324[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T263305[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T263308[ebp], cl
	mov	dl, BYTE PTR __Cat$263312[ebp]
	mov	BYTE PTR $T263309[ebp], dl
	mov	al, BYTE PTR $T263308[ebp]
	mov	BYTE PTR $T263288[ebp], al
	mov	ecx, DWORD PTR $T263305[ebp]
	mov	DWORD PTR $T263287[ebp], ecx
	mov	edx, DWORD PTR $T263287[ebp]
	mov	DWORD PTR $T263277[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T263276[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T263315[ebp], cl
	mov	dl, BYTE PTR __Cat$263319[ebp]
	mov	BYTE PTR $T263316[ebp], dl
	movzx	eax, BYTE PTR $T263315[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T263316[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T263277[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263324[ebp]
	push	ecx
	mov	edx, DWORD PTR $T263276[ebp]
	push	edx
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$214808[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN21@Insert_n@6
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T263407[ebp], eax
	mov	ecx, DWORD PTR $T263407[ebp]
	mov	DWORD PTR $T263396[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T263395[ebp], ecx
	mov	dl, BYTE PTR __Cat$263402[ebp]
	mov	BYTE PTR $T263400[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN21@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T263423[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T263415[ebp], edx
	jmp	SHORT $LN151@Insert_n@6
$LN150@Insert_n@6:
	mov	eax, DWORD PTR $T263415[ebp]
	add	eax, 4
	mov	DWORD PTR $T263415[ebp], eax
$LN151@Insert_n@6:
	mov	ecx, DWORD PTR $T263415[ebp]
	cmp	ecx, DWORD PTR $T263423[ebp]
	je	SHORT $LN147@Insert_n@6
	mov	edx, DWORD PTR $T263415[ebp]
	mov	eax, DWORD PTR __Tmp$214808[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@6
$LN147@Insert_n@6:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@6
$LN3@Insert_n@6:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$214818[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$214819[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T263474[ebp], eax
	mov	ecx, DWORD PTR $T263474[ebp]
	mov	DWORD PTR $T263462[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T263465[ebp], dl
	mov	al, BYTE PTR __Cat$263469[ebp]
	mov	BYTE PTR $T263466[ebp], al
	mov	cl, BYTE PTR $T263465[ebp]
	mov	BYTE PTR $T263452[ebp], cl
	mov	edx, DWORD PTR $T263462[ebp]
	mov	DWORD PTR $T263451[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263451[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$214819[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$214819[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T263526[ebp], ecx
	jmp	SHORT $LN186@Insert_n@6
$LN185@Insert_n@6:
	mov	edx, DWORD PTR $T263526[ebp]
	add	edx, 4
	mov	DWORD PTR $T263526[ebp], edx
$LN186@Insert_n@6:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T263526[ebp], edx
	je	SHORT $LN16@Insert_n@6
	mov	eax, DWORD PTR $T263526[ebp]
	mov	ecx, DWORD PTR __Tmp$214818[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@6
$LN16@Insert_n@6:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T263597 = -40						; size = 4
$T263587 = -33						; size = 1
$T263586 = -32						; size = 4
__Cat$263593 = -3					; size = 1
$T263591 = -2						; size = 1
$T263590 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T263597[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T263590[ebp], cl
	mov	dl, BYTE PTR __Cat$263593[ebp]
	mov	BYTE PTR $T263591[ebp], dl
	mov	al, BYTE PTR $T263590[ebp]
	mov	BYTE PTR $T263587[ebp], al
	mov	ecx, DWORD PTR $T263597[ebp]
	mov	DWORD PTR $T263586[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T263586[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T263642 = -38						; size = 1
$T263641 = -37						; size = 1
$T263640 = -36						; size = 4
$T263639 = -32						; size = 4
$T263626 = -25						; size = 1
$T263625 = -24						; size = 4
$T263624 = -20						; size = 4
__Off$263634 = -16					; size = 4
__Result$263635 = -12					; size = 4
__Cat$263631 = -8					; size = 1
$T263629 = -7						; size = 1
$T263628 = -6						; size = 1
__Cat$263606 = -4					; size = 1
$T263602 = -3						; size = 1
$T263601 = -2						; size = 1
$T263600 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T263600[ebp], al
	mov	cl, BYTE PTR __Cat$263606[ebp]
	mov	BYTE PTR $T263601[ebp], cl
	mov	dl, BYTE PTR $T263600[ebp]
	mov	BYTE PTR $T263642[ebp], dl
	mov	al, BYTE PTR $T263602[ebp]
	mov	BYTE PTR $T263641[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T263640[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263639[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T263628[ebp], al
	mov	cl, BYTE PTR __Cat$263631[ebp]
	mov	BYTE PTR $T263629[ebp], cl
	mov	dl, BYTE PTR $T263628[ebp]
	mov	BYTE PTR $T263626[ebp], dl
	mov	eax, DWORD PTR $T263640[ebp]
	mov	DWORD PTR $T263625[ebp], eax
	mov	ecx, DWORD PTR $T263639[ebp]
	mov	DWORD PTR $T263624[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T263624[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$263634[ebp], edx
	mov	eax, DWORD PTR __Off$263634[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T263625[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$263635[ebp], ecx
	cmp	DWORD PTR __Off$263634[ebp], 0
	jle	SHORT $LN7@Unchecked_@5
	mov	edx, DWORD PTR __Off$263634[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T263624[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$263634[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$263635[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_@5:
	mov	eax, DWORD PTR __Result$263635[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T263672 = -22						; size = 1
$T263671 = -21						; size = 1
$T263670 = -20						; size = 4
$T263661 = -13						; size = 1
$T263660 = -12						; size = 4
$T263659 = -8						; size = 4
$T263664 = -4						; size = 1
$T263646 = -2						; size = 1
$T263645 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T263645[ebp], al
	mov	cl, BYTE PTR $T263645[ebp]
	mov	BYTE PTR $T263672[ebp], cl
	mov	dl, BYTE PTR $T263646[ebp]
	mov	BYTE PTR $T263671[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263670[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T263664[ebp], cl
	mov	dl, BYTE PTR $T263664[ebp]
	mov	BYTE PTR $T263661[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T263660[ebp], eax
	mov	ecx, DWORD PTR $T263670[ebp]
	mov	DWORD PTR $T263659[ebp], ecx
	jmp	SHORT $LN9@unchecked_@8
$LN8@unchecked_@8:
	mov	edx, DWORD PTR $T263660[ebp]
	sub	edx, 1
	mov	DWORD PTR $T263660[ebp], edx
	mov	eax, DWORD PTR $T263659[ebp]
	add	eax, 4
	mov	DWORD PTR $T263659[ebp], eax
$LN9@unchecked_@8:
	cmp	DWORD PTR $T263660[ebp], 0
	jbe	SHORT $LN1@unchecked_@8
	mov	ecx, DWORD PTR $T263659[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@8
$LN1@unchecked_@8:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T263689 = -21						; size = 1
$T263688 = -20						; size = 4
$T263687 = -16						; size = 4
__Result$263685 = -12					; size = 4
__Count$263684 = -8					; size = 4
__Cat$263679 = -3					; size = 1
$T263676 = -2						; size = 1
$T263675 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T263675[ebp], al
	mov	cl, BYTE PTR __Cat$263679[ebp]
	mov	BYTE PTR $T263676[ebp], cl
	mov	dl, BYTE PTR $T263675[ebp]
	mov	BYTE PTR $T263689[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T263688[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T263687[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T263687[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$263684[ebp], edx
	mov	eax, DWORD PTR __Count$263684[ebp]
	mov	ecx, DWORD PTR $T263688[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$263685[ebp], edx
	cmp	DWORD PTR __Count$263684[ebp], 0
	jbe	SHORT $LN6@unchecked_@9
	mov	eax, DWORD PTR __Count$263684[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T263687[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$263684[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T263688[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@9:
	mov	eax, DWORD PTR __Result$263685[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@6

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@6:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
END
