; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGrandStrategyAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??_7CvAIGrandStrategyXMLEntry@@6B@		; CvAIGrandStrategyXMLEntry::`vftable'
PUBLIC	??0CvAIGrandStrategyXMLEntry@@QAE@XZ		; CvAIGrandStrategyXMLEntry::CvAIGrandStrategyXMLEntry
PUBLIC	?CacheResults@CvAIGrandStrategyXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvAIGrandStrategyXMLEntry::CacheResults
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
EXTRN	??_ECvAIGrandStrategyXMLEntry@@UAEPAXI@Z:PROC	; CvAIGrandStrategyXMLEntry::`vector deleting destructor'
;	COMDAT ??_7CvAIGrandStrategyXMLEntry@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	SEGMENT
??_7CvAIGrandStrategyXMLEntry@@6B@ DD FLAT:?CacheResults@CvAIGrandStrategyXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvAIGrandStrategyXMLEntry::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvAIGrandStrategyXMLEntry@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvAIGrandStrategyXMLEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvAIGrandStrategyXMLEntry@@QAE@XZ PROC		; CvAIGrandStrategyXMLEntry::CvAIGrandStrategyXMLEntry, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvAIGrandStrategyXMLEntry@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0

; 25   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvAIGrandStrategyXMLEntry@@QAE@XZ ENDP		; CvAIGrandStrategyXMLEntry::CvAIGrandStrategyXMLEntry
_TEXT	ENDS
PUBLIC	??1CvAIGrandStrategyXMLEntry@@UAE@XZ		; CvAIGrandStrategyXMLEntry::~CvAIGrandStrategyXMLEntry
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvAIGrandStrategyXMLEntry@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvAIGrandStrategyXMLEntry@@UAEPAXI@Z PROC		; CvAIGrandStrategyXMLEntry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvAIGrandStrategyXMLEntry@@UAE@XZ	; CvAIGrandStrategyXMLEntry::~CvAIGrandStrategyXMLEntry
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvAIGrandStrategyXMLEntry@@UAEPAXI@Z ENDP		; CvAIGrandStrategyXMLEntry::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??1CvAIGrandStrategyXMLEntry@@UAE@XZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T225805 = -24						; size = 4
$T225803 = -20						; size = 4
$T225799 = -16						; size = 4
$T225797 = -12						; size = 4
$T225793 = -8						; size = 4
$T225791 = -4						; size = 4
??1CvAIGrandStrategyXMLEntry@@UAE@XZ PROC		; CvAIGrandStrategyXMLEntry::~CvAIGrandStrategyXMLEntry, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvAIGrandStrategyXMLEntry@@6B@

; 29   : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	mov	DWORD PTR $T225793[ebp], ecx
	mov	edx, DWORD PTR $T225793[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T225791[ebp], eax
	mov	ecx, DWORD PTR $T225791[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T225793[ebp]
	mov	DWORD PTR [edx], 0

; 30   : 	SAFE_DELETE_ARRAY(m_piSpecializationBoost);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	mov	DWORD PTR $T225799[ebp], eax
	mov	ecx, DWORD PTR $T225799[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T225797[ebp], edx
	mov	eax, DWORD PTR $T225797[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T225799[ebp]
	mov	DWORD PTR [ecx], 0

; 31   : 	SAFE_DELETE_ARRAY(m_piFlavorModValue);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	mov	DWORD PTR $T225805[ebp], edx
	mov	eax, DWORD PTR $T225805[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T225803[ebp], ecx
	mov	edx, DWORD PTR $T225803[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T225805[ebp]
	mov	DWORD PTR [eax], 0

; 32   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvAIGrandStrategyXMLEntry@@UAE@XZ ENDP		; CvAIGrandStrategyXMLEntry::~CvAIGrandStrategyXMLEntry
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T225916 = -48						; size = 4
$T225911 = -44						; size = 4
$T225906 = -40						; size = 4
$T225901 = -36						; size = 4
$T225896 = -32						; size = 4
$T225891 = -28						; size = 4
$T225886 = -24						; size = 4
$T225881 = -20						; size = 4
$T225876 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T225876[ebp], eax
	mov	ecx, DWORD PTR $T225876[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T225881[ebp], ecx
	mov	ecx, DWORD PTR $T225881[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T225886[ebp], edx
	mov	ecx, DWORD PTR $T225886[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T225891[ebp], eax
	mov	ecx, DWORD PTR $T225891[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T225896[ebp], ecx
	mov	ecx, DWORD PTR $T225896[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T225901[ebp], edx
	mov	ecx, DWORD PTR $T225901[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T225906[ebp], eax
	mov	ecx, DWORD PTR $T225906[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T225911[ebp], ecx
	mov	ecx, DWORD PTR $T225911[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T225916[ebp], edx
	mov	ecx, DWORD PTR $T225916[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_C@_0BL@GEMNPMHD@AIGrandStrategy_FlavorMods?$AA@ ; `string'
PUBLIC	??_C@_0BH@PNDKIPG@AIGrandStrategy_Yields?$AA@	; `string'
PUBLIC	??_C@_0BI@MAGCICJH@AIGrandStrategy_Flavors?$AA@	; `string'
PUBLIC	??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@	; `string'
EXTRN	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z:PROC ; CvDatabaseUtility::SetYields
EXTRN	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z:PROC ; CvDatabaseUtility::SetFlavors
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvBaseInfo::CacheResults
;	COMDAT ??_C@_0BL@GEMNPMHD@AIGrandStrategy_FlavorMods?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BL@GEMNPMHD@AIGrandStrategy_FlavorMods?$AA@ DB 'AIGrandStrategy_Fl'
	DB	'avorMods', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNDKIPG@AIGrandStrategy_Yields?$AA@
CONST	SEGMENT
??_C@_0BH@PNDKIPG@AIGrandStrategy_Yields?$AA@ DB 'AIGrandStrategy_Yields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MAGCICJH@AIGrandStrategy_Flavors?$AA@
CONST	SEGMENT
??_C@_0BI@MAGCICJH@AIGrandStrategy_Flavors?$AA@ DB 'AIGrandStrategy_Flavo'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@
CONST	SEGMENT
??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@ DB 'AIGrandStrategyType', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvAIGrandStrategyXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szType$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvAIGrandStrategyXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvAIGrandStrategyXMLEntry::CacheResults, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul

; 37   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul

; 38   : 
; 39   : 	//Arrays
; 40   : 	const char* szType = GetType();

$LN4@CacheResul:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$[ebp], eax

; 41   : 	kUtility.SetFlavors(m_piFlavorValue, "AIGrandStrategy_Flavors", "AIGrandStrategyType", szType);

	push	0
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@
	push	OFFSET ??_C@_0BI@MAGCICJH@AIGrandStrategy_Flavors?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 42   : 	kUtility.SetYields(m_piSpecializationBoost, "AIGrandStrategy_Yields", "AIGrandStrategyType", szType);

	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@
	push	OFFSET ??_C@_0BH@PNDKIPG@AIGrandStrategy_Yields?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 43   : 	kUtility.SetFlavors(m_piFlavorModValue, "AIGrandStrategy_FlavorMods", "AIGrandStrategyType", szType);

	push	0
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BE@LOAAONFG@AIGrandStrategyType?$AA@
	push	OFFSET ??_C@_0BL@GEMNPMHD@AIGrandStrategy_FlavorMods?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 44   : 
; 45   : 	return true;

	mov	al, 1
$LN2@CacheResul:

; 46   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvAIGrandStrategyXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvAIGrandStrategyXMLEntry::CacheResults
_TEXT	ENDS
PUBLIC	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z PROC	; CvAIGrandStrategyXMLEntry::GetFlavorValue, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	FAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 57   : #endif
; 58   : 	FAssertMsg(i > -1, "Index out of bounds");
; 59   : 	return m_piFlavorValue ? m_piFlavorValue[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN3@GetFlavorV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetFlavorV
$LN3@GetFlavorV:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetFlavorV:
	mov	eax, DWORD PTR tv69[ebp]

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ENDP	; CvAIGrandStrategyXMLEntry::GetFlavorValue
_TEXT	ENDS
PUBLIC	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
; Function compile flags: /Odtp
;	COMDAT ?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_eYield$ = 8						; size = 4
?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z PROC ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	FAssertMsg(eYield < NUM_YIELD_TYPES, "Index out of bounds");
; 66   : 	FAssertMsg(eYield > -1, "Index out of bounds");
; 67   : 	return m_piSpecializationBoost ? m_piSpecializationBoost[(int)eYield] : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN3@GetSpecial
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _eYield$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetSpecial
$LN3@GetSpecial:
	mov	DWORD PTR tv69[ebp], 0
$LN4@GetSpecial:
	mov	eax, DWORD PTR tv69[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ENDP ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
_TEXT	ENDS
PUBLIC	?GetFlavorModValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorModValue
; Function compile flags: /Odtp
;	COMDAT ?GetFlavorModValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFlavorModValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z PROC ; CvAIGrandStrategyXMLEntry::GetFlavorModValue, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	FAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 79   : #endif
; 80   : 	FAssertMsg(i > -1, "Index out of bounds");
; 81   : 	return m_piFlavorModValue ? m_piFlavorModValue[i] : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN3@GetFlavorM
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetFlavorM
$LN3@GetFlavorM:
	mov	DWORD PTR tv69[ebp], 0
$LN4@GetFlavorM:
	mov	eax, DWORD PTR tv69[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlavorModValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ENDP ; CvAIGrandStrategyXMLEntry::GetFlavorModValue
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >
PUBLIC	?_Buy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Buy
PUBLIC	??0CvAIGrandStrategyXMLEntries@@QAE@XZ		; CvAIGrandStrategyXMLEntries::CvAIGrandStrategyXMLEntries
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvAIGrandStrategyXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvAIGrandStrategyXMLEntries@@QAE@XZ$1
__ehfuncinfo$??0CvAIGrandStrategyXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvAIGrandStrategyXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ??0CvAIGrandStrategyXMLEntries@@QAE@XZ
_TEXT	SEGMENT
tv92 = -132						; size = 4
tv149 = -128						; size = 4
_this$ = -124						; size = 4
$T225978 = -30						; size = 1
$T225965 = -29						; size = 1
$T225961 = -28						; size = 4
$T225954 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvAIGrandStrategyXMLEntries@@QAE@XZ PROC		; CvAIGrandStrategyXMLEntries::CvAIGrandStrategyXMLEntries, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvAIGrandStrategyXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T225978[ebp]
	mov	DWORD PTR $T225954[ebp], eax
	lea	ecx, DWORD PTR $T225965[ebp]
	mov	DWORD PTR $T225961[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 92   : 
; 93   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvAIGrandStrategyXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0CvAIGrandStrategyXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvAIGrandStrategyXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvAIGrandStrategyXMLEntries@@QAE@XZ ENDP		; CvAIGrandStrategyXMLEntries::CvAIGrandStrategyXMLEntries
PUBLIC	??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >
PUBLIC	?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Tidy
PUBLIC	?DeleteArray@CvAIGrandStrategyXMLEntries@@QAEXXZ ; CvAIGrandStrategyXMLEntries::DeleteArray
PUBLIC	??1CvAIGrandStrategyXMLEntries@@QAE@XZ		; CvAIGrandStrategyXMLEntries::~CvAIGrandStrategyXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvAIGrandStrategyXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvAIGrandStrategyXMLEntries@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvAIGrandStrategyXMLEntries@@QAE@XZ$1
__ehfuncinfo$??1CvAIGrandStrategyXMLEntries@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvAIGrandStrategyXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ??1CvAIGrandStrategyXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1CvAIGrandStrategyXMLEntries@@QAE@XZ PROC		; CvAIGrandStrategyXMLEntries::~CvAIGrandStrategyXMLEntries, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvAIGrandStrategyXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 98   : 	DeleteArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteArray@CvAIGrandStrategyXMLEntries@@QAEXXZ ; CvAIGrandStrategyXMLEntries::DeleteArray

; 99   : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvAIGrandStrategyXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >
__unwindfunclet$??1CvAIGrandStrategyXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1CvAIGrandStrategyXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvAIGrandStrategyXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvAIGrandStrategyXMLEntries@@QAE@XZ ENDP		; CvAIGrandStrategyXMLEntries::~CvAIGrandStrategyXMLEntries
PUBLIC	?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries
; Function compile flags: /Odtp
;	COMDAT ?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ PROC ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	return m_paAIGrandStrategyEntries;

	mov	eax, DWORD PTR _this$[ebp]

; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAIGrandStrategyEntries@CvAIGrandStrategyXMLEntries@@QAEAAV?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@XZ ENDP ; CvAIGrandStrategyXMLEntries::GetAIGrandStrategyEntries
_TEXT	ENDS
PUBLIC	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ PROC ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	return m_paAIGrandStrategyEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 115  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ENDP ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@0@Z ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::erase
; Function compile flags: /Odtp
;	COMDAT ?DeleteArray@CvAIGrandStrategyXMLEntries@@QAEXXZ
_TEXT	SEGMENT
tv145 = -116						; size = 4
_this$ = -112						; size = 4
$T226214 = -56						; size = 4
$T226198 = -52						; size = 4
$T226319 = -48						; size = 4
$T226318 = -44						; size = 4
$T226317 = -40						; size = 4
$T226316 = -36						; size = 4
$T226315 = -32						; size = 4
$T226182 = -28						; size = 4
$T226179 = -24						; size = 4
$T226178 = -20						; size = 4
$T226148 = -16						; size = 4
$T226124 = -12						; size = 4
$T226114 = -8						; size = 4
_it$223594 = -4						; size = 4
?DeleteArray@CvAIGrandStrategyXMLEntries@@QAEXXZ PROC	; CvAIGrandStrategyXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 	for(std::vector<CvAIGrandStrategyXMLEntry*>::iterator it = m_paAIGrandStrategyEntries.begin(); it != m_paAIGrandStrategyEntries.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226124[ebp], ecx
	mov	edx, DWORD PTR $T226124[ebp]
	mov	DWORD PTR _it$223594[ebp], edx
	jmp	SHORT $LN3@DeleteArra
$LN2@DeleteArra:
	mov	eax, DWORD PTR _it$223594[ebp]
	add	eax, 4
	mov	DWORD PTR _it$223594[ebp], eax
$LN3@DeleteArra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T226148[ebp], edx
	mov	eax, DWORD PTR $T226148[ebp]
	mov	DWORD PTR $T226114[ebp], eax
	mov	ecx, DWORD PTR _it$223594[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T226114[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DeleteArra

; 121  : 	{
; 122  : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$223594[ebp]
	mov	DWORD PTR $T226182[ebp], edx
	mov	eax, DWORD PTR $T226182[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226179[ebp], ecx
	mov	edx, DWORD PTR $T226179[ebp]
	mov	DWORD PTR $T226178[ebp], edx
	cmp	DWORD PTR $T226178[ebp], 0
	je	SHORT $LN32@DeleteArra
	push	1
	mov	eax, DWORD PTR $T226178[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T226178[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@DeleteArra
$LN32@DeleteArra:
	mov	DWORD PTR tv145[ebp], 0
$LN33@DeleteArra:
	mov	ecx, DWORD PTR $T226182[ebp]
	mov	DWORD PTR [ecx], 0

; 123  : 	}

	jmp	SHORT $LN2@DeleteArra
$LN1@DeleteArra:

; 124  : 
; 125  : 	m_paAIGrandStrategyEntries.clear();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T226198[ebp], eax
	mov	ecx, DWORD PTR $T226198[ebp]
	mov	DWORD PTR $T226316[ebp], ecx
	mov	edx, DWORD PTR $T226316[ebp]
	mov	DWORD PTR $T226315[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226214[ebp], ecx
	mov	edx, DWORD PTR $T226214[ebp]
	mov	DWORD PTR $T226318[ebp], edx
	mov	eax, DWORD PTR $T226318[ebp]
	mov	DWORD PTR $T226317[ebp], eax
	mov	ecx, DWORD PTR $T226315[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226317[ebp]
	push	edx
	lea	eax, DWORD PTR $T226319[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@0@Z ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::erase

; 126  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteArray@CvAIGrandStrategyXMLEntries@@QAEXXZ ENDP	; CvAIGrandStrategyXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ; CvAIGrandStrategyXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z PROC ; CvAIGrandStrategyXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 	return m_paAIGrandStrategyEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ENDP ; CvAIGrandStrategyXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	??0CvGrandStrategyAI@@QAE@XZ			; CvGrandStrategyAI::CvGrandStrategyAI
; Function compile flags: /Odtp
;	COMDAT ??0CvGrandStrategyAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvGrandStrategyAI@@QAE@XZ PROC			; CvGrandStrategyAI::CvGrandStrategyAI, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0

; 155  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvGrandStrategyAI@@QAE@XZ ENDP			; CvGrandStrategyAI::CvGrandStrategyAI
_TEXT	ENDS
PUBLIC	??1CvGrandStrategyAI@@QAE@XZ			; CvGrandStrategyAI::~CvGrandStrategyAI
; Function compile flags: /Odtp
;	COMDAT ??1CvGrandStrategyAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvGrandStrategyAI@@QAE@XZ PROC			; CvGrandStrategyAI::~CvGrandStrategyAI, COMDAT
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvGrandStrategyAI@@QAE@XZ ENDP			; CvGrandStrategyAI::~CvGrandStrategyAI
_TEXT	ENDS
PUBLIC	?Reset@CvGrandStrategyAI@@QAEXXZ		; CvGrandStrategyAI::Reset
PUBLIC	?Init@CvGrandStrategyAI@@QAEXPAVCvAIGrandStrategyXMLEntries@@PAVCvPlayer@@@Z ; CvGrandStrategyAI::Init
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp
;	COMDAT ?Init@CvGrandStrategyAI@@QAEXPAVCvAIGrandStrategyXMLEntries@@PAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T226345 = -12						; size = 4
$T226344 = -8						; size = 4
$T226343 = -4						; size = 4
_pAIGrandStrategies$ = 8				; size = 4
_pPlayer$ = 12						; size = 4
?Init@CvGrandStrategyAI@@QAEXPAVCvAIGrandStrategyXMLEntries@@PAVCvPlayer@@@Z PROC ; CvGrandStrategyAI::Init, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	// Store off the pointer to the AIStrategies active for this game
; 166  : 	m_pAIGrandStrategies = pAIGrandStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pAIGrandStrategies$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 167  : 
; 168  : 	m_pPlayer = pPlayer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [edx], eax

; 169  : 
; 170  : 	// Initialize AIGrandStrategy status array
; 171  : 	FAssertMsg(m_paiGrandStrategyPriority==NULL, "about to leak memory, CvGrandStrategyAI::m_paiGrandStrategyPriority");
; 172  : 	m_paiGrandStrategyPriority = FNEW(int[m_pAIGrandStrategies->GetNumAIGrandStrategies()], c_eCiv5GameplayDLL, 0);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T226343[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T226343[ebp]
	mov	DWORD PTR [eax+16], ecx

; 173  : 
; 174  : 	FAssertMsg(m_eGuessOtherPlayerActiveGrandStrategy==NULL, "about to leak memory, CvGrandStrategyAI::m_eGuessOtherPlayerActiveGrandStrategy");
; 175  : 	m_eGuessOtherPlayerActiveGrandStrategy = FNEW(int[MAX_MAJOR_CIVS], c_eCiv5GameplayDLL, 0);

	push	88					; 00000058H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T226344[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T226344[ebp]
	mov	DWORD PTR [edx+20], eax

; 176  : 
; 177  : 	FAssertMsg(m_eGuessOtherPlayerActiveGrandStrategyConfidence==NULL, "about to leak memory, CvGrandStrategyAI::m_eGuessOtherPlayerActiveGrandStrategyConfidence");
; 178  : 	m_eGuessOtherPlayerActiveGrandStrategyConfidence = FNEW(int[MAX_MAJOR_CIVS], c_eCiv5GameplayDLL, 0);

	push	88					; 00000058H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T226345[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T226345[ebp]
	mov	DWORD PTR [ecx+24], edx

; 179  : 
; 180  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvGrandStrategyAI@@QAEXXZ	; CvGrandStrategyAI::Reset

; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CvGrandStrategyAI@@QAEXPAVCvAIGrandStrategyXMLEntries@@PAVCvPlayer@@@Z ENDP ; CvGrandStrategyAI::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvGrandStrategyAI@@QAEXXZ		; CvGrandStrategyAI::Uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvGrandStrategyAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T226365 = -24						; size = 4
$T226363 = -20						; size = 4
$T226359 = -16						; size = 4
$T226357 = -12						; size = 4
$T226353 = -8						; size = 4
$T226351 = -4						; size = 4
?Uninit@CvGrandStrategyAI@@QAEXXZ PROC			; CvGrandStrategyAI::Uninit, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	SAFE_DELETE_ARRAY(m_paiGrandStrategyPriority);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T226353[ebp], eax
	mov	ecx, DWORD PTR $T226353[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T226351[ebp], edx
	mov	eax, DWORD PTR $T226351[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T226353[ebp]
	mov	DWORD PTR [ecx], 0

; 187  : 	SAFE_DELETE_ARRAY(m_eGuessOtherPlayerActiveGrandStrategy);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T226359[ebp], edx
	mov	eax, DWORD PTR $T226359[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226357[ebp], ecx
	mov	edx, DWORD PTR $T226357[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T226359[ebp]
	mov	DWORD PTR [eax], 0

; 188  : 	SAFE_DELETE_ARRAY(m_eGuessOtherPlayerActiveGrandStrategyConfidence);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR $T226365[ebp], ecx
	mov	edx, DWORD PTR $T226365[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T226363[ebp], eax
	mov	ecx, DWORD PTR $T226363[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T226365[ebp]
	mov	DWORD PTR [edx], 0

; 189  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvGrandStrategyAI@@QAEXXZ ENDP			; CvGrandStrategyAI::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvGrandStrategyAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iI$ = -4						; size = 4
?Reset@CvGrandStrategyAI@@QAEXXZ PROC			; CvGrandStrategyAI::Reset, COMDAT
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 194  : #ifdef AUI_WARNING_FIXES
; 195  : 	uint iI;
; 196  : #else
; 197  : 	int iI;
; 198  : #endif
; 199  : 
; 200  : 	m_iNumTurnsSinceActiveSet = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 201  : 
; 202  : 	m_eActiveGrandStrategy = NO_AIGRANDSTRATEGY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], -1

; 203  : 
; 204  : 	for(iI = 0; iI < m_pAIGrandStrategies->GetNumAIGrandStrategies(); iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN6@Reset
$LN5@Reset:
	mov	edx, DWORD PTR _iI$[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$[ebp], edx
$LN6@Reset:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iI$[ebp], eax
	jge	SHORT $LN4@Reset

; 205  : 	{
; 206  : 		m_paiGrandStrategyPriority[iI] = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [edx+eax*4], -1

; 207  : 	}

	jmp	SHORT $LN5@Reset
$LN4@Reset:

; 208  : 
; 209  : 	for(iI = 0; iI < MAX_MAJOR_CIVS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN3@Reset:
	cmp	DWORD PTR _iI$[ebp], 22			; 00000016H
	jge	SHORT $LN7@Reset

; 210  : 	{
; 211  : 		m_eGuessOtherPlayerActiveGrandStrategy[iI] = NO_AIGRANDSTRATEGY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [eax+ecx*4], -1

; 212  : 		m_eGuessOtherPlayerActiveGrandStrategyConfidence[iI] = NO_GUESS_CONFIDENCE_TYPE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [eax+ecx*4], -1
	jmp	SHORT $LN2@Reset
$LN7@Reset:

; 213  : 	}
; 214  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvGrandStrategyAI@@QAEXXZ ENDP			; CvGrandStrategyAI::Reset
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
PUBLIC	?Read@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z	; CvGrandStrategyAI::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T226391 = -44						; size = 4
$T226387 = -40						; size = 4
$T226383 = -36						; size = 4
$T226382 = -32						; size = 4
_uiVersion$ = -28					; size = 4
_wrapm_eGuessOtherPlayerActiveGrandStrategy$ = -24	; size = 8
_wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence$ = -16 ; size = 8
_wrapm_paiGrandStrategyPriority$ = -8			; size = 8
_kStream$ = 8						; size = 4
?Read@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z PROC	; CvGrandStrategyAI::Read, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	// Version number to maintain backwards compatibility
; 220  : 	uint uiVersion;
; 221  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 222  : 
; 223  : 	kStream >> m_iNumTurnsSinceActiveSet;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 224  : 	kStream >> (int&)m_eActiveGrandStrategy;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 225  : 
; 226  : 	FAssertMsg(m_pAIGrandStrategies != NULL && m_pAIGrandStrategies->GetNumAIGrandStrategies() > 0, "Number of AIGrandStrategies to serialize is expected to greater than 0");
; 227  : #ifdef _MSC_VER
; 228  : // JAR - if m_pAIGrandStrategies can be NULL at this point,
; 229  : // the load will fail if the data isn't read. Better to crash
; 230  : // here where the problem is than defer it.
; 231  : #pragma warning ( push )
; 232  : #pragma warning ( disable : 6011 )
; 233  : #endif//_MSC_VER
; 234  : 	ArrayWrapper<int> wrapm_paiGrandStrategyPriority(m_pAIGrandStrategies->GetNumAIGrandStrategies(), m_paiGrandStrategyPriority);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T226383[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	mov	DWORD PTR $T226382[ebp], eax
	mov	eax, DWORD PTR $T226383[ebp]
	mov	DWORD PTR _wrapm_paiGrandStrategyPriority$[ebp], eax
	mov	ecx, DWORD PTR $T226382[ebp]
	mov	DWORD PTR _wrapm_paiGrandStrategyPriority$[ebp+4], ecx

; 235  : #ifdef _MSC_VER
; 236  : #pragma warning ( pop )
; 237  : #endif//_MSC_VER
; 238  : 
; 239  : 	kStream >> wrapm_paiGrandStrategyPriority;

	lea	edx, DWORD PTR _wrapm_paiGrandStrategyPriority$[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8

; 240  : 
; 241  : 	ArrayWrapper<int> wrapm_eGuessOtherPlayerActiveGrandStrategy(MAX_MAJOR_CIVS, m_eGuessOtherPlayerActiveGrandStrategy);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T226387[ebp], edx
	mov	eax, DWORD PTR $T226387[ebp]
	mov	DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategy$[ebp], eax
	mov	DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategy$[ebp+4], 22 ; 00000016H

; 242  : 	kStream >> wrapm_eGuessOtherPlayerActiveGrandStrategy;

	lea	ecx, DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8

; 243  : 
; 244  : 	ArrayWrapper<int> wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence(MAX_MAJOR_CIVS, m_eGuessOtherPlayerActiveGrandStrategyConfidence);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T226391[ebp], ecx
	mov	edx, DWORD PTR $T226391[ebp]
	mov	DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence$[ebp], edx
	mov	DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence$[ebp+4], 22 ; 00000016H

; 245  : 	kStream >> wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence;

	lea	eax, DWORD PTR _wrapm_eGuessOtherPlayerActiveGrandStrategyConfidence$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8

; 246  : 
; 247  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z ENDP	; CvGrandStrategyAI::Read
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
PUBLIC	?Write@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z ; CvGrandStrategyAI::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T226420 = -48						; size = 4
$T226416 = -44						; size = 4
$T226412 = -40						; size = 4
$T226411 = -36						; size = 4
$T226406 = -32						; size = 4
$T226396 = -28						; size = 8
$T226395 = -20						; size = 8
$T226394 = -12						; size = 8
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z PROC	; CvGrandStrategyAI::Write, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	// Current version number
; 253  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 254  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 255  : 
; 256  : 	kStream << m_iNumTurnsSinceActiveSet;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 257  : 	kStream << m_eActiveGrandStrategy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR $T226406[ebp], eax
	lea	ecx, DWORD PTR $T226406[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 258  : 
; 259  : 	FAssertMsg(GC.getNumAIGrandStrategyInfos() > 0, "Number of AIStrategies to serialize is expected to greater than 0");
; 260  : 	kStream << ArrayWrapper<int>(m_pAIGrandStrategies->GetNumAIGrandStrategies(), m_paiGrandStrategyPriority);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR $T226412[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	mov	DWORD PTR $T226411[ebp], eax
	mov	edx, DWORD PTR $T226412[ebp]
	mov	DWORD PTR $T226394[ebp], edx
	mov	eax, DWORD PTR $T226411[ebp]
	mov	DWORD PTR $T226394[ebp+4], eax
	lea	ecx, DWORD PTR $T226394[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8

; 261  : 
; 262  : 	kStream << ArrayWrapper<int>(MAX_MAJOR_CIVS, m_eGuessOtherPlayerActiveGrandStrategy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T226416[ebp], ecx
	mov	edx, DWORD PTR $T226416[ebp]
	mov	DWORD PTR $T226395[ebp], edx
	mov	DWORD PTR $T226395[ebp+4], 22		; 00000016H
	lea	eax, DWORD PTR $T226395[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8

; 263  : 	kStream << ArrayWrapper<int>(MAX_MAJOR_CIVS, m_eGuessOtherPlayerActiveGrandStrategyConfidence);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR $T226420[ebp], eax
	mov	ecx, DWORD PTR $T226420[ebp]
	mov	DWORD PTR $T226396[ebp], ecx
	mov	DWORD PTR $T226396[ebp+4], 22		; 00000016H
	lea	edx, DWORD PTR $T226396[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvGrandStrategyAI@@QAEXAAVFDataStream@@@Z ENDP	; CvGrandStrategyAI::Write
_TEXT	ENDS
PUBLIC	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
; Function compile flags: /Odtp
;	COMDAT ?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ PROC	; CvGrandStrategyAI::GetPlayer, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  : 	return m_pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ENDP	; CvGrandStrategyAI::GetPlayer
_TEXT	ENDS
PUBLIC	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
; Function compile flags: /Odtp
;	COMDAT ?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ PROC ; CvGrandStrategyAI::GetAIGrandStrategies, COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	return m_pAIGrandStrategies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 284  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ENDP ; CvGrandStrategyAI::GetAIGrandStrategies
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
PUBLIC	?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z ; CvGrandStrategyAI::LogGrandStrategies
PUBLIC	?SetActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::SetActiveGrandStrategy
PUBLIC	?GetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QBEHXZ ; CvGrandStrategyAI::GetNumTurnsSinceActiveSet
PUBLIC	?ChangeNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ; CvGrandStrategyAI::ChangeNumTurnsSinceActiveSet
PUBLIC	?ChangeGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ; CvGrandStrategyAI::ChangeGrandStrategyPriority
PUBLIC	?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetGrandStrategyPriority
PUBLIC	?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,5,1,297,0>::push_back
PUBLIC	?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategy
PUBLIC	??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>
PUBLIC	?SetGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ; CvGrandStrategyAI::SetGrandStrategyPriority
PUBLIC	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
PUBLIC	??_C@_0CB@KGJPFAEG@Grand?5Strategy?5AI?3?5GS?5rand?5roll?4@ ; `string'
PUBLIC	?GetSpaceshipPriority@CvGrandStrategyAI@@QAEHXZ	; CvGrandStrategyAI::GetSpaceshipPriority
PUBLIC	??_C@_0BK@CCPNHFB@AIGRANDSTRATEGY_SPACESHIP?$AA@ ; `string'
PUBLIC	?GetUnitedNationsPriority@CvGrandStrategyAI@@QAEHXZ ; CvGrandStrategyAI::GetUnitedNationsPriority
PUBLIC	??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@ ; `string'
PUBLIC	?GetCulturePriority@CvGrandStrategyAI@@QAEHXZ	; CvGrandStrategyAI::GetCulturePriority
PUBLIC	??_C@_0BI@FNGLFDGI@AIGRANDSTRATEGY_CULTURE?$AA@	; `string'
PUBLIC	?GetConquestPriority@CvGrandStrategyAI@@QAEHXZ	; CvGrandStrategyAI::GetConquestPriority
PUBLIC	??_C@_0BJ@GCKPAHPE@AIGRANDSTRATEGY_CONQUEST?$AA@ ; `string'
PUBLIC	?GetBaseGrandStrategyPriority@CvGrandStrategyAI@@QAEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetBaseGrandStrategyPriority
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ ; CvGrandStrategyAI::DoGuessOtherPlayersActiveGrandStrategy
PUBLIC	__$ArrayPad$
PUBLIC	?DoTurn@CvGrandStrategyAI@@QAEXXZ		; CvGrandStrategyAI::DoTurn
EXTRN	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z:PROC ; CvCitySpecializationAI::SetSpecializationsDirty
EXTRN	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ:PROC ; CvPlayer::GetCitySpecializationAI
EXTRN	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isHasMet
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT ??_C@_0CB@KGJPFAEG@Grand?5Strategy?5AI?3?5GS?5rand?5roll?4@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CB@KGJPFAEG@Grand?5Strategy?5AI?3?5GS?5rand?5roll?4@ DB 'Grand Str'
	DB	'ategy AI: GS rand roll.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CCPNHFB@AIGRANDSTRATEGY_SPACESHIP?$AA@
CONST	SEGMENT
??_C@_0BK@CCPNHFB@AIGRANDSTRATEGY_SPACESHIP?$AA@ DB 'AIGRANDSTRATEGY_SPAC'
	DB	'ESHIP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@
CONST	SEGMENT
??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@ DB 'AIGRANDSTRATEG'
	DB	'Y_UNITED_NATIONS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FNGLFDGI@AIGRANDSTRATEGY_CULTURE?$AA@
CONST	SEGMENT
??_C@_0BI@FNGLFDGI@AIGRANDSTRATEGY_CULTURE?$AA@ DB 'AIGRANDSTRATEGY_CULTU'
	DB	'RE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GCKPAHPE@AIGRANDSTRATEGY_CONQUEST?$AA@
CONST	SEGMENT
??_C@_0BJ@GCKPAHPE@AIGRANDSTRATEGY_CONQUEST?$AA@ DB 'AIGRANDSTRATEGY_CONQ'
	DB	'UEST', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DoTurn@CvGrandStrategyAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$3
__ehfuncinfo$?DoTurn@CvGrandStrategyAI@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?DoTurn@CvGrandStrategyAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ?DoTurn@CvGrandStrategyAI@@QAEXXZ
_TEXT	SEGMENT
tv338 = -304						; size = 4
_this$ = -300						; size = 4
$T226558 = -272						; size = 4
$T226544 = -264						; size = 4
$T226509 = -240						; size = 4
$T226505 = -236						; size = 4
$T226504 = -232						; size = 4
$T226495 = -228						; size = 4
$T226486 = -224						; size = 4
$T226482 = -217						; size = 1
$T226473 = -216						; size = 4
$T226469 = -212						; size = 4
$T226465 = -208						; size = 4
$T226461 = -204						; size = 4
$T226453 = -200						; size = 4
$T226441 = -196						; size = 4
$T226429 = -192						; size = 4
$T226428 = -188						; size = 28
_iPriority$223849 = -160				; size = 4
_iBestPriority$223848 = -156				; size = 4
_eBestGrandStrategy$223850 = -152			; size = 4
_iPriority$223735 = -148				; size = 4
_viNumGrandStrategiesAdopted$ = -144			; size = 36
_iNumPlayers$ = -108					; size = 4
_iGrandStrategiesLoop$ = -104				; size = 4
_eGrandStrategy$ = -100					; size = 4
_iMajorLoop$ = -96					; size = 4
_iChange$ = -92						; size = 4
_viGrandStrategyChangeForLogging$ = -88			; size = 36
_strGrandStrategyName$ = -52				; size = 28
__$ArrayPad$ = -24					; size = 4
_pGrandStrategy$ = -20					; size = 4
_iNumPlayersAliveAndMet$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
?DoTurn@CvGrandStrategyAI@@QAEXXZ PROC			; CvGrandStrategyAI::DoTurn, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoTurn@CvGrandStrategyAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	DoGuessOtherPlayersActiveGrandStrategy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ ; CvGrandStrategyAI::DoGuessOtherPlayersActiveGrandStrategy

; 290  : 
; 291  : #ifdef AUI_GS_FIX_NO_ACTIVE_GS_FOR_HUMANS
; 292  : 	if (GetPlayer()->isHuman())
; 293  : 		return;
; 294  : #endif
; 295  : 
; 296  : #ifdef AUI_WARNING_FIXES
; 297  : 	uint iGrandStrategiesLoop;
; 298  : #else
; 299  : 	int iGrandStrategiesLoop;
; 300  : #endif
; 301  : 	AIGrandStrategyTypes eGrandStrategy;
; 302  : 	CvAIGrandStrategyXMLEntry* pGrandStrategy;
; 303  : 	CvString strGrandStrategyName;

	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 304  : 
; 305  : 	// Loop through all GrandStrategies to set their Priorities
; 306  : 	for(iGrandStrategiesLoop = 0; iGrandStrategiesLoop < GetAIGrandStrategies()->GetNumAIGrandStrategies(); iGrandStrategiesLoop++)

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0
	jmp	SHORT $LN33@DoTurn
$LN32@DoTurn:
	mov	eax, DWORD PTR _iGrandStrategiesLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
$LN33@DoTurn:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
	jge	$LN31@DoTurn

; 307  : 	{
; 308  : 		eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategiesLoop;

	mov	ecx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	mov	DWORD PTR _eGrandStrategy$[ebp], ecx

; 309  : 		pGrandStrategy = GetAIGrandStrategies()->GetEntry(iGrandStrategiesLoop);

	mov	edx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ; CvAIGrandStrategyXMLEntries::GetEntry
	mov	DWORD PTR _pGrandStrategy$[ebp], eax

; 310  : 		strGrandStrategyName = (CvString) pGrandStrategy->GetType();

	mov	ecx, DWORD PTR _pGrandStrategy$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T226441[ebp], eax
	cmp	DWORD PTR $T226441[ebp], 0
	je	SHORT $LN47@DoTurn
	mov	eax, DWORD PTR $T226441[ebp]
	mov	DWORD PTR tv338[ebp], eax
	jmp	SHORT $LN48@DoTurn
$LN47@DoTurn:
	mov	DWORD PTR tv338[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN48@DoTurn:
	mov	ecx, DWORD PTR tv338[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T226428[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	edx, DWORD PTR $T226428[ebp]
	mov	DWORD PTR $T226453[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T226453[ebp]
	push	eax
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T226428[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 311  : 
; 312  : 		// Base Priority looks at Personality Flavors (0 - 10) and multiplies * the Flavors attached to a Grand Strategy (0-10),
; 313  : 		// so expect a number between 0 and 100 back from this
; 314  : 		int iPriority = GetBaseGrandStrategyPriority(eGrandStrategy);

	mov	ecx, DWORD PTR _eGrandStrategy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBaseGrandStrategyPriority@CvGrandStrategyAI@@QAEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetBaseGrandStrategyPriority
	mov	DWORD PTR _iPriority$223735[ebp], eax

; 315  : 
; 316  : 		if(strGrandStrategyName == "AIGRANDSTRATEGY_CONQUEST")

	push	OFFSET ??_C@_0BJ@GCKPAHPE@AIGRANDSTRATEGY_CONQUEST?$AA@
	lea	edx, DWORD PTR _strGrandStrategyName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN30@DoTurn

; 317  : 		{
; 318  : 			iPriority += GetConquestPriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetConquestPriority@CvGrandStrategyAI@@QAEHXZ ; CvGrandStrategyAI::GetConquestPriority
	add	eax, DWORD PTR _iPriority$223735[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], eax
	jmp	$LN29@DoTurn
$LN30@DoTurn:

; 319  : 		}
; 320  : 		else if(strGrandStrategyName == "AIGRANDSTRATEGY_CULTURE")

	push	OFFSET ??_C@_0BI@FNGLFDGI@AIGRANDSTRATEGY_CULTURE?$AA@
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN28@DoTurn

; 321  : 		{
; 322  : 			iPriority += GetCulturePriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCulturePriority@CvGrandStrategyAI@@QAEHXZ ; CvGrandStrategyAI::GetCulturePriority
	add	eax, DWORD PTR _iPriority$223735[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], eax
	jmp	SHORT $LN29@DoTurn
$LN28@DoTurn:

; 323  : 		}
; 324  : 		else if(strGrandStrategyName == "AIGRANDSTRATEGY_UNITED_NATIONS")

	push	OFFSET ??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@
	lea	eax, DWORD PTR _strGrandStrategyName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN26@DoTurn

; 325  : 		{
; 326  : 			iPriority += GetUnitedNationsPriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnitedNationsPriority@CvGrandStrategyAI@@QAEHXZ ; CvGrandStrategyAI::GetUnitedNationsPriority
	add	eax, DWORD PTR _iPriority$223735[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], eax
	jmp	SHORT $LN29@DoTurn
$LN26@DoTurn:

; 327  : 		}
; 328  : 		else if(strGrandStrategyName == "AIGRANDSTRATEGY_SPACESHIP")

	push	OFFSET ??_C@_0BK@CCPNHFB@AIGRANDSTRATEGY_SPACESHIP?$AA@
	lea	edx, DWORD PTR _strGrandStrategyName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@DoTurn

; 329  : 		{
; 330  : 			iPriority += GetSpaceshipPriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpaceshipPriority@CvGrandStrategyAI@@QAEHXZ ; CvGrandStrategyAI::GetSpaceshipPriority
	add	eax, DWORD PTR _iPriority$223735[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], eax
$LN29@DoTurn:

; 331  : 		}
; 332  : 
; 333  : 		// Random element
; 334  : 		iPriority += GC.getGame().getJonRandNum(/*50*/ GC.getAI_GS_RAND_ROLL(), "Grand Strategy AI: GS rand roll.");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1896
	mov	DWORD PTR $T226461[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226465[ebp], edx
	push	OFFSET ??_C@_0CB@KGJPFAEG@Grand?5Strategy?5AI?3?5GS?5rand?5roll?4@
	mov	eax, DWORD PTR $T226461[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226465[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	add	eax, DWORD PTR _iPriority$223735[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], eax

; 335  : 
; 336  : 		// Give a boost to the current strategy so that small fluctuation doesn't cause a big change
; 337  : 		if(GetActiveGrandStrategy() == eGrandStrategy && GetActiveGrandStrategy() != NO_AIGRANDSTRATEGY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	eax, DWORD PTR _eGrandStrategy$[ebp]
	jne	SHORT $LN23@DoTurn
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	eax, -1
	je	SHORT $LN23@DoTurn

; 338  : 		{
; 339  : 			iPriority += /*50*/ GC.getAI_GRAND_STRATEGY_CURRENT_STRATEGY_WEIGHT();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1900
	mov	DWORD PTR $T226469[ebp], ecx
	mov	edx, DWORD PTR _iPriority$223735[ebp]
	add	edx, DWORD PTR $T226469[ebp]
	mov	DWORD PTR _iPriority$223735[ebp], edx
$LN23@DoTurn:

; 340  : 		}
; 341  : 
; 342  : 		SetGrandStrategyPriority(eGrandStrategy, iPriority);

	mov	eax, DWORD PTR _iPriority$223735[ebp]
	push	eax
	mov	ecx, DWORD PTR _eGrandStrategy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ; CvGrandStrategyAI::SetGrandStrategyPriority

; 343  : 	}

	jmp	$LN32@DoTurn
$LN31@DoTurn:

; 344  : 
; 345  : 	// Now look at what we think the other players in the game are up to - we might have an opportunity to capitalize somewhere
; 346  : 	int iNumPlayersAliveAndMet = 0;

	mov	DWORD PTR _iNumPlayersAliveAndMet$[ebp], 0

; 347  : 
; 348  : 	int iMajorLoop;
; 349  : 
; 350  : 	for(iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$[ebp], 0
	jmp	SHORT $LN22@DoTurn
$LN21@DoTurn:
	mov	edx, DWORD PTR _iMajorLoop$[ebp]
	add	edx, 1
	mov	DWORD PTR _iMajorLoop$[ebp], edx
$LN22@DoTurn:
	cmp	DWORD PTR _iMajorLoop$[ebp], 22		; 00000016H
	jge	$LN20@DoTurn

; 351  : 	{
; 352  : 		if(GET_PLAYER((PlayerTypes) iMajorLoop).isAlive())

	mov	eax, DWORD PTR _iMajorLoop$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226473[ebp], eax
	mov	ecx, DWORD PTR $T226473[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T226482[ebp], dl
	movzx	eax, BYTE PTR $T226482[ebp]
	test	eax, eax
	je	$LN19@DoTurn

; 353  : 		{
; 354  : 			if(GET_TEAM(GetPlayer()->getTeam()).isHasMet(GET_PLAYER((PlayerTypes) iMajorLoop).getTeam()))

	mov	ecx, DWORD PTR _iMajorLoop$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226486[ebp], ecx
	mov	edx, DWORD PTR $T226486[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226495[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226504[ebp], eax
	mov	ecx, DWORD PTR $T226504[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226505[ebp], eax
	mov	eax, DWORD PTR $T226505[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T226509[ebp], eax
	mov	ecx, DWORD PTR $T226495[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T226509[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN19@DoTurn

; 355  : 			{
; 356  : 				iNumPlayersAliveAndMet++;

	mov	eax, DWORD PTR _iNumPlayersAliveAndMet$[ebp]
	add	eax, 1
	mov	DWORD PTR _iNumPlayersAliveAndMet$[ebp], eax
$LN19@DoTurn:

; 357  : 			}
; 358  : 		}
; 359  : 	}

	jmp	$LN21@DoTurn
$LN20@DoTurn:

; 360  : 
; 361  : 	FStaticVector< int, 5, true, c_eCiv5GameplayDLL > viNumGrandStrategiesAdopted;

	lea	ecx, DWORD PTR _viNumGrandStrategiesAdopted$[ebp]
	call	??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 362  : 	int iNumPlayers;
; 363  : 
; 364  : 	// Init vector
; 365  : 	for(iGrandStrategiesLoop = 0; iGrandStrategiesLoop < GetAIGrandStrategies()->GetNumAIGrandStrategies(); iGrandStrategiesLoop++)

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0
	jmp	SHORT $LN17@DoTurn
$LN16@DoTurn:
	mov	ecx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], ecx
$LN17@DoTurn:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
	jge	SHORT $LN15@DoTurn

; 366  : 	{
; 367  : 		iNumPlayers = 0;

	mov	DWORD PTR _iNumPlayers$[ebp], 0

; 368  : 
; 369  : 		// Tally up how many players we think are pusuing each Grand Strategy
; 370  : 		for(iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$[ebp], 0
	jmp	SHORT $LN14@DoTurn
$LN13@DoTurn:
	mov	edx, DWORD PTR _iMajorLoop$[ebp]
	add	edx, 1
	mov	DWORD PTR _iMajorLoop$[ebp], edx
$LN14@DoTurn:
	cmp	DWORD PTR _iMajorLoop$[ebp], 22		; 00000016H
	jge	SHORT $LN12@DoTurn

; 371  : 		{
; 372  : 			if(GetGuessOtherPlayerActiveGrandStrategy((PlayerTypes) iMajorLoop) == (AIGrandStrategyTypes) iGrandStrategiesLoop)

	mov	eax, DWORD PTR _iMajorLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategy
	cmp	eax, DWORD PTR _iGrandStrategiesLoop$[ebp]
	jne	SHORT $LN11@DoTurn

; 373  : 			{
; 374  : 				iNumPlayers++;

	mov	ecx, DWORD PTR _iNumPlayers$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNumPlayers$[ebp], ecx
$LN11@DoTurn:

; 375  : 			}
; 376  : 		}

	jmp	SHORT $LN13@DoTurn
$LN12@DoTurn:

; 377  : 
; 378  : 		viNumGrandStrategiesAdopted.push_back(iNumPlayers);

	lea	edx, DWORD PTR _iNumPlayers$[ebp]
	push	edx
	lea	ecx, DWORD PTR _viNumGrandStrategiesAdopted$[ebp]
	call	?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,5,1,297,0>::push_back

; 379  : 	}

	jmp	SHORT $LN16@DoTurn
$LN15@DoTurn:

; 380  : 
; 381  : 	FStaticVector< int, 5, true, c_eCiv5GameplayDLL > viGrandStrategyChangeForLogging;

	lea	ecx, DWORD PTR _viGrandStrategyChangeForLogging$[ebp]
	call	??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 382  : 
; 383  : 	int iChange;
; 384  : 
; 385  : 	// Now modify our preferences based on how many people are going for stuff
; 386  : 	for(iGrandStrategiesLoop = 0; iGrandStrategiesLoop < GetAIGrandStrategies()->GetNumAIGrandStrategies(); iGrandStrategiesLoop++)

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0
	jmp	SHORT $LN10@DoTurn
$LN9@DoTurn:
	mov	eax, DWORD PTR _iGrandStrategiesLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
$LN10@DoTurn:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
	jge	$LN8@DoTurn

; 387  : 	{
; 388  : 		eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategiesLoop;

	mov	ecx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	mov	DWORD PTR _eGrandStrategy$[ebp], ecx

; 389  : 		// If EVERYONE else we know is also going for this Grand Strategy, reduce our Priority by 50%
; 390  : 		iChange = GetGrandStrategyPriority(eGrandStrategy) * /*50*/ GC.getAI_GRAND_STRATEGY_OTHER_PLAYERS_GS_MULTIPLIER();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1916
	mov	DWORD PTR $T226544[ebp], edx
	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetGrandStrategyPriority
	imul	eax, DWORD PTR $T226544[ebp]
	mov	DWORD PTR _iChange$[ebp], eax

; 391  : 		iChange = iChange * viNumGrandStrategiesAdopted[eGrandStrategy] / iNumPlayersAliveAndMet;

	mov	ecx, DWORD PTR _eGrandStrategy$[ebp]
	mov	edx, DWORD PTR _viNumGrandStrategiesAdopted$[ebp]
	mov	eax, DWORD PTR _iChange$[ebp]
	imul	eax, DWORD PTR [edx+ecx*4]
	cdq
	idiv	DWORD PTR _iNumPlayersAliveAndMet$[ebp]
	mov	DWORD PTR _iChange$[ebp], eax

; 392  : 		iChange /= 100;

	mov	eax, DWORD PTR _iChange$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iChange$[ebp], eax

; 393  : 
; 394  : 		ChangeGrandStrategyPriority(eGrandStrategy, -iChange);

	mov	edx, DWORD PTR _iChange$[ebp]
	neg	edx
	push	edx
	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ; CvGrandStrategyAI::ChangeGrandStrategyPriority

; 395  : 
; 396  : 		viGrandStrategyChangeForLogging.push_back(-iChange);

	mov	ecx, DWORD PTR _iChange$[ebp]
	neg	ecx
	mov	DWORD PTR $T226429[ebp], ecx
	lea	edx, DWORD PTR $T226429[ebp]
	push	edx
	lea	ecx, DWORD PTR _viGrandStrategyChangeForLogging$[ebp]
	call	?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,5,1,297,0>::push_back

; 397  : 	}

	jmp	$LN9@DoTurn
$LN8@DoTurn:

; 398  : 
; 399  : 	ChangeNumTurnsSinceActiveSet(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ; CvGrandStrategyAI::ChangeNumTurnsSinceActiveSet

; 400  : 
; 401  : 	// Now see which Grand Strategy should be active, based on who has the highest Priority right now
; 402  : 	// Grand Strategy must be run for at least 10 turns
; 403  : 	if(GetActiveGrandStrategy() == NO_AIGRANDSTRATEGY || GetNumTurnsSinceActiveSet() >= /*10*/ GC.getAI_GRAND_STRATEGY_NUM_TURNS_STRATEGY_MUST_BE_ACTIVE())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	eax, -1
	je	SHORT $LN6@DoTurn
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1892
	mov	DWORD PTR $T226558[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QBEHXZ ; CvGrandStrategyAI::GetNumTurnsSinceActiveSet
	cmp	eax, DWORD PTR $T226558[ebp]
	jl	$LN7@DoTurn
$LN6@DoTurn:

; 404  : 	{
; 405  : 		int iBestPriority = -1;

	mov	DWORD PTR _iBestPriority$223848[ebp], -1

; 406  : 		int iPriority;
; 407  : 
; 408  : 		AIGrandStrategyTypes eBestGrandStrategy = NO_AIGRANDSTRATEGY;

	mov	DWORD PTR _eBestGrandStrategy$223850[ebp], -1

; 409  : 
; 410  : 		for(iGrandStrategiesLoop = 0; iGrandStrategiesLoop < GetAIGrandStrategies()->GetNumAIGrandStrategies(); iGrandStrategiesLoop++)

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0
	jmp	SHORT $LN5@DoTurn
$LN4@DoTurn:
	mov	ecx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], ecx
$LN5@DoTurn:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
	jge	SHORT $LN3@DoTurn

; 411  : 		{
; 412  : 			eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategiesLoop;

	mov	edx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	mov	DWORD PTR _eGrandStrategy$[ebp], edx

; 413  : 
; 414  : 			iPriority = GetGrandStrategyPriority(eGrandStrategy);

	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetGrandStrategyPriority
	mov	DWORD PTR _iPriority$223849[ebp], eax

; 415  : 
; 416  : 			if(iPriority > iBestPriority)

	mov	ecx, DWORD PTR _iPriority$223849[ebp]
	cmp	ecx, DWORD PTR _iBestPriority$223848[ebp]
	jle	SHORT $LN2@DoTurn

; 417  : 			{
; 418  : 				iBestPriority = iPriority;

	mov	edx, DWORD PTR _iPriority$223849[ebp]
	mov	DWORD PTR _iBestPriority$223848[ebp], edx

; 419  : 				eBestGrandStrategy = eGrandStrategy;

	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	mov	DWORD PTR _eBestGrandStrategy$223850[ebp], eax
$LN2@DoTurn:

; 420  : 			}
; 421  : 		}

	jmp	SHORT $LN4@DoTurn
$LN3@DoTurn:

; 422  : 
; 423  : 		if(eBestGrandStrategy != GetActiveGrandStrategy())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	DWORD PTR _eBestGrandStrategy$223850[ebp], eax
	je	SHORT $LN7@DoTurn

; 424  : 		{
; 425  : 			SetActiveGrandStrategy(eBestGrandStrategy);

	mov	ecx, DWORD PTR _eBestGrandStrategy$223850[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::SetActiveGrandStrategy

; 426  : 			m_pPlayer->GetCitySpecializationAI()->SetSpecializationsDirty(SPECIALIZATION_UPDATE_NEW_GRAND_STRATEGY);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::SetSpecializationsDirty
$LN7@DoTurn:

; 427  : 		}
; 428  : 	}
; 429  : 
; 430  : 	LogGrandStrategies(viGrandStrategyChangeForLogging);

	lea	eax, DWORD PTR _viGrandStrategyChangeForLogging$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z ; CvGrandStrategyAI::LogGrandStrategies

; 431  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _viGrandStrategyChangeForLogging$[ebp]
	call	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _viNumGrandStrategiesAdopted$[ebp]
	call	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T226428[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _viNumGrandStrategiesAdopted$[ebp]
	jmp	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
__unwindfunclet$?DoTurn@CvGrandStrategyAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _viGrandStrategyChangeForLogging$[ebp]
	jmp	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
__ehhandler$?DoTurn@CvGrandStrategyAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoTurn@CvGrandStrategyAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoTurn@CvGrandStrategyAI@@QAEXXZ ENDP			; CvGrandStrategyAI::DoTurn
PUBLIC	??_C@_0BD@NABBHNHK@VICTORY_DOMINATION?$AA@	; `string'
EXTRN	?getNumNukeUnits@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumNukeUnits
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?isOwned@CvPlot@@QBE_NXZ:PROC			; CvPlot::isOwned
EXTRN	?IsCramped@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::IsCramped
EXTRN	?getAtWarCount@CvTeam@@QBEH_N@Z:PROC		; CvTeam::getAtWarCount
EXTRN	?GetMilitaryMight@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetMilitaryMight
EXTRN	?GetWorldMilitaryStrengthAverage@CvGame@@QAEHW4PlayerTypes@@_N1@Z:PROC ; CvGame::GetWorldMilitaryStrengthAverage
EXTRN	?isMinorCiv@CvTeam@@QBE_NXZ:PROC		; CvTeam::isMinorCiv
EXTRN	?GetID@CvTeam@@QBE?AW4TeamTypes@@XZ:PROC	; CvTeam::GetID
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ:PROC ; CvPlayer::GetCurrentEra
EXTRN	?GetBoldness@CvDiplomacyAI@@QBEHXZ:PROC		; CvDiplomacyAI::GetBoldness
EXTRN	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z:PROC ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?areNoVictoriesValid@CvGame@@QBE_NXZ:PROC	; CvGame::areNoVictoriesValid
EXTRN	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z:PROC ; CvGame::isVictoryValid
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
;	COMDAT ??_C@_0BD@NABBHNHK@VICTORY_DOMINATION?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
CONST	SEGMENT
??_C@_0BD@NABBHNHK@VICTORY_DOMINATION?$AA@ DB 'VICTORY_DOMINATION', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	ENDS
;	COMDAT ?GetConquestPriority@CvGrandStrategyAI@@QAEHXZ
_TEXT	SEGMENT
tv146 = -260						; size = 4
tv377 = -256						; size = 4
_this$ = -252						; size = 4
$T226843 = -248						; size = 4
$T226839 = -244						; size = 4
$T226830 = -240						; size = 4
$T226826 = -236						; size = 4
$T226825 = -232						; size = 4
$T226816 = -225						; size = 1
$T226807 = -224						; size = 4
$T226803 = -220						; size = 4
$T226799 = -216						; size = 4
$T226790 = -212						; size = 4
$T226786 = -208						; size = 4
$T226782 = -204						; size = 4
$T226781 = -200						; size = 4
$T226769 = -196						; size = 4
$T226765 = -192						; size = 4
$T226761 = -188						; size = 4
$T226757 = -184						; size = 4
$T226753 = -180						; size = 4
$T226749 = -176						; size = 4
$T226745 = -172						; size = 4
$T226736 = -168						; size = 4
$T226732 = -164						; size = 4
$T226731 = -160						; size = 4
$T226722 = -153						; size = 1
$T226713 = -152						; size = 4
$T226709 = -148						; size = 4
$T226705 = -144						; size = 4
$T226701 = -140						; size = 4
$T226697 = -136						; size = 4
$T226696 = -132						; size = 4
$T226687 = -128						; size = 4
$T226683 = -124						; size = 4
$T226679 = -120						; size = 4
$T226675 = -116						; size = 4
$T226671 = -112						; size = 4
$T226667 = -108						; size = 4
$T226660 = -104						; size = 4
$T226659 = -100						; size = 4
$T226647 = -96						; size = 4
$T226638 = -92						; size = 4
$T226632 = -88						; size = 4
$T226628 = -84						; size = 4
_ePlayer$223923 = -80					; size = 4
_iMajorLoop$223919 = -76				; size = 4
_iPlotLoop$223908 = -72					; size = 4
_iMajorLoop$223900 = -68				; size = 4
_ePlayer$223896 = -64					; size = 4
_iTotalLandMe$223898 = -60				; size = 4
_iNumPlayersMet$223897 = -56				; size = 4
_iTotalLandPlayersMet$223899 = -52			; size = 4
_iMilitaryRatio$223892 = -48				; size = 4
_iWorldMilitaryStrength$223890 = -44			; size = 4
_iTeamLoop$223880 = -40					; size = 4
_bHasMetMajor$223879 = -33				; size = 1
_iGeneralHostility$ = -32				; size = 4
_iPriority$ = -28					; size = 4
_pTeam$ = -24						; size = 4
_iGeneralApproachModifier$ = -20			; size = 4
_eVictory$ = -16					; size = 4
_iGeneralDeceptiveness$ = -12				; size = 4
_iGeneralWarlikeness$ = -8				; size = 4
_iGeneralFriendliness$ = -4				; size = 4
?GetConquestPriority@CvGrandStrategyAI@@QAEHXZ PROC	; CvGrandStrategyAI::GetConquestPriority, COMDAT
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 440  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 441  : 
; 442  : 	// If Conquest Victory isn't even available then don't bother with anything
; 443  : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_DOMINATION", true);

	push	1
	push	OFFSET ??_C@_0BD@NABBHNHK@VICTORY_DOMINATION?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 444  : 	if(eVictory == NO_VICTORY || !GC.getGame().isVictoryValid(eVictory))

	cmp	DWORD PTR _eVictory$[ebp], -1
	je	SHORT $LN36@GetConques
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226628[ebp], eax
	mov	ecx, DWORD PTR _eVictory$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T226628[ebp]
	call	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z ; CvGame::isVictoryValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN37@GetConques
$LN36@GetConques:

; 445  : 	{
; 446  : 		if(!GC.getGame().areNoVictoriesValid())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226632[ebp], eax
	mov	ecx, DWORD PTR $T226632[ebp]
	call	?areNoVictoriesValid@CvGame@@QBE_NXZ	; CvGame::areNoVictoriesValid
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN37@GetConques

; 447  : 		{
; 448  : 			return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN38@GetConques
$LN37@GetConques:

; 449  : 		}
; 450  : 	}
; 451  : 
; 452  : 	int iGeneralWarlikeness = GetPlayer()->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_WAR);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	mov	DWORD PTR _iGeneralWarlikeness$[ebp], eax

; 453  : 	int iGeneralHostility = GetPlayer()->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_HOSTILE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	mov	DWORD PTR _iGeneralHostility$[ebp], eax

; 454  : 	int iGeneralDeceptiveness = GetPlayer()->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_DECEPTIVE);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	mov	DWORD PTR _iGeneralDeceptiveness$[ebp], eax

; 455  : 	int iGeneralFriendliness = GetPlayer()->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_FRIENDLY);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	mov	DWORD PTR _iGeneralFriendliness$[ebp], eax

; 456  : 
; 457  : 	int iGeneralApproachModifier = max(max(iGeneralDeceptiveness, iGeneralHostility),iGeneralWarlikeness) - iGeneralFriendliness;

	mov	edx, DWORD PTR _iGeneralDeceptiveness$[ebp]
	cmp	edx, DWORD PTR _iGeneralHostility$[ebp]
	jge	SHORT $LN46@GetConques
	lea	eax, DWORD PTR _iGeneralHostility$[ebp]
	mov	DWORD PTR tv377[ebp], eax
	jmp	SHORT $LN47@GetConques
$LN46@GetConques:
	lea	ecx, DWORD PTR _iGeneralDeceptiveness$[ebp]
	mov	DWORD PTR tv377[ebp], ecx
$LN47@GetConques:
	mov	edx, DWORD PTR tv377[ebp]
	mov	DWORD PTR $T226638[ebp], edx
	mov	eax, DWORD PTR $T226638[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _iGeneralWarlikeness$[ebp]
	jge	SHORT $LN50@GetConques
	lea	edx, DWORD PTR _iGeneralWarlikeness$[ebp]
	mov	DWORD PTR tv146[ebp], edx
	jmp	SHORT $LN51@GetConques
$LN50@GetConques:
	mov	eax, DWORD PTR $T226638[ebp]
	mov	DWORD PTR tv146[ebp], eax
$LN51@GetConques:
	mov	ecx, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T226647[ebp], ecx
	mov	edx, DWORD PTR $T226647[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _iGeneralFriendliness$[ebp]
	mov	DWORD PTR _iGeneralApproachModifier$[ebp], eax

; 458  : 	// Boldness gives the base weight for Conquest (no flavors added earlier)
; 459  : 	iPriority += ((GetPlayer()->GetDiplomacyAI()->GetBoldness() + iGeneralApproachModifier) * (12 - m_pPlayer->GetCurrentEra())); // make a little less likely as time goes on

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetBoldness@CvDiplomacyAI@@QBEHXZ	; CvDiplomacyAI::GetBoldness
	mov	esi, eax
	add	esi, DWORD PTR _iGeneralApproachModifier$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	mov	edx, 12					; 0000000cH
	sub	edx, eax
	imul	esi, edx
	add	esi, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], esi

; 460  : 
; 461  : 	CvTeam& pTeam = GET_TEAM(GetPlayer()->getTeam());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226659[ebp], eax
	mov	eax, DWORD PTR $T226659[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226660[ebp], eax
	mov	edx, DWORD PTR $T226660[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _pTeam$[ebp], edx

; 462  : 
; 463  : 	// How many turns must have passed before we test for having met nobody?
; 464  : 	if(GC.getGame().getElapsedGameTurns() >= /*20*/ GC.getAI_GS_CONQUEST_NOBODY_MET_FIRST_TURN())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226667[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1920
	mov	DWORD PTR $T226671[ebp], ecx
	mov	ecx, DWORD PTR $T226667[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	cmp	eax, DWORD PTR $T226671[ebp]
	jl	SHORT $LN34@GetConques

; 465  : 	{
; 466  : 		// If we haven't met any Major Civs yet, then we probably shouldn't be planning on conquering the world
; 467  : 		bool bHasMetMajor = false;

	mov	BYTE PTR _bHasMetMajor$223879[ebp], 0

; 468  : 
; 469  : 		for(int iTeamLoop = 0; iTeamLoop < MAX_CIV_TEAMS; iTeamLoop++)

	mov	DWORD PTR _iTeamLoop$223880[ebp], 0
	jmp	SHORT $LN33@GetConques
$LN32@GetConques:
	mov	edx, DWORD PTR _iTeamLoop$223880[ebp]
	add	edx, 1
	mov	DWORD PTR _iTeamLoop$223880[ebp], edx
$LN33@GetConques:
	cmp	DWORD PTR _iTeamLoop$223880[ebp], 63	; 0000003fH
	jge	SHORT $LN31@GetConques

; 470  : 		{
; 471  : 			if(pTeam.GetID() != iTeamLoop && !GET_TEAM((TeamTypes) iTeamLoop).isMinorCiv())

	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?GetID@CvTeam@@QBE?AW4TeamTypes@@XZ	; CvTeam::GetID
	cmp	eax, DWORD PTR _iTeamLoop$223880[ebp]
	je	SHORT $LN30@GetConques
	mov	eax, DWORD PTR _iTeamLoop$223880[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T226675[ebp], eax
	mov	ecx, DWORD PTR $T226675[ebp]
	call	?isMinorCiv@CvTeam@@QBE_NXZ		; CvTeam::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN30@GetConques

; 472  : 			{
; 473  : 				if(pTeam.isHasMet((TeamTypes) iTeamLoop))

	mov	edx, DWORD PTR _iTeamLoop$223880[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN30@GetConques

; 474  : 				{
; 475  : 					bHasMetMajor = true;

	mov	BYTE PTR _bHasMetMajor$223879[ebp], 1

; 476  : 					break;

	jmp	SHORT $LN31@GetConques
$LN30@GetConques:

; 477  : 				}
; 478  : 			}
; 479  : 		}

	jmp	SHORT $LN32@GetConques
$LN31@GetConques:

; 480  : 		if(!bHasMetMajor)

	movzx	ecx, BYTE PTR _bHasMetMajor$223879[ebp]
	test	ecx, ecx
	jne	SHORT $LN34@GetConques

; 481  : 		{
; 482  : 			iPriority += /*-50*/ GC.getAI_GRAND_STRATEGY_CONQUEST_NOBODY_MET_WEIGHT();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1924
	mov	DWORD PTR $T226679[ebp], edx
	mov	eax, DWORD PTR _iPriority$[ebp]
	add	eax, DWORD PTR $T226679[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax
$LN34@GetConques:

; 483  : 		}
; 484  : 	}
; 485  : 
; 486  : 	// How many turns must have passed before we test for us having a weak military?
; 487  : 	if(GC.getGame().getElapsedGameTurns() >= /*60*/ GC.getAI_GS_CONQUEST_MILITARY_STRENGTH_FIRST_TURN())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226683[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1932
	mov	DWORD PTR $T226687[ebp], edx
	mov	ecx, DWORD PTR $T226683[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	cmp	eax, DWORD PTR $T226687[ebp]
	jl	$LN27@GetConques

; 488  : 	{
; 489  : 		// Compare our military strength to the rest of the world
; 490  : 		int iWorldMilitaryStrength = GC.getGame().GetWorldMilitaryStrengthAverage(GetPlayer()->GetID(), true, true);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226696[ebp], eax
	mov	eax, DWORD PTR $T226696[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T226697[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226701[ebp], edx
	push	1
	push	1
	mov	eax, DWORD PTR $T226697[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226701[ebp]
	call	?GetWorldMilitaryStrengthAverage@CvGame@@QAEHW4PlayerTypes@@_N1@Z ; CvGame::GetWorldMilitaryStrengthAverage
	mov	DWORD PTR _iWorldMilitaryStrength$223890[ebp], eax

; 491  : 
; 492  : 		if(iWorldMilitaryStrength > 0)

	cmp	DWORD PTR _iWorldMilitaryStrength$223890[ebp], 0
	jle	SHORT $LN27@GetConques

; 493  : 		{
; 494  : 			int iMilitaryRatio = (GetPlayer()->GetMilitaryMight() - iWorldMilitaryStrength) * /*100*/ GC.getAI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER() / iWorldMilitaryStrength;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1936
	mov	DWORD PTR $T226705[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	sub	eax, DWORD PTR _iWorldMilitaryStrength$223890[ebp]
	imul	eax, DWORD PTR $T226705[ebp]
	cdq
	idiv	DWORD PTR _iWorldMilitaryStrength$223890[ebp]
	mov	DWORD PTR _iMilitaryRatio$223892[ebp], eax

; 495  : 
; 496  : 			// Make the likelihood of BECOMING a warmonger lower than dropping the bad behavior
; 497  : 			if(iMilitaryRatio > 0)

	cmp	DWORD PTR _iMilitaryRatio$223892[ebp], 0
	jle	SHORT $LN25@GetConques

; 498  : 				iMilitaryRatio /= 2;

	mov	eax, DWORD PTR _iMilitaryRatio$223892[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iMilitaryRatio$223892[ebp], eax
$LN25@GetConques:

; 499  : 
; 500  : 			iPriority += iMilitaryRatio;	// This will add between -100 and 100 depending on this player's MilitaryStrength relative the world average. The number will typically be near 0 though, as it's fairly hard to get away from the world average

	mov	edx, DWORD PTR _iPriority$[ebp]
	add	edx, DWORD PTR _iMilitaryRatio$223892[ebp]
	mov	DWORD PTR _iPriority$[ebp], edx
$LN27@GetConques:

; 501  : 		}
; 502  : 	}
; 503  : 
; 504  : 	// If we're at war, then boost the weight a bit
; 505  : 	if(pTeam.getAtWarCount(/*bIgnoreMinors*/ false) > 0)

	push	0
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?getAtWarCount@CvTeam@@QBEH_N@Z		; CvTeam::getAtWarCount
	test	eax, eax
	jle	SHORT $LN24@GetConques

; 506  : 	{
; 507  : 		iPriority += /*10*/ GC.getAI_GRAND_STRATEGY_CONQUEST_AT_WAR_WEIGHT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1928
	mov	DWORD PTR $T226709[ebp], eax
	mov	ecx, DWORD PTR _iPriority$[ebp]
	add	ecx, DWORD PTR $T226709[ebp]
	mov	DWORD PTR _iPriority$[ebp], ecx
$LN24@GetConques:

; 508  : 	}
; 509  : 
; 510  : 	// If our neighbors are cramping our style, consider less... scrupulous means of obtaining more land
; 511  : 	if(GetPlayer()->IsCramped())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?IsCramped@CvPlayer@@QBE_NXZ		; CvPlayer::IsCramped
	movzx	edx, al
	test	edx, edx
	je	$LN23@GetConques

; 512  : 	{
; 513  : 		PlayerTypes ePlayer;
; 514  : 		int iNumPlayersMet = 1;	// Include 1 for me!

	mov	DWORD PTR _iNumPlayersMet$223897[ebp], 1

; 515  : 		int iTotalLandMe = 0;

	mov	DWORD PTR _iTotalLandMe$223898[ebp], 0

; 516  : 		int iTotalLandPlayersMet = 0;

	mov	DWORD PTR _iTotalLandPlayersMet$223899[ebp], 0

; 517  : 
; 518  : 		// Count the number of Majors we know
; 519  : 		for(int iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$223900[ebp], 0
	jmp	SHORT $LN22@GetConques
$LN21@GetConques:
	mov	eax, DWORD PTR _iMajorLoop$223900[ebp]
	add	eax, 1
	mov	DWORD PTR _iMajorLoop$223900[ebp], eax
$LN22@GetConques:
	cmp	DWORD PTR _iMajorLoop$223900[ebp], 22	; 00000016H
	jge	$LN20@GetConques

; 520  : 		{
; 521  : 			ePlayer = (PlayerTypes) iMajorLoop;

	mov	ecx, DWORD PTR _iMajorLoop$223900[ebp]
	mov	DWORD PTR _ePlayer$223896[ebp], ecx

; 522  : 
; 523  : 			if(GET_PLAYER(ePlayer).isAlive() && iMajorLoop != GetPlayer()->GetID())

	mov	edx, DWORD PTR _ePlayer$223896[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226713[ebp], edx
	mov	eax, DWORD PTR $T226713[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T226722[ebp], cl
	movzx	edx, BYTE PTR $T226722[ebp]
	test	edx, edx
	je	SHORT $LN19@GetConques
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226731[ebp], eax
	mov	eax, DWORD PTR $T226731[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T226732[ebp], ecx
	mov	edx, DWORD PTR _iMajorLoop$223900[ebp]
	cmp	edx, DWORD PTR $T226732[ebp]
	je	SHORT $LN19@GetConques

; 524  : 			{
; 525  : 				if(pTeam.isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	eax, DWORD PTR _ePlayer$223896[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226736[ebp], eax
	mov	ecx, DWORD PTR $T226736[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226745[ebp], eax
	mov	eax, DWORD PTR $T226745[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@GetConques

; 526  : 				{
; 527  : 					iNumPlayersMet++;

	mov	edx, DWORD PTR _iNumPlayersMet$223897[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumPlayersMet$223897[ebp], edx
$LN19@GetConques:

; 528  : 				}
; 529  : 			}
; 530  : 		}

	jmp	$LN21@GetConques
$LN20@GetConques:

; 531  : 
; 532  : 		if(iNumPlayersMet > 0)

	cmp	DWORD PTR _iNumPlayersMet$223897[ebp], 0
	jle	$LN23@GetConques

; 533  : 		{
; 534  : 			// Check every plot for ownership
; 535  : #ifdef AUI_WARNING_FIXES
; 536  : 			for (uint iPlotLoop = 0; iPlotLoop < GC.getMap().numPlots(); iPlotLoop++)
; 537  : #else
; 538  : 			for(int iPlotLoop = 0; iPlotLoop < GC.getMap().numPlots(); iPlotLoop++)

	mov	DWORD PTR _iPlotLoop$223908[ebp], 0
	jmp	SHORT $LN16@GetConques
$LN15@GetConques:
	mov	eax, DWORD PTR _iPlotLoop$223908[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlotLoop$223908[ebp], eax
$LN16@GetConques:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T226749[ebp], ecx
	mov	edx, DWORD PTR $T226749[ebp]
	mov	eax, DWORD PTR [edx+4028]
	mov	DWORD PTR $T226753[ebp], eax
	mov	ecx, DWORD PTR _iPlotLoop$223908[ebp]
	cmp	ecx, DWORD PTR $T226753[ebp]
	jge	$LN14@GetConques

; 539  : #endif
; 540  : 			{
; 541  : 				if(GC.getMap().plotByIndexUnchecked(iPlotLoop)->isOwned())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T226757[ebp], edx
	mov	eax, DWORD PTR _iPlotLoop$223908[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T226757[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR $T226761[ebp], eax
	mov	ecx, DWORD PTR $T226761[ebp]
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	movzx	edx, al
	test	edx, edx
	je	$LN13@GetConques

; 542  : 				{
; 543  : 					ePlayer = GC.getMap().plotByIndexUnchecked(iPlotLoop)->getOwner();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T226765[ebp], eax
	mov	ecx, DWORD PTR _iPlotLoop$223908[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T226765[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR $T226769[ebp], ecx
	mov	eax, DWORD PTR $T226769[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR _ePlayer$223896[ebp], ecx

; 544  : 
; 545  : 					if(ePlayer == GetPlayer()->GetID())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226781[ebp], eax
	mov	edx, DWORD PTR $T226781[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T226782[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$223896[ebp]
	cmp	ecx, DWORD PTR $T226782[ebp]
	jne	SHORT $LN12@GetConques

; 546  : 					{
; 547  : 						iTotalLandPlayersMet++;

	mov	edx, DWORD PTR _iTotalLandPlayersMet$223899[ebp]
	add	edx, 1
	mov	DWORD PTR _iTotalLandPlayersMet$223899[ebp], edx

; 548  : 						iTotalLandMe++;

	mov	eax, DWORD PTR _iTotalLandMe$223898[ebp]
	add	eax, 1
	mov	DWORD PTR _iTotalLandMe$223898[ebp], eax
	jmp	SHORT $LN13@GetConques
$LN12@GetConques:

; 549  : 					}
; 550  : 					else if(!GET_PLAYER(ePlayer).isMinorCiv() && pTeam.isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	ecx, DWORD PTR _ePlayer$223896[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226786[ebp], ecx
	mov	ecx, DWORD PTR $T226786[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@GetConques
	mov	eax, DWORD PTR _ePlayer$223896[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226790[ebp], eax
	mov	ecx, DWORD PTR $T226790[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226799[ebp], eax
	mov	eax, DWORD PTR $T226799[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@GetConques

; 551  : 					{
; 552  : 						iTotalLandPlayersMet++;

	mov	edx, DWORD PTR _iTotalLandPlayersMet$223899[ebp]
	add	edx, 1
	mov	DWORD PTR _iTotalLandPlayersMet$223899[ebp], edx
$LN13@GetConques:

; 553  : 					}
; 554  : 				}
; 555  : 			}

	jmp	$LN15@GetConques
$LN14@GetConques:

; 556  : 
; 557  : 			iTotalLandPlayersMet /= iNumPlayersMet;

	mov	eax, DWORD PTR _iTotalLandPlayersMet$223899[ebp]
	cdq
	idiv	DWORD PTR _iNumPlayersMet$223897[ebp]
	mov	DWORD PTR _iTotalLandPlayersMet$223899[ebp], eax

; 558  : 
; 559  : 			if(iTotalLandMe > 0)

	cmp	DWORD PTR _iTotalLandMe$223898[ebp], 0
	jle	SHORT $LN23@GetConques

; 560  : 			{
; 561  : 				if(iTotalLandPlayersMet / iTotalLandMe > 0)

	mov	eax, DWORD PTR _iTotalLandPlayersMet$223899[ebp]
	cdq
	idiv	DWORD PTR _iTotalLandMe$223898[ebp]
	test	eax, eax
	jle	SHORT $LN23@GetConques

; 562  : 				{
; 563  : 					iPriority += /*20*/ GC.getAI_GRAND_STRATEGY_CONQUEST_CRAMPED_WEIGHT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1940
	mov	DWORD PTR $T226803[ebp], eax
	mov	ecx, DWORD PTR _iPriority$[ebp]
	add	ecx, DWORD PTR $T226803[ebp]
	mov	DWORD PTR _iPriority$[ebp], ecx
$LN23@GetConques:

; 564  : 				}
; 565  : 			}
; 566  : 		}
; 567  : 	}
; 568  : 
; 569  : 	// if we do not have nukes and we know someone else who does...
; 570  : 	if(GetPlayer()->getNumNukeUnits() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?getNumNukeUnits@CvPlayer@@QBEHXZ	; CvPlayer::getNumNukeUnits
	test	eax, eax
	jne	$LN7@GetConques

; 571  : 	{
; 572  : 		for(int iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$223919[ebp], 0
	jmp	SHORT $LN6@GetConques
$LN5@GetConques:
	mov	edx, DWORD PTR _iMajorLoop$223919[ebp]
	add	edx, 1
	mov	DWORD PTR _iMajorLoop$223919[ebp], edx
$LN6@GetConques:
	cmp	DWORD PTR _iMajorLoop$223919[ebp], 22	; 00000016H
	jge	$LN7@GetConques

; 573  : 		{
; 574  : 			PlayerTypes ePlayer = (PlayerTypes) iMajorLoop;

	mov	eax, DWORD PTR _iMajorLoop$223919[ebp]
	mov	DWORD PTR _ePlayer$223923[ebp], eax

; 575  : 
; 576  : 			if(GET_PLAYER(ePlayer).isAlive() && iMajorLoop != GetPlayer()->GetID())

	mov	ecx, DWORD PTR _ePlayer$223923[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226807[ebp], ecx
	mov	edx, DWORD PTR $T226807[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T226816[ebp], al
	movzx	ecx, BYTE PTR $T226816[ebp]
	test	ecx, ecx
	je	$LN3@GetConques
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226825[ebp], eax
	mov	edx, DWORD PTR $T226825[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T226826[ebp], eax
	mov	ecx, DWORD PTR _iMajorLoop$223919[ebp]
	cmp	ecx, DWORD PTR $T226826[ebp]
	je	SHORT $LN3@GetConques

; 577  : 			{
; 578  : 				if(pTeam.isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	edx, DWORD PTR _ePlayer$223923[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226830[ebp], edx
	mov	eax, DWORD PTR $T226830[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226839[ebp], eax
	mov	edx, DWORD PTR $T226839[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetConques

; 579  : 				{
; 580  : 					if (GET_PLAYER(ePlayer).getNumNukeUnits() > 0)

	mov	ecx, DWORD PTR _ePlayer$223923[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226843[ebp], ecx
	mov	ecx, DWORD PTR $T226843[ebp]
	call	?getNumNukeUnits@CvPlayer@@QBEHXZ	; CvPlayer::getNumNukeUnits
	test	eax, eax
	jle	SHORT $LN3@GetConques

; 581  : 					{
; 582  : 						iPriority -= 50; 

	mov	edx, DWORD PTR _iPriority$[ebp]
	sub	edx, 50					; 00000032H
	mov	DWORD PTR _iPriority$[ebp], edx

; 583  : 						break;

	jmp	SHORT $LN7@GetConques
$LN3@GetConques:

; 584  : 					}
; 585  : 				}
; 586  : 			}
; 587  : 		}

	jmp	$LN5@GetConques
$LN7@GetConques:

; 588  : 	}
; 589  : 
; 590  : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]
$LN38@GetConques:

; 591  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetConquestPriority@CvGrandStrategyAI@@QAEHXZ ENDP	; CvGrandStrategyAI::GetConquestPriority
_TEXT	ENDS
PUBLIC	??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@		; `string'
PUBLIC	??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@	; `string'
EXTRN	?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ:PROC ; CvPlayerCulture::GetNumCivsInfluentialOn
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
EXTRN	?GetTourism@CvPlayerCulture@@QAEHXZ:PROC	; CvPlayerCulture::GetTourism
EXTRN	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ:PROC ; CvPlayer::GetCulture
EXTRN	?GetTotalJONSCulturePerTurn@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetTotalJONSCulturePerTurn
EXTRN	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z:PROC ; CvFlavorManager::GetPersonalityIndividualFlavor
EXTRN	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ:PROC ; CvPlayer::GetFlavorManager
;	COMDAT ??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@ DB 'FLAVOR_CULTURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@
CONST	SEGMENT
??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@ DB 'VICTORY_CULTURAL', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	ENDS
;	COMDAT ?GetCulturePriority@CvGrandStrategyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T226882 = -80						; size = 4
$T226878 = -76						; size = 4
$T226874 = -72						; size = 4
$T226870 = -68						; size = 4
$T226861 = -61						; size = 1
$T226849 = -60						; size = 4
_kPlayer$223953 = -56					; size = 4
_iPlayerLoop$223948 = -52				; size = 4
_iPriority$ = -48					; size = 4
_iFlavorCulture$ = -44					; size = 4
_iNumCivsAlive$ = -40					; size = 4
_iNumInfluential$ = -36					; size = 4
_iOurTourism$ = -32					; size = 4
_eVictory$ = -28					; size = 4
_iNumCivsAheadCulture$ = -24				; size = 4
_eLoopPlayer$ = -20					; size = 4
_iOurCulture$ = -16					; size = 4
_iNumCivsBehindCulture$ = -12				; size = 4
_iNumCivsAheadTourism$ = -8				; size = 4
_iNumCivsBehindTourism$ = -4				; size = 4
?GetCulturePriority@CvGrandStrategyAI@@QAEHXZ PROC	; CvGrandStrategyAI::GetCulturePriority, COMDAT
; _this$ = ecx

; 599  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 600  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 601  : 
; 602  : 	// If Culture Victory isn't even available then don't bother with anything
; 603  : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_CULTURAL", true);

	push	1
	push	OFFSET ??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 604  : 	if(eVictory == NO_VICTORY || !GC.getGame().isVictoryValid(eVictory))

	cmp	DWORD PTR _eVictory$[ebp], -1
	je	SHORT $LN11@GetCulture
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226849[ebp], eax
	mov	ecx, DWORD PTR _eVictory$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T226849[ebp]
	call	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z ; CvGame::isVictoryValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN12@GetCulture
$LN11@GetCulture:

; 605  : 	{
; 606  : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN13@GetCulture
$LN12@GetCulture:

; 607  : 	}
; 608  : 
; 609  : 	// Before tourism kicks in, add weight based on flavor
; 610  : 	int iFlavorCulture =  m_pPlayer->GetFlavorManager()->GetPersonalityIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_CULTURE"));

	push	0
	push	OFFSET ??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
	mov	DWORD PTR _iFlavorCulture$[ebp], eax

; 611  : 	iPriority += (10 - m_pPlayer->GetCurrentEra()) * iFlavorCulture * 200 / 100;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	mov	edx, 10					; 0000000aH
	sub	edx, eax
	imul	edx, DWORD PTR _iFlavorCulture$[ebp]
	imul	edx, 200				; 000000c8H
	mov	eax, edx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 612  : 
; 613  : 	// Loop through Players to see how we are doing on Tourism and Culture
; 614  : 	PlayerTypes eLoopPlayer;
; 615  : 	int iOurCulture = m_pPlayer->GetTotalJONSCulturePerTurn();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetTotalJONSCulturePerTurn@CvPlayer@@QBEHXZ ; CvPlayer::GetTotalJONSCulturePerTurn
	mov	DWORD PTR _iOurCulture$[ebp], eax

; 616  : 	int iOurTourism = m_pPlayer->GetCulture()->GetTourism();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	mov	DWORD PTR _iOurTourism$[ebp], eax

; 617  : 	int iNumCivsBehindCulture = 0;

	mov	DWORD PTR _iNumCivsBehindCulture$[ebp], 0

; 618  : 	int iNumCivsAheadCulture = 0;

	mov	DWORD PTR _iNumCivsAheadCulture$[ebp], 0

; 619  : 	int iNumCivsBehindTourism = 0;

	mov	DWORD PTR _iNumCivsBehindTourism$[ebp], 0

; 620  : 	int iNumCivsAheadTourism = 0;

	mov	DWORD PTR _iNumCivsAheadTourism$[ebp], 0

; 621  : 	int iNumCivsAlive = 0;

	mov	DWORD PTR _iNumCivsAlive$[ebp], 0

; 622  : 
; 623  : 	for(int iPlayerLoop = 0; iPlayerLoop < MAX_CIV_PLAYERS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$223948[ebp], 0
	jmp	SHORT $LN10@GetCulture
$LN9@GetCulture:
	mov	ecx, DWORD PTR _iPlayerLoop$223948[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPlayerLoop$223948[ebp], ecx
$LN10@GetCulture:
	cmp	DWORD PTR _iPlayerLoop$223948[ebp], 63	; 0000003fH
	jge	$LN8@GetCulture

; 624  : 	{
; 625  : 		eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	edx, DWORD PTR _iPlayerLoop$223948[ebp]
	mov	DWORD PTR _eLoopPlayer$[ebp], edx

; 626  : 		CvPlayer &kPlayer = GET_PLAYER(eLoopPlayer);

	mov	eax, DWORD PTR _eLoopPlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$223953[ebp], eax

; 627  : 
; 628  : 		if (kPlayer.isAlive() && !kPlayer.isMinorCiv() && !kPlayer.isBarbarian() && iPlayerLoop != m_pPlayer->GetID())

	mov	ecx, DWORD PTR _kPlayer$223953[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T226861[ebp], dl
	movzx	eax, BYTE PTR $T226861[ebp]
	test	eax, eax
	je	$LN7@GetCulture
	mov	ecx, DWORD PTR _kPlayer$223953[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@GetCulture
	mov	ecx, DWORD PTR _kPlayer$223953[ebp]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@GetCulture
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T226870[ebp], edx
	mov	eax, DWORD PTR _iPlayerLoop$223948[ebp]
	cmp	eax, DWORD PTR $T226870[ebp]
	je	SHORT $LN7@GetCulture

; 629  : 		{
; 630  : 			if (iOurCulture > kPlayer.GetTotalJONSCulturePerTurn())

	mov	ecx, DWORD PTR _kPlayer$223953[ebp]
	call	?GetTotalJONSCulturePerTurn@CvPlayer@@QBEHXZ ; CvPlayer::GetTotalJONSCulturePerTurn
	cmp	DWORD PTR _iOurCulture$[ebp], eax
	jle	SHORT $LN6@GetCulture

; 631  : 			{
; 632  : 				iNumCivsAheadCulture++;

	mov	ecx, DWORD PTR _iNumCivsAheadCulture$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNumCivsAheadCulture$[ebp], ecx

; 633  : 			}
; 634  : 			else

	jmp	SHORT $LN5@GetCulture
$LN6@GetCulture:

; 635  : 			{
; 636  : 				iNumCivsBehindCulture++;

	mov	edx, DWORD PTR _iNumCivsBehindCulture$[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumCivsBehindCulture$[ebp], edx
$LN5@GetCulture:

; 637  : 			}
; 638  : 			if (iOurTourism > kPlayer.GetCulture()->GetTourism())

	mov	ecx, DWORD PTR _kPlayer$223953[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	cmp	DWORD PTR _iOurTourism$[ebp], eax
	jle	SHORT $LN4@GetCulture

; 639  : 			{
; 640  : 				iNumCivsAheadTourism++;

	mov	eax, DWORD PTR _iNumCivsAheadTourism$[ebp]
	add	eax, 1
	mov	DWORD PTR _iNumCivsAheadTourism$[ebp], eax

; 641  : 			}
; 642  : 			else

	jmp	SHORT $LN3@GetCulture
$LN4@GetCulture:

; 643  : 			{
; 644  : 				iNumCivsBehindTourism++;

	mov	ecx, DWORD PTR _iNumCivsBehindTourism$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNumCivsBehindTourism$[ebp], ecx
$LN3@GetCulture:

; 645  : 			}
; 646  : 			iNumCivsAlive++;

	mov	edx, DWORD PTR _iNumCivsAlive$[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumCivsAlive$[ebp], edx
$LN7@GetCulture:

; 647  : 		}
; 648  : 	}

	jmp	$LN9@GetCulture
$LN8@GetCulture:

; 649  : 
; 650  : 	if (iNumCivsAlive > 0 && iNumCivsAheadCulture > iNumCivsBehindCulture)

	cmp	DWORD PTR _iNumCivsAlive$[ebp], 0
	jle	SHORT $LN2@GetCulture
	mov	eax, DWORD PTR _iNumCivsAheadCulture$[ebp]
	cmp	eax, DWORD PTR _iNumCivsBehindCulture$[ebp]
	jle	SHORT $LN2@GetCulture

; 651  : 	{
; 652  : 		iPriority += (GC.getAI_GS_CULTURE_AHEAD_WEIGHT() * (iNumCivsAheadCulture - iNumCivsBehindCulture) / iNumCivsAlive);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1968
	mov	DWORD PTR $T226874[ebp], ecx
	mov	edx, DWORD PTR _iNumCivsAheadCulture$[ebp]
	sub	edx, DWORD PTR _iNumCivsBehindCulture$[ebp]
	mov	eax, edx
	imul	eax, DWORD PTR $T226874[ebp]
	cdq
	idiv	DWORD PTR _iNumCivsAlive$[ebp]
	add	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax
$LN2@GetCulture:

; 653  : 	}
; 654  : 	if (iNumCivsAlive > 0 && iNumCivsAheadTourism > iNumCivsBehindTourism)

	cmp	DWORD PTR _iNumCivsAlive$[ebp], 0
	jle	SHORT $LN1@GetCulture
	mov	eax, DWORD PTR _iNumCivsAheadTourism$[ebp]
	cmp	eax, DWORD PTR _iNumCivsBehindTourism$[ebp]
	jle	SHORT $LN1@GetCulture

; 655  : 	{
; 656  : 		iPriority += (GC.getAI_GS_CULTURE_TOURISM_AHEAD_WEIGHT() * (iNumCivsAheadTourism - iNumCivsBehindTourism) / iNumCivsAlive);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1972
	mov	DWORD PTR $T226878[ebp], ecx
	mov	edx, DWORD PTR _iNumCivsAheadTourism$[ebp]
	sub	edx, DWORD PTR _iNumCivsBehindTourism$[ebp]
	mov	eax, edx
	imul	eax, DWORD PTR $T226878[ebp]
	cdq
	idiv	DWORD PTR _iNumCivsAlive$[ebp]
	add	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax
$LN1@GetCulture:

; 657  : 	}
; 658  : 
; 659  : 	// for every civ we are Influential over increase this
; 660  : 	int iNumInfluential = m_pPlayer->GetCulture()->GetNumCivsInfluentialOn();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetNumCivsInfluentialOn@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetNumCivsInfluentialOn
	mov	DWORD PTR _iNumInfluential$[ebp], eax

; 661  : 	iPriority += iNumInfluential * GC.getAI_GS_CULTURE_INFLUENTIAL_CIV_MOD();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1976
	mov	DWORD PTR $T226882[ebp], ecx
	mov	edx, DWORD PTR _iNumInfluential$[ebp]
	imul	edx, DWORD PTR $T226882[ebp]
	add	edx, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], edx

; 662  : 
; 663  : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]
$LN13@GetCulture:

; 664  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCulturePriority@CvGrandStrategyAI@@QAEHXZ ENDP	; CvGrandStrategyAI::GetCulturePriority
_TEXT	ENDS
PUBLIC	??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@	; `string'
PUBLIC	??_C@_0BD@KCIFPIPP@VICTORY_DIPLOMATIC?$AA@	; `string'
EXTRN	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ:PROC ; CvPlayer::GetPlayerTraits
EXTRN	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ:PROC ; CvMinorCivAI::GetAlly
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?CalculateStartingVotesForMember@CvLeague@@QAEHW4PlayerTypes@@_N@Z:PROC ; CvLeague::CalculateStartingVotesForMember
EXTRN	?GetActiveLeague@CvGameLeagues@@QAEPAVCvLeague@@XZ:PROC ; CvGameLeagues::GetActiveLeague
EXTRN	?GetNumActiveLeagues@CvGameLeagues@@QAEHXZ:PROC	; CvGameLeagues::GetNumActiveLeagues
EXTRN	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ:PROC ; CvGame::GetGameLeagues
EXTRN	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ:PROC ; CvGame::GetVotesNeededForDiploVictory
EXTRN	?GetNumMinorCivsAttacked@CvTeam@@QBEHXZ:PROC	; CvTeam::GetNumMinorCivsAttacked
;	COMDAT ??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvtraitclasses.h
CONST	SEGMENT
??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@ DB 'FLAVOR_DIPLOMACY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCIFPIPP@VICTORY_DIPLOMATIC?$AA@
CONST	SEGMENT
??_C@_0BD@KCIFPIPP@VICTORY_DIPLOMATIC?$AA@ DB 'VICTORY_DIPLOMATIC', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	ENDS
;	COMDAT ?GetUnitedNationsPriority@CvGrandStrategyAI@@QAEHXZ
_TEXT	SEGMENT
tv219 = -188						; size = 4
tv211 = -184						; size = 4
tv254 = -180						; size = 4
_this$ = -176						; size = 4
$T226995 = -172						; size = 4
$T226994 = -168						; size = 4
$T226990 = -164						; size = 4
$T226989 = -160						; size = 4
$T226985 = -156						; size = 4
$T226984 = -152						; size = 4
$T226978 = -148						; size = 4
$T226969 = -144						; size = 4
$T226960 = -140						; size = 4
$T226953 = -136						; size = 4
$T226949 = -132						; size = 4
$T226945 = -125						; size = 1
$T226936 = -124						; size = 4
$T226932 = -120						; size = 4
$T226928 = -116						; size = 4
$T226924 = -112						; size = 4
$T226920 = -108						; size = 4
$T226916 = -104						; size = 4
$T226912 = -100						; size = 4
$T226911 = -96						; size = 4
$T226902 = -92						; size = 4
$T226890 = -88						; size = 4
$T226889 = -84						; size = 4
$T226888 = -80						; size = 4
$T226887 = -76						; size = 4
$T226886 = -72						; size = 4
$T226885 = -68						; size = 4
_iPotentialCityStateVotes$224004 = -64			; size = 4
_iPotentialVotesDelta$224005 = -60			; size = 4
_iOtherPlayerVotes$223995 = -56				; size = 4
_eLoopPlayer$223989 = -52				; size = 4
_iPlayerLoop$223985 = -48				; size = 4
_iHighestOtherPlayerVotes$223984 = -44			; size = 4
_pLeague$223982 = -40					; size = 4
_iFlavorDiplo$223978 = -36				; size = 4
_iVotesNeededToWin$ = -32				; size = 4
_iVotesControlledDelta$ = -28				; size = 4
_ePlayer$ = -24						; size = 4
_iPriority$ = -20					; size = 4
_iUnalliedCityStates$ = -16				; size = 4
_eVictory$ = -12					; size = 4
_iNumMinorsAttacked$ = -8				; size = 4
_iVotesControlled$ = -4					; size = 4
?GetUnitedNationsPriority@CvGrandStrategyAI@@QAEHXZ PROC ; CvGrandStrategyAI::GetUnitedNationsPriority, COMDAT
; _this$ = ecx

; 672  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	DWORD PTR _this$[ebp], ecx

; 673  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 674  : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 675  : 
; 676  : 	// If UN Victory isn't even available then don't bother with anything
; 677  : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_DIPLOMATIC", true);

	push	1
	push	OFFSET ??_C@_0BD@KCIFPIPP@VICTORY_DIPLOMATIC?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 678  : 	if(eVictory == NO_VICTORY || !GC.getGame().isVictoryValid(eVictory))

	cmp	DWORD PTR _eVictory$[ebp], -1
	je	SHORT $LN20@GetUnitedN
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226902[ebp], eax
	mov	ecx, DWORD PTR _eVictory$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T226902[ebp]
	call	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z ; CvGame::isVictoryValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN21@GetUnitedN
$LN20@GetUnitedN:

; 679  : 	{
; 680  : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN22@GetUnitedN
$LN21@GetUnitedN:

; 681  : 	}
; 682  : 
; 683  : 	int iNumMinorsAttacked = GET_TEAM(GetPlayer()->getTeam()).GetNumMinorCivsAttacked();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T226911[ebp], eax
	mov	eax, DWORD PTR $T226911[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T226912[ebp], eax
	mov	edx, DWORD PTR $T226912[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T226916[ebp], edx
	mov	ecx, DWORD PTR $T226916[ebp]
	call	?GetNumMinorCivsAttacked@CvTeam@@QBEHXZ	; CvTeam::GetNumMinorCivsAttacked
	mov	DWORD PTR _iNumMinorsAttacked$[ebp], eax

; 684  : 	iPriority += (iNumMinorsAttacked* /*-30*/ GC.getAI_GRAND_STRATEGY_UN_EACH_MINOR_ATTACKED_WEIGHT());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1980
	mov	DWORD PTR $T226920[ebp], eax
	mov	ecx, DWORD PTR _iNumMinorsAttacked$[ebp]
	imul	ecx, DWORD PTR $T226920[ebp]
	add	ecx, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], ecx

; 685  : 
; 686  : 	int iVotesNeededToWin = GC.getGame().GetVotesNeededForDiploVictory();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226924[ebp], edx
	mov	ecx, DWORD PTR $T226924[ebp]
	call	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ ; CvGame::GetVotesNeededForDiploVictory
	mov	DWORD PTR _iVotesNeededToWin$[ebp], eax

; 687  : 
; 688  : 	int iVotesControlled = 0;

	mov	DWORD PTR _iVotesControlled$[ebp], 0

; 689  : 	int iVotesControlledDelta = 0;

	mov	DWORD PTR _iVotesControlledDelta$[ebp], 0

; 690  : 	int iUnalliedCityStates = 0;

	mov	DWORD PTR _iUnalliedCityStates$[ebp], 0

; 691  : #ifdef AUI_LEAGUES_FIX_POSSIBLE_DEALLOCATION_CRASH
; 692  : 	CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetActiveLeague();
; 693  : 	if (pLeague == NULL)
; 694  : #else
; 695  : 	if (GC.getGame().GetGameLeagues()->GetNumActiveLeagues() == 0)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226928[ebp], eax
	mov	ecx, DWORD PTR $T226928[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetNumActiveLeagues@CvGameLeagues@@QAEHXZ ; CvGameLeagues::GetNumActiveLeagues
	test	eax, eax
	jne	SHORT $LN19@GetUnitedN

; 696  : #endif
; 697  : 	{
; 698  : 		// Before leagues kick in, add weight based on flavor
; 699  : 		int iFlavorDiplo =  m_pPlayer->GetFlavorManager()->GetPersonalityIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_DIPLOMACY"));

	push	0
	push	OFFSET ??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
	mov	DWORD PTR _iFlavorDiplo$223978[ebp], eax

; 700  : 		iPriority += (10 - m_pPlayer->GetCurrentEra()) * iFlavorDiplo * 150 / 100;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	mov	ecx, 10					; 0000000aH
	sub	ecx, eax
	imul	ecx, DWORD PTR _iFlavorDiplo$223978[ebp]
	imul	ecx, 150				; 00000096H
	mov	eax, ecx
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 701  : 	}
; 702  : 	else

	jmp	$LN18@GetUnitedN
$LN19@GetUnitedN:

; 703  : 	{
; 704  : #ifndef AUI_LEAGUES_FIX_POSSIBLE_DEALLOCATION_CRASH
; 705  : 		CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetActiveLeague();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T226932[ebp], edx
	mov	ecx, DWORD PTR $T226932[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetActiveLeague@CvGameLeagues@@QAEPAVCvLeague@@XZ ; CvGameLeagues::GetActiveLeague
	mov	DWORD PTR _pLeague$223982[ebp], eax

; 706  : 		CvAssert(pLeague != NULL);
; 707  : 		if (pLeague != NULL)

	cmp	DWORD PTR _pLeague$223982[ebp], 0
	je	$LN18@GetUnitedN

; 708  : #endif
; 709  : 		{
; 710  : 			// Votes we control
; 711  : 			iVotesControlled += pLeague->CalculateStartingVotesForMember(ePlayer);

	push	0
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLeague$223982[ebp]
	call	?CalculateStartingVotesForMember@CvLeague@@QAEHW4PlayerTypes@@_N@Z ; CvLeague::CalculateStartingVotesForMember
	add	eax, DWORD PTR _iVotesControlled$[ebp]
	mov	DWORD PTR _iVotesControlled$[ebp], eax

; 712  : 
; 713  : 			// Votes other players control
; 714  : 			int iHighestOtherPlayerVotes = 0;

	mov	DWORD PTR _iHighestOtherPlayerVotes$223984[ebp], 0

; 715  : 			for (int iPlayerLoop = 0; iPlayerLoop < MAX_CIV_PLAYERS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$223985[ebp], 0
	jmp	SHORT $LN16@GetUnitedN
$LN15@GetUnitedN:
	mov	ecx, DWORD PTR _iPlayerLoop$223985[ebp]
	add	ecx, 1
	mov	DWORD PTR _iPlayerLoop$223985[ebp], ecx
$LN16@GetUnitedN:
	cmp	DWORD PTR _iPlayerLoop$223985[ebp], 63	; 0000003fH
	jge	$LN14@GetUnitedN

; 716  : 			{
; 717  : 				PlayerTypes eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	edx, DWORD PTR _iPlayerLoop$223985[ebp]
	mov	DWORD PTR _eLoopPlayer$223989[ebp], edx

; 718  : 
; 719  : 				if(eLoopPlayer != ePlayer && GET_PLAYER(eLoopPlayer).isAlive())

	mov	eax, DWORD PTR _eLoopPlayer$223989[ebp]
	cmp	eax, DWORD PTR _ePlayer$[ebp]
	je	$LN13@GetUnitedN
	mov	ecx, DWORD PTR _eLoopPlayer$223989[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226936[ebp], ecx
	mov	edx, DWORD PTR $T226936[ebp]
	mov	al, BYTE PTR [edx+2256]
	mov	BYTE PTR $T226945[ebp], al
	movzx	ecx, BYTE PTR $T226945[ebp]
	test	ecx, ecx
	je	SHORT $LN13@GetUnitedN

; 720  : 				{
; 721  : 					if (GET_PLAYER(eLoopPlayer).isMinorCiv())

	mov	edx, DWORD PTR _eLoopPlayer$223989[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226949[ebp], edx
	mov	ecx, DWORD PTR $T226949[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@GetUnitedN

; 722  : 					{
; 723  : 						if (GET_PLAYER(eLoopPlayer).GetMinorCivAI()->GetAlly() == NO_PLAYER)

	mov	ecx, DWORD PTR _eLoopPlayer$223989[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T226953[ebp], ecx
	mov	ecx, DWORD PTR $T226953[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	cmp	eax, -1
	jne	SHORT $LN11@GetUnitedN

; 724  : 						{
; 725  : 							iUnalliedCityStates++;

	mov	edx, DWORD PTR _iUnalliedCityStates$[ebp]
	add	edx, 1
	mov	DWORD PTR _iUnalliedCityStates$[ebp], edx
$LN11@GetUnitedN:

; 726  : 						}
; 727  : 					}
; 728  : 					else

	jmp	SHORT $LN13@GetUnitedN
$LN12@GetUnitedN:

; 729  : 					{
; 730  : 						int iOtherPlayerVotes = pLeague->CalculateStartingVotesForMember(eLoopPlayer);

	push	0
	mov	eax, DWORD PTR _eLoopPlayer$223989[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLeague$223982[ebp]
	call	?CalculateStartingVotesForMember@CvLeague@@QAEHW4PlayerTypes@@_N@Z ; CvLeague::CalculateStartingVotesForMember
	mov	DWORD PTR _iOtherPlayerVotes$223995[ebp], eax

; 731  : 						if (iOtherPlayerVotes > iHighestOtherPlayerVotes)

	mov	ecx, DWORD PTR _iOtherPlayerVotes$223995[ebp]
	cmp	ecx, DWORD PTR _iHighestOtherPlayerVotes$223984[ebp]
	jle	SHORT $LN13@GetUnitedN

; 732  : 						{
; 733  : 							iHighestOtherPlayerVotes = iOtherPlayerVotes;

	mov	edx, DWORD PTR _iOtherPlayerVotes$223995[ebp]
	mov	DWORD PTR _iHighestOtherPlayerVotes$223984[ebp], edx
$LN13@GetUnitedN:

; 734  : 						}
; 735  : 					}
; 736  : 				}
; 737  : 			}

	jmp	$LN15@GetUnitedN
$LN14@GetUnitedN:

; 738  : 
; 739  : 			// How we compare
; 740  : 			iVotesControlledDelta = iVotesControlled - iHighestOtherPlayerVotes;

	mov	eax, DWORD PTR _iVotesControlled$[ebp]
	sub	eax, DWORD PTR _iHighestOtherPlayerVotes$223984[ebp]
	mov	DWORD PTR _iVotesControlledDelta$[ebp], eax
$LN18@GetUnitedN:

; 741  : 		}
; 742  : 	}
; 743  : 
; 744  : 	// Are we close to winning?
; 745  : 	if (iVotesControlled >= iVotesNeededToWin)

	mov	ecx, DWORD PTR _iVotesControlled$[ebp]
	cmp	ecx, DWORD PTR _iVotesNeededToWin$[ebp]
	jl	SHORT $LN8@GetUnitedN

; 746  : 	{
; 747  : 		return 1000;

	mov	eax, 1000				; 000003e8H
	jmp	$LN22@GetUnitedN
	jmp	SHORT $LN7@GetUnitedN
$LN8@GetUnitedN:

; 748  : 	}
; 749  : 	else if (iVotesControlled >= ((iVotesNeededToWin * 3) / 4))

	mov	eax, DWORD PTR _iVotesNeededToWin$[ebp]
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _iVotesControlled$[ebp], eax
	jl	SHORT $LN7@GetUnitedN

; 750  : 	{
; 751  : 		iPriority += 40;

	mov	edx, DWORD PTR _iPriority$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR _iPriority$[ebp], edx
$LN7@GetUnitedN:

; 752  : 	}
; 753  : 
; 754  : 	// We have the most votes
; 755  : 	if (iVotesControlledDelta > 0)

	cmp	DWORD PTR _iVotesControlledDelta$[ebp], 0
	jle	SHORT $LN5@GetUnitedN

; 756  : 	{
; 757  : 		iPriority += MAX(40, iVotesControlledDelta * 5);

	mov	eax, DWORD PTR _iVotesControlledDelta$[ebp]
	imul	eax, 5
	mov	DWORD PTR $T226885[ebp], eax
	mov	DWORD PTR $T226886[ebp], 40		; 00000028H
	mov	ecx, DWORD PTR $T226886[ebp]
	cmp	ecx, DWORD PTR $T226885[ebp]
	jge	SHORT $LN56@GetUnitedN
	lea	edx, DWORD PTR $T226885[ebp]
	mov	DWORD PTR tv254[ebp], edx
	jmp	SHORT $LN57@GetUnitedN
$LN56@GetUnitedN:
	lea	eax, DWORD PTR $T226886[ebp]
	mov	DWORD PTR tv254[ebp], eax
$LN57@GetUnitedN:
	mov	ecx, DWORD PTR tv254[ebp]
	mov	DWORD PTR $T226960[ebp], ecx
	mov	edx, DWORD PTR $T226960[ebp]
	mov	eax, DWORD PTR _iPriority$[ebp]
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR _iPriority$[ebp], eax

; 758  : 	}
; 759  : 	// We are equal or behind in votes
; 760  : 	else

	jmp	$LN4@GetUnitedN
$LN5@GetUnitedN:

; 761  : 	{
; 762  : 		// Could we make up the difference with currently unallied city-states?
; 763  : 		int iPotentialCityStateVotes = iUnalliedCityStates * 2;

	mov	ecx, DWORD PTR _iUnalliedCityStates$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _iPotentialCityStateVotes$224004[ebp], ecx

; 764  : 		int iPotentialVotesDelta = iPotentialCityStateVotes + iVotesControlledDelta;

	mov	edx, DWORD PTR _iPotentialCityStateVotes$224004[ebp]
	add	edx, DWORD PTR _iVotesControlledDelta$[ebp]
	mov	DWORD PTR _iPotentialVotesDelta$224005[ebp], edx

; 765  : 		if (iPotentialVotesDelta > 0)

	cmp	DWORD PTR _iPotentialVotesDelta$224005[ebp], 0
	jle	SHORT $LN3@GetUnitedN

; 766  : 		{
; 767  : 			iPriority += MAX(20, iPotentialVotesDelta * 5);

	mov	eax, DWORD PTR _iPotentialVotesDelta$224005[ebp]
	imul	eax, 5
	mov	DWORD PTR $T226887[ebp], eax
	mov	DWORD PTR $T226888[ebp], 20		; 00000014H
	mov	ecx, DWORD PTR $T226888[ebp]
	cmp	ecx, DWORD PTR $T226887[ebp]
	jge	SHORT $LN60@GetUnitedN
	lea	edx, DWORD PTR $T226887[ebp]
	mov	DWORD PTR tv211[ebp], edx
	jmp	SHORT $LN61@GetUnitedN
$LN60@GetUnitedN:
	lea	eax, DWORD PTR $T226888[ebp]
	mov	DWORD PTR tv211[ebp], eax
$LN61@GetUnitedN:
	mov	ecx, DWORD PTR tv211[ebp]
	mov	DWORD PTR $T226969[ebp], ecx
	mov	edx, DWORD PTR $T226969[ebp]
	mov	eax, DWORD PTR _iPriority$[ebp]
	add	eax, DWORD PTR [edx]
	mov	DWORD PTR _iPriority$[ebp], eax
	jmp	SHORT $LN4@GetUnitedN
$LN3@GetUnitedN:

; 768  : 		}
; 769  : 		else if (iPotentialVotesDelta < 0)

	cmp	DWORD PTR _iPotentialVotesDelta$224005[ebp], 0
	jge	SHORT $LN4@GetUnitedN

; 770  : 		{
; 771  : 			iPriority += MIN(-40, iPotentialVotesDelta * -5);

	mov	ecx, DWORD PTR _iPotentialVotesDelta$224005[ebp]
	imul	ecx, -5					; fffffffbH
	mov	DWORD PTR $T226889[ebp], ecx
	mov	DWORD PTR $T226890[ebp], -40		; ffffffd8H
	mov	edx, DWORD PTR $T226889[ebp]
	cmp	edx, DWORD PTR $T226890[ebp]
	jge	SHORT $LN64@GetUnitedN
	lea	eax, DWORD PTR $T226889[ebp]
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN65@GetUnitedN
$LN64@GetUnitedN:
	lea	ecx, DWORD PTR $T226890[ebp]
	mov	DWORD PTR tv219[ebp], ecx
$LN65@GetUnitedN:
	mov	edx, DWORD PTR tv219[ebp]
	mov	DWORD PTR $T226978[ebp], edx
	mov	eax, DWORD PTR $T226978[ebp]
	mov	ecx, DWORD PTR _iPriority$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iPriority$[ebp], ecx
$LN4@GetUnitedN:

; 772  : 		}
; 773  : 	}
; 774  : 
; 775  : 	// factor in some traits that could be useful (or harmful)
; 776  : 	iPriority += m_pPlayer->GetPlayerTraits()->GetCityStateFriendshipModifier();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T226984[ebp], eax
	mov	eax, DWORD PTR $T226984[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T226985[ebp], ecx
	mov	edx, DWORD PTR _iPriority$[ebp]
	add	edx, DWORD PTR $T226985[ebp]
	mov	DWORD PTR _iPriority$[ebp], edx

; 777  : 	iPriority += m_pPlayer->GetPlayerTraits()->GetCityStateBonusModifier();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T226989[ebp], eax
	mov	ecx, DWORD PTR $T226989[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T226990[ebp], edx
	mov	eax, DWORD PTR _iPriority$[ebp]
	add	eax, DWORD PTR $T226990[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 778  : 	iPriority -= m_pPlayer->GetPlayerTraits()->GetCityStateCombatModifier();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	mov	DWORD PTR $T226994[ebp], eax
	mov	edx, DWORD PTR $T226994[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR $T226995[ebp], eax
	mov	ecx, DWORD PTR _iPriority$[ebp]
	sub	ecx, DWORD PTR $T226995[ebp]
	mov	DWORD PTR _iPriority$[ebp], ecx

; 779  : 
; 780  : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]
$LN22@GetUnitedN:

; 781  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitedNationsPriority@CvGrandStrategyAI@@QAEHXZ ENDP ; CvGrandStrategyAI::GetUnitedNationsPriority
_TEXT	ENDS
PUBLIC	??_C@_0BH@HJPDENF@PROJECT_APOLLO_PROGRAM?$AA@	; `string'
PUBLIC	??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@		; `string'
PUBLIC	??_C@_0BD@GNEMFDHK@VICTORY_SPACE_RACE?$AA@	; `string'
EXTRN	?getProjectCount@CvTeam@@QBEHW4ProjectTypes@@@Z:PROC ; CvTeam::getProjectCount
;	COMDAT ??_C@_0BH@HJPDENF@PROJECT_APOLLO_PROGRAM?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BH@HJPDENF@PROJECT_APOLLO_PROGRAM?$AA@ DB 'PROJECT_APOLLO_PROGRAM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@ DB 'FLAVOR_SCIENCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GNEMFDHK@VICTORY_SPACE_RACE?$AA@
CONST	SEGMENT
??_C@_0BD@GNEMFDHK@VICTORY_SPACE_RACE?$AA@ DB 'VICTORY_SPACE_RACE', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
CONST	ENDS
;	COMDAT ?GetSpaceshipPriority@CvGrandStrategyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T227019 = -36						; size = 4
$T227015 = -32						; size = 4
$T227011 = -28						; size = 4
$T227010 = -24						; size = 4
$T227001 = -20						; size = 4
_iPriority$ = -16					; size = 4
_eVictory$ = -12					; size = 4
_iFlavorScience$ = -8					; size = 4
_eApolloProgram$ = -4					; size = 4
?GetSpaceshipPriority@CvGrandStrategyAI@@QAEHXZ PROC	; CvGrandStrategyAI::GetSpaceshipPriority, COMDAT
; _this$ = ecx

; 789  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 790  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 791  : 
; 792  : 	// If SS Victory isn't even available then don't bother with anything
; 793  : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_SPACE_RACE", true);

	push	1
	push	OFFSET ??_C@_0BD@GNEMFDHK@VICTORY_SPACE_RACE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 794  : 	if(eVictory == NO_VICTORY || !GC.getGame().isVictoryValid(eVictory))

	cmp	DWORD PTR _eVictory$[ebp], -1
	je	SHORT $LN3@GetSpacesh
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227001[ebp], eax
	mov	ecx, DWORD PTR _eVictory$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227001[ebp]
	call	?isVictoryValid@CvGame@@QBE_NW4VictoryTypes@@@Z ; CvGame::isVictoryValid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@GetSpacesh
$LN3@GetSpacesh:

; 795  : 	{
; 796  : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN5@GetSpacesh
$LN4@GetSpacesh:

; 797  : 	}
; 798  : 
; 799  : 	int iFlavorScience =  m_pPlayer->GetFlavorManager()->GetPersonalityIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SCIENCE"));

	push	0
	push	OFFSET ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
	mov	DWORD PTR _iFlavorScience$[ebp], eax

; 800  : 
; 801  : 	// the later the game the greater the chance
; 802  : 	iPriority += m_pPlayer->GetCurrentEra() * iFlavorScience * 150 / 100;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCurrentEra@CvPlayer@@QBE?AW4EraTypes@@XZ ; CvPlayer::GetCurrentEra
	imul	eax, DWORD PTR _iFlavorScience$[ebp]
	imul	eax, 150				; 00000096H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	add	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 803  : 
; 804  : 	// if I already built the Apollo Program I am very likely to follow through
; 805  : 	ProjectTypes eApolloProgram = (ProjectTypes) GC.getInfoTypeForString("PROJECT_APOLLO_PROGRAM", true);

	push	1
	push	OFFSET ??_C@_0BH@HJPDENF@PROJECT_APOLLO_PROGRAM?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eApolloProgram$[ebp], eax

; 806  : 	if(eApolloProgram != NO_PROJECT)

	cmp	DWORD PTR _eApolloProgram$[ebp], -1
	je	SHORT $LN2@GetSpacesh

; 807  : 	{
; 808  : 		if(GET_TEAM(m_pPlayer->getTeam()).getProjectCount(eApolloProgram) > 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T227010[ebp], eax
	mov	ecx, DWORD PTR $T227010[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T227011[ebp], eax
	mov	eax, DWORD PTR $T227011[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T227015[ebp], eax
	mov	ecx, DWORD PTR _eApolloProgram$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227015[ebp]
	call	?getProjectCount@CvTeam@@QBEHW4ProjectTypes@@@Z ; CvTeam::getProjectCount
	test	eax, eax
	jle	SHORT $LN2@GetSpacesh

; 809  : 		{
; 810  : 			iPriority += /*150*/ GC.getAI_GS_SS_HAS_APOLLO_PROGRAM();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1988
	mov	DWORD PTR $T227019[ebp], edx
	mov	eax, DWORD PTR _iPriority$[ebp]
	add	eax, DWORD PTR $T227019[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax
$LN2@GetSpacesh:

; 811  : 		}
; 812  : 	}
; 813  : 
; 814  : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]
$LN5@GetSpacesh:

; 815  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpaceshipPriority@CvGrandStrategyAI@@QAEHXZ ENDP	; CvGrandStrategyAI::GetSpaceshipPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetBaseGrandStrategyPriority@CvGrandStrategyAI@@QAEHW4AIGrandStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T227025 = -16						; size = 4
_iFlavorLoop$224041 = -12				; size = 4
_iPriority$ = -8					; size = 4
_pGrandStrategy$ = -4					; size = 4
_eGrandStrategy$ = 8					; size = 4
?GetBaseGrandStrategyPriority@CvGrandStrategyAI@@QAEHW4AIGrandStrategyTypes@@@Z PROC ; CvGrandStrategyAI::GetBaseGrandStrategyPriority, COMDAT
; _this$ = ecx

; 823  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 824  : 	CvAIGrandStrategyXMLEntry* pGrandStrategy = GetAIGrandStrategies()->GetEntry(eGrandStrategy);

	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ; CvAIGrandStrategyXMLEntries::GetEntry
	mov	DWORD PTR _pGrandStrategy$[ebp], eax

; 825  : 
; 826  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 827  : 
; 828  : 	// Personality effect on Priority
; 829  : 	for(int iFlavorLoop = 0; iFlavorLoop < GC.getNumFlavorTypes(); iFlavorLoop++)

	mov	DWORD PTR _iFlavorLoop$224041[ebp], 0
	jmp	SHORT $LN4@GetBaseGra
$LN3@GetBaseGra:
	mov	ecx, DWORD PTR _iFlavorLoop$224041[ebp]
	add	ecx, 1
	mov	DWORD PTR _iFlavorLoop$224041[ebp], ecx
$LN4@GetBaseGra:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T227025[ebp], edx
	mov	eax, DWORD PTR _iFlavorLoop$224041[ebp]
	cmp	eax, DWORD PTR $T227025[ebp]
	jge	SHORT $LN2@GetBaseGra

; 830  : 	{
; 831  : 		if(pGrandStrategy->GetFlavorValue(iFlavorLoop) != 0)

	mov	ecx, DWORD PTR _iFlavorLoop$224041[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pGrandStrategy$[ebp]
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	test	eax, eax
	je	SHORT $LN1@GetBaseGra

; 832  : 		{
; 833  : 			iPriority += (pGrandStrategy->GetFlavorValue(iFlavorLoop) * GetPlayer()->GetFlavorManager()->GetPersonalityIndividualFlavor((FlavorTypes) iFlavorLoop));

	mov	edx, DWORD PTR _iFlavorLoop$224041[ebp]
	push	edx
	mov	ecx, DWORD PTR _pGrandStrategy$[ebp]
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	mov	esi, eax
	mov	eax, DWORD PTR _iFlavorLoop$224041[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
	imul	esi, eax
	add	esi, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR _iPriority$[ebp], esi
$LN1@GetBaseGra:

; 834  : 		}
; 835  : 	}

	jmp	SHORT $LN3@GetBaseGra
$LN2@GetBaseGra:

; 836  : 
; 837  : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]

; 838  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBaseGrandStrategyPriority@CvGrandStrategyAI@@QAEHW4AIGrandStrategyTypes@@@Z ENDP ; CvGrandStrategyAI::GetBaseGrandStrategyPriority
_TEXT	ENDS
PUBLIC	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
; Function compile flags: /Odtp
;	COMDAT ?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z
_TEXT	SEGMENT
tv90 = -24						; size = 4
_this$ = -20						; size = 4
$T227035 = -16						; size = 4
$T227028 = -12						; size = 4
_iModdedFlavor$224053 = -8				; size = 4
_pGrandStrategy$224052 = -4				; size = 4
_eFlavorType$ = 8					; size = 4
?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy, COMDAT
; _this$ = ecx

; 846  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 847  : 	if(m_eActiveGrandStrategy != NO_AIGRANDSTRATEGY)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], -1
	je	SHORT $LN1@GetPersona

; 848  : 	{
; 849  : 		CvAIGrandStrategyXMLEntry* pGrandStrategy = GetAIGrandStrategies()->GetEntry(m_eActiveGrandStrategy);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ; CvAIGrandStrategyXMLEntries::GetEntry
	mov	DWORD PTR _pGrandStrategy$224052[ebp], eax

; 850  : 		int iModdedFlavor = pGrandStrategy->GetFlavorModValue(eFlavorType) + m_pPlayer->GetFlavorManager()->GetPersonalityIndividualFlavor(eFlavorType);

	mov	eax, DWORD PTR _eFlavorType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGrandStrategy$224052[ebp]
	call	?GetFlavorModValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorModValue
	mov	esi, eax
	mov	ecx, DWORD PTR _eFlavorType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
	add	esi, eax
	mov	DWORD PTR _iModdedFlavor$224053[ebp], esi

; 851  : 		iModdedFlavor = max(0,iModdedFlavor);

	mov	DWORD PTR $T227028[ebp], 0
	mov	eax, DWORD PTR $T227028[ebp]
	cmp	eax, DWORD PTR _iModdedFlavor$224053[ebp]
	jge	SHORT $LN6@GetPersona
	lea	ecx, DWORD PTR _iModdedFlavor$224053[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN7@GetPersona
$LN6@GetPersona:
	lea	edx, DWORD PTR $T227028[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN7@GetPersona:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T227035[ebp], eax
	mov	ecx, DWORD PTR $T227035[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iModdedFlavor$224053[ebp], edx

; 852  : 		return iModdedFlavor;

	mov	eax, DWORD PTR _iModdedFlavor$224053[ebp]
	jmp	SHORT $LN2@GetPersona
$LN1@GetPersona:

; 853  : 	}
; 854  : 	return m_pPlayer->GetFlavorManager()->GetPersonalityIndividualFlavor(eFlavorType);

	mov	eax, DWORD PTR _eFlavorType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
$LN2@GetPersona:

; 855  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ENDP ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ PROC ; CvGrandStrategyAI::GetActiveGrandStrategy, COMDAT
; _this$ = ecx

; 859  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 860  : 	return m_eActiveGrandStrategy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 861  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ENDP ; CvGrandStrategyAI::GetActiveGrandStrategy
_TEXT	ENDS
PUBLIC	?SetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ; CvGrandStrategyAI::SetNumTurnsSinceActiveSet
; Function compile flags: /Odtp
;	COMDAT ?SetActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eGrandStrategy$ = 8					; size = 4
?SetActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@@Z PROC ; CvGrandStrategyAI::SetActiveGrandStrategy, COMDAT
; _this$ = ecx

; 865  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 866  : 	if(eGrandStrategy != NO_AIGRANDSTRATEGY)

	cmp	DWORD PTR _eGrandStrategy$[ebp], -1
	je	SHORT $LN2@SetActiveG

; 867  : 	{
; 868  : 		m_eActiveGrandStrategy = eGrandStrategy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eGrandStrategy$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 869  : 
; 870  : 		SetNumTurnsSinceActiveSet(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ; CvGrandStrategyAI::SetNumTurnsSinceActiveSet
$LN2@SetActiveG:

; 871  : 	}
; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@@Z ENDP ; CvGrandStrategyAI::SetActiveGrandStrategy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QBEHXZ PROC ; CvGrandStrategyAI::GetNumTurnsSinceActiveSet, COMDAT
; _this$ = ecx

; 876  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 877  : 	return m_iNumTurnsSinceActiveSet;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 878  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QBEHXZ ENDP ; CvGrandStrategyAI::GetNumTurnsSinceActiveSet
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iValue$ = 8						; size = 4
?SetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z PROC ; CvGrandStrategyAI::SetNumTurnsSinceActiveSet, COMDAT
; _this$ = ecx

; 882  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 883  : 	m_iNumTurnsSinceActiveSet = iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 884  : 	FAssert(m_iNumTurnsSinceActiveSet >= 0);
; 885  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ENDP ; CvGrandStrategyAI::SetNumTurnsSinceActiveSet
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ChangeNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iChange$ = 8						; size = 4
?ChangeNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z PROC ; CvGrandStrategyAI::ChangeNumTurnsSinceActiveSet, COMDAT
; _this$ = ecx

; 889  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 890  : 	if(iChange != 0)

	cmp	DWORD PTR _iChange$[ebp], 0
	je	SHORT $LN2@ChangeNumT

; 891  : 	{
; 892  : 		m_iNumTurnsSinceActiveSet += iChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _iChange$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN2@ChangeNumT:

; 893  : 	}
; 894  : 
; 895  : 	FAssert(m_iNumTurnsSinceActiveSet >= 0);
; 896  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ChangeNumTurnsSinceActiveSet@CvGrandStrategyAI@@QAEXH@Z ENDP ; CvGrandStrategyAI::ChangeNumTurnsSinceActiveSet
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eGrandStrategy$ = 8					; size = 4
?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z PROC ; CvGrandStrategyAI::GetGrandStrategyPriority, COMDAT
; _this$ = ecx

; 900  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 	FAssert(eGrandStrategy != NO_AIGRANDSTRATEGY);
; 902  : 	return m_paiGrandStrategyPriority[eGrandStrategy];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _eGrandStrategy$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 903  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ENDP ; CvGrandStrategyAI::GetGrandStrategyPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eGrandStrategy$ = 8					; size = 4
_iValue$ = 12						; size = 4
?SetGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z PROC ; CvGrandStrategyAI::SetGrandStrategyPriority, COMDAT
; _this$ = ecx

; 907  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 	FAssert(eGrandStrategy != NO_AIGRANDSTRATEGY);
; 909  : 	m_paiGrandStrategyPriority[eGrandStrategy] = iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _eGrandStrategy$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 910  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ENDP ; CvGrandStrategyAI::SetGrandStrategyPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ChangeGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eGrandStrategy$ = 8					; size = 4
_iChange$ = 12						; size = 4
?ChangeGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z PROC ; CvGrandStrategyAI::ChangeGrandStrategyPriority, COMDAT
; _this$ = ecx

; 914  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 915  : 	FAssert(eGrandStrategy != NO_AIGRANDSTRATEGY);
; 916  : 
; 917  : 	if(iChange != 0)

	cmp	DWORD PTR _iChange$[ebp], 0
	je	SHORT $LN2@ChangeGran

; 918  : 	{
; 919  : 		m_paiGrandStrategyPriority[eGrandStrategy] += iChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _eGrandStrategy$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	add	eax, DWORD PTR _iChange$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _eGrandStrategy$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN2@ChangeGran:

; 920  : 	}
; 921  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeGrandStrategyPriority@CvGrandStrategyAI@@QAEXW4AIGrandStrategyTypes@@H@Z ENDP ; CvGrandStrategyAI::ChangeGrandStrategyPriority
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$04$00@@QAE@XZ		; CvWeightedVector<int,5,1>::~CvWeightedVector<int,5,1>
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
PUBLIC	?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::LogGuessOtherPlayerGrandStrategy
PUBLIC	?SetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4PlayerTypes@@W4AIGrandStrategyTypes@@W4GuessConfidenceTypes@@@Z ; CvGrandStrategyAI::SetGuessOtherPlayerActiveGrandStrategy
PUBLIC	?SortItems@?$CvWeightedVector@H$04$00@@QAEXXZ	; CvWeightedVector<int,5,1>::SortItems
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::push_back
PUBLIC	?GetGuessOtherPlayerSpaceshipPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ; CvGrandStrategyAI::GetGuessOtherPlayerSpaceshipPriority
PUBLIC	?GetGuessOtherPlayerUnitedNationsPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerUnitedNationsPriority
PUBLIC	?GetGuessOtherPlayerCulturePriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@HH@Z ; CvGrandStrategyAI::GetGuessOtherPlayerCulturePriority
PUBLIC	?GetGuessOtherPlayerConquestPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ; CvGrandStrategyAI::GetGuessOtherPlayerConquestPriority
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
PUBLIC	__$ArrayPad$
EXTRN	?GetNumTechsKnown@CvTeamTechs@@QBEHXZ:PROC	; CvTeamTechs::GetNumTechsKnown
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ:PROC ; CvPlayer::GetJONSCultureEverGenerated
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$3
__ehfuncinfo$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ
_TEXT	SEGMENT
tv437 = -408						; size = 4
_this$ = -404						; size = 4
_i$227323 = -376					; size = 4
_i$227305 = -372					; size = 4
$T227279 = -368						; size = 4
$T227275 = -364						; size = 4
_elem$227266 = -360					; size = 8
$T227230 = -340						; size = 4
_weightedElem$227226 = -336				; size = 8
$T227220 = -328						; size = 4
$T227212 = -324						; size = 4
$T227200 = -316						; size = 4
_weightedElem$227196 = -312				; size = 8
$T227186 = -304						; size = 4
$T227174 = -300						; size = 4
$T227170 = -296						; size = 4
$T227161 = -292						; size = 4
$T227157 = -288						; size = 4
$T227156 = -284						; size = 4
$T227147 = -277						; size = 1
$T227138 = -276						; size = 4
$T227134 = -272						; size = 4
$T227127 = -268						; size = 4
$T227123 = -264						; size = 4
$T227119 = -260						; size = 4
$T227115 = -253						; size = 1
$T227106 = -252						; size = 4
$T227102 = -248						; size = 4
$T227098 = -244						; size = 4
$T227097 = -240						; size = 4
$T227085 = -236						; size = 4
$T227084 = -232						; size = 4
$T227058 = -228						; size = 4
$T227057 = -224						; size = 28
_iTeamLoop$224331 = -196				; size = 4
_eMajor$ = -192						; size = 4
_vGrandStrategyPrioritiesForLogging$ = -188		; size = 36
_pTeam$ = -152						; size = 4
_iPriority$ = -148					; size = 4
_iWorldMilitaryAverage$ = -144				; size = 4
_iGrandStrategiesLoop$ = -140				; size = 4
_iWorldNumTechsAverage$ = -136				; size = 4
_eGrandStrategy$ = -132					; size = 4
_iMajorLoop$ = -128					; size = 4
_iWorldCultureAverage$ = -124				; size = 4
_eGuessConfidence$ = -120				; size = 4
_vGrandStrategyPriorities$ = -116			; size = 56
_iWorldTourismAverage$ = -60				; size = 4
_iNumPlayersAlive$ = -56				; size = 4
_strGrandStrategyName$ = -52				; size = 28
__$ArrayPad$ = -24					; size = 4
_eTeam$ = -20						; size = 4
_pGrandStrategy$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ PROC ; CvGrandStrategyAI::DoGuessOtherPlayersActiveGrandStrategy, COMDAT
; _this$ = ecx

; 933  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 396				; 0000018cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 934  : 	CvWeightedVector<int, 5, true> vGrandStrategyPriorities;

	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 935  : 	FStaticVector< int, 5, true, c_eCiv5GameplayDLL >  vGrandStrategyPrioritiesForLogging;

	lea	ecx, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	call	??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 936  : 
; 937  : 	GuessConfidenceTypes eGuessConfidence = NO_GUESS_CONFIDENCE_TYPE;

	mov	DWORD PTR _eGuessConfidence$[ebp], -1

; 938  : 
; 939  : #ifdef AUI_WARNING_FIXES
; 940  : 	uint iGrandStrategiesLoop = 0;
; 941  : #else
; 942  : 	int iGrandStrategiesLoop = 0;

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0

; 943  : #endif
; 944  : 	AIGrandStrategyTypes eGrandStrategy = NO_AIGRANDSTRATEGY;

	mov	DWORD PTR _eGrandStrategy$[ebp], -1

; 945  : 	CvAIGrandStrategyXMLEntry* pGrandStrategy = 0;

	mov	DWORD PTR _pGrandStrategy$[ebp], 0

; 946  : 	CvString strGrandStrategyName;

	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 947  : 
; 948  : 	CvTeam& pTeam = GET_TEAM(GetPlayer()->getTeam());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T227084[ebp], eax
	mov	eax, DWORD PTR $T227084[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T227085[ebp], eax
	mov	edx, DWORD PTR $T227085[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _pTeam$[ebp], edx

; 949  : 
; 950  : 	int iMajorLoop = 0;

	mov	DWORD PTR _iMajorLoop$[ebp], 0

; 951  : 	PlayerTypes eMajor = NO_PLAYER;

	mov	DWORD PTR _eMajor$[ebp], -1

; 952  : 
; 953  : 	int iPriority = 0;

	mov	DWORD PTR _iPriority$[ebp], 0

; 954  : 
; 955  : 	// Establish world Military strength average
; 956  : 	int iWorldMilitaryAverage = GC.getGame().GetWorldMilitaryStrengthAverage(GetPlayer()->GetID(), true, true);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T227097[ebp], eax
	mov	eax, DWORD PTR $T227097[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T227098[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227102[ebp], edx
	push	1
	push	1
	mov	eax, DWORD PTR $T227098[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227102[ebp]
	call	?GetWorldMilitaryStrengthAverage@CvGame@@QAEHW4PlayerTypes@@_N1@Z ; CvGame::GetWorldMilitaryStrengthAverage
	mov	DWORD PTR _iWorldMilitaryAverage$[ebp], eax

; 957  : 
; 958  : 	// Establish world culture and tourism averages
; 959  : 	int iNumPlayersAlive = 0;

	mov	DWORD PTR _iNumPlayersAlive$[ebp], 0

; 960  : 	int iWorldCultureAverage = 0;

	mov	DWORD PTR _iWorldCultureAverage$[ebp], 0

; 961  : 	int iWorldTourismAverage = 0;

	mov	DWORD PTR _iWorldTourismAverage$[ebp], 0

; 962  : 	for(iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$[ebp], 0
	jmp	SHORT $LN29@DoGuessOth
$LN28@DoGuessOth:
	mov	ecx, DWORD PTR _iMajorLoop$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iMajorLoop$[ebp], ecx
$LN29@DoGuessOth:
	cmp	DWORD PTR _iMajorLoop$[ebp], 22		; 00000016H
	jge	$LN27@DoGuessOth

; 963  : 	{
; 964  : 		eMajor = (PlayerTypes) iMajorLoop;

	mov	edx, DWORD PTR _iMajorLoop$[ebp]
	mov	DWORD PTR _eMajor$[ebp], edx

; 965  : 
; 966  : 		if(GET_PLAYER(eMajor).isAlive())

	mov	eax, DWORD PTR _eMajor$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227106[ebp], eax
	mov	ecx, DWORD PTR $T227106[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T227115[ebp], dl
	movzx	eax, BYTE PTR $T227115[ebp]
	test	eax, eax
	je	SHORT $LN26@DoGuessOth

; 967  : 		{
; 968  : 			iWorldCultureAverage += GET_PLAYER(eMajor).GetJONSCultureEverGenerated();

	mov	ecx, DWORD PTR _eMajor$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227119[ebp], ecx
	mov	ecx, DWORD PTR $T227119[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	add	eax, DWORD PTR _iWorldCultureAverage$[ebp]
	mov	DWORD PTR _iWorldCultureAverage$[ebp], eax

; 969  : 			iWorldTourismAverage += GET_PLAYER(eMajor).GetCulture()->GetTourism();

	mov	edx, DWORD PTR _eMajor$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227123[ebp], edx
	mov	ecx, DWORD PTR $T227123[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	add	eax, DWORD PTR _iWorldTourismAverage$[ebp]
	mov	DWORD PTR _iWorldTourismAverage$[ebp], eax

; 970  : 			iNumPlayersAlive++;

	mov	eax, DWORD PTR _iNumPlayersAlive$[ebp]
	add	eax, 1
	mov	DWORD PTR _iNumPlayersAlive$[ebp], eax
$LN26@DoGuessOth:

; 971  : 		}
; 972  : 	}

	jmp	$LN28@DoGuessOth
$LN27@DoGuessOth:

; 973  : 	iWorldCultureAverage /= iNumPlayersAlive;

	mov	eax, DWORD PTR _iWorldCultureAverage$[ebp]
	cdq
	idiv	DWORD PTR _iNumPlayersAlive$[ebp]
	mov	DWORD PTR _iWorldCultureAverage$[ebp], eax

; 974  : 	iWorldTourismAverage /= iNumPlayersAlive;

	mov	eax, DWORD PTR _iWorldTourismAverage$[ebp]
	cdq
	idiv	DWORD PTR _iNumPlayersAlive$[ebp]
	mov	DWORD PTR _iWorldTourismAverage$[ebp], eax

; 975  : 
; 976  : 	// Establish world Tech progress average
; 977  : 	iNumPlayersAlive = 0;

	mov	DWORD PTR _iNumPlayersAlive$[ebp], 0

; 978  : 	int iWorldNumTechsAverage = 0;

	mov	DWORD PTR _iWorldNumTechsAverage$[ebp], 0

; 979  : 	TeamTypes eTeam;
; 980  : 	for(int iTeamLoop = 0; iTeamLoop < MAX_MAJOR_CIVS; iTeamLoop++)	// Looping over all MAJOR teams

	mov	DWORD PTR _iTeamLoop$224331[ebp], 0
	jmp	SHORT $LN25@DoGuessOth
$LN24@DoGuessOth:
	mov	ecx, DWORD PTR _iTeamLoop$224331[ebp]
	add	ecx, 1
	mov	DWORD PTR _iTeamLoop$224331[ebp], ecx
$LN25@DoGuessOth:
	cmp	DWORD PTR _iTeamLoop$224331[ebp], 22	; 00000016H
	jge	SHORT $LN23@DoGuessOth

; 981  : 	{
; 982  : 		eTeam = (TeamTypes) iTeamLoop;

	mov	edx, DWORD PTR _iTeamLoop$224331[ebp]
	mov	DWORD PTR _eTeam$[ebp], edx

; 983  : 
; 984  : 		if(GET_TEAM(eTeam).isAlive())

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T227127[ebp], eax
	mov	ecx, DWORD PTR $T227127[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+12], 0
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN22@DoGuessOth

; 985  : 		{
; 986  : 			iWorldNumTechsAverage += GET_TEAM(eTeam).GetTeamTechs()->GetNumTechsKnown();

	mov	ecx, DWORD PTR _eTeam$[ebp]
	imul	ecx, 2984				; 00000ba8H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T227134[ebp], ecx
	mov	ecx, DWORD PTR $T227134[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?GetNumTechsKnown@CvTeamTechs@@QBEHXZ	; CvTeamTechs::GetNumTechsKnown
	add	eax, DWORD PTR _iWorldNumTechsAverage$[ebp]
	mov	DWORD PTR _iWorldNumTechsAverage$[ebp], eax

; 987  : 			iNumPlayersAlive++;

	mov	edx, DWORD PTR _iNumPlayersAlive$[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumPlayersAlive$[ebp], edx
$LN22@DoGuessOth:

; 988  : 		}
; 989  : 	}

	jmp	$LN24@DoGuessOth
$LN23@DoGuessOth:

; 990  : 	iWorldNumTechsAverage /= iNumPlayersAlive;

	mov	eax, DWORD PTR _iWorldNumTechsAverage$[ebp]
	cdq
	idiv	DWORD PTR _iNumPlayersAlive$[ebp]
	mov	DWORD PTR _iWorldNumTechsAverage$[ebp], eax

; 991  : 
; 992  : 	// Look at every Major we've met
; 993  : 	for(iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	mov	DWORD PTR _iMajorLoop$[ebp], 0
	jmp	SHORT $LN21@DoGuessOth
$LN20@DoGuessOth:
	mov	eax, DWORD PTR _iMajorLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iMajorLoop$[ebp], eax
$LN21@DoGuessOth:
	cmp	DWORD PTR _iMajorLoop$[ebp], 22		; 00000016H
	jge	$LN19@DoGuessOth

; 994  : 	{
; 995  : 		eMajor = (PlayerTypes) iMajorLoop;

	mov	ecx, DWORD PTR _iMajorLoop$[ebp]
	mov	DWORD PTR _eMajor$[ebp], ecx

; 996  : 
; 997  : 		if(GET_PLAYER(eMajor).isAlive() && iMajorLoop != GetPlayer()->GetID())

	mov	edx, DWORD PTR _eMajor$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227138[ebp], edx
	mov	eax, DWORD PTR $T227138[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T227147[ebp], cl
	movzx	edx, BYTE PTR $T227147[ebp]
	test	edx, edx
	je	$LN18@DoGuessOth
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	DWORD PTR $T227156[ebp], eax
	mov	eax, DWORD PTR $T227156[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T227157[ebp], ecx
	mov	edx, DWORD PTR _iMajorLoop$[ebp]
	cmp	edx, DWORD PTR $T227157[ebp]
	je	$LN18@DoGuessOth

; 998  : 		{
; 999  : 			if(pTeam.isHasMet(GET_PLAYER(eMajor).getTeam()))

	mov	eax, DWORD PTR _eMajor$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227161[ebp], eax
	mov	ecx, DWORD PTR $T227161[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T227170[ebp], eax
	mov	eax, DWORD PTR $T227170[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTeam$[ebp]
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	movzx	ecx, al
	test	ecx, ecx
	je	$LN18@DoGuessOth

; 1000 : 			{
; 1001 : 				for(iGrandStrategiesLoop = 0; iGrandStrategiesLoop < GetAIGrandStrategies()->GetNumAIGrandStrategies(); iGrandStrategiesLoop++)

	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], 0
	jmp	SHORT $LN16@DoGuessOth
$LN15@DoGuessOth:
	mov	edx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	add	edx, 1
	mov	DWORD PTR _iGrandStrategiesLoop$[ebp], edx
$LN16@DoGuessOth:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetNumAIGrandStrategies@CvAIGrandStrategyXMLEntries@@QAEHXZ ; CvAIGrandStrategyXMLEntries::GetNumAIGrandStrategies
	cmp	DWORD PTR _iGrandStrategiesLoop$[ebp], eax
	jge	$LN14@DoGuessOth

; 1002 : 				{
; 1003 : 					eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategiesLoop;

	mov	eax, DWORD PTR _iGrandStrategiesLoop$[ebp]
	mov	DWORD PTR _eGrandStrategy$[ebp], eax

; 1004 : 					pGrandStrategy = GetAIGrandStrategies()->GetEntry(iGrandStrategiesLoop);

	mov	ecx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAIGrandStrategies@CvGrandStrategyAI@@QAEPAVCvAIGrandStrategyXMLEntries@@XZ ; CvGrandStrategyAI::GetAIGrandStrategies
	mov	ecx, eax
	call	?GetEntry@CvAIGrandStrategyXMLEntries@@QAEPAVCvAIGrandStrategyXMLEntry@@H@Z ; CvAIGrandStrategyXMLEntries::GetEntry
	mov	DWORD PTR _pGrandStrategy$[ebp], eax

; 1005 : 					strGrandStrategyName = (CvString) pGrandStrategy->GetType();

	mov	ecx, DWORD PTR _pGrandStrategy$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227174[ebp], eax
	cmp	DWORD PTR $T227174[ebp], 0
	je	SHORT $LN95@DoGuessOth
	mov	edx, DWORD PTR $T227174[ebp]
	mov	DWORD PTR tv437[ebp], edx
	jmp	SHORT $LN96@DoGuessOth
$LN95@DoGuessOth:
	mov	DWORD PTR tv437[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN96@DoGuessOth:
	mov	eax, DWORD PTR tv437[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227057[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T227057[ebp]
	mov	DWORD PTR $T227186[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T227186[ebp]
	push	edx
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T227057[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1006 : 
; 1007 : 					if(strGrandStrategyName == "AIGRANDSTRATEGY_CONQUEST")

	push	OFFSET ??_C@_0BJ@GCKPAHPE@AIGRANDSTRATEGY_CONQUEST?$AA@
	lea	eax, DWORD PTR _strGrandStrategyName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@DoGuessOth

; 1008 : 					{
; 1009 : 						iPriority = GetGuessOtherPlayerConquestPriority(eMajor, iWorldMilitaryAverage);

	mov	edx, DWORD PTR _iWorldMilitaryAverage$[ebp]
	push	edx
	mov	eax, DWORD PTR _eMajor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerConquestPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ; CvGrandStrategyAI::GetGuessOtherPlayerConquestPriority
	mov	DWORD PTR _iPriority$[ebp], eax
	jmp	$LN12@DoGuessOth
$LN13@DoGuessOth:

; 1010 : 					}
; 1011 : 					else if(strGrandStrategyName == "AIGRANDSTRATEGY_CULTURE")

	push	OFFSET ??_C@_0BI@FNGLFDGI@AIGRANDSTRATEGY_CULTURE?$AA@
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@DoGuessOth

; 1012 : 					{
; 1013 : 						iPriority = GetGuessOtherPlayerCulturePriority(eMajor, iWorldCultureAverage, iWorldTourismAverage);

	mov	eax, DWORD PTR _iWorldTourismAverage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iWorldCultureAverage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eMajor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerCulturePriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@HH@Z ; CvGrandStrategyAI::GetGuessOtherPlayerCulturePriority
	mov	DWORD PTR _iPriority$[ebp], eax
	jmp	SHORT $LN12@DoGuessOth
$LN11@DoGuessOth:

; 1014 : 					}
; 1015 : 					else if(strGrandStrategyName == "AIGRANDSTRATEGY_UNITED_NATIONS")

	push	OFFSET ??_C@_0BP@DOCBNDKB@AIGRANDSTRATEGY_UNITED_NATIONS?$AA@
	lea	eax, DWORD PTR _strGrandStrategyName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@DoGuessOth

; 1016 : 					{
; 1017 : 						iPriority = GetGuessOtherPlayerUnitedNationsPriority(eMajor);

	mov	edx, DWORD PTR _eMajor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerUnitedNationsPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerUnitedNationsPriority
	mov	DWORD PTR _iPriority$[ebp], eax
	jmp	SHORT $LN12@DoGuessOth
$LN9@DoGuessOth:

; 1018 : 					}
; 1019 : 					else if(strGrandStrategyName == "AIGRANDSTRATEGY_SPACESHIP")

	push	OFFSET ??_C@_0BK@CCPNHFB@AIGRANDSTRATEGY_SPACESHIP?$AA@
	lea	eax, DWORD PTR _strGrandStrategyName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@DoGuessOth

; 1020 : 					{
; 1021 : 						iPriority = GetGuessOtherPlayerSpaceshipPriority(eMajor, iWorldNumTechsAverage);

	mov	edx, DWORD PTR _iWorldNumTechsAverage$[ebp]
	push	edx
	mov	eax, DWORD PTR _eMajor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerSpaceshipPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ; CvGrandStrategyAI::GetGuessOtherPlayerSpaceshipPriority
	mov	DWORD PTR _iPriority$[ebp], eax
$LN12@DoGuessOth:

; 1022 : 					}
; 1023 : 
; 1024 : 					vGrandStrategyPriorities.push_back(iGrandStrategiesLoop, iPriority);

	mov	ecx, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR $T227200[ebp], ecx
	mov	DWORD PTR _weightedElem$227196[ebp], 0
	mov	DWORD PTR _weightedElem$227196[ebp+4], 0
	mov	edx, DWORD PTR _iGrandStrategiesLoop$[ebp]
	mov	DWORD PTR _weightedElem$227196[ebp], edx
	mov	eax, DWORD PTR $T227200[ebp]
	mov	DWORD PTR _weightedElem$227196[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$227196[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::push_back

; 1025 : 					vGrandStrategyPrioritiesForLogging.push_back(iPriority);

	lea	edx, DWORD PTR _iPriority$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	call	?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,5,1,297,0>::push_back

; 1026 : 				}

	jmp	$LN15@DoGuessOth
$LN14@DoGuessOth:

; 1027 : 
; 1028 : 				if(vGrandStrategyPriorities.size() > 0)

	mov	eax, DWORD PTR _vGrandStrategyPriorities$[ebp+4]
	mov	DWORD PTR $T227212[ebp], eax
	cmp	DWORD PTR $T227212[ebp], 0
	jle	$LN6@DoGuessOth

; 1029 : 				{
; 1030 : 					// Add "No Grand Strategy" in case we just don't have enough info to go on
; 1031 : 					iPriority = /*40*/ GC.getAI_GRAND_STRATEGY_GUESS_NO_CLUE_WEIGHT();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1904
	mov	DWORD PTR $T227220[ebp], ecx
	mov	edx, DWORD PTR $T227220[ebp]
	mov	DWORD PTR _iPriority$[ebp], edx

; 1032 : 
; 1033 : 					vGrandStrategyPriorities.push_back(NO_AIGRANDSTRATEGY, iPriority);

	mov	DWORD PTR $T227058[ebp], -1
	mov	eax, DWORD PTR _iPriority$[ebp]
	mov	DWORD PTR $T227230[ebp], eax
	mov	DWORD PTR _weightedElem$227226[ebp], 0
	mov	DWORD PTR _weightedElem$227226[ebp+4], 0
	mov	ecx, DWORD PTR $T227058[ebp]
	mov	DWORD PTR _weightedElem$227226[ebp], ecx
	mov	edx, DWORD PTR $T227230[ebp]
	mov	DWORD PTR _weightedElem$227226[ebp+4], edx
	lea	eax, DWORD PTR _weightedElem$227226[ebp]
	push	eax
	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::push_back

; 1034 : 					vGrandStrategyPrioritiesForLogging.push_back(iPriority);

	lea	ecx, DWORD PTR _iPriority$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	call	?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,5,1,297,0>::push_back

; 1035 : 
; 1036 : 					vGrandStrategyPriorities.SortItems();

	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	call	?SortItems@?$CvWeightedVector@H$04$00@@QAEXXZ ; CvWeightedVector<int,5,1>::SortItems

; 1037 : 
; 1038 : 					eGrandStrategy = (AIGrandStrategyTypes) vGrandStrategyPriorities.GetElement(0);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _vGrandStrategyPriorities$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _eGrandStrategy$[ebp], ecx

; 1039 : 					iPriority = vGrandStrategyPriorities.GetWeight(0);

	mov	DWORD PTR _elem$227266[ebp], 0
	mov	DWORD PTR _elem$227266[ebp+4], 0
	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _vGrandStrategyPriorities$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [eax+edx+4]
	mov	DWORD PTR _elem$227266[ebp], ecx
	mov	DWORD PTR _elem$227266[ebp+4], edx
	mov	eax, DWORD PTR _elem$227266[ebp+4]
	mov	DWORD PTR _iPriority$[ebp], eax

; 1040 : 					eGuessConfidence = NO_GUESS_CONFIDENCE_TYPE;

	mov	DWORD PTR _eGuessConfidence$[ebp], -1

; 1041 : 
; 1042 : 					// How confident are we in our Guess?
; 1043 : 					if(eGrandStrategy != NO_AIGRANDSTRATEGY)

	cmp	DWORD PTR _eGrandStrategy$[ebp], -1
	je	SHORT $LN5@DoGuessOth

; 1044 : 					{
; 1045 : 						if(iPriority >= /*120*/ GC.getAI_GRAND_STRATEGY_GUESS_POSITIVE_THRESHOLD())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1908
	mov	DWORD PTR $T227275[ebp], ecx
	mov	edx, DWORD PTR _iPriority$[ebp]
	cmp	edx, DWORD PTR $T227275[ebp]
	jl	SHORT $LN4@DoGuessOth

; 1046 : 						{
; 1047 : 							eGuessConfidence = GUESS_CONFIDENCE_POSITIVE;

	mov	DWORD PTR _eGuessConfidence$[ebp], 2
	jmp	SHORT $LN5@DoGuessOth
$LN4@DoGuessOth:

; 1048 : 						}
; 1049 : 						else if(iPriority >= /*70*/ GC.getAI_GRAND_STRATEGY_GUESS_LIKELY_THRESHOLD())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1912
	mov	DWORD PTR $T227279[ebp], eax
	mov	ecx, DWORD PTR _iPriority$[ebp]
	cmp	ecx, DWORD PTR $T227279[ebp]
	jl	SHORT $LN2@DoGuessOth

; 1050 : 						{
; 1051 : 							eGuessConfidence = GUESS_CONFIDENCE_LIKELY;

	mov	DWORD PTR _eGuessConfidence$[ebp], 1

; 1052 : 						}
; 1053 : 						else

	jmp	SHORT $LN5@DoGuessOth
$LN2@DoGuessOth:

; 1054 : 						{
; 1055 : 							eGuessConfidence = GUESS_CONFIDENCE_UNSURE;

	mov	DWORD PTR _eGuessConfidence$[ebp], 0
$LN5@DoGuessOth:

; 1056 : 						}
; 1057 : 					}
; 1058 : 
; 1059 : 					SetGuessOtherPlayerActiveGrandStrategy(eMajor, eGrandStrategy, eGuessConfidence);

	mov	edx, DWORD PTR _eGuessConfidence$[ebp]
	push	edx
	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eMajor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4PlayerTypes@@W4AIGrandStrategyTypes@@W4GuessConfidenceTypes@@@Z ; CvGrandStrategyAI::SetGuessOtherPlayerActiveGrandStrategy

; 1060 : 
; 1061 : 					LogGuessOtherPlayerGrandStrategy(vGrandStrategyPrioritiesForLogging, eMajor);

	mov	edx, DWORD PTR _eMajor$[ebp]
	push	edx
	lea	eax, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::LogGuessOtherPlayerGrandStrategy
$LN6@DoGuessOth:

; 1062 : 				}
; 1063 : 
; 1064 : 				vGrandStrategyPriorities.clear();

	xor	ecx, ecx
	je	SHORT $LN161@DoGuessOth
	mov	DWORD PTR _i$227305[ebp], 0
	jmp	SHORT $LN159@DoGuessOth
$LN158@DoGuessOth:
	mov	edx, DWORD PTR _i$227305[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227305[ebp], edx
$LN159@DoGuessOth:
	mov	eax, DWORD PTR _i$227305[ebp]
	cmp	eax, DWORD PTR _vGrandStrategyPriorities$[ebp+4]
	jae	SHORT $LN161@DoGuessOth
	jmp	SHORT $LN158@DoGuessOth
$LN161@DoGuessOth:
	mov	DWORD PTR _vGrandStrategyPriorities$[ebp+4], 0

; 1065 : 				vGrandStrategyPrioritiesForLogging.clear();

	xor	ecx, ecx
	je	SHORT $LN169@DoGuessOth
	mov	DWORD PTR _i$227323[ebp], 0
	jmp	SHORT $LN167@DoGuessOth
$LN166@DoGuessOth:
	mov	edx, DWORD PTR _i$227323[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227323[ebp], edx
$LN167@DoGuessOth:
	mov	eax, DWORD PTR _i$227323[ebp]
	cmp	eax, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp+4]
	jae	SHORT $LN169@DoGuessOth
	jmp	SHORT $LN166@DoGuessOth
$LN169@DoGuessOth:
	mov	DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp+4], 0
$LN18@DoGuessOth:

; 1066 : 			}
; 1067 : 		}
; 1068 : 	}

	jmp	$LN20@DoGuessOth
$LN19@DoGuessOth:

; 1069 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	call	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	jmp	??1?$CvWeightedVector@H$04$00@@QAE@XZ	; CvWeightedVector<int,5,1>::~CvWeightedVector<int,5,1>
__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR _vGrandStrategyPrioritiesForLogging$[ebp]
	jmp	??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strGrandStrategyName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T227057[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoGuessOtherPlayersActiveGrandStrategy@CvGrandStrategyAI@@QAEXXZ ENDP ; CvGrandStrategyAI::DoGuessOtherPlayersActiveGrandStrategy
; Function compile flags: /Odtp
;	COMDAT ?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategy, COMDAT
; _this$ = ecx

; 1073 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1074 : 	FAssert(ePlayer < MAX_MAJOR_CIVS);
; 1075 : 	return (AIGrandStrategyTypes) m_eGuessOtherPlayerActiveGrandStrategy[ePlayer];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 1076 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategy
_TEXT	ENDS
PUBLIC	?GetGuessOtherPlayerActiveGrandStrategyConfidence@CvGrandStrategyAI@@QBE?AW4GuessConfidenceTypes@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategyConfidence
; Function compile flags: /Odtp
;	COMDAT ?GetGuessOtherPlayerActiveGrandStrategyConfidence@CvGrandStrategyAI@@QBE?AW4GuessConfidenceTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?GetGuessOtherPlayerActiveGrandStrategyConfidence@CvGrandStrategyAI@@QBE?AW4GuessConfidenceTypes@@W4PlayerTypes@@@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategyConfidence, COMDAT
; _this$ = ecx

; 1080 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1081 : 	FAssert(ePlayer < MAX_MAJOR_CIVS);
; 1082 : 	return (GuessConfidenceTypes) m_eGuessOtherPlayerActiveGrandStrategyConfidence[ePlayer];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 1083 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGuessOtherPlayerActiveGrandStrategyConfidence@CvGrandStrategyAI@@QBE?AW4GuessConfidenceTypes@@W4PlayerTypes@@@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategyConfidence
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4PlayerTypes@@W4AIGrandStrategyTypes@@W4GuessConfidenceTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_eGrandStrategy$ = 12					; size = 4
_eGuessConfidence$ = 16					; size = 4
?SetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4PlayerTypes@@W4AIGrandStrategyTypes@@W4GuessConfidenceTypes@@@Z PROC ; CvGrandStrategyAI::SetGuessOtherPlayerActiveGrandStrategy, COMDAT
; _this$ = ecx

; 1087 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 	FAssert(ePlayer < MAX_MAJOR_CIVS);
; 1089 : 	m_eGuessOtherPlayerActiveGrandStrategy[ePlayer] = eGrandStrategy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	eax, DWORD PTR _eGrandStrategy$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 1090 : 	m_eGuessOtherPlayerActiveGrandStrategyConfidence[ePlayer] = eGuessConfidence;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _eGuessConfidence$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 1091 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QAEXW4PlayerTypes@@W4AIGrandStrategyTypes@@W4GuessConfidenceTypes@@@Z ENDP ; CvGrandStrategyAI::SetGuessOtherPlayerActiveGrandStrategy
_TEXT	ENDS
EXTRN	?GetOtherPlayerNumMajorsConquered@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetOtherPlayerNumMajorsConquered
EXTRN	?GetOtherPlayerNumMajorsAttacked@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetOtherPlayerNumMajorsAttacked
EXTRN	?GetOtherPlayerNumMinorsConquered@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetOtherPlayerNumMinorsConquered
EXTRN	?GetOtherPlayerNumMinorsAttacked@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetOtherPlayerNumMinorsAttacked
; Function compile flags: /Odtp
;	COMDAT ?GetGuessOtherPlayerConquestPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T227427 = -28						; size = 4
$T227423 = -24						; size = 4
$T227419 = -20						; size = 4
$T227415 = -16						; size = 4
$T227411 = -12						; size = 4
$T227407 = -8						; size = 4
_iConquestPriority$ = -4				; size = 4
_ePlayer$ = 8						; size = 4
_iWorldMilitaryAverage$ = 12				; size = 4
?GetGuessOtherPlayerConquestPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerConquestPriority, COMDAT
; _this$ = ecx

; 1095 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1096 : 	int iConquestPriority = 0;

	mov	DWORD PTR _iConquestPriority$[ebp], 0

; 1097 : 
; 1098 : 	// Compare their Military to the world average; Possible range is 100 to -100 (but will typically be around -20 to 20)
; 1099 : 	if(iWorldMilitaryAverage > 0)

	cmp	DWORD PTR _iWorldMilitaryAverage$[ebp], 0
	jle	SHORT $LN1@GetGuessOt

; 1100 : 	{
; 1101 : 		iConquestPriority += (GET_PLAYER(ePlayer).GetMilitaryMight() - iWorldMilitaryAverage) * /*100*/ GC.getAI_GRAND_STRATEGY_CONQUEST_POWER_RATIO_MULTIPLIER() / iWorldMilitaryAverage;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227407[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1936
	mov	DWORD PTR $T227411[ebp], ecx
	mov	ecx, DWORD PTR $T227407[ebp]
	call	?GetMilitaryMight@CvPlayer@@QBEHXZ	; CvPlayer::GetMilitaryMight
	sub	eax, DWORD PTR _iWorldMilitaryAverage$[ebp]
	imul	eax, DWORD PTR $T227411[ebp]
	cdq
	idiv	DWORD PTR _iWorldMilitaryAverage$[ebp]
	add	eax, DWORD PTR _iConquestPriority$[ebp]
	mov	DWORD PTR _iConquestPriority$[ebp], eax
$LN1@GetGuessOt:

; 1102 : 	}
; 1103 : 
; 1104 : 	// Minors attacked
; 1105 : 	iConquestPriority += (GetPlayer()->GetDiplomacyAI()->GetOtherPlayerNumMinorsAttacked(ePlayer) * /*5*/ GC.getAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_ATTACKED());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1944
	mov	DWORD PTR $T227415[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetOtherPlayerNumMinorsAttacked@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z ; CvDiplomacyAI::GetOtherPlayerNumMinorsAttacked
	imul	eax, DWORD PTR $T227415[ebp]
	add	eax, DWORD PTR _iConquestPriority$[ebp]
	mov	DWORD PTR _iConquestPriority$[ebp], eax

; 1106 : 
; 1107 : 	// Minors Conquered
; 1108 : 	iConquestPriority += (GetPlayer()->GetDiplomacyAI()->GetOtherPlayerNumMinorsConquered(ePlayer) * /*10*/ GC.getAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MINOR_CONQUERED());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1948
	mov	DWORD PTR $T227419[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetOtherPlayerNumMinorsConquered@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z ; CvDiplomacyAI::GetOtherPlayerNumMinorsConquered
	imul	eax, DWORD PTR $T227419[ebp]
	add	eax, DWORD PTR _iConquestPriority$[ebp]
	mov	DWORD PTR _iConquestPriority$[ebp], eax

; 1109 : 
; 1110 : 	// Majors attacked
; 1111 : 	iConquestPriority += (GetPlayer()->GetDiplomacyAI()->GetOtherPlayerNumMajorsAttacked(ePlayer) * /*10*/ GC.getAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_ATTACKED());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1952
	mov	DWORD PTR $T227423[ebp], eax
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetOtherPlayerNumMajorsAttacked@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z ; CvDiplomacyAI::GetOtherPlayerNumMajorsAttacked
	imul	eax, DWORD PTR $T227423[ebp]
	add	eax, DWORD PTR _iConquestPriority$[ebp]
	mov	DWORD PTR _iConquestPriority$[ebp], eax

; 1112 : 
; 1113 : 	// Majors Conquered
; 1114 : 	iConquestPriority += (GetPlayer()->GetDiplomacyAI()->GetOtherPlayerNumMajorsConquered(ePlayer) * /*15*/ GC.getAI_GRAND_STRATEGY_CONQUEST_WEIGHT_PER_MAJOR_CONQUERED());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1956
	mov	DWORD PTR $T227427[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetOtherPlayerNumMajorsConquered@CvDiplomacyAI@@QBEHW4PlayerTypes@@@Z ; CvDiplomacyAI::GetOtherPlayerNumMajorsConquered
	imul	eax, DWORD PTR $T227427[ebp]
	add	eax, DWORD PTR _iConquestPriority$[ebp]
	mov	DWORD PTR _iConquestPriority$[ebp], eax

; 1115 : 
; 1116 : 	return iConquestPriority;

	mov	eax, DWORD PTR _iConquestPriority$[ebp]

; 1117 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetGuessOtherPlayerConquestPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerConquestPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetGuessOtherPlayerCulturePriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@HH@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T227477 = -60						; size = 4
$T227473 = -56						; size = 4
$T227469 = -52						; size = 4
$T227465 = -48						; size = 4
$T227461 = -44						; size = 4
$T227457 = -40						; size = 4
$T227453 = -36						; size = 4
$T227449 = -32						; size = 4
$T227445 = -28						; size = 4
$T227441 = -24						; size = 4
$T227437 = -20						; size = 4
$T227433 = -16						; size = 4
_eVictory$ = -12					; size = 4
_iRatio$ = -8						; size = 4
_iCulturePriority$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
_iWorldCultureAverage$ = 12				; size = 4
_iWorldTourismAverage$ = 16				; size = 4
?GetGuessOtherPlayerCulturePriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@HH@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerCulturePriority, COMDAT
; _this$ = ecx

; 1121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 1122 : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_CULTURAL", true);

	push	1
	push	OFFSET ??_C@_0BB@JOEIKBOM@VICTORY_CULTURAL?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 1123 : 
; 1124 : 	// If Culture Victory isn't even available then don't bother with anything
; 1125 : 	if(eVictory == NO_VICTORY)

	cmp	DWORD PTR _eVictory$[ebp], -1
	jne	SHORT $LN9@GetGuessOt@2

; 1126 : 	{
; 1127 : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN10@GetGuessOt@2
$LN9@GetGuessOt@2:

; 1128 : 	}
; 1129 : 
; 1130 : 	int iCulturePriority = 0;

	mov	DWORD PTR _iCulturePriority$[ebp], 0

; 1131 : 	int iRatio;
; 1132 : 
; 1133 : 	// Compare their Culture to the world average; Possible range is 75 to -75
; 1134 : 	if(iWorldCultureAverage > 0)

	cmp	DWORD PTR _iWorldCultureAverage$[ebp], 0
	jle	$LN8@GetGuessOt@2

; 1135 : 	{
; 1136 : 		iRatio = (GET_PLAYER(ePlayer).GetJONSCultureEverGenerated() - iWorldCultureAverage) * /*75*/ GC.getAI_GS_CULTURE_RATIO_MULTIPLIER() / iWorldCultureAverage;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227433[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1960
	mov	DWORD PTR $T227437[ebp], ecx
	mov	ecx, DWORD PTR $T227433[ebp]
	call	?GetJONSCultureEverGenerated@CvPlayer@@QBEHXZ ; CvPlayer::GetJONSCultureEverGenerated
	sub	eax, DWORD PTR _iWorldCultureAverage$[ebp]
	imul	eax, DWORD PTR $T227437[ebp]
	cdq
	idiv	DWORD PTR _iWorldCultureAverage$[ebp]
	mov	DWORD PTR _iRatio$[ebp], eax

; 1137 : 		if (iRatio > GC.getAI_GS_CULTURE_RATIO_MULTIPLIER())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1960
	mov	DWORD PTR $T227441[ebp], edx
	mov	eax, DWORD PTR _iRatio$[ebp]
	cmp	eax, DWORD PTR $T227441[ebp]
	jle	SHORT $LN7@GetGuessOt@2

; 1138 : 		{
; 1139 : 			iCulturePriority += GC.getAI_GS_CULTURE_RATIO_MULTIPLIER();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1960
	mov	DWORD PTR $T227445[ebp], ecx
	mov	edx, DWORD PTR _iCulturePriority$[ebp]
	add	edx, DWORD PTR $T227445[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], edx
	jmp	SHORT $LN6@GetGuessOt@2
$LN7@GetGuessOt@2:

; 1140 : 		}
; 1141 : 		else if (iRatio < -GC.getAI_GS_CULTURE_RATIO_MULTIPLIER())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1960
	mov	DWORD PTR $T227449[ebp], eax
	mov	ecx, DWORD PTR $T227449[ebp]
	neg	ecx
	cmp	DWORD PTR _iRatio$[ebp], ecx
	jge	SHORT $LN6@GetGuessOt@2

; 1142 : 		{
; 1143 : 			iCulturePriority += -GC.getAI_GS_CULTURE_RATIO_MULTIPLIER();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1960
	mov	DWORD PTR $T227453[ebp], edx
	mov	eax, DWORD PTR $T227453[ebp]
	neg	eax
	add	eax, DWORD PTR _iCulturePriority$[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], eax
$LN6@GetGuessOt@2:

; 1144 : 		}
; 1145 : 		iCulturePriority += iRatio;

	mov	ecx, DWORD PTR _iCulturePriority$[ebp]
	add	ecx, DWORD PTR _iRatio$[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], ecx
$LN8@GetGuessOt@2:

; 1146 : 	}
; 1147 : 
; 1148 : 	// Compare their Tourism to the world average; Possible range is 75 to -75
; 1149 : 	if(iWorldTourismAverage > 0)

	cmp	DWORD PTR _iWorldTourismAverage$[ebp], 0
	jle	$LN4@GetGuessOt@2

; 1150 : 	{
; 1151 : 		iRatio = (GET_PLAYER(ePlayer).GetCulture()->GetTourism() - iWorldTourismAverage) * /*75*/ GC.getAI_GS_TOURISM_RATIO_MULTIPLIER() / iWorldTourismAverage;

	mov	edx, DWORD PTR _ePlayer$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227457[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1964
	mov	DWORD PTR $T227461[ebp], eax
	mov	ecx, DWORD PTR $T227457[ebp]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetTourism@CvPlayerCulture@@QAEHXZ	; CvPlayerCulture::GetTourism
	sub	eax, DWORD PTR _iWorldTourismAverage$[ebp]
	imul	eax, DWORD PTR $T227461[ebp]
	cdq
	idiv	DWORD PTR _iWorldTourismAverage$[ebp]
	mov	DWORD PTR _iRatio$[ebp], eax

; 1152 : 		if (iRatio > GC.getAI_GS_TOURISM_RATIO_MULTIPLIER())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1964
	mov	DWORD PTR $T227465[ebp], ecx
	mov	edx, DWORD PTR _iRatio$[ebp]
	cmp	edx, DWORD PTR $T227465[ebp]
	jle	SHORT $LN3@GetGuessOt@2

; 1153 : 		{
; 1154 : 			iCulturePriority += GC.getAI_GS_TOURISM_RATIO_MULTIPLIER();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1964
	mov	DWORD PTR $T227469[ebp], eax
	mov	ecx, DWORD PTR _iCulturePriority$[ebp]
	add	ecx, DWORD PTR $T227469[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], ecx
	jmp	SHORT $LN2@GetGuessOt@2
$LN3@GetGuessOt@2:

; 1155 : 		}
; 1156 : 		else if (iRatio < -GC.getAI_GS_TOURISM_RATIO_MULTIPLIER())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1964
	mov	DWORD PTR $T227473[ebp], edx
	mov	eax, DWORD PTR $T227473[ebp]
	neg	eax
	cmp	DWORD PTR _iRatio$[ebp], eax
	jge	SHORT $LN2@GetGuessOt@2

; 1157 : 		{
; 1158 : 			iCulturePriority += -GC.getAI_GS_TOURISM_RATIO_MULTIPLIER();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1964
	mov	DWORD PTR $T227477[ebp], ecx
	mov	edx, DWORD PTR $T227477[ebp]
	neg	edx
	add	edx, DWORD PTR _iCulturePriority$[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], edx
$LN2@GetGuessOt@2:

; 1159 : 		}
; 1160 : 		iCulturePriority += iRatio;	}

	mov	eax, DWORD PTR _iCulturePriority$[ebp]
	add	eax, DWORD PTR _iRatio$[ebp]
	mov	DWORD PTR _iCulturePriority$[ebp], eax
$LN4@GetGuessOt@2:

; 1161 : 
; 1162 : 	return iCulturePriority;

	mov	eax, DWORD PTR _iCulturePriority$[ebp]
$LN10@GetGuessOt@2:

; 1163 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetGuessOtherPlayerCulturePriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@HH@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerCulturePriority
_TEXT	ENDS
EXTRN	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsFriends
EXTRN	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsAllies
; Function compile flags: /Odtp
;	COMDAT ?GetGuessOtherPlayerUnitedNationsPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv169 = -68						; size = 4
_this$ = -64						; size = 4
$T227518 = -60						; size = 4
$T227511 = -56						; size = 4
$T227505 = -52						; size = 4
$T227501 = -48						; size = 4
$T227497 = -44						; size = 4
$T227493 = -37						; size = 1
$T227484 = -36						; size = 4
$T227480 = -32						; size = 4
_eLoopPlayer$224420 = -28				; size = 4
_iPlayerLoop$224416 = -24				; size = 4
_iPriority$ = -20					; size = 4
_eVictory$ = -16					; size = 4
_iTheirCityStateFriends$ = -12				; size = 4
_iTheirCityStateAllies$ = -8				; size = 4
_iCityStatesAlive$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?GetGuessOtherPlayerUnitedNationsPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerUnitedNationsPriority, COMDAT
; _this$ = ecx

; 1167 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1168 : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_DIPLOMATIC", true);

	push	1
	push	OFFSET ??_C@_0BD@KCIFPIPP@VICTORY_DIPLOMATIC?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 1169 : 
; 1170 : 	// If UN Victory isn't even available then don't bother with anything
; 1171 : 	if(eVictory == NO_VICTORY)

	cmp	DWORD PTR _eVictory$[ebp], -1
	jne	SHORT $LN8@GetGuessOt@3

; 1172 : 	{
; 1173 : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN9@GetGuessOt@3
$LN8@GetGuessOt@3:

; 1174 : 	}
; 1175 : 
; 1176 : 	int iTheirCityStateAllies = 0;

	mov	DWORD PTR _iTheirCityStateAllies$[ebp], 0

; 1177 : 	int iTheirCityStateFriends = 0;

	mov	DWORD PTR _iTheirCityStateFriends$[ebp], 0

; 1178 : 	int iCityStatesAlive = 0;

	mov	DWORD PTR _iCityStatesAlive$[ebp], 0

; 1179 : 	for(int iPlayerLoop = 0; iPlayerLoop < MAX_CIV_PLAYERS; iPlayerLoop++)

	mov	DWORD PTR _iPlayerLoop$224416[ebp], 0
	jmp	SHORT $LN7@GetGuessOt@3
$LN6@GetGuessOt@3:
	mov	eax, DWORD PTR _iPlayerLoop$224416[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlayerLoop$224416[ebp], eax
$LN7@GetGuessOt@3:
	cmp	DWORD PTR _iPlayerLoop$224416[ebp], 63	; 0000003fH
	jge	$LN5@GetGuessOt@3

; 1180 : 	{
; 1181 : 		PlayerTypes eLoopPlayer = (PlayerTypes) iPlayerLoop;

	mov	ecx, DWORD PTR _iPlayerLoop$224416[ebp]
	mov	DWORD PTR _eLoopPlayer$224420[ebp], ecx

; 1182 : 
; 1183 : 		if (eLoopPlayer != ePlayer && GET_PLAYER(eLoopPlayer).isAlive() && GET_PLAYER(eLoopPlayer).isMinorCiv())

	mov	edx, DWORD PTR _eLoopPlayer$224420[ebp]
	cmp	edx, DWORD PTR _ePlayer$[ebp]
	je	$LN4@GetGuessOt@3
	mov	eax, DWORD PTR _eLoopPlayer$224420[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227484[ebp], eax
	mov	ecx, DWORD PTR $T227484[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T227493[ebp], dl
	movzx	eax, BYTE PTR $T227493[ebp]
	test	eax, eax
	je	$LN4@GetGuessOt@3
	mov	ecx, DWORD PTR _eLoopPlayer$224420[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227497[ebp], ecx
	mov	ecx, DWORD PTR $T227497[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@GetGuessOt@3

; 1184 : 		{
; 1185 : 			iCityStatesAlive++;

	mov	eax, DWORD PTR _iCityStatesAlive$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCityStatesAlive$[ebp], eax

; 1186 : 			if (GET_PLAYER(eLoopPlayer).GetMinorCivAI()->IsAllies(ePlayer))

	mov	ecx, DWORD PTR _eLoopPlayer$224420[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227501[ebp], ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227501[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetGuessOt@3

; 1187 : 			{
; 1188 : 				iTheirCityStateAllies++;

	mov	ecx, DWORD PTR _iTheirCityStateAllies$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iTheirCityStateAllies$[ebp], ecx
	jmp	SHORT $LN4@GetGuessOt@3
$LN3@GetGuessOt@3:

; 1189 : 			}
; 1190 : 			else if (GET_PLAYER(eLoopPlayer).GetMinorCivAI()->IsFriends(ePlayer))

	mov	edx, DWORD PTR _eLoopPlayer$224420[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227505[ebp], edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227505[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsFriends
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetGuessOt@3

; 1191 : 			{
; 1192 : 				iTheirCityStateFriends++;

	mov	edx, DWORD PTR _iTheirCityStateFriends$[ebp]
	add	edx, 1
	mov	DWORD PTR _iTheirCityStateFriends$[ebp], edx
$LN4@GetGuessOt@3:

; 1193 : 			}
; 1194 : 		}
; 1195 : 	}

	jmp	$LN6@GetGuessOt@3
$LN5@GetGuessOt@3:

; 1196 : 	iCityStatesAlive = MAX(iCityStatesAlive, 1);

	mov	DWORD PTR $T227480[ebp], 1
	mov	eax, DWORD PTR _iCityStatesAlive$[ebp]
	cmp	eax, DWORD PTR $T227480[ebp]
	jge	SHORT $LN25@GetGuessOt@3
	lea	ecx, DWORD PTR $T227480[ebp]
	mov	DWORD PTR tv169[ebp], ecx
	jmp	SHORT $LN26@GetGuessOt@3
$LN25@GetGuessOt@3:
	lea	edx, DWORD PTR _iCityStatesAlive$[ebp]
	mov	DWORD PTR tv169[ebp], edx
$LN26@GetGuessOt@3:
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR $T227511[ebp], eax
	mov	ecx, DWORD PTR $T227511[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _iCityStatesAlive$[ebp], edx

; 1197 : 
; 1198 : 	int iPriority = iTheirCityStateAllies + (iTheirCityStateFriends / 3);

	mov	eax, DWORD PTR _iTheirCityStateFriends$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	add	eax, DWORD PTR _iTheirCityStateAllies$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 1199 : 	iPriority = iPriority * GC.getAI_GS_UN_SECURED_VOTE_MOD();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1984
	mov	DWORD PTR $T227518[ebp], edx
	mov	eax, DWORD PTR _iPriority$[ebp]
	imul	eax, DWORD PTR $T227518[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 1200 : 	iPriority = iPriority / iCityStatesAlive;

	mov	eax, DWORD PTR _iPriority$[ebp]
	cdq
	idiv	DWORD PTR _iCityStatesAlive$[ebp]
	mov	DWORD PTR _iPriority$[ebp], eax

; 1201 : 
; 1202 : 	return iPriority;

	mov	eax, DWORD PTR _iPriority$[ebp]
$LN9@GetGuessOt@3:

; 1203 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGuessOtherPlayerUnitedNationsPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerUnitedNationsPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetGuessOtherPlayerSpaceshipPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T227548 = -40						; size = 4
$T227544 = -36						; size = 4
$T227540 = -32						; size = 4
$T227536 = -28						; size = 4
$T227524 = -24						; size = 4
_iSSPriority$ = -20					; size = 4
_eVictory$ = -16					; size = 4
_iNumTechs$ = -12					; size = 4
_eTeam$ = -8						; size = 4
_eApolloProgram$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
_iWorldNumTechsAverage$ = 12				; size = 4
?GetGuessOtherPlayerSpaceshipPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z PROC ; CvGrandStrategyAI::GetGuessOtherPlayerSpaceshipPriority, COMDAT
; _this$ = ecx

; 1207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1208 : 	VictoryTypes eVictory = (VictoryTypes) GC.getInfoTypeForString("VICTORY_SPACE_RACE", true);

	push	1
	push	OFFSET ??_C@_0BD@GNEMFDHK@VICTORY_SPACE_RACE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eVictory$[ebp], eax

; 1209 : 
; 1210 : 	// If SS Victory isn't even available then don't bother with anything
; 1211 : 	if(eVictory == NO_VICTORY)

	cmp	DWORD PTR _eVictory$[ebp], -1
	jne	SHORT $LN4@GetGuessOt@4

; 1212 : 	{
; 1213 : 		return -100;

	mov	eax, -100				; ffffff9cH
	jmp	$LN5@GetGuessOt@4
$LN4@GetGuessOt@4:

; 1214 : 	}
; 1215 : 
; 1216 : 	TeamTypes eTeam = GET_PLAYER(ePlayer).getTeam();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227524[ebp], eax
	mov	ecx, DWORD PTR $T227524[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$[ebp], eax

; 1217 : 
; 1218 : 	// If the player has the Apollo Program we're pretty sure he's going for the SS
; 1219 : 	ProjectTypes eApolloProgram = (ProjectTypes) GC.getInfoTypeForString("PROJECT_APOLLO_PROGRAM", true);

	push	1
	push	OFFSET ??_C@_0BH@HJPDENF@PROJECT_APOLLO_PROGRAM?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eApolloProgram$[ebp], eax

; 1220 : 	if(eApolloProgram != NO_PROJECT)

	cmp	DWORD PTR _eApolloProgram$[ebp], -1
	je	SHORT $LN3@GetGuessOt@4

; 1221 : 	{
; 1222 : 		if(GET_TEAM(eTeam).getProjectCount(eApolloProgram) > 0)

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T227536[ebp], eax
	mov	ecx, DWORD PTR _eApolloProgram$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227536[ebp]
	call	?getProjectCount@CvTeam@@QBEHW4ProjectTypes@@@Z ; CvTeam::getProjectCount
	test	eax, eax
	jle	SHORT $LN3@GetGuessOt@4

; 1223 : 		{
; 1224 : 			return /*150*/ GC.getAI_GS_SS_HAS_APOLLO_PROGRAM();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1988
	mov	DWORD PTR $T227540[ebp], edx
	mov	eax, DWORD PTR $T227540[ebp]
	jmp	SHORT $LN5@GetGuessOt@4
$LN3@GetGuessOt@4:

; 1225 : 		}
; 1226 : 	}
; 1227 : 
; 1228 : 	int iNumTechs = GET_TEAM(eTeam).GetTeamTechs()->GetNumTechsKnown();

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T227544[ebp], eax
	mov	ecx, DWORD PTR $T227544[ebp]
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?GetNumTechsKnown@CvTeamTechs@@QBEHXZ	; CvTeamTechs::GetNumTechsKnown
	mov	DWORD PTR _iNumTechs$[ebp], eax

; 1229 : 
; 1230 : 	// Don't divide by zero, okay?
; 1231 : 	if(iWorldNumTechsAverage == 0)

	cmp	DWORD PTR _iWorldNumTechsAverage$[ebp], 0
	jne	SHORT $LN1@GetGuessOt@4

; 1232 : 		iWorldNumTechsAverage = 1;

	mov	DWORD PTR _iWorldNumTechsAverage$[ebp], 1
$LN1@GetGuessOt@4:

; 1233 : 
; 1234 : 	int iSSPriority = (iNumTechs - iWorldNumTechsAverage) * /*300*/ GC.getAI_GS_SS_TECH_PROGRESS_MOD() / iWorldNumTechsAverage;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1992
	mov	DWORD PTR $T227548[ebp], ecx
	mov	eax, DWORD PTR _iNumTechs$[ebp]
	sub	eax, DWORD PTR _iWorldNumTechsAverage$[ebp]
	imul	eax, DWORD PTR $T227548[ebp]
	cdq
	idiv	DWORD PTR _iWorldNumTechsAverage$[ebp]
	mov	DWORD PTR _iSSPriority$[ebp], eax

; 1235 : 
; 1236 : 	return iSSPriority;

	mov	eax, DWORD PTR _iSSPriority$[ebp]
$LN5@GetGuessOt@4:

; 1237 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetGuessOtherPlayerSpaceshipPriority@CvGrandStrategyAI@@QAEHW4PlayerTypes@@H@Z ENDP ; CvGrandStrategyAI::GetGuessOtherPlayerSpaceshipPriority
_TEXT	ENDS
PUBLIC	??_C@_0L@HGIKFMBI@?$CFs?0?5?$CFd?0?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0P@KLFHPJPD@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0N@PHCDDCGL@Unknown?5Type?$AA@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	??_C@_0BI@MEIIAKNJ@GrandStrategyAI_Log?4csv?$AA@ ; `string'
PUBLIC	??_C@_04EBGNMJBD@?4csv?$AA@			; `string'
PUBLIC	??_C@_0BF@PPDELHNB@GrandStrategyAI_Log_?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z:PROC ; CvGlobals::getAIGrandStrategyInfo
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumAIGrandStrategyInfos
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0L@HGIKFMBI@?$CFs?0?5?$CFd?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0L@HGIKFMBI@?$CFs?0?5?$CFd?0?5?$CFd?$AA@ DB '%s, %d, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLFHPJPD@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@KLFHPJPD@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?0?5?$CFd?$AA@ DB '*** %s, '
	DB	'%d, %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PHCDDCGL@Unknown?5Type?$AA@
CONST	SEGMENT
??_C@_0N@PHCDDCGL@Unknown?5Type?$AA@ DB 'Unknown Type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MEIIAKNJ@GrandStrategyAI_Log?4csv?$AA@
CONST	SEGMENT
??_C@_0BI@MEIIAKNJ@GrandStrategyAI_Log?4csv?$AA@ DB 'GrandStrategyAI_Log.'
	DB	'csv', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBGNMJBD@?4csv?$AA@
CONST	SEGMENT
??_C@_04EBGNMJBD@?4csv?$AA@ DB '.csv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PPDELHNB@GrandStrategyAI_Log_?$AA@
CONST	SEGMENT
??_C@_0BF@PPDELHNB@GrandStrategyAI_Log_?$AA@ DB 'GrandStrategyAI_Log_', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$8
	DD	05H
	DD	FLAT:__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$9
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z
_TEXT	SEGMENT
tv297 = -384						; size = 4
tv200 = -380						; size = 4
tv267 = -376						; size = 4
tv308 = -372						; size = 4
tv154 = -368						; size = 4
tv319 = -364						; size = 4
tv263 = -360						; size = 4
tv330 = -356						; size = 4
_this$ = -352						; size = 4
$T227633 = -348						; size = 4
$T227629 = -344						; size = 4
$T227625 = -340						; size = 4
$T227621 = -336						; size = 4
$T227614 = -332						; size = 4
$T227610 = -328						; size = 4
$T227601 = -324						; size = 4
$T227597 = -320						; size = 4
$T227557 = -316						; size = 28
$T227554 = -288						; size = 28
$T227553 = -260						; size = 28
$T227552 = -232						; size = 28
_szAIGrandStrategyType$224474 = -204			; size = 4
_pEntry$224473 = -200					; size = 4
_iGrandStrategyLoop$224465 = -196			; size = 4
_strOutBuf$224450 = -192				; size = 28
_playerName$224453 = -164				; size = 28
_eGrandStrategy$224464 = -136				; size = 4
_strDesc$224454 = -132					; size = 28
_strLogName$224455 = -104				; size = 28
_pLog$224463 = -76					; size = 4
_strTemp$224452 = -72					; size = 28
_strBaseString$224451 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_vModifiedGrandStrategyPriorities$ = 8			; size = 4
?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z PROC ; CvGrandStrategyAI::LogGrandStrategies, COMDAT
; _this$ = ecx

; 1244 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1245 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN9@LogGrandSt
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN9@LogGrandSt

; 1246 : 	{
; 1247 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$224450[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1248 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$224451[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1249 : 		CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$224452[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1250 : 		CvString playerName;

	lea	ecx, DWORD PTR _playerName$224453[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1251 : 		CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$224454[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1252 : 		CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 1253 : 
; 1254 : 		// Find the name of this civ and city
; 1255 : 		playerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T227597[ebp], eax
	cmp	DWORD PTR $T227597[ebp], 0
	je	SHORT $LN42@LogGrandSt
	mov	edx, DWORD PTR $T227597[ebp]
	push	edx
	lea	ecx, DWORD PTR _playerName$224453[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN43@LogGrandSt
$LN42@LogGrandSt:
	lea	ecx, DWORD PTR _playerName$224453[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN43@LogGrandSt:

; 1256 : 
; 1257 : 		// Open the log file
; 1258 : 		if(GC.getPlayerAndCityAILogSplit())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	movzx	eax, al
	test	eax, eax
	je	$LN7@LogGrandSt

; 1259 : 		{
; 1260 : 			strLogName = "GrandStrategyAI_Log_" + playerName + ".csv";

	lea	ecx, DWORD PTR _playerName$224453[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@PPDELHNB@GrandStrategyAI_Log_?$AA@
	lea	edx, DWORD PTR $T227552[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv330[ebp], eax
	mov	eax, DWORD PTR tv330[ebp]
	mov	DWORD PTR tv263[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	push	OFFSET ??_C@_04EBGNMJBD@?4csv?$AA@
	mov	ecx, DWORD PTR tv263[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227553[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv319[ebp], eax
	mov	eax, DWORD PTR tv319[ebp]
	mov	DWORD PTR $T227601[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T227601[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227553[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T227552[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1261 : 		}
; 1262 : 		else

	jmp	SHORT $LN6@LogGrandSt
$LN7@LogGrandSt:

; 1263 : 		{
; 1264 : 			strLogName = "GrandStrategyAI_Log.csv";

	mov	ecx, OFFSET ??_C@_0BI@MEIIAKNJ@GrandStrategyAI_Log?4csv?$AA@
	test	ecx, ecx
	je	SHORT $LN48@LogGrandSt
	push	OFFSET ??_C@_0BI@MEIIAKNJ@GrandStrategyAI_Log?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN6@LogGrandSt
$LN48@LogGrandSt:
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN6@LogGrandSt:

; 1265 : 		}
; 1266 : 
; 1267 : 		FILogFile* pLog;
; 1268 : 		pLog = LOGFILEMGR.GetLog(strLogName, FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv154[ebp], eax
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227610[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T227610[ebp]
	push	edx
	mov	eax, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$224463[ebp], eax

; 1269 : 
; 1270 : 		AIGrandStrategyTypes eGrandStrategy;
; 1271 : 
; 1272 : 		// Loop through Grand Strategies
; 1273 : #ifdef AUI_WARNING_FIXES
; 1274 : 		for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 1275 : #else
; 1276 : 		for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	DWORD PTR _iGrandStrategyLoop$224465[ebp], 0
	jmp	SHORT $LN5@LogGrandSt
$LN4@LogGrandSt:
	mov	ecx, DWORD PTR _iGrandStrategyLoop$224465[ebp]
	add	ecx, 1
	mov	DWORD PTR _iGrandStrategyLoop$224465[ebp], ecx
$LN5@LogGrandSt:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	DWORD PTR _iGrandStrategyLoop$224465[ebp], eax
	jge	$LN3@LogGrandSt

; 1277 : #endif
; 1278 : 		{
; 1279 : 			// Get the leading info for this line
; 1280 : 			strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227614[ebp], edx
	mov	ecx, DWORD PTR $T227614[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	eax, DWORD PTR _strBaseString$224451[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1281 : 			strBaseString += playerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _playerName$224453[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227554[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv308[ebp], eax
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR tv267[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR tv267[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$224451[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T227554[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1282 : 
; 1283 : 			eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategyLoop;

	mov	edx, DWORD PTR _iGrandStrategyLoop$224465[ebp]
	mov	DWORD PTR _eGrandStrategy$224464[ebp], edx

; 1284 : 
; 1285 : 			// GrandStrategy Info
; 1286 : 			CvAIGrandStrategyXMLEntry* pEntry = GC.getAIGrandStrategyInfo(eGrandStrategy);

	mov	eax, DWORD PTR _eGrandStrategy$224464[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	DWORD PTR _pEntry$224473[ebp], eax

; 1287 : 			const char* szAIGrandStrategyType = (pEntry != NULL)? pEntry->GetType() : "Unknown Type";

	cmp	DWORD PTR _pEntry$224473[ebp], 0
	je	SHORT $LN11@LogGrandSt
	mov	ecx, DWORD PTR _pEntry$224473[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN12@LogGrandSt
$LN11@LogGrandSt:
	mov	DWORD PTR tv200[ebp], OFFSET ??_C@_0N@PHCDDCGL@Unknown?5Type?$AA@
$LN12@LogGrandSt:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR _szAIGrandStrategyType$224474[ebp], ecx

; 1288 : 
; 1289 : 			if(GetActiveGrandStrategy() == eGrandStrategy)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	eax, DWORD PTR _eGrandStrategy$224464[ebp]
	jne	SHORT $LN2@LogGrandSt

; 1290 : 			{
; 1291 : 				strTemp.Format("*** %s, %d, %d", szAIGrandStrategyType, GetGrandStrategyPriority(eGrandStrategy), vModifiedGrandStrategyPriorities[eGrandStrategy]);

	mov	edx, DWORD PTR _vModifiedGrandStrategyPriorities$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eGrandStrategy$224464[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T227621[ebp], edx
	mov	eax, DWORD PTR $T227621[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _eGrandStrategy$224464[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetGrandStrategyPriority
	push	eax
	mov	eax, DWORD PTR _szAIGrandStrategyType$224474[ebp]
	push	eax
	push	OFFSET ??_C@_0P@KLFHPJPD@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?0?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strTemp$224452[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 20					; 00000014H

; 1292 : 			}
; 1293 : 			else

	jmp	SHORT $LN1@LogGrandSt
$LN2@LogGrandSt:

; 1294 : 			{
; 1295 : 				strTemp.Format("%s, %d, %d", szAIGrandStrategyType, GetGrandStrategyPriority(eGrandStrategy), vModifiedGrandStrategyPriorities[eGrandStrategy]);

	mov	edx, DWORD PTR _vModifiedGrandStrategyPriorities$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _eGrandStrategy$224464[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T227625[ebp], edx
	mov	eax, DWORD PTR $T227625[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _eGrandStrategy$224464[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGrandStrategyPriority@CvGrandStrategyAI@@QBEHW4AIGrandStrategyTypes@@@Z ; CvGrandStrategyAI::GetGrandStrategyPriority
	push	eax
	mov	eax, DWORD PTR _szAIGrandStrategyType$224474[ebp]
	push	eax
	push	OFFSET ??_C@_0L@HGIKFMBI@?$CFs?0?5?$CFd?0?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strTemp$224452[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 20					; 00000014H
$LN1@LogGrandSt:

; 1296 : 			}
; 1297 : 			strOutBuf = strBaseString + strTemp;

	lea	edx, DWORD PTR _strTemp$224452[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$224451[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227557[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv297[ebp], eax
	mov	edx, DWORD PTR tv297[ebp]
	mov	DWORD PTR $T227629[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T227629[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$224450[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T227557[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1298 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$224450[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227633[ebp], eax
	mov	eax, DWORD PTR $T227633[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$224463[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$224463[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 1299 : 		}

	jmp	$LN4@LogGrandSt
$LN3@LogGrandSt:

; 1300 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strDesc$224454[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$224453[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$224452[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$224451[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$224450[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN9@LogGrandSt:

; 1301 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$224450[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$224451[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$2:
	lea	ecx, DWORD PTR _strTemp$224452[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$3:
	lea	ecx, DWORD PTR _playerName$224453[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$4:
	lea	ecx, DWORD PTR _strDesc$224454[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$5:
	lea	ecx, DWORD PTR _strLogName$224455[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$6:
	lea	ecx, DWORD PTR $T227552[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$7:
	lea	ecx, DWORD PTR $T227553[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$8:
	lea	ecx, DWORD PTR $T227554[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z$9:
	lea	ecx, DWORD PTR $T227557[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-376]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogGrandStrategies@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@@Z ENDP ; CvGrandStrategyAI::LogGrandStrategies
PUBLIC	??_C@_0BG@JBNKPMIB@NO_GRAND_STRATEGY?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_03MAMPKPPK@XXX?$AA@			; `string'
PUBLIC	??_C@_06IMOMGBNG@Unsure?$AA@			; `string'
PUBLIC	??_C@_06JDOJNAII@Likely?$AA@			; `string'
PUBLIC	??_C@_08JCJOPJJC@Positive?$AA@			; `string'
PUBLIC	??_C@_06OJLEAOEG@?$CFs?0?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_0L@MNLKEOPF@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BB@BGBNCECB@Unknown?5Strategy?$AA@	; `string'
PUBLIC	??_C@_0BO@BIGCHNFG@GrandStrategyAI_Guess_Log?4csv?$AA@ ; `string'
PUBLIC	??_C@_0BL@IHHDDHNI@GrandStrategyAI_Guess_Log_?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BG@JBNKPMIB@NO_GRAND_STRATEGY?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BG@JBNKPMIB@NO_GRAND_STRATEGY?0?5?$CFd?$AA@ DB 'NO_GRAND_STRATEGY,'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03MAMPKPPK@XXX?$AA@
CONST	SEGMENT
??_C@_03MAMPKPPK@XXX?$AA@ DB 'XXX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMOMGBNG@Unsure?$AA@
CONST	SEGMENT
??_C@_06IMOMGBNG@Unsure?$AA@ DB 'Unsure', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDOJNAII@Likely?$AA@
CONST	SEGMENT
??_C@_06JDOJNAII@Likely?$AA@ DB 'Likely', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCJOPJJC@Positive?$AA@
CONST	SEGMENT
??_C@_08JCJOPJJC@Positive?$AA@ DB 'Positive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJLEAOEG@?$CFs?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06OJLEAOEG@?$CFs?0?5?$CFd?$AA@ DB '%s, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNLKEOPF@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@MNLKEOPF@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?$AA@ DB '*** %s, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BGBNCECB@Unknown?5Strategy?$AA@
CONST	SEGMENT
??_C@_0BB@BGBNCECB@Unknown?5Strategy?$AA@ DB 'Unknown Strategy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BIGCHNFG@GrandStrategyAI_Guess_Log?4csv?$AA@
CONST	SEGMENT
??_C@_0BO@BIGCHNFG@GrandStrategyAI_Guess_Log?4csv?$AA@ DB 'GrandStrategyA'
	DB	'I_Guess_Log.csv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IHHDDHNI@GrandStrategyAI_Guess_Log_?$AA@
CONST	SEGMENT
??_C@_0BL@IHHDDHNI@GrandStrategyAI_Guess_Log_?$AA@ DB 'GrandStrategyAI_Gu'
	DB	'ess_Log_', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$13
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$14
	DD	06H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$17
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgrandstrategyai.cpp
xdata$x	ENDS
;	COMDAT ?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
tv645 = -692						; size = 4
tv414 = -688						; size = 4
tv644 = -684						; size = 4
tv412 = -680						; size = 4
tv643 = -676						; size = 4
tv410 = -672						; size = 4
tv74 = -668						; size = 4
tv408 = -664						; size = 4
tv422 = -660						; size = 4
tv271 = -656						; size = 4
tv433 = -652						; size = 4
tv404 = -648						; size = 4
tv444 = -644						; size = 4
tv402 = -640						; size = 4
tv455 = -636						; size = 4
tv210 = -632						; size = 4
tv400 = -628						; size = 4
tv466 = -624						; size = 4
tv157 = -620						; size = 4
tv477 = -616						; size = 4
tv396 = -612						; size = 4
tv488 = -608						; size = 4
_this$ = -604						; size = 4
$T227798 = -600						; size = 4
$T227794 = -596						; size = 4
$T227790 = -592						; size = 4
$T227784 = -588						; size = 4
$T227780 = -584						; size = 4
$T227776 = -580						; size = 4
$T227772 = -576						; size = 4
$T227768 = -572						; size = 4
$T227764 = -568						; size = 4
$T227758 = -564						; size = 4
$T227748 = -560						; size = 4
$T227744 = -556						; size = 4
$T227735 = -552						; size = 4
$T227731 = -548						; size = 4
$T227679 = -544						; size = 28
$T227678 = -516						; size = 28
$T227677 = -488						; size = 28
$T227676 = -460						; size = 28
$T227675 = -432						; size = 28
$T227674 = -404						; size = 28
$T227673 = -376						; size = 28
$T227672 = -348						; size = 28
$T227669 = -320						; size = 28
$T227668 = -292						; size = 28
$T227667 = -264						; size = 28
_pEntry$224510 = -236					; size = 4
_szGrandStrategyType$224511 = -232			; size = 4
_iGrandStrategyLoop$224504 = -228			; size = 4
_strOutBuf$224488 = -224				; size = 28
_playerName$224491 = -196				; size = 28
_iPriority$224503 = -168				; size = 4
_eGrandStrategy$224502 = -164				; size = 4
_strDesc$224493 = -160					; size = 28
_strLogName$224494 = -132				; size = 28
_pLog$224501 = -104					; size = 4
_otherPlayerName$224492 = -100				; size = 28
_strTemp$224490 = -72					; size = 28
_strBaseString$224489 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_vGrandStrategyPriorities$ = 8				; size = 4
_ePlayer$ = 12						; size = 4
?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z PROC ; CvGrandStrategyAI::LogGuessOtherPlayerGrandStrategy, COMDAT
; _this$ = ecx

; 1305 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1306 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN16@LogGuessOt
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN16@LogGuessOt

; 1307 : 	{
; 1308 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1309 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1310 : 		CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1311 : 		CvString playerName;

	lea	ecx, DWORD PTR _playerName$224491[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1312 : 		CvString otherPlayerName;

	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1313 : 		CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$224493[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 1314 : 		CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 1315 : 
; 1316 : 		// Find the name of this civ and city
; 1317 : 		playerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvGrandStrategyAI@@QAEPAVCvPlayer@@XZ ; CvGrandStrategyAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T227731[ebp], eax
	cmp	DWORD PTR $T227731[ebp], 0
	je	SHORT $LN60@LogGuessOt
	mov	edx, DWORD PTR $T227731[ebp]
	push	edx
	lea	ecx, DWORD PTR _playerName$224491[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN61@LogGuessOt
$LN60@LogGuessOt:
	lea	ecx, DWORD PTR _playerName$224491[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN61@LogGuessOt:

; 1318 : 
; 1319 : 		// Open the log file
; 1320 : 		if(GC.getPlayerAndCityAILogSplit())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	movzx	eax, al
	test	eax, eax
	je	$LN14@LogGuessOt

; 1321 : 		{
; 1322 : 			strLogName = "GrandStrategyAI_Guess_Log_" + playerName + ".csv";

	lea	ecx, DWORD PTR _playerName$224491[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@IHHDDHNI@GrandStrategyAI_Guess_Log_?$AA@
	lea	edx, DWORD PTR $T227667[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv488[ebp], eax
	mov	eax, DWORD PTR tv488[ebp]
	mov	DWORD PTR tv396[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	OFFSET ??_C@_04EBGNMJBD@?4csv?$AA@
	mov	ecx, DWORD PTR tv396[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227668[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv477[ebp], eax
	mov	eax, DWORD PTR tv477[ebp]
	mov	DWORD PTR $T227735[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T227735[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T227668[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227667[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1323 : 		}
; 1324 : 		else

	jmp	SHORT $LN13@LogGuessOt
$LN14@LogGuessOt:

; 1325 : 		{
; 1326 : 			strLogName = "GrandStrategyAI_Guess_Log.csv";

	mov	ecx, OFFSET ??_C@_0BO@BIGCHNFG@GrandStrategyAI_Guess_Log?4csv?$AA@
	test	ecx, ecx
	je	SHORT $LN66@LogGuessOt
	push	OFFSET ??_C@_0BO@BIGCHNFG@GrandStrategyAI_Guess_Log?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN13@LogGuessOt
$LN66@LogGuessOt:
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN13@LogGuessOt:

; 1327 : 		}
; 1328 : 
; 1329 : 		FILogFile* pLog;
; 1330 : 		pLog = LOGFILEMGR.GetLog(strLogName, FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv157[ebp], eax
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227744[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T227744[ebp]
	push	edx
	mov	eax, DWORD PTR tv157[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv157[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$224501[ebp], eax

; 1331 : 
; 1332 : 		AIGrandStrategyTypes eGrandStrategy;
; 1333 : 		int iPriority;
; 1334 : 
; 1335 : 		// Loop through Grand Strategies
; 1336 : #ifdef AUI_WARNING_FIXES
; 1337 : 		for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 1338 : #else
; 1339 : 		for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	DWORD PTR _iGrandStrategyLoop$224504[ebp], 0
	jmp	SHORT $LN12@LogGuessOt
$LN11@LogGuessOt:
	mov	ecx, DWORD PTR _iGrandStrategyLoop$224504[ebp]
	add	ecx, 1
	mov	DWORD PTR _iGrandStrategyLoop$224504[ebp], ecx
$LN12@LogGuessOt:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	DWORD PTR _iGrandStrategyLoop$224504[ebp], eax
	jge	$LN10@LogGuessOt

; 1340 : #endif
; 1341 : 		{
; 1342 : 			// Get the leading info for this line
; 1343 : 			strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227748[ebp], edx
	mov	ecx, DWORD PTR $T227748[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	eax, DWORD PTR _strBaseString$224489[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1344 : 			strBaseString += playerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	ecx, DWORD PTR _playerName$224491[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227669[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv466[ebp], eax
	mov	eax, DWORD PTR tv466[ebp]
	mov	DWORD PTR tv400[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR tv400[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227669[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1345 : 
; 1346 : 			eGrandStrategy = (AIGrandStrategyTypes) iGrandStrategyLoop;

	mov	edx, DWORD PTR _iGrandStrategyLoop$224504[ebp]
	mov	DWORD PTR _eGrandStrategy$224502[ebp], edx

; 1347 : 			iPriority = vGrandStrategyPriorities[iGrandStrategyLoop];

	mov	eax, DWORD PTR _vGrandStrategyPriorities$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iGrandStrategyLoop$224504[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _iPriority$224503[ebp], eax

; 1348 : 
; 1349 : 			CvAIGrandStrategyXMLEntry* pEntry = GC.getAIGrandStrategyInfo(eGrandStrategy);

	mov	ecx, DWORD PTR _eGrandStrategy$224502[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	DWORD PTR _pEntry$224510[ebp], eax

; 1350 : 			const char* szGrandStrategyType = (pEntry != NULL)? pEntry->GetType() : "Unknown Strategy";

	cmp	DWORD PTR _pEntry$224510[ebp], 0
	je	SHORT $LN18@LogGuessOt
	mov	ecx, DWORD PTR _pEntry$224510[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv210[ebp], eax
	jmp	SHORT $LN19@LogGuessOt
$LN18@LogGuessOt:
	mov	DWORD PTR tv210[ebp], OFFSET ??_C@_0BB@BGBNCECB@Unknown?5Strategy?$AA@
$LN19@LogGuessOt:
	mov	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR _szGrandStrategyType$224511[ebp], edx

; 1351 : 
; 1352 : 			// GrandStrategy Info
; 1353 : 			if(GetActiveGrandStrategy() == eGrandStrategy)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	eax, DWORD PTR _eGrandStrategy$224502[ebp]
	jne	SHORT $LN9@LogGuessOt

; 1354 : 			{
; 1355 : 				strTemp.Format("*** %s, %d", szGrandStrategyType, iPriority);

	mov	eax, DWORD PTR _iPriority$224503[ebp]
	push	eax
	mov	ecx, DWORD PTR _szGrandStrategyType$224511[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@MNLKEOPF@?$CK?$CK?$CK?5?$CFs?0?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTemp$224490[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 1356 : 			}
; 1357 : 			else

	jmp	SHORT $LN8@LogGuessOt
$LN9@LogGuessOt:

; 1358 : 			{
; 1359 : 				strTemp.Format("%s, %d", szGrandStrategyType, iPriority);

	mov	eax, DWORD PTR _iPriority$224503[ebp]
	push	eax
	mov	ecx, DWORD PTR _szGrandStrategyType$224511[ebp]
	push	ecx
	push	OFFSET ??_C@_06OJLEAOEG@?$CFs?0?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTemp$224490[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H
$LN8@LogGuessOt:

; 1360 : 			}
; 1361 : 			otherPlayerName = GET_PLAYER(ePlayer).getCivilizationShortDescription();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227758[ebp], eax
	mov	ecx, DWORD PTR $T227758[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T227764[ebp], eax
	cmp	DWORD PTR $T227764[ebp], 0
	je	SHORT $LN80@LogGuessOt
	mov	ecx, DWORD PTR $T227764[ebp]
	push	ecx
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN81@LogGuessOt
$LN80@LogGuessOt:
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN81@LogGuessOt:

; 1362 : 			strOutBuf = strBaseString + otherPlayerName + ", " + strTemp;

	lea	edx, DWORD PTR _otherPlayerName$224492[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$224489[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227672[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv455[ebp], eax
	mov	edx, DWORD PTR tv455[ebp]
	mov	DWORD PTR tv402[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	eax, DWORD PTR tv402[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227673[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv444[ebp], eax
	mov	edx, DWORD PTR tv444[ebp]
	mov	DWORD PTR tv404[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	eax, DWORD PTR _strTemp$224490[ebp]
	push	eax
	mov	ecx, DWORD PTR tv404[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227674[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv433[ebp], eax
	mov	eax, DWORD PTR tv433[ebp]
	mov	DWORD PTR $T227768[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T227768[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T227674[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T227673[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227672[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1363 : 
; 1364 : 			if(GetGuessOtherPlayerActiveGrandStrategy(ePlayer) == eGrandStrategy)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategy
	cmp	eax, DWORD PTR _eGrandStrategy$224502[ebp]
	jne	$LN7@LogGuessOt

; 1365 : 			{
; 1366 : 				// Confidence in our guess
; 1367 : 				switch(GetGuessOtherPlayerActiveGrandStrategyConfidence(ePlayer))

	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGuessOtherPlayerActiveGrandStrategyConfidence@CvGrandStrategyAI@@QBE?AW4GuessConfidenceTypes@@W4PlayerTypes@@@Z ; CvGrandStrategyAI::GetGuessOtherPlayerActiveGrandStrategyConfidence
	mov	DWORD PTR tv271[ebp], eax
	cmp	DWORD PTR tv271[ebp], 0
	je	SHORT $LN2@LogGuessOt
	cmp	DWORD PTR tv271[ebp], 1
	je	SHORT $LN3@LogGuessOt
	cmp	DWORD PTR tv271[ebp], 2
	je	SHORT $LN4@LogGuessOt
	jmp	SHORT $LN1@LogGuessOt
$LN4@LogGuessOt:

; 1368 : 				{
; 1369 : 				case GUESS_CONFIDENCE_POSITIVE:
; 1370 : 					strTemp.Format("Positive");

	push	OFFSET ??_C@_08JCJOPJJC@Positive?$AA@
	lea	eax, DWORD PTR _strTemp$224490[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 1371 : 					break;

	jmp	SHORT $LN5@LogGuessOt
$LN3@LogGuessOt:

; 1372 : 				case GUESS_CONFIDENCE_LIKELY:
; 1373 : 					strTemp.Format("Likely");

	push	OFFSET ??_C@_06JDOJNAII@Likely?$AA@
	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 1374 : 					break;

	jmp	SHORT $LN5@LogGuessOt
$LN2@LogGuessOt:

; 1375 : 				case GUESS_CONFIDENCE_UNSURE:
; 1376 : 					strTemp.Format("Unsure");

	push	OFFSET ??_C@_06IMOMGBNG@Unsure?$AA@
	lea	edx, DWORD PTR _strTemp$224490[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 1377 : 					break;

	jmp	SHORT $LN5@LogGuessOt
$LN1@LogGuessOt:

; 1378 : 				default:
; 1379 : 					strTemp.Format("XXX");

	push	OFFSET ??_C@_03MAMPKPPK@XXX?$AA@
	lea	eax, DWORD PTR _strTemp$224490[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8
$LN5@LogGuessOt:

; 1380 : 					break;
; 1381 : 				}
; 1382 : 
; 1383 : 				strOutBuf += ", " + strTemp;

	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	push	ecx
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	edx, DWORD PTR $T227675[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv422[ebp], eax
	mov	eax, DWORD PTR tv422[ebp]
	mov	DWORD PTR tv408[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR tv408[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227675[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@LogGuessOt:

; 1384 : 			}
; 1385 : 
; 1386 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227772[ebp], eax
	mov	edx, DWORD PTR $T227772[ebp]
	push	edx
	mov	eax, DWORD PTR _pLog$224501[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pLog$224501[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	add	esp, 8

; 1387 : 		}

	jmp	$LN11@LogGuessOt
$LN10@LogGuessOt:

; 1388 : 
; 1389 : 		// One more entry for NO GRAND STRATEGY
; 1390 : 		// Get the leading info for this line
; 1391 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T227776[ebp], ecx
	mov	ecx, DWORD PTR $T227776[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$224489[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1392 : 		strBaseString += playerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$224491[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227676[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv74[ebp], eax
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv410[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR tv410[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227676[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1393 : 
; 1394 : 		iPriority = vGrandStrategyPriorities[GC.getNumAIGrandStrategyInfos()];

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	mov	DWORD PTR $T227780[ebp], eax
	mov	ecx, DWORD PTR _vGrandStrategyPriorities$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR $T227780[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _iPriority$224503[ebp], ecx

; 1395 : 
; 1396 : 		// GrandStrategy Info
; 1397 : 		strTemp.Format("NO_GRAND_STRATEGY, %d", iPriority);

	mov	edx, DWORD PTR _iPriority$224503[ebp]
	push	edx
	push	OFFSET ??_C@_0BG@JBNKPMIB@NO_GRAND_STRATEGY?0?5?$CFd?$AA@
	lea	eax, DWORD PTR _strTemp$224490[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1398 : 		otherPlayerName = GET_PLAYER(ePlayer).getCivilizationShortDescription();

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T227784[ebp], ecx
	mov	ecx, DWORD PTR $T227784[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T227790[ebp], eax
	cmp	DWORD PTR $T227790[ebp], 0
	je	SHORT $LN94@LogGuessOt
	mov	edx, DWORD PTR $T227790[ebp]
	push	edx
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN95@LogGuessOt
$LN94@LogGuessOt:
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN95@LogGuessOt:

; 1399 : 		strOutBuf = strBaseString + otherPlayerName + ", " + strTemp;

	lea	eax, DWORD PTR _otherPlayerName$224492[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227677[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv643[ebp], eax
	mov	eax, DWORD PTR tv643[ebp]
	mov	DWORD PTR tv412[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv412[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227678[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv644[ebp], eax
	mov	eax, DWORD PTR tv644[ebp]
	mov	DWORD PTR tv414[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	push	ecx
	mov	edx, DWORD PTR tv414[ebp]
	push	edx
	lea	eax, DWORD PTR $T227679[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv645[ebp], eax
	mov	ecx, DWORD PTR tv645[ebp]
	mov	DWORD PTR $T227794[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR $T227794[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR $T227679[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T227678[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T227677[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1400 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227798[ebp], eax
	mov	edx, DWORD PTR $T227798[ebp]
	push	edx
	mov	eax, DWORD PTR _pLog$224501[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pLog$224501[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	add	esp, 8

; 1401 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$224493[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$224491[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@LogGuessOt:

; 1402 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$224488[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$224489[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$2:
	lea	ecx, DWORD PTR _strTemp$224490[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$3:
	lea	ecx, DWORD PTR _playerName$224491[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$4:
	lea	ecx, DWORD PTR _otherPlayerName$224492[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$5:
	lea	ecx, DWORD PTR _strDesc$224493[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$6:
	lea	ecx, DWORD PTR _strLogName$224494[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$7:
	lea	ecx, DWORD PTR $T227667[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$8:
	lea	ecx, DWORD PTR $T227668[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$9:
	lea	ecx, DWORD PTR $T227669[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$10:
	lea	ecx, DWORD PTR $T227672[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$11:
	lea	ecx, DWORD PTR $T227673[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$12:
	lea	ecx, DWORD PTR $T227674[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$13:
	lea	ecx, DWORD PTR $T227675[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$14:
	lea	ecx, DWORD PTR $T227676[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$15:
	lea	ecx, DWORD PTR $T227677[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$16:
	lea	ecx, DWORD PTR $T227678[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z$17:
	lea	ecx, DWORD PTR $T227679[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-684]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogGuessOtherPlayerGrandStrategy@CvGrandStrategyAI@@AAEXABV?$FStaticVector@H$04$00$0BCJ@$0A@@@W4PlayerTypes@@@Z ENDP ; CvGrandStrategyAI::LogGuessOtherPlayerGrandStrategy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >
PUBLIC	??1?$BaseVector@H$00@@QAE@XZ			; BaseVector<int,1>::~BaseVector<int,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T227901 = -20						; size = 4
_pRet$227897 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T227901[ebp], edx
	cmp	DWORD PTR $T227901[ebp], 5
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T227901[ebp]
	shl	eax, 2
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$227897[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T227901[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$227897[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 5
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$227897[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@H$00@@QAE@XZ		; BaseVector<int,1>::~BaseVector<int,1>
__ehhandler$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,5,1,297,0>::FStaticVector<int,5,1,297,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T227932 = -24						; size = 4
$T227931 = -20						; size = 4
_i$227926 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T227932[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T227931[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$227926[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$227926[ebp]
	add	eax, 1
	mov	DWORD PTR _i$227926[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$227926[ebp]
	cmp	ecx, DWORD PTR $T227932[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T227931[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T227931[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@H$00@@QAE@XZ		; BaseVector<int,1>::~BaseVector<int,1>
__ehhandler$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@H$04$00$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,5,1,297,0>::~FStaticVector<int,5,1,297,0>
PUBLIC	?GrowSize@?$FStaticVector@H$04$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,5,1,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z
_TEXT	SEGMENT
tv140 = -52						; size = 4
tv131 = -48						; size = 4
_this$ = -44						; size = 4
$T227944 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z PROC ; FStaticVector<int,5,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@H$04$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,5,1,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T227944[ebp], ecx
	cmp	DWORD PTR $T227944[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T227944[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T227944[ebp]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv131[ebp], 0
$LN5@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv140[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@H$04$00$0BCJ@$0A@@@QAEIABH@Z ENDP ; FStaticVector<int,5,1,297,0>::push_back
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@H$04$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$04$00@@QAE@XZ PROC		; CvWeightedVector<int,5,1>::~CvWeightedVector<int,5,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$04$00@@QAE@XZ ENDP		; CvWeightedVector<int,5,1>::~CvWeightedVector<int,5,1>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>
; Function compile flags: /Odtp
;	COMDAT ?SortItems@?$CvWeightedVector@H$04$00@@QAEXXZ
_TEXT	SEGMENT
_this$ = -156						; size = 4
$T228025 = -8						; size = 4
$T228021 = -4						; size = 4
?SortItems@?$CvWeightedVector@H$04$00@@QAEXXZ PROC	; CvWeightedVector<int,5,1>::SortItems, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T228021[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T228025[ebp], eax
	mov	ecx, DWORD PTR $T228021[ebp]
	sub	ecx, DWORD PTR $T228025[ebp]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR $T228021[ebp]
	push	edx
	mov	eax, DWORD PTR $T228025[ebp]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SortItems@?$CvWeightedVector@H$04$00@@QAEXXZ ENDP	; CvWeightedVector<int,5,1>::SortItems
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::~_Vector_val<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@H$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@H$00@@QAE@XZ PROC			; BaseVector<int,1>::~BaseVector<int,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@H$00@@QAE@XZ ENDP			; BaseVector<int,1>::~BaseVector<int,1>
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvAIGrandStrategyXMLEntry * *,CvAIGrandStrategyXMLEntry * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T228304 = -52						; size = 4
$T228293 = -48						; size = 4
$T228292 = -44						; size = 4
__Cat$228300 = -40					; size = 1
$T228298 = -39						; size = 1
__Ptr$224643 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@0@Z PROC ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvAIGrandStrategyXMLEntry * *,CvAIGrandStrategyXMLEntry * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$224643[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228304[ebp], edx
	mov	eax, DWORD PTR $T228304[ebp]
	mov	DWORD PTR $T228293[ebp], eax
	mov	ecx, DWORD PTR __Ptr$224643[ebp]
	mov	DWORD PTR $T228292[ebp], ecx
	mov	dl, BYTE PTR __Cat$228300[ebp]
	mov	BYTE PTR $T228298[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$224643[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@2@0@Z ENDP ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvAIGrandStrategyXMLEntry@@@std@@YAPAPAVCvAIGrandStrategyXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvAIGrandStrategyXMLEntry *>
PUBLIC	?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$228319 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$228319[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$228319[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$228319[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvAIGrandStrategyXMLEntry@@@std@@YAPAPAVCvAIGrandStrategyXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvAIGrandStrategyXMLEntry *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T228385 = -28						; size = 4
$T228384 = -24						; size = 4
$T228380 = -20						; size = 4
$T228379 = -16						; size = 4
$T228368 = -12						; size = 4
$T228367 = -8						; size = 4
__Cat$228371 = -2					; size = 1
$T228376 = -1						; size = 1
?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228380[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T228379[ebp], ecx
	mov	edx, DWORD PTR $T228380[ebp]
	mov	DWORD PTR $T228368[ebp], edx
	mov	eax, DWORD PTR $T228379[ebp]
	mov	DWORD PTR $T228367[ebp], eax
	mov	cl, BYTE PTR __Cat$228371[ebp]
	mov	BYTE PTR $T228376[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T228385[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228384[ebp], eax
	mov	ecx, DWORD PTR $T228384[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Tidy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@H$04$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv178 = -44						; size = 4
_this$ = -40						; size = 4
$T228422 = -36						; size = 4
$T228421 = -32						; size = 4
_i$228414 = -28						; size = 4
$T228397 = -24						; size = 4
_pRet$228394 = -20					; size = 4
$T228388 = -16						; size = 4
_i$224690 = -12						; size = 4
_uiNewSize$224682 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@H$04$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<int,5,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$224682[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$224682[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$224682[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T228397[ebp], ecx
	cmp	DWORD PTR $T228397[ebp], 5
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T228397[ebp]
	shl	edx, 2
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$228394[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T228397[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize
$LN15@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$228394[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5
$LN16@GrowSize:
	mov	ecx, DWORD PTR _pRet$228394[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$224690[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$224690[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224690[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$224690[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$224690[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T228388[ebp], ecx
	cmp	DWORD PTR $T228388[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T228388[ebp]
	mov	edx, DWORD PTR _i$224690[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T228388[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv178[ebp], 0
$LN13@GrowSize:
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228422[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T228421[ebp], edx
	xor	eax, eax
	je	SHORT $LN21@GrowSize
	xor	ecx, ecx
	je	SHORT $LN21@GrowSize
	mov	DWORD PTR _i$228414[ebp], 0
	jmp	SHORT $LN26@GrowSize
$LN25@GrowSize:
	mov	edx, DWORD PTR _i$228414[ebp]
	add	edx, 1
	mov	DWORD PTR _i$228414[ebp], edx
$LN26@GrowSize:
	mov	eax, DWORD PTR _i$228414[ebp]
	cmp	eax, DWORD PTR $T228422[ebp]
	jae	SHORT $LN21@GrowSize
	jmp	SHORT $LN25@GrowSize
$LN21@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T228421[ebp], ecx
	je	SHORT $LN22@GrowSize
	mov	edx, DWORD PTR $T228421[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+32], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@H$04$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<int,5,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T228436 = -20						; size = 4
_pRet$228433 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228436[ebp], edx
	cmp	DWORD PTR $T228436[ebp], 5
	jbe	SHORT $LN7@FStaticVec@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T228436[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$228433[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T228436[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@3
$LN7@FStaticVec@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$228433[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 5
$LN8@FStaticVec@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$228433[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T228467 = -24						; size = 4
$T228466 = -20						; size = 4
_i$228459 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T228467[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T228466[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@4
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@4
	mov	DWORD PTR _i$228459[ebp], 0
	jmp	SHORT $LN10@FStaticVec@4
$LN9@FStaticVec@4:
	mov	eax, DWORD PTR _i$228459[ebp]
	add	eax, 1
	mov	DWORD PTR _i$228459[ebp], eax
$LN10@FStaticVec@4:
	mov	ecx, DWORD PTR _i$228459[ebp]
	cmp	ecx, DWORD PTR $T228467[ebp]
	jae	SHORT $LN5@FStaticVec@4
	jmp	SHORT $LN9@FStaticVec@4
$LN5@FStaticVec@4:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T228466[ebp], edx
	je	SHORT $LN1@FStaticVec@4
	mov	eax, DWORD PTR $T228466[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@4:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T228480 = -8						; size = 4
$T228479 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T228480[ebp], ecx
	cmp	DWORD PTR $T228480[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR $T228480[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T228480[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T228480[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@2:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T228479[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$04$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T228535 = -80						; size = 28
$T228534 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T228535[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T228534[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T228534[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T228535[ebp]
	push	eax
	lea	ecx, DWORD PTR $T228534[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T228534[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T228534[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T228535[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T228535[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T228534[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvAIGrandStrategyXMLEntry@@V?$allocator@PAVCvAIGrandStrategyXMLEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvAIGrandStrategyXMLEntry *,std::allocator<CvAIGrandStrategyXMLEntry *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T228618 = -44						; size = 4
$T228617 = -40						; size = 4
_i$228610 = -36						; size = 4
$T228596 = -32						; size = 4
$T228589 = -28						; size = 4
_pRet$228586 = -24					; size = 4
$T228579 = -20						; size = 4
$T228578 = -16						; size = 4
_i$224785 = -12						; size = 4
_uiNewSize$224777 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@2

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$224777[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$224777[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@2

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@2
$LN6@GrowSize@2:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$224777[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@2
$LN7@GrowSize@2:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T228589[ebp], ecx
	cmp	DWORD PTR $T228589[ebp], 5
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T228589[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$228586[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T228589[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@2
$LN16@GrowSize@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$228586[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5
$LN17@GrowSize@2:
	mov	ecx, DWORD PTR _pRet$228586[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@2

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@2
$LN5@GrowSize@2:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$224785[ebp], 0
	jmp	SHORT $LN3@GrowSize@2
$LN2@GrowSize@2:
	mov	edx, DWORD PTR _i$224785[ebp]
	add	edx, 1
	mov	DWORD PTR _i$224785[ebp], edx
$LN3@GrowSize@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$224785[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@2

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$224785[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T228579[ebp], ecx
	cmp	DWORD PTR $T228579[ebp], 0
	je	SHORT $LN12@GrowSize@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$224785[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T228596[ebp], edx
	mov	eax, DWORD PTR $T228579[ebp]
	mov	ecx, DWORD PTR $T228596[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T228579[ebp]
	mov	ecx, DWORD PTR $T228596[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T228579[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@2
$LN12@GrowSize@2:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@2:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T228578[ebp], ecx
	jmp	SHORT $LN2@GrowSize@2
$LN4@GrowSize@2:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228618[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T228617[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@2
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@2
	mov	DWORD PTR _i$228610[ebp], 0
	jmp	SHORT $LN29@GrowSize@2
$LN28@GrowSize@2:
	mov	edx, DWORD PTR _i$228610[ebp]
	add	edx, 1
	mov	DWORD PTR _i$228610[ebp], edx
$LN29@GrowSize@2:
	mov	eax, DWORD PTR _i$228610[ebp]
	cmp	eax, DWORD PTR $T228618[ebp]
	jae	SHORT $LN24@GrowSize@2
	jmp	SHORT $LN28@GrowSize@2
$LN24@GrowSize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T228617[ebp], ecx
	je	SHORT $LN25@GrowSize@2
	mov	edx, DWORD PTR $T228617[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+52], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$04$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,5,1>::WeightedElement,5,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$04$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,5,1>::WeightedElement,1>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
_TEXT	ENDS
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_v$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z PROC ; operator>><int>, COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 516  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 517  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 518  : 	ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 519  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator

; 520  : 	{
; 521  : 		loadFrom >> values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 522  : 	}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 523  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ENDP ; operator>><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_v$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z PROC ; operator<<<int>, COMDAT

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 503  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 504  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 505  : 	const ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 506  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator@2

; 507  : 	{
; 508  : 		saveTo << values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 509  : 	}

	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 510  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 511  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ENDP ; operator<<<int>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
$T228665 = -26						; size = 1
$T228664 = -25						; size = 1
$T228663 = -24						; size = 4
$T228662 = -20						; size = 4
__Off$228659 = -16					; size = 4
__Result$228660 = -12					; size = 4
__Cat$228651 = -4					; size = 1
$T228647 = -3						; size = 1
$T228646 = -2						; size = 1
$T228645 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvAIGrandStrategyXMLEntry * *,CvAIGrandStrategyXMLEntry * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T228645[ebp], al
	mov	cl, BYTE PTR __Cat$228651[ebp]
	mov	BYTE PTR $T228646[ebp], cl
	mov	dl, BYTE PTR $T228645[ebp]
	mov	BYTE PTR $T228665[ebp], dl
	mov	al, BYTE PTR $T228647[ebp]
	mov	BYTE PTR $T228664[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T228663[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T228662[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T228662[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$228659[ebp], eax
	mov	ecx, DWORD PTR __Off$228659[ebp]
	mov	edx, DWORD PTR $T228663[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$228660[ebp], eax
	cmp	DWORD PTR __Off$228659[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$228659[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T228662[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$228659[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T228663[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$228660[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvAIGrandStrategyXMLEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvAIGrandStrategyXMLEntry * *,CvAIGrandStrategyXMLEntry * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvAIGrandStrategyXMLEntry@@@std@@YAPAPAVCvAIGrandStrategyXMLEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T228672 = -16						; size = 4
$T228668 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvAIGrandStrategyXMLEntry@@@std@@YAPAPAVCvAIGrandStrategyXMLEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvAIGrandStrategyXMLEntry *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T228672[ebp], 0
	lea	eax, DWORD PTR $T228672[ebp]
	push	eax
	lea	ecx, DWORD PTR $T228668[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T228668[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T228668[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvAIGrandStrategyXMLEntry@@@std@@YAPAPAVCvAIGrandStrategyXMLEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvAIGrandStrategyXMLEntry *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,5,1>::WeightedElement *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z
_TEXT	SEGMENT
$T228806 = -128						; size = 4
__Mid$224997 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$224997[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$224997[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$224997[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$224997[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$224997[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$224997[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$224997[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T228806[ebp], edx
	jmp	SHORT $LN92@Sort
$LN91@Sort:
	mov	eax, DWORD PTR $T228806[ebp]
	sub	eax, 8
	mov	DWORD PTR $T228806[ebp], eax
$LN92@Sort:
	mov	ecx, DWORD PTR $T228806[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort
	mov	edx, DWORD PTR $T228806[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort
	push	0
	mov	eax, DWORD PTR $T228806[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort:
	jmp	SHORT $LN91@Sort
$LN88@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,5,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Median<CvWeightedVector<int,5,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@0@Z
_TEXT	SEGMENT
$T229049 = -124						; size = 4
__Tmp$229047 = -120					; size = 8
$T229029 = -112						; size = 4
$T229028 = -108						; size = 4
__Tmp$229026 = -104					; size = 8
$T229008 = -96						; size = 4
__Tmp$229006 = -92					; size = 8
$T228988 = -84						; size = 4
$T228987 = -80						; size = 4
__Tmp$228985 = -76					; size = 8
$T228967 = -68						; size = 4
$T228966 = -64						; size = 4
__Tmp$228964 = -60					; size = 8
$T228943 = -52						; size = 4
$T228942 = -48						; size = 4
__Tmp$228940 = -44					; size = 8
$T228916 = -36						; size = 4
__Tmp$228914 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,5,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Median<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_
	jmp	SHORT $LN17@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T228916[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T228916[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_
	mov	ecx, DWORD PTR $T228916[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228914[ebp], edx
	mov	eax, DWORD PTR $T228916[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$228914[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T228916[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$228914[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$228914[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_
	jmp	SHORT $LN10@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T228943[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T228942[ebp], edx
	mov	eax, DWORD PTR $T228942[ebp]
	cmp	eax, DWORD PTR $T228943[ebp]
	je	SHORT $LN10@Unguarded_
	mov	ecx, DWORD PTR $T228942[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228940[ebp], edx
	mov	eax, DWORD PTR $T228942[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$228940[ebp+4], ecx
	mov	edx, DWORD PTR $T228943[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T228942[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T228943[ebp]
	mov	ecx, DWORD PTR __Tmp$228940[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$228940[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_
$LN12@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T228967[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T228966[ebp], eax
	mov	ecx, DWORD PTR $T228966[ebp]
	cmp	ecx, DWORD PTR $T228967[ebp]
	je	SHORT $LN5@Unguarded_
	mov	edx, DWORD PTR $T228966[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$228964[ebp], eax
	mov	ecx, DWORD PTR $T228966[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$228964[ebp+4], edx
	mov	eax, DWORD PTR $T228967[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T228966[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T228967[ebp]
	mov	edx, DWORD PTR __Tmp$228964[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$228964[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T228988[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T228987[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T228987[ebp]
	cmp	eax, DWORD PTR $T228988[ebp]
	je	SHORT $LN73@Unguarded_
	mov	ecx, DWORD PTR $T228987[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$228985[ebp], edx
	mov	eax, DWORD PTR $T228987[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$228985[ebp+4], ecx
	mov	edx, DWORD PTR $T228988[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T228987[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T228988[ebp]
	mov	ecx, DWORD PTR __Tmp$228985[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$228985[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN6@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T229008[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T229008[ebp]
	je	SHORT $LN2@Unguarded_
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$229006[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$229006[ebp+4], eax
	mov	ecx, DWORD PTR $T229008[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T229008[ebp]
	mov	eax, DWORD PTR __Tmp$229006[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$229006[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T229029[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T229028[ebp], ecx
	mov	edx, DWORD PTR $T229028[ebp]
	cmp	edx, DWORD PTR $T229029[ebp]
	je	SHORT $LN87@Unguarded_
	mov	eax, DWORD PTR $T229028[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$229026[ebp], ecx
	mov	edx, DWORD PTR $T229028[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$229026[ebp+4], eax
	mov	ecx, DWORD PTR $T229029[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T229028[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T229029[ebp]
	mov	eax, DWORD PTR __Tmp$229026[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$229026[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T229049[ebp], eax
	mov	ecx, DWORD PTR $T229049[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_
	mov	edx, DWORD PTR $T229049[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$229047[ebp], eax
	mov	ecx, DWORD PTR $T229049[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$229047[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T229049[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$229047[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$229047[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:

; 3076 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z
_TEXT	SEGMENT
__Step$225157 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,5,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$225157[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$225157[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$225157[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$225157[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$225157[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$225157[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$225157[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$225157[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$225157[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0PAH0@Z
_TEXT	SEGMENT
$T229362 = -20						; size = 4
$T229361 = -16						; size = 4
__Hole$225175 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$225175[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$225175[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$225175[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$225175[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$225175[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T229362[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T229361[ebp], esp
	mov	edx, DWORD PTR $T229361[ebp]
	mov	eax, DWORD PTR $T229362[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T229361[ebp]
	mov	eax, DWORD PTR $T229362[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$225175[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z
_TEXT	SEGMENT
$T229432 = -52						; size = 4
$T229431 = -48						; size = 4
$T229415 = -42						; size = 1
$T229414 = -41						; size = 1
$T229413 = -40						; size = 4
$T229412 = -36						; size = 4
$T229411 = -32						; size = 4
__Cat$229422 = -24					; size = 1
$T229419 = -23						; size = 1
$T229418 = -22						; size = 1
$T229417 = -21						; size = 1
__First1$225216 = -20					; size = 4
__Val$225206 = -16					; size = 8
__Next1$225205 = -8					; size = 4
__Next$225201 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$225201[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$225201[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$225201[ebp], edx
	mov	eax, DWORD PTR __Next$225201[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$225201[ebp]
	mov	DWORD PTR __Next1$225205[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$225201[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$225206[ebp], eax
	mov	ecx, DWORD PTR __Next$225201[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$225206[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$225206[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$225205[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$225205[ebp], ecx
	mov	edx, DWORD PTR __Next1$225205[ebp]
	mov	DWORD PTR $T229432[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T229431[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T229417[ebp], cl
	mov	dl, BYTE PTR __Cat$229422[ebp]
	mov	BYTE PTR $T229418[ebp], dl
	mov	al, BYTE PTR $T229417[ebp]
	mov	BYTE PTR $T229415[ebp], al
	mov	cl, BYTE PTR $T229419[ebp]
	mov	BYTE PTR $T229414[ebp], cl
	mov	edx, DWORD PTR $T229432[ebp]
	mov	DWORD PTR $T229413[ebp], edx
	mov	eax, DWORD PTR __Next$225201[ebp]
	mov	DWORD PTR $T229412[ebp], eax
	mov	ecx, DWORD PTR $T229431[ebp]
	mov	DWORD PTR $T229411[ebp], ecx
$LN22@Insertion_:
	mov	edx, DWORD PTR $T229411[ebp]
	cmp	edx, DWORD PTR $T229412[ebp]
	je	SHORT $LN15@Insertion_
	mov	eax, DWORD PTR $T229412[ebp]
	sub	eax, 8
	mov	DWORD PTR $T229412[ebp], eax
	mov	ecx, DWORD PTR $T229413[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T229413[ebp], ecx
	mov	edx, DWORD PTR $T229412[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T229413[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_
$LN15@Insertion_:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$225206[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$225206[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$225205[ebp]
	mov	DWORD PTR __First1$225216[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$225216[ebp]
	mov	DWORD PTR __Next1$225205[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$225216[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$225216[ebp], edx
	mov	eax, DWORD PTR __First1$225216[ebp]
	mov	ecx, DWORD PTR __Val$225206[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$225216[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$225205[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$225205[ebp]
	mov	eax, DWORD PTR __Val$225206[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$225206[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z
_TEXT	SEGMENT
__Tmp$229502 = -24					; size = 8
__Tmp$229480 = -16					; size = 8
__Tmp$229458 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$229458[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$229458[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$229458[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$229458[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$229480[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$229480[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$229480[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$229480[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$229502[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$229502[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$229502[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$229502[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,5,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z
_TEXT	SEGMENT
$T229527 = -32						; size = 4
$T229526 = -28						; size = 8
__Idx$229519 = -20					; size = 4
$T229513 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T229526[ebp]
	mov	DWORD PTR $T229513[ebp], edx
	mov	eax, DWORD PTR $T229513[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T229513[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T229527[ebp], ecx
	mov	eax, DWORD PTR $T229527[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$229519[ebp], eax
	jmp	SHORT $LN14@Adjust_hea
$LN13@Adjust_hea:
	mov	eax, DWORD PTR $T229527[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$229519[ebp], eax
$LN14@Adjust_hea:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T229527[ebp]
	jge	SHORT $LN12@Adjust_hea
	mov	eax, DWORD PTR __Idx$229519[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T229526[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea
	mov	edx, DWORD PTR __Idx$229519[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T229527[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$229519[ebp]
	mov	DWORD PTR $T229527[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea
$LN12@Adjust_hea:
	mov	edx, DWORD PTR $T229527[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T229526[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T229526[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z
_TEXT	SEGMENT
$T229573 = -60						; size = 8
$T229544 = -20						; size = 4
$T229538 = -12						; size = 4
$T229537 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T229538[ebp], eax
	lea	ecx, DWORD PTR $T229573[ebp]
	mov	DWORD PTR $T229537[ebp], ecx
	mov	edx, DWORD PTR $T229537[ebp]
	mov	eax, DWORD PTR $T229538[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T229537[ebp]
	mov	eax, DWORD PTR $T229538[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T229544[ebp], esp
	mov	eax, DWORD PTR $T229544[ebp]
	mov	ecx, DWORD PTR $T229573[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T229544[ebp]
	mov	eax, DWORD PTR $T229573[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,5,1>::WeightedElement *,int,CvWeightedVector<int,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$04$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,5,1>::WeightedElement *,CvWeightedVector<int,5,1>::WeightedElement>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T229614 = -2092					; size = 4
$T229613 = -2088					; size = 4
$T229612 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T229612[ebp], eax
	mov	ecx, DWORD PTR $T229612[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T229613[ebp], eax
	mov	eax, DWORD PTR $T229613[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T229614[ebp], eax
	mov	ecx, DWORD PTR $T229614[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
