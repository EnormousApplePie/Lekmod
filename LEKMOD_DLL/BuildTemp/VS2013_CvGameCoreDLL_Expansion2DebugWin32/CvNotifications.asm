; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvNotifications.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
_DATA	SEGMENT
_V1_IndexToHash DD 0be9725c6H
	DD	05acfa6f7H
	DD	0489b80b6H
	DD	0252bfe28H
	DD	077014c62H
	DD	03a8582e9H
	DD	0c659d71eH
	DD	0ae971de0H
	DD	09e9f2be6H
	DD	0b9985c59H
	DD	070cb3d66H
	DD	0dc66fa17H
	DD	0cd412906H
	DD	0cd6f572eH
	DD	066532408H
	DD	0250f2e27H
	DD	05ed9c509H
	DD	09b741b7fH
	DD	07cacc6ffH
	DD	05fcf949dH
	DD	03b74383cH
	DD	05e2fd815H
	DD	083cd0016H
	DD	0ba039c65H
	DD	0f4a99b85H
	DD	0c6e3b719H
	DD	0871df8e9H
	DD	030c5b663H
	DD	05863844fH
	DD	0ff07247aH
	DD	0509909a6H
	DD	04171d8c8H
	DD	0f62e7eabH
	DD	08f31e937H
	DD	0f6ffc169H
	DD	0b6eb90d6H
	DD	07cd306acH
	DD	07e312f61H
	DD	0769821e9H
	DD	0a9e7cc17H
	DD	097818eeeH
	DD	04ea00b5dH
	DD	0f1fc86edH
	DD	0211d6f50H
	DD	08a2abcH
	DD	08366a830H
	DD	0a38ed029H
	DD	08f01d6c4H
	DD	0fe00b7c9H
	DD	06a5b7f95H
	DD	0ba59e179H
	DD	0c4e10b71H
	DD	05f186e9dH
	DD	0acdb3c04H
	DD	01e4417c5H
	DD	0ab4c3bb3H
	DD	0ada4a172H
	DD	0e4edf657H
	DD	0ce337a4H
	DD	05a5e7d9eH
	DD	0e940eb52H
	DD	03d493221H
	DD	04c4b3599H
	DD	07ee00dfdH
	DD	0e9c73f3fH
	DD	0e7ed7441H
	DD	019742e3H
	DD	0e626e70aH
	DD	0963ac73aH
	DD	0e58c1d5H
	DD	0a754d3d8H
	DD	0fc07f784H
	DD	081e90de0H
	DD	071fb054aH
	DD	03691c24H
	DD	0d50b2758H
	DD	0149e6e49H
	DD	0fcc63818H
	DD	09abf6534H
	DD	054c8467H
	DD	0520420c2H
	DD	0ac06951H
	DD	01e3e4861H
	DD	0a6713b03H
	DD	0e8eae770H
	DD	0b1b7c601H
	DD	0cb18d8d7H
	DD	0858304a4H
	DD	0fece1a13H
	DD	0b055c660H
	DD	017feefbeH
	DD	02eaecd2H
	DD	0b0d00659H
	DD	0aaa52ce6H
	DD	07f41a9f3H
	DD	024cc885cH
	DD	0f0330403H
	DD	0f9511ac5H
	DD	049a0f9a1H
	DD	09c447cb4H
	DD	0fca2ca86H
	DD	02e10be53H
	DD	07178c0fdH
	DD	0850d1593H
	DD	0de0ad70H
	DD	079f0f150H
	DD	0c51b3418H
	DD	0eb757cbaH
	DD	0c5c4f81aH
	DD	05b0be213H
	DD	05f0813cfH
	DD	02b7bdab6H
	DD	04e8a36a4H
	DD	07500ca03H
	DD	050b6287H
	DD	02d0e554cH
	DD	084b7e406H
	DD	097deeb2fH
	DD	01192a3f3H
	DD	09074bdeeH
	DD	0850e0773H
	DD	0f1f3e098H
	DD	07220655fH
	DD	0fa9bea56H
	DD	060356bc1H
	DD	0efb187cfH
	DD	0fd3eef59H
	DD	0be3968b6H
	DD	01567ebd1H
	DD	011f69bffH
	DD	098de2522H
	DD	07a509768H
	DD	06656e513H
	DD	0fe331e2bH
	DD	01538d3a8H
	DD	06110ac7aH
	DD	02a32bee8H
	DD	08a6293eH
	DD	0b6299d35H
	DD	0ab88859dH
	DD	0d1bc1a84H
	DD	0e58aa15fH
_DATA	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUNotification@CvNotifications@@@Z ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4NotificationTypes@@@Z:PROC ; operator>>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUNotification@CvNotifications@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUNotification@CvNotifications@@@Z PROC ; operator>>, COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp

; 175  : 	loadFrom >> writeTo.m_eNotificationType;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4NotificationTypes@@@Z ; operator>>
	add	esp, 8

; 176  : 	loadFrom >> writeTo.m_strMessage;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 177  : 	loadFrom >> writeTo.m_strSummary;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 178  : 	loadFrom >> writeTo.m_iX;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 179  : 	loadFrom >> writeTo.m_iY;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 180  : 	loadFrom >> writeTo.m_iGameDataIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 181  : 	loadFrom >> writeTo.m_iExtraGameData;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 182  : 	loadFrom >> writeTo.m_iTurn;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 183  : 	loadFrom >> writeTo.m_iLookupIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 184  : 	loadFrom >> writeTo.m_bDismissed;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 89					; 00000059H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 185  : 	loadFrom >> writeTo.m_ePlayerID;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 186  : 	writeTo.m_bNeedsBroadcast = true; // all loads should re-broadcast their events

	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [ecx+88], 1

; 187  : 	writeTo.m_bWaitExtraTurn = false; // not saving this

	mov	edx, DWORD PTR _writeTo$[ebp]
	mov	BYTE PTR [edx+90], 0

; 188  : 
; 189  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 190  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUNotification@CvNotifications@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUNotification@CvNotifications@@@Z ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4NotificationTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUNotification@CvNotifications@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUNotification@CvNotifications@@@Z PROC ; operator<<, COMDAT

; 194  : {

	push	ebp
	mov	ebp, esp

; 195  : 	saveTo << readFrom.m_eNotificationType;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4NotificationTypes@@@Z ; operator<<
	add	esp, 8

; 196  : 	saveTo << readFrom.m_strMessage;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 197  : 	saveTo << readFrom.m_strSummary;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 198  : 	saveTo << readFrom.m_iX;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 199  : 	saveTo << readFrom.m_iY;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 200  : 	saveTo << readFrom.m_iGameDataIndex;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 201  : 	saveTo << readFrom.m_iExtraGameData;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 202  : 	saveTo << readFrom.m_iTurn;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 203  : 	saveTo << readFrom.m_iLookupIndex;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 204  : 	saveTo << readFrom.m_bDismissed;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 89					; 00000059H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 205  : 	saveTo << readFrom.m_ePlayerID;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 206  : 	// this is not saved because we want to re-broadcast on load
; 207  : 	// saveTo << writeTo.m_bBroadcast;
; 208  : 	// Not saving this either
; 209  : 	// saveTo << readFrom.m_bWaitExtraTurn;
; 210  : 
; 211  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 212  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUNotification@CvNotifications@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?Clear@Notification@CvNotifications@@QAEXXZ	; CvNotifications::Notification::Clear
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
CONST	ENDS
;	COMDAT ?Clear@Notification@CvNotifications@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T222690 = -8						; size = 4
$T222684 = -4						; size = 4
?Clear@Notification@CvNotifications@@QAEXXZ PROC	; CvNotifications::Notification::Clear, COMDAT
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 	m_eNotificationType = NO_NOTIFICATION_TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1

; 217  : 	m_strMessage = "";

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T222684[ebp], ecx
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN4@Clear
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T222684[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN5@Clear
$LN4@Clear:
	mov	ecx, DWORD PTR $T222684[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN5@Clear:

; 218  : 	m_strSummary = "";

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T222690[ebp], eax
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN8@Clear
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T222690[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN9@Clear
$LN8@Clear:
	mov	ecx, DWORD PTR $T222690[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN9@Clear:

; 219  : 	m_iX = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], -1

; 220  : 	m_iY = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], -1

; 221  : 	m_iGameDataIndex = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], -1

; 222  : 	m_iTurn = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], -1

; 223  : 	m_iLookupIndex = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 224  : 	m_bNeedsBroadcast = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+88], 0

; 225  : 	m_bDismissed = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+89], 0

; 226  : 	m_bWaitExtraTurn = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+90], 0

; 227  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@Notification@CvNotifications@@QAEXXZ ENDP	; CvNotifications::Notification::Clear
_TEXT	ENDS
PUBLIC	??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
PUBLIC	??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
PUBLIC	?Uninit@CvNotifications@@QAEXXZ			; CvNotifications::Uninit
PUBLIC	?_Buy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAE_NI@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Buy
PUBLIC	??0CvNotifications@@QAE@XZ			; CvNotifications::CvNotifications
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvNotifications@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvNotifications@@QAE@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvNotifications@@QAE@XZ$0
__ehfuncinfo$??0CvNotifications@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvNotifications@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
xdata$x	ENDS
;	COMDAT ??0CvNotifications@@QAE@XZ
_TEXT	SEGMENT
tv128 = -136						; size = 4
tv153 = -132						; size = 4
_this$ = -128						; size = 4
$T222781 = -124						; size = 4
$T222724 = -30						; size = 1
$T222711 = -29						; size = 1
$T222707 = -28						; size = 4
$T222700 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvNotifications@@QAE@XZ PROC				; CvNotifications::CvNotifications, COMDAT
; _this$ = ecx

; 231  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvNotifications@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T222781[ebp], eax
	lea	ecx, DWORD PTR $T222724[ebp]
	mov	DWORD PTR $T222700[ebp], ecx
	lea	edx, DWORD PTR $T222711[ebp]
	mov	DWORD PTR $T222707[ebp], edx
	mov	eax, DWORD PTR $T222781[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	ecx, DWORD PTR $T222781[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR $T222781[ebp]
	call	?_Buy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAE_NI@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 232  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvNotifications@@QAEXXZ		; CvNotifications::Uninit

; 233  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvNotifications@@QAE@XZ$1:
	mov	ecx, DWORD PTR $T222781[ebp]
	jmp	??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvNotifications@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
__ehhandler$??0CvNotifications@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvNotifications@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvNotifications@@QAE@XZ ENDP				; CvNotifications::CvNotifications
PUBLIC	?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Tidy
PUBLIC	??1CvNotifications@@QAE@XZ			; CvNotifications::~CvNotifications
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvNotifications@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvNotifications@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvNotifications@@QAE@XZ$1
__ehfuncinfo$??1CvNotifications@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvNotifications@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
xdata$x	ENDS
;	COMDAT ??1CvNotifications@@QAE@XZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T222901 = -60						; size = 4
__$EHRec$ = -12						; size = 12
??1CvNotifications@@QAE@XZ PROC				; CvNotifications::~CvNotifications, COMDAT
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvNotifications@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 238  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvNotifications@@QAEXXZ		; CvNotifications::Uninit

; 239  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T222901[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T222901[ebp]
	call	?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvNotifications@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
__unwindfunclet$??1CvNotifications@@QAE@XZ$1:
	mov	ecx, DWORD PTR $T222901[ebp]
	jmp	??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
__ehhandler$??1CvNotifications@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvNotifications@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvNotifications@@QAE@XZ ENDP				; CvNotifications::~CvNotifications
PUBLIC	?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize
PUBLIC	?Init@CvNotifications@@QAEXW4PlayerTypes@@@Z	; CvNotifications::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvNotifications@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T223039 = -84						; size = 4
_ui$220297 = -4						; size = 4
_ePlayer$ = 8						; size = 4
?Init@CvNotifications@@QAEXW4PlayerTypes@@@Z PROC	; CvNotifications::Init, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvNotifications@@QAEXXZ		; CvNotifications::Uninit

; 245  : 	m_ePlayer = ePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ePlayer$[ebp]
	mov	DWORD PTR [eax], ecx

; 246  : 
; 247  : 	m_aNotifications.resize(MAX_NOTIFICATIONS);

	push	100					; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize

; 248  : 	for(uint ui = 0; ui < m_aNotifications.size(); ui++)

	mov	DWORD PTR _ui$220297[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	edx, DWORD PTR _ui$220297[ebp]
	add	edx, 1
	mov	DWORD PTR _ui$220297[ebp], edx
$LN3@Init:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223039[ebp], eax
	mov	ecx, DWORD PTR $T223039[ebp]
	mov	edx, DWORD PTR $T223039[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _ui$220297[ebp], eax
	jae	SHORT $LN1@Init

; 249  : 	{
; 250  : 		m_aNotifications[ui].Clear();

	mov	ecx, DWORD PTR _ui$220297[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	call	?Clear@Notification@CvNotifications@@QAEXXZ ; CvNotifications::Notification::Clear

; 251  : 	}

	jmp	SHORT $LN2@Init
$LN1@Init:

; 252  : 	m_iNotificationsBeginIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 253  : 	m_iNotificationsEndIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvNotifications@@QAEXW4PlayerTypes@@@Z ENDP	; CvNotifications::Init
_TEXT	ENDS
PUBLIC	?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::erase
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvNotifications@@QAEXXZ
_TEXT	SEGMENT
_this$ = -120						; size = 4
$T223272 = -116						; size = 4
$T223076 = -28						; size = 4
$T223060 = -24						; size = 4
$T223259 = -20						; size = 4
$T223258 = -16						; size = 4
$T223257 = -12						; size = 4
$T223256 = -8						; size = 4
$T223255 = -4						; size = 4
?Uninit@CvNotifications@@QAEXXZ PROC			; CvNotifications::Uninit, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 	m_ePlayer = NO_PLAYER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1

; 260  : 	m_iCurrentLookupIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 261  : 	m_aNotifications.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T223272[ebp], edx
	mov	eax, DWORD PTR $T223272[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T223060[ebp], ecx
	mov	edx, DWORD PTR $T223060[ebp]
	mov	DWORD PTR $T223256[ebp], edx
	mov	eax, DWORD PTR $T223256[ebp]
	mov	DWORD PTR $T223255[ebp], eax
	mov	ecx, DWORD PTR $T223272[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T223076[ebp], edx
	mov	eax, DWORD PTR $T223076[ebp]
	mov	DWORD PTR $T223258[ebp], eax
	mov	ecx, DWORD PTR $T223258[ebp]
	mov	DWORD PTR $T223257[ebp], ecx
	mov	edx, DWORD PTR $T223255[ebp]
	push	edx
	mov	eax, DWORD PTR $T223257[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223259[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T223272[ebp]
	call	?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::erase

; 262  : 
; 263  : 	m_iNotificationsBeginIndex = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], -1

; 264  : 	m_iNotificationsEndIndex = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1

; 265  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvNotifications@@QAEXXZ ENDP			; CvNotifications::Uninit
_TEXT	ENDS
PUBLIC	?Read@CvNotifications@@QAEXAAVFDataStream@@@Z	; CvNotifications::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvNotifications@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iIndex$220318 = -12					; size = 4
_ui$220310 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvNotifications@@QAEXAAVFDataStream@@@Z PROC	; CvNotifications::Read, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 270  : 	// Version number to maintain backwards compatibility
; 271  : 	uint uiVersion;
; 272  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 273  : 
; 274  : 	kStream >> m_ePlayer;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 275  : 	kStream >> m_iCurrentLookupIndex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 276  : 	kStream >> m_iNotificationsBeginIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 277  : 	kStream >> m_iNotificationsEndIndex;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 278  : 
; 279  : 	for(uint ui = 0; ui < MAX_NOTIFICATIONS; ui++)

	mov	DWORD PTR _ui$220310[ebp], 0
	jmp	SHORT $LN5@Read
$LN4@Read:
	mov	eax, DWORD PTR _ui$220310[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$220310[ebp], eax
$LN5@Read:
	cmp	DWORD PTR _ui$220310[ebp], 100		; 00000064H
	jae	SHORT $LN6@Read

; 280  : 	{
; 281  : 		kStream >> m_aNotifications[ui];

	mov	ecx, DWORD PTR _ui$220310[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAUNotification@CvNotifications@@@Z ; operator>>
	add	esp, 8

; 282  : 		if (uiVersion <= 1)

	cmp	DWORD PTR _uiVersion$[ebp], 1
	ja	SHORT $LN2@Read

; 283  : 		{
; 284  : 			// Translate the old index the hash ID.
; 285  : 			int iIndex = (int)(m_aNotifications[ui].m_eNotificationType);

	mov	ecx, DWORD PTR _ui$220310[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _iIndex$220318[ebp], ecx

; 286  : #ifdef AUI_WARNING_FIXES
; 287  : 			if (iIndex >= 0 && iIndex < sizeof(V1_IndexToHash) / sizeof(int))
; 288  : #else
; 289  : 			if (iIndex >= 0 && iIndex < sizeof(V1_IndexToHash)/sizeof(uint))

	cmp	DWORD PTR _iIndex$220318[ebp], 0
	jl	SHORT $LN2@Read
	cmp	DWORD PTR _iIndex$220318[ebp], 142	; 0000008eH
	jae	SHORT $LN2@Read

; 290  : #endif
; 291  : 				m_aNotifications[ui].m_eNotificationType = (NotificationTypes)V1_IndexToHash[iIndex];

	mov	edx, DWORD PTR _ui$220310[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iIndex$220318[ebp]
	mov	eax, DWORD PTR _V1_IndexToHash[eax*4]
	mov	DWORD PTR [edx+ecx], eax
$LN2@Read:

; 292  : 		}

	jmp	SHORT $LN4@Read
$LN6@Read:

; 293  : 	}
; 294  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvNotifications@@QAEXAAVFDataStream@@@Z ENDP	; CvNotifications::Read
_TEXT	ENDS
PUBLIC	?Write@CvNotifications@@QBEXAAVFDataStream@@@Z	; CvNotifications::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvNotifications@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ui$220328 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvNotifications@@QBEXAAVFDataStream@@@Z PROC	; CvNotifications::Write, COMDAT
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 299  : 	// Current version number
; 300  : 	uint uiVersion = 2;

	mov	DWORD PTR _uiVersion$[ebp], 2

; 301  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 302  : 
; 303  : 	// need to serialize notification list
; 304  : 	kStream << m_ePlayer;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 305  : 	kStream << m_iCurrentLookupIndex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 306  : 	kStream << m_iNotificationsBeginIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 307  : 	kStream << m_iNotificationsEndIndex;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 308  : 
; 309  : 	for(uint ui = 0; ui < MAX_NOTIFICATIONS; ui++)

	mov	DWORD PTR _ui$220328[ebp], 0
	jmp	SHORT $LN3@Write
$LN2@Write:
	mov	eax, DWORD PTR _ui$220328[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$220328[ebp], eax
$LN3@Write:
	cmp	DWORD PTR _ui$220328[ebp], 100		; 00000064H
	jae	SHORT $LN4@Write

; 310  : 	{
; 311  : 		kStream << m_aNotifications[ui];

	mov	ecx, DWORD PTR _ui$220328[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABUNotification@CvNotifications@@@Z ; operator<<
	add	esp, 8
	jmp	SHORT $LN2@Write
$LN4@Write:

; 312  : 	}
; 313  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvNotifications@@QBEXAAVFDataStream@@@Z ENDP	; CvNotifications::Write
_TEXT	ENDS
PUBLIC	?Dismiss@CvNotifications@@QAEXH_N@Z		; CvNotifications::Dismiss
PUBLIC	?IsNotificationExpired@CvNotifications@@QAE_NH@Z ; CvNotifications::IsNotificationExpired
PUBLIC	?Update@CvNotifications@@QAEXXZ			; CvNotifications::Update
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?isTurnActive@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isTurnActive
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	?isHotSeatGame@CvPreGame@@YA_NXZ:PROC		; CvPreGame::isHotSeatGame
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Odtp
;	COMDAT ?Update@CvNotifications@@QAEXXZ
_TEXT	SEGMENT
tv187 = -48						; size = 4
tv148 = -44						; size = 4
_this$ = -40						; size = 4
$T223342 = -36						; size = 4
$T223338 = -32						; size = 4
$T223334 = -28						; size = 4
$T223330 = -24						; size = 4
$T223329 = -20						; size = 4
$T223325 = -16						; size = 4
$T223321 = -12						; size = 4
_kNotification$220348 = -8				; size = 4
_iIndex$ = -4						; size = 4
?Update@CvNotifications@@QAEXXZ PROC			; CvNotifications::Update, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN12@Update:

; 319  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	$LN13@Update

; 320  : 	{
; 321  : 		Notification& kNotification = m_aNotifications[iIndex];

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _kNotification$220348[ebp], ecx

; 322  : 
; 323  : 		if(!kNotification.m_bDismissed)

	mov	eax, DWORD PTR _kNotification$220348[ebp]
	movzx	ecx, BYTE PTR [eax+89]
	test	ecx, ecx
	jne	$LN10@Update

; 324  : 		{
; 325  : 			if(IsNotificationExpired(iIndex))

	mov	edx, DWORD PTR _iIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationExpired@CvNotifications@@QAE_NH@Z ; CvNotifications::IsNotificationExpired
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@Update

; 326  : 			{
; 327  : 				Dismiss(kNotification.m_iLookupIndex, /*bUserInvoked*/ false);

	push	0
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dismiss@CvNotifications@@QAEXH_N@Z	; CvNotifications::Dismiss

; 328  : 				//GC.GetEngineUserInterface()->RemoveNotification(kNotification.m_iLookupIndex);
; 329  : 				//kNotification.m_bDismissed = true;
; 330  : 			}
; 331  : 			else

	jmp	$LN10@Update
$LN9@Update:

; 332  : 			{
; 333  : 				if(kNotification.m_bNeedsBroadcast)

	mov	eax, DWORD PTR _kNotification$220348[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	je	$LN10@Update

; 334  : 				{
; 335  : 					// If the notification is for the 'active' player and that active player actually has his turn active or its not hotseat, then show the notification, else wait.
; 336  : 					// The 'active' player is only set to a human and during the AI turn, the 'active' player is the last human to do their turn.
; 337  : 					if(kNotification.m_ePlayerID == GC.getGame().getActivePlayer())

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223321[ebp], edx
	mov	ecx, DWORD PTR $T223321[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jne	$LN6@Update

; 338  : 					{
; 339  : 						if(!CvPreGame::isHotSeatGame() || GET_PLAYER(GC.getGame().getActivePlayer()).isTurnActive())

	call	?isHotSeatGame@CvPreGame@@YA_NXZ	; CvPreGame::isHotSeatGame
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Update
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223325[ebp], eax
	mov	ecx, DWORD PTR $T223325[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR $T223329[ebp], eax
	mov	ecx, DWORD PTR $T223329[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223330[ebp], ecx
	mov	ecx, DWORD PTR $T223330[ebp]
	call	?isTurnActive@CvPlayer@@QBE_NXZ		; CvPlayer::isTurnActive
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Update
$LN4@Update:

; 340  : 						{
; 341  : 							GC.GetEngineUserInterface()->AddNotification(kNotification.m_iLookupIndex, kNotification.m_eNotificationType, kNotification.m_strMessage.c_str(), kNotification.m_strSummary.c_str(), kNotification.m_iGameDataIndex, kNotification.m_iExtraGameData, m_ePlayer, kNotification.m_iX, kNotification.m_iY);

	mov	eax, DWORD PTR $T223334[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv148[ebp], ecx
	mov	edx, DWORD PTR _kNotification$220348[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _kNotification$220348[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	eax, DWORD PTR _kNotification$220348[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _kNotification$220348[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR tv148[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv148[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax

; 342  : 							kNotification.m_bNeedsBroadcast = false;

	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	mov	BYTE PTR [ecx+88], 0
$LN5@Update:

; 343  : 						}
; 344  : 					}

	jmp	SHORT $LN10@Update
$LN6@Update:

; 345  : 					else if(gDLL->IsPlayerConnected(kNotification.m_ePlayerID))

	mov	edx, DWORD PTR $T223338[ebp]
	mov	DWORD PTR tv187[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv187[ebp], eax
	mov	ecx, DWORD PTR _kNotification$220348[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Update

; 346  : 					{//We consider a notification to have been broadcast if the notification 
; 347  : 						//is for a remote player who is network connected to the game.
; 348  : 						kNotification.m_bNeedsBroadcast = false;

	mov	edx, DWORD PTR _kNotification$220348[ebp]
	mov	BYTE PTR [edx+88], 0
$LN10@Update:

; 349  : 					}
; 350  : 				}
; 351  : 			}
; 352  : 		}
; 353  : 
; 354  : 		iIndex++;

	mov	eax, DWORD PTR _iIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$[ebp], eax

; 355  : 
; 356  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T223342[ebp], ecx
	mov	edx, DWORD PTR $T223342[ebp]
	mov	eax, DWORD PTR $T223342[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@Update

; 357  : 		{
; 358  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@Update:

; 359  : 		}
; 360  : 	}

	jmp	$LN12@Update
$LN13@Update:

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Update@CvNotifications@@QAEXXZ ENDP			; CvNotifications::Update
_TEXT	ENDS
PUBLIC	?IsNotificationEndOfTurnExpired@CvNotifications@@QAE_NH@Z ; CvNotifications::IsNotificationEndOfTurnExpired
PUBLIC	?EndOfTurnCleanup@CvNotifications@@QAEXXZ	; CvNotifications::EndOfTurnCleanup
; Function compile flags: /Odtp
;	COMDAT ?EndOfTurnCleanup@CvNotifications@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223360 = -8						; size = 4
_iIndex$ = -4						; size = 4
?EndOfTurnCleanup@CvNotifications@@QAEXXZ PROC		; CvNotifications::EndOfTurnCleanup, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN7@EndOfTurnC:

; 367  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	$LN8@EndOfTurnC

; 368  : 	{
; 369  : 		if(!m_aNotifications[iIndex].m_bDismissed)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN5@EndOfTurnC

; 370  : 		{
; 371  : 			if(IsNotificationEndOfTurnExpired(iIndex))

	mov	edx, DWORD PTR _iIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationEndOfTurnExpired@CvNotifications@@QAE_NH@Z ; CvNotifications::IsNotificationEndOfTurnExpired
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@EndOfTurnC

; 372  : 			{
; 373  : 				if (m_aNotifications[iIndex].m_bWaitExtraTurn)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+90]
	test	ecx, ecx
	je	SHORT $LN16@EndOfTurnC

; 374  : 					m_aNotifications[iIndex].m_bWaitExtraTurn = false;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx+90], 0

; 375  : 				else

	jmp	SHORT $LN5@EndOfTurnC

; 376  : 					Dismiss(m_aNotifications[iIndex].m_iLookupIndex, /*bUserInvoked*/ false);

$LN16@EndOfTurnC:
	push	0
	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+84]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dismiss@CvNotifications@@QAEXH_N@Z	; CvNotifications::Dismiss
$LN5@EndOfTurnC:

; 377  : 			}
; 378  : 		}
; 379  : 
; 380  : 		iIndex++;

	mov	eax, DWORD PTR _iIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$[ebp], eax

; 381  : 
; 382  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T223360[ebp], ecx
	mov	edx, DWORD PTR $T223360[ebp]
	mov	eax, DWORD PTR $T223360[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@EndOfTurnC

; 383  : 		{
; 384  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@EndOfTurnC:

; 385  : 		}
; 386  : 	}

	jmp	$LN7@EndOfTurnC
$LN8@EndOfTurnC:

; 387  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndOfTurnCleanup@CvNotifications@@QAEXXZ ENDP		; CvNotifications::EndOfTurnCleanup
_TEXT	ENDS
PUBLIC	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
PUBLIC	?AddByName@CvNotifications@@QAEHPBD00HHHH@Z	; CvNotifications::AddByName
EXTRN	?Calc@FCRC@@QBEKPBXHK@Z:PROC			; FCRC::Calc
EXTRN	?g_CRC32@@3VFCRC@@A:BYTE			; g_CRC32
; Function compile flags: /Odtp
;	COMDAT ?AddByName@CvNotifications@@QAEHPBD00HHHH@Z
_TEXT	SEGMENT
tv89 = -28						; size = 4
tv87 = -24						; size = 4
tv128 = -17						; size = 1
tv93 = -16						; size = 4
tv90 = -12						; size = 4
_this$ = -8						; size = 4
$T223377 = -4						; size = 4
_pszNotificationName$ = 8				; size = 4
_strMessage$ = 12					; size = 4
_strSummary$ = 16					; size = 4
_iX$ = 20						; size = 4
_iY$ = 24						; size = 4
_iGameDataIndex$ = 28					; size = 4
_iExtraGameData$ = 32					; size = 4
?AddByName@CvNotifications@@QAEHPBD00HHHH@Z PROC	; CvNotifications::AddByName, COMDAT
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	if (pszNotificationName && pszNotificationName[0] != 0)

	cmp	DWORD PTR _pszNotificationName$[ebp], 0
	je	$LN1@AddByName
	mov	eax, DWORD PTR _pszNotificationName$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@AddByName

; 393  : 	{
; 394  : 		return Add((NotificationTypes) FString::Hash(pszNotificationName), strMessage, strSummary, iX, iY, iGameDataIndex, iExtraGameData);

	cmp	DWORD PTR _pszNotificationName$[ebp], 0
	je	SHORT $LN8@AddByName
	mov	edx, DWORD PTR _pszNotificationName$[ebp]
	mov	DWORD PTR tv90[ebp], edx
	mov	eax, DWORD PTR tv90[ebp]
	add	eax, 1
	mov	DWORD PTR tv93[ebp], eax
$LL10@AddByName:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv128[ebp], dl
	add	DWORD PTR tv90[ebp], 1
	cmp	BYTE PTR tv128[ebp], 0
	jne	SHORT $LL10@AddByName
	mov	eax, DWORD PTR tv90[ebp]
	sub	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN6@AddByName
$LN8@AddByName:
	mov	DWORD PTR tv89[ebp], 0
$LN6@AddByName:
	push	-1
	mov	edx, DWORD PTR tv89[ebp]
	push	edx
	mov	eax, DWORD PTR _pszNotificationName$[ebp]
	push	eax
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc
	mov	DWORD PTR $T223377[ebp], eax
	mov	ecx, DWORD PTR _iExtraGameData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iGameDataIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _iY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSummary$[ebp]
	push	edx
	mov	eax, DWORD PTR _strMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T223377[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
	jmp	SHORT $LN2@AddByName
$LN1@AddByName:

; 395  : 	}
; 396  : 	return -1;

	or	eax, -1
$LN2@AddByName:

; 397  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?AddByName@CvNotifications@@QAEHPBD00HHHH@Z ENDP	; CvNotifications::AddByName
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
PUBLIC	??1Notification@CvNotifications@@QAE@XZ		; CvNotifications::Notification::~Notification
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	?IncrementEndIndex@CvNotifications@@IAEXXZ	; CvNotifications::IncrementEndIndex
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
PUBLIC	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z ; CvNotifications::Notification::operator=
PUBLIC	?RemoveOldestNotification@CvNotifications@@IAEXXZ ; CvNotifications::RemoveOldestNotification
PUBLIC	?IsArrayFull@CvNotifications@@IAE_NXZ		; CvNotifications::IsArrayFull
PUBLIC	?IsNotificationRedundant@CvNotifications@@QAE_NAAUNotification@1@@Z ; CvNotifications::IsNotificationRedundant
PUBLIC	?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z ; CvNotifications::IsNotificationTypeEndOfTurnExpired
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
PUBLIC	__$ArrayPad$
EXTRN	??3CvDllPlot@@SAXPAX@Z:PROC			; CvDllPlot::operator delete
EXTRN	??0CvDllPlot@@QAE@PAVCvPlot@@@Z:PROC		; CvDllPlot::CvDllPlot
EXTRN	??2CvDllPlot@@SAPAXI@Z:PROC			; CvDllPlot::operator new
EXTRN	?isFinalInitialized@CvGame@@QBE_NXZ:PROC	; CvGame::isFinalInitialized
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?isAutoMoves@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isAutoMoves
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?isDebugMode@CvGame@@QBE_NXZ:PROC		; CvGame::isDebugMode
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
xdata$x	ENDS
;	COMDAT ?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z
_TEXT	SEGMENT
tv322 = -300						; size = 4
tv304 = -296						; size = 4
tv290 = -292						; size = 4
tv280 = -288						; size = 4
tv438 = -284						; size = 4
tv487 = -280						; size = 4
tv235 = -276						; size = 4
_this$ = -272						; size = 4
$T223620 = -268						; size = 4
$T223615 = -264						; size = 4
$T223607 = -260						; size = 4
$T223600 = -256						; size = 4
_inst$223595 = -252					; size = 4
$T223591 = -248						; size = 4
$T223579 = -244						; size = 4
$T223534 = -240						; size = 4
$T223521 = -236						; size = 4
$T223517 = -232						; size = 4
$T223510 = -228						; size = 4
$T223506 = -221						; size = 1
$T223495 = -220						; size = 4
$T223491 = -213						; size = 1
_iMapY$223572 = -212					; size = 4
_iMapX$223571 = -208					; size = 4
$T223484 = -204						; size = 4
$T223480 = -200						; size = 4
$T223476 = -196						; size = 4
$T223475 = -192						; size = 4
$T223471 = -188						; size = 4
$T223467 = -184						; size = 4
$T223463 = -180						; size = 4
$T223445 = -172						; size = 4
$T223440 = -168						; size = 4
$T223432 = -164						; size = 4
$T223428 = -160						; size = 4
$T223424 = -156						; size = 4
$T223406 = -152						; size = 4
$T223398 = -148						; size = 4
$T223394 = -144						; size = 4
$T223387 = -140						; size = 4
$T223384 = -136						; size = 4
$T223383 = -132						; size = 4
$T223382 = -128						; size = 4
_pDllPlot$220460 = -124					; size = 4
_pPlot$220407 = -120					; size = 4
_newNotification$ = -116				; size = 92
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eNotificationType$ = 8					; size = 4
_strMessage$ = 12					; size = 4
_strSummary$ = 16					; size = 4
_iX$ = 20						; size = 4
_iY$ = 24						; size = 4
_iGameDataIndex$ = 28					; size = 4
_iExtraGameData$ = 32					; size = 4
?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z PROC ; CvNotifications::Add, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	// if the player is not human, do not record
; 403  : 	if(!GET_PLAYER(m_ePlayer).isHuman())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223394[ebp], ecx
	mov	ecx, DWORD PTR $T223394[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN11@Add

; 404  : 	{
; 405  : 		return -1;

	or	eax, -1
	jmp	$LN12@Add
$LN11@Add:

; 406  : 	}
; 407  : 
; 408  : 	// If we're in debug mode, don't do anything
; 409  : 	if(GC.getGame().isDebugMode())

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223398[ebp], eax
	mov	ecx, DWORD PTR $T223398[ebp]
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Add

; 410  : 		return -1;

	or	eax, -1
	jmp	$LN12@Add
$LN10@Add:

; 411  : 
; 412  : 
; 413  : 	Notification newNotification;

	lea	edx, DWORD PTR _newNotification$[ebp+8]
	mov	DWORD PTR $T223406[ebp], edx
	mov	ecx, DWORD PTR $T223406[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	call	??0CvString@@QAE@XZ			; CvString::CvString
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 414  : 	newNotification.Clear();

	lea	ecx, DWORD PTR _newNotification$[ebp]
	call	?Clear@Notification@CvNotifications@@QAEXXZ ; CvNotifications::Notification::Clear

; 415  : 	newNotification.m_ePlayerID = m_ePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newNotification$[ebp+4], ecx

; 416  : 	newNotification.m_eNotificationType = eNotificationType;

	mov	edx, DWORD PTR _eNotificationType$[ebp]
	mov	DWORD PTR _newNotification$[ebp], edx

; 417  : 	newNotification.m_strMessage = strMessage;

	cmp	DWORD PTR _strMessage$[ebp], 0
	je	SHORT $LN31@Add
	mov	eax, DWORD PTR _strMessage$[ebp]
	push	eax
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN32@Add
$LN31@Add:
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN32@Add:

; 418  : 	newNotification.m_strSummary = strSummary;

	cmp	DWORD PTR _strSummary$[ebp], 0
	je	SHORT $LN35@Add
	mov	ecx, DWORD PTR _strSummary$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN36@Add
$LN35@Add:
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN36@Add:

; 419  : 	newNotification.m_iX = iX;

	mov	edx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _newNotification$[ebp+64], edx

; 420  : 	newNotification.m_iY = iY;

	mov	eax, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _newNotification$[ebp+68], eax

; 421  : 	newNotification.m_iGameDataIndex = iGameDataIndex;

	mov	ecx, DWORD PTR _iGameDataIndex$[ebp]
	mov	DWORD PTR _newNotification$[ebp+72], ecx

; 422  : 	newNotification.m_iExtraGameData = iExtraGameData;

	mov	edx, DWORD PTR _iExtraGameData$[ebp]
	mov	DWORD PTR _newNotification$[ebp+76], edx

; 423  : 	newNotification.m_iTurn = GC.getGame().getGameTurn();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223424[ebp], eax
	mov	ecx, DWORD PTR $T223424[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	DWORD PTR _newNotification$[ebp+80], eax

; 424  : 	newNotification.m_iLookupIndex = m_iCurrentLookupIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _newNotification$[ebp+84], edx

; 425  : 	newNotification.m_bNeedsBroadcast = true;

	mov	BYTE PTR _newNotification$[ebp+88], 1

; 426  : 	newNotification.m_bDismissed = false;

	mov	BYTE PTR _newNotification$[ebp+89], 0

; 427  : 	newNotification.m_bWaitExtraTurn = false;

	mov	BYTE PTR _newNotification$[ebp+90], 0

; 428  : 
; 429  : 	// Is this notification being added during the player's auto-moves and will it expire at the end of the turn?
; 430  : 	// If so, set a flag so the notification will stick around for an extra turn.
; 431  : 	if (GET_PLAYER(m_ePlayer).isTurnActive() && GET_PLAYER(m_ePlayer).isAutoMoves() && IsNotificationTypeEndOfTurnExpired(eNotificationType))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223428[ebp], ecx
	mov	ecx, DWORD PTR $T223428[ebp]
	call	?isTurnActive@CvPlayer@@QBE_NXZ		; CvPlayer::isTurnActive
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@Add
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223432[ebp], ecx
	mov	ecx, DWORD PTR $T223432[ebp]
	call	?isAutoMoves@CvPlayer@@QBE_NXZ		; CvPlayer::isAutoMoves
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@Add
	push	-1
	mov	eax, DWORD PTR _eNotificationType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z ; CvNotifications::IsNotificationTypeEndOfTurnExpired
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Add

; 432  : 		newNotification.m_bWaitExtraTurn = true;

	mov	BYTE PTR _newNotification$[ebp+90], 1
$LN9@Add:

; 433  : 
; 434  : 	if(IsNotificationRedundant(newNotification))

	lea	edx, DWORD PTR _newNotification$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationRedundant@CvNotifications@@QAE_NAAUNotification@1@@Z ; CvNotifications::IsNotificationRedundant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Add

; 435  : 	{
; 436  : 		// redundant notification
; 437  : 		return -1;

	mov	DWORD PTR $T223382[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	mov	DWORD PTR $T223440[ebp], ecx
	mov	ecx, DWORD PTR $T223440[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	edx, DWORD PTR _newNotification$[ebp+8]
	mov	DWORD PTR $T223445[ebp], edx
	mov	ecx, DWORD PTR $T223445[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T223382[ebp]
	jmp	$LN12@Add
$LN8@Add:

; 438  : 	}
; 439  : 
; 440  : 	if(IsArrayFull())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsArrayFull@CvNotifications@@IAE_NXZ	; CvNotifications::IsArrayFull
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN54@Add

; 441  : 	{
; 442  : 		RemoveOldestNotification();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveOldestNotification@CvNotifications@@IAEXXZ ; CvNotifications::RemoveOldestNotification

; 443  : 	}
; 444  : 
; 445  : 	m_aNotifications[m_iNotificationsEndIndex] = newNotification;

$LN54@Add:
	lea	ecx, DWORD PTR _newNotification$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	imul	ecx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+8]
	call	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z

; 446  : 
; 447  : 	if(GC.getGame().isFinalInitialized())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223463[ebp], ecx
	mov	ecx, DWORD PTR $T223463[ebp]
	call	?isFinalInitialized@CvGame@@QBE_NXZ	; CvGame::isFinalInitialized
	movzx	edx, al
	test	edx, edx
	je	$LN6@Add

; 448  : 	{
; 449  : 		// If the notification is for the 'active' player and that active player actually has his turn active or its not hotseat, then show the notification, else wait
; 450  : 		// The 'active' player is only set to a human and during the AI turn, the 'active' player is the last human to do their turn.
; 451  : 		if(newNotification.m_ePlayerID == GC.getGame().getActivePlayer() && (!CvPreGame::isHotSeatGame() || GET_PLAYER(GC.getGame().getActivePlayer()).isTurnActive()))

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223467[ebp], eax
	mov	ecx, DWORD PTR $T223467[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR _newNotification$[ebp+4], eax
	jne	$LN5@Add
	call	?isHotSeatGame@CvPreGame@@YA_NXZ	; CvPreGame::isHotSeatGame
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@Add
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223471[ebp], edx
	mov	ecx, DWORD PTR $T223471[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	DWORD PTR $T223475[ebp], eax
	mov	eax, DWORD PTR $T223475[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223476[ebp], eax
	mov	ecx, DWORD PTR $T223476[ebp]
	call	?isTurnActive@CvPlayer@@QBE_NXZ		; CvPlayer::isTurnActive
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@Add
$LN4@Add:

; 452  : 		{
; 453  : 			GC.GetEngineUserInterface()->AddNotification(newNotification.m_iLookupIndex, newNotification.m_eNotificationType, newNotification.m_strMessage.c_str(), newNotification.m_strSummary.c_str(), newNotification.m_iGameDataIndex, newNotification.m_iExtraGameData, m_ePlayer, iX, iY);

	mov	edx, DWORD PTR $T223480[ebp]
	mov	DWORD PTR tv235[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv235[ebp], eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _newNotification$[ebp+76]
	push	edx
	mov	eax, DWORD PTR _newNotification$[ebp+72]
	push	eax
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _newNotification$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newNotification$[ebp+84]
	push	edx
	mov	eax, DWORD PTR tv235[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv235[ebp]
	mov	eax, DWORD PTR [edx+204]
	call	eax

; 454  : 
; 455  : 			// Don't show effect with production notification
; 456  : 			if(eNotificationType != NOTIFICATION_PRODUCTION)

	cmp	DWORD PTR _eNotificationType$[ebp], 1996573794 ; 77014c62H
	je	$LN117@Add

; 457  : 			{
; 458  : 				CvPlot* pPlot = GC.getMap().plot(iX, iY);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T223484[ebp], ecx
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN72@Add
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN73@Add
$LN72@Add:
	mov	DWORD PTR _pPlot$220407[ebp], 0
	jmp	$LN74@Add
$LN73@Add:
	mov	edx, DWORD PTR $T223484[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T223491[ebp], al
	mov	ecx, DWORD PTR $T223484[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T223495[ebp], edx
	movzx	eax, BYTE PTR $T223491[ebp]
	test	eax, eax
	je	SHORT $LN85@Add
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN84@Add
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T223495[ebp]
	add	edx, DWORD PTR $T223495[ebp]
	mov	DWORD PTR _iMapX$223571[ebp], edx
	jmp	SHORT $LN86@Add
	jmp	SHORT $LN85@Add
$LN84@Add:
	mov	ecx, DWORD PTR _iX$[ebp]
	cmp	ecx, DWORD PTR $T223495[ebp]
	jl	SHORT $LN85@Add
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T223495[ebp]
	mov	DWORD PTR _iMapX$223571[ebp], edx
	jmp	SHORT $LN86@Add
$LN85@Add:
	mov	edx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$223571[ebp], edx
$LN86@Add:
	mov	eax, DWORD PTR $T223484[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T223506[ebp], cl
	mov	edx, DWORD PTR $T223484[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T223510[ebp], eax
	movzx	ecx, BYTE PTR $T223506[ebp]
	push	ecx
	mov	edx, DWORD PTR $T223510[ebp]
	push	edx
	mov	eax, DWORD PTR _iY$[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$223572[ebp], eax
	cmp	DWORD PTR _iMapX$223571[ebp], 0
	jl	SHORT $LN94@Add
	mov	ecx, DWORD PTR $T223484[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T223517[ebp], edx
	mov	eax, DWORD PTR _iMapX$223571[ebp]
	cmp	eax, DWORD PTR $T223517[ebp]
	jge	SHORT $LN94@Add
	cmp	DWORD PTR _iMapY$223572[ebp], 0
	jl	SHORT $LN94@Add
	mov	ecx, DWORD PTR $T223484[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T223521[ebp], edx
	mov	eax, DWORD PTR _iMapY$223572[ebp]
	cmp	eax, DWORD PTR $T223521[ebp]
	jge	SHORT $LN94@Add
	mov	DWORD PTR tv487[ebp], 1
	jmp	SHORT $LN92@Add
$LN94@Add:
	mov	DWORD PTR tv487[ebp], 0
$LN92@Add:
	cmp	DWORD PTR tv487[ebp], 0
	je	SHORT $LN76@Add
	mov	ecx, DWORD PTR $T223484[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T223534[ebp], edx
	mov	eax, DWORD PTR _iMapY$223572[ebp]
	imul	eax, DWORD PTR $T223534[ebp]
	add	eax, DWORD PTR _iMapX$223571[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T223484[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv438[ebp], eax
	jmp	SHORT $LN77@Add
$LN76@Add:
	mov	DWORD PTR tv438[ebp], 0
$LN77@Add:
	mov	edx, DWORD PTR tv438[ebp]
	mov	DWORD PTR _pPlot$220407[ebp], edx
$LN74@Add:

; 459  : 				if(pPlot != NULL)

	cmp	DWORD PTR _pPlot$220407[ebp], 0
	je	$LN2@Add

; 460  : 				{
; 461  : 					auto_ptr<ICvPlot1> pDllPlot(new CvDllPlot(pPlot));

	push	12					; 0000000cH
	call	??2CvDllPlot@@SAPAXI@Z			; CvDllPlot::operator new
	add	esp, 4
	mov	DWORD PTR $T223384[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T223384[ebp], 0
	je	SHORT $LN14@Add
	mov	eax, DWORD PTR _pPlot$220407[ebp]
	push	eax
	mov	ecx, DWORD PTR $T223384[ebp]
	call	??0CvDllPlot@@QAE@PAVCvPlot@@@Z		; CvDllPlot::CvDllPlot
	mov	DWORD PTR tv280[ebp], eax
	jmp	SHORT $LN15@Add
$LN14@Add:
	mov	DWORD PTR tv280[ebp], 0
$LN15@Add:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR $T223383[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T223383[ebp]
	mov	DWORD PTR _pDllPlot$220460[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 462  : 					gDLL->GameplayDoFX(pDllPlot.get());

	mov	eax, DWORD PTR $T223579[ebp]
	mov	DWORD PTR tv290[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv290[ebp], ecx
	push	-1
	mov	edx, DWORD PTR _pDllPlot$220460[ebp]
	push	edx
	mov	eax, DWORD PTR tv290[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv290[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax

; 463  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pDllPlot$220460[ebp]
	mov	DWORD PTR $T223591[ebp], ecx
	cmp	DWORD PTR $T223591[ebp], 0
	je	SHORT $LN110@Add
	mov	edx, DWORD PTR $T223591[ebp]
	mov	DWORD PTR _inst$223595[ebp], edx
	mov	eax, DWORD PTR _inst$223595[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$223595[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN110@Add:

; 464  : 				else

	jmp	SHORT $LN117@Add
$LN2@Add:

; 465  : 				{
; 466  : 					gDLL->GameplayDoFX(NULL);

	mov	ecx, DWORD PTR $T223600[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv304[ebp], edx
	push	-1
	push	0
	mov	eax, DWORD PTR tv304[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv304[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax

; 467  : 				}
; 468  : 
; 469  : 
; 470  : 			}
; 471  : 			m_aNotifications[m_iNotificationsEndIndex].m_bNeedsBroadcast = false;

$LN117@Add:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx+88], 0
$LN5@Add:

; 472  : 		}
; 473  : 
; 474  : 		gDLL->GameplayMinimapNotification(iX, iY, m_iCurrentLookupIndex+1);	// The index is used to uniquely identify each flashing dot on the minimap. We're adding 1 since the selected unit is always 0. It ain't pretty, but it'll work

	mov	edx, DWORD PTR $T223607[ebp]
	mov	DWORD PTR tv322[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv322[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _iY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iX$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv322[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv322[ebp]
	mov	edx, DWORD PTR [eax+800]
	call	edx
$LN6@Add:

; 475  : 	}
; 476  : 
; 477  : 	IncrementEndIndex();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementEndIndex@CvNotifications@@IAEXXZ ; CvNotifications::IncrementEndIndex

; 478  : 
; 479  : 	m_iCurrentLookupIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 480  : 
; 481  : 	return newNotification.m_iLookupIndex;

	mov	eax, DWORD PTR _newNotification$[ebp+84]
	mov	DWORD PTR $T223387[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _newNotification$[ebp+36]
	mov	DWORD PTR $T223615[ebp], ecx
	mov	ecx, DWORD PTR $T223615[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	edx, DWORD PTR _newNotification$[ebp+8]
	mov	DWORD PTR $T223620[ebp], edx
	mov	ecx, DWORD PTR $T223620[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T223387[ebp]
$LN12@Add:

; 482  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$3:
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$0:
	lea	ecx, DWORD PTR _newNotification$[ebp]
	jmp	??1Notification@CvNotifications@@QAE@XZ
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$6:
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$1:
	mov	eax, DWORD PTR $T223384[ebp]
	push	eax
	call	??3CvDllPlot@@SAXPAX@Z			; CvDllPlot::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$2:
	lea	ecx, DWORD PTR _pDllPlot$220460[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z$10:
	lea	ecx, DWORD PTR _newNotification$[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-292]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ENDP ; CvNotifications::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Notification@CvNotifications@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Notification@CvNotifications@@QAE@XZ$0
__ehfuncinfo$??1Notification@CvNotifications@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Notification@CvNotifications@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1Notification@CvNotifications@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T223646 = -20						; size = 4
$T223641 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Notification@CvNotifications@@QAE@XZ PROC		; CvNotifications::Notification::~Notification, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Notification@CvNotifications@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T223641[ebp], eax
	mov	ecx, DWORD PTR $T223641[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T223646[ebp], ecx
	mov	ecx, DWORD PTR $T223646[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Notification@CvNotifications@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1Notification@CvNotifications@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Notification@CvNotifications@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Notification@CvNotifications@@QAE@XZ ENDP		; CvNotifications::Notification::~Notification
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223662 = -8						; size = 4
$T223658 = -4						; size = 4
___that$ = 8						; size = 4
??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z PROC	; CvNotifications::Notification::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T223658[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR $T223658[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T223662[ebp], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR $T223662[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+72], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+76], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [ecx+80], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+84], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+88]
	mov	BYTE PTR [ecx+88], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+89]
	mov	BYTE PTR [ecx+89], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+90]
	mov	BYTE PTR [ecx+90], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z ENDP	; CvNotifications::Notification::operator=
_TEXT	ENDS
PUBLIC	?Activate@CvNotifications@@QAEXAAUNotification@1@@Z ; CvNotifications::Activate
PUBLIC	?Activate@CvNotifications@@QAEXH@Z		; CvNotifications::Activate
; Function compile flags: /Odtp
;	COMDAT ?Activate@CvNotifications@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223674 = -8						; size = 4
_iIndex$ = -4						; size = 4
_iLookupIndex$ = 8					; size = 4
?Activate@CvNotifications@@QAEXH@Z PROC			; CvNotifications::Activate, COMDAT
; _this$ = ecx

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN4@Activate:

; 488  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN5@Activate

; 489  : 	{
; 490  : 		if(m_aNotifications[iIndex].m_iLookupIndex == iLookupIndex)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+84]
	cmp	ecx, DWORD PTR _iLookupIndex$[ebp]
	jne	SHORT $LN2@Activate

; 491  : 		{
; 492  : 			Activate(m_aNotifications[iIndex]);

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Activate@CvNotifications@@QAEXAAUNotification@1@@Z ; CvNotifications::Activate

; 493  : 			break;

	jmp	SHORT $LN5@Activate
$LN2@Activate:

; 494  : 		}
; 495  : 		iIndex++;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iIndex$[ebp], ecx

; 496  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T223674[ebp], edx
	mov	eax, DWORD PTR $T223674[ebp]
	mov	ecx, DWORD PTR $T223674[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@Activate

; 497  : 		{
; 498  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@Activate:

; 499  : 		}
; 500  : 	}

	jmp	SHORT $LN4@Activate
$LN5@Activate:

; 501  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Activate@CvNotifications@@QAEXH@Z ENDP			; CvNotifications::Activate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Dismiss@CvNotifications@@QAEXH_N@Z
_TEXT	SEGMENT
tv146 = -36						; size = 4
tv131 = -32						; size = 4
tv85 = -28						; size = 4
_this$ = -24						; size = 4
$T223704 = -20						; size = 4
$T223700 = -16						; size = 4
$T223696 = -12						; size = 4
$T223686 = -8						; size = 4
_iIndex$ = -4						; size = 4
_iLookupIndex$ = 8					; size = 4
_bUserInvoked$ = 12					; size = 1
?Dismiss@CvNotifications@@QAEXH_N@Z PROC		; CvNotifications::Dismiss, COMDAT
; _this$ = ecx

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN9@Dismiss:

; 507  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	$LN10@Dismiss

; 508  : 	{
; 509  : 		if(m_aNotifications[iIndex].m_iLookupIndex == iLookupIndex)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+84]
	cmp	ecx, DWORD PTR _iLookupIndex$[ebp]
	jne	$LN7@Dismiss

; 510  : 		{
; 511  : 			m_aNotifications[iIndex].m_bDismissed = true;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx+89], 1

; 512  : 			GC.GetEngineUserInterface()->RemoveNotification(m_aNotifications[iIndex].m_iLookupIndex, m_ePlayer);

	mov	edx, DWORD PTR $T223686[ebp]
	mov	DWORD PTR tv85[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+84]
	push	eax
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax

; 513  : 
; 514  : 			switch(m_aNotifications[iIndex].m_eNotificationType)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv131[ebp], ecx
	cmp	DWORD PTR tv131[ebp], 623640104		; 252bfe28H
	je	SHORT $LN4@Dismiss
	jmp	SHORT $LN5@Dismiss
$LN4@Dismiss:

; 515  : 			{
; 516  : 			case NOTIFICATION_POLICY:
; 517  : 			{
; 518  : 				if(m_ePlayer == GC.getGame().getActivePlayer() && bUserInvoked)

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223696[ebp], edx
	mov	ecx, DWORD PTR $T223696[ebp]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN5@Dismiss
	movzx	edx, BYTE PTR _bUserInvoked$[ebp]
	test	edx, edx
	je	SHORT $LN5@Dismiss

; 519  : 				{
; 520  : 					GC.GetEngineUserInterface()->SetPolicyNotificationSeen(true);

	mov	eax, DWORD PTR $T223700[ebp]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv146[ebp], ecx
	push	1
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [eax+512]
	call	edx
$LN5@Dismiss:

; 521  : 				}
; 522  : 			}
; 523  : 			default:
; 524  : 				break;
; 525  : 			}
; 526  : 
; 527  : 			break;

	jmp	SHORT $LN10@Dismiss
$LN7@Dismiss:

; 528  : 		}
; 529  : 
; 530  : 		iIndex++;

	mov	eax, DWORD PTR _iIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$[ebp], eax

; 531  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T223704[ebp], ecx
	mov	edx, DWORD PTR $T223704[ebp]
	mov	eax, DWORD PTR $T223704[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@Dismiss

; 532  : 		{
; 533  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@Dismiss:

; 534  : 		}
; 535  : 	}

	jmp	$LN9@Dismiss
$LN10@Dismiss:

; 536  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Dismiss@CvNotifications@@QAEXH_N@Z ENDP		; CvNotifications::Dismiss
_TEXT	ENDS
PUBLIC	?MayUserDismiss@CvNotifications@@QAE_NH@Z	; CvNotifications::MayUserDismiss
EXTRN	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z:PROC ; CvGame::isOption
; Function compile flags: /Odtp
;	COMDAT ?MayUserDismiss@CvNotifications@@QAE_NH@Z
_TEXT	SEGMENT
tv77 = -20						; size = 4
_this$ = -16						; size = 4
$T223726 = -12						; size = 4
$T223722 = -8						; size = 4
_iIndex$ = -4						; size = 4
_iLookupIndex$ = 8					; size = 4
?MayUserDismiss@CvNotifications@@QAE_NH@Z PROC		; CvNotifications::MayUserDismiss, COMDAT
; _this$ = ecx

; 540  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 541  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN11@MayUserDis:

; 542  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	$LN10@MayUserDis

; 543  : 	{
; 544  : 		if(m_aNotifications[iIndex].m_iLookupIndex == iLookupIndex)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+84]
	cmp	ecx, DWORD PTR _iLookupIndex$[ebp]
	jne	$LN9@MayUserDis

; 545  : 		{
; 546  : 			switch(m_aNotifications[iIndex].m_eNotificationType)

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv77[ebp], edx
	cmp	DWORD PTR tv77[ebp], 623640104		; 252bfe28H
	jg	$LN14@MayUserDis
	cmp	DWORD PTR tv77[ebp], 623640104		; 252bfe28H
	je	$LN5@MayUserDis
	cmp	DWORD PTR tv77[ebp], -372818113		; e9c73f3fH
	jg	SHORT $LN15@MayUserDis
	cmp	DWORD PTR tv77[ebp], -372818113		; e9c73f3fH
	je	$LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], -1746998481	; 97deeb2fH
	jg	SHORT $LN16@MayUserDis
	cmp	DWORD PTR tv77[ebp], -1746998481	; 97deeb2fH
	je	$LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], -2068323322	; 84b7e406H
	je	$LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], -1774532806	; 963ac73aH
	je	$LN6@MayUserDis
	jmp	$LN2@MayUserDis
$LN16@MayUserDis:
	cmp	DWORD PTR tv77[ebp], -1421067341	; ab4c3bb3H
	je	$LN6@MayUserDis
	jmp	$LN2@MayUserDis
$LN15@MayUserDis:
	cmp	DWORD PTR tv77[ebp], 294822899		; 1192a3f3H
	jg	SHORT $LN17@MayUserDis
	cmp	DWORD PTR tv77[ebp], 294822899		; 1192a3f3H
	je	$LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 84632199		; 050b6287H
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 88900711		; 054c8467H
	je	SHORT $LN6@MayUserDis
	jmp	$LN2@MayUserDis
$LN17@MayUserDis:
	cmp	DWORD PTR tv77[ebp], 507779013		; 1e4417c5H
	je	SHORT $LN6@MayUserDis
	jmp	$LN2@MayUserDis
$LN14@MayUserDis:
	cmp	DWORD PTR tv77[ebp], 1523558135		; 5acfa6f7H
	jg	SHORT $LN18@MayUserDis
	cmp	DWORD PTR tv77[ebp], 1523558135		; 5acfa6f7H
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 1279997337		; 4c4b3599H
	jg	SHORT $LN19@MayUserDis
	cmp	DWORD PTR tv77[ebp], 1279997337		; 4c4b3599H
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 755914060		; 2d0e554cH
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 1218150582		; 489b80b6H
	je	SHORT $LN6@MayUserDis
	jmp	SHORT $LN2@MayUserDis
$LN19@MayUserDis:
	cmp	DWORD PTR tv77[ebp], 1376002242		; 520420c2H
	je	SHORT $LN6@MayUserDis
	jmp	SHORT $LN2@MayUserDis
$LN18@MayUserDis:
	cmp	DWORD PTR tv77[ebp], 1989681641		; 769821e9H
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 1996573794		; 77014c62H
	je	SHORT $LN6@MayUserDis
	cmp	DWORD PTR tv77[ebp], 2128612861		; 7ee00dfdH
	je	SHORT $LN6@MayUserDis
	jmp	SHORT $LN2@MayUserDis
$LN6@MayUserDis:

; 547  : 			{
; 548  : 			case NOTIFICATION_DIPLO_VOTE:
; 549  : 			case NOTIFICATION_PRODUCTION:
; 550  : 			case NOTIFICATION_TECH:
; 551  : 			case NOTIFICATION_FREE_TECH:
; 552  : 			case NOTIFICATION_FREE_POLICY:
; 553  : 			case NOTIFICATION_FREE_GREAT_PERSON:
; 554  : 			case NOTIFICATION_FOUND_PANTHEON:
; 555  : 			case NOTIFICATION_FOUND_RELIGION:
; 556  : 			case NOTIFICATION_ENHANCE_RELIGION:
; 557  : 			case NOTIFICATION_SPY_STOLE_TECH:
; 558  : 			case NOTIFICATION_MAYA_LONG_COUNT:
; 559  : 			case NOTIFICATION_FAITH_GREAT_PERSON:
; 560  : 			case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 561  : 			case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 562  : 			case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 563  : 			case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 564  : 			case NOTIFICATION_CHOOSE_IDEOLOGY:
; 565  : 				return false;

	xor	al, al
	jmp	SHORT $LN12@MayUserDis

; 566  : 				break;

	jmp	SHORT $LN9@MayUserDis
$LN5@MayUserDis:

; 567  : 
; 568  : 			case NOTIFICATION_POLICY:
; 569  : 				if(GC.getGame().isOption(GAMEOPTION_POLICY_SAVING))

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223722[ebp], eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T223722[ebp]
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@MayUserDis

; 570  : 				{
; 571  : 					return true;

	mov	al, 1
	jmp	SHORT $LN12@MayUserDis

; 572  : 					break;

	jmp	SHORT $LN9@MayUserDis

; 573  : 				}
; 574  : 				else

	jmp	SHORT $LN2@MayUserDis
$LN4@MayUserDis:

; 575  : 				{
; 576  : 					return false;

	xor	al, al
	jmp	SHORT $LN12@MayUserDis

; 577  : 					break;

	jmp	SHORT $LN9@MayUserDis
$LN2@MayUserDis:

; 578  : 				}
; 579  : 
; 580  : 			default:
; 581  : 				return true;

	mov	al, 1
	jmp	SHORT $LN12@MayUserDis
$LN9@MayUserDis:

; 582  : 				break;
; 583  : 			}
; 584  : 		}
; 585  : 
; 586  : 		iIndex++;

	mov	edx, DWORD PTR _iIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$[ebp], edx

; 587  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223726[ebp], eax
	mov	ecx, DWORD PTR $T223726[ebp]
	mov	edx, DWORD PTR $T223726[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@MayUserDis

; 588  : 		{
; 589  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@MayUserDis:

; 590  : 		}
; 591  : 	}

	jmp	$LN11@MayUserDis
$LN10@MayUserDis:

; 592  : 
; 593  : 	return false;

	xor	al, al
$LN12@MayUserDis:

; 594  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MayUserDismiss@CvNotifications@@QAE_NH@Z ENDP		; CvNotifications::MayUserDismiss
_TEXT	ENDS
PUBLIC	?Rebroadcast@CvNotifications@@QAEXXZ		; CvNotifications::Rebroadcast
; Function compile flags: /Odtp
;	COMDAT ?Rebroadcast@CvNotifications@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223738 = -8						; size = 4
_iIndex$ = -4						; size = 4
?Rebroadcast@CvNotifications@@QAEXXZ PROC		; CvNotifications::Rebroadcast, COMDAT
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$[ebp], ecx
$LN4@Rebroadcas:

; 600  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN5@Rebroadcas

; 601  : 	{
; 602  : 		if(!m_aNotifications[iIndex].m_bDismissed)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN2@Rebroadcas

; 603  : 		{
; 604  : 			m_aNotifications[iIndex].m_bNeedsBroadcast = true;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+edx+88], 1
$LN2@Rebroadcas:

; 605  : 		}
; 606  : 
; 607  : 		iIndex++;

	mov	edx, DWORD PTR _iIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$[ebp], edx

; 608  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223738[ebp], eax
	mov	ecx, DWORD PTR $T223738[ebp]
	mov	edx, DWORD PTR $T223738[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@Rebroadcas

; 609  : 		{
; 610  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@Rebroadcas:

; 611  : 		}
; 612  : 	}

	jmp	SHORT $LN4@Rebroadcas
$LN5@Rebroadcas:

; 613  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Rebroadcast@CvNotifications@@QAEXXZ ENDP		; CvNotifications::Rebroadcast
_TEXT	ENDS
PUBLIC	?GetEndTurnBlockedType@CvNotifications@@QAE_NAAW4EndTurnBlockingTypes@@AAH@Z ; CvNotifications::GetEndTurnBlockedType
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
; Function compile flags: /Odtp
;	COMDAT ?GetEndTurnBlockedType@CvNotifications@@QAE_NAAW4EndTurnBlockingTypes@@AAH@Z
_TEXT	SEGMENT
tv133 = -44						; size = 4
tv139 = -37						; size = 1
tv90 = -36						; size = 4
tv78 = -32						; size = 4
_this$ = -28						; size = 4
$T223828 = -24						; size = 4
$T223767 = -20						; size = 4
$T223763 = -16						; size = 4
$T223759 = -12						; size = 4
_automaticallyEndTurns$220555 = -5			; size = 1
_iIndex$ = -4						; size = 4
_eBlockingType$ = 8					; size = 4
_iNotificationIndex$ = 12				; size = 4
?GetEndTurnBlockedType@CvNotifications@@QAE_NAAW4EndTurnBlockingTypes@@AAH@Z PROC ; CvNotifications::GetEndTurnBlockedType, COMDAT
; _this$ = ecx

; 616  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 617  : 	eBlockingType = NO_ENDTURN_BLOCKING_TYPE;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], -1

; 618  : 	iNotificationIndex = -1;

	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	DWORD PTR [ecx], -1

; 619  : 
; 620  : 	int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$[ebp], eax
$LN27@GetEndTurn:

; 621  : 	while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN26@GetEndTurn

; 622  : 	{
; 623  : 		if(!m_aNotifications[iIndex].m_bDismissed)

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+eax+89]
	test	eax, eax
	jne	$LN25@GetEndTurn

; 624  : 		{
; 625  : 			switch(m_aNotifications[iIndex].m_eNotificationType)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 507779013		; 1e4417c5H
	jg	$LN32@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 507779013		; 1e4417c5H
	je	$LN17@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -1181197223	; b9985c59H
	jg	SHORT $LN33@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -1181197223	; b9985c59H
	je	$LN22@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -1746998481	; 97deeb2fH
	jg	SHORT $LN34@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -1746998481	; 97deeb2fH
	je	$LN4@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -2068323322	; 84b7e406H
	je	$LN5@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -1774532806	; 963ac73aH
	je	$LN10@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN34@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], -1421067341	; ab4c3bb3H
	je	$LN14@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN33@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 88900711		; 054c8467H
	jg	SHORT $LN35@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 88900711		; 054c8467H
	je	$LN9@GetEndTurn
	cmp	DWORD PTR tv78[ebp], -372818113		; e9c73f3fH
	je	$LN11@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 84632199		; 050b6287H
	je	$LN7@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN35@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 294822899		; 1192a3f3H
	je	$LN3@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN32@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 1376002242		; 520420c2H
	jg	SHORT $LN36@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1376002242		; 520420c2H
	je	$LN8@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1218150582		; 489b80b6H
	jg	SHORT $LN37@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1218150582		; 489b80b6H
	je	$LN15@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 623640104		; 252bfe28H
	je	$LN18@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 755914060		; 2d0e554cH
	je	$LN6@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN37@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 1279997337		; 4c4b3599H
	je	$LN13@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN36@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 1996573794		; 77014c62H
	jg	SHORT $LN38@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1996573794		; 77014c62H
	je	$LN19@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1523558135		; 5acfa6f7H
	je	$LN16@GetEndTurn
	cmp	DWORD PTR tv78[ebp], 1989681641		; 769821e9H
	je	$LN20@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN38@GetEndTurn:
	cmp	DWORD PTR tv78[ebp], 2128612861		; 7ee00dfdH
	je	$LN12@GetEndTurn
	jmp	$LN25@GetEndTurn
$LN22@GetEndTurn:

; 626  : 			{
; 627  : 			case NOTIFICATION_CITY_RANGE_ATTACK:
; 628  : 			{
; 629  : 				bool automaticallyEndTurns = GC.getGame().isGameMultiPlayer() ? GC.GetEngineUserInterface()->IsMPAutoEndTurnEnabled() : GC.GetEngineUserInterface()->IsSPAutoEndTurnEnabled();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223759[ebp], edx
	mov	ecx, DWORD PTR $T223759[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN30@GetEndTurn
	mov	ecx, DWORD PTR $T223763[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv90[ebp], edx
	mov	eax, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+576]
	call	eax
	mov	BYTE PTR tv139[ebp], al
	jmp	SHORT $LN31@GetEndTurn
$LN30@GetEndTurn:
	mov	ecx, DWORD PTR $T223767[ebp]
	mov	DWORD PTR tv133[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv133[ebp], edx
	mov	eax, DWORD PTR tv133[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv133[ebp]
	mov	eax, DWORD PTR [edx+568]
	call	eax
	mov	BYTE PTR tv139[ebp], al
$LN31@GetEndTurn:
	mov	cl, BYTE PTR tv139[ebp]
	mov	BYTE PTR _automaticallyEndTurns$220555[ebp], cl

; 630  : 				if(automaticallyEndTurns)

	movzx	edx, BYTE PTR _automaticallyEndTurns$220555[ebp]
	test	edx, edx
	je	SHORT $LN21@GetEndTurn

; 631  : 				{//City range attacks only block turns if the player is using auto end turn.
; 632  : 					eBlockingType = ENDTURN_BLOCKING_CITY_RANGE_ATTACK;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 10			; 0000000aH

; 633  : 					iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 634  : 					return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn
$LN21@GetEndTurn:

; 635  : 				}
; 636  : 				break;

	jmp	$LN25@GetEndTurn
$LN20@GetEndTurn:

; 637  : 			}
; 638  : 
; 639  : 			case NOTIFICATION_DIPLO_VOTE:
; 640  : 				eBlockingType = ENDTURN_BLOCKING_DIPLO_VOTE;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 4

; 641  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 642  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 643  : 				break;

	jmp	$LN25@GetEndTurn
$LN19@GetEndTurn:

; 644  : 
; 645  : 			case NOTIFICATION_PRODUCTION:
; 646  : 				eBlockingType = ENDTURN_BLOCKING_PRODUCTION;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 2

; 647  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 648  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 649  : 				break;

	jmp	$LN25@GetEndTurn
$LN18@GetEndTurn:

; 650  : 
; 651  : 			case NOTIFICATION_POLICY:
; 652  : 				eBlockingType = ENDTURN_BLOCKING_POLICY;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 0

; 653  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 654  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 655  : 				break;

	jmp	$LN25@GetEndTurn
$LN17@GetEndTurn:

; 656  : 
; 657  : 			case NOTIFICATION_FREE_POLICY:
; 658  : 				eBlockingType = ENDTURN_BLOCKING_FREE_POLICY;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 11			; 0000000bH

; 659  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 660  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 661  : 				break;

	jmp	$LN25@GetEndTurn
$LN16@GetEndTurn:

; 662  : 
; 663  : 			case NOTIFICATION_TECH:
; 664  : 				eBlockingType = ENDTURN_BLOCKING_RESEARCH;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 1

; 665  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 666  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 667  : 				break;

	jmp	$LN25@GetEndTurn
$LN15@GetEndTurn:

; 668  : 
; 669  : 			case NOTIFICATION_FREE_TECH:
; 670  : 				eBlockingType = ENDTURN_BLOCKING_FREE_TECH;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 6

; 671  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 672  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 673  : 				break;

	jmp	$LN25@GetEndTurn
$LN14@GetEndTurn:

; 674  : 
; 675  : 			case NOTIFICATION_FREE_GREAT_PERSON:
; 676  : 				eBlockingType = ENDTURN_BLOCKING_FREE_ITEMS;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 12			; 0000000cH

; 677  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 678  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 679  : 				break;

	jmp	$LN25@GetEndTurn
$LN13@GetEndTurn:

; 680  : 
; 681  : 			case NOTIFICATION_FOUND_PANTHEON:
; 682  : 				eBlockingType = ENDTURN_BLOCKING_FOUND_PANTHEON;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 13			; 0000000dH

; 683  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 684  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 685  : 				break;

	jmp	$LN25@GetEndTurn
$LN12@GetEndTurn:

; 686  : 
; 687  : 			case NOTIFICATION_FOUND_RELIGION:
; 688  : 				eBlockingType = ENDTURN_BLOCKING_FOUND_RELIGION;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 14			; 0000000eH

; 689  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 690  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 691  : 				break;

	jmp	$LN25@GetEndTurn
$LN11@GetEndTurn:

; 692  : 
; 693  : 			case NOTIFICATION_ENHANCE_RELIGION:
; 694  : 				eBlockingType = ENDTURN_BLOCKING_ENHANCE_RELIGION;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 15			; 0000000fH

; 695  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 696  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 697  : 				break;

	jmp	$LN25@GetEndTurn
$LN10@GetEndTurn:

; 698  : 
; 699  : 			case NOTIFICATION_SPY_STOLE_TECH:
; 700  : 				eBlockingType = ENDTURN_BLOCKING_STEAL_TECH;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 16			; 00000010H

; 701  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 702  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 703  : 				break;

	jmp	$LN25@GetEndTurn
$LN9@GetEndTurn:

; 704  : 
; 705  : 			case NOTIFICATION_MAYA_LONG_COUNT:
; 706  : 				eBlockingType = ENDTURN_BLOCKING_MAYA_LONG_COUNT;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 17			; 00000011H

; 707  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 708  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 709  : 				break;

	jmp	$LN25@GetEndTurn
$LN8@GetEndTurn:

; 710  : 
; 711  : 			case NOTIFICATION_FAITH_GREAT_PERSON:
; 712  : 				eBlockingType = ENDTURN_BLOCKING_FAITH_GREAT_PERSON;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 18			; 00000012H

; 713  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 714  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 715  : 				break;

	jmp	$LN25@GetEndTurn
$LN7@GetEndTurn:

; 716  : 
; 717  : 			case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 718  : 				eBlockingType = ENDTURN_BLOCKING_ADD_REFORMATION_BELIEF;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 19			; 00000013H

; 719  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 720  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 721  : 				break;

	jmp	$LN25@GetEndTurn
$LN6@GetEndTurn:

; 722  : 
; 723  : 			case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 724  : 				eBlockingType = ENDTURN_BLOCKING_LEAGUE_CALL_FOR_PROPOSALS;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 20			; 00000014H

; 725  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 726  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 727  : 				break;

	jmp	SHORT $LN25@GetEndTurn
$LN5@GetEndTurn:

; 728  : 
; 729  : 			case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 730  : 				eBlockingType = ENDTURN_BLOCKING_CHOOSE_ARCHAEOLOGY;

	mov	ecx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [ecx], 21			; 00000015H

; 731  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _iNotificationIndex$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+84]
	mov	DWORD PTR [eax], ecx

; 732  : 				return true;

	mov	al, 1
	jmp	$LN28@GetEndTurn

; 733  : 				break;

	jmp	SHORT $LN25@GetEndTurn
$LN4@GetEndTurn:

; 734  : 
; 735  : 			case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 736  : 				eBlockingType = ENDTURN_BLOCKING_LEAGUE_CALL_FOR_VOTES;

	mov	edx, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [edx], 22			; 00000016H

; 737  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _iNotificationIndex$[ebp]
	mov	edx, DWORD PTR [edx+eax+84]
	mov	DWORD PTR [ecx], edx

; 738  : 				return true;

	mov	al, 1
	jmp	SHORT $LN28@GetEndTurn

; 739  : 				break;

	jmp	SHORT $LN25@GetEndTurn
$LN3@GetEndTurn:

; 740  : 
; 741  : 			case NOTIFICATION_CHOOSE_IDEOLOGY:
; 742  : 				eBlockingType = ENDTURN_BLOCKING_CHOOSE_IDEOLOGY;

	mov	eax, DWORD PTR _eBlockingType$[ebp]
	mov	DWORD PTR [eax], 23			; 00000017H

; 743  : 				iNotificationIndex = m_aNotifications[iIndex].m_iLookupIndex;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iNotificationIndex$[ebp]
	mov	eax, DWORD PTR [eax+ecx+84]
	mov	DWORD PTR [edx], eax

; 744  : 				return true;

	mov	al, 1
	jmp	SHORT $LN28@GetEndTurn
$LN25@GetEndTurn:

; 745  : 				break;
; 746  : 
; 747  : 			default:
; 748  : 				// these notifications don't block, so don't return a blocking type
; 749  : 				break;
; 750  : 			}
; 751  : 		}
; 752  : 
; 753  : 		iIndex++;

	mov	ecx, DWORD PTR _iIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iIndex$[ebp], ecx

; 754  : 		if(iIndex >= (int)m_aNotifications.size())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T223828[ebp], edx
	mov	eax, DWORD PTR $T223828[ebp]
	mov	ecx, DWORD PTR $T223828[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN1@GetEndTurn

; 755  : 		{
; 756  : 			iIndex = 0;

	mov	DWORD PTR _iIndex$[ebp], 0
$LN1@GetEndTurn:

; 757  : 		}
; 758  : 	}

	jmp	$LN27@GetEndTurn
$LN26@GetEndTurn:

; 759  : 
; 760  : 	return false;

	xor	al, al
$LN28@GetEndTurn:

; 761  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetEndTurnBlockedType@CvNotifications@@QAE_NAAW4EndTurnBlockingTypes@@AAH@Z ENDP ; CvNotifications::GetEndTurnBlockedType
_TEXT	ENDS
PUBLIC	?GetNumNotifications@CvNotifications@@QAEHXZ	; CvNotifications::GetNumNotifications
; Function compile flags: /Odtp
;	COMDAT ?GetNumNotifications@CvNotifications@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T223834 = -12						; size = 4
_iValue$220583 = -8					; size = 4
_iValue$ = -4						; size = 4
?GetNumNotifications@CvNotifications@@QAEHXZ PROC	; CvNotifications::GetNumNotifications, COMDAT
; _this$ = ecx

; 765  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 766  : 	if(m_iNotificationsEndIndex >= m_iNotificationsBeginIndex)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+20]
	jl	SHORT $LN1@GetNumNoti

; 767  : 	{
; 768  : 		int iValue = m_iNotificationsEndIndex - m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _iValue$220583[ebp], edx

; 769  : 		return iValue;

	mov	eax, DWORD PTR _iValue$220583[ebp]
	jmp	SHORT $LN2@GetNumNoti
$LN1@GetNumNoti:

; 770  : 	}
; 771  : 
; 772  : 	int iValue = (m_aNotifications.size() - m_iNotificationsBeginIndex) + m_iNotificationsEndIndex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223834[ebp], eax
	mov	ecx, DWORD PTR $T223834[ebp]
	mov	edx, DWORD PTR $T223834[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR _iValue$[ebp], eax

; 773  : 	return iValue;

	mov	eax, DWORD PTR _iValue$[ebp]
$LN2@GetNumNoti:

; 774  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumNotifications@CvNotifications@@QAEHXZ ENDP	; CvNotifications::GetNumNotifications
_TEXT	ENDS
PUBLIC	?GetNotificationStr@CvNotifications@@QAE?AVCvString@@H@Z ; CvNotifications::GetNotificationStr
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationStr@CvNotifications@@QAE?AVCvString@@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T223847 = -16						; size = 4
$T223843 = -12						; size = 4
$T223838 = -8						; size = 4
_iRealIndex$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iZeroBasedIndex$ = 12					; size = 4
?GetNotificationStr@CvNotifications@@QAE?AVCvString@@H@Z PROC ; CvNotifications::GetNotificationStr, COMDAT
; _this$ = ecx

; 777  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T223838[ebp], 0

; 778  : 	int iRealIndex = (m_iNotificationsBeginIndex + iZeroBasedIndex) % m_aNotifications.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223843[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, DWORD PTR _iZeroBasedIndex$[ebp]
	mov	edx, DWORD PTR $T223843[ebp]
	mov	eax, DWORD PTR $T223843[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, edx
	cdq
	mov	esi, 92					; 0000005cH
	idiv	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR _iRealIndex$[ebp], edx

; 779  : 	return m_aNotifications[iRealIndex].m_strMessage;

	mov	eax, DWORD PTR _iRealIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T223847[ebp], eax
	mov	edx, DWORD PTR $T223847[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T223838[ebp]
	or	eax, 1
	mov	DWORD PTR $T223838[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 780  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNotificationStr@CvNotifications@@QAE?AVCvString@@H@Z ENDP ; CvNotifications::GetNotificationStr
_TEXT	ENDS
PUBLIC	?GetNotificationSummary@CvNotifications@@QAE?AVCvString@@H@Z ; CvNotifications::GetNotificationSummary
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationSummary@CvNotifications@@QAE?AVCvString@@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T223864 = -16						; size = 4
$T223860 = -12						; size = 4
$T223855 = -8						; size = 4
_iRealIndex$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iZeroBasedIndex$ = 12					; size = 4
?GetNotificationSummary@CvNotifications@@QAE?AVCvString@@H@Z PROC ; CvNotifications::GetNotificationSummary, COMDAT
; _this$ = ecx

; 783  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T223855[ebp], 0

; 784  : 	int iRealIndex = (m_iNotificationsBeginIndex + iZeroBasedIndex) % m_aNotifications.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223860[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, DWORD PTR _iZeroBasedIndex$[ebp]
	mov	edx, DWORD PTR $T223860[ebp]
	mov	eax, DWORD PTR $T223860[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, edx
	cdq
	mov	esi, 92					; 0000005cH
	idiv	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR _iRealIndex$[ebp], edx

; 785  : 	return m_aNotifications[iRealIndex].m_strSummary;

	mov	eax, DWORD PTR _iRealIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T223864[ebp], eax
	mov	edx, DWORD PTR $T223864[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T223855[ebp]
	or	eax, 1
	mov	DWORD PTR $T223855[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 786  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNotificationSummary@CvNotifications@@QAE?AVCvString@@H@Z ENDP ; CvNotifications::GetNotificationSummary
_TEXT	ENDS
PUBLIC	?GetNotificationID@CvNotifications@@QAEHH@Z	; CvNotifications::GetNotificationID
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationID@CvNotifications@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223874 = -8						; size = 4
_iRealIndex$ = -4					; size = 4
_iZeroBasedIndex$ = 8					; size = 4
?GetNotificationID@CvNotifications@@QAEHH@Z PROC	; CvNotifications::GetNotificationID, COMDAT
; _this$ = ecx

; 790  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 791  : 	int iRealIndex = (m_iNotificationsBeginIndex + iZeroBasedIndex) % m_aNotifications.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223874[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, DWORD PTR _iZeroBasedIndex$[ebp]
	mov	edx, DWORD PTR $T223874[ebp]
	mov	eax, DWORD PTR $T223874[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, edx
	cdq
	mov	esi, 92					; 0000005cH
	idiv	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR _iRealIndex$[ebp], edx

; 792  : 	return m_aNotifications[iRealIndex].m_iLookupIndex;

	mov	eax, DWORD PTR _iRealIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+84]

; 793  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNotificationID@CvNotifications@@QAEHH@Z ENDP	; CvNotifications::GetNotificationID
_TEXT	ENDS
PUBLIC	?GetNotificationTurn@CvNotifications@@QAEHH@Z	; CvNotifications::GetNotificationTurn
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationTurn@CvNotifications@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223883 = -8						; size = 4
_iRealIndex$ = -4					; size = 4
_iZeroBasedIndex$ = 8					; size = 4
?GetNotificationTurn@CvNotifications@@QAEHH@Z PROC	; CvNotifications::GetNotificationTurn, COMDAT
; _this$ = ecx

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 797  : 	int iRealIndex = (m_iNotificationsBeginIndex + iZeroBasedIndex) % m_aNotifications.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223883[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, DWORD PTR _iZeroBasedIndex$[ebp]
	mov	edx, DWORD PTR $T223883[ebp]
	mov	eax, DWORD PTR $T223883[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, edx
	cdq
	mov	esi, 92					; 0000005cH
	idiv	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR _iRealIndex$[ebp], edx

; 798  : 	return m_aNotifications[iRealIndex].m_iTurn;

	mov	eax, DWORD PTR _iRealIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+80]

; 799  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNotificationTurn@CvNotifications@@QAEHH@Z ENDP	; CvNotifications::GetNotificationTurn
_TEXT	ENDS
PUBLIC	?IsNotificationDismissed@CvNotifications@@QAE_NH@Z ; CvNotifications::IsNotificationDismissed
; Function compile flags: /Odtp
;	COMDAT ?IsNotificationDismissed@CvNotifications@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T223892 = -8						; size = 4
_iRealIndex$ = -4					; size = 4
_iZeroBasedIndex$ = 8					; size = 4
?IsNotificationDismissed@CvNotifications@@QAE_NH@Z PROC	; CvNotifications::IsNotificationDismissed, COMDAT
; _this$ = ecx

; 802  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 803  : 	int iRealIndex = (m_iNotificationsBeginIndex + iZeroBasedIndex) % m_aNotifications.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T223892[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, DWORD PTR _iZeroBasedIndex$[ebp]
	mov	edx, DWORD PTR $T223892[ebp]
	mov	eax, DWORD PTR $T223892[ebp]
	mov	edx, DWORD PTR [edx+8]
	sub	edx, DWORD PTR [eax+4]
	mov	eax, edx
	cdq
	mov	esi, 92					; 0000005cH
	idiv	esi
	mov	esi, eax
	mov	eax, ecx
	xor	edx, edx
	div	esi
	mov	DWORD PTR _iRealIndex$[ebp], edx

; 804  : 	return m_aNotifications[iRealIndex].m_bDismissed;

	mov	eax, DWORD PTR _iRealIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	al, BYTE PTR [edx+eax+89]

; 805  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?IsNotificationDismissed@CvNotifications@@QAE_NH@Z ENDP	; CvNotifications::IsNotificationDismissed
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
PUBLIC	__$ArrayPad$
EXTRN	?DoBeginDiploWithHumanInDiscuss@CvDiplomacyAI@@QAEXXZ:PROC ; CvDiplomacyAI::DoBeginDiploWithHumanInDiscuss
EXTRN	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isAtWar
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
EXTRN	?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z:PROC ; CvPlayerEspionage::HasRecentIntrigueAbout
EXTRN	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ:PROC ; CvPlayer::GetEspionage
EXTRN	?DoBeginDiploWithHumanEspionageResult@CvDiplomacyAI@@QAEXXZ:PROC ; CvDiplomacyAI::DoBeginDiploWithHumanEspionageResult
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?GetNumFaithGreatPeople@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumFaithGreatPeople
EXTRN	?GetNumMayaBoosts@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetNumMayaBoosts
EXTRN	?GetNumFreeGreatPeople@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumFreeGreatPeople
EXTRN	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z:PROC ; CvGlobals::WrapUnitPointer
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
EXTRN	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z:PROC	; CvPlayer::getUnit
EXTRN	__imp__strcpy_s:PROC
EXTRN	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z:PROC ; CvGlobals::WrapPlotPointer
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
EXTRN	__chkstk:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__ehfuncinfo$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$11
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
xdata$x	ENDS
;	COMDAT ?Activate@CvNotifications@@QAEXAAUNotification@1@@Z
_TEXT	SEGMENT
tv1090 = -12308						; size = 4
tv1076 = -12304						; size = 4
tv1476 = -12300						; size = 4
tv1491 = -12296						; size = 4
tv1043 = -12292						; size = 4
tv1020 = -12288						; size = 4
tv999 = -12284						; size = 4
tv946 = -12280						; size = 4
tv925 = -12276						; size = 4
tv841 = -12272						; size = 4
tv805 = -12268						; size = 4
tv775 = -12264						; size = 4
tv745 = -12260						; size = 4
tv734 = -12253						; size = 1
tv733 = -12252						; size = 4
tv732 = -12248						; size = 4
tv731 = -12244						; size = 4
tv713 = -12240						; size = 4
tv694 = -12236						; size = 4
tv672 = -12232						; size = 4
tv653 = -12228						; size = 4
tv634 = -12224						; size = 4
tv603 = -12220						; size = 4
tv591 = -12216						; size = 4
tv577 = -12212						; size = 4
tv561 = -12208						; size = 4
tv547 = -12204						; size = 4
tv485 = -12200						; size = 4
tv1329 = -12196						; size = 4
tv419 = -12192						; size = 4
tv1166 = -12188						; size = 4
tv385 = -12184						; size = 4
tv360 = -12180						; size = 4
tv346 = -12176						; size = 4
tv1249 = -12172						; size = 4
tv1258 = -12168						; size = 4
tv312 = -12164						; size = 4
tv293 = -12160						; size = 4
tv274 = -12156						; size = 4
tv246 = -12152						; size = 4
tv217 = -12148						; size = 4
tv182 = -12144						; size = 4
tv159 = -12140						; size = 4
tv139 = -12136						; size = 4
tv129 = -12132						; size = 4
tv71 = -12128						; size = 4
_this$ = -12124						; size = 4
_inst$224828 = -12120					; size = 4
$T224824 = -12116					; size = 4
$T224811 = -12112					; size = 4
$T224804 = -12108					; size = 4
_inst$224800 = -12104					; size = 4
$T224796 = -12100					; size = 4
$T224786 = -12096					; size = 4
__Ptr$224784 = -12092					; size = 4
$T224781 = -12088					; size = 4
__Cvtptr$224779 = -12084				; size = 4
__Ans$224780 = -12080					; size = 4
$T224770 = -12076					; size = 4
$T224769 = -12072					; size = 4
$T224724 = -12068					; size = 4
$T224711 = -12064					; size = 4
$T224707 = -12060					; size = 4
$T224693 = -12056					; size = 4
$T224689 = -12049					; size = 1
$T224678 = -12048					; size = 4
$T224674 = -12041					; size = 1
_iMapY$224768 = -12040					; size = 4
_iMapX$224767 = -12036					; size = 4
$T224667 = -12032					; size = 4
$T224663 = -12028					; size = 4
$T224656 = -12024					; size = 4
$T224652 = -12020					; size = 4
$T224648 = -12016					; size = 4
$T224644 = -12012					; size = 4
$T224640 = -12008					; size = 4
$T224633 = -12004					; size = 4
$T224626 = -12000					; size = 4
$T224622 = -11996					; size = 4
$T224618 = -11992					; size = 4
$T224609 = -11988					; size = 4
$T224605 = -11984					; size = 4
$T224596 = -11980					; size = 4
$T224592 = -11976					; size = 4
$T224588 = -11972					; size = 4
$T224584 = -11968					; size = 4
$T224580 = -11964					; size = 4
$T224576 = -11960					; size = 4
$T224572 = -11956					; size = 4
$T224568 = -11952					; size = 4
$T224567 = -11948					; size = 4
$T224566 = -11944					; size = 4
$T224562 = -11940					; size = 4
$T224558 = -11936					; size = 4
$T224554 = -11932					; size = 4
$T224553 = -11928					; size = 4
$T224552 = -11924					; size = 4
$T224548 = -11920					; size = 4
$T224544 = -11916					; size = 4
$T224537 = -11912					; size = 4
$T224536 = -11908					; size = 4
$T224535 = -11904					; size = 4
$T224531 = -11900					; size = 4
$T224527 = -11896					; size = 4
$T224523 = -11892					; size = 4
$T224519 = -11888					; size = 4
$T224515 = -11884					; size = 4
$T224511 = -11880					; size = 4
$T224507 = -11876					; size = 4
$T224503 = -11872					; size = 4
$T224499 = -11868					; size = 4
$T224495 = -11864					; size = 4
$T224494 = -11860					; size = 4
$T224493 = -11856					; size = 4
$T224489 = -11852					; size = 4
$T224485 = -11848					; size = 4
$T224481 = -11844					; size = 4
_inst$224467 = -11840					; size = 4
$T224463 = -11836					; size = 4
_inst$224453 = -11832					; size = 4
$T224449 = -11828					; size = 4
$T224437 = -11824					; size = 4
$T224430 = -11820					; size = 4
$T224423 = -11816					; size = 4
_inst$224418 = -11812					; size = 4
$T224414 = -11808					; size = 4
$T224405 = -11804					; size = 4
__Ptr$224404 = -11800					; size = 4
$T224400 = -11796					; size = 4
__Cvtptr$224398 = -11792				; size = 4
__Ans$224399 = -11788					; size = 4
$T224389 = -11784					; size = 4
_inst$224384 = -11780					; size = 4
$T224380 = -11776					; size = 4
$T224371 = -11772					; size = 4
__Ptr$224370 = -11768					; size = 4
$T224366 = -11764					; size = 4
__Cvtptr$224364 = -11760				; size = 4
__Ans$224365 = -11756					; size = 4
$T224355 = -11752					; size = 4
$T224348 = -11748					; size = 4
$T224338 = -11744					; size = 4
$T224334 = -11740					; size = 4
$T224330 = -11736					; size = 4
$T224313 = -11728					; size = 4
$T224312 = -11724					; size = 4
$T224311 = -11720					; size = 4
$T224280 = -11716					; size = 4
$T224275 = -11712					; size = 4
$T224271 = -11705					; size = 1
$T224260 = -11704					; size = 4
$T224256 = -11697					; size = 1
_iMapY$224305 = -11696					; size = 4
_iMapX$224304 = -11692					; size = 4
$T224249 = -11688					; size = 4
$T224245 = -11684					; size = 4
$T224241 = -11680					; size = 4
$T224237 = -11676					; size = 4
$T224232 = -11672					; size = 4
$T224228 = -11665					; size = 1
$T224219 = -11664					; size = 4
_inst$224214 = -11660					; size = 4
$T224211 = -11656					; size = 4
$T224198 = -11652					; size = 4
$T224191 = -11648					; size = 4
_inst$224186 = -11644					; size = 4
$T224183 = -11640					; size = 4
$T224173 = -11636					; size = 4
__Ptr$224171 = -11632					; size = 4
$T224168 = -11628					; size = 4
__Cvtptr$224163 = -11624				; size = 4
__Ans$224164 = -11620					; size = 4
$T224157 = -11616					; size = 4
$T224156 = -11612					; size = 4
$T224123 = -11608					; size = 4
$T224110 = -11604					; size = 4
$T224106 = -11600					; size = 4
$T224099 = -11596					; size = 4
$T224095 = -11589					; size = 1
$T224091 = -11588					; size = 4
$T224087 = -11581					; size = 1
_iMapY$224132 = -11580					; size = 4
_iMapX$224131 = -11576					; size = 4
$T224080 = -11572					; size = 4
$T224076 = -11568					; size = 4
$T224072 = -11564					; size = 4
$T224068 = -11560					; size = 4
$T224064 = -11556					; size = 4
$T224060 = -11552					; size = 4
$T224056 = -11548					; size = 4
$T224049 = -11544					; size = 4
$T224048 = -11540					; size = 4
$T224047 = -11536					; size = 4
$T224043 = -11532					; size = 4
$T224039 = -11528					; size = 4
$T224032 = -11524					; size = 4
$T224031 = -11520					; size = 4
$T224030 = -11516					; size = 4
_inst$224026 = -11512					; size = 4
$T224022 = -11508					; size = 4
$T224009 = -11504					; size = 4
_inst$224005 = -11500					; size = 4
$T224001 = -11496					; size = 4
$T223991 = -11492					; size = 4
__Ptr$223989 = -11488					; size = 4
$T223986 = -11484					; size = 4
__Cvtptr$223981 = -11480				; size = 4
__Ans$223982 = -11476					; size = 4
$T223975 = -11472					; size = 4
$T223971 = -11468					; size = 4
$T223967 = -11464					; size = 4
$T223966 = -11460					; size = 4
$T223965 = -11456					; size = 4
$T223964 = -11452					; size = 4
$T223960 = -11448					; size = 4
$T223956 = -11444					; size = 4
$T223955 = -11440					; size = 4
$T223954 = -11436					; size = 4
$T223953 = -11432					; size = 4
$T223949 = -11428					; size = 4
$T223945 = -11424					; size = 4
$T223941 = -11420					; size = 4
$T223910 = -11416					; size = 4
$T223909 = -11412					; size = 4
$T223907 = -11408					; size = 4
$T223906 = -11404					; size = 4
$T223905 = -11400					; size = 4
$T223904 = -11396					; size = 4
$T223903 = -11392					; size = 4
$T223902 = -11388					; size = 4
$T223901 = -11384					; size = 4
$T223900 = -11380					; size = 4
$T223899 = -11376					; size = 4
_pDllPlot$220817 = -11372				; size = 4
_pPlot$220814 = -11368					; size = 4
_kPopup$220812 = -11364					; size = 536
_eProject$220809 = -10828				; size = 4
_eLeague$220807 = -10824				; size = 4
_kPopup$220803 = -10820					; size = 536
_kPopup$220799 = -10284					; size = 536
_kPopup$220795 = -9748					; size = 536
_kPopup$220791 = -9212					; size = 536
_eLeague$220788 = -8672					; size = 4
_ePlayerToContact$220783 = -8668			; size = 4
_eTargetPlayer$220777 = -8664				; size = 4
_kPopup$220774 = -8660					; size = 536
_kPopup$220771 = -8124					; size = 536
_kPopup$220768 = -7588					; size = 536
_kPopup$220766 = -7052					; size = 536
_kPopup$220762 = -6516					; size = 536
_kPopup$220760 = -5980					; size = 536
_kPopup$220758 = -5444					; size = 536
_kPopup$220756 = -4908					; size = 536
_pDllUnit$220730 = -4368				; size = 4
_pDllPlot$220680 = -4364				; size = 4
_pPlot$220677 = -4360					; size = 4
_pUnit$220675 = -4356					; size = 8
_eOrder$220671 = -4348					; size = 4
_pCity$220668 = -4344					; size = 4
_kPopupInfo$220670 = -4340				; size = 536
_iItemID$220673 = -3800					; size = 4
_kPopup$220666 = -3796					; size = 536
_pDllPlot$220659 = -3260				; size = 4
_ePlayer$220662 = -3256					; size = 4
_iQuestFlags$220655 = -3252				; size = 4
_pPlot$220656 = -3248					; size = 4
_kPopup$220653 = -3244					; size = 536
_kPopup$220651 = -2708					; size = 536
_kPopup$220649 = -2172					; size = 536
_kPopup$220641 = -1636					; size = 536
_pDllPlot$220629 = -1100				; size = 4
_pCity$220626 = -1096					; size = 4
_kPopup$220624 = -1092					; size = 536
_kPopup$220621 = -556					; size = 536
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_notification$ = 8					; size = 4
?Activate@CvNotifications@@QAEXAAUNotification@1@@Z PROC ; CvNotifications::Activate, COMDAT
; _this$ = ecx

; 809  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 12296				; 00003008H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 	GC.GetEngineUserInterface()->ActivateNotification(notification.m_iLookupIndex, notification.m_eNotificationType, notification.m_strMessage, notification.m_iX, notification.m_iY, notification.m_iGameDataIndex, notification.m_iExtraGameData, m_ePlayer);

	mov	eax, DWORD PTR $T223941[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv71[ebp], ecx
	mov	ecx, DWORD PTR _notification$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223945[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR $T223945[ebp]
	push	eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv71[ebp]
	mov	edx, DWORD PTR [eax+212]
	call	edx

; 811  : 
; 812  : 	gDLL->GameplayMinimapNotification(notification.m_iX, notification.m_iY, notification.m_iLookupIndex+1);	// The index is used to uniquely identify each flashing dot on the minimap. We're adding 1 since the selected unit is always 0. It ain't pretty, but it'll work

	mov	eax, DWORD PTR $T223949[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+800]
	call	edx

; 813  : 
; 814  : 	switch(notification.m_eNotificationType)

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv139[ebp], ecx
	cmp	DWORD PTR tv139[ebp], 84632199		; 050b6287H
	jg	$LN56@Activate@2
	cmp	DWORD PTR tv139[ebp], 84632199		; 050b6287H
	je	$LN28@Activate@2
	cmp	DWORD PTR tv139[ebp], -1168514695	; ba59e179H
	jg	$LN57@Activate@2
	cmp	DWORD PTR tv139[ebp], -1168514695	; ba59e179H
	je	$LN32@Activate@2
	cmp	DWORD PTR tv139[ebp], -1730271966	; 98de2522H
	jg	SHORT $LN58@Activate@2
	cmp	DWORD PTR tv139[ebp], -1730271966	; 98de2522H
	je	$LN10@Activate@2
	cmp	DWORD PTR tv139[ebp], -1871397394	; 9074bdeeH
	jg	SHORT $LN59@Activate@2
	cmp	DWORD PTR tv139[ebp], -1871397394	; 9074bdeeH
	je	$LN10@Activate@2
	cmp	DWORD PTR tv139[ebp], -2115432992	; 81e90de0H
	je	$LN24@Activate@2
	cmp	DWORD PTR tv139[ebp], -2068323322	; 84b7e406H
	je	$LN8@Activate@2
	jmp	$LN2@Activate@2
$LN59@Activate@2:
	cmp	DWORD PTR tv139[ebp], -1774532806	; 963ac73aH
	je	$LN23@Activate@2
	cmp	DWORD PTR tv139[ebp], -1746998481	; 97deeb2fH
	je	$LN12@Activate@2
	jmp	$LN2@Activate@2
$LN58@Activate@2:
	cmp	DWORD PTR tv139[ebp], -1421067341	; ab4c3bb3H
	jg	SHORT $LN60@Activate@2
	cmp	DWORD PTR tv139[ebp], -1421067341	; ab4c3bb3H
	je	$LN31@Activate@2
	cmp	DWORD PTR tv139[ebp], -1686889601	; 9b741b7fH
	je	$LN50@Activate@2
	cmp	DWORD PTR tv139[ebp], -1432015642	; aaa52ce6H
	je	$LN15@Activate@2
	jmp	$LN2@Activate@2
$LN60@Activate@2:
	cmp	DWORD PTR tv139[ebp], -1365828128	; ae971de0H
	je	$LN41@Activate@2
	cmp	DWORD PTR tv139[ebp], -1328544167	; b0d00659H
	je	$LN15@Activate@2
	jmp	$LN2@Activate@2
$LN57@Activate@2:
	cmp	DWORD PTR tv139[ebp], -273578033	; efb187cfH
	jg	SHORT $LN61@Activate@2
	cmp	DWORD PTR tv139[ebp], -273578033	; efb187cfH
	je	$LN49@Activate@2
	cmp	DWORD PTR tv139[ebp], -720689320	; d50b2758H
	jg	SHORT $LN62@Activate@2
	cmp	DWORD PTR tv139[ebp], -720689320	; d50b2758H
	je	$LN18@Activate@2
	cmp	DWORD PTR tv139[ebp], -1103533898	; be3968b6H
	je	$LN12@Activate@2
	cmp	DWORD PTR tv139[ebp], -851367674	; cd412906H
	je	$LN48@Activate@2
	jmp	$LN2@Activate@2
$LN62@Activate@2:
	cmp	DWORD PTR tv139[ebp], -433658102	; e626e70aH
	je	$LN24@Activate@2
	cmp	DWORD PTR tv139[ebp], -372818113	; e9c73f3fH
	je	$LN27@Activate@2
	jmp	$LN2@Activate@2
$LN61@Activate@2:
	cmp	DWORD PTR tv139[ebp], -46207143		; fd3eef59H
	jg	SHORT $LN63@Activate@2
	cmp	DWORD PTR tv139[ebp], -46207143		; fd3eef59H
	je	$LN12@Activate@2
	cmp	DWORD PTR tv139[ebp], -112125243	; f9511ac5H
	je	$LN15@Activate@2
	cmp	DWORD PTR tv139[ebp], -54118376		; fcc63818H
	je	$LN18@Activate@2
	jmp	$LN2@Activate@2
$LN63@Activate@2:
	cmp	DWORD PTR tv139[ebp], -33507383		; fe00b7c9H
	je	$LN45@Activate@2
	cmp	DWORD PTR tv139[ebp], -30204373		; fe331e2bH
	je	$LN10@Activate@2
	jmp	$LN2@Activate@2
$LN56@Activate@2:
	cmp	DWORD PTR tv139[ebp], 1235286433	; 49a0f9a1H
	jg	$LN64@Activate@2
	cmp	DWORD PTR tv139[ebp], 1235286433	; 49a0f9a1H
	je	$LN15@Activate@2
	cmp	DWORD PTR tv139[ebp], 359132113		; 1567ebd1H
	jg	SHORT $LN65@Activate@2
	cmp	DWORD PTR tv139[ebp], 359132113		; 1567ebd1H
	je	$LN10@Activate@2
	cmp	DWORD PTR tv139[ebp], 180382033		; 0ac06951H
	jg	SHORT $LN66@Activate@2
	cmp	DWORD PTR tv139[ebp], 180382033		; 0ac06951H
	je	$LN24@Activate@2
	cmp	DWORD PTR tv139[ebp], 88900711		; 054c8467H
	je	$LN22@Activate@2
	cmp	DWORD PTR tv139[ebp], 101802557		; 0611623dH
	je	$LN4@Activate@2
	jmp	$LN2@Activate@2
$LN66@Activate@2:
	cmp	DWORD PTR tv139[ebp], 294822899		; 1192a3f3H
	je	$LN6@Activate@2
	cmp	DWORD PTR tv139[ebp], 301374463		; 11f69bffH
	je	$LN10@Activate@2
	jmp	$LN2@Activate@2
$LN65@Activate@2:
	cmp	DWORD PTR tv139[ebp], 623640104		; 252bfe28H
	jg	SHORT $LN67@Activate@2
	cmp	DWORD PTR tv139[ebp], 623640104		; 252bfe28H
	je	$LN43@Activate@2
	cmp	DWORD PTR tv139[ebp], 507398241		; 1e3e4861H
	je	$LN15@Activate@2
	cmp	DWORD PTR tv139[ebp], 507779013		; 1e4417c5H
	je	$LN43@Activate@2
	jmp	$LN2@Activate@2
$LN67@Activate@2:
	cmp	DWORD PTR tv139[ebp], 755914060		; 2d0e554cH
	je	$LN12@Activate@2
	cmp	DWORD PTR tv139[ebp], 1218150582	; 489b80b6H
	je	$LN46@Activate@2
	jmp	$LN2@Activate@2
$LN64@Activate@2:
	cmp	DWORD PTR tv139[ebp], 1784381333	; 6a5b7f95H
	jg	SHORT $LN68@Activate@2
	cmp	DWORD PTR tv139[ebp], 1784381333	; 6a5b7f95H
	je	$LN33@Activate@2
	cmp	DWORD PTR tv139[ebp], 1523558135	; 5acfa6f7H
	jg	SHORT $LN69@Activate@2
	cmp	DWORD PTR tv139[ebp], 1523558135	; 5acfa6f7H
	je	$LN46@Activate@2
	cmp	DWORD PTR tv139[ebp], 1279997337	; 4c4b3599H
	je	$LN29@Activate@2
	cmp	DWORD PTR tv139[ebp], 1376002242	; 520420c2H
	je	$LN20@Activate@2
	jmp	$LN2@Activate@2
$LN69@Activate@2:
	cmp	DWORD PTR tv139[ebp], 1591330057	; 5ed9c509H
	je	$LN36@Activate@2
	cmp	DWORD PTR tv139[ebp], 1716970771	; 6656e513H
	je	$LN10@Activate@2
	jmp	$LN2@Activate@2
$LN68@Activate@2:
	cmp	DWORD PTR tv139[ebp], 2052101992	; 7a509768H
	jg	SHORT $LN70@Activate@2
	cmp	DWORD PTR tv139[ebp], 2052101992	; 7a509768H
	je	$LN10@Activate@2
	cmp	DWORD PTR tv139[ebp], 1989681641	; 769821e9H
	je	$LN42@Activate@2
	cmp	DWORD PTR tv139[ebp], 1996573794	; 77014c62H
	je	$LN38@Activate@2
	jmp	$LN2@Activate@2
$LN70@Activate@2:
	cmp	DWORD PTR tv139[ebp], 2128612861	; 7ee00dfdH
	je	$LN27@Activate@2
	jmp	$LN2@Activate@2
$LN50@Activate@2:

; 815  : 	{
; 816  : 	case NOTIFICATION_WONDER_COMPLETED_ACTIVE_PLAYER:
; 817  : 	{
; 818  : 		CvPopupInfo kPopup(BUTTONPOPUP_WONDER_COMPLETED_ACTIVE_PLAYER, notification.m_iGameDataIndex, notification.m_iExtraGameData, notification.m_iX, notification.m_iY);

	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T223956[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T223955[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T223954[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T223953[ebp], eax
	mov	ecx, DWORD PTR $T223953[ebp]
	mov	DWORD PTR _kPopup$220621[ebp], ecx
	mov	edx, DWORD PTR $T223954[ebp]
	mov	DWORD PTR _kPopup$220621[ebp+4], edx
	mov	eax, DWORD PTR $T223955[ebp]
	mov	DWORD PTR _kPopup$220621[ebp+8], eax
	mov	ecx, DWORD PTR $T223956[ebp]
	mov	DWORD PTR _kPopup$220621[ebp+12], ecx
	mov	BYTE PTR _kPopup$220621[ebp+16], 0
	mov	BYTE PTR _kPopup$220621[ebp+17], 0
	mov	DWORD PTR _kPopup$220621[ebp+20], 69	; 00000045H
	mov	BYTE PTR _kPopup$220621[ebp+24], 0

; 819  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	edx, DWORD PTR $T223960[ebp]
	mov	DWORD PTR tv159[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv159[ebp], eax
	lea	ecx, DWORD PTR _kPopup$220621[ebp]
	push	ecx
	mov	edx, DWORD PTR tv159[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx

; 820  : 	}
; 821  : 	break;

	jmp	$LN53@Activate@2
$LN49@Activate@2:

; 822  : 	case NOTIFICATION_GREAT_WORK_COMPLETED_ACTIVE_PLAYER:
; 823  : 		{
; 824  : 			CvPopupInfo kPopup(BUTTONPOPUP_GREAT_WORK_COMPLETED_ACTIVE_PLAYER, notification.m_iGameDataIndex, notification.m_iExtraGameData, notification.m_iX, notification.m_iY);

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR $T223967[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR $T223966[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T223965[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T223964[ebp], ecx
	mov	edx, DWORD PTR $T223964[ebp]
	mov	DWORD PTR _kPopup$220624[ebp], edx
	mov	eax, DWORD PTR $T223965[ebp]
	mov	DWORD PTR _kPopup$220624[ebp+4], eax
	mov	ecx, DWORD PTR $T223966[ebp]
	mov	DWORD PTR _kPopup$220624[ebp+8], ecx
	mov	edx, DWORD PTR $T223967[ebp]
	mov	DWORD PTR _kPopup$220624[ebp+12], edx
	mov	BYTE PTR _kPopup$220624[ebp+16], 0
	mov	BYTE PTR _kPopup$220624[ebp+17], 0
	mov	DWORD PTR _kPopup$220624[ebp+20], 1031589465 ; 3d7cce59H
	mov	BYTE PTR _kPopup$220624[ebp+24], 0

; 825  : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T223971[ebp]
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv182[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220624[ebp]
	push	edx
	mov	eax, DWORD PTR tv182[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv182[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 826  : 		}
; 827  : 		break;

	jmp	$LN53@Activate@2
$LN48@Activate@2:

; 828  : 	case NOTIFICATION_BUY_TILE:
; 829  : 	{
; 830  : 		// Jon say - do like Sid would!
; 831  : 		CvCity* pCity = GET_PLAYER(m_ePlayer).getCapitalCity();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T223975[ebp], edx
	mov	ecx, DWORD PTR $T223975[ebp]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	DWORD PTR _pCity$220626[ebp], eax

; 832  : 		if(pCity)

	cmp	DWORD PTR _pCity$220626[ebp], 0
	je	$LN47@Activate@2

; 833  : 		{
; 834  : 			auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pCity->plot());

	mov	ecx, DWORD PTR _pCity$220626[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	push	eax
	lea	eax, DWORD PTR $T223899[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T223986[ebp], eax
	mov	ecx, DWORD PTR $T223986[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$223981[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$223981[ebp]
	mov	DWORD PTR __Ans$223982[ebp], eax
	mov	ecx, DWORD PTR $T223986[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$223982[ebp]
	mov	DWORD PTR $T223900[ebp], edx
	mov	eax, DWORD PTR $T223900[ebp]
	mov	DWORD PTR $T223991[ebp], eax
	mov	ecx, DWORD PTR $T223991[ebp]
	mov	DWORD PTR __Ptr$223989[ebp], ecx
	mov	DWORD PTR $T223991[ebp], 0
	mov	edx, DWORD PTR __Ptr$223989[ebp]
	mov	DWORD PTR _pDllPlot$220629[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T223899[ebp]
	mov	DWORD PTR $T224001[ebp], eax
	cmp	DWORD PTR $T224001[ebp], 0
	je	SHORT $LN105@Activate@2
	mov	ecx, DWORD PTR $T224001[ebp]
	mov	DWORD PTR _inst$224005[ebp], ecx
	mov	edx, DWORD PTR _inst$224005[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$224005[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN105@Activate@2:

; 835  : 			GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	eax, DWORD PTR $T224009[ebp]
	mov	DWORD PTR tv217[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv217[ebp], ecx
	push	0
	mov	edx, DWORD PTR _pDllPlot$220629[ebp]
	push	edx
	mov	eax, DWORD PTR tv217[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv217[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 836  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$220629[ebp]
	mov	DWORD PTR $T224022[ebp], ecx
	cmp	DWORD PTR $T224022[ebp], 0
	je	SHORT $LN47@Activate@2
	mov	edx, DWORD PTR $T224022[ebp]
	mov	DWORD PTR _inst$224026[ebp], edx
	mov	eax, DWORD PTR _inst$224026[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224026[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN47@Activate@2:

; 837  : 	}
; 838  : 	break;

	jmp	$LN53@Activate@2
$LN46@Activate@2:

; 839  : 	case NOTIFICATION_TECH:
; 840  : 	case NOTIFICATION_FREE_TECH:
; 841  : 	{
; 842  : 		CvPopupInfo kPopup(BUTTONPOPUP_CHOOSETECH, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T224032[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T224031[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T224030[ebp], eax
	mov	ecx, DWORD PTR $T224030[ebp]
	mov	DWORD PTR _kPopup$220641[ebp], ecx
	mov	edx, DWORD PTR $T224031[ebp]
	mov	DWORD PTR _kPopup$220641[ebp+4], edx
	mov	eax, DWORD PTR $T224032[ebp]
	mov	DWORD PTR _kPopup$220641[ebp+8], eax
	mov	DWORD PTR _kPopup$220641[ebp+12], 0
	mov	BYTE PTR _kPopup$220641[ebp+16], 0
	mov	BYTE PTR _kPopup$220641[ebp+17], 0
	mov	DWORD PTR _kPopup$220641[ebp+20], 11	; 0000000bH
	mov	BYTE PTR _kPopup$220641[ebp+24], 0

; 843  : 		strcpy_s(kPopup.szText, notification.m_strMessage);

	mov	ecx, DWORD PTR _notification$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224039[ebp], eax
	mov	ecx, DWORD PTR $T224039[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _kPopup$220641[ebp+24]
	push	edx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH

; 844  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224043[ebp]
	mov	DWORD PTR tv246[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv246[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220641[ebp]
	push	edx
	mov	eax, DWORD PTR tv246[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv246[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 845  : 	}
; 846  : 	break;

	jmp	$LN53@Activate@2
$LN45@Activate@2:

; 847  : 	case NOTIFICATION_TECH_AWARD:
; 848  : 	{
; 849  : 		if(notification.m_iExtraGameData != -1)

	mov	ecx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [ecx+76], -1
	je	$LN44@Activate@2

; 850  : 		{
; 851  : 			CvPopupInfo kPopup(BUTTONPOPUP_TECH_AWARD, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T224049[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T224048[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T224047[ebp], ecx
	mov	edx, DWORD PTR $T224047[ebp]
	mov	DWORD PTR _kPopup$220649[ebp], edx
	mov	eax, DWORD PTR $T224048[ebp]
	mov	DWORD PTR _kPopup$220649[ebp+4], eax
	mov	ecx, DWORD PTR $T224049[ebp]
	mov	DWORD PTR _kPopup$220649[ebp+8], ecx
	mov	DWORD PTR _kPopup$220649[ebp+12], 0
	mov	BYTE PTR _kPopup$220649[ebp+16], 0
	mov	BYTE PTR _kPopup$220649[ebp+17], 0
	mov	DWORD PTR _kPopup$220649[ebp+20], 68	; 00000044H
	mov	BYTE PTR _kPopup$220649[ebp+24], 0

; 852  : 			strcpy_s(kPopup.szText, notification.m_strMessage);

	mov	ecx, DWORD PTR _notification$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T224056[ebp], eax
	mov	edx, DWORD PTR $T224056[ebp]
	push	edx
	push	512					; 00000200H
	lea	eax, DWORD PTR _kPopup$220649[ebp+24]
	push	eax
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH

; 853  : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224060[ebp]
	mov	DWORD PTR tv274[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv274[ebp], edx
	lea	eax, DWORD PTR _kPopup$220649[ebp]
	push	eax
	mov	ecx, DWORD PTR tv274[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv274[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN44@Activate@2:

; 854  : 		}
; 855  : 	}
; 856  : 	break;

	jmp	$LN53@Activate@2
$LN43@Activate@2:

; 857  : 	case NOTIFICATION_POLICY:
; 858  : 	case NOTIFICATION_FREE_POLICY:
; 859  : 	{
; 860  : 		CvPopupInfo kPopup(BUTTONPOPUP_CHOOSEPOLICY, m_ePlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224064[ebp], edx
	mov	eax, DWORD PTR $T224064[ebp]
	mov	DWORD PTR _kPopup$220651[ebp], eax
	mov	DWORD PTR _kPopup$220651[ebp+4], -1
	mov	DWORD PTR _kPopup$220651[ebp+8], -1
	mov	DWORD PTR _kPopup$220651[ebp+12], 0
	mov	BYTE PTR _kPopup$220651[ebp+16], 0
	mov	BYTE PTR _kPopup$220651[ebp+17], 0
	mov	DWORD PTR _kPopup$220651[ebp+20], 17	; 00000011H
	mov	BYTE PTR _kPopup$220651[ebp+24], 0

; 861  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224068[ebp]
	mov	DWORD PTR tv293[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv293[ebp], edx
	lea	eax, DWORD PTR _kPopup$220651[ebp]
	push	eax
	mov	ecx, DWORD PTR tv293[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv293[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 862  : 	}
; 863  : 	break;

	jmp	$LN53@Activate@2
$LN42@Activate@2:

; 864  : 	case NOTIFICATION_DIPLO_VOTE:
; 865  : 	{
; 866  : 		CvPopupInfo kPopup(BUTTONPOPUP_DIPLO_VOTE, m_ePlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224072[ebp], edx
	mov	eax, DWORD PTR $T224072[ebp]
	mov	DWORD PTR _kPopup$220653[ebp], eax
	mov	DWORD PTR _kPopup$220653[ebp+4], -1
	mov	DWORD PTR _kPopup$220653[ebp+8], -1
	mov	DWORD PTR _kPopup$220653[ebp+12], 0
	mov	BYTE PTR _kPopup$220653[ebp+16], 0
	mov	BYTE PTR _kPopup$220653[ebp+17], 0
	mov	DWORD PTR _kPopup$220653[ebp+20], 65	; 00000041H
	mov	BYTE PTR _kPopup$220653[ebp+24], 0

; 867  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224076[ebp]
	mov	DWORD PTR tv312[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv312[ebp], edx
	lea	eax, DWORD PTR _kPopup$220653[ebp]
	push	eax
	mov	ecx, DWORD PTR tv312[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv312[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 868  : 	}
; 869  : 	break;

	jmp	$LN53@Activate@2
$LN41@Activate@2:

; 870  : 	case NOTIFICATION_MINOR_QUEST:
; 871  : 	{
; 872  : 		int iQuestFlags = notification.m_iExtraGameData;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _iQuestFlags$220655[ebp], edx

; 873  : 		CvPlot* pPlot = GC.getMap().plot(notification.m_iX, notification.m_iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T224080[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T224157[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T224156[ebp], ecx
	cmp	DWORD PTR $T224156[ebp], -2147483647	; 80000001H
	je	SHORT $LN145@Activate@2
	cmp	DWORD PTR $T224157[ebp], -2147483647	; 80000001H
	jne	SHORT $LN146@Activate@2
$LN145@Activate@2:
	mov	DWORD PTR _pPlot$220656[ebp], 0
	jmp	$LN147@Activate@2
$LN146@Activate@2:
	mov	edx, DWORD PTR $T224080[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T224087[ebp], al
	mov	ecx, DWORD PTR $T224080[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224091[ebp], edx
	movzx	eax, BYTE PTR $T224087[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224091[ebp]
	push	ecx
	mov	edx, DWORD PTR $T224156[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$224131[ebp], eax
	mov	eax, DWORD PTR $T224080[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T224095[ebp], cl
	mov	edx, DWORD PTR $T224080[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T224099[ebp], eax
	movzx	ecx, BYTE PTR $T224095[ebp]
	push	ecx
	mov	edx, DWORD PTR $T224099[ebp]
	push	edx
	mov	eax, DWORD PTR $T224157[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$224132[ebp], eax
	cmp	DWORD PTR _iMapX$224131[ebp], 0
	jl	SHORT $LN161@Activate@2
	mov	ecx, DWORD PTR $T224080[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224106[ebp], edx
	mov	eax, DWORD PTR _iMapX$224131[ebp]
	cmp	eax, DWORD PTR $T224106[ebp]
	jge	SHORT $LN161@Activate@2
	cmp	DWORD PTR _iMapY$224132[ebp], 0
	jl	SHORT $LN161@Activate@2
	mov	ecx, DWORD PTR $T224080[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T224110[ebp], edx
	mov	eax, DWORD PTR _iMapY$224132[ebp]
	cmp	eax, DWORD PTR $T224110[ebp]
	jge	SHORT $LN161@Activate@2
	mov	DWORD PTR tv1258[ebp], 1
	jmp	SHORT $LN159@Activate@2
$LN161@Activate@2:
	mov	DWORD PTR tv1258[ebp], 0
$LN159@Activate@2:
	cmp	DWORD PTR tv1258[ebp], 0
	je	SHORT $LN149@Activate@2
	mov	ecx, DWORD PTR $T224080[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224123[ebp], edx
	mov	eax, DWORD PTR _iMapY$224132[ebp]
	imul	eax, DWORD PTR $T224123[ebp]
	add	eax, DWORD PTR _iMapX$224131[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T224080[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv1249[ebp], eax
	jmp	SHORT $LN150@Activate@2
$LN149@Activate@2:
	mov	DWORD PTR tv1249[ebp], 0
$LN150@Activate@2:
	mov	edx, DWORD PTR tv1249[ebp]
	mov	DWORD PTR _pPlot$220656[ebp], edx
$LN147@Activate@2:

; 874  : 		if(pPlot)

	cmp	DWORD PTR _pPlot$220656[ebp], 0
	je	$LN40@Activate@2

; 875  : 		{
; 876  : 			auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	eax, DWORD PTR _pPlot$220656[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223901[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T224168[ebp], eax
	mov	edx, DWORD PTR $T224168[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Cvtptr$224163[ebp], eax
	mov	ecx, DWORD PTR __Cvtptr$224163[ebp]
	mov	DWORD PTR __Ans$224164[ebp], ecx
	mov	edx, DWORD PTR $T224168[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR __Ans$224164[ebp]
	mov	DWORD PTR $T223902[ebp], eax
	mov	ecx, DWORD PTR $T223902[ebp]
	mov	DWORD PTR $T224173[ebp], ecx
	mov	edx, DWORD PTR $T224173[ebp]
	mov	DWORD PTR __Ptr$224171[ebp], edx
	mov	DWORD PTR $T224173[ebp], 0
	mov	eax, DWORD PTR __Ptr$224171[ebp]
	mov	DWORD PTR _pDllPlot$220659[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T223901[ebp]
	mov	DWORD PTR $T224183[ebp], ecx
	cmp	DWORD PTR $T224183[ebp], 0
	je	SHORT $LN177@Activate@2
	mov	edx, DWORD PTR $T224183[ebp]
	mov	DWORD PTR _inst$224186[ebp], edx
	mov	eax, DWORD PTR _inst$224186[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224186[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN177@Activate@2:

; 877  : 			GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	ecx, DWORD PTR $T224191[ebp]
	mov	DWORD PTR tv346[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv346[ebp], edx
	push	0
	mov	eax, DWORD PTR _pDllPlot$220659[ebp]
	push	eax
	mov	ecx, DWORD PTR tv346[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv346[ebp]
	mov	eax, DWORD PTR [edx+272]
	call	eax

; 878  : 			gDLL->GameplayDoFX(pDllPlot.get());

	mov	ecx, DWORD PTR $T224198[ebp]
	mov	DWORD PTR tv360[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv360[ebp], edx
	push	-1
	mov	eax, DWORD PTR _pDllPlot$220659[ebp]
	push	eax
	mov	ecx, DWORD PTR tv360[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv360[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax

; 879  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$220659[ebp]
	mov	DWORD PTR $T224211[ebp], ecx
	cmp	DWORD PTR $T224211[ebp], 0
	je	SHORT $LN40@Activate@2
	mov	edx, DWORD PTR $T224211[ebp]
	mov	DWORD PTR _inst$224214[ebp], edx
	mov	eax, DWORD PTR _inst$224214[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224214[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN40@Activate@2:

; 880  : 
; 881  : 		PlayerTypes ePlayer = (PlayerTypes)notification.m_iGameDataIndex;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _ePlayer$220662[ebp], edx

; 882  : 		if (GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR _ePlayer$220662[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224219[ebp], eax
	mov	ecx, DWORD PTR $T224219[ebp]
	mov	dl, BYTE PTR [ecx+2256]
	mov	BYTE PTR $T224228[ebp], dl
	movzx	eax, BYTE PTR $T224228[ebp]
	test	eax, eax
	je	$LN39@Activate@2

; 883  : 		{
; 884  : 			GC.GetEngineUserInterface()->SetTempString(notification.m_strMessage);

	mov	ecx, DWORD PTR $T224232[ebp]
	mov	DWORD PTR tv385[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv385[ebp], edx
	sub	esp, 28					; 0000001cH
	mov	eax, esp
	mov	DWORD PTR $T223903[ebp], esp
	mov	DWORD PTR $T224237[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR $T224237[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T224237[ebp]
	mov	DWORD PTR tv1166[ebp], edx
	mov	eax, DWORD PTR tv385[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv385[ebp]
	mov	eax, DWORD PTR [edx+524]
	call	eax

; 885  : 			CvPopupInfo kPopup(BUTTONPOPUP_CITY_STATE_MESSAGE, notification.m_iGameDataIndex, iQuestFlags);

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T224241[ebp], edx
	mov	eax, DWORD PTR $T224241[ebp]
	mov	DWORD PTR _kPopup$220666[ebp], eax
	mov	ecx, DWORD PTR _iQuestFlags$220655[ebp]
	mov	DWORD PTR _kPopup$220666[ebp+4], ecx
	mov	DWORD PTR _kPopup$220666[ebp+8], -1
	mov	DWORD PTR _kPopup$220666[ebp+12], 0
	mov	BYTE PTR _kPopup$220666[ebp+16], 0
	mov	BYTE PTR _kPopup$220666[ebp+17], 0
	mov	DWORD PTR _kPopup$220666[ebp+20], 62	; 0000003eH
	mov	BYTE PTR _kPopup$220666[ebp+24], 0

; 886  : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	edx, DWORD PTR $T224245[ebp]
	mov	DWORD PTR tv419[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv419[ebp], eax
	lea	ecx, DWORD PTR _kPopup$220666[ebp]
	push	ecx
	mov	edx, DWORD PTR tv419[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv419[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
$LN39@Activate@2:

; 887  : 		}
; 888  : 	}
; 889  : 	break;

	jmp	$LN53@Activate@2
$LN38@Activate@2:

; 890  : 	case NOTIFICATION_PRODUCTION:
; 891  : 	{
; 892  : 		CvCity* pCity = GC.getMap().plot(notification.m_iX, notification.m_iY)->getPlotCity();//GET_PLAYER(m_ePlayer).getCity(notification.m_iGameDataIndex);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T224249[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T224312[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T224311[ebp], ecx
	cmp	DWORD PTR $T224311[ebp], -2147483647	; 80000001H
	je	SHORT $LN212@Activate@2
	cmp	DWORD PTR $T224312[ebp], -2147483647	; 80000001H
	jne	SHORT $LN213@Activate@2
$LN212@Activate@2:
	mov	DWORD PTR $T224313[ebp], 0
	jmp	$LN214@Activate@2
$LN213@Activate@2:
	mov	edx, DWORD PTR $T224249[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T224256[ebp], al
	mov	ecx, DWORD PTR $T224249[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224260[ebp], edx
	movzx	eax, BYTE PTR $T224256[ebp]
	test	eax, eax
	je	SHORT $LN225@Activate@2
	cmp	DWORD PTR $T224311[ebp], 0
	jge	SHORT $LN224@Activate@2
	mov	eax, DWORD PTR $T224311[ebp]
	cdq
	idiv	DWORD PTR $T224260[ebp]
	add	edx, DWORD PTR $T224260[ebp]
	mov	DWORD PTR _iMapX$224304[ebp], edx
	jmp	SHORT $LN226@Activate@2
	jmp	SHORT $LN225@Activate@2
$LN224@Activate@2:
	mov	ecx, DWORD PTR $T224311[ebp]
	cmp	ecx, DWORD PTR $T224260[ebp]
	jl	SHORT $LN225@Activate@2
	mov	eax, DWORD PTR $T224311[ebp]
	cdq
	idiv	DWORD PTR $T224260[ebp]
	mov	DWORD PTR _iMapX$224304[ebp], edx
	jmp	SHORT $LN226@Activate@2
$LN225@Activate@2:
	mov	edx, DWORD PTR $T224311[ebp]
	mov	DWORD PTR _iMapX$224304[ebp], edx
$LN226@Activate@2:
	mov	eax, DWORD PTR $T224249[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T224271[ebp], cl
	mov	edx, DWORD PTR $T224249[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T224275[ebp], eax
	movzx	ecx, BYTE PTR $T224271[ebp]
	push	ecx
	mov	edx, DWORD PTR $T224275[ebp]
	push	edx
	mov	eax, DWORD PTR $T224312[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$224305[ebp], eax
	mov	ecx, DWORD PTR _iMapY$224305[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMapX$224304[ebp]
	push	edx
	mov	ecx, DWORD PTR $T224249[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN216@Activate@2
	mov	eax, DWORD PTR $T224249[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T224280[ebp], ecx
	mov	edx, DWORD PTR _iMapY$224305[ebp]
	imul	edx, DWORD PTR $T224280[ebp]
	add	edx, DWORD PTR _iMapX$224304[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T224249[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv1329[ebp], edx
	jmp	SHORT $LN217@Activate@2
$LN216@Activate@2:
	mov	DWORD PTR tv1329[ebp], 0
$LN217@Activate@2:
	mov	ecx, DWORD PTR tv1329[ebp]
	mov	DWORD PTR $T224313[ebp], ecx
$LN214@Activate@2:
	mov	ecx, DWORD PTR $T224313[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$220668[ebp], eax

; 893  : 		if(!pCity)

	cmp	DWORD PTR _pCity$220668[ebp], 0
	jne	SHORT $LN37@Activate@2

; 894  : 		{
; 895  : 			return;

	jmp	$LN53@Activate@2
$LN37@Activate@2:

; 896  : 		}
; 897  : 
; 898  : 		CvPopupInfo kPopupInfo(BUTTONPOPUP_CHOOSEPRODUCTION);

	mov	DWORD PTR _kPopupInfo$220670[ebp], -1
	mov	DWORD PTR _kPopupInfo$220670[ebp+4], -1
	mov	DWORD PTR _kPopupInfo$220670[ebp+8], -1
	mov	DWORD PTR _kPopupInfo$220670[ebp+12], 0
	mov	BYTE PTR _kPopupInfo$220670[ebp+16], 0
	mov	BYTE PTR _kPopupInfo$220670[ebp+17], 0
	mov	DWORD PTR _kPopupInfo$220670[ebp+20], 16 ; 00000010H
	mov	BYTE PTR _kPopupInfo$220670[ebp+24], 0

; 899  : 
; 900  : 		kPopupInfo.iData1 = pCity->GetID();

	mov	edx, DWORD PTR _pCity$220668[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR $T224330[ebp], eax
	mov	ecx, DWORD PTR $T224330[ebp]
	mov	DWORD PTR _kPopupInfo$220670[ebp], ecx

; 901  : 
; 902  : 		kPopupInfo.bOption2 = false;	// Not in purchase mode

	mov	BYTE PTR _kPopupInfo$220670[ebp+17], 0

; 903  : 
; 904  : 		// slewis - do we need the stuff below?
; 905  : 		//kPopupInfo.setOption1(false);
; 906  : 
; 907  : 		OrderTypes eOrder = (OrderTypes) notification.m_iGameDataIndex;

	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _eOrder$220671[ebp], eax

; 908  : 		int iItemID = notification.m_iExtraGameData;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _iItemID$220673[ebp], edx

; 909  : 		kPopupInfo.iData2 = eOrder;

	mov	eax, DWORD PTR _eOrder$220671[ebp]
	mov	DWORD PTR _kPopupInfo$220670[ebp+4], eax

; 910  : 		kPopupInfo.iData3 = iItemID;

	mov	ecx, DWORD PTR _iItemID$220673[ebp]
	mov	DWORD PTR _kPopupInfo$220670[ebp+8], ecx

; 911  : 
; 912  : 		GC.GetEngineUserInterface()->AddPopup(kPopupInfo);

	mov	edx, DWORD PTR $T224334[ebp]
	mov	DWORD PTR tv485[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv485[ebp], eax
	lea	ecx, DWORD PTR _kPopupInfo$220670[ebp]
	push	ecx
	mov	edx, DWORD PTR tv485[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv485[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx

; 913  : 	}
; 914  : 	break;

	jmp	$LN53@Activate@2
$LN36@Activate@2:

; 915  : 	case NOTIFICATION_UNIT_PROMOTION:
; 916  : 	{
; 917  : 		UnitHandle pUnit = GET_PLAYER(m_ePlayer).getUnit(notification.m_iExtraGameData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224338[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR $T224338[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T224348[ebp], eax
	mov	ecx, DWORD PTR $T224348[ebp]
	mov	DWORD PTR _pUnit$220675[ebp], ecx
	mov	BYTE PTR _pUnit$220675[ebp+4], 0
	cmp	DWORD PTR _pUnit$220675[ebp], 0
	je	SHORT $LN252@Activate@2
	mov	ecx, DWORD PTR _pUnit$220675[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN252@Activate@2:
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 918  : 		if(pUnit)

	xor	edx, edx
	cmp	DWORD PTR _pUnit$220675[ebp], 0
	setne	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN35@Activate@2

; 919  : 		{
; 920  : 			CvPlot* pPlot = pUnit->plot();

	mov	ecx, DWORD PTR _pUnit$220675[ebp]
	mov	DWORD PTR $T224355[ebp], ecx
	mov	ecx, DWORD PTR $T224355[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR _pPlot$220677[ebp], eax

; 921  : 			if(pPlot)

	cmp	DWORD PTR _pPlot$220677[ebp], 0
	je	$LN35@Activate@2

; 922  : 			{
; 923  : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	edx, DWORD PTR _pPlot$220677[ebp]
	push	edx
	lea	eax, DWORD PTR $T223904[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T224366[ebp], eax
	mov	ecx, DWORD PTR $T224366[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Cvtptr$224364[ebp], edx
	mov	eax, DWORD PTR __Cvtptr$224364[ebp]
	mov	DWORD PTR __Ans$224365[ebp], eax
	mov	ecx, DWORD PTR $T224366[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR __Ans$224365[ebp]
	mov	DWORD PTR $T223905[ebp], edx
	mov	eax, DWORD PTR $T223905[ebp]
	mov	DWORD PTR $T224371[ebp], eax
	mov	ecx, DWORD PTR $T224371[ebp]
	mov	DWORD PTR __Ptr$224370[ebp], ecx
	mov	DWORD PTR $T224371[ebp], 0
	mov	edx, DWORD PTR __Ptr$224370[ebp]
	mov	DWORD PTR _pDllPlot$220680[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T223904[ebp]
	mov	DWORD PTR $T224380[ebp], eax
	cmp	DWORD PTR $T224380[ebp], 0
	je	SHORT $LN266@Activate@2
	mov	ecx, DWORD PTR $T224380[ebp]
	mov	DWORD PTR _inst$224384[ebp], ecx
	mov	edx, DWORD PTR _inst$224384[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inst$224384[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
$LN266@Activate@2:

; 924  : 				auto_ptr<ICvUnit1> pDllUnit = GC.WrapUnitPointer(pUnit.pointer());

	mov	eax, DWORD PTR _pUnit$220675[ebp]
	mov	DWORD PTR $T224389[ebp], eax
	mov	ecx, DWORD PTR $T224389[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223906[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapUnitPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvUnit1@@@std@@PAVCvUnit@@@Z ; CvGlobals::WrapUnitPointer
	mov	DWORD PTR $T224400[ebp], eax
	mov	eax, DWORD PTR $T224400[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$224398[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$224398[ebp]
	mov	DWORD PTR __Ans$224399[ebp], edx
	mov	eax, DWORD PTR $T224400[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$224399[ebp]
	mov	DWORD PTR $T223907[ebp], ecx
	mov	edx, DWORD PTR $T223907[ebp]
	mov	DWORD PTR $T224405[ebp], edx
	mov	eax, DWORD PTR $T224405[ebp]
	mov	DWORD PTR __Ptr$224404[ebp], eax
	mov	DWORD PTR $T224405[ebp], 0
	mov	ecx, DWORD PTR __Ptr$224404[ebp]
	mov	DWORD PTR _pDllUnit$220730[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T223906[ebp]
	mov	DWORD PTR $T224414[ebp], edx
	cmp	DWORD PTR $T224414[ebp], 0
	je	SHORT $LN279@Activate@2
	mov	eax, DWORD PTR $T224414[ebp]
	mov	DWORD PTR _inst$224418[ebp], eax
	mov	ecx, DWORD PTR _inst$224418[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$224418[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN279@Activate@2:

; 925  : 
; 926  : 				GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	edx, DWORD PTR $T224423[ebp]
	mov	DWORD PTR tv547[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv547[ebp], eax
	push	0
	mov	ecx, DWORD PTR _pDllPlot$220680[ebp]
	push	ecx
	mov	edx, DWORD PTR tv547[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv547[ebp]
	mov	edx, DWORD PTR [eax+272]
	call	edx

; 927  : 				GC.GetEngineUserInterface()->selectUnit(pDllUnit.get(), false);

	mov	eax, DWORD PTR $T224430[ebp]
	mov	DWORD PTR tv561[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv561[ebp], ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _pDllUnit$220730[ebp]
	push	edx
	mov	eax, DWORD PTR tv561[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv561[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 928  : 				gDLL->GameplayDoFX(pDllPlot.get());

	mov	ecx, DWORD PTR $T224437[ebp]
	mov	DWORD PTR tv577[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv577[ebp], edx
	push	-1
	mov	eax, DWORD PTR _pDllPlot$220680[ebp]
	push	eax
	mov	ecx, DWORD PTR tv577[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv577[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax

; 929  : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _pDllUnit$220730[ebp]
	mov	DWORD PTR $T224449[ebp], ecx
	cmp	DWORD PTR $T224449[ebp], 0
	je	SHORT $LN296@Activate@2
	mov	edx, DWORD PTR $T224449[ebp]
	mov	DWORD PTR _inst$224453[ebp], edx
	mov	eax, DWORD PTR _inst$224453[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224453[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN296@Activate@2:
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _pDllPlot$220680[ebp]
	mov	DWORD PTR $T224463[ebp], ecx
	cmp	DWORD PTR $T224463[ebp], 0
	je	SHORT $LN35@Activate@2
	mov	edx, DWORD PTR $T224463[ebp]
	mov	DWORD PTR _inst$224467[ebp], edx
	mov	eax, DWORD PTR _inst$224467[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224467[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN35@Activate@2:

; 930  : 		}
; 931  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$220675[ebp], 0
	je	SHORT $LN307@Activate@2
	mov	ecx, DWORD PTR _pUnit$220675[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN307@Activate@2:

; 932  : 	break;

	jmp	$LN53@Activate@2
$LN33@Activate@2:

; 933  : 	case NOTIFICATION_PLAYER_DEAL:
; 934  : 	{
; 935  : 		GC.GetEngineUserInterface()->OpenPlayerDealScreen((PlayerTypes) notification.m_iX);

	mov	ecx, DWORD PTR $T224481[ebp]
	mov	DWORD PTR tv591[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv591[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR tv591[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv591[ebp]
	mov	edx, DWORD PTR [eax+504]
	call	edx

; 936  : 	}
; 937  : 	break;

	jmp	$LN53@Activate@2
$LN32@Activate@2:

; 938  : 	case NOTIFICATION_PLAYER_DEAL_RECEIVED:
; 939  : 	{
; 940  : 		GC.GetEngineUserInterface()->OpenPlayerDealScreen((PlayerTypes) notification.m_iX);

	mov	eax, DWORD PTR $T224485[ebp]
	mov	DWORD PTR tv603[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv603[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR tv603[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv603[ebp]
	mov	eax, DWORD PTR [edx+504]
	call	eax

; 941  : 	}
; 942  : 	break;

	jmp	$LN53@Activate@2
$LN31@Activate@2:

; 943  : 	case NOTIFICATION_FREE_GREAT_PERSON:
; 944  : 	{
; 945  : 		if(GET_PLAYER(m_ePlayer).GetNumFreeGreatPeople() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224489[ebp], edx
	mov	ecx, DWORD PTR $T224489[ebp]
	call	?GetNumFreeGreatPeople@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeGreatPeople
	test	eax, eax
	jle	$LN30@Activate@2

; 946  : 		{
; 947  : 			CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_FREE_GREAT_PERSON, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T224495[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T224494[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224493[ebp], edx
	mov	eax, DWORD PTR $T224493[ebp]
	mov	DWORD PTR _kPopup$220756[ebp], eax
	mov	ecx, DWORD PTR $T224494[ebp]
	mov	DWORD PTR _kPopup$220756[ebp+4], ecx
	mov	edx, DWORD PTR $T224495[ebp]
	mov	DWORD PTR _kPopup$220756[ebp+8], edx
	mov	DWORD PTR _kPopup$220756[ebp+12], 0
	mov	BYTE PTR _kPopup$220756[ebp+16], 0
	mov	BYTE PTR _kPopup$220756[ebp+17], 0
	mov	DWORD PTR _kPopup$220756[ebp+20], 75	; 0000004bH
	mov	BYTE PTR _kPopup$220756[ebp+24], 0

; 948  : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224499[ebp]
	mov	DWORD PTR tv634[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv634[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220756[ebp]
	push	edx
	mov	eax, DWORD PTR tv634[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv634[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN30@Activate@2:

; 949  : 		}
; 950  : 	}
; 951  : 	break;

	jmp	$LN53@Activate@2
$LN29@Activate@2:

; 952  : 	case NOTIFICATION_FOUND_PANTHEON:
; 953  : 	{
; 954  : 		CvPopupInfo kPopup(BUTTONPOPUP_FOUND_PANTHEON, m_ePlayer, true /*bPantheonBelief*/);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224503[ebp], edx
	mov	eax, DWORD PTR $T224503[ebp]
	mov	DWORD PTR _kPopup$220758[ebp], eax
	mov	DWORD PTR _kPopup$220758[ebp+4], 1
	mov	DWORD PTR _kPopup$220758[ebp+8], -1
	mov	DWORD PTR _kPopup$220758[ebp+12], 0
	mov	BYTE PTR _kPopup$220758[ebp+16], 0
	mov	BYTE PTR _kPopup$220758[ebp+17], 0
	mov	DWORD PTR _kPopup$220758[ebp+20], 76	; 0000004cH
	mov	BYTE PTR _kPopup$220758[ebp+24], 0

; 955  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224507[ebp]
	mov	DWORD PTR tv653[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv653[ebp], edx
	lea	eax, DWORD PTR _kPopup$220758[ebp]
	push	eax
	mov	ecx, DWORD PTR tv653[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv653[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 956  : 	}
; 957  : 	break;

	jmp	$LN53@Activate@2
$LN28@Activate@2:

; 958  : 
; 959  : 	case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 960  : 	{
; 961  : 		CvPopupInfo kPopup(BUTTONPOPUP_FOUND_PANTHEON, m_ePlayer, false /*bPantheonBelief*/);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224511[ebp], edx
	mov	eax, DWORD PTR $T224511[ebp]
	mov	DWORD PTR _kPopup$220760[ebp], eax
	mov	DWORD PTR _kPopup$220760[ebp+4], 0
	mov	DWORD PTR _kPopup$220760[ebp+8], -1
	mov	DWORD PTR _kPopup$220760[ebp+12], 0
	mov	BYTE PTR _kPopup$220760[ebp+16], 0
	mov	BYTE PTR _kPopup$220760[ebp+17], 0
	mov	DWORD PTR _kPopup$220760[ebp+20], 76	; 0000004cH
	mov	BYTE PTR _kPopup$220760[ebp+24], 0

; 962  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224515[ebp]
	mov	DWORD PTR tv672[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv672[ebp], edx
	lea	eax, DWORD PTR _kPopup$220760[ebp]
	push	eax
	mov	ecx, DWORD PTR tv672[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv672[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 963  : 	}
; 964  : 	break;

	jmp	$LN53@Activate@2
$LN27@Activate@2:

; 965  : 
; 966  : 	case NOTIFICATION_FOUND_RELIGION:
; 967  : 	case NOTIFICATION_ENHANCE_RELIGION:
; 968  : 	{
; 969  : 		CvPopupInfo kPopup(BUTTONPOPUP_FOUND_RELIGION, m_ePlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224519[ebp], edx
	mov	eax, DWORD PTR $T224519[ebp]
	mov	DWORD PTR _kPopup$220762[ebp], eax
	mov	DWORD PTR _kPopup$220762[ebp+4], -1
	mov	DWORD PTR _kPopup$220762[ebp+8], -1
	mov	DWORD PTR _kPopup$220762[ebp+12], 0
	mov	BYTE PTR _kPopup$220762[ebp+16], 0
	mov	BYTE PTR _kPopup$220762[ebp+17], 0
	mov	DWORD PTR _kPopup$220762[ebp+20], 77	; 0000004dH
	mov	BYTE PTR _kPopup$220762[ebp+24], 0

; 970  : 		kPopup.iData1 = notification.m_iX;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _kPopup$220762[ebp], edx

; 971  : 		kPopup.iData2 = notification.m_iY;

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _kPopup$220762[ebp+4], ecx

; 972  : 
; 973  : 		if(notification.m_eNotificationType == NOTIFICATION_FOUND_RELIGION)

	mov	edx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [edx], 2128612861		; 7ee00dfdH
	jne	SHORT $LN26@Activate@2

; 974  : 		{
; 975  : 			kPopup.bOption1 = true;

	mov	BYTE PTR _kPopup$220762[ebp+16], 1

; 976  : 		}
; 977  : 		else

	jmp	SHORT $LN25@Activate@2
$LN26@Activate@2:

; 978  : 		{
; 979  : 			kPopup.bOption1 = false;

	mov	BYTE PTR _kPopup$220762[ebp+16], 0
$LN25@Activate@2:

; 980  : 		}
; 981  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224523[ebp]
	mov	DWORD PTR tv694[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv694[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220762[ebp]
	push	edx
	mov	eax, DWORD PTR tv694[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv694[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 982  : 	}
; 983  : 	break;

	jmp	$LN53@Activate@2
$LN24@Activate@2:

; 984  : 
; 985  : 	case NOTIFICATION_SPY_CREATED_ACTIVE_PLAYER:
; 986  : 	case NOTIFICATION_SPY_EVICTED:
; 987  : 	case NOTIFICATION_SPY_PROMOTION:
; 988  : 	{
; 989  : 		CvPopupInfo kPopup(BUTTONPOPUP_ESPIONAGE_OVERVIEW, m_ePlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224527[ebp], edx
	mov	eax, DWORD PTR $T224527[ebp]
	mov	DWORD PTR _kPopup$220766[ebp], eax
	mov	DWORD PTR _kPopup$220766[ebp+4], -1
	mov	DWORD PTR _kPopup$220766[ebp+8], -1
	mov	DWORD PTR _kPopup$220766[ebp+12], 0
	mov	BYTE PTR _kPopup$220766[ebp+16], 0
	mov	BYTE PTR _kPopup$220766[ebp+17], 0
	mov	DWORD PTR _kPopup$220766[ebp+20], 78	; 0000004eH
	mov	BYTE PTR _kPopup$220766[ebp+24], 0

; 990  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224531[ebp]
	mov	DWORD PTR tv713[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv713[ebp], edx
	lea	eax, DWORD PTR _kPopup$220766[ebp]
	push	eax
	mov	ecx, DWORD PTR tv713[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv713[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 991  : 	}
; 992  : 	break;

	jmp	$LN53@Activate@2
$LN23@Activate@2:

; 993  : 
; 994  : 	case NOTIFICATION_SPY_STOLE_TECH:
; 995  : 	{
; 996  : 		CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_TECH_TO_STEAL, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T224537[ebp], edx
	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR $T224536[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T224535[ebp], eax
	mov	ecx, DWORD PTR $T224535[ebp]
	mov	DWORD PTR _kPopup$220768[ebp], ecx
	mov	edx, DWORD PTR $T224536[ebp]
	mov	DWORD PTR _kPopup$220768[ebp+4], edx
	mov	eax, DWORD PTR $T224537[ebp]
	mov	DWORD PTR _kPopup$220768[ebp+8], eax
	mov	DWORD PTR _kPopup$220768[ebp+12], 0
	mov	BYTE PTR _kPopup$220768[ebp+16], 0
	mov	BYTE PTR _kPopup$220768[ebp+17], 0
	mov	DWORD PTR _kPopup$220768[ebp+20], 80	; 00000050H
	mov	BYTE PTR _kPopup$220768[ebp+24], 0

; 997  : 		strcpy(kPopup.szText, notification.m_strMessage);

	mov	ecx, DWORD PTR _notification$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv731[ebp], eax
	lea	ecx, DWORD PTR _kPopup$220768[ebp+24]
	mov	DWORD PTR tv732[ebp], ecx
	mov	edx, DWORD PTR tv732[ebp]
	mov	DWORD PTR tv733[ebp], edx
$LN55@Activate@2:
	mov	eax, DWORD PTR tv731[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv734[ebp], cl
	mov	edx, DWORD PTR tv732[ebp]
	mov	al, BYTE PTR tv734[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv731[ebp]
	add	ecx, 1
	mov	DWORD PTR tv731[ebp], ecx
	mov	edx, DWORD PTR tv732[ebp]
	add	edx, 1
	mov	DWORD PTR tv732[ebp], edx
	cmp	BYTE PTR tv734[ebp], 0
	jne	SHORT $LN55@Activate@2

; 998  : 		GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224544[ebp]
	mov	DWORD PTR tv745[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv745[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220768[ebp]
	push	edx
	mov	eax, DWORD PTR tv745[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv745[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 999  : 	}
; 1000 : 	break;

	jmp	$LN53@Activate@2
$LN22@Activate@2:

; 1001 : 
; 1002 : 	case NOTIFICATION_MAYA_LONG_COUNT:
; 1003 : 	{
; 1004 : 		if(GET_PLAYER(m_ePlayer).GetNumMayaBoosts() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224548[ebp], edx
	mov	ecx, DWORD PTR $T224548[ebp]
	call	?GetNumMayaBoosts@CvPlayer@@QBEHXZ	; CvPlayer::GetNumMayaBoosts
	test	eax, eax
	jle	$LN21@Activate@2

; 1005 : 		{
; 1006 : 			CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_MAYA_BONUS, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T224554[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T224553[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224552[ebp], edx
	mov	eax, DWORD PTR $T224552[ebp]
	mov	DWORD PTR _kPopup$220771[ebp], eax
	mov	ecx, DWORD PTR $T224553[ebp]
	mov	DWORD PTR _kPopup$220771[ebp+4], ecx
	mov	edx, DWORD PTR $T224554[ebp]
	mov	DWORD PTR _kPopup$220771[ebp+8], edx
	mov	DWORD PTR _kPopup$220771[ebp+12], 0
	mov	BYTE PTR _kPopup$220771[ebp+16], 0
	mov	BYTE PTR _kPopup$220771[ebp+17], 0
	mov	DWORD PTR _kPopup$220771[ebp+20], 81	; 00000051H
	mov	BYTE PTR _kPopup$220771[ebp+24], 0

; 1007 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224558[ebp]
	mov	DWORD PTR tv775[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv775[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220771[ebp]
	push	edx
	mov	eax, DWORD PTR tv775[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv775[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN21@Activate@2:

; 1008 : 		}
; 1009 : 	}
; 1010 : 	break;

	jmp	$LN53@Activate@2
$LN20@Activate@2:

; 1011 : 
; 1012 : 	case NOTIFICATION_FAITH_GREAT_PERSON:
; 1013 : 	{
; 1014 : 		if(GET_PLAYER(m_ePlayer).GetNumFaithGreatPeople() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224562[ebp], edx
	mov	ecx, DWORD PTR $T224562[ebp]
	call	?GetNumFaithGreatPeople@CvPlayer@@QBEHXZ ; CvPlayer::GetNumFaithGreatPeople
	test	eax, eax
	jle	$LN19@Activate@2

; 1015 : 		{
; 1016 : 			CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_FAITH_GREAT_PERSON, m_ePlayer, notification.m_iGameDataIndex, notification.m_iExtraGameData);

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T224568[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR $T224567[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224566[ebp], edx
	mov	eax, DWORD PTR $T224566[ebp]
	mov	DWORD PTR _kPopup$220774[ebp], eax
	mov	ecx, DWORD PTR $T224567[ebp]
	mov	DWORD PTR _kPopup$220774[ebp+4], ecx
	mov	edx, DWORD PTR $T224568[ebp]
	mov	DWORD PTR _kPopup$220774[ebp+8], edx
	mov	DWORD PTR _kPopup$220774[ebp+12], 0
	mov	BYTE PTR _kPopup$220774[ebp+16], 0
	mov	BYTE PTR _kPopup$220774[ebp+17], 0
	mov	DWORD PTR _kPopup$220774[ebp+20], 82	; 00000052H
	mov	BYTE PTR _kPopup$220774[ebp+24], 0

; 1017 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	eax, DWORD PTR $T224572[ebp]
	mov	DWORD PTR tv805[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv805[ebp], ecx
	lea	edx, DWORD PTR _kPopup$220774[ebp]
	push	edx
	mov	eax, DWORD PTR tv805[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv805[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN19@Activate@2:

; 1018 : 		}
; 1019 : 	}
; 1020 : 	break;

	jmp	$LN53@Activate@2
$LN18@Activate@2:

; 1021 : 
; 1022 : 	case NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED:
; 1023 : 	case NOTIFICATION_SPY_KILLED_A_SPY:
; 1024 : 	{
; 1025 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1026 : 		if(notification.m_iGameDataIndex >= 0 && notification.m_iExtraGameData == -1)

	mov	ecx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jl	$LN17@Activate@2
	mov	edx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [edx+76], -1
	jne	$LN17@Activate@2

; 1027 : 		{
; 1028 : 			PlayerTypes eTargetPlayer = (PlayerTypes)notification.m_iGameDataIndex;

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _eTargetPlayer$220777[ebp], ecx

; 1029 : 			if (!GET_PLAYER(eTargetPlayer).isHuman())

	mov	edx, DWORD PTR _eTargetPlayer$220777[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224576[ebp], edx
	mov	ecx, DWORD PTR $T224576[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@Activate@2

; 1030 : 			{
; 1031 : 				GET_PLAYER((PlayerTypes)notification.m_iGameDataIndex).GetDiplomacyAI()->DoBeginDiploWithHumanEspionageResult();

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224580[ebp], edx
	mov	ecx, DWORD PTR $T224580[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?DoBeginDiploWithHumanEspionageResult@CvDiplomacyAI@@QAEXXZ ; CvDiplomacyAI::DoBeginDiploWithHumanEspionageResult
$LN16@Activate@2:

; 1032 : 			}
; 1033 : 
; 1034 : 			GC.GetEngineUserInterface()->RemoveNotification(notification.m_iLookupIndex, m_ePlayer);

	mov	eax, DWORD PTR $T224584[ebp]
	mov	DWORD PTR tv841[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv841[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR tv841[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv841[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax

; 1035 : 			notification.m_iExtraGameData = 1; // slewis hack to mark notification as seen so we don't re-enter diplomacy

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	DWORD PTR [ecx+76], 1
$LN17@Activate@2:

; 1036 : 		}
; 1037 : 	}
; 1038 : 	break;

	jmp	$LN53@Activate@2
$LN15@Activate@2:

; 1039 : 
; 1040 : 	case NOTIFICATION_INTRIGUE_DECEPTION:
; 1041 : 	case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN:
; 1042 : 	case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN:
; 1043 : 	case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN:
; 1044 : 	case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN:
; 1045 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1046 : 		if(notification.m_iGameDataIndex >= 0)

	mov	edx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jl	$LN14@Activate@2

; 1047 : 		{
; 1048 : 			PlayerTypes ePlayerToContact = (PlayerTypes)notification.m_iGameDataIndex;

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _ePlayerToContact$220783[ebp], ecx

; 1049 : 			if (!GET_PLAYER(ePlayerToContact).isHuman() && ePlayerToContact != m_ePlayer && GET_PLAYER(m_ePlayer).GetEspionage()->HasRecentIntrigueAbout(ePlayerToContact) && !GET_TEAM(GET_PLAYER(m_ePlayer).getTeam()).isAtWar(GET_PLAYER(ePlayerToContact).getTeam()))

	mov	edx, DWORD PTR _ePlayerToContact$220783[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224588[ebp], edx
	mov	ecx, DWORD PTR $T224588[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	eax, al
	test	eax, eax
	jne	$LN14@Activate@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ePlayerToContact$220783[ebp]
	cmp	edx, DWORD PTR [ecx]
	je	$LN14@Activate@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224592[ebp], ecx
	mov	edx, DWORD PTR _ePlayerToContact$220783[ebp]
	push	edx
	mov	ecx, DWORD PTR $T224592[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::HasRecentIntrigueAbout
	movzx	eax, al
	test	eax, eax
	je	$LN14@Activate@2
	mov	ecx, DWORD PTR _ePlayerToContact$220783[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224596[ebp], ecx
	mov	edx, DWORD PTR $T224596[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T224605[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224609[ebp], edx
	mov	eax, DWORD PTR $T224609[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T224618[ebp], eax
	mov	edx, DWORD PTR $T224618[ebp]
	imul	edx, 2984				; 00000ba8H
	add	edx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR $T224622[ebp], edx
	mov	eax, DWORD PTR $T224605[ebp]
	push	eax
	mov	ecx, DWORD PTR $T224622[ebp]
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@Activate@2

; 1050 : 			{
; 1051 : 				GET_PLAYER(ePlayerToContact).GetDiplomacyAI()->DoBeginDiploWithHumanInDiscuss();

	mov	edx, DWORD PTR _ePlayerToContact$220783[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T224626[ebp], edx
	mov	ecx, DWORD PTR $T224626[ebp]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?DoBeginDiploWithHumanInDiscuss@CvDiplomacyAI@@QAEXXZ ; CvDiplomacyAI::DoBeginDiploWithHumanInDiscuss
$LN14@Activate@2:

; 1052 : 			}
; 1053 : 		}
; 1054 : 		break;

	jmp	$LN53@Activate@2
$LN12@Activate@2:

; 1055 : 
; 1056 : 	case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 1057 : 	case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 1058 : 	case NOTIFICATION_LEAGUE_VOTING_DONE:
; 1059 : 	case NOTIFICATION_LEAGUE_VOTING_SOON:
; 1060 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1061 : 		if (notification.m_iGameDataIndex >= 0)

	mov	eax, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jl	$LN11@Activate@2

; 1062 : 		{
; 1063 : 			LeagueTypes eLeague = (LeagueTypes) notification.m_iGameDataIndex;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _eLeague$220788[ebp], edx

; 1064 : 			CvPopupInfo kPopup(BUTTONPOPUP_LEAGUE_OVERVIEW, eLeague);

	mov	eax, DWORD PTR _eLeague$220788[ebp]
	mov	DWORD PTR _kPopup$220791[ebp], eax
	mov	DWORD PTR _kPopup$220791[ebp+4], -1
	mov	DWORD PTR _kPopup$220791[ebp+8], -1
	mov	DWORD PTR _kPopup$220791[ebp+12], 0
	mov	BYTE PTR _kPopup$220791[ebp+16], 0
	mov	BYTE PTR _kPopup$220791[ebp+17], 0
	mov	DWORD PTR _kPopup$220791[ebp+20], 1104213538 ; 41d0f622H
	mov	BYTE PTR _kPopup$220791[ebp+24], 0

; 1065 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224633[ebp]
	mov	DWORD PTR tv925[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv925[ebp], edx
	lea	eax, DWORD PTR _kPopup$220791[ebp]
	push	eax
	mov	ecx, DWORD PTR tv925[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv925[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN11@Activate@2:

; 1066 : 		}
; 1067 : 		break;

	jmp	$LN53@Activate@2
$LN10@Activate@2:

; 1068 : 
; 1069 : 	case NOTIFICATION_IDEOLOGY_CHOSEN:
; 1070 : 	case NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL:
; 1071 : 	case NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO:
; 1072 : 	case NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER:
; 1073 : 	case NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE:
; 1074 : 	case NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER:
; 1075 : 	case NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL:
; 1076 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1077 : 		if (notification.m_iGameDataIndex >= 0)

	mov	ecx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jl	$LN9@Activate@2

; 1078 : 		{
; 1079 : 			CvPopupInfo kPopup(BUTTONPOPUP_CULTURE_OVERVIEW);

	mov	DWORD PTR _kPopup$220795[ebp], -1
	mov	DWORD PTR _kPopup$220795[ebp+4], -1
	mov	DWORD PTR _kPopup$220795[ebp+8], -1
	mov	DWORD PTR _kPopup$220795[ebp+12], 0
	mov	BYTE PTR _kPopup$220795[ebp+16], 0
	mov	BYTE PTR _kPopup$220795[ebp+17], 0
	mov	DWORD PTR _kPopup$220795[ebp+20], -401251415 ; e81563a9H
	mov	BYTE PTR _kPopup$220795[ebp+24], 0

; 1080 : 			kPopup.iData2 = 3; // Tab to select

	mov	DWORD PTR _kPopup$220795[ebp+4], 3

; 1081 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	edx, DWORD PTR $T224640[ebp]
	mov	DWORD PTR tv946[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv946[ebp], eax
	lea	ecx, DWORD PTR _kPopup$220795[ebp]
	push	ecx
	mov	edx, DWORD PTR tv946[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv946[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
$LN9@Activate@2:

; 1082 : 		}
; 1083 : 		break;

	jmp	$LN53@Activate@2
$LN8@Activate@2:

; 1084 : 
; 1085 : 	case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 1086 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1087 : 		if (notification.m_iGameDataIndex >= 0)

	mov	eax, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jl	$LN7@Activate@2

; 1088 : 		{
; 1089 : 			CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_ARCHAEOLOGY, m_ePlayer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T224644[ebp], edx
	mov	eax, DWORD PTR $T224644[ebp]
	mov	DWORD PTR _kPopup$220799[ebp], eax
	mov	DWORD PTR _kPopup$220799[ebp+4], -1
	mov	DWORD PTR _kPopup$220799[ebp+8], -1
	mov	DWORD PTR _kPopup$220799[ebp+12], 0
	mov	BYTE PTR _kPopup$220799[ebp+16], 0
	mov	BYTE PTR _kPopup$220799[ebp+17], 0
	mov	DWORD PTR _kPopup$220799[ebp+20], 122879934 ; 0752ffbeH
	mov	BYTE PTR _kPopup$220799[ebp+24], 0

; 1090 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224648[ebp]
	mov	DWORD PTR tv999[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv999[ebp], edx
	lea	eax, DWORD PTR _kPopup$220799[ebp]
	push	eax
	mov	ecx, DWORD PTR tv999[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv999[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN7@Activate@2:

; 1091 : 		}
; 1092 : 		break;

	jmp	$LN53@Activate@2
$LN6@Activate@2:

; 1093 : 
; 1094 : 	case NOTIFICATION_CHOOSE_IDEOLOGY:
; 1095 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1096 : 		if (notification.m_iGameDataIndex >= 0)

	mov	ecx, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jl	$LN5@Activate@2

; 1097 : 		{
; 1098 : 			CvPopupInfo kPopup(BUTTONPOPUP_CHOOSE_IDEOLOGY, m_ePlayer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T224652[ebp], eax
	mov	ecx, DWORD PTR $T224652[ebp]
	mov	DWORD PTR _kPopup$220803[ebp], ecx
	mov	DWORD PTR _kPopup$220803[ebp+4], -1
	mov	DWORD PTR _kPopup$220803[ebp+8], -1
	mov	DWORD PTR _kPopup$220803[ebp+12], 0
	mov	BYTE PTR _kPopup$220803[ebp+16], 0
	mov	BYTE PTR _kPopup$220803[ebp+17], 0
	mov	DWORD PTR _kPopup$220803[ebp+20], -167467402 ; f604a676H
	mov	BYTE PTR _kPopup$220803[ebp+24], 0

; 1099 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	edx, DWORD PTR $T224656[ebp]
	mov	DWORD PTR tv1020[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv1020[ebp], eax
	lea	ecx, DWORD PTR _kPopup$220803[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1020[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1020[ebp]
	mov	edx, DWORD PTR [eax+180]
	call	edx
$LN5@Activate@2:

; 1100 : 		}
; 1101 : 		break;

	jmp	$LN53@Activate@2
$LN4@Activate@2:

; 1102 : 
; 1103 : #ifndef AUI_WARNING_FIXES
; 1104 : 	case NOTIFICATION_LEAGUE_PROJECT_COMPLETE:
; 1105 : 		CvAssertMsg(notification.m_iGameDataIndex >= 0, "notification.m_iGameDataIndex is out of bounds");
; 1106 : 		if (notification.m_iGameDataIndex >= 0)

	mov	eax, DWORD PTR _notification$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jl	$LN3@Activate@2

; 1107 : 		{
; 1108 : 			LeagueTypes eLeague = (LeagueTypes) notification.m_iGameDataIndex;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _eLeague$220807[ebp], edx

; 1109 : 			LeagueProjectTypes eProject = (LeagueProjectTypes) notification.m_iExtraGameData;

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _eProject$220809[ebp], ecx

; 1110 : 			CvPopupInfo kPopup(BUTTONPOPUP_LEAGUE_PROJECT_COMPLETED, eLeague, eProject);

	mov	edx, DWORD PTR _eLeague$220807[ebp]
	mov	DWORD PTR _kPopup$220812[ebp], edx
	mov	eax, DWORD PTR _eProject$220809[ebp]
	mov	DWORD PTR _kPopup$220812[ebp+4], eax
	mov	DWORD PTR _kPopup$220812[ebp+8], -1
	mov	DWORD PTR _kPopup$220812[ebp+12], 0
	mov	BYTE PTR _kPopup$220812[ebp+16], 0
	mov	BYTE PTR _kPopup$220812[ebp+17], 0
	mov	DWORD PTR _kPopup$220812[ebp+20], -895157342 ; caa4fba2H
	mov	BYTE PTR _kPopup$220812[ebp+24], 0

; 1111 : 			GC.GetEngineUserInterface()->AddPopup(kPopup);

	mov	ecx, DWORD PTR $T224663[ebp]
	mov	DWORD PTR tv1043[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv1043[ebp], edx
	lea	eax, DWORD PTR _kPopup$220812[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1043[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1043[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN3@Activate@2:

; 1112 : 		}
; 1113 : 		break;

	jmp	$LN53@Activate@2
$LN2@Activate@2:

; 1114 : #endif
; 1115 : 
; 1116 : 	default:	// Default behavior is to move the camera to the X,Y passed in
; 1117 : 	{
; 1118 : 		CvPlot* pPlot = GC.getMap().plot(notification.m_iX, notification.m_iY);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T224667[ebp], ecx
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T224770[ebp], eax
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T224769[ebp], edx
	cmp	DWORD PTR $T224769[ebp], -2147483647	; 80000001H
	je	SHORT $LN403@Activate@2
	cmp	DWORD PTR $T224770[ebp], -2147483647	; 80000001H
	jne	SHORT $LN404@Activate@2
$LN403@Activate@2:
	mov	DWORD PTR _pPlot$220814[ebp], 0
	jmp	$LN405@Activate@2
$LN404@Activate@2:
	mov	eax, DWORD PTR $T224667[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T224674[ebp], cl
	mov	edx, DWORD PTR $T224667[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T224678[ebp], eax
	movzx	ecx, BYTE PTR $T224674[ebp]
	test	ecx, ecx
	je	SHORT $LN416@Activate@2
	cmp	DWORD PTR $T224769[ebp], 0
	jge	SHORT $LN415@Activate@2
	mov	eax, DWORD PTR $T224769[ebp]
	cdq
	idiv	DWORD PTR $T224678[ebp]
	add	edx, DWORD PTR $T224678[ebp]
	mov	DWORD PTR _iMapX$224767[ebp], edx
	jmp	SHORT $LN417@Activate@2
	jmp	SHORT $LN416@Activate@2
$LN415@Activate@2:
	mov	edx, DWORD PTR $T224769[ebp]
	cmp	edx, DWORD PTR $T224678[ebp]
	jl	SHORT $LN416@Activate@2
	mov	eax, DWORD PTR $T224769[ebp]
	cdq
	idiv	DWORD PTR $T224678[ebp]
	mov	DWORD PTR _iMapX$224767[ebp], edx
	jmp	SHORT $LN417@Activate@2
$LN416@Activate@2:
	mov	eax, DWORD PTR $T224769[ebp]
	mov	DWORD PTR _iMapX$224767[ebp], eax
$LN417@Activate@2:
	mov	ecx, DWORD PTR $T224667[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T224689[ebp], dl
	mov	eax, DWORD PTR $T224667[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T224693[ebp], ecx
	movzx	edx, BYTE PTR $T224689[ebp]
	test	edx, edx
	je	SHORT $LN426@Activate@2
	cmp	DWORD PTR $T224770[ebp], 0
	jge	SHORT $LN425@Activate@2
	mov	eax, DWORD PTR $T224770[ebp]
	cdq
	idiv	DWORD PTR $T224693[ebp]
	add	edx, DWORD PTR $T224693[ebp]
	mov	DWORD PTR _iMapY$224768[ebp], edx
	jmp	SHORT $LN427@Activate@2
	jmp	SHORT $LN426@Activate@2
$LN425@Activate@2:
	mov	eax, DWORD PTR $T224770[ebp]
	cmp	eax, DWORD PTR $T224693[ebp]
	jl	SHORT $LN426@Activate@2
	mov	eax, DWORD PTR $T224770[ebp]
	cdq
	idiv	DWORD PTR $T224693[ebp]
	mov	DWORD PTR _iMapY$224768[ebp], edx
	jmp	SHORT $LN427@Activate@2
$LN426@Activate@2:
	mov	ecx, DWORD PTR $T224770[ebp]
	mov	DWORD PTR _iMapY$224768[ebp], ecx
$LN427@Activate@2:
	cmp	DWORD PTR _iMapX$224767[ebp], 0
	jl	SHORT $LN431@Activate@2
	mov	edx, DWORD PTR $T224667[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T224707[ebp], eax
	mov	ecx, DWORD PTR _iMapX$224767[ebp]
	cmp	ecx, DWORD PTR $T224707[ebp]
	jge	SHORT $LN431@Activate@2
	cmp	DWORD PTR _iMapY$224768[ebp], 0
	jl	SHORT $LN431@Activate@2
	mov	edx, DWORD PTR $T224667[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T224711[ebp], eax
	mov	ecx, DWORD PTR _iMapY$224768[ebp]
	cmp	ecx, DWORD PTR $T224711[ebp]
	jge	SHORT $LN431@Activate@2
	mov	DWORD PTR tv1491[ebp], 1
	jmp	SHORT $LN429@Activate@2
$LN431@Activate@2:
	mov	DWORD PTR tv1491[ebp], 0
$LN429@Activate@2:
	cmp	DWORD PTR tv1491[ebp], 0
	je	SHORT $LN407@Activate@2
	mov	edx, DWORD PTR $T224667[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T224724[ebp], eax
	mov	ecx, DWORD PTR _iMapY$224768[ebp]
	imul	ecx, DWORD PTR $T224724[ebp]
	add	ecx, DWORD PTR _iMapX$224767[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T224667[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv1476[ebp], ecx
	jmp	SHORT $LN408@Activate@2
$LN407@Activate@2:
	mov	DWORD PTR tv1476[ebp], 0
$LN408@Activate@2:
	mov	eax, DWORD PTR tv1476[ebp]
	mov	DWORD PTR _pPlot$220814[ebp], eax
$LN405@Activate@2:

; 1119 : 		if(pPlot)

	cmp	DWORD PTR _pPlot$220814[ebp], 0
	je	$LN53@Activate@2

; 1120 : 		{
; 1121 : 			auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	mov	ecx, DWORD PTR _pPlot$220814[ebp]
	push	ecx
	lea	edx, DWORD PTR $T223909[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	DWORD PTR $T224781[ebp], eax
	mov	eax, DWORD PTR $T224781[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Cvtptr$224779[ebp], ecx
	mov	edx, DWORD PTR __Cvtptr$224779[ebp]
	mov	DWORD PTR __Ans$224780[ebp], edx
	mov	eax, DWORD PTR $T224781[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR __Ans$224780[ebp]
	mov	DWORD PTR $T223910[ebp], ecx
	mov	edx, DWORD PTR $T223910[ebp]
	mov	DWORD PTR $T224786[ebp], edx
	mov	eax, DWORD PTR $T224786[ebp]
	mov	DWORD PTR __Ptr$224784[ebp], eax
	mov	DWORD PTR $T224786[ebp], 0
	mov	ecx, DWORD PTR __Ptr$224784[ebp]
	mov	DWORD PTR _pDllPlot$220817[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR $T223909[ebp]
	mov	DWORD PTR $T224796[ebp], edx
	cmp	DWORD PTR $T224796[ebp], 0
	je	SHORT $LN447@Activate@2
	mov	eax, DWORD PTR $T224796[ebp]
	mov	DWORD PTR _inst$224800[ebp], eax
	mov	ecx, DWORD PTR _inst$224800[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$224800[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN447@Activate@2:

; 1122 : 
; 1123 : 			GC.GetEngineUserInterface()->lookAt(pDllPlot.get(), CAMERALOOKAT_NORMAL);

	mov	edx, DWORD PTR $T224804[ebp]
	mov	DWORD PTR tv1076[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv1076[ebp], eax
	push	0
	mov	ecx, DWORD PTR _pDllPlot$220817[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1076[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1076[ebp]
	mov	edx, DWORD PTR [eax+272]
	call	edx

; 1124 : 			gDLL->GameplayDoFX(pDllPlot.get());

	mov	eax, DWORD PTR $T224811[ebp]
	mov	DWORD PTR tv1090[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv1090[ebp], ecx
	push	-1
	mov	edx, DWORD PTR _pDllPlot$220817[ebp]
	push	edx
	mov	eax, DWORD PTR tv1090[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1090[ebp]
	mov	eax, DWORD PTR [edx+708]
	call	eax

; 1125 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pDllPlot$220817[ebp]
	mov	DWORD PTR $T224824[ebp], ecx
	cmp	DWORD PTR $T224824[ebp], 0
	je	SHORT $LN53@Activate@2
	mov	edx, DWORD PTR $T224824[ebp]
	mov	DWORD PTR _inst$224828[ebp], edx
	mov	eax, DWORD PTR _inst$224828[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$224828[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN53@Activate@2:

; 1126 : 	}
; 1127 : 	break;
; 1128 : 	}
; 1129 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$1:
	lea	ecx, DWORD PTR _pDllPlot$220629[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$3:
	lea	ecx, DWORD PTR _pDllPlot$220659[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$5:
	lea	ecx, DWORD PTR _pUnit$220675[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$7:
	lea	ecx, DWORD PTR _pDllPlot$220680[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$9:
	lea	ecx, DWORD PTR _pDllUnit$220730[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z$11:
	lea	ecx, DWORD PTR _pDllPlot$220817[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__ehhandler$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Activate@CvNotifications@@QAEXAAUNotification@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Activate@CvNotifications@@QAEXAAUNotification@1@@Z ENDP ; CvNotifications::Activate
; Function compile flags: /Odtp
;	COMDAT ?IsNotificationRedundant@CvNotifications@@QAE_NAAUNotification@1@@Z
_TEXT	SEGMENT
tv64 = -112						; size = 4
_this$ = -108						; size = 4
$T224975 = -104						; size = 4
$T224959 = -100						; size = 4
$T224949 = -96						; size = 4
$T224939 = -92						; size = 4
$T224926 = -88						; size = 4
$T224913 = -84						; size = 4
$T224903 = -80						; size = 4
$T224887 = -76						; size = 4
$T224877 = -72						; size = 4
$T224867 = -68						; size = 4
$T224857 = -64						; size = 4
_iIndex$220937 = -60					; size = 4
_iIndex$220926 = -56					; size = 4
_iIndex$220917 = -52					; size = 4
_eOurPlayer1$220896 = -48				; size = 4
_eCheckingPlayer2$220903 = -44				; size = 4
_iIndex$220904 = -40					; size = 4
_eCheckingPlayer1$220902 = -36				; size = 4
_eOurPlayer2$220898 = -32				; size = 4
_iIndex$220886 = -28					; size = 4
_iIndex$220877 = -24					; size = 4
_iIndex$220868 = -20					; size = 4
_iIndex$220859 = -16					; size = 4
_iIndex$220850 = -12					; size = 4
_iIndex$220841 = -8					; size = 4
_iIndex$220829 = -4					; size = 4
_notification$ = 8					; size = 4
?IsNotificationRedundant@CvNotifications@@QAE_NAAUNotification@1@@Z PROC ; CvNotifications::IsNotificationRedundant, COMDAT
; _this$ = ecx

; 1133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	DWORD PTR _this$[ebp], ecx

; 1134 : 	switch(notification.m_eNotificationType)

	mov	eax, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 623640104		; 252bfe28H
	jg	$LN82@IsNotifica
	cmp	DWORD PTR tv64[ebp], 623640104		; 252bfe28H
	je	$LN62@IsNotifica
	cmp	DWORD PTR tv64[ebp], -372818113		; e9c73f3fH
	jg	SHORT $LN83@IsNotifica
	cmp	DWORD PTR tv64[ebp], -372818113		; e9c73f3fH
	je	$LN21@IsNotifica
	cmp	DWORD PTR tv64[ebp], -1633735706	; 9e9f2be6H
	jg	SHORT $LN84@IsNotifica
	cmp	DWORD PTR tv64[ebp], -1633735706	; 9e9f2be6H
	je	$LN44@IsNotifica
	cmp	DWORD PTR tv64[ebp], -2068323322	; 84b7e406H
	je	$LN21@IsNotifica
	cmp	DWORD PTR tv64[ebp], -1746998481	; 97deeb2fH
	je	$LN15@IsNotifica
	jmp	$LN1@IsNotifica
$LN84@IsNotifica:
	cmp	DWORD PTR tv64[ebp], -1103533898	; be3968b6H
	je	$LN15@IsNotifica
	jmp	$LN1@IsNotifica
$LN83@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 294822899		; 1192a3f3H
	jg	SHORT $LN85@IsNotifica
	cmp	DWORD PTR tv64[ebp], 294822899		; 1192a3f3H
	je	$LN21@IsNotifica
	cmp	DWORD PTR tv64[ebp], 84632199		; 050b6287H
	je	$LN21@IsNotifica
	cmp	DWORD PTR tv64[ebp], 101802557		; 0611623dH
	je	$LN9@IsNotifica
	jmp	$LN1@IsNotifica
$LN85@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 507779013		; 1e4417c5H
	je	$LN56@IsNotifica
	jmp	$LN1@IsNotifica
$LN82@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 1523558135		; 5acfa6f7H
	jg	SHORT $LN86@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1523558135		; 5acfa6f7H
	je	$LN77@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1279997337		; 4c4b3599H
	jg	SHORT $LN87@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1279997337		; 4c4b3599H
	je	$LN21@IsNotifica
	cmp	DWORD PTR tv64[ebp], 755914060		; 2d0e554cH
	je	$LN15@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1218150582		; 489b80b6H
	je	$LN68@IsNotifica
	jmp	$LN1@IsNotifica
$LN87@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 1319111517		; 4ea00b5dH
	je	$LN31@IsNotifica
	jmp	$LN1@IsNotifica
$LN86@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 1996573794		; 77014c62H
	jg	SHORT $LN88@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1996573794		; 77014c62H
	je	$LN50@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1591330057		; 5ed9c509H
	je	$LN38@IsNotifica
	cmp	DWORD PTR tv64[ebp], 1719091288		; 66774058H
	je	$LN9@IsNotifica
	jmp	$LN1@IsNotifica
$LN88@IsNotifica:
	cmp	DWORD PTR tv64[ebp], 2128612861		; 7ee00dfdH
	je	$LN21@IsNotifica
	jmp	$LN1@IsNotifica
$LN77@IsNotifica:

; 1135 : 	{
; 1136 : 	case NOTIFICATION_TECH:
; 1137 : 	{
; 1138 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220829[ebp], eax
$LN76@IsNotifica:

; 1139 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220829[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN75@IsNotifica

; 1140 : 		{
; 1141 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220829[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN74@IsNotifica

; 1142 : 			{
; 1143 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN74@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220829[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN74@IsNotifica

; 1144 : 				{
; 1145 : 					if (IsNotificationTypeEndOfTurnExpired(notification.m_eNotificationType) && notification.m_bWaitExtraTurn)

	push	-1
	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z ; CvNotifications::IsNotificationTypeEndOfTurnExpired
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN72@IsNotifica
	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+90]
	test	eax, eax
	je	SHORT $LN72@IsNotifica

; 1146 : 					{
; 1147 : 						if (m_aNotifications[iIndex].m_bWaitExtraTurn)

	mov	ecx, DWORD PTR _iIndex$220829[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+90]
	test	ecx, ecx
	je	SHORT $LN71@IsNotifica

; 1148 : 							return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN71@IsNotifica:

; 1149 : 					}
; 1150 : 					else

	jmp	SHORT $LN74@IsNotifica
$LN72@IsNotifica:

; 1151 : 						// We already added this kind of notification so we don't need another
; 1152 : 						return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN74@IsNotifica:

; 1153 : 				}
; 1154 : 			}
; 1155 : 
; 1156 : 
; 1157 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220829[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220829[ebp], edx

; 1158 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224857[ebp], eax
	mov	ecx, DWORD PTR $T224857[ebp]
	mov	edx, DWORD PTR $T224857[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220829[ebp], eax
	jl	SHORT $LN69@IsNotifica

; 1159 : 			{
; 1160 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220829[ebp], 0
$LN69@IsNotifica:

; 1161 : 			}
; 1162 : 		}

	jmp	$LN76@IsNotifica
$LN75@IsNotifica:

; 1163 : 
; 1164 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1165 : 	}
; 1166 : 	break;

	jmp	$LN80@IsNotifica
$LN68@IsNotifica:

; 1167 : 
; 1168 : 	case NOTIFICATION_FREE_TECH:
; 1169 : 	{
; 1170 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220841[ebp], eax
$LN67@IsNotifica:

; 1171 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220841[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN66@IsNotifica

; 1172 : 		{
; 1173 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220841[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN65@IsNotifica

; 1174 : 			{
; 1175 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN65@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220841[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN65@IsNotifica

; 1176 : 				{
; 1177 : 					// we've already added a free tech notification, don't need another
; 1178 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN65@IsNotifica:

; 1179 : 				}
; 1180 : 			}
; 1181 : 
; 1182 : 
; 1183 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220841[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220841[ebp], edx

; 1184 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224867[ebp], eax
	mov	ecx, DWORD PTR $T224867[ebp]
	mov	edx, DWORD PTR $T224867[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220841[ebp], eax
	jl	SHORT $LN63@IsNotifica

; 1185 : 			{
; 1186 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220841[ebp], 0
$LN63@IsNotifica:

; 1187 : 			}
; 1188 : 		}

	jmp	SHORT $LN67@IsNotifica
$LN66@IsNotifica:

; 1189 : 
; 1190 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1191 : 	}
; 1192 : 	break;

	jmp	$LN80@IsNotifica
$LN62@IsNotifica:

; 1193 : 
; 1194 : 	case NOTIFICATION_POLICY:
; 1195 : 	{
; 1196 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220850[ebp], eax
$LN61@IsNotifica:

; 1197 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220850[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN60@IsNotifica

; 1198 : 		{
; 1199 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220850[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN59@IsNotifica

; 1200 : 			{
; 1201 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN59@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220850[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN59@IsNotifica

; 1202 : 				{
; 1203 : 					// we've already added a policy notification, don't need another
; 1204 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN59@IsNotifica:

; 1205 : 				}
; 1206 : 			}
; 1207 : 
; 1208 : 
; 1209 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220850[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220850[ebp], edx

; 1210 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224877[ebp], eax
	mov	ecx, DWORD PTR $T224877[ebp]
	mov	edx, DWORD PTR $T224877[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220850[ebp], eax
	jl	SHORT $LN57@IsNotifica

; 1211 : 			{
; 1212 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220850[ebp], 0
$LN57@IsNotifica:

; 1213 : 			}
; 1214 : 		}

	jmp	SHORT $LN61@IsNotifica
$LN60@IsNotifica:

; 1215 : 
; 1216 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1217 : 	}
; 1218 : 	break;

	jmp	$LN80@IsNotifica
$LN56@IsNotifica:

; 1219 : 
; 1220 : 	case NOTIFICATION_FREE_POLICY:
; 1221 : 	{
; 1222 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220859[ebp], eax
$LN55@IsNotifica:

; 1223 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220859[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN54@IsNotifica

; 1224 : 		{
; 1225 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220859[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN53@IsNotifica

; 1226 : 			{
; 1227 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN53@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220859[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN53@IsNotifica

; 1228 : 				{
; 1229 : 					// we've already added a tech notification, don't need another
; 1230 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN53@IsNotifica:

; 1231 : 				}
; 1232 : 			}
; 1233 : 
; 1234 : 
; 1235 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220859[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220859[ebp], edx

; 1236 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224887[ebp], eax
	mov	ecx, DWORD PTR $T224887[ebp]
	mov	edx, DWORD PTR $T224887[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220859[ebp], eax
	jl	SHORT $LN51@IsNotifica

; 1237 : 			{
; 1238 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220859[ebp], 0
$LN51@IsNotifica:

; 1239 : 			}
; 1240 : 		}

	jmp	SHORT $LN55@IsNotifica
$LN54@IsNotifica:

; 1241 : 
; 1242 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1243 : 	}
; 1244 : 	break;

	jmp	$LN80@IsNotifica
$LN50@IsNotifica:

; 1245 : 
; 1246 : 	case NOTIFICATION_PRODUCTION:
; 1247 : 	{
; 1248 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220868[ebp], eax
$LN49@IsNotifica:

; 1249 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220868[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN48@IsNotifica

; 1250 : 		{
; 1251 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType &&
; 1252 : 			        notification.m_iX == m_aNotifications[iIndex].m_iX &&
; 1253 : 			        notification.m_iY == m_aNotifications[iIndex].m_iY)

	mov	eax, DWORD PTR _iIndex$220868[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN47@IsNotifica
	mov	edx, DWORD PTR _iIndex$220868[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [eax+64]
	cmp	eax, DWORD PTR [ecx+edx+64]
	jne	SHORT $LN47@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220868[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [edx+68]
	cmp	edx, DWORD PTR [eax+ecx+68]
	jne	SHORT $LN47@IsNotifica

; 1254 : 			{
; 1255 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	eax, DWORD PTR _notification$[ebp]
	movzx	ecx, BYTE PTR [eax+89]
	test	ecx, ecx
	jne	SHORT $LN47@IsNotifica
	mov	edx, DWORD PTR _iIndex$220868[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+edx+89]
	test	edx, edx
	jne	SHORT $LN47@IsNotifica

; 1256 : 				{
; 1257 : 					// we've already added a notification for this city to the notification system, so don't add another one
; 1258 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN47@IsNotifica:

; 1259 : 				}
; 1260 : 			}
; 1261 : 
; 1262 : 			iIndex++;

	mov	eax, DWORD PTR _iIndex$220868[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$220868[ebp], eax

; 1263 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T224903[ebp], ecx
	mov	edx, DWORD PTR $T224903[ebp]
	mov	eax, DWORD PTR $T224903[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220868[ebp], eax
	jl	SHORT $LN45@IsNotifica

; 1264 : 			{
; 1265 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220868[ebp], 0
$LN45@IsNotifica:

; 1266 : 			}
; 1267 : 		}

	jmp	$LN49@IsNotifica
$LN48@IsNotifica:

; 1268 : 
; 1269 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1270 : 	}
; 1271 : 	break;

	jmp	$LN80@IsNotifica
$LN44@IsNotifica:

; 1272 : 
; 1273 : 	case NOTIFICATION_ENEMY_IN_TERRITORY:
; 1274 : 	{
; 1275 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220877[ebp], eax
$LN43@IsNotifica:

; 1276 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220877[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN42@IsNotifica

; 1277 : 		{
; 1278 : 			// Only one "enemy in territory" notification at a time
; 1279 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220877[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN41@IsNotifica

; 1280 : 			{
; 1281 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN41@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220877[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN41@IsNotifica

; 1282 : 				{
; 1283 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN41@IsNotifica:

; 1284 : 				}
; 1285 : 			}
; 1286 : 
; 1287 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220877[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220877[ebp], edx

; 1288 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224913[ebp], eax
	mov	ecx, DWORD PTR $T224913[ebp]
	mov	edx, DWORD PTR $T224913[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220877[ebp], eax
	jl	SHORT $LN39@IsNotifica

; 1289 : 			{
; 1290 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220877[ebp], 0
$LN39@IsNotifica:

; 1291 : 			}
; 1292 : 		}

	jmp	SHORT $LN43@IsNotifica
$LN42@IsNotifica:

; 1293 : 
; 1294 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1295 : 	}
; 1296 : 	break;

	jmp	$LN80@IsNotifica
$LN38@IsNotifica:

; 1297 : 
; 1298 : 	case NOTIFICATION_UNIT_PROMOTION:
; 1299 : 	{
; 1300 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220886[ebp], eax
$LN37@IsNotifica:

; 1301 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220886[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN36@IsNotifica

; 1302 : 		{
; 1303 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220886[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN35@IsNotifica

; 1304 : 			{
; 1305 : 				if(notification.m_iExtraGameData == m_aNotifications[iIndex].m_iExtraGameData)

	mov	edx, DWORD PTR _iIndex$220886[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [eax+76]
	cmp	eax, DWORD PTR [ecx+edx+76]
	jne	SHORT $LN35@IsNotifica

; 1306 : 				{
; 1307 : 					if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	ecx, DWORD PTR _notification$[ebp]
	movzx	edx, BYTE PTR [ecx+89]
	test	edx, edx
	jne	SHORT $LN35@IsNotifica
	mov	eax, DWORD PTR _iIndex$220886[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+eax+89]
	test	eax, eax
	jne	SHORT $LN35@IsNotifica

; 1308 : 					{
; 1309 : 						// we've already added a notification for this unit to the notification system, so don't add another one
; 1310 : 						return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN35@IsNotifica:

; 1311 : 					}
; 1312 : 				}
; 1313 : 			}
; 1314 : 
; 1315 : 			iIndex++;

	mov	ecx, DWORD PTR _iIndex$220886[ebp]
	add	ecx, 1
	mov	DWORD PTR _iIndex$220886[ebp], ecx

; 1316 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T224926[ebp], edx
	mov	eax, DWORD PTR $T224926[ebp]
	mov	ecx, DWORD PTR $T224926[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220886[ebp], eax
	jl	SHORT $LN32@IsNotifica

; 1317 : 			{
; 1318 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220886[ebp], 0
$LN32@IsNotifica:

; 1319 : 			}
; 1320 : 		}

	jmp	$LN37@IsNotifica
$LN36@IsNotifica:

; 1321 : 
; 1322 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1323 : 	}
; 1324 : 	break;

	jmp	$LN80@IsNotifica
$LN31@IsNotifica:

; 1325 : 
; 1326 : 	case NOTIFICATION_DIPLOMACY_DECLARATION:
; 1327 : 	{
; 1328 : 		PlayerTypes eOurPlayer1 = (PlayerTypes) notification.m_iGameDataIndex;

	mov	edx, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _eOurPlayer1$220896[ebp], eax

; 1329 : 		PlayerTypes eOurPlayer2 = (PlayerTypes) notification.m_iExtraGameData;

	mov	ecx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _eOurPlayer2$220898[ebp], edx

; 1330 : 
; 1331 : 		// Notification is NOT being used to inform of a DoF or Denouncement (otherwise there would be valid players in these slots)
; 1332 : 		if(eOurPlayer1 == -1 || eOurPlayer2 == -1)

	cmp	DWORD PTR _eOurPlayer1$220896[ebp], -1
	je	SHORT $LN29@IsNotifica
	cmp	DWORD PTR _eOurPlayer2$220898[ebp], -1
	jne	SHORT $LN30@IsNotifica
$LN29@IsNotifica:

; 1333 : 			return false;

	xor	al, al
	jmp	$LN80@IsNotifica
$LN30@IsNotifica:

; 1334 : 
; 1335 : 		PlayerTypes eCheckingPlayer1, eCheckingPlayer2;
; 1336 : 
; 1337 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iIndex$220904[ebp], ecx
$LN28@IsNotifica:

; 1338 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iIndex$220904[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	$LN27@IsNotifica

; 1339 : 		{
; 1340 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	ecx, DWORD PTR _iIndex$220904[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [ecx+eax]
	jne	SHORT $LN26@IsNotifica

; 1341 : 			{
; 1342 : 				eCheckingPlayer1 = (PlayerTypes) m_aNotifications[iIndex].m_iGameDataIndex;

	mov	eax, DWORD PTR _iIndex$220904[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+72]
	mov	DWORD PTR _eCheckingPlayer1$220902[ebp], eax

; 1343 : 				eCheckingPlayer2 = (PlayerTypes) m_aNotifications[iIndex].m_iExtraGameData;

	mov	ecx, DWORD PTR _iIndex$220904[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+76]
	mov	DWORD PTR _eCheckingPlayer2$220903[ebp], ecx

; 1344 : 
; 1345 : 				// Players match - we already have a notification with this player combo
; 1346 : 				if((eOurPlayer1 == eCheckingPlayer1 && eOurPlayer2 == eCheckingPlayer2) ||
; 1347 : 				        (eOurPlayer1 == eCheckingPlayer2 && eOurPlayer2 == eCheckingPlayer1))

	mov	edx, DWORD PTR _eOurPlayer1$220896[ebp]
	cmp	edx, DWORD PTR _eCheckingPlayer1$220902[ebp]
	jne	SHORT $LN23@IsNotifica
	mov	eax, DWORD PTR _eOurPlayer2$220898[ebp]
	cmp	eax, DWORD PTR _eCheckingPlayer2$220903[ebp]
	je	SHORT $LN24@IsNotifica
$LN23@IsNotifica:
	mov	ecx, DWORD PTR _eOurPlayer1$220896[ebp]
	cmp	ecx, DWORD PTR _eCheckingPlayer2$220903[ebp]
	jne	SHORT $LN26@IsNotifica
	mov	edx, DWORD PTR _eOurPlayer2$220898[ebp]
	cmp	edx, DWORD PTR _eCheckingPlayer1$220902[ebp]
	jne	SHORT $LN26@IsNotifica
$LN24@IsNotifica:

; 1348 : 				{
; 1349 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN26@IsNotifica:

; 1350 : 				}
; 1351 : 			}
; 1352 : 
; 1353 : 			iIndex++;

	mov	eax, DWORD PTR _iIndex$220904[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$220904[ebp], eax

; 1354 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T224939[ebp], ecx
	mov	edx, DWORD PTR $T224939[ebp]
	mov	eax, DWORD PTR $T224939[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220904[ebp], eax
	jl	SHORT $LN22@IsNotifica

; 1355 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220904[ebp], 0
$LN22@IsNotifica:

; 1356 : 		}

	jmp	$LN28@IsNotifica
$LN27@IsNotifica:

; 1357 : 
; 1358 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1359 : 	}
; 1360 : 	break;

	jmp	$LN80@IsNotifica
$LN21@IsNotifica:

; 1361 : 
; 1362 : 	case NOTIFICATION_FOUND_PANTHEON:
; 1363 : 	case NOTIFICATION_FOUND_RELIGION:
; 1364 : 	case NOTIFICATION_ENHANCE_RELIGION:
; 1365 : 	case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 1366 : 	case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 1367 : 	case NOTIFICATION_CHOOSE_IDEOLOGY:
; 1368 : 	{
; 1369 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220917[ebp], eax
$LN20@IsNotifica:

; 1370 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220917[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN19@IsNotifica

; 1371 : 		{
; 1372 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220917[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN18@IsNotifica

; 1373 : 			{
; 1374 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN18@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220917[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN18@IsNotifica

; 1375 : 				{
; 1376 : 					// we've already added a pantheon notification, don't need another
; 1377 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN18@IsNotifica:

; 1378 : 				}
; 1379 : 			}
; 1380 : 
; 1381 : 
; 1382 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220917[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220917[ebp], edx

; 1383 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224949[ebp], eax
	mov	ecx, DWORD PTR $T224949[ebp]
	mov	edx, DWORD PTR $T224949[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220917[ebp], eax
	jl	SHORT $LN16@IsNotifica

; 1384 : 			{
; 1385 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220917[ebp], 0
$LN16@IsNotifica:

; 1386 : 			}
; 1387 : 		}

	jmp	SHORT $LN20@IsNotifica
$LN19@IsNotifica:

; 1388 : 
; 1389 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1390 : 	}
; 1391 : 	break;

	jmp	$LN80@IsNotifica
$LN15@IsNotifica:

; 1392 : 
; 1393 : 	case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 1394 : 	case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 1395 : 	case NOTIFICATION_LEAGUE_VOTING_SOON:
; 1396 : 	{
; 1397 : 		int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220926[ebp], eax
$LN14@IsNotifica:

; 1398 : 		while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220926[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	SHORT $LN13@IsNotifica

; 1399 : 		{
; 1400 : 			if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220926[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN12@IsNotifica

; 1401 : 			{
; 1402 : 				if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN12@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220926[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN12@IsNotifica

; 1403 : 				{
; 1404 : 					// we've already added one of this notification type, don't need another
; 1405 : 					return true;

	mov	al, 1
	jmp	$LN80@IsNotifica
$LN12@IsNotifica:

; 1406 : 				}
; 1407 : 			}
; 1408 : 
; 1409 : 
; 1410 : 			iIndex++;

	mov	edx, DWORD PTR _iIndex$220926[ebp]
	add	edx, 1
	mov	DWORD PTR _iIndex$220926[ebp], edx

; 1411 : 			if(iIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T224959[ebp], eax
	mov	ecx, DWORD PTR $T224959[ebp]
	mov	edx, DWORD PTR $T224959[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220926[ebp], eax
	jl	SHORT $LN10@IsNotifica

; 1412 : 			{
; 1413 : 				iIndex = 0;

	mov	DWORD PTR _iIndex$220926[ebp], 0
$LN10@IsNotifica:

; 1414 : 			}
; 1415 : 		}

	jmp	SHORT $LN14@IsNotifica
$LN13@IsNotifica:

; 1416 : 		return false;

	xor	al, al
	jmp	$LN80@IsNotifica

; 1417 : 	}
; 1418 : 	break;

	jmp	$LN80@IsNotifica
$LN9@IsNotifica:

; 1419 : 
; 1420 : #ifndef AUI_WARNING_FIXES
; 1421 : 	case NOTIFICATION_LEAGUE_PROJECT_COMPLETE:
; 1422 : 	case NOTIFICATION_LEAGUE_PROJECT_PROGRESS:
; 1423 : 		{
; 1424 : 			int iIndex = m_iNotificationsBeginIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _iIndex$220937[ebp], eax
$LN8@IsNotifica:

; 1425 : 			while(iIndex != m_iNotificationsEndIndex)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iIndex$220937[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	je	$LN7@IsNotifica

; 1426 : 			{
; 1427 : 				if(notification.m_eNotificationType == m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$220937[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _notification$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax+edx]
	jne	SHORT $LN6@IsNotifica

; 1428 : 				{
; 1429 : 					if(!notification.m_bDismissed && !m_aNotifications[iIndex].m_bDismissed)

	mov	edx, DWORD PTR _notification$[ebp]
	movzx	eax, BYTE PTR [edx+89]
	test	eax, eax
	jne	SHORT $LN6@IsNotifica
	mov	ecx, DWORD PTR _iIndex$220937[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN6@IsNotifica

; 1430 : 					{
; 1431 : 						// Same League ID
; 1432 : 						if (notification.m_iGameDataIndex == m_aNotifications[iIndex].m_iGameDataIndex)

	mov	edx, DWORD PTR _iIndex$220937[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _notification$[ebp]
	mov	eax, DWORD PTR [eax+72]
	cmp	eax, DWORD PTR [ecx+edx+72]
	jne	SHORT $LN6@IsNotifica

; 1433 : 						{
; 1434 : 							// Same Project type
; 1435 : 							if (notification.m_iExtraGameData == m_aNotifications[iIndex].m_iExtraGameData)

	mov	ecx, DWORD PTR _iIndex$220937[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _notification$[ebp]
	mov	edx, DWORD PTR [edx+76]
	cmp	edx, DWORD PTR [eax+ecx+76]
	jne	SHORT $LN6@IsNotifica

; 1436 : 							{
; 1437 : 								return true;

	mov	al, 1
	jmp	SHORT $LN80@IsNotifica
$LN6@IsNotifica:

; 1438 : 							}
; 1439 : 						}
; 1440 : 					}
; 1441 : 				}
; 1442 : 
; 1443 : 
; 1444 : 				iIndex++;

	mov	eax, DWORD PTR _iIndex$220937[ebp]
	add	eax, 1
	mov	DWORD PTR _iIndex$220937[ebp], eax

; 1445 : 				if(iIndex >= (int)m_aNotifications.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T224975[ebp], ecx
	mov	edx, DWORD PTR $T224975[ebp]
	mov	eax, DWORD PTR $T224975[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iIndex$220937[ebp], eax
	jl	SHORT $LN2@IsNotifica

; 1446 : 				{
; 1447 : 					iIndex = 0;

	mov	DWORD PTR _iIndex$220937[ebp], 0
$LN2@IsNotifica:

; 1448 : 				}
; 1449 : 			}

	jmp	$LN8@IsNotifica
$LN7@IsNotifica:

; 1450 : 			return false;

	xor	al, al
	jmp	SHORT $LN80@IsNotifica

; 1451 : 		}
; 1452 : 		break;

	jmp	SHORT $LN80@IsNotifica
$LN1@IsNotifica:

; 1453 : #endif
; 1454 : 
; 1455 : 	default:
; 1456 : 		return false;

	xor	al, al
$LN80@IsNotifica:

; 1457 : 		break;
; 1458 : 	}
; 1459 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsNotificationRedundant@CvNotifications@@QAE_NAAUNotification@1@@Z ENDP ; CvNotifications::IsNotificationRedundant
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >::~_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >
PUBLIC	?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ ; std::vector<enum BeliefTypes,std::allocator<enum BeliefTypes> >::_Tidy
EXTRN	?CanVote@CvLeague@@QAE_NW4PlayerTypes@@@Z:PROC	; CvLeague::CanVote
EXTRN	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ:PROC ; CvPlayerPolicies::GetLateGamePolicyTree
EXTRN	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ:PROC ; CvPlayer::GetPlayerPolicies
EXTRN	?GetNumArchaeologyChoices@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumArchaeologyChoices
EXTRN	?CanPropose@CvLeague@@QAE_NW4PlayerTypes@@@Z:PROC ; CvLeague::CanPropose
EXTRN	?GetLeague@CvGameLeagues@@QAEPAVCvLeague@@W4LeagueTypes@@@Z:PROC ; CvGameLeagues::GetLeague
EXTRN	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ:PROC ; CvGame::GetGameLeagues
EXTRN	?GetReligion@CvGameReligions@@QBEPBVCvReligion@@W4ReligionTypes@@W4PlayerTypes@@@Z:PROC ; CvGameReligions::GetReligion
EXTRN	?GetReligionCreatedByPlayer@CvGameReligions@@QBE?AW4ReligionTypes@@W4PlayerTypes@@@Z:PROC ; CvGameReligions::GetReligionCreatedByPlayer
EXTRN	?GetAvailableFollowerBeliefs@CvGameReligions@@QAE?AV?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@XZ:PROC ; CvGameReligions::GetAvailableFollowerBeliefs
EXTRN	?GetAvailableEnhancerBeliefs@CvGameReligions@@QAE?AV?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@XZ:PROC ; CvGameReligions::GetAvailableEnhancerBeliefs
EXTRN	?HasCreatedReligion@CvGameReligions@@QBE_NW4PlayerTypes@@@Z:PROC ; CvGameReligions::HasCreatedReligion
EXTRN	?GetNumReligionsStillToFound@CvGameReligions@@QBEHXZ:PROC ; CvGameReligions::GetNumReligionsStillToFound
EXTRN	?HasAddedReformationBelief@CvGameReligions@@QBE_NW4PlayerTypes@@@Z:PROC ; CvGameReligions::HasAddedReformationBelief
EXTRN	?CanCreatePantheon@CvGameReligions@@QAE?AW4FOUNDING_RESULT@1@W4PlayerTypes@@_N@Z:PROC ; CvGameReligions::CanCreatePantheon
EXTRN	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ:PROC ; CvGame::GetGameReligions
EXTRN	?getNumResourceAvailable@CvPlayer@@QBEHW4ResourceTypes@@_N@Z:PROC ; CvPlayer::getNumResourceAvailable
EXTRN	?ProposedDealExists@CvGameDeals@@QAE_NW4PlayerTypes@@0@Z:PROC ; CvGameDeals::ProposedDealExists
EXTRN	?GetGameDeals@CvGame@@QAEPAVCvGameDeals@@XZ:PROC ; CvGame::GetGameDeals
EXTRN	?isPromotionReady@CvUnit@@QBE_NXZ:PROC		; CvUnit::isPromotionReady
EXTRN	?GetNumVictoryVotesExpected@CvGame@@QBEHXZ:PROC	; CvGame::GetNumVictoryVotesExpected
EXTRN	?GetVoteCast@CvGame@@QBE?AW4TeamTypes@@W42@@Z:PROC ; CvGame::GetVoteCast
EXTRN	?getOrderQueueLength@CvCity@@QAEHXZ:PROC	; CvCity::getOrderQueueLength
EXTRN	?IsPuppet@CvCity@@QBE_NXZ:PROC			; CvCity::IsPuppet
EXTRN	?getNextPolicyCost@CvPlayer@@QBEHXZ:PROC	; CvPlayer::getNextPolicyCost
EXTRN	?getJONSCulture@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getJONSCulture
EXTRN	?GetNumFreeTenets@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetNumFreeTenets
EXTRN	?GetNumFreePolicies@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumFreePolicies
EXTRN	?GetNumFreeTechs@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetNumFreeTechs
EXTRN	?GetNumTechsCanBeResearched@CvPlayerTechs@@QBEHXZ:PROC ; CvPlayerTechs::GetNumTechsCanBeResearched
EXTRN	?GetCurrentResearch@CvPlayerTechs@@QBE?AW4TechTypes@@XZ:PROC ; CvPlayerTechs::GetCurrentResearch
EXTRN	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ:PROC ; CvPlayer::GetPlayerTechs
EXTRN	?isGoody@CvPlot@@QBE_NW4TeamTypes@@@Z:PROC	; CvPlot::isGoody
EXTRN	?CanRangeStrikeNow@CvCity@@QBE_NXZ:PROC		; CvCity::CanRangeStrikeNow
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
EXTRN	?HasBarbarianCamp@CvPlot@@QAE_NXZ:PROC		; CvPlot::HasBarbarianCamp
EXTRN	?GetBuyPlotCost@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetBuyPlotCost
EXTRN	?GetGold@CvTreasury@@QBEHXZ:PROC		; CvTreasury::GetGold
EXTRN	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ:PROC ; CvPlayer::GetTreasury
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?IsNotificationExpired@CvNotifications@@QAE_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$5
__ehfuncinfo$?IsNotificationExpired@CvNotifications@@QAE_NH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?IsNotificationExpired@CvNotifications@@QAE_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvnotifications.cpp
xdata$x	ENDS
;	COMDAT ?IsNotificationExpired@CvNotifications@@QAE_NH@Z
_TEXT	SEGMENT
tv681 = -608						; size = 4
tv564 = -604						; size = 4
tv899 = -600						; size = 4
tv806 = -596						; size = 4
tv815 = -592						; size = 4
tv768 = -588						; size = 4
tv777 = -584						; size = 4
tv68 = -580						; size = 4
_this$ = -576						; size = 4
$T225678 = -572						; size = 4
$T225674 = -568						; size = 4
$T225670 = -564						; size = 4
$T225663 = -560						; size = 4
$T225659 = -556						; size = 4
$T225655 = -552						; size = 4
$T225645 = -548						; size = 4
$T225641 = -544						; size = 4
$T225552 = -508						; size = 4
$T225463 = -472						; size = 4
$T225447 = -468						; size = 4
$T225443 = -464						; size = 4
$T225433 = -460						; size = 4
$T225426 = -456						; size = 4
$T225401 = -452						; size = 4
$T225394 = -448						; size = 4
$T225384 = -444						; size = 4
$T225380 = -440						; size = 4
$T225376 = -436						; size = 4
$T225372 = -432						; size = 4
$T225360 = -428						; size = 4
$T225351 = -420						; size = 4
$T225350 = -416						; size = 4
$T225349 = -412						; size = 4
$T225318 = -408						; size = 4
$T225313 = -404						; size = 4
$T225309 = -397						; size = 1
$T225298 = -396						; size = 4
$T225294 = -389						; size = 1
_iMapY$225348 = -388					; size = 4
_iMapX$225347 = -384					; size = 4
$T225287 = -380						; size = 4
$T225283 = -376						; size = 4
$T225279 = -372						; size = 4
$T225275 = -368						; size = 4
$T225271 = -364						; size = 4
$T225267 = -360						; size = 4
$T225263 = -356						; size = 4
$T225259 = -352						; size = 4
$T225255 = -348						; size = 4
$T225251 = -344						; size = 4
$T225247 = -340						; size = 4
$T225243 = -336						; size = 4
$T225239 = -332						; size = 4
$T225235 = -328						; size = 4
$T225231 = -324						; size = 4
$T225227 = -320						; size = 4
$T225223 = -316						; size = 4
$T225216 = -312						; size = 4
$T225203 = -308						; size = 4
$T225194 = -304						; size = 4
$T225190 = -300						; size = 4
$T225189 = -296						; size = 4
$T225156 = -292						; size = 4
$T225143 = -288						; size = 4
$T225139 = -284						; size = 4
$T225132 = -280						; size = 4
$T225128 = -273						; size = 1
$T225124 = -272						; size = 4
$T225120 = -265						; size = 1
_iMapY$225165 = -264					; size = 4
_iMapX$225164 = -260					; size = 4
$T225113 = -256						; size = 4
$T225109 = -252						; size = 4
$T225105 = -248						; size = 4
$T225101 = -244						; size = 4
$T225094 = -240						; size = 4
$T225093 = -236						; size = 4
$T225060 = -232						; size = 4
$T225047 = -228						; size = 4
$T225043 = -224						; size = 4
$T225036 = -220						; size = 4
$T225032 = -213						; size = 1
$T225028 = -212						; size = 4
$T225024 = -205						; size = 1
_iMapY$225069 = -204					; size = 4
_iMapX$225068 = -200					; size = 4
$T225017 = -196						; size = 4
$T225013 = -192						; size = 4
$T225009 = -188						; size = 4
$T225005 = -184						; size = 4
$T225001 = -180						; size = 4
$T224982 = -176						; size = 16
$T224981 = -157						; size = 1
$T224980 = -156						; size = 16
$T224979 = -138						; size = 1
$T224978 = -137						; size = 1
_pLeague$221360 = -136					; size = 4
_eLeague$221358 = -132					; size = 4
_pLeague$221350 = -128					; size = 4
_eLeague$221348 = -124					; size = 4
_pEspionage$221344 = -120				; size = 4
_eReligion$221341 = -116				; size = 4
_kGame$221038 = -112					; size = 4
_pkReligions$221039 = -108				; size = 4
_pReligion$221342 = -104				; size = 4
_kGame$221034 = -100					; size = 4
_pkReligions$221035 = -96				; size = 4
_kGame$221031 = -92					; size = 4
_pkReligions$221032 = -88				; size = 4
_kGame$221028 = -84					; size = 4
_pkReligions$221029 = -80				; size = 4
_pDeals$221020 = -76					; size = 4
_game$221019 = -72					; size = 4
_pDeals$221015 = -68					; size = 4
_game$221014 = -64					; size = 4
_pUnit$221009 = -60					; size = 8
_eTeam$221005 = -52					; size = 4
_pCity$221000 = -48					; size = 4
_kPlayer$220983 = -44					; size = 4
_iNotificationIndex$220974 = -40			; size = 4
_pkPlayerTechs$220972 = -36				; size = 4
_kPlayer$220971 = -32					; size = 4
_pPlot$220968 = -28					; size = 4
_pCity$220963 = -24					; size = 4
_iCityID$220962 = -20					; size = 4
_pPlot$220959 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
?IsNotificationExpired@CvNotifications@@QAE_NH@Z PROC	; CvNotifications::IsNotificationExpired, COMDAT
; _this$ = ecx

; 1462 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsNotificationExpired@CvNotifications@@QAE_NH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 596				; 00000254H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1463 : 	switch(m_aNotifications[iIndex].m_eNotificationType)

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 507779013		; 1e4417c5H
	jg	$LN80@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 507779013		; 1e4417c5H
	je	$LN53@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1168514695	; ba59e179H
	jg	$LN81@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1168514695	; ba59e179H
	je	$LN28@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1421067341	; ab4c3bb3H
	jg	SHORT $LN82@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1421067341	; ab4c3bb3H
	je	$LN48@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -2068323322	; 84b7e406H
	je	$LN10@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1774532806	; 963ac73aH
	je	$LN16@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1746998481	; 97deeb2fH
	je	$LN374@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN82@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], -1417116259	; ab88859dH
	je	$LN3@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -1181197223	; b9985c59H
	je	$LN128@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN81@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 84632199		; 050b6287H
	jg	SHORT $LN83@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 84632199		; 050b6287H
	je	$LN22@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -851367674		; cd412906H
	je	$LN73@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -597231081		; dc66fa17H
	je	$LN65@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], -372818113		; e9c73f3fH
	je	$LN19@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN83@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 88900711		; 054c8467H
	je	$LN46@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 294822899		; 1192a3f3H
	je	$LN8@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN80@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 1523558135		; 5acfa6f7H
	jg	$LN84@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1523558135		; 5acfa6f7H
	je	$LN170@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1218150582		; 489b80b6H
	jg	SHORT $LN85@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1218150582		; 489b80b6H
	je	$LN178@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 621751847		; 250f2e27H
	je	$LN284@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 623640104		; 252bfe28H
	je	$LN42@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 755914060		; 2d0e554cH
	je	$LN366@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN85@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 1279997337		; 4c4b3599H
	je	$LN23@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1376002242		; 520420c2H
	je	$LN44@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN84@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 1989681641		; 769821e9H
	jg	SHORT $LN86@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1989681641		; 769821e9H
	je	$LN36@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1591330057		; 5ed9c509H
	je	$LN33@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1784381333		; 6a5b7f95H
	je	$LN30@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 1892367718		; 70cb3d66H
	je	$LN71@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN86@IsNotifica@2:
	cmp	DWORD PTR tv68[ebp], 1996573794		; 77014c62H
	je	$LN40@IsNotifica@2
	cmp	DWORD PTR tv68[ebp], 2128612861		; 7ee00dfdH
	je	$LN21@IsNotifica@2
	jmp	$LN1@IsNotifica@2
$LN73@IsNotifica@2:

; 1464 : 	{
; 1465 : 	case NOTIFICATION_BUY_TILE:
; 1466 : 	{
; 1467 : 		if(GET_PLAYER(m_ePlayer).GetTreasury()->GetGold() < GET_PLAYER(m_ePlayer).GetBuyPlotCost())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225001[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225005[ebp], ecx
	mov	ecx, DWORD PTR $T225001[ebp]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	mov	esi, eax
	mov	ecx, DWORD PTR $T225005[ebp]
	call	?GetBuyPlotCost@CvPlayer@@QBEHXZ	; CvPlayer::GetBuyPlotCost
	cmp	esi, eax
	jge	SHORT $LN72@IsNotifica@2

; 1468 : 		{
; 1469 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN72@IsNotifica@2:

; 1470 : 		}
; 1471 : 	}
; 1472 : 	break;

	jmp	$LN74@IsNotifica@2
$LN71@IsNotifica@2:

; 1473 : 
; 1474 : 	case NOTIFICATION_BARBARIAN:
; 1475 : 	{
; 1476 : 		CvPlot* pPlot = GC.getMap().plot(m_aNotifications[iIndex].m_iX, m_aNotifications[iIndex].m_iY);

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T225009[ebp], edx
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225013[ebp], ecx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T225017[ebp], eax
	mov	ecx, DWORD PTR $T225009[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T225094[ebp], edx
	mov	eax, DWORD PTR $T225013[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T225093[ebp], ecx
	cmp	DWORD PTR $T225093[ebp], -2147483647	; 80000001H
	je	SHORT $LN102@IsNotifica@2
	cmp	DWORD PTR $T225094[ebp], -2147483647	; 80000001H
	jne	SHORT $LN103@IsNotifica@2
$LN102@IsNotifica@2:
	mov	DWORD PTR _pPlot$220959[ebp], 0
	jmp	$LN104@IsNotifica@2
$LN103@IsNotifica@2:
	mov	edx, DWORD PTR $T225017[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T225024[ebp], al
	mov	ecx, DWORD PTR $T225017[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T225028[ebp], edx
	movzx	eax, BYTE PTR $T225024[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225028[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225093[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$225068[ebp], eax
	mov	eax, DWORD PTR $T225017[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T225032[ebp], cl
	mov	edx, DWORD PTR $T225017[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T225036[ebp], eax
	movzx	ecx, BYTE PTR $T225032[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225036[ebp]
	push	edx
	mov	eax, DWORD PTR $T225094[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$225069[ebp], eax
	cmp	DWORD PTR _iMapX$225068[ebp], 0
	jl	SHORT $LN118@IsNotifica@2
	mov	ecx, DWORD PTR $T225017[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T225043[ebp], edx
	mov	eax, DWORD PTR _iMapX$225068[ebp]
	cmp	eax, DWORD PTR $T225043[ebp]
	jge	SHORT $LN118@IsNotifica@2
	cmp	DWORD PTR _iMapY$225069[ebp], 0
	jl	SHORT $LN118@IsNotifica@2
	mov	ecx, DWORD PTR $T225017[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T225047[ebp], edx
	mov	eax, DWORD PTR _iMapY$225069[ebp]
	cmp	eax, DWORD PTR $T225047[ebp]
	jge	SHORT $LN118@IsNotifica@2
	mov	DWORD PTR tv777[ebp], 1
	jmp	SHORT $LN116@IsNotifica@2
$LN118@IsNotifica@2:
	mov	DWORD PTR tv777[ebp], 0
$LN116@IsNotifica@2:
	cmp	DWORD PTR tv777[ebp], 0
	je	SHORT $LN106@IsNotifica@2
	mov	ecx, DWORD PTR $T225017[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T225060[ebp], edx
	mov	eax, DWORD PTR _iMapY$225069[ebp]
	imul	eax, DWORD PTR $T225060[ebp]
	add	eax, DWORD PTR _iMapX$225068[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T225017[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv768[ebp], eax
	jmp	SHORT $LN107@IsNotifica@2
$LN106@IsNotifica@2:
	mov	DWORD PTR tv768[ebp], 0
$LN107@IsNotifica@2:
	mov	edx, DWORD PTR tv768[ebp]
	mov	DWORD PTR _pPlot$220959[ebp], edx
$LN104@IsNotifica@2:

; 1477 : 		if(!pPlot->HasBarbarianCamp())

	mov	ecx, DWORD PTR _pPlot$220959[ebp]
	call	?HasBarbarianCamp@CvPlot@@QAE_NXZ	; CvPlot::HasBarbarianCamp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN70@IsNotifica@2

; 1478 : 		{
; 1479 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN70@IsNotifica@2:

; 1480 : 		}
; 1481 : 	}
; 1482 : 	break;

	jmp	$LN74@IsNotifica@2

; 1483 : 
; 1484 : 	case NOTIFICATION_CITY_RANGE_ATTACK:
; 1485 : 	{
; 1486 : 		int iCityID = m_aNotifications[iIndex].m_iGameDataIndex;

$LN128@IsNotifica@2:
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+72]
	mov	DWORD PTR _iCityID$220962[ebp], ecx

; 1487 : 		CvCity* pCity = GET_PLAYER(m_ePlayer).getCity(iCityID);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225101[ebp], eax
	mov	ecx, DWORD PTR _iCityID$220962[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T225101[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity$220963[ebp], eax

; 1488 : 
; 1489 : 		if(pCity == NULL)

	cmp	DWORD PTR _pCity$220963[ebp], 0
	jne	SHORT $LN68@IsNotifica@2

; 1490 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
	jmp	SHORT $LN67@IsNotifica@2
$LN68@IsNotifica@2:

; 1491 : 
; 1492 : 		else if(!pCity->CanRangeStrikeNow())

	mov	ecx, DWORD PTR _pCity$220963[ebp]
	call	?CanRangeStrikeNow@CvCity@@QBE_NXZ	; CvCity::CanRangeStrikeNow
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN67@IsNotifica@2

; 1493 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN67@IsNotifica@2:

; 1494 : 	}
; 1495 : 	break;

	jmp	$LN74@IsNotifica@2
$LN65@IsNotifica@2:

; 1496 : 
; 1497 : 	case NOTIFICATION_GOODY:
; 1498 : 	{
; 1499 : 		CvPlot* pPlot = GC.getMap().plot(m_aNotifications[iIndex].m_iX, m_aNotifications[iIndex].m_iY);

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T225105[ebp], eax
	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T225109[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T225113[ebp], ecx
	mov	edx, DWORD PTR $T225105[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T225190[ebp], eax
	mov	ecx, DWORD PTR $T225109[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T225189[ebp], edx
	cmp	DWORD PTR $T225189[ebp], -2147483647	; 80000001H
	je	SHORT $LN138@IsNotifica@2
	cmp	DWORD PTR $T225190[ebp], -2147483647	; 80000001H
	jne	SHORT $LN139@IsNotifica@2
$LN138@IsNotifica@2:
	mov	DWORD PTR _pPlot$220968[ebp], 0
	jmp	$LN140@IsNotifica@2
$LN139@IsNotifica@2:
	mov	eax, DWORD PTR $T225113[ebp]
	mov	cl, BYTE PTR [eax+4056]
	mov	BYTE PTR $T225120[ebp], cl
	mov	edx, DWORD PTR $T225113[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T225124[ebp], eax
	movzx	ecx, BYTE PTR $T225120[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225124[ebp]
	push	edx
	mov	eax, DWORD PTR $T225189[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$225164[ebp], eax
	mov	ecx, DWORD PTR $T225113[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T225128[ebp], dl
	mov	eax, DWORD PTR $T225113[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T225132[ebp], ecx
	movzx	edx, BYTE PTR $T225128[ebp]
	push	edx
	mov	eax, DWORD PTR $T225132[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225190[ebp]
	push	ecx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$225165[ebp], eax
	cmp	DWORD PTR _iMapX$225164[ebp], 0
	jl	SHORT $LN154@IsNotifica@2
	mov	edx, DWORD PTR $T225113[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T225139[ebp], eax
	mov	ecx, DWORD PTR _iMapX$225164[ebp]
	cmp	ecx, DWORD PTR $T225139[ebp]
	jge	SHORT $LN154@IsNotifica@2
	cmp	DWORD PTR _iMapY$225165[ebp], 0
	jl	SHORT $LN154@IsNotifica@2
	mov	edx, DWORD PTR $T225113[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T225143[ebp], eax
	mov	ecx, DWORD PTR _iMapY$225165[ebp]
	cmp	ecx, DWORD PTR $T225143[ebp]
	jge	SHORT $LN154@IsNotifica@2
	mov	DWORD PTR tv815[ebp], 1
	jmp	SHORT $LN152@IsNotifica@2
$LN154@IsNotifica@2:
	mov	DWORD PTR tv815[ebp], 0
$LN152@IsNotifica@2:
	cmp	DWORD PTR tv815[ebp], 0
	je	SHORT $LN142@IsNotifica@2
	mov	edx, DWORD PTR $T225113[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T225156[ebp], eax
	mov	ecx, DWORD PTR _iMapY$225165[ebp]
	imul	ecx, DWORD PTR $T225156[ebp]
	add	ecx, DWORD PTR _iMapX$225164[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T225113[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv806[ebp], ecx
	jmp	SHORT $LN143@IsNotifica@2
$LN142@IsNotifica@2:
	mov	DWORD PTR tv806[ebp], 0
$LN143@IsNotifica@2:
	mov	eax, DWORD PTR tv806[ebp]
	mov	DWORD PTR _pPlot$220968[ebp], eax
$LN140@IsNotifica@2:

; 1500 : 		if(!pPlot->isGoody(GET_PLAYER(m_ePlayer).getTeam()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225194[ebp], edx
	mov	eax, DWORD PTR $T225194[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR $T225203[ebp], eax
	mov	edx, DWORD PTR $T225203[ebp]
	push	edx
	mov	ecx, DWORD PTR _pPlot$220968[ebp]
	call	?isGoody@CvPlot@@QBE_NW4TeamTypes@@@Z	; CvPlot::isGoody
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN64@IsNotifica@2

; 1501 : 		{
; 1502 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN64@IsNotifica@2:

; 1503 : 		}
; 1504 : 	}
; 1505 : 	break;

	jmp	$LN74@IsNotifica@2

; 1506 : 
; 1507 : 	case NOTIFICATION_TECH:
; 1508 : 	{
; 1509 : 		CvPlayerAI& kPlayer = GET_PLAYER(m_ePlayer);

$LN170@IsNotifica@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$220971[ebp], edx

; 1510 : 		CvPlayerTechs* pkPlayerTechs = kPlayer.GetPlayerTechs();

	mov	ecx, DWORD PTR _kPlayer$220971[ebp]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	DWORD PTR _pkPlayerTechs$220972[ebp], eax

; 1511 : 		if(pkPlayerTechs->GetCurrentResearch() != NO_TECH)

	mov	ecx, DWORD PTR _pkPlayerTechs$220972[ebp]
	call	?GetCurrentResearch@CvPlayerTechs@@QBE?AW4TechTypes@@XZ ; CvPlayerTechs::GetCurrentResearch
	cmp	eax, -1
	je	SHORT $LN62@IsNotifica@2

; 1512 : 		{
; 1513 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN62@IsNotifica@2:

; 1514 : 		}
; 1515 : 
; 1516 : 		int iNotificationIndex = m_iNotificationsBeginIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _iNotificationIndex$220974[ebp], ecx
$LN61@IsNotifica@2:

; 1517 : 		while(iNotificationIndex != m_iNotificationsEndIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iNotificationIndex$220974[ebp]
	cmp	eax, DWORD PTR [edx+24]
	je	SHORT $LN60@IsNotifica@2

; 1518 : 		{
; 1519 : 			if(NOTIFICATION_FREE_TECH == m_aNotifications[iNotificationIndex].m_eNotificationType)

	mov	ecx, DWORD PTR _iNotificationIndex$220974[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [ecx+eax], 1218150582		; 489b80b6H
	jne	SHORT $LN59@IsNotifica@2

; 1520 : 			{
; 1521 : 				if(!m_aNotifications[iNotificationIndex].m_bDismissed)

	mov	ecx, DWORD PTR _iNotificationIndex$220974[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN59@IsNotifica@2

; 1522 : 				{
; 1523 : 					return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN59@IsNotifica@2:

; 1524 : 				}
; 1525 : 			}
; 1526 : 
; 1527 : 			iNotificationIndex++;

	mov	edx, DWORD PTR _iNotificationIndex$220974[ebp]
	add	edx, 1
	mov	DWORD PTR _iNotificationIndex$220974[ebp], edx

; 1528 : 			if(iNotificationIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T225216[ebp], eax
	mov	ecx, DWORD PTR $T225216[ebp]
	mov	edx, DWORD PTR $T225216[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iNotificationIndex$220974[ebp], eax
	jl	SHORT $LN57@IsNotifica@2

; 1529 : 			{
; 1530 : 				iNotificationIndex = 0;

	mov	DWORD PTR _iNotificationIndex$220974[ebp], 0
$LN57@IsNotifica@2:

; 1531 : 			}
; 1532 : 		}

	jmp	$LN61@IsNotifica@2
$LN60@IsNotifica@2:

; 1533 : 
; 1534 : 		//Expire this notification if there are no more techs that can be researched at this time.
; 1535 : 		return pkPlayerTechs->GetNumTechsCanBeResearched() == 0;

	mov	ecx, DWORD PTR _pkPlayerTechs$220972[ebp]
	call	?GetNumTechsCanBeResearched@CvPlayerTechs@@QBEHXZ ; CvPlayerTechs::GetNumTechsCanBeResearched
	neg	eax
	sbb	eax, eax
	add	eax, 1
	jmp	$LN76@IsNotifica@2

; 1536 : 	}
; 1537 : 	break;

	jmp	$LN74@IsNotifica@2

; 1538 : 	case NOTIFICATION_FREE_TECH:
; 1539 : 	{
; 1540 : 		CvPlayerAI& kPlayer = GET_PLAYER(m_ePlayer);

$LN178@IsNotifica@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$220983[ebp], eax

; 1541 : 		if(kPlayer.GetNumFreeTechs() == 0)

	mov	ecx, DWORD PTR _kPlayer$220983[ebp]
	call	?GetNumFreeTechs@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTechs
	test	eax, eax
	jne	SHORT $LN55@IsNotifica@2

; 1542 : 		{
; 1543 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2

; 1544 : 		}
; 1545 : 		else

	jmp	SHORT $LN54@IsNotifica@2
$LN55@IsNotifica@2:

; 1546 : 		{
; 1547 : 			//Expire this notification if there are no more techs that can be researched at this time.
; 1548 : 			return kPlayer.GetPlayerTechs()->GetNumTechsCanBeResearched() == 0;

	mov	ecx, DWORD PTR _kPlayer$220983[ebp]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetNumTechsCanBeResearched@CvPlayerTechs@@QBEHXZ ; CvPlayerTechs::GetNumTechsCanBeResearched
	neg	eax
	sbb	eax, eax
	add	eax, 1
	jmp	$LN76@IsNotifica@2
$LN54@IsNotifica@2:

; 1549 : 		}
; 1550 : 	}
; 1551 : 	break;

	jmp	$LN74@IsNotifica@2
$LN53@IsNotifica@2:

; 1552 : 
; 1553 : 	case NOTIFICATION_FREE_POLICY:
; 1554 : 	{
; 1555 : 		if(GC.getGame().isOption(GAMEOPTION_POLICY_SAVING))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225223[ebp], ecx
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T225223[ebp]
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN52@IsNotifica@2

; 1556 : 		{
; 1557 : 			if(GET_PLAYER(m_ePlayer).GetNumFreePolicies() == 0 && GET_PLAYER(m_ePlayer).GetNumFreeTenets() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225227[ebp], ecx
	mov	ecx, DWORD PTR $T225227[ebp]
	call	?GetNumFreePolicies@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreePolicies
	test	eax, eax
	jne	SHORT $LN51@IsNotifica@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225231[ebp], eax
	mov	ecx, DWORD PTR $T225231[ebp]
	call	?GetNumFreeTenets@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTenets
	test	eax, eax
	jne	SHORT $LN51@IsNotifica@2

; 1558 : 				return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN51@IsNotifica@2:

; 1559 : 		}
; 1560 : 		else

	jmp	$LN50@IsNotifica@2
$LN52@IsNotifica@2:

; 1561 : 		{
; 1562 : 			if((GET_PLAYER(m_ePlayer).getJONSCulture() < GET_PLAYER(m_ePlayer).getNextPolicyCost() && GET_PLAYER(m_ePlayer).GetNumFreePolicies() == 0 && GET_PLAYER(m_ePlayer).GetNumFreeTenets() == 0))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225235[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225239[ebp], ecx
	mov	ecx, DWORD PTR $T225235[ebp]
	call	?getJONSCulture@CvPlayer@@QBEHXZ	; CvPlayer::getJONSCulture
	mov	esi, eax
	mov	ecx, DWORD PTR $T225239[ebp]
	call	?getNextPolicyCost@CvPlayer@@QBEHXZ	; CvPlayer::getNextPolicyCost
	cmp	esi, eax
	jge	SHORT $LN50@IsNotifica@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225243[ebp], eax
	mov	ecx, DWORD PTR $T225243[ebp]
	call	?GetNumFreePolicies@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreePolicies
	test	eax, eax
	jne	SHORT $LN50@IsNotifica@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225247[ebp], edx
	mov	ecx, DWORD PTR $T225247[ebp]
	call	?GetNumFreeTenets@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTenets
	test	eax, eax
	jne	SHORT $LN50@IsNotifica@2

; 1563 : 				return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN50@IsNotifica@2:

; 1564 : 		}
; 1565 : 	}
; 1566 : 	break;

	jmp	$LN74@IsNotifica@2
$LN48@IsNotifica@2:

; 1567 : 
; 1568 : 	case NOTIFICATION_FREE_GREAT_PERSON:
; 1569 : 	{
; 1570 : 		if(GET_PLAYER(m_ePlayer).GetNumFreeGreatPeople() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225251[ebp], ecx
	mov	ecx, DWORD PTR $T225251[ebp]
	call	?GetNumFreeGreatPeople@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeGreatPeople
	test	eax, eax
	jne	SHORT $LN47@IsNotifica@2

; 1571 : 		{
; 1572 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN47@IsNotifica@2:

; 1573 : 		}
; 1574 : 	}
; 1575 : 	break;

	jmp	$LN74@IsNotifica@2
$LN46@IsNotifica@2:

; 1576 : 
; 1577 : 	case NOTIFICATION_MAYA_LONG_COUNT:
; 1578 : 	{
; 1579 : 		if(GET_PLAYER(m_ePlayer).GetNumMayaBoosts() == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225255[ebp], eax
	mov	ecx, DWORD PTR $T225255[ebp]
	call	?GetNumMayaBoosts@CvPlayer@@QBEHXZ	; CvPlayer::GetNumMayaBoosts
	test	eax, eax
	jne	SHORT $LN45@IsNotifica@2

; 1580 : 		{
; 1581 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN45@IsNotifica@2:

; 1582 : 		}
; 1583 : 	}
; 1584 : 	break;

	jmp	$LN74@IsNotifica@2
$LN44@IsNotifica@2:

; 1585 : 
; 1586 : 	case NOTIFICATION_FAITH_GREAT_PERSON:
; 1587 : 	{
; 1588 : 		if(GET_PLAYER(m_ePlayer).GetNumFaithGreatPeople() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225259[ebp], edx
	mov	ecx, DWORD PTR $T225259[ebp]
	call	?GetNumFaithGreatPeople@CvPlayer@@QBEHXZ ; CvPlayer::GetNumFaithGreatPeople
	test	eax, eax
	jne	SHORT $LN43@IsNotifica@2

; 1589 : 		{
; 1590 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN43@IsNotifica@2:

; 1591 : 		}
; 1592 : 	}
; 1593 : 	break;

	jmp	$LN74@IsNotifica@2
$LN42@IsNotifica@2:

; 1594 : 
; 1595 : 	case NOTIFICATION_POLICY:
; 1596 : 	{
; 1597 : 		if(GET_PLAYER(m_ePlayer).getJONSCulture() < GET_PLAYER(m_ePlayer).getNextPolicyCost() && GET_PLAYER(m_ePlayer).GetNumFreePolicies() == 0 && GET_PLAYER(m_ePlayer).GetNumFreeTenets() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225263[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225267[ebp], eax
	mov	ecx, DWORD PTR $T225263[ebp]
	call	?getJONSCulture@CvPlayer@@QBEHXZ	; CvPlayer::getJONSCulture
	mov	esi, eax
	mov	ecx, DWORD PTR $T225267[ebp]
	call	?getNextPolicyCost@CvPlayer@@QBEHXZ	; CvPlayer::getNextPolicyCost
	cmp	esi, eax
	jge	SHORT $LN41@IsNotifica@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225271[ebp], edx
	mov	ecx, DWORD PTR $T225271[ebp]
	call	?GetNumFreePolicies@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreePolicies
	test	eax, eax
	jne	SHORT $LN41@IsNotifica@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225275[ebp], ecx
	mov	ecx, DWORD PTR $T225275[ebp]
	call	?GetNumFreeTenets@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTenets
	test	eax, eax
	jne	SHORT $LN41@IsNotifica@2

; 1598 : 		{
; 1599 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN41@IsNotifica@2:

; 1600 : 		}
; 1601 : 	}
; 1602 : 	break;

	jmp	$LN74@IsNotifica@2
$LN40@IsNotifica@2:

; 1603 : 	case NOTIFICATION_PRODUCTION:
; 1604 : 	{
; 1605 : 		//CvCity* pCity = GET_PLAYER(m_ePlayer).getCity(m_aNotifications[iIndex].m_iGameDataIndex);
; 1606 : 		CvCity* pCity = GC.getMap().plot(m_aNotifications[iIndex].m_iX, m_aNotifications[iIndex].m_iY)->getPlotCity();//GET_PLAYER(m_ePlayer).getCity(notification.m_iGameDataIndex);

	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T225279[ebp], edx
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225283[ebp], ecx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T225287[ebp], eax
	mov	ecx, DWORD PTR $T225279[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T225350[ebp], edx
	mov	eax, DWORD PTR $T225283[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T225349[ebp], ecx
	cmp	DWORD PTR $T225349[ebp], -2147483647	; 80000001H
	je	SHORT $LN214@IsNotifica@2
	cmp	DWORD PTR $T225350[ebp], -2147483647	; 80000001H
	jne	SHORT $LN215@IsNotifica@2
$LN214@IsNotifica@2:
	mov	DWORD PTR $T225351[ebp], 0
	jmp	$LN216@IsNotifica@2
$LN215@IsNotifica@2:
	mov	edx, DWORD PTR $T225287[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T225294[ebp], al
	mov	ecx, DWORD PTR $T225287[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T225298[ebp], edx
	movzx	eax, BYTE PTR $T225294[ebp]
	test	eax, eax
	je	SHORT $LN227@IsNotifica@2
	cmp	DWORD PTR $T225349[ebp], 0
	jge	SHORT $LN226@IsNotifica@2
	mov	eax, DWORD PTR $T225349[ebp]
	cdq
	idiv	DWORD PTR $T225298[ebp]
	add	edx, DWORD PTR $T225298[ebp]
	mov	DWORD PTR _iMapX$225347[ebp], edx
	jmp	SHORT $LN228@IsNotifica@2
	jmp	SHORT $LN227@IsNotifica@2
$LN226@IsNotifica@2:
	mov	ecx, DWORD PTR $T225349[ebp]
	cmp	ecx, DWORD PTR $T225298[ebp]
	jl	SHORT $LN227@IsNotifica@2
	mov	eax, DWORD PTR $T225349[ebp]
	cdq
	idiv	DWORD PTR $T225298[ebp]
	mov	DWORD PTR _iMapX$225347[ebp], edx
	jmp	SHORT $LN228@IsNotifica@2
$LN227@IsNotifica@2:
	mov	edx, DWORD PTR $T225349[ebp]
	mov	DWORD PTR _iMapX$225347[ebp], edx
$LN228@IsNotifica@2:
	mov	eax, DWORD PTR $T225287[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T225309[ebp], cl
	mov	edx, DWORD PTR $T225287[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T225313[ebp], eax
	movzx	ecx, BYTE PTR $T225309[ebp]
	push	ecx
	mov	edx, DWORD PTR $T225313[ebp]
	push	edx
	mov	eax, DWORD PTR $T225350[ebp]
	push	eax
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$225348[ebp], eax
	mov	ecx, DWORD PTR _iMapY$225348[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMapX$225347[ebp]
	push	edx
	mov	ecx, DWORD PTR $T225287[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN218@IsNotifica@2
	mov	eax, DWORD PTR $T225287[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T225318[ebp], ecx
	mov	edx, DWORD PTR _iMapY$225348[ebp]
	imul	edx, DWORD PTR $T225318[ebp]
	add	edx, DWORD PTR _iMapX$225347[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T225287[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv899[ebp], edx
	jmp	SHORT $LN219@IsNotifica@2
$LN218@IsNotifica@2:
	mov	DWORD PTR tv899[ebp], 0
$LN219@IsNotifica@2:
	mov	ecx, DWORD PTR tv899[ebp]
	mov	DWORD PTR $T225351[ebp], ecx
$LN216@IsNotifica@2:
	mov	ecx, DWORD PTR $T225351[ebp]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$221000[ebp], eax

; 1607 : 
; 1608 : 		// if the city no longer exists
; 1609 : 		if(!pCity)

	cmp	DWORD PTR _pCity$221000[ebp], 0
	jne	SHORT $LN39@IsNotifica@2

; 1610 : 		{
; 1611 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN39@IsNotifica@2:

; 1612 : 		}
; 1613 : 
; 1614 : #ifdef AUI_NOFITICATIONS_FIX_PRODUCTION_NOTIFICATION_REMOVAL_EXTRA_CHECKS
; 1615 : 		if (pCity->getOwner() != m_ePlayer)
; 1616 : 		{
; 1617 : 			return true;
; 1618 : 		}
; 1619 : 
; 1620 : 		if (pCity->isProductionAutomated())
; 1621 : 		{
; 1622 : 			return true;
; 1623 : 		}
; 1624 : #else
; 1625 : 		// if the city is a puppet
; 1626 : 		if(pCity->IsPuppet())

	mov	ecx, DWORD PTR _pCity$221000[ebp]
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN38@IsNotifica@2

; 1627 : 		{
; 1628 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN38@IsNotifica@2:

; 1629 : 		}
; 1630 : #endif
; 1631 : 
; 1632 : 		// City has chosen something
; 1633 : 		if(pCity->getOrderQueueLength() > 0)

	mov	ecx, DWORD PTR _pCity$221000[ebp]
	call	?getOrderQueueLength@CvCity@@QAEHXZ	; CvCity::getOrderQueueLength
	test	eax, eax
	jle	SHORT $LN37@IsNotifica@2

; 1634 : 		{
; 1635 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN37@IsNotifica@2:

; 1636 : 		}
; 1637 : 	}
; 1638 : 	break;

	jmp	$LN74@IsNotifica@2
$LN36@IsNotifica@2:

; 1639 : 	case NOTIFICATION_DIPLO_VOTE:
; 1640 : 	{
; 1641 : 		TeamTypes eTeam = GET_PLAYER(m_ePlayer).getTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225360[ebp], ecx
	mov	edx, DWORD PTR $T225360[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	mov	DWORD PTR _eTeam$221005[ebp], eax

; 1642 : 
; 1643 : 		// Vote from this team registered
; 1644 : 		if(GC.getGame().GetVoteCast(eTeam) != NO_TEAM)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225372[ebp], ecx
	mov	edx, DWORD PTR _eTeam$221005[ebp]
	push	edx
	mov	ecx, DWORD PTR $T225372[ebp]
	call	?GetVoteCast@CvGame@@QBE?AW4TeamTypes@@W42@@Z ; CvGame::GetVoteCast
	cmp	eax, -1
	je	SHORT $LN35@IsNotifica@2

; 1645 : 		{
; 1646 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN35@IsNotifica@2:

; 1647 : 		}
; 1648 : 
; 1649 : 		// Votes from ALL teams registered. This is necessary in addition to the above if block, because if this player is the last to vote
; 1650 : 		// then everything gets reset immediately, and it'll be NO_TEAM by the time this function is tested again
; 1651 : 		if(GC.getGame().GetNumVictoryVotesExpected() == 0)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225376[ebp], eax
	mov	ecx, DWORD PTR $T225376[ebp]
	call	?GetNumVictoryVotesExpected@CvGame@@QBEHXZ ; CvGame::GetNumVictoryVotesExpected
	test	eax, eax
	jne	SHORT $LN34@IsNotifica@2

; 1652 : 		{
; 1653 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN34@IsNotifica@2:

; 1654 : 		}
; 1655 : 	}
; 1656 : 	break;

	jmp	$LN74@IsNotifica@2
$LN33@IsNotifica@2:

; 1657 : 	case NOTIFICATION_UNIT_PROMOTION:
; 1658 : 	{
; 1659 : 		UnitHandle pUnit = GET_PLAYER(m_ePlayer).getUnit(m_aNotifications[iIndex].m_iExtraGameData);

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225380[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225384[ebp], ecx
	mov	edx, DWORD PTR $T225380[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR $T225384[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T225394[ebp], eax
	mov	ecx, DWORD PTR $T225394[ebp]
	mov	DWORD PTR _pUnit$221009[ebp], ecx
	mov	BYTE PTR _pUnit$221009[ebp+4], 0
	cmp	DWORD PTR _pUnit$221009[ebp], 0
	je	SHORT $LN258@IsNotifica@2
	mov	ecx, DWORD PTR _pUnit$221009[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN258@IsNotifica@2:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1660 : 		if(!pUnit || !pUnit->isPromotionReady())

	xor	edx, edx
	cmp	DWORD PTR _pUnit$221009[ebp], 0
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN31@IsNotifica@2
	mov	ecx, DWORD PTR _pUnit$221009[ebp]
	mov	DWORD PTR $T225401[ebp], ecx
	mov	ecx, DWORD PTR $T225401[ebp]
	call	?isPromotionReady@CvUnit@@QBE_NXZ	; CvUnit::isPromotionReady
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN32@IsNotifica@2
$LN31@IsNotifica@2:

; 1661 : 		{
; 1662 : 			return true;

	mov	BYTE PTR $T224978[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$221009[ebp], 0
	je	SHORT $LN267@IsNotifica@2
	mov	ecx, DWORD PTR _pUnit$221009[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN267@IsNotifica@2:
	mov	al, BYTE PTR $T224978[ebp]
	jmp	$LN76@IsNotifica@2
$LN32@IsNotifica@2:

; 1663 : 		}
; 1664 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$221009[ebp], 0
	je	SHORT $LN272@IsNotifica@2
	mov	ecx, DWORD PTR _pUnit$221009[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN272@IsNotifica@2:

; 1665 : 	break;

	jmp	$LN74@IsNotifica@2
$LN30@IsNotifica@2:

; 1666 : 	case NOTIFICATION_PLAYER_DEAL:
; 1667 : 	{
; 1668 : 		CvGame& game = GC.getGame();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _game$221014[ebp], eax

; 1669 : 		CvGameDeals* pDeals = game.GetGameDeals();

	mov	ecx, DWORD PTR _game$221014[ebp]
	call	?GetGameDeals@CvGame@@QAEPAVCvGameDeals@@XZ ; CvGame::GetGameDeals
	mov	DWORD PTR _pDeals$221015[ebp], eax

; 1670 : 
; 1671 : 		if(!pDeals->ProposedDealExists(m_ePlayer, (PlayerTypes)(m_aNotifications[iIndex].m_iX)))

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225426[ebp], ecx
	mov	eax, DWORD PTR $T225426[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pDeals$221015[ebp]
	call	?ProposedDealExists@CvGameDeals@@QAE_NW4PlayerTypes@@0@Z ; CvGameDeals::ProposedDealExists
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN29@IsNotifica@2

; 1672 : 		{
; 1673 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN29@IsNotifica@2:

; 1674 : 		}
; 1675 : 	}
; 1676 : 	break;

	jmp	$LN74@IsNotifica@2
$LN28@IsNotifica@2:

; 1677 : 	case NOTIFICATION_PLAYER_DEAL_RECEIVED:
; 1678 : 	{
; 1679 : 		CvGame& game = GC.getGame();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _game$221019[ebp], edx

; 1680 : 		CvGameDeals* pDeals = game.GetGameDeals();

	mov	ecx, DWORD PTR _game$221019[ebp]
	call	?GetGameDeals@CvGame@@QAEPAVCvGameDeals@@XZ ; CvGame::GetGameDeals
	mov	DWORD PTR _pDeals$221020[ebp], eax

; 1681 : 
; 1682 : 		if(!pDeals->ProposedDealExists((PlayerTypes)(m_aNotifications[iIndex].m_iX),  m_ePlayer))

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T225433[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T225433[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	ecx, DWORD PTR _pDeals$221020[ebp]
	call	?ProposedDealExists@CvGameDeals@@QAE_NW4PlayerTypes@@0@Z ; CvGameDeals::ProposedDealExists
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN27@IsNotifica@2

; 1683 : 		{
; 1684 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN27@IsNotifica@2:

; 1685 : 		}
; 1686 : 	}
; 1687 : 	break;

	jmp	$LN74@IsNotifica@2

; 1688 : 	case NOTIFICATION_DEMAND_RESOURCE:
; 1689 : 	{
; 1690 : 		// if this is a "you ran out of this resource" demand resource.
; 1691 : 		// I did this so not to break the save format
; 1692 : 		if(m_aNotifications[iIndex].m_iX == -1 && m_aNotifications[iIndex].m_iY == -1)

$LN284@IsNotifica@2:
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx+64], -1
	jne	SHORT $LN23@IsNotifica@2
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx+68], -1
	jne	SHORT $LN23@IsNotifica@2

; 1693 : 		{
; 1694 : 			if(GET_PLAYER(m_ePlayer).getNumResourceAvailable((ResourceTypes)m_aNotifications[iIndex].m_iGameDataIndex, true) >= 0)

	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225443[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225447[ebp], ecx
	push	1
	mov	edx, DWORD PTR $T225443[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR $T225447[ebp]
	call	?getNumResourceAvailable@CvPlayer@@QBEHW4ResourceTypes@@_N@Z ; CvPlayer::getNumResourceAvailable
	test	eax, eax
	jl	SHORT $LN23@IsNotifica@2

; 1695 : 			{
; 1696 : 				return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN23@IsNotifica@2:

; 1697 : 			}
; 1698 : 		}
; 1699 : 	}
; 1700 : 
; 1701 : 	case NOTIFICATION_FOUND_PANTHEON:
; 1702 : 	{
; 1703 : 		CvGame& kGame(GC.getGame());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _kGame$221028[ebp], ecx

; 1704 : 		CvGameReligions* pkReligions(kGame.GetGameReligions());

	mov	ecx, DWORD PTR _kGame$221028[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	DWORD PTR _pkReligions$221029[ebp], eax

; 1705 : 		return pkReligions->CanCreatePantheon(m_ePlayer, true) != CvGameReligions::FOUNDING_OK;

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pkReligions$221029[ebp]
	call	?CanCreatePantheon@CvGameReligions@@QAE?AW4FOUNDING_RESULT@1@W4PlayerTypes@@_N@Z ; CvGameReligions::CanCreatePantheon
	neg	eax
	sbb	eax, eax
	neg	eax
	jmp	$LN76@IsNotifica@2

; 1706 : 	}
; 1707 : 	break;

	jmp	$LN74@IsNotifica@2
$LN22@IsNotifica@2:

; 1708 : 
; 1709 : 	case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 1710 : 	{
; 1711 : 		CvGame& kGame(GC.getGame());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _kGame$221031[ebp], ecx

; 1712 : 		CvGameReligions* pkReligions(kGame.GetGameReligions());

	mov	ecx, DWORD PTR _kGame$221031[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	DWORD PTR _pkReligions$221032[ebp], eax

; 1713 : 		return pkReligions->HasAddedReformationBelief(m_ePlayer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pkReligions$221032[ebp]
	call	?HasAddedReformationBelief@CvGameReligions@@QBE_NW4PlayerTypes@@@Z ; CvGameReligions::HasAddedReformationBelief
	jmp	$LN76@IsNotifica@2
$LN21@IsNotifica@2:

; 1714 : 	}
; 1715 : 
; 1716 : 	case NOTIFICATION_FOUND_RELIGION:
; 1717 : 	{
; 1718 : 		CvGame& kGame(GC.getGame());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _kGame$221034[ebp], ecx

; 1719 : 		CvGameReligions* pkReligions(kGame.GetGameReligions());

	mov	ecx, DWORD PTR _kGame$221034[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	DWORD PTR _pkReligions$221035[ebp], eax

; 1720 : 		if (pkReligions->GetNumReligionsStillToFound() <= 0)

	mov	ecx, DWORD PTR _pkReligions$221035[ebp]
	call	?GetNumReligionsStillToFound@CvGameReligions@@QBEHXZ ; CvGameReligions::GetNumReligionsStillToFound
	test	eax, eax
	jg	SHORT $LN20@IsNotifica@2

; 1721 : 			return true;	// None left, dismiss the notification

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN20@IsNotifica@2:

; 1722 : 
; 1723 : 		return pkReligions->HasCreatedReligion(m_ePlayer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pkReligions$221035[ebp]
	call	?HasCreatedReligion@CvGameReligions@@QBE_NW4PlayerTypes@@@Z ; CvGameReligions::HasCreatedReligion
	jmp	$LN76@IsNotifica@2

; 1724 : 	}
; 1725 : 	break;

	jmp	$LN74@IsNotifica@2
$LN19@IsNotifica@2:

; 1726 : 
; 1727 : 	case NOTIFICATION_ENHANCE_RELIGION:
; 1728 : 	{
; 1729 : 		CvGame& kGame(GC.getGame());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _kGame$221038[ebp], ecx

; 1730 : 		CvGameReligions* pkReligions(kGame.GetGameReligions());

	mov	ecx, DWORD PTR _kGame$221038[ebp]
	call	?GetGameReligions@CvGame@@QAEPAVCvGameReligions@@XZ ; CvGame::GetGameReligions
	mov	DWORD PTR _pkReligions$221039[ebp], eax

; 1731 : 		if (pkReligions->GetAvailableEnhancerBeliefs().size() == 0)

	lea	edx, DWORD PTR $T224980[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkReligions$221039[ebp]
	call	?GetAvailableEnhancerBeliefs@CvGameReligions@@QAE?AV?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@XZ ; CvGameReligions::GetAvailableEnhancerBeliefs
	mov	DWORD PTR $T225463[ebp], eax
	mov	eax, DWORD PTR $T225463[ebp]
	mov	ecx, DWORD PTR $T225463[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR $T224979[ebp], dl
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T224980[ebp]
	call	?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ ; std::vector<enum BeliefTypes,std::allocator<enum BeliefTypes> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movzx	eax, BYTE PTR $T224979[ebp]
	test	eax, eax
	je	SHORT $LN18@IsNotifica@2

; 1732 : 			return true;	// None left, dismiss the notification.

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN18@IsNotifica@2:

; 1733 : 		if (pkReligions->GetAvailableFollowerBeliefs().size() == 0)

	lea	ecx, DWORD PTR $T224982[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkReligions$221039[ebp]
	call	?GetAvailableFollowerBeliefs@CvGameReligions@@QAE?AV?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@XZ ; CvGameReligions::GetAvailableFollowerBeliefs
	mov	DWORD PTR $T225552[ebp], eax
	mov	edx, DWORD PTR $T225552[ebp]
	mov	eax, DWORD PTR $T225552[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR $T224981[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T224982[ebp]
	call	?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ ; std::vector<enum BeliefTypes,std::allocator<enum BeliefTypes> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movzx	edx, BYTE PTR $T224981[ebp]
	test	edx, edx
	je	SHORT $LN17@IsNotifica@2

; 1734 : 			return true;	// None left, dismiss the notification.		

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN17@IsNotifica@2:

; 1735 : 
; 1736 : 		ReligionTypes eReligion = pkReligions->GetReligionCreatedByPlayer(m_ePlayer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _pkReligions$221039[ebp]
	call	?GetReligionCreatedByPlayer@CvGameReligions@@QBE?AW4ReligionTypes@@W4PlayerTypes@@@Z ; CvGameReligions::GetReligionCreatedByPlayer
	mov	DWORD PTR _eReligion$221341[ebp], eax

; 1737 : 		const CvReligion* pReligion = pkReligions->GetReligion(eReligion, m_ePlayer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _eReligion$221341[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkReligions$221039[ebp]
	call	?GetReligion@CvGameReligions@@QBEPBVCvReligion@@W4ReligionTypes@@W4PlayerTypes@@@Z ; CvGameReligions::GetReligion
	mov	DWORD PTR _pReligion$221342[ebp], eax

; 1738 : 		return (NULL != pReligion && pReligion->m_bEnhanced);

	cmp	DWORD PTR _pReligion$221342[ebp], 0
	je	SHORT $LN78@IsNotifica@2
	mov	edx, DWORD PTR _pReligion$221342[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN78@IsNotifica@2
	mov	DWORD PTR tv564[ebp], 1
	jmp	SHORT $LN79@IsNotifica@2
$LN78@IsNotifica@2:
	mov	DWORD PTR tv564[ebp], 0
$LN79@IsNotifica@2:
	mov	al, BYTE PTR tv564[ebp]
	jmp	$LN76@IsNotifica@2

; 1739 : 	}
; 1740 : 	break;

	jmp	$LN74@IsNotifica@2
$LN16@IsNotifica@2:

; 1741 : 
; 1742 : 	case NOTIFICATION_SPY_STOLE_TECH:
; 1743 : 	{
; 1744 : 		CvPlayerEspionage* pEspionage = GET_PLAYER(m_ePlayer).GetEspionage();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225641[ebp], edx
	mov	ecx, DWORD PTR $T225641[ebp]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pEspionage$221344[ebp], eax

; 1745 : 		if (pEspionage->m_aiNumTechsToStealList[m_aNotifications[iIndex].m_iGameDataIndex] <= 0)

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T225645[ebp], eax
	mov	edx, DWORD PTR $T225645[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _pEspionage$221344[ebp]
	mov	edx, DWORD PTR [ecx+720]
	cmp	DWORD PTR [edx+eax*4], 0
	jg	SHORT $LN15@IsNotifica@2

; 1746 : 		{
; 1747 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2

; 1748 : 		}
; 1749 : 		else

	jmp	SHORT $LN14@IsNotifica@2
$LN15@IsNotifica@2:

; 1750 : 		{
; 1751 : 			return false;

	xor	al, al
	jmp	$LN76@IsNotifica@2
$LN14@IsNotifica@2:

; 1752 : 		}
; 1753 : 	}
; 1754 : 	break;

	jmp	$LN74@IsNotifica@2

; 1755 : 
; 1756 : 	case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 1757 : 	{
; 1758 : #ifdef AUI_LEAGUES_FIX_POSSIBLE_DEALLOCATION_CRASH
; 1759 : 		CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetActiveLeague();
; 1760 : 		if (pLeague && !pLeague->CanPropose(m_ePlayer))
; 1761 : #else
; 1762 : 		LeagueTypes eLeague = (LeagueTypes) m_aNotifications[iIndex].m_iGameDataIndex;

$LN366@IsNotifica@2:
	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+72]
	mov	DWORD PTR _eLeague$221348[ebp], eax

; 1763 : 		CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetLeague(eLeague);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225655[ebp], ecx
	mov	edx, DWORD PTR _eLeague$221348[ebp]
	push	edx
	mov	ecx, DWORD PTR $T225655[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetLeague@CvGameLeagues@@QAEPAVCvLeague@@W4LeagueTypes@@@Z ; CvGameLeagues::GetLeague
	mov	DWORD PTR _pLeague$221350[ebp], eax

; 1764 : 		if (!pLeague->CanPropose(m_ePlayer))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _pLeague$221350[ebp]
	call	?CanPropose@CvLeague@@QAE_NW4PlayerTypes@@@Z ; CvLeague::CanPropose
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN12@IsNotifica@2

; 1765 : #endif
; 1766 : 		{
; 1767 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2

; 1768 : 		}
; 1769 : 		else

	jmp	SHORT $LN11@IsNotifica@2
$LN12@IsNotifica@2:

; 1770 : 		{
; 1771 : 			return false;

	xor	al, al
	jmp	$LN76@IsNotifica@2
$LN11@IsNotifica@2:

; 1772 : 		}
; 1773 : 	}
; 1774 : 	break;

	jmp	$LN74@IsNotifica@2
$LN10@IsNotifica@2:

; 1775 : 
; 1776 : 	case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 1777 : 	{
; 1778 : 		if (GET_PLAYER(m_ePlayer).GetNumArchaeologyChoices() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225659[ebp], ecx
	mov	ecx, DWORD PTR $T225659[ebp]
	call	?GetNumArchaeologyChoices@CvPlayer@@QBEHXZ ; CvPlayer::GetNumArchaeologyChoices
	test	eax, eax
	jne	SHORT $LN9@IsNotifica@2

; 1779 : 		{
; 1780 : 			return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN9@IsNotifica@2:

; 1781 : 		}
; 1782 : 	}
; 1783 : 	break;

	jmp	$LN74@IsNotifica@2
$LN8@IsNotifica@2:

; 1784 : 
; 1785 : 	case NOTIFICATION_CHOOSE_IDEOLOGY:
; 1786 : 		{
; 1787 : 			if (GET_PLAYER(m_ePlayer).GetPlayerPolicies()->GetLateGamePolicyTree() != NO_POLICY_BRANCH_TYPE)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T225663[ebp], eax
	mov	ecx, DWORD PTR $T225663[ebp]
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetLateGamePolicyTree@CvPlayerPolicies@@QBE?AW4PolicyBranchTypes@@XZ ; CvPlayerPolicies::GetLateGamePolicyTree
	cmp	eax, -1
	je	SHORT $LN7@IsNotifica@2

; 1788 : 			{
; 1789 : 				return true;

	mov	al, 1
	jmp	$LN76@IsNotifica@2
$LN7@IsNotifica@2:

; 1790 : 			}
; 1791 : 		}
; 1792 : 		break;

	jmp	$LN74@IsNotifica@2

; 1793 : 
; 1794 : 	case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 1795 : 	{
; 1796 : #ifdef AUI_LEAGUES_FIX_POSSIBLE_DEALLOCATION_CRASH
; 1797 : 		CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetActiveLeague();
; 1798 : 		if (pLeague && !pLeague->CanVote(m_ePlayer))
; 1799 : #else
; 1800 : 		LeagueTypes eLeague = (LeagueTypes) m_aNotifications[iIndex].m_iGameDataIndex;

$LN374@IsNotifica@2:
	mov	ecx, DWORD PTR _iIndex$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+72]
	mov	DWORD PTR _eLeague$221358[ebp], ecx

; 1801 : 		CvLeague* pLeague = GC.getGame().GetGameLeagues()->GetLeague(eLeague);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225670[ebp], edx
	mov	eax, DWORD PTR _eLeague$221358[ebp]
	push	eax
	mov	ecx, DWORD PTR $T225670[ebp]
	call	?GetGameLeagues@CvGame@@QAEPAVCvGameLeagues@@XZ ; CvGame::GetGameLeagues
	mov	ecx, eax
	call	?GetLeague@CvGameLeagues@@QAEPAVCvLeague@@W4LeagueTypes@@@Z ; CvGameLeagues::GetLeague
	mov	DWORD PTR _pLeague$221360[ebp], eax

; 1802 : 		if (!pLeague->CanVote(m_ePlayer))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _pLeague$221360[ebp]
	call	?CanVote@CvLeague@@QAE_NW4PlayerTypes@@@Z ; CvLeague::CanVote
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@IsNotifica@2

; 1803 : #endif
; 1804 : 		{
; 1805 : 			return true;

	mov	al, 1
	jmp	SHORT $LN76@IsNotifica@2

; 1806 : 		}
; 1807 : 		else

	jmp	SHORT $LN4@IsNotifica@2
$LN5@IsNotifica@2:

; 1808 : 		{
; 1809 : 			return false;

	xor	al, al
	jmp	SHORT $LN76@IsNotifica@2
$LN4@IsNotifica@2:

; 1810 : 		}
; 1811 : 	}
; 1812 : 	break;

	jmp	SHORT $LN74@IsNotifica@2
$LN3@IsNotifica@2:

; 1813 : 
; 1814 : 	case NOTIFICATION_PLAYER_CONNECTING:
; 1815 : 	{
; 1816 : 		if(!gDLL->IsPlayerHotJoining(m_aNotifications[iIndex].m_iGameDataIndex)){

	mov	ecx, DWORD PTR $T225674[ebp]
	mov	DWORD PTR tv681[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv681[ebp], edx
	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T225678[ebp], eax
	mov	edx, DWORD PTR $T225678[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR tv681[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv681[ebp]
	mov	eax, DWORD PTR [edx+1008]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@IsNotifica@2

; 1817 : 			//Player has finished hot joining.  Remove this notification, we'll add a NOTIFICATION_PLAYER_RECONNECTED in NetProxy::OnHotJoinComplete().
; 1818 : 			return true;

	mov	al, 1
	jmp	SHORT $LN76@IsNotifica@2
$LN2@IsNotifica@2:

; 1819 : 		}
; 1820 : 	}
; 1821 : 	break;

	jmp	SHORT $LN74@IsNotifica@2
$LN1@IsNotifica@2:

; 1822 : 
; 1823 : 	default:	// don't expire
; 1824 : 	{
; 1825 : 		return false;

	xor	al, al
	jmp	SHORT $LN76@IsNotifica@2
$LN74@IsNotifica@2:

; 1826 : 	}
; 1827 : 	break;
; 1828 : 	}
; 1829 : 
; 1830 : 	return false;

	xor	al, al
$LN76@IsNotifica@2:

; 1831 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$0:
	lea	ecx, DWORD PTR _pUnit$221009[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$3:
	lea	ecx, DWORD PTR $T224980[ebp]
	jmp	??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ
__unwindfunclet$?IsNotificationExpired@CvNotifications@@QAE_NH@Z$5:
	lea	ecx, DWORD PTR $T224982[ebp]
	jmp	??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ
__ehhandler$?IsNotificationExpired@CvNotifications@@QAE_NH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-604]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsNotificationExpired@CvNotifications@@QAE_NH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsNotificationExpired@CvNotifications@@QAE_NH@Z ENDP	; CvNotifications::IsNotificationExpired
; Function compile flags: /Odtp
;	COMDAT ?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z
_TEXT	SEGMENT
tv64 = -28						; size = 4
_this$ = -24						; size = 4
$T225724 = -20						; size = 4
$T225720 = -16						; size = 4
$T225713 = -12						; size = 4
$T225709 = -8						; size = 4
$T225705 = -4						; size = 4
_eNotificationType$ = 8					; size = 4
_iForSpecificEntry$ = 12				; size = 4
?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z PROC ; CvNotifications::IsNotificationTypeEndOfTurnExpired, COMDAT
; _this$ = ecx

; 1835 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1836 : 	switch(eNotificationType)

	mov	eax, DWORD PTR _eNotificationType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 507779013		; 1e4417c5H
	jg	$LN12@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 507779013		; 1e4417c5H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -344621894		; eb757cbaH
	jg	$LN13@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -344621894		; eb757cbaH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1412184134	; abd3c7baH
	jg	SHORT $LN14@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1412184134	; abd3c7baH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1746998481	; 97deeb2fH
	jg	SHORT $LN15@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1746998481	; 97deeb2fH
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -2068323322	; 84b7e406H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -2028078871	; 871df8e9H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1774532806	; 963ac73aH
	je	$LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN15@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], -1421067341	; ab4c3bb3H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1417116259	; ab88859dH
	je	$LN6@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN14@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], -958154983		; c6e3b719H
	jg	SHORT $LN16@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -958154983		; c6e3b719H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1238786763	; b6299d35H
	je	$LN6@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -1168514695	; ba59e179H
	je	$LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN16@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], -381621422		; e940eb52H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -372818113		; e9c73f3fH
	je	$LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN13@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 84632199		; 050b6287H
	jg	SHORT $LN17@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 84632199		; 050b6287H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -90445226		; fa9bea56H
	jg	SHORT $LN18@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -90445226		; fa9bea56H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -190211195		; f4a99b85H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -164725077		; f62e7eabH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -151010967		; f6ffc169H
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN18@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], -66586748		; fc07f784H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], -16309126		; ff07247aH
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN17@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 216217508		; 0ce337a4H
	jg	SHORT $LN19@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 216217508		; 0ce337a4H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 88900711		; 054c8467H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 145107262		; 08a6293eH
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN19@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 294822899		; 1192a3f3H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 356045736		; 1538d3a8H
	je	$LN6@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN12@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1482916943		; 5863844fH
	jg	$LN20@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1482916943		; 5863844fH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1218150582		; 489b80b6H
	jg	SHORT $LN21@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1218150582		; 489b80b6H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 818263651		; 30c5b663H
	jg	SHORT $LN22@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 818263651		; 30c5b663H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 623640104		; 252bfe28H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 707968744		; 2a32bee8H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 755914060		; 2d0e554cH
	je	$LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN22@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1028207137		; 3d493221H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1097980104		; 4171d8c8H
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN21@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1319111517		; 4ea00b5dH
	jg	SHORT $LN23@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1319111517		; 4ea00b5dH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1279997337		; 4c4b3599H
	je	$LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1317680804		; 4e8a36a4H
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN23@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1352206758		; 509909a6H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1376002242		; 520420c2H
	je	$LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN20@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1628482682		; 6110ac7aH
	jg	SHORT $LN24@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1628482682		; 6110ac7aH
	je	$LN6@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1591330057		; 5ed9c509H
	jg	SHORT $LN25@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1591330057		; 5ed9c509H
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1516141982		; 5a5e7d9eH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1523558135		; 5acfa6f7H
	je	SHORT $LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN25@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1594364879		; 5f0813cfH
	je	$LN4@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1614113729		; 60356bc1H
	je	$LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN24@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1989681641		; 769821e9H
	jg	SHORT $LN26@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1989681641		; 769821e9H
	je	SHORT $LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1784381333		; 6a5b7f95H
	je	SHORT $LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 1962985987		; 7500ca03H
	je	SHORT $LN4@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN26@IsNotifica@3:
	cmp	DWORD PTR tv64[ebp], 1996573794		; 77014c62H
	je	SHORT $LN7@IsNotifica@3
	cmp	DWORD PTR tv64[ebp], 2128612861		; 7ee00dfdH
	je	SHORT $LN7@IsNotifica@3
	jmp	$LN1@IsNotifica@3
$LN7@IsNotifica@3:

; 1837 : 	{
; 1838 : 	case NOTIFICATION_POLICY:
; 1839 : 	case NOTIFICATION_FREE_POLICY:
; 1840 : 	case NOTIFICATION_TECH:
; 1841 : 	case NOTIFICATION_FREE_TECH:
; 1842 : 	case NOTIFICATION_PRODUCTION:
; 1843 : 	case NOTIFICATION_DIPLO_VOTE:
; 1844 : 	case NOTIFICATION_PLAYER_DEAL:
; 1845 : 	case NOTIFICATION_PLAYER_DEAL_RECEIVED:
; 1846 : 	case NOTIFICATION_FREE_GREAT_PERSON:
; 1847 : 	case NOTIFICATION_FOUND_PANTHEON:
; 1848 : 	case NOTIFICATION_FOUND_RELIGION:
; 1849 : 	case NOTIFICATION_ENHANCE_RELIGION:
; 1850 : 	case NOTIFICATION_SPY_STOLE_TECH:
; 1851 : 	case NOTIFICATION_MAYA_LONG_COUNT:
; 1852 : 	case NOTIFICATION_FAITH_GREAT_PERSON:
; 1853 : 	case NOTIFICATION_ADD_REFORMATION_BELIEF:
; 1854 : 	case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:
; 1855 : 	case NOTIFICATION_CHOOSE_ARCHAEOLOGY:
; 1856 : 	case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:
; 1857 : 	case NOTIFICATION_CHOOSE_IDEOLOGY:
; 1858 : 		return false;

	xor	al, al
	jmp	$LN10@IsNotifica@3

; 1859 : 		break;

	jmp	$LN8@IsNotifica@3
$LN6@IsNotifica@3:

; 1860 : 
; 1861 : 	// These multiplayer notifications expire at the end of the next turn.
; 1862 : 	case NOTIFICATION_PLAYER_RECONNECTED:
; 1863 : 	case NOTIFICATION_PLAYER_DISCONNECTED:
; 1864 : 	case NOTIFICATION_HOST_MIGRATION:
; 1865 : 	case NOTIFICATION_PLAYER_CONNECTING:
; 1866 : 		if(iForSpecificEntry != -1 && m_aNotifications[iForSpecificEntry].m_iTurn == GC.getGame().getGameTurn()) //same turn as creation.

	cmp	DWORD PTR _iForSpecificEntry$[ebp], -1
	je	SHORT $LN5@IsNotifica@3
	mov	ecx, DWORD PTR _iForSpecificEntry$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T225705[ebp], ecx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225709[ebp], eax
	mov	ecx, DWORD PTR $T225709[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T225705[ebp]
	cmp	DWORD PTR [ecx+80], eax
	jne	SHORT $LN5@IsNotifica@3

; 1867 : 		{
; 1868 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@IsNotifica@3
$LN5@IsNotifica@3:

; 1869 : 		}
; 1870 : 		break;

	jmp	SHORT $LN8@IsNotifica@3
$LN4@IsNotifica@3:

; 1871 : 
; 1872 : 	// In multiplayer, these notifications expire once they've been broadcast for the player and
; 1873 : 	// it is at least the end of the next turn.
; 1874 : 	// These are notifications that can occur mid-turn and are important enough that they shouldn't
; 1875 : 	// expire until the player has seen them.
; 1876 : 	case NOTIFICATION_UNIT_PROMOTION:
; 1877 : 	case NOTIFICATION_CAPITAL_LOST_ACTIVE_PLAYER:
; 1878 : 	case NOTIFICATION_CAPITAL_LOST:
; 1879 : 	case NOTIFICATION_WAR_ACTIVE_PLAYER:
; 1880 : 	case NOTIFICATION_WAR:
; 1881 : 	case NOTIFICATION_PEACE_ACTIVE_PLAYER:
; 1882 : 	case NOTIFICATION_PEACE:
; 1883 : 	case NOTIFICATION_VICTORY:
; 1884 : 	case NOTIFICATION_UNIT_DIED:
; 1885 : 	case NOTIFICATION_CITY_LOST:
; 1886 : 	case NOTIFICATION_PLAYER_KILLED:
; 1887 : 	case NOTIFICATION_DIPLOMACY_DECLARATION:
; 1888 : 	case NOTIFICATION_OTHER_PLAYER_NEW_ERA:
; 1889 : 	case NOTIFICATION_MINOR_BUYOUT:
; 1890 : 	case NOTIFICATION_LIBERATED_MAJOR_CITY:
; 1891 : 	case NOTIFICATION_RESURRECTED_MAJOR_CIV:
; 1892 : 	case NOTIFICATION_TURN_MODE_SEQUENTIAL:
; 1893 : 	case NOTIFICATION_TURN_MODE_SIMULTANEOUS:
; 1894 : #ifndef AUI_WARNING_FIXES
; 1895 : 	case NOTIFICATION_PLAYER_KICKED:
; 1896 : #endif
; 1897 : 
; 1898 : 	//XP1
; 1899 : 	case NOTIFICATION_RELIGION_FOUNDED_ACTIVE_PLAYER:
; 1900 : 	case NOTIFICATION_RELIGION_FOUNDED:
; 1901 : 	case NOTIFICATION_PANTHEON_FOUNDED_ACTIVE_PLAYER:
; 1902 : 	case NOTIFICATION_PANTHEON_FOUNDED:
; 1903 : 
; 1904 : 	//XP2
; 1905 : 	case NOTIFICATION_TRADE_ROUTE_BROKEN:
; 1906 : 	case NOTIFICATION_REFORMATION_BELIEF_ADDED_ACTIVE_PLAYER:
; 1907 : 	case NOTIFICATION_REFORMATION_BELIEF_ADDED:
; 1908 : 		if(iForSpecificEntry != -1 && GC.getGame().isGameMultiPlayer() 
; 1909 : 			&& (m_aNotifications[iForSpecificEntry].m_bNeedsBroadcast //not broadcast yet.
; 1910 : 				|| m_aNotifications[iForSpecificEntry].m_iTurn == GC.getGame().getGameTurn())) //same turn as creation.

	cmp	DWORD PTR _iForSpecificEntry$[ebp], -1
	je	SHORT $LN3@IsNotifica@3
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225713[ebp], edx
	mov	ecx, DWORD PTR $T225713[ebp]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsNotifica@3
	mov	ecx, DWORD PTR _iForSpecificEntry$[ebp]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+88]
	test	ecx, ecx
	jne	SHORT $LN2@IsNotifica@3
	mov	edx, DWORD PTR _iForSpecificEntry$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T225720[ebp], edx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T225724[ebp], ecx
	mov	ecx, DWORD PTR $T225724[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	edx, DWORD PTR $T225720[ebp]
	cmp	DWORD PTR [edx+80], eax
	jne	SHORT $LN3@IsNotifica@3
$LN2@IsNotifica@3:

; 1911 : 		{
; 1912 : 			return false;

	xor	al, al
	jmp	SHORT $LN10@IsNotifica@3
$LN3@IsNotifica@3:

; 1913 : 		}
; 1914 : 		break;

	jmp	SHORT $LN8@IsNotifica@3
$LN1@IsNotifica@3:

; 1915 : 
; 1916 : 	default:
; 1917 : 		return true;

	mov	al, 1
	jmp	SHORT $LN10@IsNotifica@3
$LN8@IsNotifica@3:

; 1918 : 		break;
; 1919 : 	}
; 1920 : 
; 1921 : 	return true;

	mov	al, 1
$LN10@IsNotifica@3:

; 1922 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z ENDP ; CvNotifications::IsNotificationTypeEndOfTurnExpired
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsNotificationEndOfTurnExpired@CvNotifications@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T225730 = -4						; size = 4
_iIndex$ = 8						; size = 4
?IsNotificationEndOfTurnExpired@CvNotifications@@QAE_NH@Z PROC ; CvNotifications::IsNotificationEndOfTurnExpired, COMDAT
; _this$ = ecx

; 1926 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 	return IsNotificationTypeEndOfTurnExpired( m_aNotifications[iIndex].m_eNotificationType, iIndex );

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T225730[ebp], eax
	mov	edx, DWORD PTR _iIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR $T225730[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsNotificationTypeEndOfTurnExpired@CvNotifications@@QAE_NW4NotificationTypes@@H@Z ; CvNotifications::IsNotificationTypeEndOfTurnExpired

; 1928 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsNotificationEndOfTurnExpired@CvNotifications@@QAE_NH@Z ENDP ; CvNotifications::IsNotificationEndOfTurnExpired
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IsArrayFull@CvNotifications@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T225736 = -8						; size = 4
_iAdjustedEndIndex$ = -4				; size = 4
?IsArrayFull@CvNotifications@@IAE_NXZ PROC		; CvNotifications::IsArrayFull, COMDAT
; _this$ = ecx

; 1932 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1933 : 	int iAdjustedEndIndex = m_iNotificationsEndIndex + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	DWORD PTR _iAdjustedEndIndex$[ebp], ecx

; 1934 : 	if(iAdjustedEndIndex >= (int)m_aNotifications.size())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T225736[ebp], edx
	mov	eax, DWORD PTR $T225736[ebp]
	mov	ecx, DWORD PTR $T225736[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR _iAdjustedEndIndex$[ebp], eax
	jl	SHORT $LN3@IsArrayFul

; 1935 : 	{
; 1936 : 		iAdjustedEndIndex = 0;

	mov	DWORD PTR _iAdjustedEndIndex$[ebp], 0
$LN3@IsArrayFul:

; 1937 : 	}
; 1938 : 
; 1939 : 	if(iAdjustedEndIndex == m_iNotificationsBeginIndex)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iAdjustedEndIndex$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jne	SHORT $LN2@IsArrayFul

; 1940 : 	{
; 1941 : 		return true;

	mov	al, 1
	jmp	SHORT $LN4@IsArrayFul

; 1942 : 	}
; 1943 : 	else

	jmp	SHORT $LN4@IsArrayFul
$LN2@IsArrayFul:

; 1944 : 	{
; 1945 : 		return false;

	xor	al, al
$LN4@IsArrayFul:

; 1946 : 	}
; 1947 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsArrayFull@CvNotifications@@IAE_NXZ ENDP		; CvNotifications::IsArrayFull
_TEXT	ENDS
PUBLIC	?IncrementBeginIndex@CvNotifications@@IAEXXZ	; CvNotifications::IncrementBeginIndex
; Function compile flags: /Odtp
;	COMDAT ?RemoveOldestNotification@CvNotifications@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemoveOldestNotification@CvNotifications@@IAEXXZ PROC	; CvNotifications::RemoveOldestNotification, COMDAT
; _this$ = ecx

; 1951 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1952 : 	// if the notification is somehow active, dismiss it
; 1953 : 	if(!m_aNotifications[m_iNotificationsBeginIndex].m_bDismissed)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+ecx+89]
	test	ecx, ecx
	jne	SHORT $LN8@RemoveOlde

; 1954 : 	{
; 1955 : 		Dismiss(m_aNotifications[m_iNotificationsBeginIndex].m_iLookupIndex, /*bUserInvoked*/ false);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Dismiss@CvNotifications@@QAEXH_N@Z	; CvNotifications::Dismiss

; 1956 : 	}
; 1957 : 	m_aNotifications[m_iNotificationsBeginIndex].Clear();

$LN8@RemoveOlde:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	call	?Clear@Notification@CvNotifications@@QAEXXZ ; CvNotifications::Notification::Clear

; 1958 : 	IncrementBeginIndex();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementBeginIndex@CvNotifications@@IAEXXZ ; CvNotifications::IncrementBeginIndex

; 1959 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveOldestNotification@CvNotifications@@IAEXXZ ENDP	; CvNotifications::RemoveOldestNotification
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementBeginIndex@CvNotifications@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T225753 = -4						; size = 4
?IncrementBeginIndex@CvNotifications@@IAEXXZ PROC	; CvNotifications::IncrementBeginIndex, COMDAT
; _this$ = ecx

; 1962 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1963 : 	m_iNotificationsBeginIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 1964 : 	if(m_iNotificationsBeginIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T225753[ebp], eax
	mov	ecx, DWORD PTR $T225753[ebp]
	mov	edx, DWORD PTR $T225753[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+20], eax
	jl	SHORT $LN2@IncrementB

; 1965 : 	{
; 1966 : 		m_iNotificationsBeginIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN2@IncrementB:

; 1967 : 	}
; 1968 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementBeginIndex@CvNotifications@@IAEXXZ ENDP	; CvNotifications::IncrementBeginIndex
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementEndIndex@CvNotifications@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T225759 = -4						; size = 4
?IncrementEndIndex@CvNotifications@@IAEXXZ PROC		; CvNotifications::IncrementEndIndex, COMDAT
; _this$ = ecx

; 1971 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1972 : 	m_iNotificationsEndIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 1973 : 	if(m_iNotificationsEndIndex >= (int)m_aNotifications.size())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T225759[ebp], eax
	mov	ecx, DWORD PTR $T225759[ebp]
	mov	edx, DWORD PTR $T225759[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	jl	SHORT $LN2@IncrementE

; 1974 : 	{
; 1975 : 		m_iNotificationsEndIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN2@IncrementE:

; 1976 : 	}
; 1977 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementEndIndex@CvNotifications@@IAEXXZ ENDP		; CvNotifications::IncrementEndIndex
_TEXT	ENDS
PUBLIC	?AddToPlayer@CvNotifications@@SAXW4PlayerTypes@@W4NotificationTypes@@PBD2HHHH@Z ; CvNotifications::AddToPlayer
EXTRN	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ:PROC ; CvPlayer::GetNotifications
EXTRN	?isLocalPlayer@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isLocalPlayer
; Function compile flags: /Odtp
;	COMDAT ?AddToPlayer@CvNotifications@@SAXW4PlayerTypes@@W4NotificationTypes@@PBD2HHHH@Z
_TEXT	SEGMENT
_pNotifications$221422 = -8				; size = 4
_kPlayer$221420 = -4					; size = 4
_ePlayer$ = 8						; size = 4
_eNotificationType$ = 12				; size = 4
_strMessage$ = 16					; size = 4
_strSummary$ = 20					; size = 4
_iX$ = 24						; size = 4
_iY$ = 28						; size = 4
_iGameDataIndex$ = 32					; size = 4
_iExtraGameData$ = 36					; size = 4
?AddToPlayer@CvNotifications@@SAXW4PlayerTypes@@W4NotificationTypes@@PBD2HHHH@Z PROC ; CvNotifications::AddToPlayer, COMDAT

; 1982 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1983 : 	if(ePlayer != NO_PLAYER)

	cmp	DWORD PTR _ePlayer$[ebp], -1
	je	SHORT $LN4@AddToPlaye

; 1984 : 	{
; 1985 : 		CvPlayer& kPlayer = GET_PLAYER(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$221420[ebp], eax

; 1986 : 
; 1987 : 		if(kPlayer.isLocalPlayer())

	mov	ecx, DWORD PTR _kPlayer$221420[ebp]
	call	?isLocalPlayer@CvPlayer@@QBE_NXZ	; CvPlayer::isLocalPlayer
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@AddToPlaye

; 1988 : 		{
; 1989 : 			CvNotifications* pNotifications = kPlayer.GetNotifications();

	mov	ecx, DWORD PTR _kPlayer$221420[ebp]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$221422[ebp], eax

; 1990 : 			if(pNotifications)

	cmp	DWORD PTR _pNotifications$221422[ebp], 0
	je	SHORT $LN4@AddToPlaye

; 1991 : 			{
; 1992 : 				pNotifications->Add(eNotificationType, strMessage, strSummary, iX, iY, iGameDataIndex, iExtraGameData);

	mov	edx, DWORD PTR _iExtraGameData$[ebp]
	push	edx
	mov	eax, DWORD PTR _iGameDataIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSummary$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMessage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eNotificationType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pNotifications$221422[ebp]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add
$LN4@AddToPlaye:

; 1993 : 			}
; 1994 : 		}
; 1995 : 	}
; 1996 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddToPlayer@CvNotifications@@SAXW4PlayerTypes@@W4NotificationTypes@@PBD2HHHH@Z ENDP ; CvNotifications::AddToPlayer
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
_TEXT	ENDS
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if(m_target) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN2@FObjectHan:

; 150  : 		}
; 151  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
PUBLIC	?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z$1
__ehfuncinfo$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv80 = -172						; size = 4
_this$ = -168						; size = 4
$T225899 = -28						; size = 4
$T225892 = -24						; size = 4
$T225887 = -20						; size = 4
$T225878 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize, COMDAT
; _this$ = ecx

; 712  : 		{	// determine new length, padding with _Ty() elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 		resize(_Newsize, _Ty());

	sub	esp, 92					; 0000005cH
	mov	eax, esp
	mov	DWORD PTR $T225878[ebp], esp
	mov	DWORD PTR $T225899[ebp], eax
	mov	ecx, DWORD PTR $T225899[ebp]
	add	ecx, 8
	mov	DWORD PTR $T225887[ebp], ecx
	mov	ecx, DWORD PTR $T225887[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T225899[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T225892[ebp], edx
	mov	ecx, DWORD PTR $T225892[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T225899[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize

; 714  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z$1:
	mov	ecx, DWORD PTR $T225899[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$226176 = -8					; size = 4
$T226172 = -4						; size = 4
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226172[ebp], ecx
	cmp	DWORD PTR $T226172[ebp], 0
	je	SHORT $LN1@auto_ptr
	mov	edx, DWORD PTR $T226172[ebp]
	mov	DWORD PTR _inst$226176[ebp], edx
	mov	eax, DWORD PTR _inst$226176[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$226176[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$226184 = -8					; size = 4
$T226180 = -4						; size = 4
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226180[ebp], ecx
	cmp	DWORD PTR $T226180[ebp], 0
	je	SHORT $LN1@auto_ptr@2
	mov	edx, DWORD PTR $T226180[ebp]
	mov	DWORD PTR _inst$226184[ebp], edx
	mov	eax, DWORD PTR _inst$226184[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$226184[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::~_Vector_val<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >::~_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >::~_Vector_val<enum BeliefTypes,std::allocator<enum BeliefTypes> >
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Insert_n
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z$5
__ehfuncinfo$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z
_TEXT	SEGMENT
_this$ = -152						; size = 4
$T226456 = -148						; size = 4
$T226451 = -144						; size = 4
__Tmp$226277 = -64					; size = 4
$T226260 = -60						; size = 4
$T226244 = -56						; size = 4
$T226222 = -52						; size = 4
$T226208 = -48						; size = 4
$T226207 = -44						; size = 4
$T226206 = -40						; size = 4
$T226205 = -36						; size = 4
$T226204 = -32						; size = 4
$T226203 = -28						; size = 4
$T226202 = -24						; size = 4
$T226201 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 92
?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 718  : 		if (size() < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN17@resize

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T226222[ebp], eax
	mov	ecx, DWORD PTR $T226222[ebp]
	mov	DWORD PTR $T226202[ebp], ecx
	mov	edx, DWORD PTR $T226202[ebp]
	mov	DWORD PTR $T226201[ebp], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR $T226201[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Insert_n
	jmp	SHORT $LN2@resize

; 720  : 		else if (_Newsize < size())

$LN17@resize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN2@resize

; 721  : 			erase(begin() + _Newsize, end());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T226244[ebp], eax
	mov	ecx, DWORD PTR $T226244[ebp]
	mov	DWORD PTR $T226204[ebp], ecx
	mov	edx, DWORD PTR $T226204[ebp]
	mov	DWORD PTR $T226203[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226260[ebp], ecx
	mov	edx, DWORD PTR $T226260[ebp]
	mov	DWORD PTR $T226206[ebp], edx
	mov	eax, DWORD PTR $T226206[ebp]
	mov	DWORD PTR __Tmp$226277[ebp], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	imul	ecx, 92					; 0000005cH
	add	ecx, DWORD PTR __Tmp$226277[ebp]
	mov	DWORD PTR __Tmp$226277[ebp], ecx
	mov	edx, DWORD PTR __Tmp$226277[ebp]
	mov	DWORD PTR $T226207[ebp], edx
	mov	eax, DWORD PTR $T226207[ebp]
	mov	DWORD PTR $T226205[ebp], eax
	mov	ecx, DWORD PTR $T226203[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226205[ebp]
	push	edx
	lea	eax, DWORD PTR $T226208[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::erase
$LN2@resize:

; 722  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __Val$[ebp+36]
	mov	DWORD PTR $T226451[ebp], ecx
	mov	ecx, DWORD PTR $T226451[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	edx, DWORD PTR __Val$[ebp+8]
	mov	DWORD PTR $T226456[ebp], edx
	mov	ecx, DWORD PTR $T226456[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	96					; 00000060H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z$0:
	lea	ecx, DWORD PTR __Val$[ebp]
	jmp	??1Notification@CvNotifications@@QAE@XZ
__unwindfunclet$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z$5:
	lea	ecx, DWORD PTR __Val$[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAEXIUNotification@CvNotifications@@@Z ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::resize
PUBLIC	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T226639 = -84						; size = 4
$T226623 = -80						; size = 4
$T226622 = -76						; size = 4
$T226608 = -72						; size = 4
$T226607 = -68						; size = 4
__Cat$226629 = -54					; size = 1
$T226626 = -53						; size = 1
$T226558 = -52						; size = 4
$T226557 = -48						; size = 4
$T226556 = -44						; size = 4
$T226539 = -38						; size = 1
$T226538 = -37						; size = 1
$T226537 = -36						; size = 4
$T226536 = -32						; size = 4
__Cat$226546 = -16					; size = 1
$T226543 = -15						; size = 1
$T226542 = -14						; size = 1
$T226541 = -13						; size = 1
__Ptr$221675 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T226558[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T226557[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T226556[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T226541[ebp], cl
	mov	dl, BYTE PTR __Cat$226546[ebp]
	mov	BYTE PTR $T226542[ebp], dl
	mov	al, BYTE PTR $T226541[ebp]
	mov	BYTE PTR $T226539[ebp], al
	mov	cl, BYTE PTR $T226543[ebp]
	mov	BYTE PTR $T226538[ebp], cl
	mov	edx, DWORD PTR $T226558[ebp]
	mov	DWORD PTR $T226537[ebp], edx
	mov	eax, DWORD PTR $T226556[ebp]
	mov	DWORD PTR $T226536[ebp], eax
	jmp	SHORT $LN28@erase
$LN27@erase:
	mov	ecx, DWORD PTR $T226537[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T226537[ebp], ecx
	mov	edx, DWORD PTR $T226536[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T226536[ebp], edx
$LN28@erase:
	mov	eax, DWORD PTR $T226536[ebp]
	cmp	eax, DWORD PTR $T226557[ebp]
	je	SHORT $LN20@erase
	mov	ecx, DWORD PTR $T226536[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T226537[ebp]
	call	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z
	jmp	SHORT $LN27@erase
$LN20@erase:
	mov	edx, DWORD PTR $T226537[ebp]
	mov	DWORD PTR __Ptr$221675[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T226639[ebp], ecx
	mov	edx, DWORD PTR $T226639[ebp]
	mov	DWORD PTR $T226623[ebp], edx
	mov	eax, DWORD PTR __Ptr$221675[ebp]
	mov	DWORD PTR $T226622[ebp], eax
	mov	cl, BYTE PTR __Cat$226629[ebp]
	mov	BYTE PTR $T226626[ebp], cl
	mov	edx, DWORD PTR $T226623[ebp]
	mov	DWORD PTR $T226608[ebp], edx
	mov	eax, DWORD PTR $T226622[ebp]
	mov	DWORD PTR $T226607[ebp], eax
	jmp	SHORT $LN45@erase
$LN44@erase:
	mov	ecx, DWORD PTR $T226607[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T226607[ebp], ecx
$LN45@erase:
	mov	edx, DWORD PTR $T226607[ebp]
	cmp	edx, DWORD PTR $T226608[ebp]
	je	SHORT $LN37@erase
	mov	eax, DWORD PTR $T226607[ebp]
	push	eax
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN44@erase
$LN37@erase:

; 1049 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$221675[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@QAE?AV?$_Vector_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@V?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@0@Z ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z ; std::_Allocate<CvNotifications::Notification>
PUBLIC	?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$226656 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$226656[ebp], 46684427	; 02c8590bH
	cmp	DWORD PTR __Count$226656[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$226656[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z ; std::_Allocate<CvNotifications::Notification>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Buy
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T226770 = -44						; size = 4
$T226769 = -40						; size = 4
$T226765 = -36						; size = 4
$T226764 = -32						; size = 4
$T226748 = -28						; size = 4
$T226747 = -24						; size = 4
$T226733 = -20						; size = 4
$T226732 = -16						; size = 4
__Cat$226754 = -2					; size = 1
$T226751 = -1						; size = 1
?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T226765[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226764[ebp], ecx
	mov	edx, DWORD PTR $T226765[ebp]
	mov	DWORD PTR $T226748[ebp], edx
	mov	eax, DWORD PTR $T226764[ebp]
	mov	DWORD PTR $T226747[ebp], eax
	mov	cl, BYTE PTR __Cat$226754[ebp]
	mov	BYTE PTR $T226751[ebp], cl
	mov	edx, DWORD PTR $T226748[ebp]
	mov	DWORD PTR $T226733[ebp], edx
	mov	eax, DWORD PTR $T226747[ebp]
	mov	DWORD PTR $T226732[ebp], eax
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	ecx, DWORD PTR $T226732[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T226732[ebp], ecx
$LN12@Tidy:
	mov	edx, DWORD PTR $T226732[ebp]
	cmp	edx, DWORD PTR $T226733[ebp]
	je	SHORT $LN4@Tidy
	mov	eax, DWORD PTR $T226732[ebp]
	push	eax
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	DWORD PTR $T226770[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T226769[ebp], eax
	mov	ecx, DWORD PTR $T226769[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Tidy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T226839 = -32						; size = 4
$T226838 = -28						; size = 4
$T226834 = -24						; size = 4
$T226833 = -20						; size = 4
$T226815 = -16						; size = 4
$T226814 = -12						; size = 4
$T226798 = -8						; size = 4
__Cat$226820 = -2					; size = 1
$T226818 = -1						; size = 1
?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ PROC ; std::vector<enum BeliefTypes,std::allocator<enum BeliefTypes> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T226834[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226833[ebp], ecx
	mov	edx, DWORD PTR $T226834[ebp]
	mov	DWORD PTR $T226815[ebp], edx
	mov	eax, DWORD PTR $T226833[ebp]
	mov	DWORD PTR $T226814[ebp], eax
	mov	cl, BYTE PTR __Cat$226820[ebp]
	mov	BYTE PTR $T226818[ebp], cl
	mov	edx, DWORD PTR $T226814[ebp]
	mov	DWORD PTR $T226798[ebp], edx
	jmp	SHORT $LN12@Tidy@2
$LN11@Tidy@2:
	mov	eax, DWORD PTR $T226798[ebp]
	add	eax, 4
	mov	DWORD PTR $T226798[ebp], eax
$LN12@Tidy@2:
	mov	ecx, DWORD PTR $T226798[ebp]
	cmp	ecx, DWORD PTR $T226815[ebp]
	je	SHORT $LN4@Tidy@2
	jmp	SHORT $LN11@Tidy@2
$LN4@Tidy@2:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T226839[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T226838[ebp], eax
	mov	ecx, DWORD PTR $T226838[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@W4BeliefTypes@@V?$allocator@W4BeliefTypes@@@std@@@std@@IAEXXZ ENDP ; std::vector<enum BeliefTypes,std::allocator<enum BeliefTypes> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUNotification@CvNotifications@@PAU12@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CvNotifications::Notification *,CvNotifications::Notification *>
PUBLIC	??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
PUBLIC	??0Notification@CvNotifications@@QAE@ABU01@@Z	; CvNotifications::Notification::Notification
PUBLIC	??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
PUBLIC	??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvNotifications::Notification *,unsigned int,CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$39 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$2
__catchsym$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$38 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$38
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$39
__unwindtable$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$34
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z
_TEXT	SEGMENT
tv84 = -668						; size = 4
tv312 = -664						; size = 4
tv298 = -660						; size = 4
tv290 = -656						; size = 4
_this$ = -652						; size = 4
$T227608 = -648						; size = 4
$T227603 = -644						; size = 4
$T227588 = -640						; size = 4
$T227532 = -596						; size = 4
$T227513 = -592						; size = 4
$T227496 = -585						; size = 1
$T227495 = -584						; size = 4
$T227485 = -580						; size = 4
$T227484 = -576						; size = 4
__Cat$227529 = -570					; size = 1
$T227526 = -569						; size = 1
$T227525 = -568						; size = 1
__Cat$227520 = -567					; size = 1
$T227517 = -566						; size = 1
$T227516 = -565						; size = 1
$T227441 = -556						; size = 4
$T227436 = -552						; size = 4
$T227428 = -548						; size = 4
$T227420 = -544						; size = 4
$T227412 = -540						; size = 4
$T227396 = -536						; size = 4
$T227395 = -532						; size = 4
$T227381 = -528						; size = 4
$T227380 = -524						; size = 4
__Cat$227402 = -510					; size = 1
$T227399 = -509						; size = 1
$T227331 = -508						; size = 4
$T227330 = -504						; size = 4
$T227320 = -500						; size = 4
__Cat$227328 = -495					; size = 1
$T227326 = -494						; size = 1
$T227325 = -493						; size = 1
$T227304 = -492						; size = 4
$T227292 = -488						; size = 4
$T227282 = -481						; size = 1
$T227281 = -480						; size = 4
__Cat$227300 = -475					; size = 1
$T227297 = -474						; size = 1
$T227296 = -473						; size = 1
$T227261 = -468						; size = 4
$T227260 = -464						; size = 4
$T227256 = -460						; size = 4
$T227255 = -456						; size = 4
$T227239 = -452						; size = 4
$T227238 = -448						; size = 4
$T227224 = -444						; size = 4
$T227223 = -440						; size = 4
__Cat$227247 = -426					; size = 1
$T227244 = -425						; size = 1
$T227153 = -424						; size = 4
$T227152 = -420						; size = 4
$T227138 = -416						; size = 4
$T227137 = -412						; size = 4
__Cat$227161 = -398					; size = 1
$T227158 = -397						; size = 1
$T227073 = -396						; size = 4
$T227072 = -392						; size = 4
$T227058 = -388						; size = 4
$T227057 = -384						; size = 4
__Cat$227080 = -370					; size = 1
$T227077 = -369						; size = 1
$T227008 = -368						; size = 4
$T226996 = -364						; size = 4
$T226986 = -357						; size = 1
$T226985 = -356						; size = 4
__Cat$227003 = -351					; size = 1
$T227000 = -350						; size = 1
$T226999 = -349						; size = 1
$T226973 = -348						; size = 4
$T226961 = -344						; size = 4
$T226951 = -337						; size = 1
$T226950 = -336						; size = 4
__Cat$226968 = -331					; size = 1
$T226965 = -330						; size = 1
$T226964 = -329						; size = 1
$T226938 = -328						; size = 4
$T226928 = -324						; size = 4
__Cat$226936 = -319					; size = 1
$T226932 = -318						; size = 1
$T226931 = -317						; size = 1
__Count$226903 = -316					; size = 4
__Count$226877 = -244					; size = 4
__Tmp$221753 = -240					; size = 92
__Oldend$221754 = -140					; size = 4
__Tmp$221743 = -136					; size = 92
__$ArrayPad$ = -36					; size = 4
__Ncopied$221730 = -32					; size = 4
__Newvec$221728 = -28					; size = 4
__Whereoff$221729 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN31@Insert_n
	mov	DWORD PTR tv290[ebp], 0
	jmp	SHORT $LN29@Insert_n
$LN31@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	DWORD PTR tv290[ebp], eax
$LN29@Insert_n:
	mov	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$226877[ebp], 46684427	; 02c8590bH
	cmp	DWORD PTR __Count$226877[ebp], 0
	jbe	SHORT $LN37@Insert_n
	mov	eax, DWORD PTR __Count$226877[ebp]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN39@Insert_n
$LN37@Insert_n:
	mov	DWORD PTR tv298[ebp], 1
$LN39@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR tv298[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN44@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN44@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$226903[ebp], 46684427	; 02c8590bH
	cmp	DWORD PTR __Count$226903[ebp], 0
	jbe	SHORT $LN50@Insert_n
	mov	edx, DWORD PTR __Count$226903[ebp]
	mov	DWORD PTR tv312[ebp], edx
	jmp	SHORT $LN46@Insert_n
$LN50@Insert_n:
	mov	DWORD PTR tv312[ebp], 1
$LN46@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv312[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN56@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN56@Insert_n:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z ; std::_Allocate<CvNotifications::Notification>
	add	esp, 8
	mov	DWORD PTR __Newvec$221728[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$221729[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$221730[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$221729[ebp]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T226938[ebp], edx
	mov	eax, DWORD PTR $T226938[ebp]
	mov	DWORD PTR $T226928[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T226931[ebp], cl
	mov	dl, BYTE PTR __Cat$226936[ebp]
	mov	BYTE PTR $T226932[ebp], dl
	movzx	eax, BYTE PTR $T226931[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T226932[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226928[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvNotifications::Notification *,unsigned int,CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$221730[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$221730[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T226973[ebp], edx
	mov	eax, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T226961[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T226964[ebp], cl
	mov	dl, BYTE PTR __Cat$226968[ebp]
	mov	BYTE PTR $T226965[ebp], dl
	mov	al, BYTE PTR $T226964[ebp]
	mov	BYTE PTR $T226951[ebp], al
	mov	ecx, DWORD PTR $T226961[ebp]
	mov	DWORD PTR $T226950[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T226950[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T226973[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$221730[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$221730[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T227008[ebp], edx
	mov	eax, DWORD PTR __Whereoff$221729[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 92					; 0000005cH
	add	eax, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T226996[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T226999[ebp], cl
	mov	dl, BYTE PTR __Cat$227003[ebp]
	mov	BYTE PTR $T227000[ebp], dl
	mov	al, BYTE PTR $T226999[ebp]
	mov	BYTE PTR $T226986[ebp], al
	mov	ecx, DWORD PTR $T226996[ebp]
	mov	DWORD PTR $T226985[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T226985[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227008[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$221730[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$221729[ebp]
	imul	eax, 92					; 0000005cH
	add	eax, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T227073[ebp], eax
	mov	ecx, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T227072[ebp], ecx
	mov	dl, BYTE PTR __Cat$227080[ebp]
	mov	BYTE PTR $T227077[ebp], dl
	mov	eax, DWORD PTR $T227073[ebp]
	mov	DWORD PTR $T227058[ebp], eax
	mov	ecx, DWORD PTR $T227072[ebp]
	mov	DWORD PTR $T227057[ebp], ecx
	jmp	SHORT $LN88@Insert_n
$LN87@Insert_n:
	mov	edx, DWORD PTR $T227057[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T227057[ebp], edx
$LN88@Insert_n:
	mov	eax, DWORD PTR $T227057[ebp]
	cmp	eax, DWORD PTR $T227058[ebp]
	je	SHORT $LN7@Insert_n
	mov	ecx, DWORD PTR $T227057[ebp]
	push	ecx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN87@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$221730[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR __Whereoff$221729[ebp]
	imul	eax, 92					; 0000005cH
	add	eax, DWORD PTR __Newvec$221728[ebp]
	add	eax, edx
	mov	DWORD PTR $T227153[ebp], eax
	mov	ecx, DWORD PTR __Whereoff$221729[ebp]
	imul	ecx, 92					; 0000005cH
	add	ecx, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR $T227152[ebp], ecx
	mov	dl, BYTE PTR __Cat$227161[ebp]
	mov	BYTE PTR $T227158[ebp], dl
	mov	eax, DWORD PTR $T227153[ebp]
	mov	DWORD PTR $T227138[ebp], eax
	mov	ecx, DWORD PTR $T227152[ebp]
	mov	DWORD PTR $T227137[ebp], ecx
	jmp	SHORT $LN116@Insert_n
$LN115@Insert_n:
	mov	edx, DWORD PTR $T227137[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T227137[ebp], edx
$LN116@Insert_n:
	mov	eax, DWORD PTR $T227137[ebp]
	cmp	eax, DWORD PTR $T227138[ebp]
	je	SHORT $LN6@Insert_n
	mov	ecx, DWORD PTR $T227137[ebp]
	push	ecx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN115@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$221728[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN138@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN138@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227256[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T227255[ebp], eax
	mov	ecx, DWORD PTR $T227256[ebp]
	mov	DWORD PTR $T227239[ebp], ecx
	mov	edx, DWORD PTR $T227255[ebp]
	mov	DWORD PTR $T227238[ebp], edx
	mov	al, BYTE PTR __Cat$227247[ebp]
	mov	BYTE PTR $T227244[ebp], al
	mov	ecx, DWORD PTR $T227239[ebp]
	mov	DWORD PTR $T227224[ebp], ecx
	mov	edx, DWORD PTR $T227238[ebp]
	mov	DWORD PTR $T227223[ebp], edx
	jmp	SHORT $LN148@Insert_n
$LN147@Insert_n:
	mov	eax, DWORD PTR $T227223[ebp]
	add	eax, 92					; 0000005cH
	mov	DWORD PTR $T227223[ebp], eax
$LN148@Insert_n:
	mov	ecx, DWORD PTR $T227223[ebp]
	cmp	ecx, DWORD PTR $T227224[ebp]
	je	SHORT $LN140@Insert_n
	mov	edx, DWORD PTR $T227223[ebp]
	push	edx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN147@Insert_n
$LN140@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	DWORD PTR $T227261[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T227260[ebp], eax
	mov	ecx, DWORD PTR $T227260[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR __Newvec$221728[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 92					; 0000005cH
	add	ecx, DWORD PTR __Newvec$221728[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$221728[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$221743[ebp]
	call	??0Notification@CvNotifications@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227304[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T227292[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T227296[ebp], al
	mov	cl, BYTE PTR __Cat$227300[ebp]
	mov	BYTE PTR $T227297[ebp], cl
	mov	dl, BYTE PTR $T227296[ebp]
	mov	BYTE PTR $T227282[ebp], dl
	mov	eax, DWORD PTR $T227292[ebp]
	mov	DWORD PTR $T227281[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T227281[ebp]
	push	edx
	mov	eax, DWORD PTR $T227304[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
	add	esp, 16					; 00000010H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 92					; 0000005cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T227331[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227330[ebp], ecx
	mov	edx, DWORD PTR $T227330[ebp]
	mov	DWORD PTR $T227320[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T227325[ebp], al
	mov	cl, BYTE PTR __Cat$227328[ebp]
	mov	BYTE PTR $T227326[ebp], cl
	movzx	edx, BYTE PTR $T227325[ebp]
	push	edx
	movzx	eax, BYTE PTR $T227326[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$221743[ebp]
	push	edx
	mov	eax, DWORD PTR $T227331[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227320[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvNotifications::Notification *,unsigned int,CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
	add	esp, 24					; 00000018H
	jmp	$LN21@Insert_n
__catch$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227412[ebp], edx
	mov	ecx, DWORD PTR $T227412[ebp]
	mov	DWORD PTR $T227396[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T227395[ebp], edx
	mov	al, BYTE PTR __Cat$227402[ebp]
	mov	BYTE PTR $T227399[ebp], al
	mov	ecx, DWORD PTR $T227396[ebp]
	mov	DWORD PTR $T227381[ebp], ecx
	mov	edx, DWORD PTR $T227395[ebp]
	mov	DWORD PTR $T227380[ebp], edx
	jmp	SHORT $LN199@Insert_n
$LN198@Insert_n:
	mov	eax, DWORD PTR $T227380[ebp]
	add	eax, 92					; 0000005cH
	mov	DWORD PTR $T227380[ebp], eax
$LN199@Insert_n:
	mov	ecx, DWORD PTR $T227380[ebp]
	cmp	ecx, DWORD PTR $T227381[ebp]
	je	SHORT $LN191@Insert_n
	mov	edx, DWORD PTR $T227380[ebp]
	push	edx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN198@Insert_n
$LN191@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	mov	eax, __tryend$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 2
__tryend$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T227428[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T227420[ebp], eax
	jmp	SHORT $LN223@Insert_n
$LN222@Insert_n:
	mov	ecx, DWORD PTR $T227420[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T227420[ebp], ecx
$LN223@Insert_n:
	mov	edx, DWORD PTR $T227420[ebp]
	cmp	edx, DWORD PTR $T227428[ebp]
	je	SHORT $LN219@Insert_n
	lea	eax, DWORD PTR __Tmp$221743[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227420[ebp]
	call	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z
	jmp	SHORT $LN222@Insert_n
$LN219@Insert_n:

; 1232 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR __Tmp$221743[ebp+36]
	mov	DWORD PTR $T227436[ebp], ecx
	mov	ecx, DWORD PTR $T227436[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	edx, DWORD PTR __Tmp$221743[ebp+8]
	mov	DWORD PTR $T227441[ebp], edx
	mov	ecx, DWORD PTR $T227441[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$221753[ebp]
	call	??0Notification@CvNotifications@@QAE@ABU01@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 6

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$221754[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227532[ebp], ecx
	mov	edx, DWORD PTR $T227532[ebp]
	mov	DWORD PTR $T227513[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T227516[ebp], al
	mov	cl, BYTE PTR __Cat$227520[ebp]
	mov	BYTE PTR $T227517[ebp], cl
	mov	dl, BYTE PTR $T227516[ebp]
	mov	BYTE PTR $T227496[ebp], dl
	mov	eax, DWORD PTR $T227513[ebp]
	mov	DWORD PTR $T227495[ebp], eax
	mov	ecx, DWORD PTR $T227495[ebp]
	mov	DWORD PTR $T227485[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR __Oldend$221754[ebp]
	sub	eax, edx
	mov	DWORD PTR $T227484[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T227525[ebp], cl
	mov	dl, BYTE PTR __Cat$227529[ebp]
	mov	BYTE PTR $T227526[ebp], dl
	movzx	eax, BYTE PTR $T227525[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T227526[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T227485[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$221754[ebp]
	push	ecx
	mov	edx, DWORD PTR $T227484[ebp]
	push	edx
	call	??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$221754[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR __Oldend$221754[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$_Unchecked_move_backward@PAUNotification@CvNotifications@@PAU12@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00@Z ; stdext::_Unchecked_move_backward<CvNotifications::Notification *,CvNotifications::Notification *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T227588[ebp], eax
	jmp	SHORT $LN276@Insert_n
$LN275@Insert_n:
	mov	ecx, DWORD PTR $T227588[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T227588[ebp], ecx
$LN276@Insert_n:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T227588[ebp], edx
	je	SHORT $LN272@Insert_n
	lea	eax, DWORD PTR __Tmp$221753[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227588[ebp]
	call	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z
	jmp	SHORT $LN275@Insert_n
$LN272@Insert_n:

; 1249 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR __Tmp$221753[ebp+36]
	mov	DWORD PTR $T227603[ebp], ecx
	mov	ecx, DWORD PTR $T227603[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	edx, DWORD PTR __Tmp$221753[ebp+8]
	mov	DWORD PTR $T227608[ebp], edx
	mov	ecx, DWORD PTR $T227608[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@Insert_n:

; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$221743[ebp]
	jmp	??1Notification@CvNotifications@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$26:
	lea	ecx, DWORD PTR __Tmp$221743[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$221753[ebp]
	jmp	??1Notification@CvNotifications@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z$34:
	lea	ecx, DWORD PTR __Tmp$221753[ebp+8]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-672]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@IAEXV?$_Vector_const_iterator@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@2@IABUNotification@CvNotifications@@@Z ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T227629 = -80						; size = 28
$T227628 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ PROC ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T227629[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T227628[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T227628[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T227629[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227628[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T227628[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T227628[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T227629[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T227629[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T227628[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UNotification@CvNotifications@@V?$allocator@UNotification@CvNotifications@@@std@@@std@@KAXXZ ENDP ; std::vector<CvNotifications::Notification,std::allocator<CvNotifications::Notification> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Notification@CvNotifications@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Notification@CvNotifications@@QAE@ABU01@@Z$0
__ehfuncinfo$??0Notification@CvNotifications@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Notification@CvNotifications@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0Notification@CvNotifications@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T227683 = -20						; size = 4
$T227678 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Notification@CvNotifications@@QAE@ABU01@@Z PROC	; CvNotifications::Notification::Notification, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Notification@CvNotifications@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T227678[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR $T227678[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR $T227683[ebp], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR $T227683[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx+72], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+76], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR [ecx+80], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+84], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+88]
	mov	BYTE PTR [ecx+88], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+89]
	mov	BYTE PTR [ecx+89], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+90]
	mov	BYTE PTR [ecx+90], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Notification@CvNotifications@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0Notification@CvNotifications@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Notification@CvNotifications@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Notification@CvNotifications@@QAE@ABU01@@Z ENDP	; CvNotifications::Notification::Notification
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAUNotification@CvNotifications@@PAU12@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00@Z
_TEXT	SEGMENT
$T227742 = -42						; size = 1
$T227741 = -41						; size = 1
$T227740 = -40						; size = 4
$T227739 = -36						; size = 4
$T227727 = -29						; size = 1
$T227726 = -28						; size = 4
$T227725 = -24						; size = 4
$T227724 = -20						; size = 4
__Cat$227733 = -8					; size = 1
$T227730 = -7						; size = 1
$T227729 = -6						; size = 1
__Cat$227698 = -4					; size = 1
$T227694 = -3						; size = 1
$T227693 = -2						; size = 1
$T227692 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUNotification@CvNotifications@@PAU12@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00@Z PROC ; stdext::_Unchecked_move_backward<CvNotifications::Notification *,CvNotifications::Notification *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T227692[ebp], al
	mov	cl, BYTE PTR __Cat$227698[ebp]
	mov	BYTE PTR $T227693[ebp], cl
	mov	dl, BYTE PTR $T227692[ebp]
	mov	BYTE PTR $T227742[ebp], dl
	mov	al, BYTE PTR $T227694[ebp]
	mov	BYTE PTR $T227741[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T227740[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T227739[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T227729[ebp], al
	mov	cl, BYTE PTR __Cat$227733[ebp]
	mov	BYTE PTR $T227730[ebp], cl
	mov	dl, BYTE PTR $T227729[ebp]
	mov	BYTE PTR $T227727[ebp], dl
	mov	eax, DWORD PTR $T227740[ebp]
	mov	DWORD PTR $T227726[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T227725[ebp], ecx
	mov	edx, DWORD PTR $T227739[ebp]
	mov	DWORD PTR $T227724[ebp], edx
$LN12@Unchecked_:
	mov	eax, DWORD PTR $T227724[ebp]
	cmp	eax, DWORD PTR $T227725[ebp]
	je	SHORT $LN7@Unchecked_
	mov	ecx, DWORD PTR $T227725[ebp]
	sub	ecx, 92					; 0000005cH
	mov	DWORD PTR $T227725[ebp], ecx
	mov	edx, DWORD PTR $T227726[ebp]
	sub	edx, 92					; 0000005cH
	mov	DWORD PTR $T227726[ebp], edx
	mov	eax, DWORD PTR $T227725[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227726[ebp]
	call	??4Notification@CvNotifications@@QAEAAU01@ABU01@@Z
	jmp	SHORT $LN12@Unchecked_
$LN7@Unchecked_:
	mov	eax, DWORD PTR $T227726[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUNotification@CvNotifications@@PAU12@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00@Z ENDP ; stdext::_Unchecked_move_backward<CvNotifications::Notification *,CvNotifications::Notification *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z
_TEXT	SEGMENT
$T227749 = -16						; size = 4
$T227745 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z PROC ; std::_Allocate<CvNotifications::Notification>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 92					; 0000005cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T227749[ebp], 0
	lea	eax, DWORD PTR $T227749[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227745[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T227745[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T227745[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 92					; 0000005cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UNotification@CvNotifications@@@std@@YAPAUNotification@CvNotifications@@IPAU12@@Z ENDP ; std::_Allocate<CvNotifications::Notification>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$11
__unwindtable$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -56						; size = 4
tv154 = -52						; size = 4
$T227801 = -32						; size = 4
$T227800 = -28						; size = 4
__Vptr$227798 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvNotifications::Notification *,unsigned int,CvNotifications::Notification,std::allocator<CvNotifications::Notification> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$227798[ebp], eax
	mov	ecx, DWORD PTR __Vptr$227798[ebp]
	mov	DWORD PTR $T227801[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T227801[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227801[ebp]
	call	??0Notification@CvNotifications@@QAE@ABU01@@Z
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN19@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_fil:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T227800[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$227798[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227801[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUNotification@CvNotifications@@IU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAXPAUNotification@CvNotifications@@IABU12@AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvNotifications::Notification *,unsigned int,CvNotifications::Notification,std::allocator<CvNotifications::Notification> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z$0
__ehfuncinfo$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z
_TEXT	SEGMENT
$T227865 = -20						; size = 4
$T227860 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z PROC ; std::_Destroy<CvNotifications::Notification>, COMDAT

; 58   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T227860[ebp], eax
	mov	ecx, DWORD PTR $T227860[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T227865[ebp], ecx
	mov	ecx, DWORD PTR $T227865[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN1@Destroy
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Destroy:

; 60   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z$0:
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ENDP ; std::_Destroy<CvNotifications::Notification>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z
_TEXT	SEGMENT
__Cat$227894 = -3					; size = 1
$T227890 = -2						; size = 1
$T227889 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T227889[ebp], al
	mov	cl, BYTE PTR __Cat$227894[ebp]
	mov	BYTE PTR $T227890[ebp], cl
	movzx	edx, BYTE PTR $T227889[ebp]
	push	edx
	movzx	eax, BYTE PTR $T227890[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@stdext@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$11
__unwindtable$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -56						; size = 4
tv154 = -52						; size = 4
$T227939 = -32						; size = 4
$T227938 = -28						; size = 4
__Vptr$227936 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$227936[ebp], ecx
	mov	edx, DWORD PTR __Vptr$227936[ebp]
	mov	DWORD PTR $T227939[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T227939[ebp], 0
	je	SHORT $LN18@Uninit_cop
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227939[ebp]
	call	??0Notification@CvNotifications@@QAE@ABU01@@Z
	mov	DWORD PTR tv154[ebp], eax
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN19@Uninit_cop
$LN18@Uninit_cop:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_cop:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T227938[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 92					; 0000005cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	call	??$_Destroy@UNotification@CvNotifications@@@std@@YAXPAUNotification@CvNotifications@@@Z ; std::_Destroy<CvNotifications::Notification>
	add	esp, 4
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$227936[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227939[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUNotification@CvNotifications@@PAU12@V?$allocator@UNotification@CvNotifications@@@std@@@std@@YAPAUNotification@CvNotifications@@PAU12@00AAV?$allocator@UNotification@CvNotifications@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvNotifications::Notification *,CvNotifications::Notification *,std::allocator<CvNotifications::Notification> >
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
_TEXT	ENDS
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228012 = -4						; size = 4
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 532  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@getPlotCit
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T228012[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T228012[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	jmp	SHORT $LN2@getPlotCit
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax
$LN2@getPlotCit:

; 537  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
_TEXT	ENDS
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	if(bWrap)

	movzx	eax, BYTE PTR _bWrap$[ebp]
	test	eax, eax
	je	SHORT $LN4@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)

	cmp	DWORD PTR _iCoord$[ebp], 0
	jge	SHORT $LN3@coordRange

; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	add	edx, DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
	jmp	SHORT $LN4@coordRange
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	mov	ecx, DWORD PTR _iCoord$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jl	SHORT $LN4@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
$LN4@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;

	mov	eax, DWORD PTR _iCoord$[ebp]
$LN5@coordRange:

; 101  : }

	pop	ebp
	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
_this$ = -12						; size = 4
$T228026 = -8						; size = 4
$T228022 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	cmp	DWORD PTR _iX$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T228022[ebp], ecx
	mov	edx, DWORD PTR _iX$[ebp]
	cmp	edx, DWORD PTR $T228022[ebp]
	jge	SHORT $LN3@isPlot
	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T228026[ebp], ecx
	mov	edx, DWORD PTR _iY$[ebp]
	cmp	edx, DWORD PTR $T228026[ebp]
	jge	SHORT $LN3@isPlot
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@isPlot
$LN3@isPlot:
	mov	DWORD PTR tv72[ebp], 0
$LN4@isPlot:
	mov	eax, DWORD PTR tv72[ebp]

; 161  : #endif
; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
