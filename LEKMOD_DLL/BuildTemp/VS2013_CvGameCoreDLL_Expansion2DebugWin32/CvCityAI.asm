; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvCityAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?AI_reset@CvCityAI@@UAEXXZ			; CvCityAI::AI_reset
PUBLIC	??_7CvCityAI@@6B@				; CvCityAI::`vftable'
PUBLIC	??0CvCityAI@@QAE@XZ				; CvCityAI::CvCityAI
PUBLIC	?AI_init@CvCityAI@@UAEXXZ			; CvCityAI::AI_init
PUBLIC	?AI_doTurn@CvCityAI@@UAEXXZ			; CvCityAI::AI_doTurn
PUBLIC	?AI_chooseProduction@CvCityAI@@UAEX_N@Z		; CvCityAI::AI_chooseProduction
PUBLIC	?AI_isChooseProductionDirty@CvCityAI@@UAE_NXZ	; CvCityAI::AI_isChooseProductionDirty
PUBLIC	?AI_setChooseProductionDirty@CvCityAI@@UAEX_N@Z	; CvCityAI::AI_setChooseProductionDirty
PUBLIC	?AI_GetNumPlotsAcquiredByOtherPlayer@CvCityAI@@UBEHW4PlayerTypes@@@Z ; CvCityAI::AI_GetNumPlotsAcquiredByOtherPlayer
PUBLIC	?AI_ChangeNumPlotsAcquiredByOtherPlayer@CvCityAI@@UAEXW4PlayerTypes@@H@Z ; CvCityAI::AI_ChangeNumPlotsAcquiredByOtherPlayer
PUBLIC	?IsBuildingUnitForOperation@CvCity@@UBE_NXZ	; CvCity::IsBuildingUnitForOperation
EXTRN	??1CvCity@@UAE@XZ:PROC				; CvCity::~CvCity
EXTRN	??0CvCity@@QAE@XZ:PROC				; CvCity::CvCity
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_ECvCityAI@@UAEPAXI@Z:PROC			; CvCityAI::`vector deleting destructor'
;	COMDAT ??_7CvCityAI@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityai.cpp
CONST	SEGMENT
??_7CvCityAI@@6B@ DD FLAT:??_ECvCityAI@@UAEPAXI@Z	; CvCityAI::`vftable'
	DD	FLAT:?AI_init@CvCityAI@@UAEXXZ
	DD	FLAT:?AI_reset@CvCityAI@@UAEXXZ
	DD	FLAT:?AI_doTurn@CvCityAI@@UAEXXZ
	DD	FLAT:?AI_chooseProduction@CvCityAI@@UAEX_N@Z
	DD	FLAT:?AI_isChooseProductionDirty@CvCityAI@@UAE_NXZ
	DD	FLAT:?AI_setChooseProductionDirty@CvCityAI@@UAEX_N@Z
	DD	FLAT:?AI_GetNumPlotsAcquiredByOtherPlayer@CvCityAI@@UBEHW4PlayerTypes@@@Z
	DD	FLAT:?AI_ChangeNumPlotsAcquiredByOtherPlayer@CvCityAI@@UAEXW4PlayerTypes@@H@Z
	DD	FLAT:?IsBuildingUnitForOperation@CvCity@@UBE_NXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvCityAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCityAI@@QAE@XZ$0
__ehfuncinfo$??0CvCityAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvCityAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0CvCityAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCityAI@@QAE@XZ PROC				; CvCityAI::CvCityAI, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvCityAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvCity@@QAE@XZ			; CvCity::CvCity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCityAI@@6B@

; 34   : 	OBJECT_ALLOCATED
; 35   : 	AI_reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AI_reset@CvCityAI@@UAEXXZ		; CvCityAI::AI_reset

; 36   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCityAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvCity@@UAE@XZ			; CvCity::~CvCity
__ehhandler$??0CvCityAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvCityAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCityAI@@QAE@XZ ENDP				; CvCityAI::CvCityAI
PUBLIC	??1CvCityAI@@UAE@XZ				; CvCityAI::~CvCityAI
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvCityAI@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvCityAI@@UAEPAXI@Z PROC				; CvCityAI::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCityAI@@UAE@XZ			; CvCityAI::~CvCityAI
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvCityAI@@UAEPAXI@Z ENDP				; CvCityAI::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AI_uninit@CvCityAI@@QAEXXZ			; CvCityAI::AI_uninit
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CvCityAI@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCityAI@@UAE@XZ$0
__ehfuncinfo$??1CvCityAI@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvCityAI@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvCityAI@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCityAI@@UAE@XZ PROC				; CvCityAI::~CvCityAI, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvCityAI@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCityAI@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 40   : 	AI_uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AI_uninit@CvCityAI@@QAEXXZ		; CvCityAI::AI_uninit

; 41   : 	OBJECT_DESTROYED
; 42   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCity@@UAE@XZ			; CvCity::~CvCity
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCityAI@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvCity@@UAE@XZ			; CvCity::~CvCity
__ehhandler$??1CvCityAI@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvCityAI@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCityAI@@UAE@XZ ENDP				; CvCityAI::~CvCityAI
; Function compile flags: /Odtp
;	COMDAT ?AI_init@CvCityAI@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AI_init@CvCityAI@@UAEXXZ PROC				; CvCityAI::AI_init, COMDAT
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	VALIDATE_OBJECT
; 47   : 	AI_reset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_init@CvCityAI@@UAEXXZ ENDP				; CvCityAI::AI_init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AI_uninit@CvCityAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AI_uninit@CvCityAI@@QAEXXZ PROC			; CvCityAI::AI_uninit, COMDAT
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	VALIDATE_OBJECT
; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_uninit@CvCityAI@@QAEXXZ ENDP			; CvCityAI::AI_uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AI_reset@CvCityAI@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iI$222760 = -4						; size = 4
?AI_reset@CvCityAI@@UAEXXZ PROC				; CvCityAI::AI_reset, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	VALIDATE_OBJECT
; 60   : 	AI_uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AI_uninit@CvCityAI@@QAEXXZ		; CvCityAI::AI_uninit

; 61   : 
; 62   : 	m_bChooseProductionDirty = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3108], 0

; 63   : 
; 64   : 	for(int iI = 0; iI < REALLY_MAX_PLAYERS; iI++)

	mov	DWORD PTR _iI$222760[ebp], 0
	jmp	SHORT $LN3@AI_reset
$LN2@AI_reset:
	mov	ecx, DWORD PTR _iI$222760[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$222760[ebp], ecx
$LN3@AI_reset:
	cmp	DWORD PTR _iI$222760[ebp], 80		; 00000050H
	jge	SHORT $LN1@AI_reset

; 65   : 	{
; 66   : 		m_aiPlayerCloseness[iI] = 0;

	mov	edx, DWORD PTR _iI$222760[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+3120], 0

; 67   : 		m_aiNumPlotsAcquiredByOtherPlayers[iI] = 0;

	mov	ecx, DWORD PTR _iI$222760[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+3440], 0

; 68   : 	}

	jmp	SHORT $LN2@AI_reset
$LN1@AI_reset:

; 69   : 	m_iCachePlayerClosenessTurn = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3112], -1

; 70   : 	m_iCachePlayerClosenessDistance = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3116], -1

; 71   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_reset@CvCityAI@@UAEXXZ ENDP				; CvCityAI::AI_reset
_TEXT	ENDS
PUBLIC	?AI_stealPlots@CvCityAI@@IAEXXZ			; CvCityAI::AI_stealPlots
EXTRN	?isHuman@CvCity@@QBE_NXZ:PROC			; CvCity::isHuman
; Function compile flags: /Odtp
;	COMDAT ?AI_doTurn@CvCityAI@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AI_doTurn@CvCityAI@@UAEXXZ PROC			; CvCityAI::AI_doTurn, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	AI_PERF_FORMAT("City-AI-perf.csv", ("CvCityAI::AI_doTurn, Turn %03d, %s, %s", GC.getGame().getElapsedGameTurns(), GetPlayer()->getCivilizationShortDescription(), getName().c_str()) );
; 76   : 	VALIDATE_OBJECT
; 77   : 	if(!isHuman())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?isHuman@CvCity@@QBE_NXZ		; CvCity::isHuman
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@AI_doTurn

; 78   : 	{
; 79   : 		AI_stealPlots();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AI_stealPlots@CvCityAI@@IAEXXZ		; CvCityAI::AI_stealPlots
$LN2@AI_doTurn:

; 80   : 	}
; 81   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_doTurn@CvCityAI@@UAEXXZ ENDP			; CvCityAI::AI_doTurn
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0CD@JFMPHBHB@?$CFs?0?5WONDER?5?9?5Started?5?$CFs?0?5Turns?3?5@ ; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	??_C@_0DF@OKCOFACP@Random?5roll?5for?5whether?5to?5conti@ ; `string'
PUBLIC	??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@	; `string'
PUBLIC	??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	?ChooseProduction@CvCityStrategyAI@@QAEX_NW4BuildingTypes@@W4UnitTypes@@@Z:PROC ; CvCityStrategyAI::ChooseProduction
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z:PROC ; CvCitySpecializationAI::GetLogFileName
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?LogCityProduction@CvCityStrategyAI@@QAEXUCvCityBuildable@@_N@Z:PROC ; CvCityStrategyAI::LogCityProduction
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
EXTRN	?pushOrder@CvCity@@QAEXW4OrderTypes@@HH_N111@Z:PROC ; CvCity::pushOrder
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z:PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z:PROC ; CvCitySpecializationAI::SetSpecializationsDirty
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z:PROC ; CvWonderProductionAI::IsWonder
EXTRN	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ:PROC ; CvPlayer::GetWonderProductionAI
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ:PROC ; CvCity::getProductionBuilding
EXTRN	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ:PROC ; CvCitySpecializationAI::GetWonderBuildCity
EXTRN	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ:PROC ; CvPlayer::GetCitySpecializationAI
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
;	COMDAT ??_C@_0CD@JFMPHBHB@?$CFs?0?5WONDER?5?9?5Started?5?$CFs?0?5Turns?3?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CD@JFMPHBHB@?$CFs?0?5WONDER?5?9?5Started?5?$CFs?0?5Turns?3?5@ DB '%'
	DB	's, WONDER - Started %s, Turns: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OKCOFACP@Random?5roll?5for?5whether?5to?5conti@
CONST	SEGMENT
??_C@_0DF@OKCOFACP@Random?5roll?5for?5whether?5to?5conti@ DB 'Random roll'
	DB	' for whether to continue building wonders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@
CONST	SEGMENT
??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@ DB 'FLAVOR_GREAT_PEOPLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
CONST	SEGMENT
??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@ DB 'FLAVOR_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AI_chooseProduction@CvCityAI@@UAEX_N@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?AI_chooseProduction@CvCityAI@@UAEX_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AI_chooseProduction@CvCityAI@@UAEX_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$5
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityai.cpp
xdata$x	ENDS
;	COMDAT ?AI_chooseProduction@CvCityAI@@UAEX_N@Z
_TEXT	SEGMENT
tv379 = -316						; size = 4
tv368 = -312						; size = 4
tv390 = -308						; size = 4
tv401 = -304						; size = 4
tv260 = -300						; size = 4
tv192 = -296						; size = 4
tv129 = -292						; size = 4
_this$ = -288						; size = 4
$T223208 = -284						; size = 4
$T223200 = -280						; size = 4
$T223199 = -276						; size = 4
$T223195 = -272						; size = 4
$T223194 = -268						; size = 4
$T223190 = -264						; size = 4
$T223182 = -260						; size = 4
$T223181 = -256						; size = 4
$T223177 = -252						; size = 4
$T223159 = -248						; size = 4
$T223152 = -244						; size = 4
$T223142 = -240						; size = 4
$T223127 = -236						; size = 28
$T223126 = -208						; size = 28
$T223125 = -180						; size = 28
_playerName$222797 = -152				; size = 28
_strOutBuf$222800 = -124				; size = 28
_pLog$222798 = -96					; size = 4
_strBaseString$222799 = -92				; size = 28
__$ArrayPad$ = -64					; size = 4
_buildable$222794 = -60					; size = 12
_iFlavorWonder$222784 = -48				; size = 4
_iFlavorGP$222787 = -44					; size = 4
_iFlavor$222790 = -40					; size = 4
_pkBuilding$222779 = -36				; size = 4
_eBuilding$222778 = -32					; size = 4
_eNextWonder$222781 = -28				; size = 4
_kOwner$ = -24						; size = 4
_pSpecializationAI$ = -20				; size = 4
_bBuildWonder$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_bInterruptWonders$ = 8					; size = 1
?AI_chooseProduction@CvCityAI@@UAEX_N@Z PROC		; CvCityAI::AI_chooseProduction, COMDAT
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AI_chooseProduction@CvCityAI@@UAEX_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	VALIDATE_OBJECT
; 86   : 	CvPlayerAI& kOwner = GET_PLAYER(getOwner());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T223142[ebp], ecx
	mov	edx, DWORD PTR $T223142[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kOwner$[ebp], edx

; 87   : 	CvCitySpecializationAI* pSpecializationAI = kOwner.GetCitySpecializationAI();

	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	DWORD PTR _pSpecializationAI$[ebp], eax

; 88   : 	bool bBuildWonder = false;

	mov	BYTE PTR _bBuildWonder$[ebp], 0

; 89   : 
; 90   : 	// See if this is the one AI city that is supposed to be building wonders
; 91   : 	if(pSpecializationAI->GetWonderBuildCity() == this)

	mov	ecx, DWORD PTR _pSpecializationAI$[ebp]
	call	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
	cmp	eax, DWORD PTR _this$[ebp]
	jne	$LN9@AI_chooseP

; 92   : 	{
; 93   : 		// Is it still working on that wonder and we don't want to interrupt it?
; 94   : 		if(!bInterruptWonders)

	movzx	eax, BYTE PTR _bInterruptWonders$[ebp]
	test	eax, eax
	jne	SHORT $LN8@AI_chooseP

; 95   : 		{
; 96   : 			const BuildingTypes eBuilding = getProductionBuilding();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	mov	DWORD PTR _eBuilding$222778[ebp], eax

; 97   : 			CvBuildingEntry* pkBuilding = (eBuilding != NO_BUILDING)? GC.getBuildingInfo(eBuilding) : NULL;

	cmp	DWORD PTR _eBuilding$222778[ebp], -1
	je	SHORT $LN12@AI_chooseP
	mov	ecx, DWORD PTR _eBuilding$222778[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN13@AI_chooseP
$LN12@AI_chooseP:
	mov	DWORD PTR tv129[ebp], 0
$LN13@AI_chooseP:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _pkBuilding$222779[ebp], edx

; 98   : 			if(pkBuilding && kOwner.GetWonderProductionAI()->IsWonder(*pkBuilding))

	cmp	DWORD PTR _pkBuilding$222779[ebp], 0
	je	SHORT $LN8@AI_chooseP
	mov	eax, DWORD PTR _pkBuilding$222779[ebp]
	push	eax
	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ; CvWonderProductionAI::IsWonder
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@AI_chooseP

; 99   : 			{
; 100  : 				return;  // Stay the course

	jmp	$LN10@AI_chooseP
$LN8@AI_chooseP:

; 101  : 			}
; 102  : 		}
; 103  : 
; 104  : 		// So we're the wonder building city but it is not underway yet...
; 105  : 
; 106  : 		// Has the designated wonder been poached by another civ?
; 107  : 		BuildingTypes eNextWonder = pSpecializationAI->GetNextWonderDesired();

	mov	edx, DWORD PTR _pSpecializationAI$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR _eNextWonder$222781[ebp], eax

; 108  : 		if(!canConstruct(eNextWonder))

	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _eNextWonder$222781[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@AI_chooseP

; 109  : 		{
; 110  : 			// Reset city specialization
; 111  : 			kOwner.GetCitySpecializationAI()->SetSpecializationsDirty(SPECIALIZATION_UPDATE_WONDER_BUILT_BY_RIVAL);

	push	8
	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::SetSpecializationsDirty

; 112  : 		}
; 113  : 		else

	jmp	$LN9@AI_chooseP
$LN6@AI_chooseP:

; 114  : 		{
; 115  : 			// to prevent us from continuously locking into building wonders in one city when there are other high priority items to build
; 116  : 			int iFlavorWonder = kOwner.GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes)GC.getInfoTypeForString("FLAVOR_WONDER"));

	push	0
	push	OFFSET ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
	mov	DWORD PTR _iFlavorWonder$222784[ebp], eax

; 117  : 			int iFlavorGP = kOwner.GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes)GC.getInfoTypeForString("FLAVOR_GREAT_PEOPLE"));

	push	0
	push	OFFSET ??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
	mov	DWORD PTR _iFlavorGP$222787[ebp], eax

; 118  : 			int iFlavor = (iFlavorWonder > iFlavorGP ) ? iFlavorWonder : iFlavorGP;

	mov	eax, DWORD PTR _iFlavorWonder$222784[ebp]
	cmp	eax, DWORD PTR _iFlavorGP$222787[ebp]
	jle	SHORT $LN14@AI_chooseP
	mov	ecx, DWORD PTR _iFlavorWonder$222784[ebp]
	mov	DWORD PTR tv192[ebp], ecx
	jmp	SHORT $LN15@AI_chooseP
$LN14@AI_chooseP:
	mov	edx, DWORD PTR _iFlavorGP$222787[ebp]
	mov	DWORD PTR tv192[ebp], edx
$LN15@AI_chooseP:
	mov	eax, DWORD PTR tv192[ebp]
	mov	DWORD PTR _iFlavor$222790[ebp], eax

; 119  : 			if (GC.getGame().getJonRandNum(11, "Random roll for whether to continue building wonders") <= iFlavor)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223152[ebp], ecx
	push	OFFSET ??_C@_0DF@OKCOFACP@Random?5roll?5for?5whether?5to?5conti@
	push	11					; 0000000bH
	mov	ecx, DWORD PTR $T223152[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	cmp	eax, DWORD PTR _iFlavor$222790[ebp]
	jg	SHORT $LN9@AI_chooseP

; 120  : 				bBuildWonder = true;

	mov	BYTE PTR _bBuildWonder$[ebp], 1
$LN9@AI_chooseP:

; 121  : 		}
; 122  : 	}
; 123  : 
; 124  : 	if(bBuildWonder)

	movzx	edx, BYTE PTR _bBuildWonder$[ebp]
	test	edx, edx
	je	$LN3@AI_chooseP

; 125  : 	{
; 126  : 		CvCityBuildable buildable;

	mov	DWORD PTR _buildable$222794[ebp], 0
	mov	DWORD PTR _buildable$222794[ebp+4], 0
	mov	DWORD PTR _buildable$222794[ebp+8], 0

; 127  : 		buildable.m_eBuildableType = CITY_BUILDABLE_BUILDING;

	mov	DWORD PTR _buildable$222794[ebp], 1

; 128  : 		buildable.m_iIndex = pSpecializationAI->GetNextWonderDesired();

	mov	eax, DWORD PTR _pSpecializationAI$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR $T223159[ebp], ecx
	mov	edx, DWORD PTR $T223159[ebp]
	mov	DWORD PTR _buildable$222794[ebp+4], edx

; 129  : 		buildable.m_iTurnsToConstruct = getProductionTurnsLeft((BuildingTypes)buildable.m_eBuildableType, 0);

	push	0
	mov	eax, DWORD PTR _buildable$222794[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _buildable$222794[ebp+8], eax

; 130  : 		pushOrder(ORDER_CONSTRUCT, buildable.m_iIndex, -1, false, false, false, false);

	push	0
	push	0
	push	0
	push	0
	push	-1
	mov	ecx, DWORD PTR _buildable$222794[ebp+4]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pushOrder@CvCity@@QAEXW4OrderTypes@@HH_N111@Z ; CvCity::pushOrder

; 131  : 
; 132  : 		if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	edx, al
	test	edx, edx
	je	$LN2@AI_chooseP
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	eax, al
	test	eax, eax
	je	$LN2@AI_chooseP

; 133  : 		{
; 134  : 			CvString playerName;

	lea	ecx, DWORD PTR _playerName$222797[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 135  : 			FILogFile* pLog;
; 136  : 			CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 137  : 			CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$222800[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 138  : 
; 139  : 			m_pCityStrategyAI->LogCityProduction(buildable, false);

	push	0
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR _buildable$222794[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _buildable$222794[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _buildable$222794[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2896]
	call	?LogCityProduction@CvCityStrategyAI@@QAEXUCvCityBuildable@@_N@Z ; CvCityStrategyAI::LogCityProduction

; 140  : 
; 141  : 			playerName = kOwner.getCivilizationShortDescription();

	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T223177[ebp], eax
	cmp	DWORD PTR $T223177[ebp], 0
	je	SHORT $LN46@AI_chooseP
	mov	ecx, DWORD PTR $T223177[ebp]
	push	ecx
	lea	ecx, DWORD PTR _playerName$222797[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN47@AI_chooseP
$LN46@AI_chooseP:
	lea	ecx, DWORD PTR _playerName$222797[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN47@AI_chooseP:

; 142  : 			pLog = LOGFILEMGR.GetLog(kOwner.GetCitySpecializationAI()->GetLogFileName(playerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv260[ebp], eax
	lea	edx, DWORD PTR _playerName$222797[ebp]
	push	edx
	lea	eax, DWORD PTR $T223125[ebp]
	push	eax
	mov	ecx, DWORD PTR _kOwner$[ebp]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv401[ebp], eax
	mov	ecx, DWORD PTR tv401[ebp]
	mov	DWORD PTR $T223181[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T223181[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223182[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T223182[ebp]
	push	edx
	mov	eax, DWORD PTR tv260[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv260[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$222798[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T223125[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 143  : 			strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T223190[ebp], ecx
	mov	ecx, DWORD PTR $T223190[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$222799[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 144  : 			strBaseString += playerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$222797[ebp]
	push	eax
	lea	ecx, DWORD PTR $T223126[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv390[ebp], eax
	mov	edx, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv368[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv368[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T223126[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 145  : #ifdef AUI_WARNING_FIXES
; 146  : 			CvBuildingEntry* pWonderInfo = GC.getBuildingInfo((BuildingTypes)buildable.m_iIndex);
; 147  : 			if (pWonderInfo)
; 148  : 				strOutBuf.Format("%s, WONDER - Started %s, Turns: %d", getName().GetCString(), pWonderInfo->GetDescription(), buildable.m_iTurnsToConstruct);
; 149  : #else
; 150  : 			strOutBuf.Format("%s, WONDER - Started %s, Turns: %d", getName().GetCString(), GC.getBuildingInfo((BuildingTypes)buildable.m_iIndex)->GetDescription(), buildable.m_iTurnsToConstruct);

	lea	ecx, DWORD PTR $T223127[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv379[ebp], eax
	mov	edx, DWORD PTR tv379[ebp]
	mov	DWORD PTR $T223199[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _buildable$222794[ebp+4]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR $T223194[ebp], eax
	mov	ecx, DWORD PTR $T223194[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223195[ebp], eax
	mov	ecx, DWORD PTR $T223199[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223200[ebp], eax
	mov	ecx, DWORD PTR _buildable$222794[ebp+8]
	push	ecx
	mov	edx, DWORD PTR $T223195[ebp]
	push	edx
	mov	eax, DWORD PTR $T223200[ebp]
	push	eax
	push	OFFSET ??_C@_0CD@JFMPHBHB@?$CFs?0?5WONDER?5?9?5Started?5?$CFs?0?5Turns?3?5@
	lea	ecx, DWORD PTR _strOutBuf$222800[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 20					; 00000014H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T223127[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 151  : #endif
; 152  : 			strBaseString += strOutBuf;

	lea	edx, DWORD PTR _strOutBuf$222800[ebp]
	push	edx
	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 153  : 			pLog->Msg(strBaseString);

	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T223208[ebp], eax
	mov	eax, DWORD PTR $T223208[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$222798[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$222798[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 154  : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strOutBuf$222800[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _playerName$222797[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@AI_chooseP:

; 155  : 	}
; 156  : 
; 157  : 	else

	jmp	SHORT $LN10@AI_chooseP
$LN3@AI_chooseP:

; 158  : 	{
; 159  : 		m_pCityStrategyAI->ChooseProduction(false);

	push	-1
	push	-1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+2896]
	call	?ChooseProduction@CvCityStrategyAI@@QAEX_NW4BuildingTypes@@W4UnitTypes@@@Z ; CvCityStrategyAI::ChooseProduction

; 160  : 		AI_setChooseProductionDirty(false);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN10@AI_chooseP:

; 161  : 	}
; 162  : 
; 163  : 	return;
; 164  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$0:
	lea	ecx, DWORD PTR _playerName$222797[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$1:
	lea	ecx, DWORD PTR _strBaseString$222799[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$2:
	lea	ecx, DWORD PTR _strOutBuf$222800[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$3:
	lea	ecx, DWORD PTR $T223125[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$4:
	lea	ecx, DWORD PTR $T223126[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?AI_chooseProduction@CvCityAI@@UAEX_N@Z$5:
	lea	ecx, DWORD PTR $T223127[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AI_chooseProduction@CvCityAI@@UAEX_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AI_chooseProduction@CvCityAI@@UAEX_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AI_chooseProduction@CvCityAI@@UAEX_N@Z ENDP		; CvCityAI::AI_chooseProduction
; Function compile flags: /Odtp
;	COMDAT ?AI_isChooseProductionDirty@CvCityAI@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AI_isChooseProductionDirty@CvCityAI@@UAE_NXZ PROC	; CvCityAI::AI_isChooseProductionDirty, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 	VALIDATE_OBJECT
; 169  : 	return m_bChooseProductionDirty;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+3108]

; 170  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_isChooseProductionDirty@CvCityAI@@UAE_NXZ ENDP	; CvCityAI::AI_isChooseProductionDirty
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AI_setChooseProductionDirty@CvCityAI@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bNewValue$ = 8						; size = 1
?AI_setChooseProductionDirty@CvCityAI@@UAEX_N@Z PROC	; CvCityAI::AI_setChooseProductionDirty, COMDAT
; _this$ = ecx

; 173  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 	VALIDATE_OBJECT
; 175  : 	m_bChooseProductionDirty = bNewValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bNewValue$[ebp]
	mov	BYTE PTR [eax+3108], cl

; 176  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AI_setChooseProductionDirty@CvCityAI@@UAEX_N@Z ENDP	; CvCityAI::AI_setChooseProductionDirty
_TEXT	ENDS
EXTRN	?setWorkingCityOverride@CvPlot@@QAEXPBVCvCity@@@Z:PROC ; CvPlot::setWorkingCityOverride
EXTRN	?getWorkingCityOverride@CvPlot@@QBEPAVCvCity@@XZ:PROC ; CvPlot::getWorkingCityOverride
EXTRN	?plotCity@@YAPAVCvPlot@@HHH@Z:PROC		; plotCity
; Function compile flags: /Odtp
;	COMDAT ?AI_stealPlots@CvCityAI@@IAEXXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T223263 = -24						; size = 4
$T223254 = -20						; size = 4
$T223250 = -16						; size = 4
$T223241 = -12						; size = 4
_iI$ = -8						; size = 4
_pLoopPlot$ = -4					; size = 4
?AI_stealPlots@CvCityAI@@IAEXXZ PROC			; CvCityAI::AI_stealPlots, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 	VALIDATE_OBJECT
; 181  : 	CvPlot* pLoopPlot = 0;

	mov	DWORD PTR _pLoopPlot$[ebp], 0

; 182  : 	int iI = 0;

	mov	DWORD PTR _iI$[ebp], 0

; 183  : 
; 184  : 	for(iI = 0; iI < NUM_CITY_PLOTS; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN6@AI_stealPl
$LN5@AI_stealPl:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN6@AI_stealPl:
	cmp	DWORD PTR _iI$[ebp], 37			; 00000025H
	jge	SHORT $LN7@AI_stealPl

; 185  : 	{
; 186  : 		pLoopPlot = plotCity(getX(),getY(),iI);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR $T223241[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR $T223250[ebp], ecx
	mov	edx, DWORD PTR _iI$[ebp]
	push	edx
	mov	eax, DWORD PTR $T223241[ebp]
	push	eax
	mov	ecx, DWORD PTR $T223250[ebp]
	push	ecx
	call	?plotCity@@YAPAVCvPlot@@HHH@Z		; plotCity
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLoopPlot$[ebp], eax

; 187  : 
; 188  : 		if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$[ebp], 0
	je	SHORT $LN3@AI_stealPl

; 189  : 		{
; 190  : 			if(pLoopPlot->getWorkingCityOverride() == this)

	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?getWorkingCityOverride@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCityOverride
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@AI_stealPl

; 191  : 			{
; 192  : 				if(pLoopPlot->getOwner() != getOwner())

	mov	edx, DWORD PTR _pLoopPlot$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T223254[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T223263[ebp], edx
	mov	eax, DWORD PTR $T223254[ebp]
	cmp	eax, DWORD PTR $T223263[ebp]
	je	SHORT $LN3@AI_stealPl

; 193  : 				{
; 194  : 					pLoopPlot->setWorkingCityOverride(NULL);

	push	0
	mov	ecx, DWORD PTR _pLoopPlot$[ebp]
	call	?setWorkingCityOverride@CvPlot@@QAEXPBVCvCity@@@Z ; CvPlot::setWorkingCityOverride
$LN3@AI_stealPl:

; 195  : 				}
; 196  : 			}
; 197  : 		}

	jmp	SHORT $LN5@AI_stealPl
$LN7@AI_stealPl:

; 198  : 	}
; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AI_stealPlots@CvCityAI@@IAEXXZ ENDP			; CvCityAI::AI_stealPlots
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AI_GetNumPlotsAcquiredByOtherPlayer@CvCityAI@@UBEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
?AI_GetNumPlotsAcquiredByOtherPlayer@CvCityAI@@UBEHW4PlayerTypes@@@Z PROC ; CvCityAI::AI_GetNumPlotsAcquiredByOtherPlayer, COMDAT
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 	VALIDATE_OBJECT
; 205  : 	FAssert(ePlayer < MAX_PLAYERS);
; 206  : 	FAssert(ePlayer > -1);
; 207  : 
; 208  : 	return m_aiNumPlotsAcquiredByOtherPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+3440]

; 209  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AI_GetNumPlotsAcquiredByOtherPlayer@CvCityAI@@UBEHW4PlayerTypes@@@Z ENDP ; CvCityAI::AI_GetNumPlotsAcquiredByOtherPlayer
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?AI_ChangeNumPlotsAcquiredByOtherPlayer@CvCityAI@@UAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ePlayer$ = 8						; size = 4
_iChange$ = 12						; size = 4
?AI_ChangeNumPlotsAcquiredByOtherPlayer@CvCityAI@@UAEXW4PlayerTypes@@H@Z PROC ; CvCityAI::AI_ChangeNumPlotsAcquiredByOtherPlayer, COMDAT
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	VALIDATE_OBJECT
; 215  : 	FAssert(ePlayer < MAX_PLAYERS);
; 216  : 	FAssert(ePlayer > -1);
; 217  : 
; 218  : 	m_aiNumPlotsAcquiredByOtherPlayers[ePlayer] += iChange;

	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+3440]
	add	edx, DWORD PTR _iChange$[ebp]
	mov	eax, DWORD PTR _ePlayer$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3440], edx

; 219  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AI_ChangeNumPlotsAcquiredByOtherPlayer@CvCityAI@@UAEXW4PlayerTypes@@H@Z ENDP ; CvCityAI::AI_ChangeNumPlotsAcquiredByOtherPlayer
_TEXT	ENDS
PUBLIC	??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z	; operator>><int,80>
PUBLIC	?read@CvCityAI@@QAEXAAVFDataStream@@@Z		; CvCityAI::read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
EXTRN	?read@CvCity@@QAEXAAVFDataStream@@@Z:PROC	; CvCity::read
; Function compile flags: /Odtp
;	COMDAT ?read@CvCityAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?read@CvCityAI@@QAEXAAVFDataStream@@@Z PROC		; CvCityAI::read, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 	VALIDATE_OBJECT
; 228  : 	CvCity::read(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?read@CvCity@@QAEXAAVFDataStream@@@Z	; CvCity::read

; 229  : 
; 230  : 	// Version number to maintain backwards compatibility
; 231  : 	uint uiVersion;
; 232  : 	kStream >> uiVersion;

	lea	ecx, DWORD PTR _uiVersion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 233  : 
; 234  : 	kStream >> m_bChooseProductionDirty;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3108				; 00000c24H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 235  : 	kStream >> m_iCachePlayerClosenessTurn;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 236  : 	kStream >> m_iCachePlayerClosenessDistance;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3116				; 00000c2cH
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 237  : 	kStream >> m_aiPlayerCloseness;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3120				; 00000c30H
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z ; operator>><int,80>
	add	esp, 8

; 238  : 	kStream >> m_aiNumPlotsAcquiredByOtherPlayers;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3440				; 00000d70H
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z ; operator>><int,80>
	add	esp, 8

; 239  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?read@CvCityAI@@QAEXAAVFDataStream@@@Z ENDP		; CvCityAI::read
_TEXT	ENDS
PUBLIC	??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z ; operator<<<int,80>
PUBLIC	?write@CvCityAI@@QBEXAAVFDataStream@@@Z		; CvCityAI::write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
EXTRN	?write@CvCity@@QBEXAAVFDataStream@@@Z:PROC	; CvCity::write
; Function compile flags: /Odtp
;	COMDAT ?write@CvCityAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?write@CvCityAI@@QBEXAAVFDataStream@@@Z PROC		; CvCityAI::write, COMDAT
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	VALIDATE_OBJECT
; 247  : 	CvCity::write(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?write@CvCity@@QBEXAAVFDataStream@@@Z	; CvCity::write

; 248  : 
; 249  : 	// Current version number
; 250  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 251  : 	kStream << uiVersion;

	lea	ecx, DWORD PTR _uiVersion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 252  : 
; 253  : 	kStream << m_bChooseProductionDirty;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3108				; 00000c24H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 254  : 	kStream << m_iCachePlayerClosenessTurn;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 255  : 	kStream << m_iCachePlayerClosenessDistance;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3116				; 00000c2cH
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 256  : 	kStream << m_aiPlayerCloseness;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 3120				; 00000c30H
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z ; operator<<<int,80>
	add	esp, 8

; 257  : 	kStream << m_aiNumPlotsAcquiredByOtherPlayers;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3440				; 00000d70H
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z ; operator<<<int,80>
	add	esp, 8

; 258  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?write@CvCityAI@@QBEXAAVFDataStream@@@Z ENDP		; CvCityAI::write
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvCityAI@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvCityAI@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvCityAI@@@Z PROC		; operator<<, COMDAT

; 261  : {

	push	ebp
	mov	ebp, esp

; 262  : 	readFrom.write(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	call	?write@CvCityAI@@QBEXAAVFDataStream@@@Z	; CvCityAI::write

; 263  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 264  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvCityAI@@@Z ENDP		; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvCityAI@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvCityAI@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvCityAI@@@Z PROC		; operator>>, COMDAT

; 266  : {

	push	ebp
	mov	ebp, esp

; 267  : 	writeTo.read(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?read@CvCityAI@@QAEXAAVFDataStream@@@Z	; CvCityAI::read

; 268  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 269  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvCityAI@@@Z ENDP		; operator>>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
_TEXT	ENDS
;	COMDAT ??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z PROC	; operator>><int,80>, COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 235  : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 236  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@operator:
	cmp	DWORD PTR _i$[ebp], 80			; 00000050H
	jae	SHORT $LN1@operator

; 237  : 	{
; 238  : 		loadFrom >> writeTo[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _writeTo$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 239  : 	}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 240  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 241  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@H@Z ENDP	; operator>><int,80>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z PROC	; operator<<<int,80>, COMDAT

; 223  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 224  : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 225  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@operator@2:
	cmp	DWORD PTR _i$[ebp], 80			; 00000050H
	jae	SHORT $LN1@operator@2

; 226  : 	{
; 227  : 		saveTo << readFrom[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _readFrom$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 228  : 	}

	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 229  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 230  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H$0FA@@@YAAAVFDataStream@@AAV0@AAY0FA@$$CBH@Z ENDP	; operator<<<int,80>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T223340 = -2092					; size = 4
$T223339 = -2088					; size = 4
$T223338 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T223338[ebp], eax
	mov	ecx, DWORD PTR $T223338[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T223339[ebp], eax
	mov	eax, DWORD PTR $T223339[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T223340[ebp], eax
	mov	ecx, DWORD PTR $T223340[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
_TEXT	ENDS
;	COMDAT ?IsBuildingUnitForOperation@CvCity@@UBE_NXZ
_TEXT	SEGMENT
tv72 = -12						; size = 4
_this$ = -8						; size = 4
$T223350 = -4						; size = 4
?IsBuildingUnitForOperation@CvCity@@UBE_NXZ PROC	; CvCity::IsBuildingUnitForOperation, COMDAT
; _this$ = ecx

; 915  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 916  : 		return m_unitBeingBuiltForOperation.IsValid();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 808				; 00000328H
	mov	DWORD PTR $T223350[ebp], eax
	mov	ecx, DWORD PTR $T223350[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN5@IsBuilding
	mov	edx, DWORD PTR $T223350[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN5@IsBuilding
	mov	eax, DWORD PTR $T223350[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN5@IsBuilding
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN3@IsBuilding
$LN5@IsBuilding:
	mov	DWORD PTR tv72[ebp], 0
$LN3@IsBuilding:
	mov	al, BYTE PTR tv72[ebp]

; 917  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?IsBuildingUnitForOperation@CvCity@@UBE_NXZ ENDP	; CvCity::IsBuildingUnitForOperation
_TEXT	ENDS
END
