; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvBuildingProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
PUBLIC	??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z ; CvBuildingProductionAI::CvBuildingProductionAI
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z$0
__ehfuncinfo$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T217950 = -36						; size = 4
$T217933 = -24						; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_pCityBuildings$ = 12					; size = 4
??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z PROC ; CvBuildingProductionAI::CvBuildingProductionAI, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pCityBuildings$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T217933[ebp], ecx
	mov	ecx, DWORD PTR $T217933[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1104				; 00000450H
	mov	DWORD PTR $T217950[ebp], edx
	mov	ecx, DWORD PTR $T217950[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>

; 21   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ	; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
__ehhandler$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvBuildingProductionAI@@QAE@PAVCvCity@@PAVCvCityBuildings@@@Z ENDP ; CvBuildingProductionAI::CvBuildingProductionAI
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
PUBLIC	??1CvBuildingProductionAI@@QAE@XZ		; CvBuildingProductionAI::~CvBuildingProductionAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvBuildingProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBuildingProductionAI@@QAE@XZ$0
__ehfuncinfo$??1CvBuildingProductionAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvBuildingProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvBuildingProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T218029 = -44						; size = 4
$T217997 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBuildingProductionAI@@QAE@XZ PROC			; CvBuildingProductionAI::~CvBuildingProductionAI, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBuildingProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 26   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1104				; 00000450H
	mov	DWORD PTR $T217997[ebp], eax
	mov	ecx, DWORD PTR $T217997[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T218029[ebp], ecx
	mov	ecx, DWORD PTR $T218029[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBuildingProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ	; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
__ehhandler$??1CvBuildingProductionAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBuildingProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBuildingProductionAI@@QAE@XZ ENDP			; CvBuildingProductionAI::~CvBuildingProductionAI
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back
PUBLIC	?Reset@CvBuildingProductionAI@@QAEXXZ		; CvBuildingProductionAI::Reset
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
EXTRN	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvCityBuildings::GetBuildings
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvBuildingProductionAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
_weightedElem$218106 = -20				; size = 8
$T218068 = -12						; size = 4
_i$218063 = -8						; size = 4
_i$217074 = -4						; size = 4
?Reset@CvBuildingProductionAI@@QAEXXZ PROC		; CvBuildingProductionAI::Reset, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	CvAssertMsg(m_pCityBuildings != NULL, "Building Production AI init failure: city buildings are NULL");
; 32   : 
; 33   : 	m_BuildingAIWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T218068[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN15@Reset
	mov	DWORD PTR _i$218063[ebp], 0
	jmp	SHORT $LN13@Reset
$LN12@Reset:
	mov	edx, DWORD PTR _i$218063[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218063[ebp], edx
$LN13@Reset:
	mov	eax, DWORD PTR $T218068[ebp]
	mov	ecx, DWORD PTR _i$218063[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN15@Reset
	jmp	SHORT $LN12@Reset
$LN15@Reset:
	mov	edx, DWORD PTR $T218068[ebp]
	mov	DWORD PTR [edx+4], 0

; 34   : 
; 35   : 	// Loop through reading each one and add an entry with 0 weight to our vector
; 36   : 	if(m_pCityBuildings)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@Reset

; 37   : 	{
; 38   : #ifdef AUI_WARNING_FIXES
; 39   : 		for (uint i = 0; i < m_pCityBuildings->GetBuildings()->GetNumBuildings(); i++)
; 40   : #else
; 41   : 		for(int i = 0; i < m_pCityBuildings->GetBuildings()->GetNumBuildings(); i++)

	mov	DWORD PTR _i$217074[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	ecx, DWORD PTR _i$217074[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217074[ebp], ecx
$LN3@Reset:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ ; CvCityBuildings::GetBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	DWORD PTR _i$217074[ebp], eax
	jge	SHORT $LN5@Reset

; 42   : #endif
; 43   : 		{
; 44   : 			m_BuildingAIWeights.push_back(i, 0);

	mov	DWORD PTR _weightedElem$218106[ebp], 0
	mov	DWORD PTR _weightedElem$218106[ebp+4], 0
	mov	eax, DWORD PTR _i$217074[ebp]
	mov	DWORD PTR _weightedElem$218106[ebp], eax
	mov	DWORD PTR _weightedElem$218106[ebp+4], 0
	lea	ecx, DWORD PTR _weightedElem$218106[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back

; 45   : 		}

	jmp	SHORT $LN2@Reset
$LN5@Reset:

; 46   : 	}
; 47   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvBuildingProductionAI@@QAEXXZ ENDP		; CvBuildingProductionAI::Reset
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??1FStringA@@QAE@XZ				; FStringA::~FStringA
PUBLIC	?Release@FStringA@@QAEXXZ			; FStringA::Release
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0CE@MEGFIFOL@LOAD?5ERROR?3?5Building?5Type?5not?5fo@ ; `string'
PUBLIC	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z ; CvBuildingProductionAI::Read
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?LogMessage@CvGlobals@@QAEXPBD@Z:PROC		; CvGlobals::LogMessage
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ:PROC ; FStringA_GetStringInitData
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
;	COMDAT ??_C@_0CE@MEGFIFOL@LOAD?5ERROR?3?5Building?5Type?5not?5fo@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
CONST	SEGMENT
??_C@_0CE@MEGFIFOL@LOAD?5ERROR?3?5Building?5Type?5not?5fo@ DB 'LOAD ERROR'
	DB	': Building Type not found', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z$1
__ehfuncinfo$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingproductionai.cpp
xdata$x	ENDS
;	COMDAT ?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
tv161 = -208						; size = 4
_this$ = -204						; size = 4
$T218211 = -188						; size = 4
$T218163 = -180						; size = 4
_weightedElem$218157 = -176				; size = 8
$T218148 = -168						; size = 4
_i$218142 = -164					; size = 4
_szError$217115 = -160					; size = 28
_iWeight$217112 = -132					; size = 4
_bValid$217109 = -125					; size = 1
_iI$217105 = -124					; size = 4
_i$217084 = -120					; size = 4
_iType$217104 = -116					; size = 4
_sTemp$217089 = -112					; size = 4
_FStringFixedBuffer_sTemp$217103 = -108			; size = 76
__$ArrayPad$ = -24					; size = 4
_iNumEntries$217088 = -20				; size = 4
_uiVersion$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z PROC ; CvBuildingProductionAI::Read, COMDAT
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 	// Version number to maintain backwards compatibility
; 53   : 	uint uiVersion;
; 54   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 55   : 
; 56   : 	// Reset vector
; 57   : 	m_BuildingAIWeights.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T218148[ebp], ecx
	xor	edx, edx
	je	SHORT $LN27@Read
	mov	DWORD PTR _i$218142[ebp], 0
	jmp	SHORT $LN25@Read
$LN24@Read:
	mov	eax, DWORD PTR _i$218142[ebp]
	add	eax, 1
	mov	DWORD PTR _i$218142[ebp], eax
$LN25@Read:
	mov	ecx, DWORD PTR $T218148[ebp]
	mov	edx, DWORD PTR _i$218142[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN27@Read
	jmp	SHORT $LN24@Read
$LN27@Read:
	mov	eax, DWORD PTR $T218148[ebp]
	mov	DWORD PTR [eax+4], 0

; 58   : 
; 59   : 	// Loop through reading each one and adding it to our vector
; 60   : 	if(m_pCityBuildings)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN13@Read

; 61   : 	{
; 62   : #ifdef AUI_WARNING_FIXES
; 63   : 		for (uint i = 0; i < m_pCityBuildings->GetBuildings()->GetNumBuildings(); i++)
; 64   : #else
; 65   : 		for(int i = 0; i < m_pCityBuildings->GetBuildings()->GetNumBuildings(); i++)

	mov	DWORD PTR _i$217084[ebp], 0
	jmp	SHORT $LN11@Read
$LN10@Read:
	mov	edx, DWORD PTR _i$217084[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217084[ebp], edx
$LN11@Read:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ ; CvCityBuildings::GetBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	DWORD PTR _i$217084[ebp], eax
	jge	SHORT $LN9@Read

; 66   : #endif
; 67   : 		{
; 68   : 			m_BuildingAIWeights.push_back(i, 0);

	mov	DWORD PTR _weightedElem$218157[ebp], 0
	mov	DWORD PTR _weightedElem$218157[ebp+4], 0
	mov	ecx, DWORD PTR _i$217084[ebp]
	mov	DWORD PTR _weightedElem$218157[ebp], ecx
	mov	DWORD PTR _weightedElem$218157[ebp+4], 0
	lea	edx, DWORD PTR _weightedElem$218157[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back

; 69   : 		}

	jmp	SHORT $LN10@Read
$LN9@Read:

; 70   : 
; 71   : 		int iNumEntries;
; 72   : 		FStringFixedBuffer(sTemp, 64);

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	mov	DWORD PTR $T218163[ebp], eax
	mov	eax, DWORD PTR $T218163[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _sTemp$217089[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sTemp$217089[ebp]
	push	ecx
	lea	ecx, DWORD PTR _FStringFixedBuffer_sTemp$217103[ebp]
	call	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>

; 73   : 		int iType;
; 74   : 
; 75   : 		kStream >> iNumEntries;

	lea	edx, DWORD PTR _iNumEntries$217088[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 76   : 
; 77   : 		for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$217105[ebp], 0
	jmp	SHORT $LN8@Read
$LN7@Read:
	mov	eax, DWORD PTR _iI$217105[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217105[ebp], eax
$LN8@Read:
	mov	ecx, DWORD PTR _iI$217105[ebp]
	cmp	ecx, DWORD PTR _iNumEntries$217088[ebp]
	jge	$LN6@Read

; 78   : 		{
; 79   : 			bool bValid = true;

	mov	BYTE PTR _bValid$217109[ebp], 1

; 80   : 			iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	lea	edx, DWORD PTR _bValid$217109[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$217104[ebp], eax

; 81   : 			if(iType != -1 || !bValid)

	cmp	DWORD PTR _iType$217104[ebp], -1
	jne	SHORT $LN4@Read
	movzx	ecx, BYTE PTR _bValid$217109[ebp]
	test	ecx, ecx
	jne	$LN5@Read
$LN4@Read:

; 82   : 			{
; 83   : 				int iWeight;
; 84   : 				kStream >> iWeight;

	lea	edx, DWORD PTR _iWeight$217112[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 85   : 				if(iType != -1)

	cmp	DWORD PTR _iType$217104[ebp], -1
	je	SHORT $LN3@Read

; 86   : 				{
; 87   : 					m_BuildingAIWeights.IncreaseWeight(iType, iWeight);

	mov	eax, DWORD PTR _iWeight$217112[ebp]
	mov	DWORD PTR $T218211[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _iType$217104[ebp]
	lea	ecx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR tv161[ebp], ecx
	mov	edx, DWORD PTR tv161[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR $T218211[ebp]
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR [ecx], eax

; 88   : 				}
; 89   : 				else

	jmp	SHORT $LN5@Read
$LN3@Read:

; 90   : 				{
; 91   : 					CvString szError;

	lea	ecx, DWORD PTR _szError$217115[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 92   : 					szError.Format("LOAD ERROR: Building Type not found");

	push	OFFSET ??_C@_0CE@MEGFIFOL@LOAD?5ERROR?3?5Building?5Type?5not?5fo@
	lea	edx, DWORD PTR _szError$217115[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 93   : 					GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$217115[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 94   : 					CvAssertMsg(false, szError);
; 95   : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _szError$217115[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@Read:

; 96   : 			}
; 97   : 		}

	jmp	$LN7@Read
$LN6@Read:

; 98   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTemp$217089[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release
$LN13@Read:

; 99   : 	else
; 100  : 	{
; 101  : 		CvAssertMsg(m_pCityBuildings != NULL, "Building Production AI init failure: city buildings are NULL");
; 102  : 	}
; 103  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z$0:
	lea	ecx, DWORD PTR _sTemp$217089[ebp]
	jmp	??1FStringA@@QAE@XZ			; FStringA::~FStringA
__unwindfunclet$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z$1:
	lea	ecx, DWORD PTR _szError$217115[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z ENDP ; CvBuildingProductionAI::Read
PUBLIC	?Write@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z ; CvBuildingProductionAI::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
_elem$218270 = -36					; size = 8
$T218255 = -28						; size = 4
$T218254 = -24						; size = 4
_eBuilding$217129 = -20					; size = 4
_pkBuildingInfo$217131 = -16				; size = 4
_iI$217125 = -12					; size = 4
_iNumBuildings$217124 = -8				; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z PROC ; CvBuildingProductionAI::Write, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	CvAssertMsg(m_pCityBuildings != NULL, "Building Production AI init failure: city buildings are NULL");
; 109  : 
; 110  : 	// Current version number
; 111  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 112  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 113  : 
; 114  : 	if(m_pCityBuildings)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN7@Write

; 115  : 	{
; 116  : 		int iNumBuildings = m_pCityBuildings->GetBuildings()->GetNumBuildings();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ ; CvCityBuildings::GetBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	mov	DWORD PTR _iNumBuildings$217124[ebp], eax

; 117  : 		kStream << iNumBuildings;

	lea	eax, DWORD PTR _iNumBuildings$217124[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 118  : 
; 119  : 		// Loop through writing each entry
; 120  : 		for(int iI = 0; iI < iNumBuildings; iI++)

	mov	DWORD PTR _iI$217125[ebp], 0
	jmp	SHORT $LN5@Write
$LN4@Write:
	mov	ecx, DWORD PTR _iI$217125[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217125[ebp], ecx
$LN5@Write:
	mov	edx, DWORD PTR _iI$217125[ebp]
	cmp	edx, DWORD PTR _iNumBuildings$217124[ebp]
	jge	SHORT $LN7@Write

; 121  : 		{
; 122  : 			const BuildingTypes eBuilding = static_cast<BuildingTypes>(iI);

	mov	eax, DWORD PTR _iI$217125[ebp]
	mov	DWORD PTR _eBuilding$217129[ebp], eax

; 123  : 			CvBuildingEntry* pkBuildingInfo = GC.getBuildingInfo(eBuilding);

	mov	ecx, DWORD PTR _eBuilding$217129[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkBuildingInfo$217131[ebp], eax

; 124  : 			if(pkBuildingInfo)

	cmp	DWORD PTR _pkBuildingInfo$217131[ebp], 0
	je	SHORT $LN2@Write

; 125  : 			{
; 126  : 				CvInfosSerializationHelper::WriteHashed(kStream, pkBuildingInfo);

	mov	edx, DWORD PTR _pkBuildingInfo$217131[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8

; 127  : 				kStream << m_BuildingAIWeights.GetWeight(iI);

	mov	DWORD PTR _elem$218270[ebp], 0
	mov	DWORD PTR _elem$218270[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _iI$217125[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$218270[ebp], ecx
	mov	DWORD PTR _elem$218270[ebp+4], edx
	mov	eax, DWORD PTR _elem$218270[ebp+4]
	mov	DWORD PTR $T218254[ebp], eax
	lea	ecx, DWORD PTR $T218254[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN1@Write
$LN2@Write:

; 130  : 			{
; 131  : 				kStream << (int)0;

	mov	DWORD PTR $T218255[ebp], 0
	lea	edx, DWORD PTR $T218255[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
$LN1@Write:

; 132  : 			}
; 133  : 		}

	jmp	$LN4@Write
$LN7@Write:

; 134  : 	}
; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvBuildingProductionAI@@QAEXAAVFDataStream@@@Z ENDP ; CvBuildingProductionAI::Write
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvBuildingProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvBuildingProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z:PROC	; CvBuildingEntry::GetFlavorValue
EXTRN	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z:PROC ; CvBuildingXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?AddFlavorWeights@CvBuildingProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
tv94 = -24						; size = 4
_this$ = -20						; size = 4
$T218292 = -16						; size = 4
_entry$217147 = -12					; size = 4
_iBuilding$217143 = -8					; size = 4
_pkBuildings$ = -4					; size = 4
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvBuildingProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvBuildingProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 140  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 141  : 	CvPlayer* pPlayer = m_pCity->GetPlayer();
; 142  : 	CvPlayerPolicies* pPlayerPolicies = NULL;
; 143  : 	if (pPlayer)
; 144  : 		pPlayerPolicies = pPlayer->GetPlayerPolicies();
; 145  : #endif
; 146  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 147  : 	const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(m_pCity->GetCityReligions()->GetReligiousMajority(), m_pCity->getOwner());
; 148  : #endif
; 149  : 	CvBuildingXMLEntries* pkBuildings = m_pCityBuildings->GetBuildings();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ ; CvCityBuildings::GetBuildings
	mov	DWORD PTR _pkBuildings$[ebp], eax

; 150  : 
; 151  : 	// Loop through all buildings
; 152  : #ifdef AUI_WARNING_FIXES
; 153  : 	for (uint iBuilding = 0; iBuilding < m_pCityBuildings->GetBuildings()->GetNumBuildings(); iBuilding++)
; 154  : #else
; 155  : 	for(int iBuilding = 0; iBuilding < m_pCityBuildings->GetBuildings()->GetNumBuildings(); iBuilding++)

	mov	DWORD PTR _iBuilding$217143[ebp], 0
	jmp	SHORT $LN4@AddFlavorW
$LN3@AddFlavorW:
	mov	ecx, DWORD PTR _iBuilding$217143[ebp]
	add	ecx, 1
	mov	DWORD PTR _iBuilding$217143[ebp], ecx
$LN4@AddFlavorW:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?GetBuildings@CvCityBuildings@@QBEPAVCvBuildingXMLEntries@@XZ ; CvCityBuildings::GetBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	DWORD PTR _iBuilding$217143[ebp], eax
	jge	SHORT $LN5@AddFlavorW

; 156  : #endif
; 157  : 	{
; 158  : 		CvBuildingEntry* entry = pkBuildings->GetEntry(iBuilding);

	mov	eax, DWORD PTR _iBuilding$217143[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkBuildings$[ebp]
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _entry$217147[ebp], eax

; 159  : 		if(entry)

	cmp	DWORD PTR _entry$217147[ebp], 0
	je	SHORT $LN1@AddFlavorW

; 160  : 		{
; 161  : 			// Set its weight by looking at building's weight for this flavor and using iWeight multiplier passed in
; 162  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BUILDING_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS) || defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF)
; 163  : 			int iFlavorValue = entry->GetFlavorValue(eFlavor);
; 164  : #endif
; 165  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 166  : 			if (pPlayerPolicies)
; 167  : 			{
; 168  : 				for (int iI = 0; iI < GC.getNumPolicyInfos(); iI++)
; 169  : 				{
; 170  : 					PolicyTypes ePolicy = static_cast<PolicyTypes>(iI);
; 171  : 					CvPolicyEntry* pPolicy = GC.getPolicyInfo(ePolicy);
; 172  : 					if (pPolicy && pPlayerPolicies->HasPolicy(ePolicy))
; 173  : 					{
; 174  : 						iFlavorValue += pPolicy->GetBuildingClassFlavorChanges(entry->GetBuildingClassType(), eFlavor);
; 175  : 					}
; 176  : 				}
; 177  : 			}
; 178  : #endif
; 179  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 180  : 			if (pReligion)
; 181  : 			{
; 182  : 				pReligion->m_Beliefs.GetBuildingClassFlavorChange(static_cast<BuildingClassTypes>(entry->GetBuildingClassType()), eFlavor);
; 183  : 			}
; 184  : #endif
; 185  : #ifdef AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF
; 186  : #ifdef AUI_WARNING_FIXES
; 187  : 			for (uint iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 188  : #else
; 189  : 			for (int iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 190  : #endif
; 191  : 			{
; 192  : 				int iNumFreeUnits = entry->GetNumFreeUnits(iI);
; 193  : 				if (iNumFreeUnits > 0)
; 194  : 				{
; 195  : 					iFlavorValue += iNumFreeUnits * m_pCity->GetCityStrategyAI()->GetUnitProductionAI()->GetWeight((UnitTypes)iI);
; 196  : 				}
; 197  : 			}
; 198  : #endif
; 199  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BUILDING_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS) || defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF)
; 200  : 			m_BuildingAIWeights.IncreaseWeight(iBuilding, iFlavorValue * iWeight);
; 201  : #else
; 202  : 			m_BuildingAIWeights.IncreaseWeight(iBuilding, entry->GetFlavorValue(eFlavor) * iWeight);

	mov	ecx, DWORD PTR _eFlavor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _entry$217147[ebp]
	call	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z ; CvBuildingEntry::GetFlavorValue
	imul	eax, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR $T218292[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _iBuilding$217143[ebp]
	lea	edx, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR tv94[ebp], edx
	mov	eax, DWORD PTR tv94[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR $T218292[ebp]
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@AddFlavorW:

; 203  : #endif
; 204  : 		}

	jmp	SHORT $LN3@AddFlavorW
$LN5@AddFlavorW:

; 205  : 	}
; 206  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddFlavorWeights@CvBuildingProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvBuildingProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z ; CvBuildingProductionAI::GetWeight
; Function compile flags: /Odtp
;	COMDAT ?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_elem$218303 = -8					; size = 8
_eBuilding$ = 8						; size = 4
?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z PROC ; CvBuildingProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 211  : #ifdef AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF
; 212  : 	CvBuildingXMLEntries* pkBuildings = m_pCityBuildings->GetBuildings();
; 213  : 	int iWeight = m_BuildingAIWeights.GetWeight(eBuilding);
; 214  : 	CvBuildingEntry* entry = pkBuildings->GetEntry(eBuilding);
; 215  : 	if (entry)
; 216  : 	{
; 217  : 		CvPlayer* pPlayer = m_pCity->GetPlayer();
; 218  : 		int iLoop = 0;
; 219  : 
; 220  : 		BuildingTypes eFreeBuildingThisCity = static_cast<BuildingTypes>(entry->GetFreeBuildingThisCity());
; 221  : 		if (eFreeBuildingThisCity != NO_BUILDING)
; 222  : 		{
; 223  : 			if (m_pCityBuildings->GetNumBuilding(eFreeBuildingThisCity) == 0)
; 224  : 				iWeight += m_BuildingAIWeights.GetWeight(eFreeBuildingThisCity);
; 225  : 		}
; 226  : 
; 227  : 		BuildingClassTypes eFreeBuildingClassAllCities = static_cast<BuildingClassTypes>(entry->GetFreeBuildingClass());
; 228  : 		if (eFreeBuildingClassAllCities != NO_BUILDINGCLASS)
; 229  : 		{
; 230  : 			BuildingTypes eFreeBuilding = static_cast<BuildingTypes>(m_pCity->getCivilizationInfo().getCivilizationBuildings(eFreeBuildingClassAllCities));
; 231  : 			for (CvCity* pLoopCity = pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = pPlayer->nextCity(&iLoop))
; 232  : 			{
; 233  : 				if (pLoopCity->GetCityBuildings()->GetNumBuilding(eFreeBuilding) == 0)
; 234  : 					iWeight += pLoopCity->GetCityStrategyAI()->GetBuildingProductionAI()->GetWeight(eFreeBuilding);
; 235  : 			}
; 236  : 		}
; 237  : 
; 238  : #ifdef AUI_WARNING_FIXES
; 239  : 		for (uint iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 240  : #else
; 241  : 		for (int iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 242  : #endif
; 243  : 		{
; 244  : 			int iNumFreeUnits = entry->GetNumFreeUnits(iI);
; 245  : 			if (iNumFreeUnits > 0)
; 246  : 			{
; 247  : 				iWeight += iNumFreeUnits * m_pCity->GetCityStrategyAI()->GetUnitProductionAI()->GetWeight((UnitTypes)iI);
; 248  : 			}
; 249  : 		}
; 250  : 
; 251  : 		if (entry->GetInstantMilitaryIncrease())
; 252  : 		{
; 253  : 			FFastVector<UnitTypes, true, c_eCiv5GameplayDLL> aExtraUnits;
; 254  : 			for (CvUnit* pLoopUnit = pPlayer->firstUnit(&iLoop); pLoopUnit != NULL; pLoopUnit = pPlayer->nextUnit(&iLoop))
; 255  : 			{
; 256  : 				if (pLoopUnit->getDomainType() == DOMAIN_LAND && pLoopUnit->IsCombatUnit())
; 257  : 				{
; 258  : 					UnitTypes eCurrentUnitType = pLoopUnit->getUnitType();
; 259  : 
; 260  : 					// check for duplicate unit
; 261  : 					bool bAddUnit = true;
; 262  : 					for (uint ui = 0; ui < aExtraUnits.size(); ui++)
; 263  : 					{
; 264  : 						if (aExtraUnits[ui] == eCurrentUnitType)
; 265  : 						{
; 266  : 							bAddUnit = false;
; 267  : 							break;
; 268  : 						}
; 269  : 					}
; 270  : 					if (bAddUnit)
; 271  : 					{
; 272  : 						aExtraUnits.push_back(eCurrentUnitType);
; 273  : 					}
; 274  : 				}
; 275  : 			}
; 276  : 			for (uint ui = 0; ui < aExtraUnits.size(); ui++)
; 277  : 			{
; 278  : 				iWeight += m_pCity->GetCityStrategyAI()->GetUnitProductionAI()->GetWeight(aExtraUnits[ui]);
; 279  : 			}
; 280  : 		}
; 281  : 	}
; 282  : 	return iWeight;
; 283  : #else
; 284  : 	return m_BuildingAIWeights.GetWeight(eBuilding);

	mov	DWORD PTR _elem$218303[ebp], 0
	mov	DWORD PTR _elem$218303[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _eBuilding$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$218303[ebp], eax
	mov	DWORD PTR _elem$218303[ebp+4], ecx
	mov	eax, DWORD PTR _elem$218303[ebp+4]

; 285  : #endif
; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z ENDP ; CvBuildingProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ ; CvBuildingProductionAI::LogPossibleBuilds
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>
PUBLIC	?RecommendBuilding@CvBuildingProductionAI@@QAE?AW4BuildingTypes@@XZ ; CvBuildingProductionAI::RecommendBuilding
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
; Function compile flags: /Odtp
;	COMDAT ?RecommendBuilding@CvBuildingProductionAI@@QAE?AW4BuildingTypes@@XZ
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T218446 = -84						; size = 4
$T218396 = -64						; size = 4
$T218392 = -60						; size = 4
$T218383 = -56						; size = 4
_weightedElem$218375 = -44				; size = 8
$T218357 = -36						; size = 4
$T218356 = -32						; size = 4
_elem$218350 = -28					; size = 8
$T218341 = -20						; size = 4
_i$218337 = -16						; size = 4
_iTurnsLeft$ = -12					; size = 4
_iWeight$ = -8						; size = 4
_iBldgLoop$ = -4					; size = 4
?RecommendBuilding@CvBuildingProductionAI@@QAE?AW4BuildingTypes@@XZ PROC ; CvBuildingProductionAI::RecommendBuilding, COMDAT
; _this$ = ecx

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 291  : #ifdef AUI_WARNING_FIXES
; 292  : 	uint iBldgLoop;
; 293  : #else
; 294  : 	int iBldgLoop;
; 295  : #endif
; 296  : 	int iWeight;
; 297  : 	int iTurnsLeft;
; 298  : 
; 299  : 	// Reset list of all the possible buildings
; 300  : 	m_Buildables.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1104				; 00000450H
	mov	DWORD PTR $T218341[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN17@RecommendB
	mov	DWORD PTR _i$218337[ebp], 0
	jmp	SHORT $LN15@RecommendB
$LN14@RecommendB:
	mov	edx, DWORD PTR _i$218337[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218337[ebp], edx
$LN15@RecommendB:
	mov	eax, DWORD PTR $T218341[ebp]
	mov	ecx, DWORD PTR _i$218337[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN17@RecommendB
	jmp	SHORT $LN14@RecommendB
$LN17@RecommendB:
	mov	edx, DWORD PTR $T218341[ebp]
	mov	DWORD PTR [edx+4], 0

; 301  : 
; 302  : 	// Loop through adding the available buildings
; 303  : 	for(iBldgLoop = 0; iBldgLoop < GC.GetGameBuildings()->GetNumBuildings(); iBldgLoop++)

	mov	DWORD PTR _iBldgLoop$[ebp], 0
	jmp	SHORT $LN6@RecommendB
$LN5@RecommendB:
	mov	eax, DWORD PTR _iBldgLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iBldgLoop$[ebp], eax
$LN6@RecommendB:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	DWORD PTR _iBldgLoop$[ebp], eax
	jge	$LN4@RecommendB

; 304  : 	{
; 305  : 		// Make sure this building can be built now
; 306  : 		if(m_pCity->canConstruct((BuildingTypes)iBldgLoop))

	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _iBldgLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	movzx	eax, al
	test	eax, eax
	je	$LN3@RecommendB

; 307  : 		{
; 308  : 			// Update weight based on turns to construct
; 309  : 			iTurnsLeft = m_pCity->getProductionTurnsLeft((BuildingTypes) iBldgLoop, 0);

	push	0
	mov	ecx, DWORD PTR _iBldgLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _iTurnsLeft$[ebp], eax

; 310  : 			iWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(m_BuildingAIWeights.GetWeight((BuildingTypes)iBldgLoop), iTurnsLeft);

	mov	eax, DWORD PTR _iBldgLoop$[ebp]
	mov	DWORD PTR $T218356[ebp], eax
	mov	DWORD PTR _elem$218350[ebp], 0
	mov	DWORD PTR _elem$218350[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR $T218356[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$218350[ebp], ecx
	mov	DWORD PTR _elem$218350[ebp+4], edx
	mov	eax, DWORD PTR _elem$218350[ebp+4]
	mov	DWORD PTR $T218357[ebp], eax
	mov	ecx, DWORD PTR _iTurnsLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218357[ebp]
	push	edx
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft
	add	esp, 8
	mov	DWORD PTR _iWeight$[ebp], eax

; 311  : 			m_Buildables.push_back(iBldgLoop, iWeight);

	mov	DWORD PTR _weightedElem$218375[ebp], 0
	mov	DWORD PTR _weightedElem$218375[ebp+4], 0
	mov	eax, DWORD PTR _iBldgLoop$[ebp]
	mov	DWORD PTR _weightedElem$218375[ebp], eax
	mov	ecx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR _weightedElem$218375[ebp+4], ecx
	lea	edx, DWORD PTR _weightedElem$218375[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1104				; 00000450H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back
$LN3@RecommendB:

; 312  : 		}
; 313  : 	}

	jmp	$LN5@RecommendB
$LN4@RecommendB:

; 314  : 
; 315  : 	// Sort items and grab the first one
; 316  : 	if(m_Buildables.size() > 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1108]
	mov	DWORD PTR $T218383[ebp], ecx
	cmp	DWORD PTR $T218383[ebp], 0
	jle	SHORT $LN2@RecommendB

; 317  : 	{
; 318  : 		m_Buildables.SortItems();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1104				; 00000450H
	mov	DWORD PTR $T218446[ebp], edx
	mov	eax, DWORD PTR $T218446[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR $T218446[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218392[ebp], ecx
	mov	edx, DWORD PTR $T218446[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T218396[ebp], eax
	mov	ecx, DWORD PTR $T218392[ebp]
	sub	ecx, DWORD PTR $T218396[ebp]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR $T218392[ebp]
	push	edx
	mov	eax, DWORD PTR $T218396[ebp]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 319  : 		LogPossibleBuilds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ ; CvBuildingProductionAI::LogPossibleBuilds

; 320  : 		return (BuildingTypes)m_Buildables.GetElement(0);

	xor	ecx, ecx
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1104]
	mov	eax, DWORD PTR [ecx+eax]
	jmp	SHORT $LN7@RecommendB

; 321  : 	}
; 322  : 
; 323  : 	// Unless we didn't find any
; 324  : 	else

	jmp	SHORT $LN7@RecommendB
$LN2@RecommendB:

; 325  : 	{
; 326  : 		return NO_BUILDING;

	or	eax, -1
$LN7@RecommendB:

; 327  : 	}
; 328  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RecommendBuilding@CvBuildingProductionAI@@QAE?AW4BuildingTypes@@XZ ENDP ; CvBuildingProductionAI::RecommendBuilding
_TEXT	ENDS
PUBLIC	??_C@_0BB@NEINKALG@Building?0?5?$CFs?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z:PROC ; CvCityStrategyAI::GetLogFileName
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0BB@NEINKALG@Building?0?5?$CFs?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BB@NEINKALG@Building?0?5?$CFs?0?5?$CFd?$AA@ DB 'Building, %s, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$6
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$9
	DD	07H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$9
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvbuildingproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ
_TEXT	SEGMENT
tv264 = -408						; size = 4
tv251 = -404						; size = 4
tv287 = -400						; size = 4
tv249 = -396						; size = 4
tv308 = -392						; size = 4
tv247 = -388						; size = 4
tv332 = -384						; size = 4
tv87 = -380						; size = 4
tv92 = -376						; size = 4
tv266 = -372						; size = 4
_this$ = -368						; size = 4
$T218560 = -364						; size = 4
$T218556 = -360						; size = 4
$T218548 = -356						; size = 4
_elem$218542 = -352					; size = 8
$T218529 = -344						; size = 4
$T218516 = -340						; size = 4
$T218511 = -336						; size = 4
$T218499 = -332						; size = 4
$T218498 = -328						; size = 4
$T218494 = -324						; size = 4
$T218485 = -320						; size = 4
$T218481 = -316						; size = 4
$T218462 = -312						; size = 28
$T218461 = -284						; size = 28
$T218460 = -256						; size = 28
$T218459 = -228						; size = 28
$T218458 = -200						; size = 28
_strOutBuf$217194 = -172				; size = 28
_strTemp$217192 = -144					; size = 28
_pBuildingEntry$217190 = -116				; size = 4
_iI$217186 = -112					; size = 4
_playerName$217173 = -108				; size = 28
_cityName$217174 = -80					; size = 28
_pGameBuildings$217184 = -52				; size = 4
_pLog$217176 = -48					; size = 4
_strBaseString$217178 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ PROC	; CvBuildingProductionAI::LogPossibleBuilds, COMDAT
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 396				; 0000018cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN7@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@LogPossibl

; 334  : 	{
; 335  : 		// Find the name of this civ and city
; 336  : 		CvString playerName = GET_PLAYER(m_pCity->getOwner()).getCivilizationShortDescription();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T218481[ebp], ecx
	mov	edx, DWORD PTR $T218481[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T218485[ebp], edx
	mov	ecx, DWORD PTR $T218485[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T218494[ebp], eax
	cmp	DWORD PTR $T218494[ebp], 0
	je	SHORT $LN27@LogPossibl
	mov	eax, DWORD PTR $T218494[ebp]
	mov	DWORD PTR tv266[ebp], eax
	jmp	SHORT $LN28@LogPossibl
$LN27@LogPossibl:
	mov	DWORD PTR tv266[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN28@LogPossibl:
	mov	ecx, DWORD PTR tv266[ebp]
	push	ecx
	lea	ecx, DWORD PTR _playerName$217173[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 337  : 		CvString cityName = m_pCity->getName();

	lea	edx, DWORD PTR _cityName$217174[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 338  : 
; 339  : 		// Open the log file
; 340  : 		FILogFile* pLog = LOGFILEMGR.GetLog(m_pCity->GetCityStrategyAI()->GetLogFileName(playerName, cityName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv92[ebp], eax
	lea	ecx, DWORD PTR _cityName$217174[ebp]
	push	ecx
	lea	edx, DWORD PTR _playerName$217173[ebp]
	push	edx
	lea	eax, DWORD PTR $T218458[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z ; CvCityStrategyAI::GetLogFileName
	mov	DWORD PTR tv87[ebp], eax
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T218498[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T218498[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T218499[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T218499[ebp]
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$217176[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T218458[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 341  : 
; 342  : 		// Get the leading info for this line
; 343  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$217178[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 344  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T218511[ebp], ecx
	mov	ecx, DWORD PTR $T218511[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$217178[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 345  : 		strBaseString += playerName + ", " + cityName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$217173[ebp]
	push	eax
	lea	ecx, DWORD PTR $T218459[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv332[ebp], eax
	mov	edx, DWORD PTR tv332[ebp]
	mov	DWORD PTR tv247[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	eax, DWORD PTR _cityName$217174[ebp]
	push	eax
	mov	ecx, DWORD PTR tv247[ebp]
	push	ecx
	lea	edx, DWORD PTR $T218460[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv308[ebp], eax
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR tv249[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv249[ebp]
	push	ecx
	lea	edx, DWORD PTR $T218461[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv287[ebp], eax
	mov	eax, DWORD PTR tv287[ebp]
	mov	DWORD PTR tv251[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv251[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$217178[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T218461[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T218460[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T218459[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 346  : 
; 347  : 		// Dump out the weight of each buildable item
; 348  : 		CvBuildingXMLEntries* pGameBuildings = GC.GetGameBuildings();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	DWORD PTR _pGameBuildings$217184[ebp], eax

; 349  : 		if(pGameBuildings != NULL)

	cmp	DWORD PTR _pGameBuildings$217184[ebp], 0
	je	$LN5@LogPossibl

; 350  : 		{
; 351  : 			for(int iI = 0; iI < m_Buildables.size(); iI++)

	mov	DWORD PTR _iI$217186[ebp], 0
	jmp	SHORT $LN4@LogPossibl
$LN3@LogPossibl:
	mov	edx, DWORD PTR _iI$217186[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$217186[ebp], edx
$LN4@LogPossibl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1108]
	mov	DWORD PTR $T218516[ebp], ecx
	mov	edx, DWORD PTR _iI$217186[ebp]
	cmp	edx, DWORD PTR $T218516[ebp]
	jge	$LN5@LogPossibl

; 352  : 			{
; 353  : 				CvBuildingEntry* pBuildingEntry = pGameBuildings->GetEntry(m_Buildables.GetElement(iI));;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1104]
	mov	edx, DWORD PTR _iI$217186[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T218529[ebp], eax
	mov	ecx, DWORD PTR $T218529[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _pGameBuildings$217184[ebp]
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	DWORD PTR _pBuildingEntry$217190[ebp], eax

; 354  : 				if(pBuildingEntry != NULL)

	cmp	DWORD PTR _pBuildingEntry$217190[ebp], 0
	je	$LN1@LogPossibl

; 355  : 				{
; 356  : 					CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$217192[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7

; 357  : 					strTemp.Format("Building, %s, %d", pBuildingEntry->GetDescription(), m_Buildables.GetWeight(iI));

	mov	DWORD PTR _elem$218542[ebp], 0
	mov	DWORD PTR _elem$218542[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1104]
	mov	edx, DWORD PTR _iI$217186[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$218542[ebp], eax
	mov	DWORD PTR _elem$218542[ebp+4], ecx
	mov	edx, DWORD PTR _elem$218542[ebp+4]
	mov	DWORD PTR $T218548[ebp], edx
	mov	eax, DWORD PTR $T218548[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBuildingEntry$217190[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0BB@NEINKALG@Building?0?5?$CFs?0?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strTemp$217192[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 358  : 					CvString strOutBuf = strBaseString + strTemp;

	lea	edx, DWORD PTR _strTemp$217192[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$217178[ebp]
	push	eax
	lea	ecx, DWORD PTR $T218462[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv264[ebp], eax
	mov	edx, DWORD PTR tv264[ebp]
	mov	DWORD PTR $T218556[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR $T218556[ebp]
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$217194[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T218462[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 359  : 					pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$217194[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T218560[ebp], eax
	mov	ecx, DWORD PTR $T218560[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$217176[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$217176[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 360  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _strOutBuf$217194[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strTemp$217192[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@LogPossibl:

; 361  : 			}

	jmp	$LN3@LogPossibl
$LN5@LogPossibl:

; 362  : 		}
; 363  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strBaseString$217178[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cityName$217174[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _playerName$217173[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@LogPossibl:

; 364  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _playerName$217173[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR _cityName$217174[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T218458[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _strBaseString$217178[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR $T218459[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR $T218460[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$6:
	lea	ecx, DWORD PTR $T218461[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$7:
	lea	ecx, DWORD PTR _strTemp$217192[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T218462[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ$9:
	lea	ecx, DWORD PTR _strOutBuf$217194[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleBuilds@CvBuildingProductionAI@@QAEXXZ ENDP	; CvBuildingProductionAI::LogPossibleBuilds
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ PROC		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ ENDP		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T218629 = -20						; size = 4
_pRet$218625 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 135			; 00000087H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218629[ebp], edx
	cmp	DWORD PTR $T218629[ebp], 135		; 00000087H
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T218629[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218625[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T218629[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$218625[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 135			; 00000087H
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$218625[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T218660 = -24						; size = 4
$T218659 = -20						; size = 4
_i$218654 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218660[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T218659[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$218654[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$218654[ebp]
	add	eax, 1
	mov	DWORD PTR _i$218654[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$218654[ebp]
	cmp	ecx, DWORD PTR $T218660[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T218659[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T218659[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T218673 = -8						; size = 4
$T218672 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1092], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218673[ebp], ecx
	cmp	DWORD PTR $T218673[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T218673[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T218673[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T218673[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T218672[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T218767 = -44						; size = 4
$T218766 = -40						; size = 4
_i$218761 = -36						; size = 4
$T218745 = -32						; size = 4
$T218738 = -28						; size = 4
_pRet$218734 = -24					; size = 4
$T218728 = -20						; size = 4
$T218727 = -16						; size = 4
_i$217264 = -12						; size = 4
_uiNewSize$217256 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$217256[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$217256[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$217256[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218738[ebp], ecx
	cmp	DWORD PTR $T218738[ebp], 135		; 00000087H
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T218738[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218734[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T218738[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$218734[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 135			; 00000087H
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$218734[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$217264[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$217264[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217264[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$217264[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$217264[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T218728[ebp], ecx
	cmp	DWORD PTR $T218728[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$217264[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218745[ebp], edx
	mov	eax, DWORD PTR $T218728[ebp]
	mov	ecx, DWORD PTR $T218745[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T218728[ebp]
	mov	ecx, DWORD PTR $T218745[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T218728[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T218727[ebp], ecx
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218767[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T218766[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize
	mov	DWORD PTR _i$218761[ebp], 0
	jmp	SHORT $LN29@GrowSize
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$218761[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218761[ebp], edx
$LN29@GrowSize:
	mov	eax, DWORD PTR _i$218761[ebp]
	cmp	eax, DWORD PTR $T218767[ebp]
	jae	SHORT $LN24@GrowSize
	jmp	SHORT $LN28@GrowSize
$LN24@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T218766[ebp], ecx
	je	SHORT $LN25@GrowSize
	mov	edx, DWORD PTR $T218766[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1092], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
_TEXT	ENDS
;	COMDAT ??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_str$ = 8						; size = 4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z PROC ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	assert( nLENGTH > 0 );
; 60   : 	m_kStringData.m_bLocked = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+8], ax

; 61   : 	m_kStringData.m_bFixed = 1;

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+10], dx

; 62   : 	m_kStringData.m_iAllocLength = nLENGTH;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 64			; 00000040H

; 63   : 	m_kStringData.m_iDataLength = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 64   : 	m_szStringBuffer[ 0 ] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 65   : 	str.SetFixedBuffer( &m_kStringData );

	cmp	DWORD PTR _this$[ebp], 0
	jne	SHORT $LN3@FStringAFi
	jmp	SHORT $LN1@FStringAFi
$LN3@FStringAFi:
	mov	ecx, DWORD PTR _str$[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@FStringAFi:

; 66   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ENDP ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,135,1>::WeightedElement *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z
_TEXT	SEGMENT
$T218928 = -128						; size = 4
__Mid$217350 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$217350[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$217350[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$217350[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$217350[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$217350[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$217350[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$217350[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T218928[ebp], edx
	jmp	SHORT $LN92@Sort
$LN91@Sort:
	mov	eax, DWORD PTR $T218928[ebp]
	sub	eax, 8
	mov	DWORD PTR $T218928[ebp], eax
$LN92@Sort:
	mov	ecx, DWORD PTR $T218928[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort
	mov	edx, DWORD PTR $T218928[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort
	push	0
	mov	eax, DWORD PTR $T218928[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort:
	jmp	SHORT $LN91@Sort
$LN88@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,135,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Median<CvWeightedVector<int,135,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0@Z
_TEXT	SEGMENT
$T219171 = -124						; size = 4
__Tmp$219169 = -120					; size = 8
$T219151 = -112						; size = 4
$T219150 = -108						; size = 4
__Tmp$219144 = -104					; size = 8
$T219130 = -96						; size = 4
__Tmp$219126 = -92					; size = 8
$T219110 = -84						; size = 4
$T219109 = -80						; size = 4
__Tmp$219105 = -76					; size = 8
$T219089 = -68						; size = 4
$T219088 = -64						; size = 4
__Tmp$219084 = -60					; size = 8
$T219065 = -52						; size = 4
$T219064 = -48						; size = 4
__Tmp$219060 = -44					; size = 8
$T219038 = -36						; size = 4
__Tmp$219034 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,135,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Median<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_
	jmp	SHORT $LN17@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T219038[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T219038[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_
	mov	ecx, DWORD PTR $T219038[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219034[ebp], edx
	mov	eax, DWORD PTR $T219038[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$219034[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T219038[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$219034[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$219034[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_
	jmp	SHORT $LN10@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T219065[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T219064[ebp], edx
	mov	eax, DWORD PTR $T219064[ebp]
	cmp	eax, DWORD PTR $T219065[ebp]
	je	SHORT $LN10@Unguarded_
	mov	ecx, DWORD PTR $T219064[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219060[ebp], edx
	mov	eax, DWORD PTR $T219064[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$219060[ebp+4], ecx
	mov	edx, DWORD PTR $T219065[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T219064[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T219065[ebp]
	mov	ecx, DWORD PTR __Tmp$219060[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$219060[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_
$LN12@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T219089[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T219088[ebp], eax
	mov	ecx, DWORD PTR $T219088[ebp]
	cmp	ecx, DWORD PTR $T219089[ebp]
	je	SHORT $LN5@Unguarded_
	mov	edx, DWORD PTR $T219088[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219084[ebp], eax
	mov	ecx, DWORD PTR $T219088[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$219084[ebp+4], edx
	mov	eax, DWORD PTR $T219089[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T219088[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T219089[ebp]
	mov	edx, DWORD PTR __Tmp$219084[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$219084[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T219110[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T219109[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T219109[ebp]
	cmp	eax, DWORD PTR $T219110[ebp]
	je	SHORT $LN73@Unguarded_
	mov	ecx, DWORD PTR $T219109[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219105[ebp], edx
	mov	eax, DWORD PTR $T219109[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$219105[ebp+4], ecx
	mov	edx, DWORD PTR $T219110[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T219109[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T219110[ebp]
	mov	ecx, DWORD PTR __Tmp$219105[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$219105[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN6@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T219130[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T219130[ebp]
	je	SHORT $LN2@Unguarded_
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$219126[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$219126[ebp+4], eax
	mov	ecx, DWORD PTR $T219130[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T219130[ebp]
	mov	eax, DWORD PTR __Tmp$219126[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$219126[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T219151[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T219150[ebp], ecx
	mov	edx, DWORD PTR $T219150[ebp]
	cmp	edx, DWORD PTR $T219151[ebp]
	je	SHORT $LN87@Unguarded_
	mov	eax, DWORD PTR $T219150[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$219144[ebp], ecx
	mov	edx, DWORD PTR $T219150[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$219144[ebp+4], eax
	mov	ecx, DWORD PTR $T219151[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T219150[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T219151[ebp]
	mov	eax, DWORD PTR __Tmp$219144[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$219144[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T219171[ebp], eax
	mov	ecx, DWORD PTR $T219171[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_
	mov	edx, DWORD PTR $T219171[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219169[ebp], eax
	mov	ecx, DWORD PTR $T219171[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$219169[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T219171[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$219169[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$219169[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:

; 3076 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,135,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z
_TEXT	SEGMENT
__Step$217494 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,135,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$217494[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$217494[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$217494[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$217494[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$217494[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$217494[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$217494[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$217494[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$217494[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,135,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0PAH0@Z
_TEXT	SEGMENT
$T219484 = -20						; size = 4
$T219483 = -16						; size = 4
__Hole$217512 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$217512[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$217512[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$217512[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$217512[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$217512[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T219484[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T219483[ebp], esp
	mov	edx, DWORD PTR $T219483[ebp]
	mov	eax, DWORD PTR $T219484[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T219483[ebp]
	mov	eax, DWORD PTR $T219484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$217512[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z
_TEXT	SEGMENT
$T219554 = -52						; size = 4
$T219553 = -48						; size = 4
$T219537 = -42						; size = 1
$T219536 = -41						; size = 1
$T219535 = -40						; size = 4
$T219534 = -36						; size = 4
$T219533 = -32						; size = 4
__Cat$219544 = -24					; size = 1
$T219541 = -23						; size = 1
$T219540 = -22						; size = 1
$T219539 = -21						; size = 1
__First1$217553 = -20					; size = 4
__Val$217543 = -16					; size = 8
__Next1$217542 = -8					; size = 4
__Next$217538 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$217538[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$217538[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$217538[ebp], edx
	mov	eax, DWORD PTR __Next$217538[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$217538[ebp]
	mov	DWORD PTR __Next1$217542[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$217538[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$217543[ebp], eax
	mov	ecx, DWORD PTR __Next$217538[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$217543[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$217543[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$217542[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$217542[ebp], ecx
	mov	edx, DWORD PTR __Next1$217542[ebp]
	mov	DWORD PTR $T219554[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T219553[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T219539[ebp], cl
	mov	dl, BYTE PTR __Cat$219544[ebp]
	mov	BYTE PTR $T219540[ebp], dl
	mov	al, BYTE PTR $T219539[ebp]
	mov	BYTE PTR $T219537[ebp], al
	mov	cl, BYTE PTR $T219541[ebp]
	mov	BYTE PTR $T219536[ebp], cl
	mov	edx, DWORD PTR $T219554[ebp]
	mov	DWORD PTR $T219535[ebp], edx
	mov	eax, DWORD PTR __Next$217538[ebp]
	mov	DWORD PTR $T219534[ebp], eax
	mov	ecx, DWORD PTR $T219553[ebp]
	mov	DWORD PTR $T219533[ebp], ecx
$LN22@Insertion_:
	mov	edx, DWORD PTR $T219533[ebp]
	cmp	edx, DWORD PTR $T219534[ebp]
	je	SHORT $LN15@Insertion_
	mov	eax, DWORD PTR $T219534[ebp]
	sub	eax, 8
	mov	DWORD PTR $T219534[ebp], eax
	mov	ecx, DWORD PTR $T219535[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T219535[ebp], ecx
	mov	edx, DWORD PTR $T219534[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T219535[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_
$LN15@Insertion_:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$217543[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$217543[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$217542[ebp]
	mov	DWORD PTR __First1$217553[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$217553[ebp]
	mov	DWORD PTR __Next1$217542[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$217553[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$217553[ebp], edx
	mov	eax, DWORD PTR __First1$217553[ebp]
	mov	ecx, DWORD PTR __Val$217543[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$217553[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$217542[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$217542[ebp]
	mov	eax, DWORD PTR __Val$217543[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$217543[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z
_TEXT	SEGMENT
__Tmp$219625 = -24					; size = 8
__Tmp$219603 = -16					; size = 8
__Tmp$219581 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$219581[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$219581[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$219581[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$219581[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219603[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$219603[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$219603[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$219603[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219625[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$219625[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$219625[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$219625[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,135,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z
_TEXT	SEGMENT
$T219649 = -32						; size = 4
$T219648 = -28						; size = 8
__Idx$219644 = -20					; size = 4
$T219635 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T219648[ebp]
	mov	DWORD PTR $T219635[ebp], edx
	mov	eax, DWORD PTR $T219635[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T219635[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T219649[ebp], ecx
	mov	eax, DWORD PTR $T219649[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$219644[ebp], eax
	jmp	SHORT $LN14@Adjust_hea
$LN13@Adjust_hea:
	mov	eax, DWORD PTR $T219649[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$219644[ebp], eax
$LN14@Adjust_hea:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T219649[ebp]
	jge	SHORT $LN12@Adjust_hea
	mov	eax, DWORD PTR __Idx$219644[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T219648[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea
	mov	edx, DWORD PTR __Idx$219644[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T219649[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$219644[ebp]
	mov	DWORD PTR $T219649[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea
$LN12@Adjust_hea:
	mov	edx, DWORD PTR $T219649[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T219648[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T219648[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z
_TEXT	SEGMENT
$T219695 = -60						; size = 8
$T219666 = -20						; size = 4
$T219660 = -12						; size = 4
$T219659 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T219660[ebp], eax
	lea	ecx, DWORD PTR $T219695[ebp]
	mov	DWORD PTR $T219659[ebp], ecx
	mov	edx, DWORD PTR $T219659[ebp]
	mov	eax, DWORD PTR $T219660[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T219659[ebp]
	mov	eax, DWORD PTR $T219660[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T219666[ebp], esp
	mov	eax, DWORD PTR $T219666[ebp]
	mov	ecx, DWORD PTR $T219695[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T219666[ebp]
	mov	eax, DWORD PTR $T219695[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,135,1>::WeightedElement *,int,CvWeightedVector<int,135,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,135,1>::WeightedElement *,CvWeightedVector<int,135,1>::WeightedElement>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstringa.inl
_TEXT	ENDS
;	COMDAT ??1FStringA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1FStringA@@QAE@XZ PROC				; FStringA::~FStringA, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@FStringA@@QAEXXZ		; FStringA::Release

; 153  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1FStringA@@QAE@XZ ENDP				; FStringA::~FStringA
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ?Release@FStringA@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T219734 = -12						; size = 4
$T219729 = -8						; size = 4
$T219728 = -4						; size = 4
?Release@FStringA@@QAEXXZ PROC				; FStringA::Release, COMDAT
; _this$ = ecx

; 1096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1097 : 	Release( GetData() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T219729[ebp], ecx
	je	SHORT $LN6@Release
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	DWORD PTR $T219729[ebp], eax
	je	SHORT $LN6@Release
	mov	edx, DWORD PTR $T219729[ebp]
	movzx	eax, WORD PTR [edx+10]
	test	eax, eax
	jne	SHORT $LN6@Release
	mov	ecx, DWORD PTR $T219729[ebp]
	mov	DWORD PTR $T219728[ebp], ecx
	mov	edx, DWORD PTR $T219728[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@Release:

; 1098 : 	m_pszString = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1099 : 	Init();

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	mov	DWORD PTR $T219734[ebp], eax
	mov	ecx, DWORD PTR $T219734[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 1100 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Release@FStringA@@QAEXXZ ENDP				; FStringA::Release
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T219769 = -2092					; size = 4
$T219768 = -2088					; size = 4
$T219767 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T219767[ebp], eax
	mov	ecx, DWORD PTR $T219767[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219768[ebp], eax
	mov	eax, DWORD PTR $T219768[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T219769[ebp], eax
	mov	ecx, DWORD PTR $T219769[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
END
