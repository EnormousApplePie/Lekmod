; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllCombatInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvCombatInfo1 DD 0da81a0dcH
	DW	030b3H
	DW	04773H
	DB	087H
	DB	086H
	DB	035H
	DB	0d4H
	DB	070H
	DB	0e0H
	DB	0efH
	DB	064H
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllCombatInfo@@6B@			; CvDllCombatInfo::`vftable'
PUBLIC	??_7ICvCombatInfo1@@6B@				; ICvCombatInfo1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z	; CvDllCombatInfo::CvDllCombatInfo
PUBLIC	?QueryInterface@CvDllCombatInfo@@UAGPAXU_GUID@@@Z ; CvDllCombatInfo::QueryInterface
PUBLIC	?Destroy@CvDllCombatInfo@@EAGXXZ		; CvDllCombatInfo::Destroy
PUBLIC	?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z ; CvDllCombatInfo::GetUnit
PUBLIC	?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z ; CvDllCombatInfo::GetCity
PUBLIC	?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ	; CvDllCombatInfo::GetPlot
PUBLIC	?GetAttackerAdvances@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetAttackerAdvances
PUBLIC	?GetVisualizeCombat@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetVisualizeCombat
PUBLIC	?GetDefenderRetaliates@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetDefenderRetaliates
PUBLIC	?GetNuclearDamageLevel@CvDllCombatInfo@@UBGHXZ	; CvDllCombatInfo::GetNuclearDamageLevel
PUBLIC	?GetAttackIsRanged@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetAttackIsRanged
PUBLIC	?GetAttackIsBombingMission@CvDllCombatInfo@@UBG_NXZ ; CvDllCombatInfo::GetAttackIsBombingMission
PUBLIC	?GetAttackIsAirSweep@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetAttackIsAirSweep
PUBLIC	?GetDefenderCaptured@CvDllCombatInfo@@UBG_NXZ	; CvDllCombatInfo::GetDefenderCaptured
PUBLIC	?GetDamageInflicted@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z ; CvDllCombatInfo::GetDamageInflicted
PUBLIC	?GetFinalDamage@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z ; CvDllCombatInfo::GetFinalDamage
PUBLIC	?GetDamageMember@CvDllCombatInfo@@UBGPBUCvCombatMemberEntry@@H@Z ; CvDllCombatInfo::GetDamageMember
PUBLIC	?GetDamageMemberCount@CvDllCombatInfo@@UBGHXZ	; CvDllCombatInfo::GetDamageMemberCount
PUBLIC	?GetMaxDamageMemberCount@CvDllCombatInfo@@UBGHXZ ; CvDllCombatInfo::GetMaxDamageMemberCount
PUBLIC	?TEMPGetRawCombatInfo@CvDllCombatInfo@@UBGPAXXZ	; CvDllCombatInfo::TEMPGetRawCombatInfo
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllCombatInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcombatinfo.cpp
CONST	SEGMENT
??_7CvDllCombatInfo@@6B@ DD FLAT:?QueryInterface@CvDllCombatInfo@@UAGPAXU_GUID@@@Z ; CvDllCombatInfo::`vftable'
	DD	FLAT:?Destroy@CvDllCombatInfo@@EAGXXZ
	DD	FLAT:?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z
	DD	FLAT:?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z
	DD	FLAT:?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ
	DD	FLAT:?GetAttackerAdvances@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetVisualizeCombat@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetDefenderRetaliates@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetNuclearDamageLevel@CvDllCombatInfo@@UBGHXZ
	DD	FLAT:?GetAttackIsRanged@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetAttackIsBombingMission@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetAttackIsAirSweep@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetDefenderCaptured@CvDllCombatInfo@@UBG_NXZ
	DD	FLAT:?GetDamageInflicted@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z
	DD	FLAT:?GetFinalDamage@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z
	DD	FLAT:?GetDamageMember@CvDllCombatInfo@@UBGPBUCvCombatMemberEntry@@H@Z
	DD	FLAT:?GetDamageMemberCount@CvDllCombatInfo@@UBGHXZ
	DD	FLAT:?GetMaxDamageMemberCount@CvDllCombatInfo@@UBGHXZ
	DD	FLAT:?TEMPGetRawCombatInfo@CvDllCombatInfo@@UBGPAXXZ
CONST	ENDS
;	COMDAT ??_7ICvCombatInfo1@@6B@
CONST	SEGMENT
??_7ICvCombatInfo1@@6B@ DD FLAT:__purecall		; ICvCombatInfo1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pCombatInfo$ = 8					; size = 4
??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z PROC	; CvDllCombatInfo::CvDllCombatInfo, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvCombatInfo1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllCombatInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pCombatInfo$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllCombatInfo@@QAE@PAVCvCombatInfo@@@Z ENDP	; CvDllCombatInfo::CvDllCombatInfo
_TEXT	ENDS
PUBLIC	??1CvDllCombatInfo@@QAE@XZ			; CvDllCombatInfo::~CvDllCombatInfo
; Function compile flags: /Odtp
;	COMDAT ??1CvDllCombatInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllCombatInfo@@QAE@XZ PROC				; CvDllCombatInfo::~CvDllCombatInfo, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllCombatInfo@@6B@

; 27   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllCombatInfo@@QAE@XZ ENDP				; CvDllCombatInfo::~CvDllCombatInfo
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllCombatInfo@@QAEIXZ	; CvDllCombatInfo::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllCombatInfo@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T218315 = -72						; size = 16
$T218314 = -56						; size = 16
$T218313 = -40						; size = 16
$T218312 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllCombatInfo@@UAGPAXU_GUID@@@Z PROC	; CvDllCombatInfo::QueryInterface, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 31   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 32   : 	        guidInterface == ICvCombatInfo1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T218313[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T218313[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T218313[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T218313[ebp+12], eax
	mov	ecx, DWORD PTR $T218313[ebp]
	mov	DWORD PTR $T218312[ebp], ecx
	mov	edx, DWORD PTR $T218313[ebp+4]
	mov	DWORD PTR $T218312[ebp+4], edx
	mov	eax, DWORD PTR $T218313[ebp+8]
	mov	DWORD PTR $T218312[ebp+8], eax
	mov	ecx, DWORD PTR $T218313[ebp+12]
	mov	DWORD PTR $T218312[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218312[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvCombatInfo1
	mov	DWORD PTR $T218315[ebp], eax
	mov	ecx, DWORD PTR _guidICvCombatInfo1+4
	mov	DWORD PTR $T218315[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvCombatInfo1+8
	mov	DWORD PTR $T218315[ebp+8], edx
	mov	eax, DWORD PTR _guidICvCombatInfo1+12
	mov	DWORD PTR $T218315[ebp+12], eax
	mov	ecx, DWORD PTR $T218315[ebp]
	mov	DWORD PTR $T218314[ebp], ecx
	mov	edx, DWORD PTR $T218315[ebp+4]
	mov	DWORD PTR $T218314[ebp+4], edx
	mov	eax, DWORD PTR $T218315[ebp+8]
	mov	DWORD PTR $T218314[ebp+8], eax
	mov	ecx, DWORD PTR $T218315[ebp+12]
	mov	DWORD PTR $T218314[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218314[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 33   : 	{
; 34   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllCombatInfo@@QAEIXZ ; CvDllCombatInfo::IncrementReference

; 35   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 36   : 	}
; 37   : 
; 38   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 39   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllCombatInfo@@UAGPAXU_GUID@@@Z ENDP	; CvDllCombatInfo::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllCombatInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllCombatInfo@@QAEIXZ PROC	; CvDllCombatInfo::IncrementReference, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 44   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllCombatInfo@@QAEIXZ ENDP	; CvDllCombatInfo::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllCombatInfo@@SAXPAX@Z			; CvDllCombatInfo::operator delete
PUBLIC	?DecrementReference@CvDllCombatInfo@@QAEIXZ	; CvDllCombatInfo::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllCombatInfo@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T218347 = -8						; size = 4
$T218346 = -4						; size = 4
?DecrementReference@CvDllCombatInfo@@QAEIXZ PROC	; CvDllCombatInfo::DecrementReference, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 50   : 	{
; 51   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T218347[ebp], ecx
	mov	edx, DWORD PTR $T218347[ebp]
	mov	DWORD PTR $T218346[ebp], edx
	cmp	DWORD PTR $T218346[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T218346[ebp]
	call	??1CvDllCombatInfo@@QAE@XZ		; CvDllCombatInfo::~CvDllCombatInfo
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T218346[ebp]
	push	ecx
	call	??3CvDllCombatInfo@@SAXPAX@Z		; CvDllCombatInfo::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T218346[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 52   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 53   : 	}
; 54   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 55   : 	{
; 56   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 57   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 58   : 	}
; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllCombatInfo@@QAEIXZ ENDP	; CvDllCombatInfo::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllCombatInfo@@QAEIXZ	; CvDllCombatInfo::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllCombatInfo@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllCombatInfo@@QAEIXZ PROC		; CvDllCombatInfo::GetReferenceCount, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 64   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllCombatInfo@@QAEIXZ ENDP		; CvDllCombatInfo::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllCombatInfo@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllCombatInfo@@EAGXXZ PROC			; CvDllCombatInfo::Destroy, COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp

; 68   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllCombatInfo@@QAEIXZ ; CvDllCombatInfo::DecrementReference

; 69   : }

	pop	ebp
	ret	4
?Destroy@CvDllCombatInfo@@EAGXXZ ENDP			; CvDllCombatInfo::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllCombatInfo@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllCombatInfo@@SAXPAX@Z PROC			; CvDllCombatInfo::operator delete, COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp

; 73   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 74   : }

	pop	ebp
	ret	0
??3CvDllCombatInfo@@SAXPAX@Z ENDP			; CvDllCombatInfo::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllCombatInfo@@SAPAXI@Z			; CvDllCombatInfo::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllCombatInfo@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllCombatInfo@@SAPAXI@Z PROC			; CvDllCombatInfo::operator new, COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp

; 78   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 79   : }

	pop	ebp
	ret	0
??2CvDllCombatInfo@@SAPAXI@Z ENDP			; CvDllCombatInfo::operator new
_TEXT	ENDS
EXTRN	??3CvDllUnit@@SAXPAX@Z:PROC			; CvDllUnit::operator delete
EXTRN	??0CvDllUnit@@QAE@PAVCvUnit@@@Z:PROC		; CvDllUnit::CvDllUnit
EXTRN	??2CvDllUnit@@SAPAXI@Z:PROC			; CvDllUnit::operator new
EXTRN	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getUnit
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z$0
__ehfuncinfo$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
tv80 = -28						; size = 4
$T218365 = -24						; size = 4
$T218364 = -20						; size = 4
_pkUnit$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_unitType$ = 12						; size = 4
?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z PROC ; CvDllCombatInfo::GetUnit, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 83   : 	CvUnit* pkUnit = m_pCombatInfo->getUnit(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
	mov	DWORD PTR _pkUnit$[ebp], eax

; 84   : 	if(pkUnit)

	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	SHORT $LN2@GetUnit

; 85   : 	{
; 86   : 		return new CvDllUnit(pkUnit);

	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T218365[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218365[ebp], 0
	je	SHORT $LN5@GetUnit
	mov	edx, DWORD PTR _pkUnit$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T218365[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@GetUnit
$LN5@GetUnit:
	mov	DWORD PTR tv80[ebp], 0
$LN6@GetUnit:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T218364[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T218364[ebp]
	jmp	SHORT $LN3@GetUnit

; 87   : 	}
; 88   : 	else

	jmp	SHORT $LN3@GetUnit
$LN2@GetUnit:

; 89   : 	{
; 90   : 		return NULL;

	xor	eax, eax
$LN3@GetUnit:

; 91   : 	}
; 92   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z$0:
	mov	eax, DWORD PTR $T218365[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnit@CvDllCombatInfo@@UBGPAVICvUnit1@@W4BattleUnitTypes@@@Z ENDP ; CvDllCombatInfo::GetUnit
EXTRN	??3CvDllCity@@SAXPAX@Z:PROC			; CvDllCity::operator delete
EXTRN	??0CvDllCity@@QAE@PAVCvCity@@@Z:PROC		; CvDllCity::CvDllCity
EXTRN	??2CvDllCity@@SAPAXI@Z:PROC			; CvDllCity::operator new
EXTRN	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getCity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z$0
__ehfuncinfo$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
tv75 = -32						; size = 4
tv80 = -28						; size = 4
$T218383 = -24						; size = 4
$T218382 = -20						; size = 4
_pkCity$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_unitType$ = 12						; size = 4
?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z PROC ; CvDllCombatInfo::GetCity, COMDAT

; 95   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 96   : 	CvCity* pkCity = m_pCombatInfo->getCity(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
	mov	DWORD PTR _pkCity$[ebp], eax

; 97   : 	return (NULL != pkCity)? new CvDllCity(pkCity) : NULL;

	cmp	DWORD PTR _pkCity$[ebp], 0
	je	SHORT $LN5@GetCity
	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T218383[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218383[ebp], 0
	je	SHORT $LN3@GetCity
	mov	edx, DWORD PTR _pkCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T218383[ebp]
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@GetCity
$LN3@GetCity:
	mov	DWORD PTR tv80[ebp], 0
$LN4@GetCity:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T218382[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T218382[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN6@GetCity
$LN5@GetCity:
	mov	DWORD PTR tv75[ebp], 0
$LN6@GetCity:
	mov	eax, DWORD PTR tv75[ebp]

; 98   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z$0:
	mov	eax, DWORD PTR $T218383[ebp]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCity@CvDllCombatInfo@@UBGPAVICvCity1@@W4BattleUnitTypes@@@Z ENDP ; CvDllCombatInfo::GetCity
EXTRN	??3CvDllPlot@@SAXPAX@Z:PROC			; CvDllPlot::operator delete
EXTRN	??0CvDllPlot@@QAE@PAVCvPlot@@@Z:PROC		; CvDllPlot::CvDllPlot
EXTRN	??2CvDllPlot@@SAPAXI@Z:PROC			; CvDllPlot::operator new
EXTRN	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ:PROC	; CvCombatInfo::getPlot
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ$0
__ehfuncinfo$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T218398 = -24						; size = 4
$T218397 = -20						; size = 4
_pkPlot$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ PROC	; CvDllCombatInfo::GetPlot, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 102  : 	CvPlot* pkPlot = m_pCombatInfo->getPlot();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ	; CvCombatInfo::getPlot
	mov	DWORD PTR _pkPlot$[ebp], eax

; 103  : 	return (NULL != pkPlot)? new CvDllPlot(pkPlot) : NULL;

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN5@GetPlot
	push	12					; 0000000cH
	call	??2CvDllPlot@@SAPAXI@Z			; CvDllPlot::operator new
	add	esp, 4
	mov	DWORD PTR $T218398[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218398[ebp], 0
	je	SHORT $LN3@GetPlot
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T218398[ebp]
	call	??0CvDllPlot@@QAE@PAVCvPlot@@@Z		; CvDllPlot::CvDllPlot
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetPlot
$LN3@GetPlot:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetPlot:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T218397[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T218397[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetPlot
$LN5@GetPlot:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetPlot:
	mov	eax, DWORD PTR tv74[ebp]

; 104  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ$0:
	mov	eax, DWORD PTR $T218398[ebp]
	push	eax
	call	??3CvDllPlot@@SAXPAX@Z			; CvDllPlot::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlot@CvDllCombatInfo@@UBGPAVICvPlot1@@XZ ENDP	; CvDllCombatInfo::GetPlot
EXTRN	?getAttackerAdvances@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackerAdvances
; Function compile flags: /Odtp
;	COMDAT ?GetAttackerAdvances@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAttackerAdvances@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetAttackerAdvances, COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp

; 108  : 	return m_pCombatInfo->getAttackerAdvances();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAttackerAdvances@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackerAdvances

; 109  : }

	pop	ebp
	ret	4
?GetAttackerAdvances@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetAttackerAdvances
_TEXT	ENDS
EXTRN	?getVisualizeCombat@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getVisualizeCombat
; Function compile flags: /Odtp
;	COMDAT ?GetVisualizeCombat@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetVisualizeCombat@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetVisualizeCombat, COMDAT

; 112  : {

	push	ebp
	mov	ebp, esp

; 113  : 	return m_pCombatInfo->getVisualizeCombat();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getVisualizeCombat@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getVisualizeCombat

; 114  : }

	pop	ebp
	ret	4
?GetVisualizeCombat@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetVisualizeCombat
_TEXT	ENDS
EXTRN	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getDamageInflicted
; Function compile flags: /Odtp
;	COMDAT ?GetDamageInflicted@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_unitType$ = 12						; size = 4
?GetDamageInflicted@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z PROC ; CvDllCombatInfo::GetDamageInflicted, COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp

; 118  : 	return m_pCombatInfo->getDamageInflicted(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted

; 119  : }

	pop	ebp
	ret	8
?GetDamageInflicted@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z ENDP ; CvDllCombatInfo::GetDamageInflicted
_TEXT	ENDS
EXTRN	?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z:PROC ; CvCombatInfo::getFinalDamage
; Function compile flags: /Odtp
;	COMDAT ?GetFinalDamage@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_unitType$ = 12						; size = 4
?GetFinalDamage@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z PROC ; CvDllCombatInfo::GetFinalDamage, COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp

; 123  : 	return m_pCombatInfo->getFinalDamage(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getFinalDamage

; 124  : }

	pop	ebp
	ret	8
?GetFinalDamage@CvDllCombatInfo@@UBGHW4BattleUnitTypes@@@Z ENDP ; CvDllCombatInfo::GetFinalDamage
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?TEMPGetRawCombatInfo@CvDllCombatInfo@@UBGPAXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?TEMPGetRawCombatInfo@CvDllCombatInfo@@UBGPAXXZ PROC	; CvDllCombatInfo::TEMPGetRawCombatInfo, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp

; 128  : 	return m_pCombatInfo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 129  : }

	pop	ebp
	ret	4
?TEMPGetRawCombatInfo@CvDllCombatInfo@@UBGPAXXZ ENDP	; CvDllCombatInfo::TEMPGetRawCombatInfo
_TEXT	ENDS
EXTRN	?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ:PROC ; CvCombatInfo::getDamageMembers
EXTRN	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ:PROC ; CvCombatInfo::getMaxDamageMemberCount
; Function compile flags: /Odtp
;	COMDAT ?GetDamageMember@CvDllCombatInfo@@UBGPBUCvCombatMemberEntry@@H@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iIndex$ = 12						; size = 4
?GetDamageMember@CvDllCombatInfo@@UBGPBUCvCombatMemberEntry@@H@Z PROC ; CvDllCombatInfo::GetDamageMember, COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp

; 133  : 	if(iIndex < m_pCombatInfo->getMaxDamageMemberCount())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getMaxDamageMemberCount
	cmp	DWORD PTR _iIndex$[ebp], eax
	jge	SHORT $LN1@GetDamageM

; 134  : 		return &m_pCombatInfo->getDamageMembers()[iIndex];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ ; CvCombatInfo::getDamageMembers
	mov	edx, DWORD PTR _iIndex$[ebp]
	imul	edx, 36					; 00000024H
	add	eax, edx
	jmp	SHORT $LN2@GetDamageM
$LN1@GetDamageM:

; 135  : 	return NULL;

	xor	eax, eax
$LN2@GetDamageM:

; 136  : }

	pop	ebp
	ret	8
?GetDamageMember@CvDllCombatInfo@@UBGPBUCvCombatMemberEntry@@H@Z ENDP ; CvDllCombatInfo::GetDamageMember
_TEXT	ENDS
EXTRN	?getDamageMemberCount@CvCombatInfo@@QBEHXZ:PROC	; CvCombatInfo::getDamageMemberCount
; Function compile flags: /Odtp
;	COMDAT ?GetDamageMemberCount@CvDllCombatInfo@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetDamageMemberCount@CvDllCombatInfo@@UBGHXZ PROC	; CvDllCombatInfo::GetDamageMemberCount, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  : 	return m_pCombatInfo->getDamageMemberCount();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getDamageMemberCount@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getDamageMemberCount

; 141  : }

	pop	ebp
	ret	4
?GetDamageMemberCount@CvDllCombatInfo@@UBGHXZ ENDP	; CvDllCombatInfo::GetDamageMemberCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetMaxDamageMemberCount@CvDllCombatInfo@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetMaxDamageMemberCount@CvDllCombatInfo@@UBGHXZ PROC	; CvDllCombatInfo::GetMaxDamageMemberCount, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  : 	return m_pCombatInfo->getMaxDamageMemberCount();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getMaxDamageMemberCount

; 146  : }

	pop	ebp
	ret	4
?GetMaxDamageMemberCount@CvDllCombatInfo@@UBGHXZ ENDP	; CvDllCombatInfo::GetMaxDamageMemberCount
_TEXT	ENDS
EXTRN	?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ:PROC ; CvCombatInfo::getDefenderRetaliates
; Function compile flags: /Odtp
;	COMDAT ?GetDefenderRetaliates@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetDefenderRetaliates@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetDefenderRetaliates, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp

; 150  : 	return m_pCombatInfo->getDefenderRetaliates();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getDefenderRetaliates

; 151  : }

	pop	ebp
	ret	4
?GetDefenderRetaliates@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetDefenderRetaliates
_TEXT	ENDS
EXTRN	?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ:PROC ; CvCombatInfo::getAttackNuclearLevel
; Function compile flags: /Odtp
;	COMDAT ?GetNuclearDamageLevel@CvDllCombatInfo@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNuclearDamageLevel@CvDllCombatInfo@@UBGHXZ PROC	; CvDllCombatInfo::GetNuclearDamageLevel, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp

; 155  : 	return m_pCombatInfo->getAttackNuclearLevel();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ ; CvCombatInfo::getAttackNuclearLevel

; 156  : }

	pop	ebp
	ret	4
?GetNuclearDamageLevel@CvDllCombatInfo@@UBGHXZ ENDP	; CvDllCombatInfo::GetNuclearDamageLevel
_TEXT	ENDS
EXTRN	?getAttackIsRanged@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackIsRanged
; Function compile flags: /Odtp
;	COMDAT ?GetAttackIsRanged@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAttackIsRanged@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetAttackIsRanged, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp

; 160  : 	return m_pCombatInfo->getAttackIsRanged();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAttackIsRanged@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsRanged

; 161  : }

	pop	ebp
	ret	4
?GetAttackIsRanged@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetAttackIsRanged
_TEXT	ENDS
EXTRN	?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ:PROC ; CvCombatInfo::getAttackIsBombingMission
; Function compile flags: /Odtp
;	COMDAT ?GetAttackIsBombingMission@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAttackIsBombingMission@CvDllCombatInfo@@UBG_NXZ PROC ; CvDllCombatInfo::GetAttackIsBombingMission, COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp

; 165  : 	return m_pCombatInfo->getAttackIsBombingMission();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsBombingMission

; 166  : }

	pop	ebp
	ret	4
?GetAttackIsBombingMission@CvDllCombatInfo@@UBG_NXZ ENDP ; CvDllCombatInfo::GetAttackIsBombingMission
_TEXT	ENDS
EXTRN	?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getAttackIsAirSweep
; Function compile flags: /Odtp
;	COMDAT ?GetAttackIsAirSweep@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAttackIsAirSweep@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetAttackIsAirSweep, COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp

; 170  : 	return m_pCombatInfo->getAttackIsAirSweep();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsAirSweep

; 171  : }

	pop	ebp
	ret	4
?GetAttackIsAirSweep@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetAttackIsAirSweep
_TEXT	ENDS
EXTRN	?getDefenderCaptured@CvCombatInfo@@QBE_NXZ:PROC	; CvCombatInfo::getDefenderCaptured
; Function compile flags: /Odtp
;	COMDAT ?GetDefenderCaptured@CvDllCombatInfo@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetDefenderCaptured@CvDllCombatInfo@@UBG_NXZ PROC	; CvDllCombatInfo::GetDefenderCaptured, COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp

; 175  : 	return m_pCombatInfo->getDefenderCaptured();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getDefenderCaptured@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getDefenderCaptured

; 176  : }

	pop	ebp
	ret	4
?GetDefenderCaptured@CvDllCombatInfo@@UBG_NXZ ENDP	; CvDllCombatInfo::GetDefenderCaptured
_TEXT	ENDS
END
