; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvProcessProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z	; CvProcessProductionAI::CvProcessProductionAI
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z$0
__ehfuncinfo$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T217461 = -36						; size = 4
$T217444 = -24						; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z PROC	; CvProcessProductionAI::CvProcessProductionAI, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T217444[ebp], edx
	mov	ecx, DWORD PTR $T217444[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	DWORD PTR $T217461[ebp], eax
	mov	ecx, DWORD PTR $T217461[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>

; 19   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__ehhandler$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z ENDP	; CvProcessProductionAI::CvProcessProductionAI
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??1CvProcessProductionAI@@QAE@XZ		; CvProcessProductionAI::~CvProcessProductionAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvProcessProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvProcessProductionAI@@QAE@XZ$0
__ehfuncinfo$??1CvProcessProductionAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvProcessProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvProcessProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T217540 = -44						; size = 4
$T217508 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvProcessProductionAI@@QAE@XZ PROC			; CvProcessProductionAI::~CvProcessProductionAI, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvProcessProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 24   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	DWORD PTR $T217508[ebp], eax
	mov	ecx, DWORD PTR $T217508[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T217540[ebp], ecx
	mov	ecx, DWORD PTR $T217540[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvProcessProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__ehhandler$??1CvProcessProductionAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvProcessProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvProcessProductionAI@@QAE@XZ ENDP			; CvProcessProductionAI::~CvProcessProductionAI
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
PUBLIC	?Reset@CvProcessProductionAI@@QAEXXZ		; CvProcessProductionAI::Reset
EXTRN	?getNumProcessInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumProcessInfos
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvProcessProductionAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
_weightedElem$217617 = -20				; size = 8
$T217579 = -12						; size = 4
_i$217574 = -8						; size = 4
_i$217072 = -4						; size = 4
?Reset@CvProcessProductionAI@@QAEXXZ PROC		; CvProcessProductionAI::Reset, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	m_ProcessAIWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T217579[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN14@Reset
	mov	DWORD PTR _i$217574[ebp], 0
	jmp	SHORT $LN12@Reset
$LN11@Reset:
	mov	edx, DWORD PTR _i$217574[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217574[ebp], edx
$LN12@Reset:
	mov	eax, DWORD PTR $T217579[ebp]
	mov	ecx, DWORD PTR _i$217574[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN14@Reset
	jmp	SHORT $LN11@Reset
$LN14@Reset:
	mov	edx, DWORD PTR $T217579[ebp]
	mov	DWORD PTR [edx+4], 0

; 30   : 
; 31   : 	// Loop through reading each one and add an entry with 0 weight to our vector
; 32   : #ifdef AUI_WARNING_FIXES
; 33   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 34   : #else
; 35   : 	for (int i = 0; i < GC.getNumProcessInfos(); i++)

	mov	DWORD PTR _i$217072[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	eax, DWORD PTR _i$217072[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217072[ebp], eax
$LN3@Reset:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	DWORD PTR _i$217072[ebp], eax
	jge	SHORT $LN4@Reset

; 36   : #endif
; 37   : 	{
; 38   : 		m_ProcessAIWeights.push_back(i, 0);

	mov	DWORD PTR _weightedElem$217617[ebp], 0
	mov	DWORD PTR _weightedElem$217617[ebp+4], 0
	mov	ecx, DWORD PTR _i$217072[ebp]
	mov	DWORD PTR _weightedElem$217617[ebp], ecx
	mov	DWORD PTR _weightedElem$217617[ebp+4], 0
	lea	edx, DWORD PTR _weightedElem$217617[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back

; 39   : 	}

	jmp	SHORT $LN2@Reset
$LN4@Reset:

; 40   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvProcessProductionAI@@QAEXXZ ENDP		; CvProcessProductionAI::Reset
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
PUBLIC	?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z ; CvProcessProductionAI::Read
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T217700 = -48						; size = 4
$T217687 = -44						; size = 4
$T217668 = -40						; size = 4
$T217667 = -36						; size = 4
$T217656 = -32						; size = 4
_i$217651 = -28						; size = 4
_iType$217091 = -24					; size = 4
_i$217087 = -20						; size = 4
_i$217082 = -16						; size = 4
_uiVersion$ = -12					; size = 4
_iWeight$ = -8						; size = 4
_iNumProcess$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z PROC ; CvProcessProductionAI::Read, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	// Version number to maintain backwards compatibility
; 46   : 	uint uiVersion;
; 47   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 48   : 
; 49   : 	int iWeight;
; 50   : 
; 51   : 	// Reset vector
; 52   : 	m_ProcessAIWeights.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T217656[ebp], ecx
	xor	edx, edx
	je	SHORT $LN20@Read
	mov	DWORD PTR _i$217651[ebp], 0
	jmp	SHORT $LN18@Read
$LN17@Read:
	mov	eax, DWORD PTR _i$217651[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217651[ebp], eax
$LN18@Read:
	mov	ecx, DWORD PTR $T217656[ebp]
	mov	edx, DWORD PTR _i$217651[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN20@Read
	jmp	SHORT $LN17@Read
$LN20@Read:
	mov	eax, DWORD PTR $T217656[ebp]
	mov	DWORD PTR [eax+4], 0

; 53   : 	m_ProcessAIWeights.resize(GC.getNumProcessInfos());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	mov	DWORD PTR $T217668[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T217667[ebp], ecx
	mov	edx, DWORD PTR $T217667[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR $T217668[ebp]
	jae	SHORT $LN24@Read
	mov	ecx, DWORD PTR $T217668[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T217667[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN24@Read:
	mov	edx, DWORD PTR $T217667[ebp]
	mov	eax, DWORD PTR $T217668[ebp]
	mov	DWORD PTR [edx+4], eax

; 54   : #ifdef AUI_WARNING_FIXES
; 55   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 56   : #else
; 57   : 	for(int i = 0; i < GC.getNumProcessInfos(); ++i)

	mov	DWORD PTR _i$217082[ebp], 0
	jmp	SHORT $LN7@Read
$LN6@Read:
	mov	ecx, DWORD PTR _i$217082[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217082[ebp], ecx
$LN7@Read:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	DWORD PTR _i$217082[ebp], eax
	jge	SHORT $LN5@Read

; 58   : #endif
; 59   : 		m_ProcessAIWeights.SetWeight(i, 0);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$217082[ebp]
	mov	DWORD PTR [eax+ecx*8+4], 0
	jmp	SHORT $LN6@Read
$LN5@Read:

; 60   : 
; 61   : 	// Loop through reading each one and adding it to our vector
; 62   : 	int iNumProcess;
; 63   : 	kStream >> iNumProcess;

	lea	edx, DWORD PTR _iNumProcess$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 64   : 	for(int i = 0; i < iNumProcess; i++)

	mov	DWORD PTR _i$217087[ebp], 0
	jmp	SHORT $LN4@Read
$LN3@Read:
	mov	eax, DWORD PTR _i$217087[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217087[ebp], eax
$LN4@Read:
	mov	ecx, DWORD PTR _i$217087[ebp]
	cmp	ecx, DWORD PTR _iNumProcess$[ebp]
	jge	SHORT $LN8@Read

; 65   : 	{
; 66   : 		int iType = CvInfosSerializationHelper::ReadHashed(kStream);

	push	0
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$217091[ebp], eax

; 67   : 		kStream >> iWeight;

	lea	eax, DWORD PTR _iWeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 68   : 		if (iType >= 0 && iType < m_ProcessAIWeights.size())

	cmp	DWORD PTR _iType$217091[ebp], 0
	jl	SHORT $LN1@Read
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T217687[ebp], edx
	mov	eax, DWORD PTR _iType$217091[ebp]
	cmp	eax, DWORD PTR $T217687[ebp]
	jge	SHORT $LN1@Read

; 69   : 			m_ProcessAIWeights.SetWeight(iType, iWeight);

	mov	ecx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR $T217700[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _iType$217091[ebp]
	mov	edx, DWORD PTR $T217700[ebp]
	mov	DWORD PTR [eax+ecx*8+4], edx
$LN1@Read:
	jmp	SHORT $LN3@Read
$LN8@Read:

; 70   : 	}
; 71   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z ENDP ; CvProcessProductionAI::Read
_TEXT	ENDS
PUBLIC	?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z ; CvProcessProductionAI::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z:PROC ; CvGlobals::getProcessInfo
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
_elem$217719 = -24					; size = 8
$T217704 = -16						; size = 4
$T217703 = -12						; size = 4
_i$217099 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z PROC ; CvProcessProductionAI::Write, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	// Current version number
; 77   : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 78   : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 79   : 
; 80   : 	// Loop through writing each entry
; 81   : 	kStream << GC.getNumProcessInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	mov	DWORD PTR $T217703[ebp], eax
	lea	ecx, DWORD PTR $T217703[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 82   : #ifdef AUI_WARNING_FIXES
; 83   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 84   : #else
; 85   : 	for(int i = 0; i < GC.getNumProcessInfos(); i++)

	mov	DWORD PTR _i$217099[ebp], 0
	jmp	SHORT $LN3@Write
$LN2@Write:
	mov	edx, DWORD PTR _i$217099[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217099[ebp], edx
$LN3@Write:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	DWORD PTR _i$217099[ebp], eax
	jge	SHORT $LN4@Write

; 86   : #endif
; 87   : 	{
; 88   : 		CvInfosSerializationHelper::WriteHashed(kStream, GC.getProcessInfo((ProcessTypes)i));

	mov	eax, DWORD PTR _i$217099[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8

; 89   : 		kStream << m_ProcessAIWeights.GetWeight(i);

	mov	DWORD PTR _elem$217719[ebp], 0
	mov	DWORD PTR _elem$217719[ebp+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$217099[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$217719[ebp], edx
	mov	DWORD PTR _elem$217719[ebp+4], eax
	mov	ecx, DWORD PTR _elem$217719[ebp+4]
	mov	DWORD PTR $T217704[ebp], ecx
	lea	edx, DWORD PTR $T217704[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 90   : 	}

	jmp	SHORT $LN2@Write
$LN4@Write:

; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z ENDP ; CvProcessProductionAI::Write
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvProcessProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvProcessInfo@@QBEHH@Z:PROC	; CvProcessInfo::GetFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
tv88 = -20						; size = 4
_this$ = -16						; size = 4
$T217738 = -12						; size = 4
_entry$ = -8						; size = 4
_iProcess$ = -4						; size = 4
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvProcessProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 96   : #ifdef AUI_WARNING_FIXES
; 97   : 	uint iProcess;
; 98   : #else
; 99   : 	int iProcess;
; 100  : #endif
; 101  : 	CvProcessInfo* entry(NULL);

	mov	DWORD PTR _entry$[ebp], 0

; 102  : 
; 103  : 	// Loop through all projects
; 104  : 	for(iProcess = 0; iProcess < GC.getNumProcessInfos(); iProcess++)

	mov	DWORD PTR _iProcess$[ebp], 0
	jmp	SHORT $LN4@AddFlavorW
$LN3@AddFlavorW:
	mov	eax, DWORD PTR _iProcess$[ebp]
	add	eax, 1
	mov	DWORD PTR _iProcess$[ebp], eax
$LN4@AddFlavorW:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	DWORD PTR _iProcess$[ebp], eax
	jge	SHORT $LN5@AddFlavorW

; 105  : 	{
; 106  : 		entry = GC.getProcessInfo((ProcessTypes)iProcess);

	mov	ecx, DWORD PTR _iProcess$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo
	mov	DWORD PTR _entry$[ebp], eax

; 107  : 		if (entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@AddFlavorW

; 108  : 		{
; 109  : 			// Set its weight by looking at project's weight for this flavor and using iWeight multiplier passed in
; 110  : 			m_ProcessAIWeights.IncreaseWeight(iProcess, entry->GetFlavorValue(eFlavor) * iWeight);

	mov	edx, DWORD PTR _eFlavor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _entry$[ebp]
	call	?GetFlavorValue@CvProcessInfo@@QBEHH@Z	; CvProcessInfo::GetFlavorValue
	imul	eax, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR $T217738[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _iProcess$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR $T217738[ebp]
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax], edx
$LN1@AddFlavorW:

; 111  : 		}

	jmp	SHORT $LN3@AddFlavorW
$LN5@AddFlavorW:

; 112  : 	}
; 113  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvProcessProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z ; CvProcessProductionAI::GetWeight
; Function compile flags: /Odtp
;	COMDAT ?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_elem$217749 = -8					; size = 8
_eProject$ = 8						; size = 4
?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z PROC ; CvProcessProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	return m_ProcessAIWeights.GetWeight(eProject);

	mov	DWORD PTR _elem$217749[ebp], 0
	mov	DWORD PTR _elem$217749[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _eProject$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$217749[ebp], eax
	mov	DWORD PTR _elem$217749[ebp+4], ecx
	mov	eax, DWORD PTR _elem$217749[ebp+4]

; 119  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z ENDP ; CvProcessProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0BA@MAGMLGOL@Process?0?5?$CFs?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_07NBCGADJA@Unknown?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ ; CvProcessProductionAI::LogPossibleBuilds
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z:PROC ; CvCityStrategyAI::GetLogFileName
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0BA@MAGMLGOL@Process?0?5?$CFs?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BA@MAGMLGOL@Process?0?5?$CFs?0?5?$CFd?$AA@ DB 'Process, %s, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBCGADJA@Unknown?$AA@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown?$AA@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$8
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$11
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$12
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
_TEXT	SEGMENT
tv308 = -496						; size = 4
tv289 = -492						; size = 4
tv319 = -488						; size = 4
tv287 = -484						; size = 4
tv330 = -480						; size = 4
tv285 = -476						; size = 4
tv341 = -472						; size = 4
tv352 = -468						; size = 4
tv147 = -464						; size = 4
tv363 = -460						; size = 4
_this$ = -456						; size = 4
$T217955 = -452						; size = 4
$T217951 = -448						; size = 4
$T217944 = -444						; size = 4
_elem$217938 = -440					; size = 8
$T217929 = -432						; size = 4
$T217920 = -428						; size = 4
$T217907 = -424						; size = 4
$T217902 = -420						; size = 4
$T217866 = -416						; size = 4
$T217865 = -412						; size = 4
$T217857 = -408						; size = 4
$T217853 = -404						; size = 4
$T217847 = -400						; size = 4
$T217843 = -396						; size = 4
$T217765 = -392						; size = 28
$T217762 = -364						; size = 28
$T217761 = -336						; size = 28
$T217760 = -308						; size = 28
$T217759 = -280						; size = 28
$T217758 = -252						; size = 28
_pProcessInfo$217146 = -224				; size = 4
_iI$217142 = -220					; size = 4
_strOutBuf$217125 = -216				; size = 28
_playerName$217128 = -188				; size = 28
_cityName$217129 = -160					; size = 28
_strDesc$217130 = -132					; size = 28
_strLogName$217131 = -104				; size = 28
_pLog$217134 = -76					; size = 4
_strTemp$217127 = -72					; size = 28
_strBaseString$217126 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ PROC	; CvProcessProductionAI::LogPossibleBuilds, COMDAT
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 484				; 000001e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN7@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@LogPossibl

; 126  : 	{
; 127  : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 128  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 129  : 		CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$217127[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 130  : 		CvString playerName;

	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 131  : 		CvString cityName;

	lea	ecx, DWORD PTR _cityName$217129[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 132  : 		CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 133  : 		CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$217131[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 134  : 
; 135  : 		CvAssert(m_pCity);
; 136  : 		if(!m_pCity) return;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN68@LogPossibl
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$217131[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$217129[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$217127[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN7@LogPossibl

; 137  : 
; 138  : 		// Find the name of this civ and city
; 139  : 		playerName = GET_PLAYER(m_pCity->getOwner()).getCivilizationShortDescription();

$LN68@LogPossibl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T217843[ebp], edx
	mov	eax, DWORD PTR $T217843[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T217847[ebp], eax
	mov	ecx, DWORD PTR $T217847[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T217853[ebp], eax
	cmp	DWORD PTR $T217853[ebp], 0
	je	SHORT $LN73@LogPossibl
	mov	ecx, DWORD PTR $T217853[ebp]
	push	ecx
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN74@LogPossibl
$LN73@LogPossibl:
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN74@LogPossibl:

; 140  : 		cityName = m_pCity->getName();

	lea	edx, DWORD PTR $T217758[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv363[ebp], eax
	mov	ecx, DWORD PTR tv363[ebp]
	mov	DWORD PTR $T217857[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR $T217857[ebp]
	push	edx
	lea	ecx, DWORD PTR _cityName$217129[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217758[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 141  : 
; 142  : 		// Open the log file
; 143  : 		FILogFile* pLog;
; 144  : 		pLog = LOGFILEMGR.GetLog(m_pCity->GetCityStrategyAI()->GetLogFileName(playerName, cityName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv147[ebp], eax
	lea	eax, DWORD PTR _cityName$217129[ebp]
	push	eax
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217759[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z ; CvCityStrategyAI::GetLogFileName
	mov	DWORD PTR tv352[ebp], eax
	mov	ecx, DWORD PTR tv352[ebp]
	mov	DWORD PTR $T217865[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T217865[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217866[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T217866[ebp]
	push	edx
	mov	eax, DWORD PTR tv147[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$217134[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217759[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 145  : 		CvAssert(pLog);
; 146  : 		if(!pLog) return;

	cmp	DWORD PTR _pLog$217134[ebp], 0
	jne	SHORT $LN4@LogPossibl
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$217131[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$217129[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$217127[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN7@LogPossibl
$LN4@LogPossibl:

; 147  : 
; 148  : 		// Get the leading info for this line
; 149  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T217902[ebp], ecx
	mov	ecx, DWORD PTR $T217902[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$217126[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 150  : 		strBaseString += playerName + ", " + cityName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$217128[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217760[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv341[ebp], eax
	mov	edx, DWORD PTR tv341[ebp]
	mov	DWORD PTR tv285[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	eax, DWORD PTR _cityName$217129[ebp]
	push	eax
	mov	ecx, DWORD PTR tv285[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217761[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv330[ebp], eax
	mov	eax, DWORD PTR tv330[ebp]
	mov	DWORD PTR tv287[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv287[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217762[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv319[ebp], eax
	mov	eax, DWORD PTR tv319[ebp]
	mov	DWORD PTR tv289[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR tv289[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T217762[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T217761[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217760[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 151  : 
; 152  : 		// Dump out the weight of each buildable item
; 153  : 		for(int iI = 0; iI < m_Buildables.size(); iI++)

	mov	DWORD PTR _iI$217142[ebp], 0
	jmp	SHORT $LN3@LogPossibl
$LN2@LogPossibl:
	mov	edx, DWORD PTR _iI$217142[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$217142[ebp], edx
$LN3@LogPossibl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR $T217907[ebp], ecx
	mov	edx, DWORD PTR _iI$217142[ebp]
	cmp	edx, DWORD PTR $T217907[ebp]
	jge	$LN1@LogPossibl

; 154  : 		{
; 155  : 			CvProcessInfo* pProcessInfo = GC.getProcessInfo((ProcessTypes)m_Buildables.GetElement(iI));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _iI$217142[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T217920[ebp], eax
	mov	ecx, DWORD PTR $T217920[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo
	mov	DWORD PTR _pProcessInfo$217146[ebp], eax

; 156  : 			strDesc = (pProcessInfo != NULL)? pProcessInfo->GetDescription() : "Unknown";

	cmp	DWORD PTR _pProcessInfo$217146[ebp], 0
	je	SHORT $LN9@LogPossibl
	mov	ecx, DWORD PTR _pProcessInfo$217146[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217929[ebp], eax
	jmp	SHORT $LN10@LogPossibl
$LN9@LogPossibl:
	mov	DWORD PTR $T217929[ebp], OFFSET ??_C@_07NBCGADJA@Unknown?$AA@
$LN10@LogPossibl:
	cmp	DWORD PTR $T217929[ebp], 0
	je	SHORT $LN120@LogPossibl
	mov	eax, DWORD PTR $T217929[ebp]
	push	eax
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN121@LogPossibl
$LN120@LogPossibl:
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN121@LogPossibl:

; 157  : 			strTemp.Format("Process, %s, %d", strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	DWORD PTR _elem$217938[ebp], 0
	mov	DWORD PTR _elem$217938[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _iI$217142[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$217938[ebp], ecx
	mov	DWORD PTR _elem$217938[ebp+4], edx
	mov	eax, DWORD PTR _elem$217938[ebp+4]
	mov	DWORD PTR $T217944[ebp], eax
	mov	ecx, DWORD PTR $T217944[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0BA@MAGMLGOL@Process?0?5?$CFs?0?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTemp$217127[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 158  : 			strOutBuf = strBaseString + strTemp;

	lea	eax, DWORD PTR _strTemp$217127[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217765[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv308[ebp], eax
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR $T217951[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T217951[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217765[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 159  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T217955[ebp], eax
	mov	ecx, DWORD PTR $T217955[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$217134[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$217134[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 160  : 		}

	jmp	$LN2@LogPossibl
$LN1@LogPossibl:

; 161  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$217131[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$217129[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$217127[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@LogPossibl:

; 162  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strOutBuf$217125[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$217126[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strTemp$217127[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _playerName$217128[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _cityName$217129[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strDesc$217130[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strLogName$217131[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T217758[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T217759[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$9:
	lea	ecx, DWORD PTR $T217760[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$10:
	lea	ecx, DWORD PTR $T217761[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$11:
	lea	ecx, DWORD PTR $T217762[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$12:
	lea	ecx, DWORD PTR $T217765[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-488]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ ENDP	; CvProcessProductionAI::LogPossibleBuilds
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T218032 = -20						; size = 4
_pRet$218028 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218032[ebp], edx
	cmp	DWORD PTR $T218032[ebp], 4
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T218032[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218028[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T218032[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$218028[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$218028[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T218063 = -24						; size = 4
$T218062 = -20						; size = 4
_i$218057 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218063[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T218062[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$218057[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$218057[ebp]
	add	eax, 1
	mov	DWORD PTR _i$218057[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$218057[ebp]
	cmp	ecx, DWORD PTR $T218063[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T218062[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T218062[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T218076 = -8						; size = 4
$T218075 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218076[ebp], ecx
	cmp	DWORD PTR $T218076[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T218076[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T218076[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T218076[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T218075[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T218170 = -44						; size = 4
$T218169 = -40						; size = 4
_i$218162 = -36						; size = 4
$T218148 = -32						; size = 4
$T218141 = -28						; size = 4
_pRet$218138 = -24					; size = 4
$T218131 = -20						; size = 4
$T218130 = -16						; size = 4
_i$217214 = -12						; size = 4
_uiNewSize$217206 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$217206[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$217206[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$217206[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218141[ebp], ecx
	cmp	DWORD PTR $T218141[ebp], 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T218141[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218138[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T218141[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$218138[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$218138[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$217214[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$217214[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217214[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$217214[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$217214[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T218131[ebp], ecx
	cmp	DWORD PTR $T218131[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$217214[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218148[ebp], edx
	mov	eax, DWORD PTR $T218131[ebp]
	mov	ecx, DWORD PTR $T218148[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T218131[ebp]
	mov	ecx, DWORD PTR $T218148[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T218131[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T218130[ebp], ecx
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218170[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T218169[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize
	mov	DWORD PTR _i$218162[ebp], 0
	jmp	SHORT $LN29@GrowSize
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$218162[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218162[ebp], edx
$LN29@GrowSize:
	mov	eax, DWORD PTR _i$218162[ebp]
	cmp	eax, DWORD PTR $T218170[ebp]
	jae	SHORT $LN24@GrowSize
	jmp	SHORT $LN28@GrowSize
$LN24@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T218169[ebp], ecx
	je	SHORT $LN25@GrowSize
	mov	edx, DWORD PTR $T218169[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T218204 = -2092					; size = 4
$T218203 = -2088					; size = 4
$T218202 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T218202[ebp], eax
	mov	ecx, DWORD PTR $T218202[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T218203[ebp], eax
	mov	eax, DWORD PTR $T218203[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T218204[ebp], eax
	mov	ecx, DWORD PTR $T218204[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
END
