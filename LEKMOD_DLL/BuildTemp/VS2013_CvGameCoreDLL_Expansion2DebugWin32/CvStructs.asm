; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvStructs.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetID@VoteSelectionData@@QBEHXZ		; VoteSelectionData::GetID
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvstructs.cpp
;	COMDAT ?GetID@VoteSelectionData@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@VoteSelectionData@@QBEHXZ PROC			; VoteSelectionData::GetID, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	return iId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 26   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@VoteSelectionData@@QBEHXZ ENDP			; VoteSelectionData::GetID
_TEXT	ENDS
PUBLIC	?SetID@VoteSelectionData@@QAEXH@Z		; VoteSelectionData::SetID
; Function compile flags: /Odtp
;	COMDAT ?SetID@VoteSelectionData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iID$ = 8						; size = 4
?SetID@VoteSelectionData@@QAEXH@Z PROC			; VoteSelectionData::SetID, COMDAT
; _this$ = ecx

; 29   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 	iId = iID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iID$[ebp]
	mov	DWORD PTR [eax], ecx

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@VoteSelectionData@@QAEXH@Z ENDP			; VoteSelectionData::SetID
_TEXT	ENDS
PUBLIC	??1VoteSelectionSubData@@QAE@XZ			; VoteSelectionSubData::~VoteSelectionSubData
PUBLIC	?push_back@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAEXABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::push_back
PUBLIC	??0VoteSelectionSubData@@QAE@XZ			; VoteSelectionSubData::VoteSelectionSubData
PUBLIC	__$ArrayPad$
PUBLIC	?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z	; VoteSelectionData::read
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4VoteTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4VoteSourceTypes@@@Z:PROC ; operator>>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z$0
__ehfuncinfo$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvstructs.cpp
xdata$x	ENDS
;	COMDAT ?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -140						; size = 4
$T218234 = -136						; size = 4
_kData$216759 = -72					; size = 44
__$ArrayPad$ = -28					; size = 4
_iSize$ = -24						; size = 4
_uiVersion$ = -20					; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z PROC	; VoteSelectionData::read, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	// Version number to maintain backwards compatibility
; 36   : 	uint uiVersion;
; 37   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 38   : 
; 39   : 	kStream >> iId;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 40   : 	kStream >> eVoteSource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4VoteSourceTypes@@@Z ; operator>>
	add	esp, 8

; 41   : 	size_t iSize;
; 42   : 	kStream >> iSize;

	lea	ecx, DWORD PTR _iSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 43   : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 44   : 	for(i = 0; i < iSize; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@read
$LN2@read:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@read:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _iSize$[ebp]
	jae	$LN4@read

; 45   : 	{
; 46   : 		VoteSelectionSubData kData;

	lea	ecx, DWORD PTR _kData$216759[ebp]
	call	??0VoteSelectionSubData@@QAE@XZ		; VoteSelectionSubData::VoteSelectionSubData
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 47   : 		kStream >> kData.eVote;

	lea	ecx, DWORD PTR _kData$216759[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4VoteTypes@@@Z ; operator>>
	add	esp, 8

; 48   : 		kStream >> kData.ePlayer;

	lea	eax, DWORD PTR _kData$216759[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 49   : 		kStream >> kData.iCityId;

	lea	edx, DWORD PTR _kData$216759[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 50   : 		kStream >> kData.eOtherPlayer;

	lea	eax, DWORD PTR _kData$216759[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 51   : 		kStream >> kData.strText;

	lea	edx, DWORD PTR _kData$216759[ebp+16]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 52   : 		aVoteOptions.push_back(kData);

	lea	eax, DWORD PTR _kData$216759[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAEXABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::push_back

; 53   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kData$216759[ebp+16]
	mov	DWORD PTR $T218234[ebp], ecx
	mov	ecx, DWORD PTR $T218234[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN2@read
$LN4@read:

; 54   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z$0:
	lea	ecx, DWORD PTR _kData$216759[ebp]
	jmp	??1VoteSelectionSubData@@QAE@XZ
__ehhandler$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z ENDP	; VoteSelectionData::read
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUVoteSelectionData@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUVoteSelectionData@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUVoteSelectionData@@@Z PROC ; operator>>, COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp

; 57   : 	writeTo.read(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?read@VoteSelectionData@@QAEXAAVFDataStream@@@Z ; VoteSelectionData::read

; 58   : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 59   : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUVoteSelectionData@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	?write@VoteSelectionData@@QBEXAAVFDataStream@@@Z ; VoteSelectionData::write
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4VoteTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4VoteSourceTypes@@@Z:PROC ; operator<<
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?write@VoteSelectionData@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T218320 = -36						; size = 4
$T218310 = -32						; size = 4
$T218285 = -28						; size = 4
$T218273 = -24						; size = 4
$T218265 = -20						; size = 4
$T218255 = -16						; size = 4
$T218254 = -12						; size = 4
_it$216889 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?write@VoteSelectionData@@QBEXAAVFDataStream@@@Z PROC	; VoteSelectionData::write, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	// Current version number
; 64   : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 65   : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 66   : 
; 67   : 	kStream << iId;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 68   : 	kStream << eVoteSource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4VoteSourceTypes@@@Z ; operator<<
	add	esp, 8

; 69   : 	kStream << aVoteOptions.size();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T218265[ebp], ecx
	mov	edx, DWORD PTR $T218265[ebp]
	mov	eax, DWORD PTR $T218265[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR $T218254[ebp], eax
	lea	edx, DWORD PTR $T218254[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 70   : 	for(std::vector<VoteSelectionSubData>::const_iterator it = aVoteOptions.begin(); it != aVoteOptions.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T218273[ebp], ecx
	mov	edx, DWORD PTR $T218273[ebp]
	mov	DWORD PTR _it$216889[ebp], edx
	jmp	SHORT $LN3@write
$LN2@write:
	mov	eax, DWORD PTR _it$216889[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _it$216889[ebp], eax
$LN3@write:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T218285[ebp], edx
	mov	eax, DWORD PTR $T218285[ebp]
	mov	DWORD PTR $T218255[ebp], eax
	mov	ecx, DWORD PTR _it$216889[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T218255[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@write

; 71   : 	{
; 72   : 		kStream << (*it).eVote;

	mov	edx, DWORD PTR _it$216889[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4VoteTypes@@@Z ; operator<<
	add	esp, 8

; 73   : 		kStream << (*it).ePlayer;

	mov	ecx, DWORD PTR _it$216889[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 74   : 		kStream << (*it).iCityId;

	mov	eax, DWORD PTR _it$216889[ebp]
	add	eax, 8
	mov	DWORD PTR $T218310[ebp], eax
	mov	ecx, DWORD PTR $T218310[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 75   : 		kStream << (*it).eOtherPlayer;

	mov	edx, DWORD PTR _it$216889[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 76   : 		kStream << (*it).strText;

	mov	ecx, DWORD PTR _it$216889[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T218320[ebp], ecx
	mov	edx, DWORD PTR $T218320[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 77   : 	}

	jmp	$LN2@write
$LN4@write:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?write@VoteSelectionData@@QBEXAAVFDataStream@@@Z ENDP	; VoteSelectionData::write
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUVoteSelectionData@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUVoteSelectionData@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUVoteSelectionData@@@Z PROC ; operator<<, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   : 	readFrom.write(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	call	?write@VoteSelectionData@@QBEXAAVFDataStream@@@Z ; VoteSelectionData::write

; 82   : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 83   : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUVoteSelectionData@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	?GetID@VoteTriggeredData@@QBEHXZ		; VoteTriggeredData::GetID
; Function compile flags: /Odtp
;	COMDAT ?GetID@VoteTriggeredData@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@VoteTriggeredData@@QBEHXZ PROC			; VoteTriggeredData::GetID, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	return iId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 88   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@VoteTriggeredData@@QBEHXZ ENDP			; VoteTriggeredData::GetID
_TEXT	ENDS
PUBLIC	?SetID@VoteTriggeredData@@QAEXH@Z		; VoteTriggeredData::SetID
; Function compile flags: /Odtp
;	COMDAT ?SetID@VoteTriggeredData@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iID$ = 8						; size = 4
?SetID@VoteTriggeredData@@QAEXH@Z PROC			; VoteTriggeredData::SetID, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	iId = iID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iID$[ebp]
	mov	DWORD PTR [eax], ecx

; 93   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@VoteTriggeredData@@QAEXH@Z ENDP			; VoteTriggeredData::SetID
_TEXT	ENDS
PUBLIC	?read@VoteTriggeredData@@QAEXAAVFDataStream@@@Z	; VoteTriggeredData::read
; Function compile flags: /Odtp
;	COMDAT ?read@VoteTriggeredData@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?read@VoteTriggeredData@@QAEXAAVFDataStream@@@Z PROC	; VoteTriggeredData::read, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	// Version number to maintain backwards compatibility
; 98   : 	uint uiVersion;
; 99   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 100  : 
; 101  : 	kStream >> iId;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 102  : 	kStream >> eVoteSource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4VoteSourceTypes@@@Z ; operator>>
	add	esp, 8

; 103  : 	kStream >> kVoteOption.eVote;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4VoteTypes@@@Z ; operator>>
	add	esp, 8

; 104  : 	kStream >> kVoteOption.ePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 105  : 	kStream >> kVoteOption.iCityId;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 106  : 	kStream >> kVoteOption.eOtherPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 107  : 	kStream >> kVoteOption.strText;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 108  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?read@VoteTriggeredData@@QAEXAAVFDataStream@@@Z ENDP	; VoteTriggeredData::read
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUVoteTriggeredData@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUVoteTriggeredData@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUVoteTriggeredData@@@Z PROC ; operator>>, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp

; 111  : 	writeTo.read(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?read@VoteTriggeredData@@QAEXAAVFDataStream@@@Z ; VoteTriggeredData::read

; 112  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 113  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUVoteTriggeredData@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	?write@VoteTriggeredData@@QBEXAAVFDataStream@@@Z ; VoteTriggeredData::write
; Function compile flags: /Odtp
;	COMDAT ?write@VoteTriggeredData@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?write@VoteTriggeredData@@QBEXAAVFDataStream@@@Z PROC	; VoteTriggeredData::write, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	// Current version number
; 118  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 119  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 120  : 
; 121  : 	kStream << iId;

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 122  : 	kStream << eVoteSource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4VoteSourceTypes@@@Z ; operator<<
	add	esp, 8

; 123  : 	kStream << kVoteOption.eVote;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABW4VoteTypes@@@Z ; operator<<
	add	esp, 8

; 124  : 	kStream << kVoteOption.ePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 125  : 	kStream << kVoteOption.iCityId;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 126  : 	kStream << kVoteOption.eOtherPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 127  : 	kStream << kVoteOption.strText;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?write@VoteTriggeredData@@QBEXAAVFDataStream@@@Z ENDP	; VoteTriggeredData::write
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUVoteTriggeredData@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUVoteTriggeredData@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUVoteTriggeredData@@@Z PROC ; operator<<, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp

; 131  : 	readFrom.write(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	call	?write@VoteTriggeredData@@QBEXAAVFDataStream@@@Z ; VoteTriggeredData::write

; 132  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 133  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUVoteTriggeredData@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUBuildingYieldChange@@@Z ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4BuildingClassTypes@@@Z:PROC ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUBuildingYieldChange@@@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUBuildingYieldChange@@@Z PROC ; operator>>, COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp

; 137  : 	kStream >> writeTo.eBuildingClass;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4BuildingClassTypes@@@Z ; operator>>
	add	esp, 8

; 138  : 	kStream >> writeTo.eYield;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4YieldTypes@@@Z ; operator>>
	add	esp, 8

; 139  : 	kStream >> writeTo.iChange;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 140  : 	return kStream;

	mov	eax, DWORD PTR _kStream$[ebp]

; 141  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUBuildingYieldChange@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUBuildingYieldChange@@@Z ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4BuildingClassTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUBuildingYieldChange@@@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUBuildingYieldChange@@@Z PROC ; operator<<, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  : 	kStream << readFrom.eBuildingClass;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingClassTypes@@@Z ; operator<<
	add	esp, 8

; 146  : 	kStream << readFrom.eYield;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4YieldTypes@@@Z ; operator<<
	add	esp, 8

; 147  : 	kStream << readFrom.iChange;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 148  : 	return kStream;

	mov	eax, DWORD PTR _kStream$[ebp]

; 149  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUBuildingYieldChange@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUBuildingGreatWork@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUBuildingGreatWork@@@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUBuildingGreatWork@@@Z PROC ; operator>>, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp

; 153  : 	kStream >> writeTo.eBuildingClass;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4BuildingClassTypes@@@Z ; operator>>
	add	esp, 8

; 154  : 	kStream >> writeTo.iSlot;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 155  : 	kStream >> writeTo.iGreatWorkIndex;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 156  : 	return kStream;

	mov	eax, DWORD PTR _kStream$[ebp]

; 157  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUBuildingGreatWork@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUBuildingGreatWork@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUBuildingGreatWork@@@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUBuildingGreatWork@@@Z PROC ; operator<<, COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp

; 161  : 	kStream << readFrom.eBuildingClass;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingClassTypes@@@Z ; operator<<
	add	esp, 8

; 162  : 	kStream << readFrom.iSlot;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 163  : 	kStream << readFrom.iGreatWorkIndex;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 164  : 	return kStream;

	mov	eax, DWORD PTR _kStream$[ebp]

; 165  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUBuildingGreatWork@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z	; checkBattleUnitType
; Function compile flags: /Odtp
;	COMDAT ?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z PROC	; checkBattleUnitType, COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp

; 175  : #endif
; 176  : }

	pop	ebp
	ret	0
?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ENDP	; checkBattleUnitType
_TEXT	ENDS
PUBLIC	??0CvCombatMemberEntry@@QAE@XZ			; CvCombatMemberEntry::CvCombatMemberEntry
PUBLIC	??0CvCombatInfo@@QAE@XZ				; CvCombatInfo::CvCombatInfo
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ??0CvCombatInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T218404 = -20						; size = 4
$T218403 = -16						; size = 4
$T218396 = -12						; size = 4
$T218395 = -8						; size = 4
_i$216978 = -4						; size = 4
??0CvCombatInfo@@QAE@XZ PROC				; CvCombatInfo::CvCombatInfo, COMDAT
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+29], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+30], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+31], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+32], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+106], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+107], 0
	mov	DWORD PTR $T218396[ebp], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	mov	DWORD PTR $T218395[ebp], ecx
$LN7@CvCombatIn:
	mov	edx, DWORD PTR $T218396[ebp]
	sub	edx, 1
	mov	DWORD PTR $T218396[ebp], edx
	js	SHORT $LN8@CvCombatIn
	mov	ecx, DWORD PTR $T218395[ebp]
	call	??0CvCombatMemberEntry@@QAE@XZ		; CvCombatMemberEntry::CvCombatMemberEntry
	mov	eax, DWORD PTR $T218395[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T218395[ebp], eax
	jmp	SHORT $LN7@CvCombatIn
$LN8@CvCombatIn:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+216], 0
	mov	DWORD PTR $T218404[ebp], 32		; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 220				; 000000dcH
	mov	DWORD PTR $T218403[ebp], edx
$LN13@CvCombatIn:
	mov	eax, DWORD PTR $T218404[ebp]
	sub	eax, 1
	mov	DWORD PTR $T218404[ebp], eax
	js	SHORT $LN14@CvCombatIn
	mov	ecx, DWORD PTR $T218403[ebp]
	call	??0CvCombatMemberEntry@@QAE@XZ		; CvCombatMemberEntry::CvCombatMemberEntry
	mov	ecx, DWORD PTR $T218403[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T218403[ebp], ecx
	jmp	SHORT $LN13@CvCombatIn
$LN14@CvCombatIn:

; 195  : 	for(int i=0; i<BATTLE_UNIT_COUNT; i++)

	mov	DWORD PTR _i$216978[ebp], 0
	jmp	SHORT $LN3@CvCombatIn
$LN2@CvCombatIn:
	mov	edx, DWORD PTR _i$216978[ebp]
	add	edx, 1
	mov	DWORD PTR _i$216978[ebp], edx
$LN3@CvCombatIn:
	cmp	DWORD PTR _i$216978[ebp], 3
	jge	SHORT $LN4@CvCombatIn

; 196  : 	{
; 197  : 		m_pUnits[i] = NULL;

	mov	eax, DWORD PTR _i$216978[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 198  : 		m_pCities[i] = NULL;

	mov	edx, DWORD PTR _i$216978[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+12], 0

; 199  : 		m_iFinalDamage[i] = 0;

	mov	ecx, DWORD PTR _i$216978[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+40], 0

; 200  : 		m_iDamageInflicted[i] = 0;

	mov	eax, DWORD PTR _i$216978[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+52], 0

; 201  : 		m_iFearDamageInflicted[i] = 0;

	mov	edx, DWORD PTR _i$216978[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+64], 0

; 202  : 		m_iExperienceChange[i] = 0;

	mov	ecx, DWORD PTR _i$216978[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+76], 0

; 203  : 		m_iMaxExperienceAllowed[i] = 0;

	mov	eax, DWORD PTR _i$216978[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+88], 0

; 204  : 		m_bInBorders[i] = false;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$216978[ebp]
	mov	BYTE PTR [edx+100], 0

; 205  : 		m_bUpdateGlobal[i] = false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$216978[ebp]
	mov	BYTE PTR [eax+103], 0
	jmp	$LN2@CvCombatIn
$LN4@CvCombatIn:

; 206  : 	}
; 207  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCombatInfo@@QAE@XZ ENDP				; CvCombatInfo::CvCombatInfo
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??4CvCombatInfo@@QAEAAV0@ABV0@@Z		; CvCombatInfo::operator=
; Function compile flags: /Odtp
;	COMDAT ??4CvCombatInfo@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$217001 = -8						; size = 4
_i$216997 = -4						; size = 4
_rhs$ = 8						; size = 4
??4CvCombatInfo@@QAEAAV0@ABV0@@Z PROC			; CvCombatInfo::operator=, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	m_pTargetPlot = rhs.m_pTargetPlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 212  : 	m_bAttackerAdvances = rhs.m_bAttackerAdvances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+28]
	mov	BYTE PTR [eax+28], dl

; 213  : 	m_bAttackIsRanged = rhs.m_bAttackIsRanged;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+29]
	mov	BYTE PTR [eax+29], dl

; 214  : 	m_bAttackIsBombingMission = rhs.m_bAttackIsBombingMission;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+30]
	mov	BYTE PTR [eax+30], dl

; 215  : 	m_bAttackIsAirSweep = rhs.m_bAttackIsAirSweep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+31]
	mov	BYTE PTR [eax+31], dl

; 216  : 	m_bDefenderCaptured = rhs.m_bDefenderCaptured;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+33]
	mov	BYTE PTR [eax+33], dl

; 217  : 	m_bDefenderRetaliates = rhs.m_bDefenderRetaliates;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax+32], dl

; 218  : 	m_iNuclearDamageLevel = rhs.m_iNuclearDamageLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 219  : 	m_bVisualize = rhs.m_bVisualize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+106]
	mov	BYTE PTR [eax+106], dl

; 220  : 	m_bAttackedAdvancedVis = rhs.m_bAttackedAdvancedVis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	dl, BYTE PTR [ecx+107]
	mov	BYTE PTR [eax+107], dl

; 221  : 
; 222  : 	for(int i=0; i<BATTLE_UNIT_COUNT; i++)

	mov	DWORD PTR _i$216997[ebp], 0
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	eax, DWORD PTR _i$216997[ebp]
	add	eax, 1
	mov	DWORD PTR _i$216997[ebp], eax
$LN6@operator:
	cmp	DWORD PTR _i$216997[ebp], 3
	jge	$LN4@operator

; 223  : 	{
; 224  : 		m_pUnits[i] = rhs.m_pUnits[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 225  : 
; 226  : 		m_iFinalDamage[i] = rhs.m_iFinalDamage[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+40]
	mov	DWORD PTR [edx+ecx*4+40], eax

; 227  : 		m_iDamageInflicted[i] = rhs.m_iDamageInflicted[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+52]
	mov	DWORD PTR [edx+ecx*4+52], eax

; 228  : 		m_iFearDamageInflicted[i] = rhs.m_iFearDamageInflicted[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+64]
	mov	DWORD PTR [edx+ecx*4+64], eax

; 229  : 
; 230  : 		m_iExperienceChange[i] = rhs.m_iExperienceChange[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+76]
	mov	DWORD PTR [edx+ecx*4+76], eax

; 231  : 		m_iMaxExperienceAllowed[i] = rhs.m_iMaxExperienceAllowed[i];

	mov	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$216997[ebp]
	mov	esi, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+88]
	mov	DWORD PTR [edx+ecx*4+88], eax

; 232  : 		m_bInBorders[i] = rhs.m_bInBorders[i];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, DWORD PTR _i$216997[ebp]
	mov	al, BYTE PTR [edx+100]
	mov	BYTE PTR [ecx+100], al

; 233  : 		m_bUpdateGlobal[i] = rhs.m_bUpdateGlobal[i];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$216997[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	add	edx, DWORD PTR _i$216997[ebp]
	mov	al, BYTE PTR [edx+103]
	mov	BYTE PTR [ecx+103], al

; 234  : 	}

	jmp	$LN5@operator
$LN4@operator:

; 235  : 
; 236  : 	m_iDamageMemberCount = rhs.m_iDamageMemberCount;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [edx+216]
	mov	DWORD PTR [ecx+216], eax

; 237  : 	for(int i=0; i<m_iDamageMemberCount; ++i)

	mov	DWORD PTR _i$217001[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	ecx, DWORD PTR _i$217001[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217001[ebp], ecx
$LN3@operator:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$217001[ebp]
	cmp	eax, DWORD PTR [edx+216]
	jge	SHORT $LN1@operator

; 238  : 	{
; 239  : 		m_kDamageMembers[i] = rhs.m_kDamageMembers[i];

	mov	ecx, DWORD PTR _i$217001[ebp]
	imul	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _rhs$[ebp]
	lea	esi, DWORD PTR [edx+ecx+220]
	mov	eax, DWORD PTR _i$217001[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edi, DWORD PTR [ecx+eax+220]
	mov	ecx, 9
	rep movsd

; 240  : 	}

	jmp	SHORT $LN2@operator
$LN1@operator:

; 241  : 	return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 242  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4CvCombatInfo@@QAEAAV0@ABV0@@Z ENDP			; CvCombatInfo::operator=
_TEXT	ENDS
PUBLIC	?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getUnit
; Function compile flags: /Odtp
;	COMDAT ?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getUnit, COMDAT
; _this$ = ecx

; 246  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 248  : 	return m_pUnits[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]

; 249  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnit@CvCombatInfo@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getUnit
_TEXT	ENDS
PUBLIC	?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvCombatInfo::setUnit
; Function compile flags: /Odtp
;	COMDAT ?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_unit$ = 12						; size = 4
?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z PROC ; CvCombatInfo::setUnit, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 253  : 	m_pUnits[unitType] = unit;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _unit$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setUnit@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ENDP ; CvCombatInfo::setUnit
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
PUBLIC	?isCity@CvPlot@@QBE_NXZ				; CvPlot::isCity
PUBLIC	?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCity
; Function compile flags: /Odtp
;	COMDAT ?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_unitType$ = 8						; size = 4
?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getCity, COMDAT
; _this$ = ecx

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 258  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 259  : 	if(m_pCities[unitType])

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+12], 0
	je	SHORT $LN4@getCity

; 260  : 		return m_pCities[unitType];

	mov	eax, DWORD PTR _unitType$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+12]
	jmp	SHORT $LN5@getCity
	jmp	SHORT $LN3@getCity
$LN4@getCity:

; 261  : 	else if(unitType == BATTLE_UNIT_DEFENDER && m_pTargetPlot)

	cmp	DWORD PTR _unitType$[ebp], 1
	jne	SHORT $LN3@getCity
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN3@getCity

; 262  : 	{
; 263  : 		if(m_pTargetPlot->isCity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@getCity

; 264  : 			return m_pTargetPlot->getPlotCity();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	jmp	SHORT $LN5@getCity
$LN3@getCity:

; 265  : 	}
; 266  : 	return NULL;

	xor	eax, eax
$LN5@getCity:

; 267  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCity@CvCombatInfo@@QBEPAVCvCity@@W4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getCity
_TEXT	ENDS
PUBLIC	?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z ; CvCombatInfo::setCity
; Function compile flags: /Odtp
;	COMDAT ?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_pkCity$ = 12						; size = 4
?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z PROC ; CvCombatInfo::setCity, COMDAT
; _this$ = ecx

; 270  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 271  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 272  : 	m_pCities[unitType] = pkCity;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pkCity$[ebp]
	mov	DWORD PTR [edx+ecx*4+12], eax

; 273  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setCity@CvCombatInfo@@QAEXW4BattleUnitTypes@@PAVCvCity@@@Z ENDP ; CvCombatInfo::setCity
_TEXT	ENDS
PUBLIC	?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ		; CvCombatInfo::getPlot
; Function compile flags: /Odtp
;	COMDAT ?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ PROC		; CvCombatInfo::getPlot, COMDAT
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 	return m_pTargetPlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 278  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlot@CvCombatInfo@@QBEPAVCvPlot@@XZ ENDP		; CvCombatInfo::getPlot
_TEXT	ENDS
PUBLIC	?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z	; CvCombatInfo::setPlot
; Function compile flags: /Odtp
;	COMDAT ?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plot$ = 8						; size = 4
?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z PROC		; CvCombatInfo::setPlot, COMDAT
; _this$ = ecx

; 280  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 281  : 	m_pTargetPlot = plot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plot$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 282  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setPlot@CvCombatInfo@@QAEXPAVCvPlot@@@Z ENDP		; CvCombatInfo::setPlot
_TEXT	ENDS
PUBLIC	?getAttackerAdvances@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getAttackerAdvances
; Function compile flags: /Odtp
;	COMDAT ?getAttackerAdvances@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackerAdvances@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getAttackerAdvances, COMDAT
; _this$ = ecx

; 285  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 	return m_bAttackerAdvances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+28]

; 287  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackerAdvances@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getAttackerAdvances
_TEXT	ENDS
PUBLIC	?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setAttackerAdvances
; Function compile flags: /Odtp
;	COMDAT ?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAdvance$ = 8						; size = 1
?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z PROC	; CvCombatInfo::setAttackerAdvances, COMDAT
; _this$ = ecx

; 290  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 291  : 	m_bAttackerAdvances = bAdvance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bAdvance$[ebp]
	mov	BYTE PTR [eax+28], cl

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackerAdvances@CvCombatInfo@@QAEX_N@Z ENDP	; CvCombatInfo::setAttackerAdvances
_TEXT	ENDS
PUBLIC	?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getDefenderRetaliates
; Function compile flags: /Odtp
;	COMDAT ?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ PROC	; CvCombatInfo::getDefenderRetaliates, COMDAT
; _this$ = ecx

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 296  : 	return m_bDefenderRetaliates;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+32]

; 297  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefenderRetaliates@CvCombatInfo@@QBE_NXZ ENDP	; CvCombatInfo::getDefenderRetaliates
_TEXT	ENDS
PUBLIC	?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setDefenderRetaliates
; Function compile flags: /Odtp
;	COMDAT ?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bDefenderRetaliates$ = 8				; size = 1
?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z PROC	; CvCombatInfo::setDefenderRetaliates, COMDAT
; _this$ = ecx

; 300  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 301  : 	m_bDefenderRetaliates = bDefenderRetaliates;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bDefenderRetaliates$[ebp]
	mov	BYTE PTR [eax+32], cl

; 302  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setDefenderRetaliates@CvCombatInfo@@QAEX_N@Z ENDP	; CvCombatInfo::setDefenderRetaliates
_TEXT	ENDS
PUBLIC	?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setAttackIsRanged
; Function compile flags: /Odtp
;	COMDAT ?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bRanged$ = 8						; size = 1
?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z PROC		; CvCombatInfo::setAttackIsRanged, COMDAT
; _this$ = ecx

; 305  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 306  : 	m_bAttackIsRanged = bRanged;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bRanged$[ebp]
	mov	BYTE PTR [eax+29], cl

; 307  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackIsRanged@CvCombatInfo@@QAEX_N@Z ENDP		; CvCombatInfo::setAttackIsRanged
_TEXT	ENDS
PUBLIC	?getAttackIsRanged@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getAttackIsRanged
; Function compile flags: /Odtp
;	COMDAT ?getAttackIsRanged@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackIsRanged@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getAttackIsRanged, COMDAT
; _this$ = ecx

; 310  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 	return m_bAttackIsRanged;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+29]

; 312  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackIsRanged@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getAttackIsRanged
_TEXT	ENDS
PUBLIC	?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackIsBombingMission
; Function compile flags: /Odtp
;	COMDAT ?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bBombingMission$ = 8					; size = 1
?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z PROC	; CvCombatInfo::setAttackIsBombingMission, COMDAT
; _this$ = ecx

; 315  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 	m_bAttackIsBombingMission = bBombingMission;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bBombingMission$[ebp]
	mov	BYTE PTR [eax+30], cl

; 317  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackIsBombingMission@CvCombatInfo@@QAEX_N@Z ENDP	; CvCombatInfo::setAttackIsBombingMission
_TEXT	ENDS
PUBLIC	?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackIsBombingMission
; Function compile flags: /Odtp
;	COMDAT ?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ PROC	; CvCombatInfo::getAttackIsBombingMission, COMDAT
; _this$ = ecx

; 320  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 	return m_bAttackIsBombingMission;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+30]

; 322  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackIsBombingMission@CvCombatInfo@@QBE_NXZ ENDP	; CvCombatInfo::getAttackIsBombingMission
_TEXT	ENDS
PUBLIC	?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setAttackIsAirSweep
; Function compile flags: /Odtp
;	COMDAT ?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAirSweep$ = 8						; size = 1
?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z PROC	; CvCombatInfo::setAttackIsAirSweep, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 	m_bAttackIsAirSweep = bAirSweep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bAirSweep$[ebp]
	mov	BYTE PTR [eax+31], cl

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackIsAirSweep@CvCombatInfo@@QAEX_N@Z ENDP	; CvCombatInfo::setAttackIsAirSweep
_TEXT	ENDS
PUBLIC	?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getAttackIsAirSweep
; Function compile flags: /Odtp
;	COMDAT ?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getAttackIsAirSweep, COMDAT
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	return m_bAttackIsAirSweep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+31]

; 332  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackIsAirSweep@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getAttackIsAirSweep
_TEXT	ENDS
PUBLIC	?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setDefenderCaptured
; Function compile flags: /Odtp
;	COMDAT ?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bDefenderCaptured$ = 8					; size = 1
?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z PROC	; CvCombatInfo::setDefenderCaptured, COMDAT
; _this$ = ecx

; 335  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 336  : 	m_bDefenderCaptured = bDefenderCaptured;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bDefenderCaptured$[ebp]
	mov	BYTE PTR [eax+33], cl

; 337  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setDefenderCaptured@CvCombatInfo@@QAEX_N@Z ENDP	; CvCombatInfo::setDefenderCaptured
_TEXT	ENDS
PUBLIC	?getDefenderCaptured@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getDefenderCaptured
; Function compile flags: /Odtp
;	COMDAT ?getDefenderCaptured@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefenderCaptured@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getDefenderCaptured, COMDAT
; _this$ = ecx

; 340  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 	return m_bDefenderCaptured;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+33]

; 342  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefenderCaptured@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getDefenderCaptured
_TEXT	ENDS
PUBLIC	?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getDamageInflicted
; Function compile flags: /Odtp
;	COMDAT ?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getDamageInflicted, COMDAT
; _this$ = ecx

; 345  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 347  : 	return m_iDamageInflicted[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+52]

; 348  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getDamageInflicted
_TEXT	ENDS
PUBLIC	?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setDamageInflicted
; Function compile flags: /Odtp
;	COMDAT ?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_iDamage$ = 12						; size = 4
?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvCombatInfo::setDamageInflicted, COMDAT
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 352  : 	m_iDamageInflicted[unitType] = iDamage;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iDamage$[ebp]
	mov	DWORD PTR [edx+ecx*4+52], eax

; 353  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvCombatInfo::setDamageInflicted
_TEXT	ENDS
PUBLIC	?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getFinalDamage
; Function compile flags: /Odtp
;	COMDAT ?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getFinalDamage, COMDAT
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 358  : 	return m_iFinalDamage[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+40]

; 359  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFinalDamage@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getFinalDamage
_TEXT	ENDS
PUBLIC	?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFinalDamage
; Function compile flags: /Odtp
;	COMDAT ?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_iFinalDamage$ = 12					; size = 4
?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvCombatInfo::setFinalDamage, COMDAT
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 363  : 	m_iFinalDamage[unitType] = iFinalDamage;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iFinalDamage$[ebp]
	mov	DWORD PTR [edx+ecx*4+40], eax

; 364  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setFinalDamage@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvCombatInfo::setFinalDamage
_TEXT	ENDS
PUBLIC	?getFearDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getFearDamageInflicted
; Function compile flags: /Odtp
;	COMDAT ?getFearDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getFearDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getFearDamageInflicted, COMDAT
; _this$ = ecx

; 368  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 370  : 	return m_iFearDamageInflicted[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+64]

; 371  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFearDamageInflicted@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getFearDamageInflicted
_TEXT	ENDS
PUBLIC	?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setFearDamageInflicted
; Function compile flags: /Odtp
;	COMDAT ?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_iDamage$ = 12						; size = 4
?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvCombatInfo::setFearDamageInflicted, COMDAT
; _this$ = ecx

; 373  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 375  : 	m_iFearDamageInflicted[unitType] = iDamage;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iDamage$[ebp]
	mov	DWORD PTR [edx+ecx*4+64], eax

; 376  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setFearDamageInflicted@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvCombatInfo::setFearDamageInflicted
_TEXT	ENDS
PUBLIC	?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getExperience
; Function compile flags: /Odtp
;	COMDAT ?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getExperience, COMDAT
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 381  : 	return m_iExperienceChange[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+76]

; 382  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getExperience@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getExperience
_TEXT	ENDS
PUBLIC	?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setExperience
; Function compile flags: /Odtp
;	COMDAT ?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_iExperience$ = 12					; size = 4
?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvCombatInfo::setExperience, COMDAT
; _this$ = ecx

; 384  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 386  : 	m_iExperienceChange[unitType] = iExperience;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iExperience$[ebp]
	mov	DWORD PTR [edx+ecx*4+76], eax

; 387  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setExperience@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvCombatInfo::setExperience
_TEXT	ENDS
PUBLIC	?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ; CvCombatInfo::getMaxExperienceAllowed
; Function compile flags: /Odtp
;	COMDAT ?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getMaxExperienceAllowed, COMDAT
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 391  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 392  : 	return m_iMaxExperienceAllowed[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+88]

; 393  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getMaxExperienceAllowed@CvCombatInfo@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getMaxExperienceAllowed
_TEXT	ENDS
PUBLIC	?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ; CvCombatInfo::setMaxExperienceAllowed
; Function compile flags: /Odtp
;	COMDAT ?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_iMaxExperience$ = 12					; size = 4
?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvCombatInfo::setMaxExperienceAllowed, COMDAT
; _this$ = ecx

; 395  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 396  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 397  : 	m_iMaxExperienceAllowed[unitType] = iMaxExperience;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iMaxExperience$[ebp]
	mov	DWORD PTR [edx+ecx*4+88], eax

; 398  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setMaxExperienceAllowed@CvCombatInfo@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvCombatInfo::setMaxExperienceAllowed
_TEXT	ENDS
PUBLIC	?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getInBorders
; Function compile flags: /Odtp
;	COMDAT ?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getInBorders, COMDAT
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 403  : 	return m_bInBorders[unitType];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _unitType$[ebp]
	mov	al, BYTE PTR [ecx+100]

; 404  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getInBorders@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getInBorders
_TEXT	ENDS
PUBLIC	?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setInBorders
; Function compile flags: /Odtp
;	COMDAT ?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_bInBorders$ = 12					; size = 1
?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z PROC ; CvCombatInfo::setInBorders, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 408  : 	m_bInBorders[unitType] = bInBorders;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _unitType$[ebp]
	mov	dl, BYTE PTR _bInBorders$[ebp]
	mov	BYTE PTR [ecx+100], dl

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setInBorders@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ENDP ; CvCombatInfo::setInBorders
_TEXT	ENDS
PUBLIC	?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ; CvCombatInfo::getUpdateGlobal
; Function compile flags: /Odtp
;	COMDAT ?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getUpdateGlobal, COMDAT
; _this$ = ecx

; 412  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 414  : 	return m_bUpdateGlobal[unitType];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _unitType$[ebp]
	mov	al, BYTE PTR [ecx+103]

; 415  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUpdateGlobal@CvCombatInfo@@QBE_NW4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getUpdateGlobal
_TEXT	ENDS
PUBLIC	?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ; CvCombatInfo::setUpdateGlobal
; Function compile flags: /Odtp
;	COMDAT ?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_bUpdateGlobal$ = 12					; size = 1
?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z PROC ; CvCombatInfo::setUpdateGlobal, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 418  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 419  : 	m_bUpdateGlobal[unitType] = bUpdateGlobal;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _unitType$[ebp]
	mov	dl, BYTE PTR _bUpdateGlobal$[ebp]
	mov	BYTE PTR [ecx+103], dl

; 420  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setUpdateGlobal@CvCombatInfo@@QAEXW4BattleUnitTypes@@_N@Z ENDP ; CvCombatInfo::setUpdateGlobal
_TEXT	ENDS
PUBLIC	?getVisualizeCombat@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getVisualizeCombat
; Function compile flags: /Odtp
;	COMDAT ?getVisualizeCombat@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisualizeCombat@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getVisualizeCombat, COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 	return m_bVisualize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+106]

; 425  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisualizeCombat@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getVisualizeCombat
_TEXT	ENDS
PUBLIC	?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z	; CvCombatInfo::setVisualizeCombat
; Function compile flags: /Odtp
;	COMDAT ?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bVisualize$ = 8					; size = 1
?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z PROC		; CvCombatInfo::setVisualizeCombat, COMDAT
; _this$ = ecx

; 428  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 	m_bVisualize = bVisualize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bVisualize$[ebp]
	mov	BYTE PTR [eax+106], cl

; 430  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setVisualizeCombat@CvCombatInfo@@QAEX_N@Z ENDP		; CvCombatInfo::setVisualizeCombat
_TEXT	ENDS
PUBLIC	?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ ; CvCombatInfo::getAttackerAdvancedVisualization
; Function compile flags: /Odtp
;	COMDAT ?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ PROC ; CvCombatInfo::getAttackerAdvancedVisualization, COMDAT
; _this$ = ecx

; 433  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 	return m_bAttackedAdvancedVis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+107]

; 435  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackerAdvancedVisualization@CvCombatInfo@@QBE_NXZ ENDP ; CvCombatInfo::getAttackerAdvancedVisualization
_TEXT	ENDS
PUBLIC	?setAttackerAdvancedVisualization@CvCombatInfo@@QAEX_N@Z ; CvCombatInfo::setAttackerAdvancedVisualization
; Function compile flags: /Odtp
;	COMDAT ?setAttackerAdvancedVisualization@CvCombatInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bAdvance$ = 8						; size = 1
?setAttackerAdvancedVisualization@CvCombatInfo@@QAEX_N@Z PROC ; CvCombatInfo::setAttackerAdvancedVisualization, COMDAT
; _this$ = ecx

; 438  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 	m_bAttackedAdvancedVis = bAdvance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bAdvance$[ebp]
	mov	BYTE PTR [eax+107], cl

; 440  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackerAdvancedVisualization@CvCombatInfo@@QAEX_N@Z ENDP ; CvCombatInfo::setAttackerAdvancedVisualization
_TEXT	ENDS
PUBLIC	?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ	; CvCombatInfo::getAttackIsNuclear
; Function compile flags: /Odtp
;	COMDAT ?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ PROC		; CvCombatInfo::getAttackIsNuclear, COMDAT
; _this$ = ecx

; 443  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 444  : 	return m_iNuclearDamageLevel > 0;

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+36], 0
	setg	cl
	mov	al, cl

; 445  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackIsNuclear@CvCombatInfo@@QBE_NXZ ENDP		; CvCombatInfo::getAttackIsNuclear
_TEXT	ENDS
PUBLIC	?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ	; CvCombatInfo::getAttackNuclearLevel
; Function compile flags: /Odtp
;	COMDAT ?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ PROC	; CvCombatInfo::getAttackNuclearLevel, COMDAT
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 	return m_iNuclearDamageLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 450  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttackNuclearLevel@CvCombatInfo@@QBEHXZ ENDP	; CvCombatInfo::getAttackNuclearLevel
_TEXT	ENDS
PUBLIC	?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z	; CvCombatInfo::setAttackNuclearLevel
; Function compile flags: /Odtp
;	COMDAT ?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNuclearDamageLevel$ = 8				; size = 4
?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z PROC	; CvCombatInfo::setAttackNuclearLevel, COMDAT
; _this$ = ecx

; 453  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 454  : 	m_iNuclearDamageLevel = iNuclearDamageLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNuclearDamageLevel$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 455  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAttackNuclearLevel@CvCombatInfo@@QAEXH@Z ENDP	; CvCombatInfo::setAttackNuclearLevel
_TEXT	ENDS
PUBLIC	?getCombatMember@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@W4BattleUnitTypes@@@Z ; CvCombatInfo::getCombatMember
; Function compile flags: /Odtp
;	COMDAT ?getCombatMember@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getCombatMember@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@W4BattleUnitTypes@@@Z PROC ; CvCombatInfo::getCombatMember, COMDAT
; _this$ = ecx

; 458  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 459  : 	if((int)unitType < (int)BATTLE_UNIT_COUNT)

	cmp	DWORD PTR _unitType$[ebp], 3
	jge	SHORT $LN1@getCombatM

; 460  : 		return &m_kCombatMembers[unitType];

	mov	eax, DWORD PTR _unitType$[ebp]
	imul	eax, 36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+108]
	jmp	SHORT $LN2@getCombatM
$LN1@getCombatM:

; 461  : 	return NULL;

	xor	eax, eax
$LN2@getCombatM:

; 462  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCombatMember@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@W4BattleUnitTypes@@@Z ENDP ; CvCombatInfo::getCombatMember
_TEXT	ENDS
PUBLIC	?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ ; CvCombatInfo::getDamageMembers
; Function compile flags: /Odtp
;	COMDAT ?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ PROC ; CvCombatInfo::getDamageMembers, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	return &m_kDamageMembers[0];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH

; 467  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDamageMembers@CvCombatInfo@@QAEPAUCvCombatMemberEntry@@XZ ENDP ; CvCombatInfo::getDamageMembers
_TEXT	ENDS
PUBLIC	?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ ; CvCombatInfo::getDamageMembers
; Function compile flags: /Odtp
;	COMDAT ?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ PROC ; CvCombatInfo::getDamageMembers, COMDAT
; _this$ = ecx

; 470  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 471  : 	return &m_kDamageMembers[0];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH

; 472  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDamageMembers@CvCombatInfo@@QBEPBUCvCombatMemberEntry@@XZ ENDP ; CvCombatInfo::getDamageMembers
_TEXT	ENDS
PUBLIC	?getDamageMemberCount@CvCombatInfo@@QBEHXZ	; CvCombatInfo::getDamageMemberCount
; Function compile flags: /Odtp
;	COMDAT ?getDamageMemberCount@CvCombatInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDamageMemberCount@CvCombatInfo@@QBEHXZ PROC		; CvCombatInfo::getDamageMemberCount, COMDAT
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	return m_iDamageMemberCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+216]

; 477  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDamageMemberCount@CvCombatInfo@@QBEHXZ ENDP		; CvCombatInfo::getDamageMemberCount
_TEXT	ENDS
PUBLIC	?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ	; CvCombatInfo::getMaxDamageMemberCount
; Function compile flags: /Odtp
;	COMDAT ?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ PROC	; CvCombatInfo::getMaxDamageMemberCount, COMDAT
; _this$ = ecx

; 480  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 	return MAX_DAMAGE_MEMBER_COUNT;

	mov	eax, 32					; 00000020H

; 482  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxDamageMemberCount@CvCombatInfo@@QBEHXZ ENDP	; CvCombatInfo::getMaxDamageMemberCount
_TEXT	ENDS
PUBLIC	?setDamageMemberCount@CvCombatInfo@@QAEXH@Z	; CvCombatInfo::setDamageMemberCount
; Function compile flags: /Odtp
;	COMDAT ?setDamageMemberCount@CvCombatInfo@@QAEXH@Z
_TEXT	SEGMENT
tv69 = -16						; size = 4
_this$ = -12						; size = 4
$T218516 = -8						; size = 4
$T218510 = -4						; size = 4
_iDamageMemberCount$ = 8				; size = 4
?setDamageMemberCount@CvCombatInfo@@QAEXH@Z PROC	; CvCombatInfo::setDamageMemberCount, COMDAT
; _this$ = ecx

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 486  : 	CvAssertMsg(iDamageMemberCount >=0 && iDamageMemberCount <= MAX_DAMAGE_MEMBER_COUNT, "Invalid damage member count!");
; 487  : 	m_iDamageMemberCount = std::min(iDamageMemberCount, (int)MAX_DAMAGE_MEMBER_COUNT);

	mov	DWORD PTR $T218510[ebp], 32		; 00000020H
	mov	eax, DWORD PTR $T218510[ebp]
	cmp	eax, DWORD PTR _iDamageMemberCount$[ebp]
	jge	SHORT $LN5@setDamageM
	lea	ecx, DWORD PTR $T218510[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN6@setDamageM
$LN5@setDamageM:
	lea	edx, DWORD PTR _iDamageMemberCount$[ebp]
	mov	DWORD PTR tv69[ebp], edx
$LN6@setDamageM:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR $T218516[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T218516[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+216], eax

; 488  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setDamageMemberCount@CvCombatInfo@@QAEXH@Z ENDP	; CvCombatInfo::setDamageMemberCount
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??0CvMissionDefinition@@QAE@XZ			; CvMissionDefinition::CvMissionDefinition
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvMissionDefinition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$217196 = -4						; size = 4
??0CvMissionDefinition@@QAE@XZ PROC			; CvMissionDefinition::CvMissionDefinition, COMDAT
; _this$ = ecx

; 499  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+16], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 500  : 	for(int i=0; i<BATTLE_UNIT_COUNT; i++)

	mov	DWORD PTR _i$217196[ebp], 0
	jmp	SHORT $LN3@CvMissionD
$LN2@CvMissionD:
	mov	ecx, DWORD PTR _i$217196[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217196[ebp], ecx
$LN3@CvMissionD:
	cmp	DWORD PTR _i$217196[ebp], 3
	jge	SHORT $LN1@CvMissionD

; 501  : 		m_aUnits[i] = NULL;

	mov	edx, DWORD PTR _i$217196[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+4], 0
	jmp	SHORT $LN2@CvMissionD
$LN1@CvMissionD:

; 502  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvMissionDefinition@@QAE@XZ ENDP			; CvMissionDefinition::CvMissionDefinition
_TEXT	ENDS
PUBLIC	?getMissionType@CvMissionDefinition@@QBE?AW4MissionTypes@@XZ ; CvMissionDefinition::getMissionType
; Function compile flags: /Odtp
;	COMDAT ?getMissionType@CvMissionDefinition@@QBE?AW4MissionTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionType@CvMissionDefinition@@QBE?AW4MissionTypes@@XZ PROC ; CvMissionDefinition::getMissionType, COMDAT
; _this$ = ecx

; 505  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 	return m_eMissionType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 507  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionType@CvMissionDefinition@@QBE?AW4MissionTypes@@XZ ENDP ; CvMissionDefinition::getMissionType
_TEXT	ENDS
PUBLIC	?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z ; CvMissionDefinition::setMissionType
; Function compile flags: /Odtp
;	COMDAT ?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_missionType$ = 8					; size = 4
?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z PROC ; CvMissionDefinition::setMissionType, COMDAT
; _this$ = ecx

; 510  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 511  : 	m_eMissionType = missionType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _missionType$[ebp]
	mov	DWORD PTR [eax], ecx

; 512  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setMissionType@CvMissionDefinition@@QAEXW4MissionTypes@@@Z ENDP ; CvMissionDefinition::setMissionType
_TEXT	ENDS
PUBLIC	?getMissionTime@CvMissionDefinition@@QBEMXZ	; CvMissionDefinition::getMissionTime
; Function compile flags: /Odtp
;	COMDAT ?getMissionTime@CvMissionDefinition@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionTime@CvMissionDefinition@@QBEMXZ PROC	; CvMissionDefinition::getMissionTime, COMDAT
; _this$ = ecx

; 515  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 516  : 	return m_fMissionTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]

; 517  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionTime@CvMissionDefinition@@QBEMXZ ENDP	; CvMissionDefinition::getMissionTime
_TEXT	ENDS
PUBLIC	?setMissionTime@CvMissionDefinition@@QAEXM@Z	; CvMissionDefinition::setMissionTime
; Function compile flags: /Odtp
;	COMDAT ?setMissionTime@CvMissionDefinition@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
?setMissionTime@CvMissionDefinition@@QAEXM@Z PROC	; CvMissionDefinition::setMissionTime, COMDAT
; _this$ = ecx

; 520  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 521  : 	m_fMissionTime = time;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _time$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 522  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setMissionTime@CvMissionDefinition@@QAEXM@Z ENDP	; CvMissionDefinition::setMissionTime
_TEXT	ENDS
PUBLIC	?getUnit@CvMissionDefinition@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvMissionDefinition::getUnit
; Function compile flags: /Odtp
;	COMDAT ?getUnit@CvMissionDefinition@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getUnit@CvMissionDefinition@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z PROC ; CvMissionDefinition::getUnit, COMDAT
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 527  : 	return m_aUnits[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]

; 528  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getUnit@CvMissionDefinition@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ENDP ; CvMissionDefinition::getUnit
_TEXT	ENDS
PUBLIC	?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ; CvMissionDefinition::setUnit
; Function compile flags: /Odtp
;	COMDAT ?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_unit$ = 12						; size = 4
?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z PROC ; CvMissionDefinition::setUnit, COMDAT
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 533  : 	m_aUnits[unitType] = unit;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _unit$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 534  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setUnit@CvMissionDefinition@@QAEXW4BattleUnitTypes@@PAVCvUnit@@@Z ENDP ; CvMissionDefinition::setUnit
_TEXT	ENDS
PUBLIC	?getPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ	; CvMissionDefinition::getPlot
; Function compile flags: /Odtp
;	COMDAT ?getPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ PROC	; CvMissionDefinition::getPlot, COMDAT
; _this$ = ecx

; 537  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 538  : 	return m_pPlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 539  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ ENDP	; CvMissionDefinition::getPlot
_TEXT	ENDS
PUBLIC	?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z	; CvMissionDefinition::setPlot
; Function compile flags: /Odtp
;	COMDAT ?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plot$ = 8						; size = 4
?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z PROC	; CvMissionDefinition::setPlot, COMDAT
; _this$ = ecx

; 542  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 543  : 	m_pPlot = plot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plot$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 544  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z ENDP	; CvMissionDefinition::setPlot
_TEXT	ENDS
PUBLIC	?getSecondaryPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ ; CvMissionDefinition::getSecondaryPlot
; Function compile flags: /Odtp
;	COMDAT ?getSecondaryPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSecondaryPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ PROC ; CvMissionDefinition::getSecondaryPlot, COMDAT
; _this$ = ecx

; 547  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 548  : 	return m_pSecondaryPlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 549  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSecondaryPlot@CvMissionDefinition@@QBEPBVCvPlot@@XZ ENDP ; CvMissionDefinition::getSecondaryPlot
_TEXT	ENDS
PUBLIC	?setSecondaryPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z ; CvMissionDefinition::setSecondaryPlot
; Function compile flags: /Odtp
;	COMDAT ?setSecondaryPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_plot$ = 8						; size = 4
?setSecondaryPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z PROC ; CvMissionDefinition::setSecondaryPlot, COMDAT
; _this$ = ecx

; 552  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 	m_pSecondaryPlot = plot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _plot$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 554  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setSecondaryPlot@CvMissionDefinition@@QAEXPBVCvPlot@@@Z ENDP ; CvMissionDefinition::setSecondaryPlot
_TEXT	ENDS
PUBLIC	??0CvAirMissionDefinition@@QAE@XZ		; CvAirMissionDefinition::CvAirMissionDefinition
EXTRN	?getMISSION_AIRPATROL@CvTypes@@YA?BW4MissionTypes@@XZ:PROC ; CvTypes::getMISSION_AIRPATROL
; Function compile flags: /Odtp
;	COMDAT ??0CvAirMissionDefinition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvAirMissionDefinition@@QAE@XZ PROC			; CvAirMissionDefinition::CvAirMissionDefinition, COMDAT
; _this$ = ecx

; 565  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvMissionDefinition@@QAE@XZ		; CvMissionDefinition::CvMissionDefinition

; 566  : 	m_fMissionTime = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+16], xmm0

; 567  : 	m_eMissionType = CvTypes::getMISSION_AIRPATROL();

	call	?getMISSION_AIRPATROL@CvTypes@@YA?BW4MissionTypes@@XZ ; CvTypes::getMISSION_AIRPATROL
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 568  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvAirMissionDefinition@@QAE@XZ ENDP			; CvAirMissionDefinition::CvAirMissionDefinition
_TEXT	ENDS
PUBLIC	??0CvAirMissionDefinition@@QAE@ABV0@@Z		; CvAirMissionDefinition::CvAirMissionDefinition
; Function compile flags: /Odtp
;	COMDAT ??0CvAirMissionDefinition@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$217244 = -4						; size = 4
_kCopy$ = 8						; size = 4
??0CvAirMissionDefinition@@QAE@ABV0@@Z PROC		; CvAirMissionDefinition::CvAirMissionDefinition, COMDAT
; _this$ = ecx

; 576  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvMissionDefinition@@QAE@XZ		; CvMissionDefinition::CvMissionDefinition

; 577  : 	m_fMissionTime = kCopy.m_fMissionTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _kCopy$[ebp]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+16]

; 578  : 	m_eMissionType = kCopy.m_eMissionType;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _kCopy$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 579  : 	m_pPlot = kCopy.m_pPlot;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _kCopy$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx

; 580  : 
; 581  : 	for(int i=0; i<BATTLE_UNIT_COUNT; i++)

	mov	DWORD PTR _i$217244[ebp], 0
	jmp	SHORT $LN3@CvAirMissi
$LN2@CvAirMissi:
	mov	edx, DWORD PTR _i$217244[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217244[ebp], edx
$LN3@CvAirMissi:
	cmp	DWORD PTR _i$217244[ebp], 3
	jge	SHORT $LN1@CvAirMissi

; 582  : 	{
; 583  : 		m_aDamage[i] = kCopy.m_aDamage[i];

	mov	eax, DWORD PTR _i$217244[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$217244[ebp]
	mov	esi, DWORD PTR _kCopy$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+28]
	mov	DWORD PTR [ecx+eax*4+28], edx

; 584  : 		m_aUnits[i] = kCopy.m_aUnits[i];

	mov	eax, DWORD PTR _i$217244[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$217244[ebp]
	mov	esi, DWORD PTR _kCopy$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	mov	DWORD PTR [ecx+eax*4+4], edx
	jmp	SHORT $LN2@CvAirMissi
$LN1@CvAirMissi:

; 585  : 	}
; 586  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvAirMissionDefinition@@QAE@ABV0@@Z ENDP		; CvAirMissionDefinition::CvAirMissionDefinition
_TEXT	ENDS
PUBLIC	?getDamage@CvAirMissionDefinition@@QBEHW4BattleUnitTypes@@@Z ; CvAirMissionDefinition::getDamage
; Function compile flags: /Odtp
;	COMDAT ?getDamage@CvAirMissionDefinition@@QBEHW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?getDamage@CvAirMissionDefinition@@QBEHW4BattleUnitTypes@@@Z PROC ; CvAirMissionDefinition::getDamage, COMDAT
; _this$ = ecx

; 589  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 590  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 591  : 	return m_aDamage[unitType];

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+28]

; 592  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getDamage@CvAirMissionDefinition@@QBEHW4BattleUnitTypes@@@Z ENDP ; CvAirMissionDefinition::getDamage
_TEXT	ENDS
PUBLIC	?setDamage@CvAirMissionDefinition@@QAEXW4BattleUnitTypes@@H@Z ; CvAirMissionDefinition::setDamage
; Function compile flags: /Odtp
;	COMDAT ?setDamage@CvAirMissionDefinition@@QAEXW4BattleUnitTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
_damage$ = 12						; size = 4
?setDamage@CvAirMissionDefinition@@QAEXW4BattleUnitTypes@@H@Z PROC ; CvAirMissionDefinition::setDamage, COMDAT
; _this$ = ecx

; 595  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 597  : 	m_aDamage[unitType] = damage;

	mov	ecx, DWORD PTR _unitType$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _damage$[ebp]
	mov	DWORD PTR [edx+ecx*4+28], eax

; 598  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?setDamage@CvAirMissionDefinition@@QAEXW4BattleUnitTypes@@H@Z ENDP ; CvAirMissionDefinition::setDamage
_TEXT	ENDS
PUBLIC	?isDead@CvAirMissionDefinition@@QBE_NW4BattleUnitTypes@@@Z ; CvAirMissionDefinition::isDead
EXTRN	?GetMaxHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetMaxHitPoints
; Function compile flags: /Odtp
;	COMDAT ?isDead@CvAirMissionDefinition@@QBE_NW4BattleUnitTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unitType$ = 8						; size = 4
?isDead@CvAirMissionDefinition@@QBE_NW4BattleUnitTypes@@@Z PROC ; CvAirMissionDefinition::isDead, COMDAT
; _this$ = ecx

; 601  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 602  : 	checkBattleUnitType(unitType);

	mov	eax, DWORD PTR _unitType$[ebp]
	push	eax
	call	?checkBattleUnitType@@YAXW4BattleUnitTypes@@@Z ; checkBattleUnitType
	add	esp, 4

; 603  : 	CvAssertMsg(getUnit(unitType) != NULL, "[Jason] Invalid battle unit type.");
; 604  : 	if(getDamage(unitType) >= getUnit(unitType)->GetMaxHitPoints())

	mov	ecx, DWORD PTR _unitType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getDamage@CvAirMissionDefinition@@QBEHW4BattleUnitTypes@@@Z ; CvAirMissionDefinition::getDamage
	mov	esi, eax
	mov	edx, DWORD PTR _unitType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getUnit@CvMissionDefinition@@QBEPAVCvUnit@@W4BattleUnitTypes@@@Z ; CvMissionDefinition::getUnit
	mov	ecx, eax
	call	?GetMaxHitPoints@CvUnit@@QBEHXZ		; CvUnit::GetMaxHitPoints
	cmp	esi, eax
	jl	SHORT $LN2@isDead

; 605  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@isDead

; 606  : 	else

	jmp	SHORT $LN3@isDead
$LN2@isDead:

; 607  : 		return false;

	xor	al, al
$LN3@isDead:

; 608  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?isDead@CvAirMissionDefinition@@QBE_NW4BattleUnitTypes@@@Z ENDP ; CvAirMissionDefinition::isDead
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUOrderData@@@Z	; operator<<
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4OrderTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUOrderData@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUOrderData@@@Z PROC	; operator<<, COMDAT

; 639  : {

	push	ebp
	mov	ebp, esp

; 640  : 	saveTo << readFrom.eOrderType;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4OrderTypes@@@Z ; operator<<
	add	esp, 8

; 641  : 	saveTo << readFrom.iData1;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 642  : 	saveTo << readFrom.iData2;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 643  : 	saveTo << readFrom.bSave;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 644  : 	saveTo << readFrom.bRush;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 13					; 0000000dH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 645  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 646  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUOrderData@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUOrderData@@@Z	; operator>>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4OrderTypes@@@Z:PROC ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUOrderData@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUOrderData@@@Z PROC	; operator>>, COMDAT

; 649  : {

	push	ebp
	mov	ebp, esp

; 650  : 	loadFrom >> writeTo.eOrderType;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4OrderTypes@@@Z ; operator>>
	add	esp, 8

; 651  : 	loadFrom >> writeTo.iData1;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 652  : 	loadFrom >> writeTo.iData2;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 653  : 	loadFrom >> writeTo.bSave;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 654  : 	loadFrom >> writeTo.bRush;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 13					; 0000000dH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 655  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 656  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUOrderData@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$vector@HV?$allocator@H@std@@@std@@@Z ; operator<<<int>
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUPlotExtraYield@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUPlotExtraYield@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUPlotExtraYield@@@Z PROC	; operator<<, COMDAT

; 659  : {

	push	ebp
	mov	ebp, esp

; 660  : 	saveTo << readFrom.m_iX;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 661  : 	saveTo << readFrom.m_iY;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 662  : 	saveTo << readFrom.m_aeExtraYield;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$vector@HV?$allocator@H@std@@@std@@@Z ; operator<<<int>
	add	esp, 8

; 663  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 664  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUPlotExtraYield@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; operator>><int>
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUPlotExtraYield@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUPlotExtraYield@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUPlotExtraYield@@@Z PROC	; operator>>, COMDAT

; 667  : {

	push	ebp
	mov	ebp, esp

; 668  : 	loadFrom >> writeTo.m_iX;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 669  : 	loadFrom >> writeTo.m_iY;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 670  : 	loadFrom >> writeTo.m_aeExtraYield;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; operator>><int>
	add	esp, 8

; 671  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 672  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUPlotExtraYield@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUPlotExtraCost@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUPlotExtraCost@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUPlotExtraCost@@@Z PROC	; operator<<, COMDAT

; 675  : {

	push	ebp
	mov	ebp, esp

; 676  : 	saveTo << readFrom.m_iX;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 677  : 	saveTo << readFrom.m_iY;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 678  : 	saveTo << readFrom.m_iCost;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 679  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 680  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUPlotExtraCost@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUPlotExtraCost@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUPlotExtraCost@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUPlotExtraCost@@@Z PROC	; operator>>, COMDAT

; 683  : {

	push	ebp
	mov	ebp, esp

; 684  : 	loadFrom >> writeTo.m_iX;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 685  : 	loadFrom >> writeTo.m_iY;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 686  : 	loadFrom >> writeTo.m_iCost;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 687  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 688  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUPlotExtraCost@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUIDInfo@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUIDInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUIDInfo@@@Z PROC		; operator<<, COMDAT

; 692  : {

	push	ebp
	mov	ebp, esp

; 693  : 	saveTo << readFrom.eOwner;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 694  : 	saveTo << readFrom.iID;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 695  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 696  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUIDInfo@@@Z ENDP		; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUIDInfo@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUIDInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUIDInfo@@@Z PROC		; operator>>, COMDAT

; 699  : {

	push	ebp
	mov	ebp, esp

; 700  : 	loadFrom >> writeTo.eOwner;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 701  : 	loadFrom >> writeTo.iID;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 702  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 703  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUIDInfo@@@Z ENDP		; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABUMissionData@@@Z	; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4MissionTypes@@@Z:PROC ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABUMissionData@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABUMissionData@@@Z PROC	; operator<<, COMDAT

; 706  : {

	push	ebp
	mov	ebp, esp

; 707  : 	saveTo << readFrom.eMissionType;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4MissionTypes@@@Z ; operator<<
	add	esp, 8

; 708  : 	saveTo << readFrom.iData1;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 709  : 	saveTo << readFrom.iData2;

	mov	eax, DWORD PTR _readFrom$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 710  : 	saveTo << readFrom.iFlags;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 711  : 	saveTo << readFrom.iPushTurn;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 712  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 713  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABUMissionData@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAUMissionData@@@Z	; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4MissionTypes@@@Z:PROC ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAUMissionData@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAUMissionData@@@Z PROC	; operator>>, COMDAT

; 715  : {

	push	ebp
	mov	ebp, esp

; 716  : 	loadFrom >> writeTo.eMissionType;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4MissionTypes@@@Z ; operator>>
	add	esp, 8

; 717  : 	loadFrom >> writeTo.iData1;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 718  : 	loadFrom >> writeTo.iData2;

	mov	eax, DWORD PTR _writeTo$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 719  : 	loadFrom >> writeTo.iFlags;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 720  : 	loadFrom >> writeTo.iPushTurn;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 721  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 722  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAUMissionData@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	?insert@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAE?AV?$_Vector_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@V?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@ABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::insert
PUBLIC	??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAEXABUVoteSelectionSubData@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T218709 = -32						; size = 4
$T218699 = -28						; size = 4
$T218689 = -24						; size = 4
__Cat$218697 = -19					; size = 1
$T218695 = -18						; size = 1
$T218694 = -17						; size = 1
$T218666 = -16						; size = 4
$T218662 = -12						; size = 4
$T218661 = -8						; size = 4
$T218660 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAEXABUVoteSelectionSubData@@@Z PROC ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR $T218666[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back
$LN9@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back:
	mov	edx, DWORD PTR $T218666[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218699[ebp], ecx
	mov	edx, DWORD PTR $T218699[ebp]
	mov	DWORD PTR $T218689[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T218694[ebp], al
	mov	cl, BYTE PTR __Cat$218697[ebp]
	mov	BYTE PTR $T218695[ebp], cl
	movzx	edx, BYTE PTR $T218694[ebp]
	push	edx
	movzx	eax, BYTE PTR $T218695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T218689[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 44					; 0000002cH
	add	ecx, DWORD PTR $T218699[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218709[ebp], ecx
	mov	edx, DWORD PTR $T218709[ebp]
	mov	DWORD PTR $T218661[ebp], edx
	mov	eax, DWORD PTR $T218661[ebp]
	mov	DWORD PTR $T218660[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218660[ebp]
	push	edx
	lea	eax, DWORD PTR $T218662[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAE?AV?$_Vector_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@V?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@ABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::insert
$LN3@push_back:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAEXABUVoteSelectionSubData@@@Z ENDP ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAE?AV?$_Vector_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@V?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@ABUVoteSelectionSubData@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$218829 = -24					; size = 4
$T218812 = -20						; size = 4
$T218793 = -16						; size = 4
$T218780 = -12						; size = 4
$T218777 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAE?AV?$_Vector_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@V?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@ABUVoteSelectionSubData@@@Z PROC ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218793[ebp], eax
	mov	ecx, DWORD PTR $T218793[ebp]
	mov	DWORD PTR $T218777[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T218777[ebp]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218812[ebp], eax
	mov	ecx, DWORD PTR $T218812[ebp]
	mov	DWORD PTR $T218780[ebp], ecx
	mov	edx, DWORD PTR $T218780[ebp]
	mov	DWORD PTR __Tmp$218829[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Tmp$218829[ebp]
	mov	DWORD PTR __Tmp$218829[ebp], eax
	mov	ecx, DWORD PTR __Tmp$218829[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@QAE?AV?$_Vector_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@V?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@ABUVoteSelectionSubData@@@Z ENDP ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::insert
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUVoteSelectionSubData@@PAU1@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00@Z ; stdext::_Unchecked_move_backward<VoteSelectionSubData *,VoteSelectionSubData *>
PUBLIC	??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
PUBLIC	??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z	; VoteSelectionSubData::operator=
PUBLIC	??0VoteSelectionSubData@@QAE@ABU0@@Z		; VoteSelectionSubData::VoteSelectionSubData
PUBLIC	??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
PUBLIC	??$_Allocate@UVoteSelectionSubData@@@std@@YAPAUVoteSelectionSubData@@IPAU1@@Z ; std::_Allocate<VoteSelectionSubData>
PUBLIC	?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Xlen
PUBLIC	__$ArrayPad$
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$24 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$2
__catchsym$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$23 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$23
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$24
__unwindtable$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$5
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z
_TEXT	SEGMENT
tv84 = -532						; size = 4
tv312 = -528						; size = 4
tv298 = -524						; size = 4
tv290 = -520						; size = 4
_this$ = -516						; size = 4
$T219729 = -512						; size = 4
$T219715 = -508						; size = 4
$T219658 = -464						; size = 4
$T219639 = -460						; size = 4
$T219622 = -453						; size = 1
$T219621 = -452						; size = 4
$T219611 = -448						; size = 4
$T219610 = -444						; size = 4
__Cat$219653 = -438					; size = 1
$T219651 = -437						; size = 1
$T219650 = -436						; size = 1
__Cat$219647 = -435					; size = 1
$T219644 = -434						; size = 1
$T219643 = -433						; size = 1
$T219575 = -428						; size = 4
$T219568 = -424						; size = 4
$T219560 = -420						; size = 4
$T219547 = -412						; size = 4
$T219522 = -408						; size = 4
$T219521 = -404						; size = 4
$T219498 = -400						; size = 4
$T219497 = -396						; size = 4
$T219449 = -392						; size = 4
__Cat$219528 = -386					; size = 1
$T219526 = -385						; size = 1
$T219431 = -384						; size = 4
$T219430 = -380						; size = 4
$T219420 = -376						; size = 4
__Cat$219426 = -371					; size = 1
$T219424 = -370						; size = 1
$T219423 = -369						; size = 1
$T219404 = -368						; size = 4
$T219392 = -364						; size = 4
$T219382 = -357						; size = 1
$T219381 = -356						; size = 4
__Cat$219399 = -351					; size = 1
$T219396 = -350						; size = 1
$T219395 = -349						; size = 1
$T219362 = -344						; size = 4
$T219361 = -340						; size = 4
$T219357 = -336						; size = 4
$T219356 = -332						; size = 4
$T219331 = -328						; size = 4
$T219330 = -324						; size = 4
$T219307 = -320						; size = 4
$T219306 = -316						; size = 4
$T219258 = -312						; size = 4
__Cat$219338 = -306					; size = 1
$T219335 = -305						; size = 1
$T219210 = -304						; size = 4
$T219209 = -300						; size = 4
$T219186 = -296						; size = 4
$T219185 = -292						; size = 4
$T219137 = -288						; size = 4
__Cat$219231 = -282					; size = 1
$T219229 = -281						; size = 1
$T219095 = -280						; size = 4
$T219094 = -276						; size = 4
$T219071 = -272						; size = 4
$T219070 = -268						; size = 4
$T219022 = -264						; size = 4
__Cat$219102 = -258					; size = 1
$T219100 = -257						; size = 1
$T219004 = -256						; size = 4
$T218992 = -252						; size = 4
$T218982 = -245						; size = 1
$T218981 = -244						; size = 4
__Cat$219000 = -239					; size = 1
$T218998 = -238						; size = 1
$T218997 = -237						; size = 1
$T218969 = -236						; size = 4
$T218957 = -232						; size = 4
$T218947 = -225						; size = 1
$T218946 = -224						; size = 4
__Cat$218965 = -219					; size = 1
$T218963 = -218						; size = 1
$T218962 = -217						; size = 1
$T218934 = -216						; size = 4
$T218924 = -212						; size = 4
__Cat$218932 = -207					; size = 1
$T218930 = -206						; size = 1
$T218929 = -205						; size = 1
__Count$218896 = -204					; size = 4
__Count$218870 = -132					; size = 4
__Tmp$217465 = -128					; size = 44
__Oldend$217466 = -84					; size = 4
__Tmp$217455 = -80					; size = 44
__$ArrayPad$ = -36					; size = 4
__Ncopied$217442 = -32					; size = 4
__Newvec$217440 = -28					; size = 4
__Whereoff$217441 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z PROC ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN31@Insert_n
	mov	DWORD PTR tv290[ebp], 0
	jmp	SHORT $LN29@Insert_n
$LN31@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR tv290[ebp], eax
$LN29@Insert_n:
	mov	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$218870[ebp], 97612893	; 05d1745dH
	cmp	DWORD PTR __Count$218870[ebp], 0
	jbe	SHORT $LN37@Insert_n
	mov	eax, DWORD PTR __Count$218870[ebp]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN39@Insert_n
$LN37@Insert_n:
	mov	DWORD PTR tv298[ebp], 1
$LN39@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	edx, DWORD PTR tv298[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN44@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN44@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$218896[ebp], 97612893	; 05d1745dH
	cmp	DWORD PTR __Count$218896[ebp], 0
	jbe	SHORT $LN50@Insert_n
	mov	edx, DWORD PTR __Count$218896[ebp]
	mov	DWORD PTR tv312[ebp], edx
	jmp	SHORT $LN46@Insert_n
$LN50@Insert_n:
	mov	DWORD PTR tv312[ebp], 1
$LN46@Insert_n:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv312[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN56@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN56@Insert_n:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UVoteSelectionSubData@@@std@@YAPAUVoteSelectionSubData@@IPAU1@@Z ; std::_Allocate<VoteSelectionSubData>
	add	esp, 8
	mov	DWORD PTR __Newvec$217440[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$217441[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$217442[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$217441[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T218934[ebp], edx
	mov	eax, DWORD PTR $T218934[ebp]
	mov	DWORD PTR $T218924[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T218929[ebp], cl
	mov	dl, BYTE PTR __Cat$218932[ebp]
	mov	BYTE PTR $T218930[ebp], dl
	movzx	eax, BYTE PTR $T218929[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T218930[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218924[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$217442[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$217442[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T218969[ebp], edx
	mov	eax, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T218957[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T218962[ebp], cl
	mov	dl, BYTE PTR __Cat$218965[ebp]
	mov	BYTE PTR $T218963[ebp], dl
	mov	al, BYTE PTR $T218962[ebp]
	mov	BYTE PTR $T218947[ebp], al
	mov	ecx, DWORD PTR $T218957[ebp]
	mov	DWORD PTR $T218946[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T218946[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218969[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$217442[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$217442[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T219004[ebp], edx
	mov	eax, DWORD PTR __Whereoff$217441[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T218992[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T218997[ebp], cl
	mov	dl, BYTE PTR __Cat$219000[ebp]
	mov	BYTE PTR $T218998[ebp], dl
	mov	al, BYTE PTR $T218997[ebp]
	mov	BYTE PTR $T218982[ebp], al
	mov	ecx, DWORD PTR $T218992[ebp]
	mov	DWORD PTR $T218981[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T218981[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219004[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$217442[ebp], 1
	jle	$LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$217441[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T219095[ebp], eax
	mov	ecx, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T219094[ebp], ecx
	mov	dl, BYTE PTR __Cat$219102[ebp]
	mov	BYTE PTR $T219100[ebp], dl
	mov	eax, DWORD PTR $T219095[ebp]
	mov	DWORD PTR $T219071[ebp], eax
	mov	ecx, DWORD PTR $T219094[ebp]
	mov	DWORD PTR $T219070[ebp], ecx
	jmp	SHORT $LN88@Insert_n
$LN87@Insert_n:
	mov	edx, DWORD PTR $T219070[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR $T219070[ebp], edx
$LN88@Insert_n:
	mov	eax, DWORD PTR $T219070[ebp]
	cmp	eax, DWORD PTR $T219071[ebp]
	je	SHORT $LN7@Insert_n
	mov	ecx, DWORD PTR $T219070[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T219022[ebp], ecx
	mov	ecx, DWORD PTR $T219022[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN91@Insert_n
	mov	eax, DWORD PTR $T219070[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN91@Insert_n:
	jmp	SHORT $LN87@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$217442[ebp], 0
	jle	$LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR __Whereoff$217441[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Newvec$217440[ebp]
	add	edx, ecx
	mov	DWORD PTR $T219210[ebp], edx
	mov	eax, DWORD PTR __Whereoff$217441[ebp]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR $T219209[ebp], eax
	mov	cl, BYTE PTR __Cat$219231[ebp]
	mov	BYTE PTR $T219229[ebp], cl
	mov	edx, DWORD PTR $T219210[ebp]
	mov	DWORD PTR $T219186[ebp], edx
	mov	eax, DWORD PTR $T219209[ebp]
	mov	DWORD PTR $T219185[ebp], eax
	jmp	SHORT $LN112@Insert_n
$LN111@Insert_n:
	mov	ecx, DWORD PTR $T219185[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T219185[ebp], ecx
$LN112@Insert_n:
	mov	edx, DWORD PTR $T219185[ebp]
	cmp	edx, DWORD PTR $T219186[ebp]
	je	SHORT $LN6@Insert_n
	mov	eax, DWORD PTR $T219185[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T219137[ebp], eax
	mov	ecx, DWORD PTR $T219137[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN115@Insert_n
	mov	edx, DWORD PTR $T219185[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN115@Insert_n:
	jmp	SHORT $LN111@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$217440[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN130@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN130@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T219357[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T219356[ebp], eax
	mov	ecx, DWORD PTR $T219357[ebp]
	mov	DWORD PTR $T219331[ebp], ecx
	mov	edx, DWORD PTR $T219356[ebp]
	mov	DWORD PTR $T219330[ebp], edx
	mov	al, BYTE PTR __Cat$219338[ebp]
	mov	BYTE PTR $T219335[ebp], al
	mov	ecx, DWORD PTR $T219331[ebp]
	mov	DWORD PTR $T219307[ebp], ecx
	mov	edx, DWORD PTR $T219330[ebp]
	mov	DWORD PTR $T219306[ebp], edx
	jmp	SHORT $LN140@Insert_n
$LN139@Insert_n:
	mov	eax, DWORD PTR $T219306[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T219306[ebp], eax
$LN140@Insert_n:
	mov	ecx, DWORD PTR $T219306[ebp]
	cmp	ecx, DWORD PTR $T219307[ebp]
	je	SHORT $LN132@Insert_n
	mov	edx, DWORD PTR $T219306[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T219258[ebp], edx
	mov	ecx, DWORD PTR $T219258[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN143@Insert_n
	mov	ecx, DWORD PTR $T219306[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN143@Insert_n:
	jmp	SHORT $LN139@Insert_n
$LN132@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	DWORD PTR $T219362[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T219361[ebp], eax
	mov	ecx, DWORD PTR $T219361[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Newvec$217440[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 44					; 0000002cH
	add	ecx, DWORD PTR __Newvec$217440[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$217440[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$217455[ebp]
	call	??0VoteSelectionSubData@@QAE@ABU0@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T219404[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T219392[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T219395[ebp], al
	mov	cl, BYTE PTR __Cat$219399[ebp]
	mov	BYTE PTR $T219396[ebp], cl
	mov	dl, BYTE PTR $T219395[ebp]
	mov	BYTE PTR $T219382[ebp], dl
	mov	eax, DWORD PTR $T219392[ebp]
	mov	DWORD PTR $T219381[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T219381[ebp]
	push	edx
	mov	eax, DWORD PTR $T219404[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
	add	esp, 16					; 00000010H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 44					; 0000002cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T219431[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T219430[ebp], ecx
	mov	edx, DWORD PTR $T219430[ebp]
	mov	DWORD PTR $T219420[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T219423[ebp], al
	mov	cl, BYTE PTR __Cat$219426[ebp]
	mov	BYTE PTR $T219424[ebp], cl
	movzx	edx, BYTE PTR $T219423[ebp]
	push	edx
	movzx	eax, BYTE PTR $T219424[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$217455[ebp]
	push	edx
	mov	eax, DWORD PTR $T219431[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219420[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >
	add	esp, 24					; 00000018H
	jmp	$LN21@Insert_n
__catch$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T219547[ebp], edx
	mov	ecx, DWORD PTR $T219547[ebp]
	mov	DWORD PTR $T219522[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T219521[ebp], edx
	mov	al, BYTE PTR __Cat$219528[ebp]
	mov	BYTE PTR $T219526[ebp], al
	mov	ecx, DWORD PTR $T219522[ebp]
	mov	DWORD PTR $T219498[ebp], ecx
	mov	edx, DWORD PTR $T219521[ebp]
	mov	DWORD PTR $T219497[ebp], edx
	jmp	SHORT $LN186@Insert_n
$LN185@Insert_n:
	mov	eax, DWORD PTR $T219497[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T219497[ebp], eax
$LN186@Insert_n:
	mov	ecx, DWORD PTR $T219497[ebp]
	cmp	ecx, DWORD PTR $T219498[ebp]
	je	SHORT $LN178@Insert_n
	mov	edx, DWORD PTR $T219497[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T219449[ebp], edx
	mov	ecx, DWORD PTR $T219449[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN189@Insert_n
	mov	ecx, DWORD PTR $T219497[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN189@Insert_n:
	jmp	SHORT $LN185@Insert_n
$LN178@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	mov	eax, __tryend$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], 2
__tryend$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T219568[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T219560[ebp], edx
	jmp	SHORT $LN206@Insert_n
$LN205@Insert_n:
	mov	eax, DWORD PTR $T219560[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T219560[ebp], eax
$LN206@Insert_n:
	mov	ecx, DWORD PTR $T219560[ebp]
	cmp	ecx, DWORD PTR $T219568[ebp]
	je	SHORT $LN202@Insert_n
	lea	edx, DWORD PTR __Tmp$217455[ebp]
	push	edx
	mov	ecx, DWORD PTR $T219560[ebp]
	call	??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN205@Insert_n
$LN202@Insert_n:

; 1232 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	eax, DWORD PTR __Tmp$217455[ebp+16]
	mov	DWORD PTR $T219575[ebp], eax
	mov	ecx, DWORD PTR $T219575[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$217465[ebp]
	call	??0VoteSelectionSubData@@QAE@ABU0@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 5

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Oldend$217466[ebp], eax

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T219658[ebp], edx
	mov	eax, DWORD PTR $T219658[ebp]
	mov	DWORD PTR $T219639[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T219643[ebp], cl
	mov	dl, BYTE PTR __Cat$219647[ebp]
	mov	BYTE PTR $T219644[ebp], dl
	mov	al, BYTE PTR $T219643[ebp]
	mov	BYTE PTR $T219622[ebp], al
	mov	ecx, DWORD PTR $T219639[ebp]
	mov	DWORD PTR $T219621[ebp], ecx
	mov	edx, DWORD PTR $T219621[ebp]
	mov	DWORD PTR $T219611[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR __Oldend$217466[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T219610[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T219650[ebp], dl
	mov	al, BYTE PTR __Cat$219653[ebp]
	mov	BYTE PTR $T219651[ebp], al
	movzx	ecx, BYTE PTR $T219650[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T219651[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219611[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$217466[ebp]
	push	edx
	mov	eax, DWORD PTR $T219610[ebp]
	push	eax
	call	??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$217466[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR __Oldend$217466[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$_Unchecked_move_backward@PAUVoteSelectionSubData@@PAU1@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00@Z ; stdext::_Unchecked_move_backward<VoteSelectionSubData *,VoteSelectionSubData *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T219715[ebp], eax
	jmp	SHORT $LN257@Insert_n
$LN256@Insert_n:
	mov	ecx, DWORD PTR $T219715[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T219715[ebp], ecx
$LN257@Insert_n:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T219715[ebp], edx
	je	SHORT $LN253@Insert_n
	lea	eax, DWORD PTR __Tmp$217465[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219715[ebp]
	call	??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN256@Insert_n
$LN253@Insert_n:

; 1249 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Tmp$217465[ebp+16]
	mov	DWORD PTR $T219729[ebp], ecx
	mov	ecx, DWORD PTR $T219729[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@Insert_n:

; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$217455[ebp]
	jmp	??1VoteSelectionSubData@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$217465[ebp]
	jmp	??1VoteSelectionSubData@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@2@IABUVoteSelectionSubData@@@Z ENDP ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Insert_n
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??0VoteSelectionSubData@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T219752 = -4						; size = 4
___that$ = 8						; size = 4
??0VoteSelectionSubData@@QAE@ABU0@@Z PROC		; VoteSelectionSubData::VoteSelectionSubData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T219752[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR $T219752[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VoteSelectionSubData@@QAE@ABU0@@Z ENDP		; VoteSelectionSubData::VoteSelectionSubData
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAUVoteSelectionSubData@@PAU1@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00@Z
_TEXT	SEGMENT
$T219801 = -38						; size = 1
$T219800 = -37						; size = 1
$T219799 = -36						; size = 4
$T219798 = -32						; size = 4
$T219786 = -25						; size = 1
$T219785 = -24						; size = 4
$T219784 = -20						; size = 4
$T219783 = -16						; size = 4
__Cat$219792 = -8					; size = 1
$T219790 = -7						; size = 1
$T219789 = -6						; size = 1
__Cat$219760 = -4					; size = 1
$T219757 = -3						; size = 1
$T219756 = -2						; size = 1
$T219755 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUVoteSelectionSubData@@PAU1@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<VoteSelectionSubData *,VoteSelectionSubData *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T219755[ebp], al
	mov	cl, BYTE PTR __Cat$219760[ebp]
	mov	BYTE PTR $T219756[ebp], cl
	mov	dl, BYTE PTR $T219755[ebp]
	mov	BYTE PTR $T219801[ebp], dl
	mov	al, BYTE PTR $T219757[ebp]
	mov	BYTE PTR $T219800[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T219799[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T219798[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T219789[ebp], al
	mov	cl, BYTE PTR __Cat$219792[ebp]
	mov	BYTE PTR $T219790[ebp], cl
	mov	dl, BYTE PTR $T219789[ebp]
	mov	BYTE PTR $T219786[ebp], dl
	mov	eax, DWORD PTR $T219799[ebp]
	mov	DWORD PTR $T219785[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T219784[ebp], ecx
	mov	edx, DWORD PTR $T219798[ebp]
	mov	DWORD PTR $T219783[ebp], edx
$LN12@Unchecked_:
	mov	eax, DWORD PTR $T219783[ebp]
	cmp	eax, DWORD PTR $T219784[ebp]
	je	SHORT $LN7@Unchecked_
	mov	ecx, DWORD PTR $T219784[ebp]
	sub	ecx, 44					; 0000002cH
	mov	DWORD PTR $T219784[ebp], ecx
	mov	edx, DWORD PTR $T219785[ebp]
	sub	edx, 44					; 0000002cH
	mov	DWORD PTR $T219785[ebp], edx
	mov	eax, DWORD PTR $T219784[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219785[ebp]
	call	??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z
	jmp	SHORT $LN12@Unchecked_
$LN7@Unchecked_:
	mov	eax, DWORD PTR $T219785[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAUVoteSelectionSubData@@PAU1@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<VoteSelectionSubData *,VoteSelectionSubData *>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -48						; size = 4
tv68 = -44						; size = 4
$T219854 = -40						; size = 4
$T219840 = -32						; size = 4
$T219839 = -28						; size = 4
__Vptr$219837 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$219837[ebp], eax
	mov	ecx, DWORD PTR __Vptr$219837[ebp]
	mov	DWORD PTR $T219840[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T219840[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T219840[ebp]
	call	??0VoteSelectionSubData@@QAE@ABU0@@Z
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN19@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_fil:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T219839[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T219854[ebp], ecx
	mov	ecx, DWORD PTR $T219854[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN29@Uninit_fil
	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN29@Uninit_fil:
	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$219837[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219840[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUVoteSelectionSubData@@IU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAXPAUVoteSelectionSubData@@IABU1@AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<VoteSelectionSubData *,unsigned int,VoteSelectionSubData,std::allocator<VoteSelectionSubData> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T219902 = -4						; size = 4
___that$ = 8						; size = 4
??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z PROC		; VoteSelectionSubData::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T219902[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR $T219902[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4VoteSelectionSubData@@QAEAAU0@ABU0@@Z ENDP		; VoteSelectionSubData::operator=
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z
_TEXT	SEGMENT
__Cat$219909 = -3					; size = 1
$T219906 = -2						; size = 1
$T219905 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T219905[ebp], al
	mov	cl, BYTE PTR __Cat$219909[ebp]
	mov	BYTE PTR $T219906[ebp], cl
	movzx	edx, BYTE PTR $T219905[ebp]
	push	edx
	movzx	eax, BYTE PTR $T219906[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@stdext@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -48						; size = 4
tv68 = -44						; size = 4
$T219963 = -40						; size = 4
$T219949 = -32						; size = 4
$T219948 = -28						; size = 4
__Vptr$219946 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$219946[ebp], ecx
	mov	edx, DWORD PTR __Vptr$219946[ebp]
	mov	DWORD PTR $T219949[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T219949[ebp], 0
	je	SHORT $LN18@Uninit_cop
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219949[ebp]
	call	??0VoteSelectionSubData@@QAE@ABU0@@Z
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN19@Uninit_cop
$LN18@Uninit_cop:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_cop:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T219948[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T219963[ebp], edx
	mov	ecx, DWORD PTR $T219963[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN29@Uninit_cop
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN29@Uninit_cop:
	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$219946[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219949[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUVoteSelectionSubData@@PAU1@V?$allocator@UVoteSelectionSubData@@@std@@@std@@YAPAUVoteSelectionSubData@@PAU1@00AAV?$allocator@UVoteSelectionSubData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<VoteSelectionSubData *,VoteSelectionSubData *,std::allocator<VoteSelectionSubData> >
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstructs.h
;	COMDAT ??0CvCombatMemberEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCombatMemberEntry@@QAE@XZ PROC			; CvCombatMemberEntry::CvCombatMemberEntry, COMDAT
; _this$ = ecx

; 101  : 	CvCombatMemberEntry() : m_ePlayer(NO_PLAYER), m_iID(-1), m_bfFlags(0), m_iDamage(0), m_iFinalDamage(0), m_iMaxHitPoints(0), m_eCombatType(NO_UNITCOMBAT), m_eEra(NO_ERA), m_iX(0), m_iY(0), m_uiWeaponType(0), m_fWeaponOption(0.f) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+8], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+10], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+12], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+14], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+16], cx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCombatMemberEntry@@QAE@XZ ENDP			; CvCombatMemberEntry::CvCombatMemberEntry
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvstructs.h
CONST	ENDS
;	COMDAT ??0VoteSelectionSubData@@QAE@XZ
_TEXT	SEGMENT
tv82 = -12						; size = 4
_this$ = -8						; size = 4
$T220017 = -4						; size = 4
??0VoteSelectionSubData@@QAE@XZ PROC			; VoteSelectionSubData::VoteSelectionSubData, COMDAT
; _this$ = ecx

; 69   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T220017[ebp], ecx
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN6@VoteSelect
	mov	DWORD PTR tv82[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN7@VoteSelect
$LN6@VoteSelect:
	mov	DWORD PTR tv82[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN7@VoteSelect:
	mov	eax, DWORD PTR tv82[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220017[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z

; 70   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VoteSelectionSubData@@QAE@XZ ENDP			; VoteSelectionSubData::VoteSelectionSubData
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1VoteSelectionSubData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T220025 = -4						; size = 4
??1VoteSelectionSubData@@QAE@XZ PROC			; VoteSelectionSubData::~VoteSelectionSubData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T220025[ebp], eax
	mov	ecx, DWORD PTR $T220025[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1VoteSelectionSubData@@QAE@XZ ENDP			; VoteSelectionSubData::~VoteSelectionSubData
_TEXT	ENDS
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isCity@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T220031 = -4						; size = 4
?isCity@CvPlot@@QBE_NXZ PROC				; CvPlot::isCity, COMDAT
; _this$ = ecx

; 244  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@isCity
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@isCity

; 246  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID)) != NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220031[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T220031[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	neg	eax
	sbb	eax, eax
	neg	eax
	jmp	SHORT $LN2@isCity
$LN1@isCity:

; 247  : 
; 248  : 		return false;

	xor	al, al
$LN2@isCity:

; 249  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?isCity@CvPlot@@QBE_NXZ ENDP				; CvPlot::isCity
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T220037 = -4						; size = 4
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 532  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+104], 0
	jl	SHORT $LN1@getPlotCit
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+104], 64			; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220037[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	ecx, DWORD PTR $T220037[ebp]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	jmp	SHORT $LN2@getPlotCit
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax
$LN2@getPlotCit:

; 537  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T220041 = -80						; size = 28
$T220040 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ PROC ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T220041[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T220040[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T220040[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T220041[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220040[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T220040[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T220040[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T220041[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T220041[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T220040[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UVoteSelectionSubData@@V?$allocator@UVoteSelectionSubData@@@std@@@std@@KAXXZ ENDP ; std::vector<VoteSelectionSubData,std::allocator<VoteSelectionSubData> >::_Xlen
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@UVoteSelectionSubData@@@std@@YAPAUVoteSelectionSubData@@IPAU1@@Z
_TEXT	SEGMENT
$T220112 = -16						; size = 4
$T220108 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UVoteSelectionSubData@@@std@@YAPAUVoteSelectionSubData@@IPAU1@@Z PROC ; std::_Allocate<VoteSelectionSubData>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 44					; 0000002cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T220112[ebp], 0
	lea	eax, DWORD PTR $T220112[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220108[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T220108[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T220108[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 44					; 0000002cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UVoteSelectionSubData@@@std@@YAPAUVoteSelectionSubData@@IPAU1@@Z ENDP ; std::_Allocate<VoteSelectionSubData>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$SerializeToSequenceContainer@HV?$vector@HV?$allocator@H@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; SerializeToSequenceContainer<int,std::vector<int,std::allocator<int> > >
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fstlcontainerserialization.h
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; operator>><int>, COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp

; 226  : 	// The functor needs to be instantiated to properly resize the container based 
; 227  : 	// on how many elements the stream says it should have before passing it along
; 228  : 	// to std::for_each
; 229  : 	SerializeToSequenceContainer<ElementType, std::vector<ElementType> >(loadFrom, writeTo);

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??$SerializeToSequenceContainer@HV?$vector@HV?$allocator@H@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ; SerializeToSequenceContainer<int,std::vector<int,std::allocator<int> > >
	add	esp, 8

; 230  : 
; 231  : 	//std::for_each(writeTo.begin(), writeTo.end(), func);
; 232  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 233  : }

	pop	ebp
	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; operator>><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
$T220211 = -72						; size = 8
$T220210 = -64						; size = 4
$T220209 = -60						; size = 4
$T220189 = -56						; size = 4
$T220184 = -52						; size = 4
__ChkFirst$220204 = -48					; size = 4
__ChkLast$220205 = -44					; size = 4
$T220160 = -40						; size = 4
$T220151 = -36						; size = 4
$T220139 = -32						; size = 4
$T220142 = -28						; size = 4
$T220130 = -24						; size = 8
$T220129 = -16						; size = 4
$T220128 = -12						; size = 4
$T220127 = -8						; size = 8
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; operator<<<int>, COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 199  : 	std::for_each(readFrom.begin(), readFrom.end(), SerializeFromSequenceContainer<const ElementType, const std::vector<ElementType> >(saveTo, readFrom));

	mov	eax, DWORD PTR _saveTo$[ebp]
	mov	DWORD PTR $T220127[ebp], eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	DWORD PTR $T220127[ebp+4], ecx
	mov	edx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR _readFrom$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T220142[ebp], ecx
	mov	edx, DWORD PTR $T220127[ebp]
	mov	DWORD PTR $T220139[ebp], edx
	lea	eax, DWORD PTR $T220142[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220139[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220151[ebp], edx
	mov	eax, DWORD PTR $T220151[ebp]
	mov	DWORD PTR $T220128[ebp], eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220160[ebp], edx
	mov	eax, DWORD PTR $T220160[ebp]
	mov	DWORD PTR $T220129[ebp], eax
	mov	ecx, DWORD PTR $T220127[ebp]
	mov	DWORD PTR $T220211[ebp], ecx
	mov	edx, DWORD PTR $T220127[ebp+4]
	mov	DWORD PTR $T220211[ebp+4], edx
	mov	eax, DWORD PTR $T220128[ebp]
	mov	DWORD PTR $T220210[ebp], eax
	mov	ecx, DWORD PTR $T220129[ebp]
	mov	DWORD PTR $T220209[ebp], ecx
	mov	edx, DWORD PTR $T220209[ebp]
	mov	DWORD PTR __ChkFirst$220204[ebp], edx
	mov	eax, DWORD PTR $T220210[ebp]
	mov	DWORD PTR __ChkLast$220205[ebp], eax
	jmp	SHORT $LN24@operator@2
$LN18@operator@2:
	mov	ecx, DWORD PTR __ChkFirst$220204[ebp]
	add	ecx, 4
	mov	DWORD PTR __ChkFirst$220204[ebp], ecx
$LN24@operator@2:
	mov	edx, DWORD PTR __ChkFirst$220204[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __ChkLast$220205[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN17@operator@2
	mov	eax, DWORD PTR __ChkFirst$220204[ebp]
	mov	DWORD PTR $T220189[ebp], eax
	mov	ecx, DWORD PTR $T220211[ebp]
	mov	DWORD PTR $T220184[ebp], ecx
	mov	edx, DWORD PTR $T220189[ebp]
	push	edx
	mov	ecx, DWORD PTR $T220184[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	jmp	SHORT $LN18@operator@2
$LN17@operator@2:
	mov	eax, DWORD PTR $T220211[ebp]
	mov	DWORD PTR $T220130[ebp], eax
	mov	ecx, DWORD PTR $T220211[ebp+4]
	mov	DWORD PTR $T220130[ebp+4], ecx

; 200  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 201  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; operator<<<int>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Odtp
;	COMDAT ??$SerializeToSequenceContainer@HV?$vector@HV?$allocator@H@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z
_TEXT	SEGMENT
$T220245 = -40						; size = 4
$T220229 = -36						; size = 4
$T220353 = -32						; size = 4
$T220352 = -28						; size = 4
$T220351 = -24						; size = 4
$T220350 = -20						; size = 4
$T220349 = -16						; size = 4
_v$213750 = -12						; size = 4
_i$ = -8						; size = 4
_count$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_container$ = 12					; size = 4
??$SerializeToSequenceContainer@HV?$vector@HV?$allocator@H@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z PROC ; SerializeToSequenceContainer<int,std::vector<int,std::allocator<int> > >, COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H

; 84   : 	container.clear();

	mov	eax, DWORD PTR _container$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220229[ebp], ecx
	mov	edx, DWORD PTR $T220229[ebp]
	mov	DWORD PTR $T220350[ebp], edx
	mov	eax, DWORD PTR $T220350[ebp]
	mov	DWORD PTR $T220349[ebp], eax
	mov	ecx, DWORD PTR _container$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220245[ebp], edx
	mov	eax, DWORD PTR $T220245[ebp]
	mov	DWORD PTR $T220352[ebp], eax
	mov	ecx, DWORD PTR $T220352[ebp]
	mov	DWORD PTR $T220351[ebp], ecx
	mov	edx, DWORD PTR $T220349[ebp]
	push	edx
	mov	eax, DWORD PTR $T220351[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220353[ebp]
	push	ecx
	mov	ecx, DWORD PTR _container$[ebp]
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 85   : 	ContainerType::size_type count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 86   : 	loadFrom >> count;

	lea	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 87   : 	ContainerType::size_type i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 88   : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SerializeT
$LN2@SerializeT:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SerializeT:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jae	SHORT $LN4@SerializeT

; 89   : 	{
; 90   : 		ElementType v;
; 91   : 		loadFrom >> v;

	lea	edx, DWORD PTR _v$213750[ebp]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 92   : 		container.push_back(v);

	lea	eax, DWORD PTR _v$213750[ebp]
	push	eax
	mov	ecx, DWORD PTR _container$[ebp]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 93   : 	}

	jmp	SHORT $LN2@SerializeT
$LN4@SerializeT:

; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$SerializeToSequenceContainer@HV?$vector@HV?$allocator@H@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@HV?$allocator@H@std@@@std@@@Z ENDP ; SerializeToSequenceContainer<int,std::vector<int,std::allocator<int> > >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T220619 = -52						; size = 4
$T220608 = -48						; size = 4
$T220607 = -44						; size = 4
__Cat$220614 = -40					; size = 1
$T220612 = -39						; size = 1
__Ptr$210227 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy<int *,int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$210227[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220619[ebp], edx
	mov	eax, DWORD PTR $T220619[ebp]
	mov	DWORD PTR $T220608[ebp], eax
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR $T220607[ebp], ecx
	mov	dl, BYTE PTR __Cat$220614[ebp]
	mov	BYTE PTR $T220612[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$210227[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T220642 = -26						; size = 1
$T220641 = -25						; size = 1
$T220640 = -24						; size = 4
$T220639 = -20						; size = 4
__Off$220635 = -16					; size = 4
__Result$220636 = -12					; size = 4
__Cat$220627 = -4					; size = 1
$T220624 = -3						; size = 1
$T220623 = -2						; size = 1
$T220622 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T220622[ebp], al
	mov	cl, BYTE PTR __Cat$220627[ebp]
	mov	BYTE PTR $T220623[ebp], cl
	mov	dl, BYTE PTR $T220622[ebp]
	mov	BYTE PTR $T220642[ebp], dl
	mov	al, BYTE PTR $T220624[ebp]
	mov	BYTE PTR $T220641[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T220640[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T220639[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T220639[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$220635[ebp], eax
	mov	ecx, DWORD PTR __Off$220635[ebp]
	mov	edx, DWORD PTR $T220640[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$220636[ebp], eax
	cmp	DWORD PTR __Off$220635[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$220635[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T220639[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$220635[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T220640[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$220636[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
tv129 = -96						; size = 4
_this$ = -92						; size = 4
$T220732 = -64						; size = 4
$T220722 = -60						; size = 4
$T220710 = -56						; size = 4
$T220700 = -49						; size = 1
$T220699 = -48						; size = 4
__Cat$220717 = -19					; size = 1
$T220715 = -18						; size = 1
$T220714 = -17						; size = 1
$T220651 = -16						; size = 4
$T220647 = -12						; size = 4
$T220646 = -8						; size = 4
$T220645 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T220651[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@2
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@2
$LN9@push_back@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@2:
	mov	ecx, DWORD PTR $T220651[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T220722[ebp], eax
	mov	ecx, DWORD PTR $T220722[ebp]
	mov	DWORD PTR $T220710[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T220714[ebp], dl
	mov	al, BYTE PTR __Cat$220717[ebp]
	mov	BYTE PTR $T220715[ebp], al
	mov	cl, BYTE PTR $T220714[ebp]
	mov	BYTE PTR $T220700[ebp], cl
	mov	edx, DWORD PTR $T220710[ebp]
	mov	DWORD PTR $T220699[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR $T220699[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH
	mov	edx, 1
	shl	edx, 2
	add	edx, DWORD PTR $T220722[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@2
$LN2@push_back@2:

; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220732[ebp], edx
	mov	eax, DWORD PTR $T220732[ebp]
	mov	DWORD PTR $T220646[ebp], eax
	mov	ecx, DWORD PTR $T220646[ebp]
	mov	DWORD PTR $T220645[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR $T220645[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220647[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
$LN3@push_back@2:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$220857 = -24					; size = 4
$T220835 = -20						; size = 4
$T220816 = -16						; size = 4
$T220803 = -12						; size = 4
$T220800 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220816[ebp], ecx
	mov	edx, DWORD PTR $T220816[ebp]
	mov	DWORD PTR $T220800[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T220800[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@2:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220835[ebp], edx
	mov	eax, DWORD PTR $T220835[ebp]
	mov	DWORD PTR $T220803[ebp], eax
	mov	ecx, DWORD PTR $T220803[ebp]
	mov	DWORD PTR __Tmp$220857[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$220857[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$220857[ebp], ecx
	mov	edx, DWORD PTR __Tmp$220857[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2
__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0
__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T221411 = -412						; size = 4
$T221359 = -368						; size = 4
$T221347 = -364						; size = 4
$T221337 = -357						; size = 1
$T221336 = -356						; size = 4
__Cat$221354 = -327					; size = 1
$T221351 = -326						; size = 1
$T221350 = -325						; size = 1
$T221308 = -324						; size = 4
$T221300 = -320						; size = 4
$T221292 = -316						; size = 4
$T221281 = -312						; size = 4
$T221280 = -308						; size = 4
__Cat$221287 = -302					; size = 1
$T221284 = -301						; size = 1
$T221209 = -276						; size = 4
$T221190 = -272						; size = 4
$T221173 = -265						; size = 1
$T221172 = -264						; size = 4
$T221162 = -260						; size = 4
$T221161 = -256						; size = 4
__Cat$221195 = -250					; size = 1
$T221193 = -249						; size = 1
$T221192 = -248						; size = 1
__Cat$221204 = -247					; size = 1
$T221202 = -246						; size = 1
$T221201 = -245						; size = 1
$T221137 = -244						; size = 4
$T221136 = -240						; size = 4
$T221132 = -236						; size = 4
$T221131 = -232						; size = 4
$T221120 = -228						; size = 4
$T221119 = -224						; size = 4
__Cat$221127 = -218					; size = 1
$T221125 = -217						; size = 1
$T221084 = -216						; size = 4
$T221083 = -212						; size = 4
__Cat$221091 = -206					; size = 1
$T221089 = -205						; size = 1
$T221054 = -204						; size = 4
$T221053 = -200						; size = 4
__Cat$221061 = -194					; size = 1
$T221059 = -193						; size = 1
$T221034 = -192						; size = 4
$T221022 = -188						; size = 4
$T221012 = -181						; size = 1
$T221011 = -180						; size = 4
__Cat$221030 = -175					; size = 1
$T221027 = -174						; size = 1
$T221026 = -173						; size = 1
$T220999 = -172						; size = 4
$T220987 = -168						; size = 4
$T220977 = -161						; size = 1
$T220976 = -160						; size = 4
__Cat$220995 = -155					; size = 1
$T220992 = -154						; size = 1
$T220991 = -153						; size = 1
$T220964 = -152						; size = 4
$T220952 = -148						; size = 4
$T220942 = -141						; size = 1
$T220941 = -140						; size = 4
__Cat$220960 = -135					; size = 1
$T220958 = -134						; size = 1
$T220957 = -133						; size = 1
__Count$220915 = -120					; size = 4
__Count$220889 = -48					; size = 4
__Tmp$214818 = -44					; size = 4
__Oldend$214819 = -40					; size = 4
__Tmp$214808 = -36					; size = 4
__Ncopied$214795 = -32					; size = 4
__Newvec$214793 = -28					; size = 4
__Whereoff$214794 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@2
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@2
$LN29@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@2:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$220889[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$220889[ebp], 0
	jbe	SHORT $LN35@Insert_n@2
	mov	edx, DWORD PTR __Count$220889[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@2
$LN35@Insert_n@2:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
	jmp	$LN16@Insert_n@2

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$220915[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$220915[ebp], 0
	jbe	SHORT $LN48@Insert_n@2
	mov	ecx, DWORD PTR __Count$220915[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@2
$LN48@Insert_n@2:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@2:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8
	mov	DWORD PTR __Newvec$214793[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$214794[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$214795[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T220964[ebp], edx
	mov	eax, DWORD PTR $T220964[ebp]
	mov	DWORD PTR $T220952[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T220957[ebp], cl
	mov	dl, BYTE PTR __Cat$220960[ebp]
	mov	BYTE PTR $T220958[ebp], dl
	mov	al, BYTE PTR $T220957[ebp]
	mov	BYTE PTR $T220942[ebp], al
	mov	ecx, DWORD PTR $T220952[ebp]
	mov	DWORD PTR $T220941[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220941[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220999[ebp], ecx
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T220987[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T220991[ebp], al
	mov	cl, BYTE PTR __Cat$220995[ebp]
	mov	BYTE PTR $T220992[ebp], cl
	mov	dl, BYTE PTR $T220991[ebp]
	mov	BYTE PTR $T220977[ebp], dl
	mov	eax, DWORD PTR $T220987[ebp]
	mov	DWORD PTR $T220976[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220976[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220999[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$214795[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$214795[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T221034[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T221022[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T221026[ebp], dl
	mov	al, BYTE PTR __Cat$221030[ebp]
	mov	BYTE PTR $T221027[ebp], al
	mov	cl, BYTE PTR $T221026[ebp]
	mov	BYTE PTR $T221012[ebp], cl
	mov	edx, DWORD PTR $T221022[ebp]
	mov	DWORD PTR $T221011[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221011[ebp]
	push	ecx
	mov	edx, DWORD PTR $T221034[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@2
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$214794[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T221054[ebp], eax
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR $T221053[ebp], ecx
	mov	dl, BYTE PTR __Cat$221061[ebp]
	mov	BYTE PTR $T221059[ebp], dl
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$214795[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$214794[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T221084[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$214794[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T221083[ebp], ecx
	mov	dl, BYTE PTR __Cat$221091[ebp]
	mov	BYTE PTR $T221089[ebp], dl
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$214793[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@2
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T221132[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T221131[ebp], edx
	mov	eax, DWORD PTR $T221132[ebp]
	mov	DWORD PTR $T221120[ebp], eax
	mov	ecx, DWORD PTR $T221131[ebp]
	mov	DWORD PTR $T221119[ebp], ecx
	mov	dl, BYTE PTR __Cat$221127[ebp]
	mov	BYTE PTR $T221125[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T221137[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221136[ebp], ecx
	mov	edx, DWORD PTR $T221136[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$214793[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$214793[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$214793[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$214808[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T221209[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T221190[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T221201[ebp], cl
	mov	dl, BYTE PTR __Cat$221204[ebp]
	mov	BYTE PTR $T221202[ebp], dl
	mov	al, BYTE PTR $T221201[ebp]
	mov	BYTE PTR $T221173[ebp], al
	mov	ecx, DWORD PTR $T221190[ebp]
	mov	DWORD PTR $T221172[ebp], ecx
	mov	edx, DWORD PTR $T221172[ebp]
	mov	DWORD PTR $T221162[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T221161[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T221192[ebp], cl
	mov	dl, BYTE PTR __Cat$221195[ebp]
	mov	BYTE PTR $T221193[ebp], dl
	movzx	eax, BYTE PTR $T221192[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T221193[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T221162[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221209[ebp]
	push	ecx
	mov	edx, DWORD PTR $T221161[ebp]
	push	edx
	call	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$214808[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T221292[ebp], eax
	mov	ecx, DWORD PTR $T221292[ebp]
	mov	DWORD PTR $T221281[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T221280[ebp], ecx
	mov	dl, BYTE PTR __Cat$221287[ebp]
	mov	BYTE PTR $T221284[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T221308[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T221300[ebp], edx
	jmp	SHORT $LN151@Insert_n@2
$LN150@Insert_n@2:
	mov	eax, DWORD PTR $T221300[ebp]
	add	eax, 4
	mov	DWORD PTR $T221300[ebp], eax
$LN151@Insert_n@2:
	mov	ecx, DWORD PTR $T221300[ebp]
	cmp	ecx, DWORD PTR $T221308[ebp]
	je	SHORT $LN147@Insert_n@2
	mov	edx, DWORD PTR $T221300[ebp]
	mov	eax, DWORD PTR __Tmp$214808[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@2
$LN147@Insert_n@2:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$214818[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$214819[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T221359[ebp], eax
	mov	ecx, DWORD PTR $T221359[ebp]
	mov	DWORD PTR $T221347[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T221350[ebp], dl
	mov	al, BYTE PTR __Cat$221354[ebp]
	mov	BYTE PTR $T221351[ebp], al
	mov	cl, BYTE PTR $T221350[ebp]
	mov	BYTE PTR $T221337[ebp], cl
	mov	edx, DWORD PTR $T221347[ebp]
	mov	DWORD PTR $T221336[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221336[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$214819[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$214819[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$214819[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T221411[ebp], ecx
	jmp	SHORT $LN186@Insert_n@2
$LN185@Insert_n@2:
	mov	edx, DWORD PTR $T221411[ebp]
	add	edx, 4
	mov	DWORD PTR $T221411[ebp], edx
$LN186@Insert_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T221411[ebp], edx
	je	SHORT $LN16@Insert_n@2
	mov	eax, DWORD PTR $T221411[ebp]
	mov	ecx, DWORD PTR __Tmp$214818[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@2
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T221433 = -80						; size = 28
$T221432 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T221433[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T221432[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T221432[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T221433[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221432[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T221432[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T221432[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T221433[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T221433[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T221432[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T221458 = -16						; size = 4
$T221454 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T221458[ebp], 0
	lea	eax, DWORD PTR $T221458[ebp]
	push	eax
	lea	ecx, DWORD PTR $T221454[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T221454[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T221454[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T221511 = -40						; size = 4
$T221501 = -33						; size = 1
$T221500 = -32						; size = 4
__Cat$221506 = -3					; size = 1
$T221504 = -2						; size = 1
$T221503 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T221511[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T221503[ebp], cl
	mov	dl, BYTE PTR __Cat$221506[ebp]
	mov	BYTE PTR $T221504[ebp], dl
	mov	al, BYTE PTR $T221503[ebp]
	mov	BYTE PTR $T221501[ebp], al
	mov	ecx, DWORD PTR $T221511[ebp]
	mov	DWORD PTR $T221500[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221500[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ; stdext::unchecked_fill_n<int *,unsigned int,int>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
$T221556 = -38						; size = 1
$T221555 = -37						; size = 1
$T221554 = -36						; size = 4
$T221553 = -32						; size = 4
$T221540 = -25						; size = 1
$T221539 = -24						; size = 4
$T221538 = -20						; size = 4
__Off$221548 = -16					; size = 4
__Result$221549 = -12					; size = 4
__Cat$221545 = -8					; size = 1
$T221543 = -7						; size = 1
$T221542 = -6						; size = 1
__Cat$221520 = -4					; size = 1
$T221516 = -3						; size = 1
$T221515 = -2						; size = 1
$T221514 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T221514[ebp], al
	mov	cl, BYTE PTR __Cat$221520[ebp]
	mov	BYTE PTR $T221515[ebp], cl
	mov	dl, BYTE PTR $T221514[ebp]
	mov	BYTE PTR $T221556[ebp], dl
	mov	al, BYTE PTR $T221516[ebp]
	mov	BYTE PTR $T221555[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T221554[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T221553[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T221542[ebp], al
	mov	cl, BYTE PTR __Cat$221545[ebp]
	mov	BYTE PTR $T221543[ebp], cl
	mov	dl, BYTE PTR $T221542[ebp]
	mov	BYTE PTR $T221540[ebp], dl
	mov	eax, DWORD PTR $T221554[ebp]
	mov	DWORD PTR $T221539[ebp], eax
	mov	ecx, DWORD PTR $T221553[ebp]
	mov	DWORD PTR $T221538[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T221538[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$221548[ebp], edx
	mov	eax, DWORD PTR __Off$221548[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T221539[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$221549[ebp], ecx
	cmp	DWORD PTR __Off$221548[ebp], 0
	jle	SHORT $LN7@Unchecked_@2
	mov	edx, DWORD PTR __Off$221548[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T221538[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$221548[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$221549[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_@2:
	mov	eax, DWORD PTR __Result$221549[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
$T221586 = -22						; size = 1
$T221585 = -21						; size = 1
$T221584 = -20						; size = 4
$T221575 = -13						; size = 1
$T221574 = -12						; size = 4
$T221573 = -8						; size = 4
$T221577 = -4						; size = 1
$T221560 = -2						; size = 1
$T221559 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T221559[ebp], al
	mov	cl, BYTE PTR $T221559[ebp]
	mov	BYTE PTR $T221586[ebp], cl
	mov	dl, BYTE PTR $T221560[ebp]
	mov	BYTE PTR $T221585[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T221584[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T221577[ebp], cl
	mov	dl, BYTE PTR $T221577[ebp]
	mov	BYTE PTR $T221575[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T221574[ebp], eax
	mov	ecx, DWORD PTR $T221584[ebp]
	mov	DWORD PTR $T221573[ebp], ecx
	jmp	SHORT $LN9@unchecked_@2
$LN8@unchecked_@2:
	mov	edx, DWORD PTR $T221574[ebp]
	sub	edx, 1
	mov	DWORD PTR $T221574[ebp], edx
	mov	eax, DWORD PTR $T221573[ebp]
	add	eax, 4
	mov	DWORD PTR $T221573[ebp], eax
$LN9@unchecked_@2:
	cmp	DWORD PTR $T221574[ebp], 0
	jbe	SHORT $LN1@unchecked_@2
	mov	ecx, DWORD PTR $T221573[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@2
$LN1@unchecked_@2:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
$T221603 = -21						; size = 1
$T221602 = -20						; size = 4
$T221601 = -16						; size = 4
__Result$221599 = -12					; size = 4
__Count$221598 = -8					; size = 4
__Cat$221593 = -3					; size = 1
$T221590 = -2						; size = 1
$T221589 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T221589[ebp], al
	mov	cl, BYTE PTR __Cat$221593[ebp]
	mov	BYTE PTR $T221590[ebp], cl
	mov	dl, BYTE PTR $T221589[ebp]
	mov	BYTE PTR $T221603[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T221602[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T221601[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T221601[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$221598[ebp], edx
	mov	eax, DWORD PTR __Count$221598[ebp]
	mov	ecx, DWORD PTR $T221602[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$221599[ebp], edx
	cmp	DWORD PTR __Count$221598[ebp], 0
	jbe	SHORT $LN6@unchecked_@3
	mov	eax, DWORD PTR __Count$221598[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T221601[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$221598[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T221602[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@3:
	mov	eax, DWORD PTR __Result$221599[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@2:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
END
