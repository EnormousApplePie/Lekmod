; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvFlavorManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??_7CvFlavorRecipient@@6B@			; CvFlavorRecipient::`vftable'
PUBLIC	??0CvFlavorRecipient@@QAE@XZ			; CvFlavorRecipient::CvFlavorRecipient
PUBLIC	?Init@CvFlavorRecipient@@UAEXXZ			; CvFlavorRecipient::Init
PUBLIC	?Uninit@CvFlavorRecipient@@UAEXXZ		; CvFlavorRecipient::Uninit
EXTRN	__purecall:PROC
;	COMDAT ??_7CvFlavorRecipient@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
CONST	SEGMENT
??_7CvFlavorRecipient@@6B@ DD FLAT:?Init@CvFlavorRecipient@@UAEXXZ ; CvFlavorRecipient::`vftable'
	DD	FLAT:?Uninit@CvFlavorRecipient@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvFlavorRecipient@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvFlavorRecipient@@QAE@XZ PROC			; CvFlavorRecipient::CvFlavorRecipient, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvFlavorRecipient@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 22   : 
; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvFlavorRecipient@@QAE@XZ ENDP			; CvFlavorRecipient::CvFlavorRecipient
_TEXT	ENDS
PUBLIC	??1CvFlavorRecipient@@QAE@XZ			; CvFlavorRecipient::~CvFlavorRecipient
; Function compile flags: /Odtp
;	COMDAT ??1CvFlavorRecipient@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvFlavorRecipient@@QAE@XZ PROC			; CvFlavorRecipient::~CvFlavorRecipient, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvFlavorRecipient@@6B@

; 28   : 
; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvFlavorRecipient@@QAE@XZ ENDP			; CvFlavorRecipient::~CvFlavorRecipient
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT ?Init@CvFlavorRecipient@@UAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T218787 = -8						; size = 4
_iNumFlavors$ = -4					; size = 4
?Init@CvFlavorRecipient@@UAEXXZ PROC			; CvFlavorRecipient::Init, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	int iNumFlavors = GC.getNumFlavorTypes();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR _iNumFlavors$[ebp], eax

; 35   : 	m_piLatestFlavorValues = FNEW(int[iNumFlavors], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, DWORD PTR _iNumFlavors$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T218787[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T218787[ebp]
	mov	DWORD PTR [eax+8], ecx

; 36   : 	memset(m_piLatestFlavorValues, 0, iNumFlavors * sizeof(int));

	mov	edx, DWORD PTR _iNumFlavors$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 37   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CvFlavorRecipient@@UAEXXZ ENDP			; CvFlavorRecipient::Init
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvFlavorRecipient@@UAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T218799 = -8						; size = 4
$T218798 = -4						; size = 4
?Uninit@CvFlavorRecipient@@UAEXXZ PROC			; CvFlavorRecipient::Uninit, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	SAFE_DELETE_ARRAY(m_piLatestFlavorValues);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T218799[ebp], eax
	mov	ecx, DWORD PTR $T218799[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T218798[ebp], edx
	mov	eax, DWORD PTR $T218798[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T218799[ebp]
	mov	DWORD PTR [ecx], 0

; 43   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvFlavorRecipient@@UAEXXZ ENDP			; CvFlavorRecipient::Uninit
_TEXT	ENDS
PUBLIC	?IsCity@CvFlavorRecipient@@QAE_NXZ		; CvFlavorRecipient::IsCity
; Function compile flags: /Odtp
;	COMDAT ?IsCity@CvFlavorRecipient@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCity@CvFlavorRecipient@@QAE_NXZ PROC			; CvFlavorRecipient::IsCity, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	return m_bIsCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 49   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCity@CvFlavorRecipient@@QAE_NXZ ENDP			; CvFlavorRecipient::IsCity
_TEXT	ENDS
PUBLIC	?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z	; CvFlavorRecipient::SetFlavors
; Function compile flags: /Odtp
;	COMDAT ?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bLogFlavor$217812 = -9					; size = 1
_iI$217808 = -8						; size = 4
_iNumFlavors$ = -4					; size = 4
_piUpdatedFlavorValues$ = 8				; size = 4
?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z PROC		; CvFlavorRecipient::SetFlavors, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	CvAssertMsg(piUpdatedFlavorValues != NULL, "Invalid array of flavor deltas passed to flavor recipient");
; 55   : 
; 56   : 	if(!piUpdatedFlavorValues) return;

	cmp	DWORD PTR _piUpdatedFlavorValues$[ebp], 0
	jne	SHORT $LN5@SetFlavors
	jmp	SHORT $LN6@SetFlavors
$LN5@SetFlavors:

; 57   : 
; 58   : 	int iNumFlavors = GC.getNumFlavorTypes();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR _iNumFlavors$[ebp], eax

; 59   : 	for(int iI = 0; iI < iNumFlavors; iI++)

	mov	DWORD PTR _iI$217808[ebp], 0
	jmp	SHORT $LN4@SetFlavors
$LN3@SetFlavors:
	mov	ecx, DWORD PTR _iI$217808[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217808[ebp], ecx
$LN4@SetFlavors:
	mov	edx, DWORD PTR _iI$217808[ebp]
	cmp	edx, DWORD PTR _iNumFlavors$[ebp]
	jge	SHORT $LN2@SetFlavors

; 60   : 	{
; 61   : 		bool bLogFlavor = false;

	mov	BYTE PTR _bLogFlavor$217812[ebp], 0

; 62   : 
; 63   : 		if(m_piLatestFlavorValues[iI] != piUpdatedFlavorValues[iI])

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _iI$217808[ebp]
	mov	eax, DWORD PTR _iI$217808[ebp]
	mov	esi, DWORD PTR _piUpdatedFlavorValues$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	cmp	ecx, DWORD PTR [esi+eax*4]
	je	SHORT $LN1@SetFlavors

; 64   : 		{
; 65   : 			bLogFlavor = true;

	mov	BYTE PTR _bLogFlavor$217812[ebp], 1
$LN1@SetFlavors:

; 66   : 		}
; 67   : 
; 68   : 		m_piLatestFlavorValues[iI] = piUpdatedFlavorValues[iI];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _iI$217808[ebp]
	mov	edx, DWORD PTR _iI$217808[ebp]
	mov	esi, DWORD PTR _piUpdatedFlavorValues$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [eax+ecx*4], edx

; 69   : 
; 70   : //		LogFlavors((FlavorTypes) iI);
; 71   : 	}

	jmp	SHORT $LN3@SetFlavors
$LN2@SetFlavors:

; 72   : 
; 73   : 	FlavorUpdate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN6@SetFlavors:

; 74   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z ENDP		; CvFlavorRecipient::SetFlavors
_TEXT	ENDS
PUBLIC	?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z	; CvFlavorRecipient::ChangeFlavors
; Function compile flags: /Odtp
;	COMDAT ?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_iI$217823 = -16					; size = 4
_iFlavorMaxValue$ = -12					; size = 4
_iFlavorMinValue$ = -8					; size = 4
_iNumFlavors$ = -4					; size = 4
_piDeltaFlavorValues$ = 8				; size = 4
_bDontLog$ = 12						; size = 1
?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z PROC	; CvFlavorRecipient::ChangeFlavors, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 
; 80   : 	CvAssertMsg(piDeltaFlavorValues != NULL, "Invalid array of flavor deltas passed to flavor recipient");
; 81   : 
; 82   : 	if(!piDeltaFlavorValues) return;

	cmp	DWORD PTR _piDeltaFlavorValues$[ebp], 0
	jne	SHORT $LN9@ChangeFlav
	jmp	$LN10@ChangeFlav
$LN9@ChangeFlav:

; 83   : 
; 84   : 	int iFlavorMinValue = /*-1000*/ GC.getFLAVOR_MIN_VALUE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1876
	mov	DWORD PTR _iFlavorMinValue$[ebp], eax

; 85   : 	int iFlavorMaxValue = /*1000*/ GC.getFLAVOR_MAX_VALUE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1880
	mov	DWORD PTR _iFlavorMaxValue$[ebp], ecx

; 86   : 
; 87   : 	int iNumFlavors = GC.getNumFlavorTypes();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR _iNumFlavors$[ebp], edx

; 88   : 	for(int iI = 0; iI < iNumFlavors; iI++)

	mov	DWORD PTR _iI$217823[ebp], 0
	jmp	SHORT $LN8@ChangeFlav
$LN7@ChangeFlav:
	mov	eax, DWORD PTR _iI$217823[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217823[ebp], eax
$LN8@ChangeFlav:
	mov	ecx, DWORD PTR _iI$217823[ebp]
	cmp	ecx, DWORD PTR _iNumFlavors$[ebp]
	jge	$LN6@ChangeFlav

; 89   : 	{
; 90   : 		if(piDeltaFlavorValues[iI] != 0)

	mov	edx, DWORD PTR _iI$217823[ebp]
	mov	eax, DWORD PTR _piDeltaFlavorValues$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN5@ChangeFlav

; 91   : 		{
; 92   : 			m_piLatestFlavorValues[iI] += piDeltaFlavorValues[iI];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _iI$217823[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _iI$217823[ebp]
	mov	eax, DWORD PTR _piDeltaFlavorValues$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _iI$217823[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 93   : 
; 94   : 			// Make sure within range
; 95   : 			if(m_piLatestFlavorValues[iI] < iFlavorMinValue)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _iI$217823[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _iFlavorMinValue$[ebp]
	jge	SHORT $LN4@ChangeFlav

; 96   : 			{
; 97   : 				m_piLatestFlavorValues[iI] = iFlavorMinValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _iI$217823[ebp]
	mov	ecx, DWORD PTR _iFlavorMinValue$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN3@ChangeFlav
$LN4@ChangeFlav:

; 98   : 			}
; 99   : 			else if(m_piLatestFlavorValues[iI] > iFlavorMaxValue)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _iI$217823[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _iFlavorMaxValue$[ebp]
	jle	SHORT $LN3@ChangeFlav

; 100  : 			{
; 101  : 				m_piLatestFlavorValues[iI] = iFlavorMaxValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _iI$217823[ebp]
	mov	eax, DWORD PTR _iFlavorMaxValue$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN3@ChangeFlav:

; 102  : 			}
; 103  : 
; 104  : 			if(!bDontLog)

	movzx	ecx, BYTE PTR _bDontLog$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@ChangeFlav

; 105  : 			{
; 106  : 				LogFlavors((FlavorTypes) iI);

	mov	edx, DWORD PTR _iI$217823[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN5@ChangeFlav:

; 107  : 			}
; 108  : 		}
; 109  : 	}

	jmp	$LN7@ChangeFlav
$LN6@ChangeFlav:

; 110  : 
; 111  : 	FlavorUpdate();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN10@ChangeFlav:

; 112  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z ENDP	; CvFlavorRecipient::ChangeFlavors
_TEXT	ENDS
PUBLIC	?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z ; CvFlavorRecipient::GetLatestFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eFlavor$ = 8						; size = 4
_bAllowNegative$ = 12					; size = 1
?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z PROC ; CvFlavorRecipient::GetLatestFlavorValue, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	CvAssertMsg(eFlavor > -1, "Out of bounds.");
; 118  : 	CvAssertMsg(eFlavor < GC.getNumFlavorTypes(), "Out of bounds.");
; 119  : 
; 120  : 	if(m_piLatestFlavorValues[eFlavor] < 0 && !bAllowNegative)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _eFlavor$[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jge	SHORT $LN1@GetLatestF
	movzx	eax, BYTE PTR _bAllowNegative$[ebp]
	test	eax, eax
	jne	SHORT $LN1@GetLatestF

; 121  : 	{
; 122  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetLatestF
$LN1@GetLatestF:

; 123  : 	}
; 124  : 
; 125  : 	return m_piLatestFlavorValues[eFlavor];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _eFlavor$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
$LN2@GetLatestF:

; 126  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z ENDP ; CvFlavorRecipient::GetLatestFlavorValue
_TEXT	ENDS
PUBLIC	??0?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAE@XZ ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >
PUBLIC	??0CvFlavorManager@@QAE@XZ			; CvFlavorManager::CvFlavorManager
; Function compile flags: /Odtp
;	COMDAT ??0CvFlavorManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T218861 = -12						; size = 4
??0CvFlavorManager@@QAE@XZ PROC				; CvFlavorManager::CvFlavorManager, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T218861[ebp], edx
	mov	ecx, DWORD PTR $T218861[ebp]
	call	??0?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAE@XZ ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >

; 136  : 
; 137  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvFlavorManager@@QAE@XZ ENDP				; CvFlavorManager::CvFlavorManager
_TEXT	ENDS
PUBLIC	??1?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::~FFastList<CvFlavorRecipient *,297,0>
PUBLIC	??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ ; FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >::~FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >
PUBLIC	?Uninit@CvFlavorManager@@QAEXXZ			; CvFlavorManager::Uninit
PUBLIC	??1CvFlavorManager@@QAE@XZ			; CvFlavorManager::~CvFlavorManager
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvFlavorManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvFlavorManager@@QAE@XZ$0
__ehfuncinfo$??1CvFlavorManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvFlavorManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
xdata$x	ENDS
;	COMDAT ??1CvFlavorManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T218966 = -40						; size = 4
__$EHRec$ = -12						; size = 12
??1CvFlavorManager@@QAE@XZ PROC				; CvFlavorManager::~CvFlavorManager, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvFlavorManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 142  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvFlavorManager@@QAEXXZ		; CvFlavorManager::Uninit

; 143  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T218966[ebp], eax
	mov	ecx, DWORD PTR $T218966[ebp]
	call	??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ ; FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >::~FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvFlavorManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ
__ehhandler$??1CvFlavorManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvFlavorManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvFlavorManager@@QAE@XZ ENDP				; CvFlavorManager::~CvFlavorManager
; Function compile flags: /Odtp
;	COMDAT ??1?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
??1?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ PROC ; FFastList<CvFlavorRecipient *,297,0>::~FFastList<CvFlavorRecipient *,297,0>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ ; FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >::~FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ENDP ; FFastList<CvFlavorRecipient *,297,0>::~FFastList<CvFlavorRecipient *,297,0>
_TEXT	ENDS
PUBLIC	?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z ; CvFlavorManager::LogFlavors
PUBLIC	?ResetToBasePersonality@CvFlavorManager@@QAEXXZ	; CvFlavorManager::ResetToBasePersonality
PUBLIC	?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ	; CvFlavorManager::BroadcastBaseFlavors
PUBLIC	?RandomizeWeights@CvFlavorManager@@AAEXXZ	; CvFlavorManager::RandomizeWeights
PUBLIC	?Reset@CvFlavorManager@@QAEXXZ			; CvFlavorManager::Reset
PUBLIC	?SetSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::SetSize
PUBLIC	?Init@CvFlavorManager@@QAEXPAVCvPlayer@@@Z	; CvFlavorManager::Init
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
EXTRN	?getFlavorValue@CvMinorCivInfo@@QBEHH@Z:PROC	; CvMinorCivInfo::getFlavorValue
EXTRN	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z:PROC ; CvGlobals::getMinorCivInfo
EXTRN	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ:PROC ; CvMinorCivAI::GetMinorCivType
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z:PROC	; CvLeaderHeadInfo::getFlavorValue
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z:PROC ; CvGlobals::getLeaderHeadInfo
EXTRN	?getPersonalityType@CvPlayer@@QBE?AW4LeaderHeadTypes@@XZ:PROC ; CvPlayer::getPersonalityType
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
EXTRN	?slotStatus@CvPreGame@@YA?AW4SlotStatus@@W4PlayerTypes@@@Z:PROC ; CvPreGame::slotStatus
; Function compile flags: /Odtp
;	COMDAT ?Init@CvFlavorManager@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T219129 = -64						; size = 4
$T219122 = -60						; size = 4
$T219100 = -56						; size = 4
$T219085 = -52						; size = 4
$T219081 = -48						; size = 4
$T219077 = -44						; size = 4
$T219076 = -40						; size = 4
_uiNumFlavors$217882 = -36				; size = 4
_iDefaultFlavorValue$217881 = -32			; size = 4
_uiNumFlavorTypes$217873 = -28				; size = 4
_iDefaultFlavorValue$217872 = -24			; size = 4
_pkLeaderHeadInfo$217870 = -20				; size = 4
_type$217868 = -16					; size = 4
_s$217864 = -12						; size = 4
_iI$ = -8						; size = 4
_p$ = -4						; size = 4
_pPlayer$ = 8						; size = 4
?Init@CvFlavorManager@@QAEXPAVCvPlayer@@@Z PROC		; CvFlavorManager::Init, COMDAT
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 	unsigned int iI;
; 149  : 
; 150  : 	// Copy off inputs
; 151  : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 152  : 
; 153  : 	// Allocate memory
; 154  : #ifdef AUI_WARNING_FIXES
; 155  : 	SAFE_DELETE_ARRAY(m_piPersonalityFlavor);
; 156  : 	SAFE_DELETE_ARRAY(m_piActiveFlavor);
; 157  : #endif
; 158  : 	m_piPersonalityFlavor = FNEW(int[GC.getNumFlavorTypes()], c_eCiv5GameplayDLL, 0);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219081[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T219081[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219076[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T219076[ebp]
	mov	DWORD PTR [eax], ecx

; 159  : 	m_piActiveFlavor = FNEW(int[GC.getNumFlavorTypes()], c_eCiv5GameplayDLL, 0);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219085[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T219085[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219077[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T219077[ebp]
	mov	DWORD PTR [eax+4], ecx

; 160  : 	m_FlavorTargetList.get_allocator().Reserve((3*64)+100);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T219100[ebp], edx
	mov	eax, DWORD PTR $T219100[ebp]
	cmp	DWORD PTR [eax+8], 292			; 00000124H
	jb	SHORT $LN30@Init
	jmp	SHORT $LN26@Init
$LN30@Init:
	push	292					; 00000124H
	mov	ecx, DWORD PTR $T219100[ebp]
	call	?SetSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::SetSize
$LN26@Init:

; 161  : 
; 162  : 	// Clear variables
; 163  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvFlavorManager@@QAEXXZ		; CvFlavorManager::Reset

; 164  : 
; 165  : 	// If this is a live player, go ahead and set up his flavor preferences
; 166  : 	PlayerTypes p = pPlayer->GetID();

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _p$[ebp], edx

; 167  : 	if(p != NO_PLAYER)

	cmp	DWORD PTR _p$[ebp], -1
	je	$LN18@Init

; 168  : 	{
; 169  : 		SlotStatus s = CvPreGame::slotStatus(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?slotStatus@CvPreGame@@YA?AW4SlotStatus@@W4PlayerTypes@@@Z ; CvPreGame::slotStatus
	add	esp, 4
	mov	DWORD PTR _s$217864[ebp], eax

; 170  : 		if((s == SS_TAKEN || s == SS_COMPUTER) && !pPlayer->isBarbarian())

	cmp	DWORD PTR _s$217864[ebp], 3
	je	SHORT $LN15@Init
	cmp	DWORD PTR _s$217864[ebp], 1
	jne	$LN18@Init
$LN15@Init:
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN18@Init

; 171  : 		{
; 172  : 			// Copy over leaderhead defaults unless human
; 173  : 			if(!pPlayer->isHuman())

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	edx, al
	test	edx, edx
	jne	$LN14@Init

; 174  : 			{
; 175  : 				LeaderHeadTypes type = pPlayer->getPersonalityType();

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?getPersonalityType@CvPlayer@@QBE?AW4LeaderHeadTypes@@XZ ; CvPlayer::getPersonalityType
	mov	DWORD PTR _type$217868[ebp], eax

; 176  : 				if(type != NO_LEADER)

	cmp	DWORD PTR _type$217868[ebp], -1
	je	$LN13@Init

; 177  : 				{
; 178  : 					CvLeaderHeadInfo* pkLeaderHeadInfo = GC.getLeaderHeadInfo(type);

	mov	eax, DWORD PTR _type$217868[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z ; CvGlobals::getLeaderHeadInfo
	mov	DWORD PTR _pkLeaderHeadInfo$217870[ebp], eax

; 179  : 					if(pkLeaderHeadInfo)

	cmp	DWORD PTR _pkLeaderHeadInfo$217870[ebp], 0
	je	$LN13@Init

; 180  : 					{
; 181  : 						int iDefaultFlavorValue = GC.getDEFAULT_FLAVOR_VALUE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1864
	mov	DWORD PTR _iDefaultFlavorValue$217872[ebp], ecx

; 182  : 						unsigned int uiNumFlavorTypes = GC.getNumFlavorTypes();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219122[ebp], edx
	mov	eax, DWORD PTR $T219122[ebp]
	mov	DWORD PTR _uiNumFlavorTypes$217873[ebp], eax

; 183  : 
; 184  : 						for(iI = 0; iI < uiNumFlavorTypes; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN11@Init
$LN10@Init:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN11@Init:
	mov	edx, DWORD PTR _iI$[ebp]
	cmp	edx, DWORD PTR _uiNumFlavorTypes$217873[ebp]
	jae	SHORT $LN13@Init

; 185  : 						{
; 186  : 							// Majors use Leader XML Flavors
; 187  : 							if(!pPlayer->isMinorCiv())

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@Init

; 188  : 							{
; 189  : 								m_piPersonalityFlavor[iI] = pkLeaderHeadInfo->getFlavorValue(iI);

	mov	ecx, DWORD PTR _iI$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkLeaderHeadInfo$217870[ebp]
	call	?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z ; CvLeaderHeadInfo::getFlavorValue
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 190  : 							}
; 191  : 							// Minors use Minor XML Flavors
; 192  : 							else

	jmp	SHORT $LN7@Init
$LN8@Init:

; 193  : 							{
; 194  : 								m_piPersonalityFlavor[iI] = GC.getMinorCivInfo(pPlayer->GetMinorCivAI()->GetMinorCivType())->getFlavorValue(iI);

	mov	eax, DWORD PTR _iI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ ; CvMinorCivAI::GetMinorCivType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ; CvGlobals::getMinorCivInfo
	mov	ecx, eax
	call	?getFlavorValue@CvMinorCivInfo@@QBEHH@Z	; CvMinorCivInfo::getFlavorValue
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN7@Init:

; 195  : 							}
; 196  : 
; 197  : 							// If no Flavor value is set in the XML use the Default
; 198  : 							if(m_piPersonalityFlavor[iI] == -1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iI$[ebp]
	cmp	DWORD PTR [eax+ecx*4], -1
	jne	SHORT $LN6@Init

; 199  : 							{
; 200  : 								m_piPersonalityFlavor[iI] = iDefaultFlavorValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	edx, DWORD PTR _iDefaultFlavorValue$217872[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN6@Init:

; 201  : 							}
; 202  : 						}

	jmp	$LN10@Init
$LN13@Init:

; 203  : 					}
; 204  : 				}
; 205  : 
; 206  : 				// Tweak from default values
; 207  : 				RandomizeWeights();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RandomizeWeights@CvFlavorManager@@AAEXXZ ; CvFlavorManager::RandomizeWeights

; 208  : 			}
; 209  : 
; 210  : 			// Human player, just set all flavors to average (5)
; 211  : 			else

	jmp	SHORT $LN5@Init
$LN14@Init:

; 212  : 			{
; 213  : 				int iDefaultFlavorValue = GC.getDEFAULT_FLAVOR_VALUE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1864
	mov	DWORD PTR _iDefaultFlavorValue$217881[ebp], eax

; 214  : 				unsigned int uiNumFlavors = GC.getNumFlavorTypes();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219129[ebp], ecx
	mov	edx, DWORD PTR $T219129[ebp]
	mov	DWORD PTR _uiNumFlavors$217882[ebp], edx

; 215  : 				for(iI = 0; iI < uiNumFlavors; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN4@Init:
	mov	ecx, DWORD PTR _iI$[ebp]
	cmp	ecx, DWORD PTR _uiNumFlavors$217882[ebp]
	jae	SHORT $LN5@Init

; 216  : 				{
; 217  : 					m_piPersonalityFlavor[iI] = iDefaultFlavorValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	edx, DWORD PTR _iDefaultFlavorValue$217881[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 218  : 				}

	jmp	SHORT $LN3@Init
$LN5@Init:

; 219  : 			}
; 220  : 
; 221  : 			// Send out updated values to all recipients
; 222  : 			BroadcastBaseFlavors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ ; CvFlavorManager::BroadcastBaseFlavors

; 223  : 
; 224  : 			ResetToBasePersonality();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetToBasePersonality@CvFlavorManager@@QAEXXZ ; CvFlavorManager::ResetToBasePersonality

; 225  : 
; 226  : 			if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@Init
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@Init

; 227  : 			{
; 228  : 				LogFlavors();

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z ; CvFlavorManager::LogFlavors
$LN18@Init:

; 229  : 			}
; 230  : 		}
; 231  : 	}
; 232  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CvFlavorManager@@QAEXPAVCvPlayer@@@Z ENDP		; CvFlavorManager::Init
_TEXT	ENDS
PUBLIC	?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::UnLink
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvFlavorManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T219264 = -60						; size = 4
$T219142 = -12						; size = 4
$T219140 = -8						; size = 4
$T219136 = -4						; size = 4
?Uninit@CvFlavorManager@@QAEXXZ PROC			; CvFlavorManager::Uninit, COMDAT
; _this$ = ecx

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	SAFE_DELETE_ARRAY(m_piPersonalityFlavor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219136[ebp], ecx
	mov	edx, DWORD PTR $T219136[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : 	SAFE_DELETE_ARRAY(m_piActiveFlavor);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T219142[ebp], ecx
	mov	edx, DWORD PTR $T219142[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219140[ebp], eax
	mov	ecx, DWORD PTR $T219140[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219142[ebp]
	mov	DWORD PTR [edx], 0

; 239  : 	m_FlavorTargetList.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T219264[ebp], eax
	push	268435455				; 0fffffffH
	mov	ecx, DWORD PTR $T219264[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	ecx, DWORD PTR $T219264[ebp]
	call	?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::UnLink

; 240  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvFlavorManager@@QAEXXZ ENDP			; CvFlavorManager::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvFlavorManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T219270 = -8						; size = 4
_iI$ = -4						; size = 4
?Reset@CvFlavorManager@@QAEXXZ PROC			; CvFlavorManager::Reset, COMDAT
; _this$ = ecx

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 	int iI;
; 246  : 
; 247  : 	for(iI = 0; iI < GC.getNumFlavorTypes(); iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN3@Reset:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219270[ebp], ecx
	mov	edx, DWORD PTR _iI$[ebp]
	cmp	edx, DWORD PTR $T219270[ebp]
	jge	SHORT $LN4@Reset

; 248  : 	{
; 249  : 		m_piPersonalityFlavor[iI] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 250  : 		m_piActiveFlavor[iI] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
	jmp	SHORT $LN2@Reset
$LN4@Reset:

; 251  : 	}
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvFlavorManager@@QAEXXZ ENDP			; CvFlavorManager::Reset
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
PUBLIC	?Read@CvFlavorManager@@QAEXAAVFDataStream@@@Z	; CvFlavorManager::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvFlavorManager@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T219288 = -40						; size = 4
$T219287 = -36						; size = 4
$T219283 = -32						; size = 4
$T219282 = -28						; size = 4
_wrapm_piPersonalityFlavor$ = -24			; size = 8
_wrapm_piActiveFlavor$ = -16				; size = 8
_uiVersion$ = -8					; size = 4
_iNumFlavors$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvFlavorManager@@QAEXAAVFDataStream@@@Z PROC	; CvFlavorManager::Read, COMDAT
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 	// Version number to maintain backwards compatibility
; 258  : 	uint uiVersion;
; 259  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 260  : 
; 261  : 	CvAssertMsg(GC.getNumFlavorTypes() > 0, "Number of flavors to serialize is expected to greater than 0)");
; 262  : 
; 263  : 	int iNumFlavors;
; 264  : 	kStream >> iNumFlavors;

	lea	ecx, DWORD PTR _iNumFlavors$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 265  : 
; 266  : 	ArrayWrapper<int> wrapm_piPersonalityFlavor(iNumFlavors, m_piPersonalityFlavor);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219283[ebp], eax
	mov	ecx, DWORD PTR _iNumFlavors$[ebp]
	mov	DWORD PTR $T219282[ebp], ecx
	mov	edx, DWORD PTR $T219283[ebp]
	mov	DWORD PTR _wrapm_piPersonalityFlavor$[ebp], edx
	mov	eax, DWORD PTR $T219282[ebp]
	mov	DWORD PTR _wrapm_piPersonalityFlavor$[ebp+4], eax

; 267  : 	kStream >> wrapm_piPersonalityFlavor;

	lea	ecx, DWORD PTR _wrapm_piPersonalityFlavor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8

; 268  : 
; 269  : 	ArrayWrapper<int> wrapm_piActiveFlavor(iNumFlavors, m_piActiveFlavor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T219288[ebp], ecx
	mov	edx, DWORD PTR _iNumFlavors$[ebp]
	mov	DWORD PTR $T219287[ebp], edx
	mov	eax, DWORD PTR $T219288[ebp]
	mov	DWORD PTR _wrapm_piActiveFlavor$[ebp], eax
	mov	ecx, DWORD PTR $T219287[ebp]
	mov	DWORD PTR _wrapm_piActiveFlavor$[ebp+4], ecx

; 270  : 	kStream >> wrapm_piActiveFlavor;

	lea	edx, DWORD PTR _wrapm_piActiveFlavor$[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
	add	esp, 8

; 271  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvFlavorManager@@QAEXAAVFDataStream@@@Z ENDP	; CvFlavorManager::Read
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
PUBLIC	?Write@CvFlavorManager@@QAEXAAVFDataStream@@@Z	; CvFlavorManager::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvFlavorManager@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T219319 = -44						; size = 4
$T219315 = -40						; size = 4
$T219311 = -36						; size = 4
$T219307 = -32						; size = 4
$T219300 = -28						; size = 4
$T219293 = -24						; size = 8
$T219292 = -16						; size = 8
$T219291 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvFlavorManager@@QAEXAAVFDataStream@@@Z PROC	; CvFlavorManager::Write, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	// Current version number
; 277  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 278  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 279  : 
; 280  : 	CvAssertMsg(GC.getNumFlavorTypes() > 0, "Number of flavors to serialize is expected to greater than 0)");
; 281  : 	kStream << GC.getNumFlavorTypes();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219300[ebp], ecx
	mov	edx, DWORD PTR $T219300[ebp]
	mov	DWORD PTR $T219291[ebp], edx
	lea	eax, DWORD PTR $T219291[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 282  : 	kStream << ArrayWrapper<int>(GC.getNumFlavorTypes(), m_piPersonalityFlavor);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219307[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219311[ebp], eax
	mov	ecx, DWORD PTR $T219311[ebp]
	mov	DWORD PTR $T219292[ebp], ecx
	mov	edx, DWORD PTR $T219307[ebp]
	mov	DWORD PTR $T219292[ebp+4], edx
	lea	eax, DWORD PTR $T219292[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8

; 283  : 	kStream << ArrayWrapper<int>(GC.getNumFlavorTypes(), m_piActiveFlavor);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219315[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T219319[ebp], ecx
	mov	edx, DWORD PTR $T219319[ebp]
	mov	DWORD PTR $T219293[ebp], edx
	mov	eax, DWORD PTR $T219315[ebp]
	mov	DWORD PTR $T219293[ebp+4], eax
	lea	ecx, DWORD PTR $T219293[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
	add	esp, 8

; 284  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvFlavorManager@@QAEXAAVFDataStream@@@Z ENDP	; CvFlavorManager::Write
_TEXT	ENDS
PUBLIC	?push_back_existing@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAEXI@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::push_back_existing
PUBLIC	?Alloc@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::Alloc
PUBLIC	?AddFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@_N@Z ; CvFlavorManager::AddFlavorRecipient
; Function compile flags: /Odtp
;	COMDAT ?AddFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@_N@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T219447 = -68						; size = 4
_uiNewIndex$219443 = -16				; size = 4
$T219439 = -12						; size = 12
_pTargetObject$ = 8					; size = 4
_bPropegateFlavorValues$ = 12				; size = 1
?AddFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@_N@Z PROC ; CvFlavorManager::AddFlavorRecipient, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	// Add this one to our list
; 290  : 	m_FlavorTargetList.push_back(pTargetObject);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T219447[ebp], eax
	mov	ecx, DWORD PTR _pTargetObject$[ebp]
	mov	DWORD PTR $T219439[ebp+8], ecx
	lea	edx, DWORD PTR $T219439[ebp]
	push	edx
	mov	ecx, DWORD PTR $T219447[ebp]
	call	?Alloc@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::Alloc
	mov	DWORD PTR _uiNewIndex$219443[ebp], eax
	mov	eax, DWORD PTR _uiNewIndex$219443[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219447[ebp]
	call	?push_back_existing@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAEXI@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::push_back_existing

; 291  : 
; 292  : 	// If we've already been initialized, then go ahead and send out current values
; 293  : 	if(m_piPersonalityFlavor != NULL && bPropegateFlavorValues)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@AddFlavorR
	movzx	edx, BYTE PTR _bPropegateFlavorValues$[ebp]
	test	edx, edx
	je	SHORT $LN2@AddFlavorR

; 294  : 	{
; 295  : 		pTargetObject->SetFlavors(m_piPersonalityFlavor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _pTargetObject$[ebp]
	call	?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z ; CvFlavorRecipient::SetFlavors
$LN2@AddFlavorR:

; 296  : 	}
; 297  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@_N@Z ENDP ; CvFlavorManager::AddFlavorRecipient
_TEXT	ENDS
PUBLIC	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
PUBLIC	??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++
PUBLIC	?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z ; FFastList<CvFlavorRecipient *,297,0>::erase
PUBLIC	?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::end
PUBLIC	?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::begin
PUBLIC	?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z ; CvFlavorManager::RemoveFlavorRecipient
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
xdata$x	SEGMENT
__unwindtable$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z$1
__ehfuncinfo$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
xdata$x	ENDS
;	COMDAT ?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T219464 = -48						; size = 4
$T219451 = -44						; size = 8
$T219450 = -36						; size = 8
_end$ = -28						; size = 8
_iter$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_pTargetObject$ = 8					; size = 4
?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z PROC ; CvFlavorManager::RemoveFlavorRecipient, COMDAT
; _this$ = ecx

; 301  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 302  : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 303  : 	for (Flavor_List::iterator iter = m_FlavorTargetList.begin(); iter != m_FlavorTargetList.end(); ++iter)
; 304  : 	{
; 305  : 		if (*iter == pTargetObject)
; 306  : 		{
; 307  : 			m_FlavorTargetList.erase(iter);
; 308  : 			return;
; 309  : 		}
; 310  : #else
; 311  : 	Flavor_List::iterator iter = m_FlavorTargetList.begin();

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 312  : 	Flavor_List::iterator end  = m_FlavorTargetList.end();

	lea	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::end
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 313  : 
; 314  : 	while(iter != end)

$LN10@RemoveFlav:
	mov	edx, DWORD PTR _iter$[ebp+4]
	xor	eax, eax
	cmp	edx, DWORD PTR _end$[ebp+4]
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@RemoveFlav

; 315  : 	{
; 316  : 		if(*iter == pTargetObject)

	mov	edx, DWORD PTR _iter$[ebp]
	mov	DWORD PTR $T219464[ebp], edx
	mov	eax, DWORD PTR _iter$[ebp+4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR $T219464[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+8]
	cmp	eax, DWORD PTR _pTargetObject$[ebp]
	jne	SHORT $LN1@RemoveFlav

; 317  : 		{
; 318  : 			m_FlavorTargetList.erase(iter);

	mov	ecx, DWORD PTR _iter$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _iter$[ebp]
	push	edx
	lea	eax, DWORD PTR $T219450[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z ; FFastList<CvFlavorRecipient *,297,0>::erase

; 319  : 			return;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	SHORT $LN4@RemoveFlav
$LN1@RemoveFlav:

; 320  : 		}
; 321  : 		iter++;

	push	0
	lea	ecx, DWORD PTR $T219451[ebp]
	push	ecx
	lea	ecx, DWORD PTR _iter$[ebp]
	call	??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++

; 322  : #endif
; 323  : 	}

	jmp	SHORT $LN10@RemoveFlav
$LN2@RemoveFlav:

; 324  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN4@RemoveFlav:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z$0:
	lea	ecx, DWORD PTR _iter$[ebp]
	jmp	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
__unwindfunclet$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z$1:
	lea	ecx, DWORD PTR _end$[ebp]
	jmp	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
__ehhandler$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveFlavorRecipient@CvFlavorManager@@QAEXPAVCvFlavorRecipient@@@Z ENDP ; CvFlavorManager::RemoveFlavorRecipient
PUBLIC	?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z	; CvFlavorManager::BroadcastFlavors
PUBLIC	?ChangeFlavors@CvFlavorManager@@QAEXPAH_N@Z	; CvFlavorManager::ChangeFlavors
; Function compile flags: /Odtp
;	COMDAT ?ChangeFlavors@CvFlavorManager@@QAEXPAH_N@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_iI$218100 = -16					; size = 4
_iFlavorMaxValue$218098 = -12				; size = 4
_iFlavorMinValue$218097 = -8				; size = 4
_iNumFlavors$218099 = -4				; size = 4
_piDeltaFlavorValues$ = 8				; size = 4
_bPlayerLevelUpdate$ = 12				; size = 1
?ChangeFlavors@CvFlavorManager@@QAEXPAH_N@Z PROC	; CvFlavorManager::ChangeFlavors, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	CvAssertMsg(piDeltaFlavorValues != NULL, "Invalid array of flavor deltas passed to flavor manager");
; 330  : 
; 331  : 	if(!piDeltaFlavorValues) return;

	cmp	DWORD PTR _piDeltaFlavorValues$[ebp], 0
	jne	SHORT $LN9@ChangeFlav@2
	jmp	$LN10@ChangeFlav@2
$LN9@ChangeFlav@2:

; 332  : 
; 333  : 	if (bPlayerLevelUpdate)

	movzx	eax, BYTE PTR _bPlayerLevelUpdate$[ebp]
	test	eax, eax
	je	$LN8@ChangeFlav@2

; 334  : 	{
; 335  : 		int iFlavorMinValue = /*-1000*/ GC.getFLAVOR_MIN_VALUE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1876
	mov	DWORD PTR _iFlavorMinValue$218097[ebp], ecx

; 336  : 		int iFlavorMaxValue = /*1000*/ GC.getFLAVOR_MAX_VALUE();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1880
	mov	DWORD PTR _iFlavorMaxValue$218098[ebp], edx

; 337  : 
; 338  : 		int iNumFlavors = GC.getNumFlavorTypes();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR _iNumFlavors$218099[ebp], eax

; 339  : 		for(int iI = 0; iI < iNumFlavors; iI++)

	mov	DWORD PTR _iI$218100[ebp], 0
	jmp	SHORT $LN7@ChangeFlav@2
$LN6@ChangeFlav@2:
	mov	ecx, DWORD PTR _iI$218100[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218100[ebp], ecx
$LN7@ChangeFlav@2:
	mov	edx, DWORD PTR _iI$218100[ebp]
	cmp	edx, DWORD PTR _iNumFlavors$218099[ebp]
	jge	$LN8@ChangeFlav@2

; 340  : 		{
; 341  : 			if(piDeltaFlavorValues[iI] != 0)

	mov	eax, DWORD PTR _iI$218100[ebp]
	mov	ecx, DWORD PTR _piDeltaFlavorValues$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN4@ChangeFlav@2

; 342  : 			{
; 343  : 				m_piActiveFlavor[iI] += piDeltaFlavorValues[iI];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _iI$218100[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _iI$218100[ebp]
	mov	ecx, DWORD PTR _piDeltaFlavorValues$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _iI$218100[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 344  : 
; 345  : 				// Make sure within range
; 346  : 				if(m_piActiveFlavor[iI] < iFlavorMinValue)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _iI$218100[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	ecx, DWORD PTR _iFlavorMinValue$218097[ebp]
	jge	SHORT $LN3@ChangeFlav@2

; 347  : 				{
; 348  : 					m_piActiveFlavor[iI] =iFlavorMinValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _iI$218100[ebp]
	mov	edx, DWORD PTR _iFlavorMinValue$218097[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN2@ChangeFlav@2
$LN3@ChangeFlav@2:

; 349  : 				}
; 350  : 				else if(m_piActiveFlavor[iI] > iFlavorMaxValue)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _iI$218100[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _iFlavorMaxValue$218098[ebp]
	jle	SHORT $LN2@ChangeFlav@2

; 351  : 				{
; 352  : 					m_piActiveFlavor[iI] = iFlavorMaxValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _iI$218100[ebp]
	mov	ecx, DWORD PTR _iFlavorMaxValue$218098[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN2@ChangeFlav@2:

; 353  : 				}
; 354  : 
; 355  : 				LogFlavors((FlavorTypes) iI);

	mov	edx, DWORD PTR _iI$218100[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z ; CvFlavorManager::LogFlavors
$LN4@ChangeFlav@2:

; 356  : 			}
; 357  : 		}

	jmp	$LN6@ChangeFlav@2
$LN8@ChangeFlav@2:

; 358  : 	}
; 359  : 
; 360  : 	BroadcastFlavors(piDeltaFlavorValues, bPlayerLevelUpdate);

	movzx	eax, BYTE PTR _bPlayerLevelUpdate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _piDeltaFlavorValues$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z ; CvFlavorManager::BroadcastFlavors
$LN10@ChangeFlav@2:

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeFlavors@CvFlavorManager@@QAEXPAH_N@Z ENDP	; CvFlavorManager::ChangeFlavors
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ResetToBasePersonality@CvFlavorManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T219601 = -8						; size = 4
_iI$ = -4						; size = 4
?ResetToBasePersonality@CvFlavorManager@@QAEXXZ PROC	; CvFlavorManager::ResetToBasePersonality, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	int iI;
; 367  : 
; 368  : 	for(iI = 0; iI < GC.getNumFlavorTypes(); iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN3@ResetToBas
$LN2@ResetToBas:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN3@ResetToBas:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219601[ebp], ecx
	mov	edx, DWORD PTR _iI$[ebp]
	cmp	edx, DWORD PTR $T219601[ebp]
	jge	SHORT $LN1@ResetToBas

; 369  : 	{
; 370  : 		m_piActiveFlavor[iI] = m_piPersonalityFlavor[iI];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _iI$[ebp]
	mov	esi, DWORD PTR _iI$[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx

; 371  : 	}

	jmp	SHORT $LN2@ResetToBas
$LN1@ResetToBas:

; 372  : 
; 373  : 	BroadcastBaseFlavors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ ; CvFlavorManager::BroadcastBaseFlavors

; 374  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetToBasePersonality@CvFlavorManager@@QAEXXZ ENDP	; CvFlavorManager::ResetToBasePersonality
_TEXT	ENDS
PUBLIC	??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@		; `string'
PUBLIC	??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@	; `string'
PUBLIC	?AdjustWeightsForMap@CvFlavorManager@@QAEXXZ	; CvFlavorManager::AdjustWeightsForMap
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?countMajorCivsAlive@CvGame@@QBEHXZ:PROC	; CvGame::countMajorCivsAlive
EXTRN	?getLandPlots@CvMap@@QAEHXZ:PROC		; CvMap::getLandPlots
EXTRN	__fltused:DWORD
EXTRN	___libm_sse2_log10:PROC
;	COMDAT ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@ DB 'FLAVOR_GROWTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
CONST	SEGMENT
??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@ DB 'FLAVOR_EXPANSION', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
CONST	ENDS
;	COMDAT ?AdjustWeightsForMap@CvFlavorManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T219622 = -68						; size = 4
$T219618 = -64						; size = 4
$T219611 = -60						; size = 4
$T219607 = -56						; size = 4
_iExpansionIndex$218132 = -52				; size = 4
_iNumFlavorTypes$218125 = -48				; size = 4
_iFlavorMaxValue$218130 = -44				; size = 4
_iFlavorMinValue$218131 = -40				; size = 4
_iGrowthIndex$218134 = -36				; size = 4
_iNumPlayers$ = -32					; size = 4
_iAdjust$ = -28						; size = 4
_iTilesPerPlayer$ = -24					; size = 8
_iTotalLandTiles$ = -12					; size = 4
_fAdjust$ = -8						; size = 8
?AdjustWeightsForMap@CvFlavorManager@@QAEXXZ PROC	; CvFlavorManager::AdjustWeightsForMap, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 	int iTotalLandTiles;
; 380  : 	int iNumPlayers;
; 381  : 	double iTilesPerPlayer;
; 382  : 	double fAdjust;
; 383  : 	int iAdjust;
; 384  : 
; 385  : 	iTotalLandTiles = GC.getMap().getLandPlots();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T219607[ebp], eax
	mov	ecx, DWORD PTR $T219607[ebp]
	call	?getLandPlots@CvMap@@QAEHXZ		; CvMap::getLandPlots
	mov	DWORD PTR _iTotalLandTiles$[ebp], eax

; 386  : 	iNumPlayers = GC.getGame().countMajorCivsAlive();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T219611[ebp], ecx
	mov	ecx, DWORD PTR $T219611[ebp]
	call	?countMajorCivsAlive@CvGame@@QBEHXZ	; CvGame::countMajorCivsAlive
	mov	DWORD PTR _iNumPlayers$[ebp], eax

; 387  : 
; 388  : 	if(iNumPlayers > 0)

	cmp	DWORD PTR _iNumPlayers$[ebp], 0
	jle	$LN5@AdjustWeig

; 389  : 	{
; 390  : 		int iNumFlavorTypes = GC.getNumFlavorTypes();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR _iNumFlavorTypes$218125[ebp], edx

; 391  : 		// Find tiles per player
; 392  : 		iTilesPerPlayer = (double)iTotalLandTiles / (double)iNumPlayers;

	cvtsi2sd xmm0, DWORD PTR _iTotalLandTiles$[ebp]
	cvtsi2sd xmm1, DWORD PTR _iNumPlayers$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _iTilesPerPlayer$[ebp], xmm0

; 393  : 
; 394  : 		// Compute +/- addition
; 395  : 		//
; 396  : 		// We want this to be logarithmic, since that is the curve between lots of players on a duel map
; 397  : 		// and a few player on a huge map.  "FLAVOR_STANDARD_LOG10_TILES_PER_PLAYER" is the typical log10 of
; 398  : 		// tiles per player.  We go up and down from this point (multiplying by a coefficient) from here
; 399  : 		fAdjust = log10(iTilesPerPlayer) - GC.getFLAVOR_STANDARD_LOG10_TILES_PER_PLAYER();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8092
	movss	DWORD PTR $T219618[ebp], xmm0
	movsd	xmm0, QWORD PTR _iTilesPerPlayer$[ebp]
	call	___libm_sse2_log10
	cvtss2sd xmm1, DWORD PTR $T219618[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _fAdjust$[ebp], xmm0

; 400  : 		fAdjust *= (double)GC.getFLAVOR_EXPANDGROW_COEFFICIENT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1888
	mov	DWORD PTR $T219622[ebp], eax
	cvtsi2sd xmm0, DWORD PTR $T219622[ebp]
	mulsd	xmm0, QWORD PTR _fAdjust$[ebp]
	movsd	QWORD PTR _fAdjust$[ebp], xmm0

; 401  : 		iAdjust = (int)fAdjust;

	cvttsd2si ecx, QWORD PTR _fAdjust$[ebp]
	mov	DWORD PTR _iAdjust$[ebp], ecx

; 402  : 
; 403  : 		int iFlavorMaxValue = /*20*/ GC.getPERSONALITY_FLAVOR_MAX_VALUE();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1868
	mov	DWORD PTR _iFlavorMaxValue$218130[ebp], edx

; 404  : 		int iFlavorMinValue = /*0*/ GC.getPERSONALITY_FLAVOR_MIN_VALUE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1872
	mov	DWORD PTR _iFlavorMinValue$218131[ebp], eax

; 405  : 
; 406  : 		int iExpansionIndex = GC.getInfoTypeForString("FLAVOR_EXPANSION");

	push	0
	push	OFFSET ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iExpansionIndex$218132[ebp], eax

; 407  : 		int iGrowthIndex = GC.getInfoTypeForString("FLAVOR_GROWTH");

	push	0
	push	OFFSET ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iGrowthIndex$218134[ebp], eax

; 408  : 
; 409  : 		// Boost expansion
; 410  : 		CvAssert(iExpansionIndex >= 0 && iExpansionIndex < iNumFlavorTypes);
; 411  : 		if (iExpansionIndex >= 0 && iExpansionIndex < iNumFlavorTypes)

	cmp	DWORD PTR _iExpansionIndex$218132[ebp], 0
	jl	SHORT $LN3@AdjustWeig
	mov	ecx, DWORD PTR _iExpansionIndex$218132[ebp]
	cmp	ecx, DWORD PTR _iNumFlavorTypes$218125[ebp]
	jge	SHORT $LN3@AdjustWeig

; 412  : 		{
; 413  : 			m_piPersonalityFlavor[iExpansionIndex] += iAdjust;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iExpansionIndex$218132[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _iAdjust$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _iExpansionIndex$218132[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 414  : 			if(m_piPersonalityFlavor[iExpansionIndex] > iFlavorMaxValue)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _iExpansionIndex$218132[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	ecx, DWORD PTR _iFlavorMaxValue$218130[ebp]
	jle	SHORT $LN3@AdjustWeig

; 415  : 			{
; 416  : 				m_piPersonalityFlavor[iExpansionIndex] = iFlavorMaxValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iExpansionIndex$218132[ebp]
	mov	edx, DWORD PTR _iFlavorMaxValue$218130[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN3@AdjustWeig:

; 417  : 			}
; 418  : 		}
; 419  : 
; 420  : 		// Reduce growth
; 421  : 		CvAssert(iGrowthIndex >= 0 && iGrowthIndex < iNumFlavorTypes);
; 422  : 		if (iGrowthIndex >= 0 && iGrowthIndex < iNumFlavorTypes)

	cmp	DWORD PTR _iGrowthIndex$218134[ebp], 0
	jl	SHORT $LN1@AdjustWeig
	mov	eax, DWORD PTR _iGrowthIndex$218134[ebp]
	cmp	eax, DWORD PTR _iNumFlavorTypes$218125[ebp]
	jge	SHORT $LN1@AdjustWeig

; 423  : 		{
; 424  : 			m_piPersonalityFlavor[iGrowthIndex] -= iAdjust;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _iGrowthIndex$218134[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	sub	ecx, DWORD PTR _iAdjust$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _iGrowthIndex$218134[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 425  : 			if(m_piPersonalityFlavor[iGrowthIndex] < iFlavorMinValue)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iGrowthIndex$218134[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _iFlavorMinValue$218131[ebp]
	jge	SHORT $LN1@AdjustWeig

; 426  : 			{
; 427  : 				m_piPersonalityFlavor[iGrowthIndex] = iFlavorMinValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _iGrowthIndex$218134[ebp]
	mov	ecx, DWORD PTR _iFlavorMinValue$218131[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN1@AdjustWeig:

; 428  : 			}
; 429  : 		}
; 430  : 
; 431  : 		// Save these off as our core personality and broadcast updates
; 432  : 		ResetToBasePersonality();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetToBasePersonality@CvFlavorManager@@QAEXXZ ; CvFlavorManager::ResetToBasePersonality
$LN5@AdjustWeig:

; 433  : 	}
; 434  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdjustWeightsForMap@CvFlavorManager@@QAEXXZ ENDP	; CvFlavorManager::AdjustWeightsForMap
_TEXT	ENDS
PUBLIC	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
; Function compile flags: /Odtp
;	COMDAT ?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eType$ = 8						; size = 4
?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z PROC ; CvFlavorManager::GetIndividualFlavor, COMDAT
; _this$ = ecx

; 438  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 	CvAssert((int)eType >= 0 && (int)eType < GC.getNumFlavorTypes());
; 440  : 	return m_piActiveFlavor[eType];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _eType$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 441  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ENDP ; CvFlavorManager::GetIndividualFlavor
_TEXT	ENDS
PUBLIC	?GetAllFlavors@CvFlavorManager@@QAEPAHXZ	; CvFlavorManager::GetAllFlavors
; Function compile flags: /Odtp
;	COMDAT ?GetAllFlavors@CvFlavorManager@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAllFlavors@CvFlavorManager@@QAEPAHXZ PROC		; CvFlavorManager::GetAllFlavors, COMDAT
; _this$ = ecx

; 445  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 446  : 	return m_piActiveFlavor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 447  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAllFlavors@CvFlavorManager@@QAEPAHXZ ENDP		; CvFlavorManager::GetAllFlavors
_TEXT	ENDS
PUBLIC	?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetPersonalityIndividualFlavor
; Function compile flags: /Odtp
;	COMDAT ?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eType$ = 8						; size = 4
?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z PROC ; CvFlavorManager::GetPersonalityIndividualFlavor, COMDAT
; _this$ = ecx

; 451  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 452  : 	CvAssert((int)eType >= 0 && (int)eType < GC.getNumFlavorTypes());
; 453  : 	return m_piPersonalityFlavor[eType];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _eType$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPersonalityIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ENDP ; CvFlavorManager::GetPersonalityIndividualFlavor
_TEXT	ENDS
PUBLIC	?GetAllPersonalityFlavors@CvFlavorManager@@QAEPAHXZ ; CvFlavorManager::GetAllPersonalityFlavors
; Function compile flags: /Odtp
;	COMDAT ?GetAllPersonalityFlavors@CvFlavorManager@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAllPersonalityFlavors@CvFlavorManager@@QAEPAHXZ PROC ; CvFlavorManager::GetAllPersonalityFlavors, COMDAT
; _this$ = ecx

; 458  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 459  : 	return m_piPersonalityFlavor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 460  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAllPersonalityFlavors@CvFlavorManager@@QAEPAHXZ ENDP ; CvFlavorManager::GetAllPersonalityFlavors
_TEXT	ENDS
PUBLIC	?GetAdjustedValue@CvFlavorManager@@QAEHHHHH@Z	; CvFlavorManager::GetAdjustedValue
; Function compile flags: /Odtp
;	COMDAT ?RandomizeWeights@CvFlavorManager@@AAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T219653 = -20						; size = 4
_iMax$ = -16						; size = 4
_iMin$ = -12						; size = 4
_iPlusMinus$ = -8					; size = 4
_iI$ = -4						; size = 4
?RandomizeWeights@CvFlavorManager@@AAEXXZ PROC		; CvFlavorManager::RandomizeWeights, COMDAT
; _this$ = ecx

; 466  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 467  : 	int iI;
; 468  : 	int iMin, iMax, iPlusMinus;
; 469  : 
; 470  : 	iMin = /*0*/ GC.getPERSONALITY_FLAVOR_MIN_VALUE();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1872
	mov	DWORD PTR _iMin$[ebp], eax

; 471  : 	iMax = /*20*/ GC.getPERSONALITY_FLAVOR_MAX_VALUE();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1868
	mov	DWORD PTR _iMax$[ebp], ecx

; 472  : 	iPlusMinus = /*2*/ GC.getFLAVOR_RANDOMIZATION_RANGE();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1884
	mov	DWORD PTR _iPlusMinus$[ebp], edx

; 473  : 
; 474  : 	for(iI = 0; iI < GC.getNumFlavorTypes(); iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN4@RandomizeW
$LN3@RandomizeW:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN4@RandomizeW:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T219653[ebp], ecx
	mov	edx, DWORD PTR _iI$[ebp]
	cmp	edx, DWORD PTR $T219653[ebp]
	jge	SHORT $LN5@RandomizeW

; 475  : 	{
; 476  : 		// Don't modify it if it's zero-ed out in the XML
; 477  : #ifdef AUI_FLAVOR_MANAGER_FIX_RANDOMIZE_WEIGHTS_ZEROED_OUT_FLAVOR
; 478  : 		if (m_piPersonalityFlavor[iI] >= 0)
; 479  : #else
; 480  : 		if(m_piPersonalityFlavor[iI] != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iI$[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN1@RandomizeW

; 481  : #endif
; 482  : 		{
; 483  : 			m_piPersonalityFlavor[iI] = GetAdjustedValue(m_piPersonalityFlavor[iI], iPlusMinus, iMin, iMax);

	mov	eax, DWORD PTR _iMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iPlusMinus$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAdjustedValue@CvFlavorManager@@QAEHHHHH@Z ; CvFlavorManager::GetAdjustedValue
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN1@RandomizeW:

; 484  : 		}

	jmp	SHORT $LN3@RandomizeW
$LN5@RandomizeW:

; 485  : 	}
; 486  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RandomizeWeights@CvFlavorManager@@AAEXXZ ENDP		; CvFlavorManager::RandomizeWeights
_TEXT	ENDS
PUBLIC	??_C@_0BN@BFJAHIMF@Adjusting?5Personality?5Flavor?$AA@ ; `string'
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
;	COMDAT ??_C@_0BN@BFJAHIMF@Adjusting?5Personality?5Flavor?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0BN@BFJAHIMF@Adjusting?5Personality?5Flavor?$AA@ DB 'Adjusting Pers'
	DB	'onality Flavor', 00H			; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
CONST	ENDS
;	COMDAT ?GetAdjustedValue@CvFlavorManager@@QAEHHHHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T219659 = -12						; size = 4
_iAdjust$ = -8						; size = 4
_iRtnValue$ = -4					; size = 4
_iOriginalValue$ = 8					; size = 4
_iPlusMinus$ = 12					; size = 4
_iMin$ = 16						; size = 4
_iMax$ = 20						; size = 4
?GetAdjustedValue@CvFlavorManager@@QAEHHHHH@Z PROC	; CvFlavorManager::GetAdjustedValue, COMDAT
; _this$ = ecx

; 494  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 495  : 	int iAdjust;
; 496  : 	int iRtnValue;
; 497  : 
; 498  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USE_REROLLS
; 499  : 	int iReroll = 0;
; 500  : #endif
; 501  : #ifdef AUI_FLAVOR_MANAGER_FIX_GET_ADJUSTED_VALUE_NEGATIVE_PLUSMINUS
; 502  : 	iPlusMinus = abs(iPlusMinus);
; 503  : #endif
; 504  : 
; 505  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USES_BINOM_RNG
; 506  : 	iAdjust = GC.getGame().getJonRandNumBinom((iPlusMinus * 2 + 1), "Adjusting Personality Flavor");
; 507  : #else
; 508  : 	iAdjust = GC.getGame().getJonRandNum((iPlusMinus * 2 + 1), "Adjusting Personality Flavor");

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T219659[ebp], eax
	push	OFFSET ??_C@_0BN@BFJAHIMF@Adjusting?5Personality?5Flavor?$AA@
	mov	ecx, DWORD PTR _iPlusMinus$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+1]
	push	edx
	mov	ecx, DWORD PTR $T219659[ebp]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	DWORD PTR _iAdjust$[ebp], eax

; 509  : #endif
; 510  : 	iRtnValue = iOriginalValue + iAdjust - iPlusMinus;

	mov	eax, DWORD PTR _iOriginalValue$[ebp]
	add	eax, DWORD PTR _iAdjust$[ebp]
	sub	eax, DWORD PTR _iPlusMinus$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 511  : 
; 512  : 	if(iRtnValue < iMin)

	mov	ecx, DWORD PTR _iRtnValue$[ebp]
	cmp	ecx, DWORD PTR _iMin$[ebp]
	jge	SHORT $LN3@GetAdjuste

; 513  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USE_REROLLS
; 514  : 	{
; 515  : 		iReroll = iMin - iRtnValue;
; 516  : #endif
; 517  : 		iRtnValue = iMin;

	mov	edx, DWORD PTR _iMin$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], edx
	jmp	SHORT $LN2@GetAdjuste
$LN3@GetAdjuste:

; 518  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USE_REROLLS
; 519  : }
; 520  : #endif
; 521  : 	else if(iRtnValue > iMax)

	mov	eax, DWORD PTR _iRtnValue$[ebp]
	cmp	eax, DWORD PTR _iMax$[ebp]
	jle	SHORT $LN2@GetAdjuste

; 522  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USE_REROLLS
; 523  : 	{
; 524  : 		iReroll = iMax - iRtnValue;
; 525  : #endif
; 526  : 		iRtnValue = iMax;

	mov	ecx, DWORD PTR _iMax$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], ecx
$LN2@GetAdjuste:

; 527  : #ifdef AUI_FLAVOR_MANAGER_GET_ADJUSTED_VALUE_USE_REROLLS
; 528  : 	}
; 529  : 
; 530  : 	if (iReroll != 0)
; 531  : 	{
; 532  : 		iRtnValue = GetAdjustedValue(iRtnValue, iReroll, iMin, iMax);
; 533  : 	}
; 534  : #endif
; 535  : 
; 536  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 537  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetAdjustedValue@CvFlavorManager@@QAEHHHHH@Z ENDP	; CvFlavorManager::GetAdjustedValue
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
xdata$x	SEGMENT
__unwindtable$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z$0
__ehfuncinfo$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
xdata$x	ENDS
;	COMDAT ?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z
_TEXT	SEGMENT
tv162 = -84						; size = 4
_this$ = -80						; size = 4
$T219840 = -76						; size = 4
$T219834 = -72						; size = 4
$T219807 = -68						; size = 4
$T219775 = -64						; size = 4
$T219769 = -60						; size = 4
$T219742 = -56						; size = 4
$T219719 = -52						; size = 4
$T219665 = -48						; size = 8
$T219664 = -37						; size = 1
$T219663 = -36						; size = 8
$T219662 = -28						; size = 8
_it$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_piDeltaFlavorValues$ = 8				; size = 4
_bPlayerLevelUpdate$ = 12				; size = 1
?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z PROC	; CvFlavorManager::BroadcastFlavors, COMDAT
; _this$ = ecx

; 541  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 542  : 	Flavor_List::iterator it;

	mov	DWORD PTR _it$[ebp], 0
	mov	DWORD PTR _it$[ebp+4], 268435455	; 0fffffffH
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 543  : 
; 544  : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 545  : 	for (it = m_FlavorTargetList.begin(); it != m_FlavorTargetList.end(); ++it)
; 546  : #else
; 547  : 	for(it = m_FlavorTargetList.begin(); it != m_FlavorTargetList.end(); it++)

	lea	eax, DWORD PTR $T219662[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::begin
	mov	DWORD PTR tv162[ebp], eax
	mov	ecx, DWORD PTR tv162[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _it$[ebp], edx
	mov	DWORD PTR _it$[ebp+4], eax
	jmp	SHORT $LN6@BroadcastF
$LN5@BroadcastF:
	push	0
	lea	ecx, DWORD PTR $T219663[ebp]
	push	ecx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++
$LN6@BroadcastF:
	lea	edx, DWORD PTR $T219665[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::end
	mov	DWORD PTR $T219719[ebp], eax
	mov	eax, DWORD PTR $T219719[ebp]
	mov	ecx, DWORD PTR _it$[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setne	dl
	mov	BYTE PTR $T219664[ebp], dl
	movzx	eax, BYTE PTR $T219664[ebp]
	test	eax, eax
	je	$LN4@BroadcastF

; 548  : #endif
; 549  : 	{
; 550  : 		if(bPlayerLevelUpdate && !(*it)->IsCity())

	movzx	ecx, BYTE PTR _bPlayerLevelUpdate$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@BroadcastF
	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T219742[ebp], edx
	mov	eax, DWORD PTR _it$[ebp+4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR $T219742[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR $T219769[ebp], eax
	mov	ecx, DWORD PTR $T219769[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?IsCity@CvFlavorRecipient@@QAE_NXZ	; CvFlavorRecipient::IsCity
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@BroadcastF

; 551  : 		{
; 552  : 			(*it)->ChangeFlavors(piDeltaFlavorValues);

	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T219775[ebp], eax
	push	0
	mov	ecx, DWORD PTR _piDeltaFlavorValues$[ebp]
	push	ecx
	mov	edx, DWORD PTR _it$[ebp+4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR $T219775[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ecx+edx+8]
	call	?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z ; CvFlavorRecipient::ChangeFlavors
	jmp	SHORT $LN2@BroadcastF
$LN3@BroadcastF:

; 553  : 		}
; 554  : 		else if (!bPlayerLevelUpdate && (*it)->IsCity())

	movzx	edx, BYTE PTR _bPlayerLevelUpdate$[ebp]
	test	edx, edx
	jne	SHORT $LN2@BroadcastF
	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T219807[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR $T219807[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR $T219834[ebp], ecx
	mov	edx, DWORD PTR $T219834[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsCity@CvFlavorRecipient@@QAE_NXZ	; CvFlavorRecipient::IsCity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@BroadcastF

; 555  : 		{
; 556  : 			(*it)->ChangeFlavors(piDeltaFlavorValues);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T219840[ebp], ecx
	push	0
	mov	edx, DWORD PTR _piDeltaFlavorValues$[ebp]
	push	edx
	mov	eax, DWORD PTR _it$[ebp+4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR $T219840[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx+eax+8]
	call	?ChangeFlavors@CvFlavorRecipient@@QAEXPAH_N@Z ; CvFlavorRecipient::ChangeFlavors
$LN2@BroadcastF:

; 557  : 		}
; 558  : 	}

	jmp	$LN5@BroadcastF
$LN4@BroadcastF:

; 559  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
__ehhandler$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BroadcastFlavors@CvFlavorManager@@AAEXPAH_N@Z ENDP	; CvFlavorManager::BroadcastFlavors
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
xdata$x	SEGMENT
__unwindtable$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ$0
__ehfuncinfo$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
xdata$x	ENDS
;	COMDAT ?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ
_TEXT	SEGMENT
tv140 = -64						; size = 4
_this$ = -60						; size = 4
$T219972 = -56						; size = 4
$T219949 = -52						; size = 4
$T219895 = -48						; size = 8
$T219894 = -37						; size = 1
$T219893 = -36						; size = 8
$T219892 = -28						; size = 8
_it$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ PROC	; CvFlavorManager::BroadcastBaseFlavors, COMDAT
; _this$ = ecx

; 563  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 	Flavor_List::iterator it;

	mov	DWORD PTR _it$[ebp], 0
	mov	DWORD PTR _it$[ebp+4], 268435455	; 0fffffffH
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 565  : 
; 566  : #ifdef AUI_ITERATOR_POSTFIX_INCREMENT_OPTIMIZATIONS
; 567  : 	for (it = m_FlavorTargetList.begin(); it != m_FlavorTargetList.end(); ++it)
; 568  : #else
; 569  : 	for(it = m_FlavorTargetList.begin(); it != m_FlavorTargetList.end(); it++)

	lea	eax, DWORD PTR $T219892[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::begin
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR tv140[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _it$[ebp], edx
	mov	DWORD PTR _it$[ebp+4], eax
	jmp	SHORT $LN3@BroadcastB
$LN2@BroadcastB:
	push	0
	lea	ecx, DWORD PTR $T219893[ebp]
	push	ecx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++
$LN3@BroadcastB:
	lea	edx, DWORD PTR $T219895[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ; FFastList<CvFlavorRecipient *,297,0>::end
	mov	DWORD PTR $T219949[ebp], eax
	mov	eax, DWORD PTR $T219949[ebp]
	mov	ecx, DWORD PTR _it$[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setne	dl
	mov	BYTE PTR $T219894[ebp], dl
	movzx	eax, BYTE PTR $T219894[ebp]
	test	eax, eax
	je	SHORT $LN1@BroadcastB

; 570  : #endif
; 571  : 	{
; 572  : 		(*it)->SetFlavors(m_piPersonalityFlavor);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T219972[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _it$[ebp+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR $T219972[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+8]
	call	?SetFlavors@CvFlavorRecipient@@QAEXPAH@Z ; CvFlavorRecipient::SetFlavors

; 573  : 	}

	jmp	SHORT $LN2@BroadcastB
$LN1@BroadcastB:

; 574  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
__ehhandler$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?BroadcastBaseFlavors@CvFlavorManager@@AAEXXZ ENDP	; CvFlavorManager::BroadcastBaseFlavors
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0P@FJBDGACB@Flavor?0?5?$CFs?0?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	??_C@_0BA@PDOPNOIB@FlavorAILog?4csv?$AA@	; `string'
PUBLIC	??_C@_04EBGNMJBD@?4csv?$AA@			; `string'
PUBLIC	??_C@_0N@IDMPFJHH@FlavorAILog_?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT ??_C@_0P@FJBDGACB@Flavor?0?5?$CFs?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0P@FJBDGACB@Flavor?0?5?$CFs?0?5?$CFd?$AA@ DB 'Flavor, %s, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PDOPNOIB@FlavorAILog?4csv?$AA@
CONST	SEGMENT
??_C@_0BA@PDOPNOIB@FlavorAILog?4csv?$AA@ DB 'FlavorAILog.csv', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBGNMJBD@?4csv?$AA@
CONST	SEGMENT
??_C@_04EBGNMJBD@?4csv?$AA@ DB '.csv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDMPFJHH@FlavorAILog_?$AA@
CONST	SEGMENT
??_C@_0N@IDMPFJHH@FlavorAILog_?$AA@ DB 'FlavorAILog_', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$8
	DD	05H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$9
	DD	05H
	DD	FLAT:__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvflavormanager.cpp
xdata$x	ENDS
;	COMDAT ?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z
_TEXT	SEGMENT
tv290 = -420						; size = 4
tv301 = -416						; size = 4
tv269 = -412						; size = 4
tv312 = -408						; size = 4
tv153 = -404						; size = 4
tv323 = -400						; size = 4
tv265 = -396						; size = 4
tv334 = -392						; size = 4
_this$ = -388						; size = 4
$T220123 = -384						; size = 4
$T220119 = -380						; size = 4
$T220115 = -376						; size = 4
$T220111 = -372						; size = 4
$T220107 = -368						; size = 4
$T220103 = -364						; size = 4
$T220099 = -360						; size = 4
$T220095 = -356						; size = 4
$T220091 = -352						; size = 4
$T220087 = -348						; size = 4
$T220083 = -344						; size = 4
$T220074 = -340						; size = 4
$T220070 = -336						; size = 4
$T220029 = -332						; size = 28
$T220028 = -304						; size = 28
$T220027 = -276						; size = 28
$T220026 = -248						; size = 28
$T220025 = -220						; size = 28
_iI$218228 = -192					; size = 4
_pLog$218223 = -188					; size = 4
_strOutBuf$ = -184					; size = 28
_playerName$ = -156					; size = 28
_strDesc$ = -128					; size = 28
_strLogName$ = -100					; size = 28
_strTemp$ = -72						; size = 28
_strBaseString$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eFlavor$ = 8						; size = 4
?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z PROC	; CvFlavorManager::LogFlavors, COMDAT
; _this$ = ecx

; 577  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 408				; 00000198H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 	CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 579  : 	CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 580  : 	CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 581  : 	CvString playerName;

	lea	ecx, DWORD PTR _playerName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 582  : 	CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 583  : 	CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 584  : 
; 585  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN8@LogFlavors
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@LogFlavors

; 586  : 	{
; 587  : 		// Find the name of this civ
; 588  : 		playerName = m_pPlayer->getCivilizationShortDescription();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T220070[ebp], eax
	cmp	DWORD PTR $T220070[ebp], 0
	je	SHORT $LN41@LogFlavors
	mov	eax, DWORD PTR $T220070[ebp]
	push	eax
	lea	ecx, DWORD PTR _playerName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN42@LogFlavors
$LN41@LogFlavors:
	lea	ecx, DWORD PTR _playerName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN42@LogFlavors:

; 589  : 
; 590  : 		// Open the log file
; 591  : 		if(GC.getPlayerAndCityAILogSplit())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@LogFlavors

; 592  : 		{
; 593  : 			strLogName = "FlavorAILog_" + playerName + ".csv";

	lea	edx, DWORD PTR _playerName$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@IDMPFJHH@FlavorAILog_?$AA@
	lea	eax, DWORD PTR $T220025[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv334[ebp], eax
	mov	ecx, DWORD PTR tv334[ebp]
	mov	DWORD PTR tv265[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	push	OFFSET ??_C@_04EBGNMJBD@?4csv?$AA@
	mov	edx, DWORD PTR tv265[ebp]
	push	edx
	lea	eax, DWORD PTR $T220026[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv323[ebp], eax
	mov	ecx, DWORD PTR tv323[ebp]
	mov	DWORD PTR $T220074[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T220074[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T220026[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T220025[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 594  : 		}
; 595  : 		else

	jmp	SHORT $LN6@LogFlavors
$LN7@LogFlavors:

; 596  : 		{
; 597  : 			strLogName = "FlavorAILog.csv";

	mov	edx, OFFSET ??_C@_0BA@PDOPNOIB@FlavorAILog?4csv?$AA@
	test	edx, edx
	je	SHORT $LN47@LogFlavors
	push	OFFSET ??_C@_0BA@PDOPNOIB@FlavorAILog?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN6@LogFlavors
$LN47@LogFlavors:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN6@LogFlavors:

; 598  : 		}
; 599  : 
; 600  : 		FILogFile* pLog;
; 601  : 		pLog = LOGFILEMGR.GetLog(strLogName, FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv153[ebp], eax
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T220083[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T220083[ebp]
	push	eax
	mov	ecx, DWORD PTR tv153[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv153[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$218223[ebp], eax

; 602  : 
; 603  : 		// Get the leading info for this line
; 604  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T220087[ebp], ecx
	mov	ecx, DWORD PTR $T220087[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 605  : 		strBaseString += playerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220027[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv312[ebp], eax
	mov	edx, DWORD PTR tv312[ebp]
	mov	DWORD PTR tv269[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv269[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T220027[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 606  : 
; 607  : 		// Dump out the setting for each flavor
; 608  : 		if(eFlavor == NO_FLAVOR)

	cmp	DWORD PTR _eFlavor$[ebp], -1
	jne	$LN5@LogFlavors

; 609  : 		{
; 610  : 			for(int iI = 0; iI < GC.getNumFlavorTypes(); iI++)

	mov	DWORD PTR _iI$218228[ebp], 0
	jmp	SHORT $LN4@LogFlavors
$LN3@LogFlavors:
	mov	ecx, DWORD PTR _iI$218228[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218228[ebp], ecx
$LN4@LogFlavors:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T220091[ebp], edx
	mov	eax, DWORD PTR _iI$218228[ebp]
	cmp	eax, DWORD PTR $T220091[ebp]
	jge	$LN2@LogFlavors

; 611  : 			{
; 612  : 				// Only dump if non-zero
; 613  : 				//		if (m_piLatestFlavorValues[iI] > 0)
; 614  : 				{
; 615  : 					strTemp.Format("Flavor, %s, %d", GC.getFlavorTypes((FlavorTypes)iI).GetCString(), GetIndividualFlavor((FlavorTypes) iI));

	mov	ecx, DWORD PTR _iI$218228[ebp]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1760
	mov	DWORD PTR $T220095[ebp], ecx
	mov	ecx, DWORD PTR $T220095[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T220099[ebp], eax
	mov	edx, DWORD PTR _iI$218228[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	push	eax
	mov	eax, DWORD PTR $T220099[ebp]
	push	eax
	push	OFFSET ??_C@_0P@FJBDGACB@Flavor?0?5?$CFs?0?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strTemp$[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 616  : 					strOutBuf = strBaseString + strTemp;

	lea	edx, DWORD PTR _strTemp$[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220028[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv301[ebp], eax
	mov	edx, DWORD PTR tv301[ebp]
	mov	DWORD PTR $T220103[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T220103[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T220028[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 617  : 					pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T220107[ebp], eax
	mov	eax, DWORD PTR $T220107[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$218223[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$218223[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 618  : 				}
; 619  : 			}

	jmp	$LN3@LogFlavors
$LN2@LogFlavors:

; 620  : 		}
; 621  : 		else

	jmp	$LN8@LogFlavors
$LN5@LogFlavors:

; 622  : 		{
; 623  : 			strTemp.Format("Flavor, %s, %d", GC.getFlavorTypes(eFlavor).GetCString(), GetIndividualFlavor(eFlavor));

	mov	edx, DWORD PTR _eFlavor$[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1760
	mov	DWORD PTR $T220111[ebp], edx
	mov	ecx, DWORD PTR $T220111[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T220115[ebp], eax
	mov	eax, DWORD PTR _eFlavor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	push	eax
	mov	ecx, DWORD PTR $T220115[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@FJBDGACB@Flavor?0?5?$CFs?0?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTemp$[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 624  : 			strOutBuf = strBaseString + strTemp;

	lea	eax, DWORD PTR _strTemp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T220029[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv290[ebp], eax
	mov	eax, DWORD PTR tv290[ebp]
	mov	DWORD PTR $T220119[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T220119[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T220029[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 625  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T220123[ebp], eax
	mov	ecx, DWORD PTR $T220123[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$218223[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$218223[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
$LN8@LogFlavors:

; 626  : 		}
; 627  : 	}
; 628  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strDesc$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$2:
	lea	ecx, DWORD PTR _strTemp$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$3:
	lea	ecx, DWORD PTR _playerName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$4:
	lea	ecx, DWORD PTR _strDesc$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$5:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$6:
	lea	ecx, DWORD PTR $T220025[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$7:
	lea	ecx, DWORD PTR $T220026[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$8:
	lea	ecx, DWORD PTR $T220027[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$9:
	lea	ecx, DWORD PTR $T220028[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z$10:
	lea	ecx, DWORD PTR $T220029[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-412]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogFlavors@CvFlavorManager@@AAEXW4FlavorTypes@@@Z ENDP	; CvFlavorManager::LogFlavors
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
;	COMDAT ?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T220185 = -8						; size = 4
$T220157 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ PROC ; FFastList<CvFlavorRecipient *,297,0>::begin, COMDAT
; _this$ = ecx

; 199  : 	iterator begin(){ return iterator( m_uiFirst, this ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220157[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T220185[ebp], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T220185[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR $T220157[ebp]
	or	eax, 1
	mov	DWORD PTR $T220157[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ENDP ; FFastList<CvFlavorRecipient *,297,0>::begin
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T220189 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ PROC ; FFastList<CvFlavorRecipient *,297,0>::end, COMDAT
; _this$ = ecx

; 200  : 	iterator end(){ return iterator( ANCHOR_NODE_INDEX, this ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220189[ebp], 0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx+4], 268435455		; 0fffffffH
	mov	eax, DWORD PTR $T220189[ebp]
	or	eax, 1
	mov	DWORD PTR $T220189[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@XZ ENDP ; FFastList<CvFlavorRecipient *,297,0>::end
_TEXT	ENDS
PUBLIC	??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::iterator::~iterator
PUBLIC	?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::erase
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z$1
__ehfuncinfo$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T220232 = -48						; size = 4
$T220231 = -44						; size = 4
$T220226 = -40						; size = 4
$T220223 = -36						; size = 8
$T220220 = -28						; size = 8
$T220219 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_it$ = 12						; size = 8
?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z PROC ; FFastList<CvFlavorRecipient *,297,0>::erase, COMDAT
; _this$ = ecx

; 226  : 	iterator erase( iterator it ){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220226[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 		return iterator( BASE_TYPE::erase( it ).get_index(), this );

	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T220219[ebp], eax
	mov	ecx, DWORD PTR _it$[ebp+4]
	mov	DWORD PTR $T220219[ebp+4], ecx
	mov	edx, DWORD PTR $T220219[ebp]
	mov	DWORD PTR $T220223[ebp], edx
	mov	eax, DWORD PTR $T220219[ebp+4]
	mov	DWORD PTR $T220223[ebp+4], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T220223[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T220223[ebp]
	push	edx
	lea	eax, DWORD PTR $T220220[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::erase
	mov	DWORD PTR $T220231[ebp], eax
	mov	ecx, DWORD PTR $T220231[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220232[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T220232[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR $T220226[ebp]
	or	ecx, 1
	mov	DWORD PTR $T220226[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 228  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
__unwindfunclet$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z$1:
	lea	ecx, DWORD PTR $T220219[ebp]
	jmp	??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::iterator::~iterator
__ehhandler$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE?AViterator@1@V21@@Z ENDP ; FFastList<CvFlavorRecipient *,297,0>::erase
PUBLIC	??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::~FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
; Function compile flags: /Odtp
;	COMDAT ??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T220322 = -8						; size = 4
_i$220328 = -4						; size = 4
??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ PROC ; FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >::~FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >, COMDAT
; _this$ = ecx

; 700  : 	~FCustomList_Tail_Member(){ m_kAllocator.clear(); };

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 268435455		; 0fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T220322[ebp], ecx
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN12@FCustomLis
	mov	DWORD PTR _i$220328[ebp], 0
	jmp	SHORT $LN10@FCustomLis
$LN9@FCustomLis:
	mov	eax, DWORD PTR _i$220328[ebp]
	add	eax, 1
	mov	DWORD PTR _i$220328[ebp], eax
$LN10@FCustomLis:
	mov	ecx, DWORD PTR $T220322[ebp]
	mov	edx, DWORD PTR _i$220328[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN12@FCustomLis
	jmp	SHORT $LN9@FCustomLis
$LN12@FCustomLis:
	mov	eax, DWORD PTR $T220322[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::~FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@IAE@XZ ENDP ; FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >::~FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ PROC ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator, COMDAT
; _this$ = ecx

; 136  : 		~iterator(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1iterator@?$FFastList@PAVCvFlavorRecipient@@$0BCJ@$0A@@@QAE@XZ ENDP ; FFastList<CvFlavorRecipient *,297,0>::iterator::~iterator
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T220419 = -24						; size = 4
$T220415 = -20						; size = 4
$T220406 = -16						; size = 4
$T220400 = -12						; size = 4
_temp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_notused$ = 12						; size = 4
??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++, COMDAT
; _this$ = ecx

; 304  : 		const base_iterator operator++(int notused){

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220400[ebp], 0

; 305  : #endif
; 306  : 			base_iterator temp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	DWORD PTR _temp$[ebp+4], edx

; 307  : 			++(*this);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 268435455		; 0fffffffH
	jne	SHORT $LN7@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T220406[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR $T220406[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220415[ebp], edx
	mov	ecx, DWORD PTR $T220415[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220419[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T220419[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN8@operator:

; 308  : 			return temp;

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T220400[ebp]
	or	edx, 1
	mov	DWORD PTR $T220400[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 309  : 		};

	mov	esp, ebp
	pop	ebp
	ret	8
??E?$base_iterator@Vbase_iterator_tail@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?BV01@H@Z ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator<FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::base_iterator_tail>::operator++
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z$0
__ehfuncinfo$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z
_TEXT	SEGMENT
_this$ = -80						; size = 4
$T220463 = -32						; size = 4
$T220456 = -28						; size = 4
$T220444 = -24						; size = 4
$T220439 = -20						; size = 4
_uiNext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_it$ = 12						; size = 8
?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::erase, COMDAT
; _this$ = ecx

; 564  : 	iterator erase( iterator  it ){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220439[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 565  : 		const unsigned int uiNext = get_allocator()[it.get_index()].LIST_GetNext();

	mov	eax, DWORD PTR _it$[ebp+4]
	mov	DWORD PTR $T220444[ebp], eax
	mov	ecx, DWORD PTR $T220444[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T220456[ebp], ecx
	mov	eax, DWORD PTR $T220456[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _uiNext$[ebp], ecx

; 566  : 		UnLink( it.get_index(), uiNext );

	mov	edx, DWORD PTR _it$[ebp+4]
	mov	DWORD PTR $T220463[ebp], edx
	mov	eax, DWORD PTR _uiNext$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220463[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::UnLink

; 567  : 		return iterator( uiNext, this );

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _uiNext$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR $T220439[ebp]
	or	eax, 1
	mov	DWORD PTR $T220439[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 568  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::iterator::~iterator
__ehhandler$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE?AViterator@1@V21@@Z ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::erase
PUBLIC	??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ ; BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::~BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ$1
__ehfuncinfo$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastallocator.h
xdata$x	ENDS
;	COMDAT ??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T220658 = -28						; size = 4
$T220638 = -24						; size = 4
$T220637 = -20						; size = 4
_i$220649 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ PROC ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::~FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>, COMDAT
; _this$ = ecx

; 76   : 	~FFastAllocator(){ assert( m_uiSize == 0); };

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T220658[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T220658[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220638[ebp], edx
	mov	eax, DWORD PTR $T220658[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220637[ebp], ecx
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN7@FFastAlloc
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@FFastAlloc
	mov	DWORD PTR _i$220649[ebp], 0
	jmp	SHORT $LN12@FFastAlloc
$LN11@FFastAlloc:
	mov	ecx, DWORD PTR _i$220649[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$220649[ebp], ecx
$LN12@FFastAlloc:
	mov	edx, DWORD PTR _i$220649[ebp]
	cmp	edx, DWORD PTR $T220638[ebp]
	jae	SHORT $LN7@FFastAlloc
	jmp	SHORT $LN11@FFastAlloc
$LN7@FFastAlloc:
	mov	eax, DWORD PTR $T220637[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ$1:
	mov	ecx, DWORD PTR $T220658[ebp]
	jmp	??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ ; BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::~BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>
__ehhandler$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@XZ ENDP ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::~FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
;	COMDAT ??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::iterator::~iterator, COMDAT
; _this$ = ecx

; 381  : 		~iterator(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1iterator@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAE@XZ ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::iterator::~iterator
_TEXT	ENDS
PUBLIC	??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
; Function compile flags: /Odtp
;	COMDAT ??0?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
??0?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAE@XZ PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >, COMDAT
; _this$ = ecx

; 416  : 		: TAIL(), m_uiFirst( ANCHOR_NODE_INDEX ), m_uiLast( ANCHOR_NODE_INDEX ), m_uiSize(0) {};

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 268435455		; 0fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 268435455		; 0fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 268435455		; 0fffffffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAE@XZ ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >
_TEXT	ENDS
PUBLIC	?InsertAfter@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::InsertAfter
; Function compile flags: /Odtp
;	COMDAT ?push_back_existing@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_uiOldLast$ = -4					; size = 4
_uiNewIndex$ = 8					; size = 4
?push_back_existing@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAEXI@Z PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::push_back_existing, COMDAT
; _this$ = ecx

; 494  : 	void push_back_existing( unsigned int uiNewIndex ){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 495  : 		unsigned int uiOldLast = m_uiLast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _uiOldLast$[ebp], ecx

; 496  : 		m_uiLast = uiNewIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiNewIndex$[ebp]
	mov	DWORD PTR [edx+28], eax

; 497  : 		m_uiSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 498  : 		if( m_uiFirst == ANCHOR_NODE_INDEX ) m_uiFirst = m_uiLast;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 268435455		; 0fffffffH
	jne	SHORT $LN1@push_back_
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+24], ecx
$LN1@push_back_:

; 499  : 		InsertAfter(m_uiLast, uiOldLast);

	mov	edx, DWORD PTR _uiOldLast$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertAfter@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::InsertAfter

; 500  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back_existing@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@QAEXI@Z ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::push_back_existing
_TEXT	ENDS
PUBLIC	?FreeIfDeleted@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE_NI@Z ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FreeIfDeleted
; Function compile flags: /Odtp
;	COMDAT ?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T220836 = -28						; size = 4
$T220821 = -24						; size = 4
$T220786 = -20						; size = 4
$T220771 = -16						; size = 4
_uiNext$218348 = -12					; size = 4
_uiPrev$218349 = -8					; size = 4
_kEnd$218347 = -4					; size = 4
_uiStart$ = 8						; size = 4
_uiEnd$ = 12						; size = 4
?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::UnLink, COMDAT
; _this$ = ecx

; 656  : 	void UnLink( unsigned int uiStart, unsigned int uiEnd ){

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 657  : 		if( uiStart == ANCHOR_NODE_INDEX ){ return; }

	cmp	DWORD PTR _uiStart$[ebp], 268435455	; 0fffffffH
	jne	SHORT $LN8@UnLink
	jmp	$LN9@UnLink
$LN8@UnLink:

; 658  : 		assert( get_allocator().is_element_valid(uiStart) );
; 659  : 
; 660  : 		if( uiStart == m_uiFirst){ m_uiFirst = uiEnd; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiStart$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jne	SHORT $LN15@UnLink
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiEnd$[ebp]
	mov	DWORD PTR [edx+24], eax

; 661  : 		uiStart = get_allocator()[uiStart].LIST_GetPrev();

$LN15@UnLink:
	mov	ecx, DWORD PTR _uiStart$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T220771[ebp], ecx
	mov	eax, DWORD PTR $T220771[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _uiStart$[ebp], ecx

; 662  : 		if( uiEnd == ANCHOR_NODE_INDEX ){

	cmp	DWORD PTR _uiEnd$[ebp], 268435455	; 0fffffffH
	jne	SHORT $LN23@UnLink

; 663  : 			uiEnd = m_uiLast;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _uiEnd$[ebp], eax

; 664  : 			m_uiLast = uiStart;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiStart$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 665  : 		}else{

	jmp	SHORT $LN4@UnLink

; 666  : 			assert( get_allocator().is_element_valid(uiEnd) );
; 667  : 			uiEnd = get_allocator()[uiEnd].LIST_GetPrev();

$LN23@UnLink:
	mov	eax, DWORD PTR _uiEnd$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220786[ebp], eax
	mov	edx, DWORD PTR $T220786[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _uiEnd$[ebp], eax
$LN4@UnLink:

; 668  : 		}
; 669  : 
; 670  : 		while( uiStart != uiEnd ){

	mov	ecx, DWORD PTR _uiStart$[ebp]
	cmp	ecx, DWORD PTR _uiEnd$[ebp]
	je	$LN9@UnLink

; 671  : 			T& kEnd = get_allocator()[uiEnd];

	mov	edx, DWORD PTR _uiEnd$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _kEnd$218347[ebp], edx

; 672  : 			unsigned int uiNext = kEnd.LIST_GetNext();

	mov	ecx, DWORD PTR _kEnd$218347[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _uiNext$218348[ebp], edx

; 673  : 			unsigned int uiPrev = kEnd.LIST_GetPrev();

	mov	eax, DWORD PTR _kEnd$218347[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2147483647				; 7fffffffH
	mov	DWORD PTR _uiPrev$218349[ebp], ecx

; 674  : 			if( uiNext != ANCHOR_NODE_INDEX ) get_allocator()[uiNext].LIST_SetPrev( uiPrev );

	cmp	DWORD PTR _uiNext$218348[ebp], 268435455 ; 0fffffffH
	je	SHORT $LN2@UnLink
	mov	edx, DWORD PTR _uiNext$218348[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220821[ebp], edx
	mov	ecx, DWORD PTR _uiPrev$218349[ebp]
	and	ecx, 2147483647				; 7fffffffH
	mov	edx, DWORD PTR $T220821[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -2147483648			; 80000000H
	or	eax, ecx
	mov	ecx, DWORD PTR $T220821[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@UnLink:

; 675  : 			if( uiPrev != ANCHOR_NODE_INDEX ) get_allocator()[uiPrev].LIST_SetNext( uiNext );

	cmp	DWORD PTR _uiPrev$218349[ebp], 268435455 ; 0fffffffH
	je	SHORT $LN1@UnLink
	mov	edx, DWORD PTR _uiPrev$218349[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220836[ebp], edx
	mov	ecx, DWORD PTR $T220836[ebp]
	mov	edx, DWORD PTR _uiNext$218348[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@UnLink:

; 676  : 			kEnd.LIST_SetDeleted(true);

	mov	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	and	eax, 1
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _kEnd$218347[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2147483647				; 7fffffffH
	or	edx, eax
	mov	eax, DWORD PTR _kEnd$218347[ebp]
	mov	DWORD PTR [eax+4], edx

; 677  : 			get_allocator().FreeIfDeleted(uiEnd);

	mov	ecx, DWORD PTR _uiEnd$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeIfDeleted@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE_NI@Z ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FreeIfDeleted

; 678  : 
; 679  : 			m_uiSize--;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 680  : 
; 681  : 			uiEnd = uiPrev;

	mov	edx, DWORD PTR _uiPrev$218349[ebp]
	mov	DWORD PTR _uiEnd$[ebp], edx

; 682  : 		}

	jmp	$LN4@UnLink
$LN9@UnLink:

; 683  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?UnLink@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::UnLink
_TEXT	ENDS
PUBLIC	?push_back@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::push_back
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastallocator.h
;	COMDAT ?Alloc@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z
_TEXT	SEGMENT
tv141 = -36						; size = 4
_this$ = -32						; size = 4
$T220905 = -28						; size = 4
$T220898 = -24						; size = 4
$T220874 = -16						; size = 4
_pTemp$218360 = -12					; size = 4
_uiIndex$218358 = -8					; size = 4
_uiPos$ = -4						; size = 4
_x$ = 8							; size = 4
?Alloc@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z PROC ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::Alloc, COMDAT
; _this$ = ecx

; 90   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 		unsigned int uiPos;
; 92   : 
; 93   : 		//If there are no pre-allocated spots, get a new one
; 94   : 		if( m_uiFirstEmpty == ms_uiAnchorNodeIndex )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 268435455		; 0fffffffH
	jne	SHORT $LN2@Alloc

; 95   : 		{
; 96   : 			uiPos = m_vec.size();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _uiPos$[ebp], edx

; 97   : 			unsigned int uiIndex = m_vec.push_back( x );

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::push_back
	mov	DWORD PTR _uiIndex$218358[ebp], eax

; 98   : 			m_vec[uiIndex].ALLOC_SetDeleted(false);

	mov	ecx, DWORD PTR _uiIndex$218358[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR $T220898[ebp], ecx
	xor	eax, eax
	neg	eax
	sbb	eax, eax
	add	eax, 1
	and	eax, 1
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR $T220898[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2147483647				; 7fffffffH
	or	edx, eax
	mov	eax, DWORD PTR $T220898[ebp]
	mov	DWORD PTR [eax+4], edx

; 99   : 		}
; 100  : 
; 101  : 		//Otherwise reuse an old spot after deleting it's previous contents
; 102  : 		else{

	jmp	SHORT $LN1@Alloc
$LN2@Alloc:

; 103  : 			uiPos = m_uiFirstEmpty;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _uiPos$[ebp], edx

; 104  : 			T* pTemp = &m_vec[uiPos];

	mov	eax, DWORD PTR _uiPos$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _pTemp$218360[ebp], eax

; 105  : 			m_uiFirstEmpty = pTemp->ALLOC_GetNext();

	mov	edx, DWORD PTR _pTemp$218360[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T220905[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T220905[ebp]
	mov	DWORD PTR [ecx], edx

; 106  : 			pTemp->~T();
; 107  : 			new( (void*)pTemp )T( x );

	mov	eax, DWORD PTR _pTemp$218360[ebp]
	mov	DWORD PTR $T220874[ebp], eax
	cmp	DWORD PTR $T220874[ebp], 0
	je	SHORT $LN5@Alloc
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR $T220874[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T220874[ebp]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN6@Alloc
$LN5@Alloc:
	mov	DWORD PTR tv141[ebp], 0
$LN6@Alloc:

; 108  : 			pTemp->ALLOC_SetDeleted(false);

	xor	eax, eax
	neg	eax
	sbb	eax, eax
	add	eax, 1
	and	eax, 1
	shl	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _pTemp$218360[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 2147483647				; 7fffffffH
	or	edx, eax
	mov	eax, DWORD PTR _pTemp$218360[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@Alloc:

; 109  : 		}
; 110  : 		m_uiSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 111  : 		return uiPos;

	mov	eax, DWORD PTR _uiPos$[ebp]

; 112  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ENDP ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::Alloc
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ PROC ; BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::~BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ ENDP ; BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::~BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastlist.h
_TEXT	ENDS
;	COMDAT ?InsertAfter@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T220972 = -16						; size = 4
_b$218394 = -12						; size = 4
_uiBNext$218395 = -8					; size = 4
_a$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
?InsertAfter@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z PROC ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::InsertAfter, COMDAT
; _this$ = ecx

; 633  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 634  : 		assert( get_allocator().is_element_valid(i) );
; 635  : 
; 636  : 		T* a = &get_allocator()[i];

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _a$[ebp], eax

; 637  : 		if( j == ANCHOR_NODE_INDEX ){

	cmp	DWORD PTR _j$[ebp], 268435455		; 0fffffffH
	jne	SHORT $LN18@InsertAfte

; 638  : 			a->LIST_SetNext(ANCHOR_NODE_INDEX);

	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx], 268435455		; 0fffffffH

; 639  : 			a->LIST_SetPrev(ANCHOR_NODE_INDEX);

	mov	eax, 268435455				; 0fffffffH
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, -2147483648			; 80000000H
	or	edx, eax
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+4], edx

; 640  : 		}else{

	jmp	SHORT $LN4@InsertAfte

; 641  : 			T* b = &get_allocator()[j];

$LN18@InsertAfte:
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _b$218394[ebp], ecx

; 642  : 
; 643  : 			//Set the links for the new node
; 644  : 			unsigned int uiBNext = b->LIST_GetNext();

	mov	eax, DWORD PTR _b$218394[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _uiBNext$218395[ebp], ecx

; 645  : 			a->LIST_SetPrev(j);

	mov	edx, DWORD PTR _j$[ebp]
	and	edx, 2147483647				; 7fffffffH
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -2147483648			; 80000000H
	or	ecx, edx
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 646  : 			a->LIST_SetNext(uiBNext);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _uiBNext$218395[ebp]
	mov	DWORD PTR [eax], ecx

; 647  : 
; 648  : 			//Fix the links for the next and previous nodes
; 649  : 			if( uiBNext != ANCHOR_NODE_INDEX )

	cmp	DWORD PTR _uiBNext$218395[ebp], 268435455 ; 0fffffffH
	je	SHORT $LN1@InsertAfte

; 650  : 				get_allocator()[uiBNext].LIST_SetPrev(i);

	mov	edx, DWORD PTR _uiBNext$218395[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220972[ebp], edx
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 2147483647				; 7fffffffH
	mov	edx, DWORD PTR $T220972[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, -2147483648			; 80000000H
	or	eax, ecx
	mov	ecx, DWORD PTR $T220972[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@InsertAfte:

; 651  : 			b->LIST_SetNext(i);

	mov	edx, DWORD PTR _b$218394[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@InsertAfte:

; 652  : 		}
; 653  : 	};

	mov	esp, ebp
	pop	ebp
	ret	8
?InsertAfter@?$FCustomList_Core@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@V?$FCustomList_Tail_Member@V?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@@@@@IAEXII@Z ENDP ; FCustomList_Core<MultiListNodePolicy<CvFlavorRecipient *>,FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>,FCustomList_Tail_Member<FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator> > >::InsertAfter
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastallocator.h
_TEXT	ENDS
;	COMDAT ?FreeIfDeleted@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T220999 = -16						; size = 4
$T220992 = -12						; size = 4
_pRoot$218405 = -8					; size = 4
_element$ = -4						; size = 4
_uiIndex$ = 8						; size = 4
?FreeIfDeleted@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE_NI@Z PROC ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FreeIfDeleted, COMDAT
; _this$ = ecx

; 238  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 239  : 		T& element = m_vec[uiIndex];

	mov	eax, DWORD PTR _uiIndex$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _element$[ebp], eax

; 240  : 		if( !element.ALLOC_GetDeleted() ){

	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 31					; 0000001fH
	and	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@FreeIfDele

; 241  : 			return false;

	xor	al, al
	jmp	SHORT $LN4@FreeIfDele
$LN3@FreeIfDele:

; 242  : 		}
; 243  : 
; 244  : 		if( uiIndex < m_uiFirstEmpty){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiIndex$[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN14@FreeIfDele

; 245  : 			element.ALLOC_SetNext(m_uiFirstEmpty);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220992[ebp], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR $T220992[ebp]
	mov	DWORD PTR [eax], ecx

; 246  : 
; 247  : 			m_uiFirstEmpty = uiIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiIndex$[ebp]
	mov	DWORD PTR [edx], eax

; 248  : 		}else{

	jmp	SHORT $LN1@FreeIfDele

; 249  : 			T* pRoot = &m_vec[m_uiFirstEmpty];

$LN14@FreeIfDele:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _pRoot$218405[ebp], edx

; 250  : 			element.ALLOC_SetNext( pRoot->ALLOC_GetNext() );

	mov	ecx, DWORD PTR _pRoot$218405[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220999[ebp], edx
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR $T220999[ebp]
	mov	DWORD PTR [eax], ecx

; 251  : 			pRoot->ALLOC_SetNext(uiIndex);

	mov	edx, DWORD PTR _pRoot$218405[ebp]
	mov	eax, DWORD PTR _uiIndex$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@FreeIfDele:

; 252  : 		}
; 253  : 		m_uiSize--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 254  : 
; 255  : 		return true;

	mov	al, 1
$LN4@FreeIfDele:

; 256  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?FreeIfDeleted@?$FFastAllocator@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE_NI@Z ENDP ; FFastAllocator<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FreeIfDeleted
_TEXT	ENDS
PUBLIC	?GrowSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::GrowSize
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z
_TEXT	SEGMENT
tv140 = -56						; size = 4
tv131 = -52						; size = 4
_this$ = -48						; size = 4
$T221008 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z PROC ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::push_back, COMDAT
; _this$ = ecx

; 376  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN39@push_back

; 378  : 			GrowSize(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::GrowSize

; 379  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR $T221008[ebp], eax
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR $T221008[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T221008[ebp]
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv131[ebp], 0
$LN5@push_back:

; 380  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv140[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv140[ebp]

; 381  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAEIABU?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@@Z ENDP ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::push_back
_TEXT	ENDS
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?SetSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z
_TEXT	SEGMENT
tv155 = -52						; size = 4
tv185 = -48						; size = 4
_this$ = -44						; size = 4
$T221111 = -40						; size = 4
_i$221104 = -36						; size = 4
$T221083 = -32						; size = 4
_pRet$221079 = -28					; size = 4
$T221072 = -24						; size = 4
$T221069 = -20						; size = 4
$T221060 = -16						; size = 4
_i$218428 = -12						; size = 4
_nOld$ = -8						; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?SetSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z PROC ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::SetSize, COMDAT
; _this$ = ecx

; 468  : 	void SetSize(unsigned int uiFit){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 469  : 
; 470  : 		unsigned int nOld = m_uiCurrSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOld$[ebp], ecx

; 471  : 
; 472  : 		m_uiCurrSize = MIN( m_uiCurrSize, uiFit );

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T221072[ebp], edx
	mov	eax, DWORD PTR $T221072[ebp]
	mov	ecx, DWORD PTR _uiFit$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN16@SetSize
	lea	edx, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN17@SetSize
$LN16@SetSize:
	mov	eax, DWORD PTR $T221072[ebp]
	mov	DWORD PTR tv185[ebp], eax
$LN17@SetSize:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T221069[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T221069[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], ecx

; 473  : 
; 474  : 		T* pTemp = NULL;

	mov	DWORD PTR _pTemp$[ebp], 0

; 475  : 		if( uiFit > 0 ){

	cmp	DWORD PTR _uiFit$[ebp], 0
	jbe	$LN9@SetSize

; 476  : 			pTemp = Alloc(uiFit);

	mov	edx, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR $T221083[ebp], edx
	cmp	DWORD PTR $T221083[ebp], 0
	jbe	SHORT $LN18@SetSize
	push	85					; 00000055H
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T221083[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221079[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221083[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _pRet$221079[ebp]
	mov	DWORD PTR _pTemp$[ebp], eax
	jmp	SHORT $LN19@SetSize
$LN18@SetSize:
	mov	DWORD PTR _pTemp$[ebp], 0
$LN19@SetSize:

; 477  : 			if (pTemp)

	cmp	DWORD PTR _pTemp$[ebp], 0
	je	$LN8@SetSize

; 478  : 			{
; 479  : 				if( bPODType ){

	xor	ecx, ecx
	je	SHORT $LN7@SetSize

; 480  : 					memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pTemp$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 481  : 				}else{

	jmp	SHORT $LN6@SetSize
$LN7@SetSize:

; 482  : 					for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$218428[ebp], 0
	jmp	SHORT $LN5@SetSize
$LN4@SetSize:
	mov	ecx, DWORD PTR _i$218428[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$218428[ebp], ecx
$LN5@SetSize:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$218428[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN6@SetSize

; 483  : 						new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	ecx, DWORD PTR _i$218428[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T221060[ebp], ecx
	je	SHORT $LN12@SetSize
	mov	edx, DWORD PTR _i$218428[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR $T221060[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T221060[ebp]
	mov	DWORD PTR tv155[ebp], edx
	jmp	SHORT $LN13@SetSize
$LN12@SetSize:
	mov	DWORD PTR tv155[ebp], 0
$LN13@SetSize:
	jmp	SHORT $LN4@SetSize
$LN6@SetSize:

; 484  : 				}
; 485  : 				m_uiCurrMaxSize = uiFit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 486  : 			}
; 487  : 			else

	jmp	SHORT $LN2@SetSize
$LN8@SetSize:

; 488  : 			{
; 489  : 				FAssertMsg2(0, "Failed to set array size from %u to %u", nOld, uiFit);
; 490  : 				m_uiCurrSize = nOld;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nOld$[ebp]
	mov	DWORD PTR [edx+4], eax

; 491  : 				return;

	jmp	SHORT $LN10@SetSize
$LN2@SetSize:

; 492  : 			}
; 493  : 		}
; 494  : 		else

	jmp	SHORT $LN1@SetSize
$LN9@SetSize:

; 495  : 		{
; 496  : 			m_uiCurrMaxSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN1@SetSize:

; 497  : 		}
; 498  : 		Free(m_pData, nOld);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T221111[ebp], eax
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN25@SetSize
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN25@SetSize
	mov	DWORD PTR _i$221104[ebp], 0
	jmp	SHORT $LN30@SetSize
$LN29@SetSize:
	mov	eax, DWORD PTR _i$221104[ebp]
	add	eax, 1
	mov	DWORD PTR _i$221104[ebp], eax
$LN30@SetSize:
	mov	ecx, DWORD PTR _i$221104[ebp]
	cmp	ecx, DWORD PTR _nOld$[ebp]
	jae	SHORT $LN25@SetSize
	jmp	SHORT $LN29@SetSize
$LN25@SetSize:
	mov	edx, DWORD PTR $T221111[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4

; 499  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@SetSize:

; 500  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ENDP ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::SetSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z
_TEXT	SEGMENT
tv185 = -48						; size = 4
_this$ = -44						; size = 4
$T221157 = -40						; size = 4
$T221156 = -36						; size = 4
_i$221149 = -32						; size = 4
$T221128 = -28						; size = 4
_pRet$221124 = -24					; size = 4
$T221115 = -20						; size = 4
_i$218476 = -16						; size = 4
_uiNewSize$218467 = -12					; size = 4
_nOld$ = -8						; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z PROC ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::GrowSize, COMDAT
; _this$ = ecx

; 422  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 423  : 		unsigned int nOld = m_uiCurrMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nOld$[ebp], ecx

; 424  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN10@GrowSize
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN10@GrowSize:

; 425  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiFit$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN9@GrowSize

; 426  : 
; 427  : 			//Try to double size...
; 428  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	DWORD PTR _uiNewSize$218467[ebp], ecx

; 429  : 
; 430  : 			//...on overflow bail and set to exact size
; 431  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiNewSize$218467[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN8@GrowSize

; 432  : 				m_uiCurrMaxSize = uiFit;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 433  : 				break;

	jmp	SHORT $LN9@GrowSize
$LN8@GrowSize:

; 434  : 			}
; 435  : 
; 436  : 			//...otherwise use the doubled size
; 437  : 			m_uiCurrMaxSize = uiNewSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$218467[ebp]
	mov	DWORD PTR [eax+8], ecx

; 438  : 		}

	jmp	SHORT $LN10@GrowSize
$LN9@GrowSize:

; 439  : 
; 440  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T221128[ebp], eax
	cmp	DWORD PTR $T221128[ebp], 0
	jbe	SHORT $LN16@GrowSize
	push	85					; 00000055H
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	ecx, DWORD PTR $T221128[ebp]
	imul	ecx, 12					; 0000000cH
	push	ecx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221124[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T221128[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _pRet$221124[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	DWORD PTR _pTemp$[ebp], 0
$LN17@GrowSize:

; 441  : 		if (pTemp)

	cmp	DWORD PTR _pTemp$[ebp], 0
	je	$LN7@GrowSize

; 442  : 		{
; 443  : 			if( bPODType ){

	xor	edx, edx
	je	SHORT $LN6@GrowSize

; 444  : 				memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 445  : 			}else{

	jmp	SHORT $LN5@GrowSize
$LN6@GrowSize:

; 446  : 				for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$218476[ebp], 0
	jmp	SHORT $LN4@GrowSize
$LN3@GrowSize:
	mov	edx, DWORD PTR _i$218476[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218476[ebp], edx
$LN4@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$218476[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@GrowSize

; 447  : 					new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$218476[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T221115[ebp], edx
	je	SHORT $LN14@GrowSize
	mov	eax, DWORD PTR _i$218476[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR $T221115[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T221115[ebp]
	mov	DWORD PTR tv185[ebp], eax
	jmp	SHORT $LN15@GrowSize
$LN14@GrowSize:
	mov	DWORD PTR tv185[ebp], 0
$LN15@GrowSize:
	jmp	SHORT $LN3@GrowSize
$LN5@GrowSize:

; 448  : 			}
; 449  : 			Free(m_pData, m_uiCurrSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T221157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T221156[ebp], ecx
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN23@GrowSize
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@GrowSize
	mov	DWORD PTR _i$221149[ebp], 0
	jmp	SHORT $LN28@GrowSize
$LN27@GrowSize:
	mov	ecx, DWORD PTR _i$221149[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$221149[ebp], ecx
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$221149[ebp]
	cmp	edx, DWORD PTR $T221157[ebp]
	jae	SHORT $LN23@GrowSize
	jmp	SHORT $LN27@GrowSize
$LN23@GrowSize:
	mov	eax, DWORD PTR $T221156[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4

; 450  : 			m_pData = pTemp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [ecx], edx

; 451  : 		}
; 452  : 		else

	jmp	SHORT $LN12@GrowSize
$LN7@GrowSize:

; 453  : 		{
; 454  : 			FAssertMsg2(0, "Failed to grow array size from %u to %u", nOld, m_uiCurrMaxSize);
; 455  : 			m_uiCurrMaxSize = nOld;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nOld$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN12@GrowSize:

; 456  : 		}
; 457  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@IAEXI@Z ENDP ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::GrowSize
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z$0
__ehfuncinfo$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T221174 = -20						; size = 4
_pRet$221170 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_uiStartingMaxSize$ = 8					; size = 4
??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z PROC ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>, COMDAT
; _this$ = ecx

; 309  : 	FFastVector(unsigned int uiStartingMaxSize = 0)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 310  : 	{
; 311  : #ifdef BREAK_ON_REPEATED_RESIZE
; 312  : 		m_nResizeTimes = 0;
; 313  : #endif
; 314  : 		m_pData = Alloc(uiStartingMaxSize);

	cmp	DWORD PTR _uiStartingMaxSize$[ebp], 0
	jbe	SHORT $LN6@FFastVecto
	push	85					; 00000055H
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR _uiStartingMaxSize$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221170[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiStartingMaxSize$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _pRet$221170[ebp]
	mov	DWORD PTR $T221174[ebp], eax
	jmp	SHORT $LN7@FFastVecto
$LN6@FFastVecto:
	mov	DWORD PTR $T221174[ebp], 0
$LN7@FFastVecto:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221174[ebp]
	mov	DWORD PTR [ecx], edx

; 315  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@QAE@XZ ; BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::~BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>
__ehhandler$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FFastVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@$0BCJ@$0A@UFDefaultFastVectorAllocator@?$BaseVector@U?$MultiListNodePolicy@PAVCvFlavorRecipient@@@@$0A@@@@@QAE@I@Z ENDP ; FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>::FFastVector<MultiListNodePolicy<CvFlavorRecipient *>,0,297,0,BaseVector<MultiListNodePolicy<CvFlavorRecipient *>,0>::FDefaultFastVectorAllocator>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
_v$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z PROC ; operator>><int>, COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 516  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 517  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 518  : 	ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 519  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator@2

; 520  : 	{
; 521  : 		loadFrom >> values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 522  : 	}

	jmp	SHORT $LN2@operator@2
$LN1@operator@2:

; 523  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ENDP ; operator>><int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_values$ = -8						; size = 4
_count$ = -4						; size = 4
_saveTo$ = 8						; size = 4
_v$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z PROC ; operator<<<int>, COMDAT

; 502  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 503  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 504  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _count$[ebp], ecx

; 505  : 	const ValueType * values = v.getArray();

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _values$[ebp], eax

; 506  : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@operator@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@operator@3

; 507  : 	{
; 508  : 		saveTo << values[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 509  : 	}

	jmp	SHORT $LN2@operator@3
$LN1@operator@3:

; 510  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 511  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ENDP ; operator<<<int>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T221233 = -2092					; size = 4
$T221232 = -2088					; size = 4
$T221231 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T221231[ebp], eax
	mov	ecx, DWORD PTR $T221231[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T221232[ebp], eax
	mov	eax, DWORD PTR $T221232[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T221233[ebp], eax
	mov	ecx, DWORD PTR $T221233[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
END
