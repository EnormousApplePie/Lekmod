; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvUnitCycler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CLinkList@H@@6B@				; CLinkList<int>::`vftable'
PUBLIC	??0CvUnitCycler@@QAE@PAVCvPlayer@@@Z		; CvUnitCycler::CvUnitCycler
EXTRN	??_E?$CLinkList@H@@UAEPAXI@Z:PROC		; CLinkList<int>::`vector deleting destructor'
;	COMDAT ??_7?$CLinkList@H@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\linkedlist.h
CONST	SEGMENT
??_7?$CLinkList@H@@6B@ DD FLAT:??_E?$CLinkList@H@@UAEPAXI@Z ; CLinkList<int>::`vftable'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcycler.cpp
CONST	ENDS
;	COMDAT ??0CvUnitCycler@@QAE@PAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pkPlayer$ = 8						; size = 4
??0CvUnitCycler@@QAE@PAVCvPlayer@@@Z PROC		; CvUnitCycler::CvUnitCycler, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CLinkList@H@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 17   : 	m_pkPlayer = pkPlayer;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pkPlayer$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvUnitCycler@@QAE@PAVCvPlayer@@@Z ENDP		; CvUnitCycler::CvUnitCycler
_TEXT	ENDS
PUBLIC	?clear@?$CLinkList@H@@QAEXXZ			; CLinkList<int>::clear
PUBLIC	?Clear@CvUnitCycler@@QAEXXZ			; CvUnitCycler::Clear
; Function compile flags: /Odtp
;	COMDAT ?Clear@CvUnitCycler@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
?Clear@CvUnitCycler@@QAEXXZ PROC			; CvUnitCycler::Clear, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	m_kNodeList.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$CLinkList@H@@QAEXXZ		; CLinkList<int>::clear

; 24   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CvUnitCycler@@QAEXXZ ENDP			; CvUnitCycler::Clear
_TEXT	ENDS
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
PUBLIC	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
PUBLIC	?insertAtEnd@?$CLinkList@H@@QAEXABH@Z		; CLinkList<int>::insertAtEnd
PUBLIC	?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CvUnitCycler::DeleteNode
PUBLIC	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ	; CvUnitCycler::HeadNode
PUBLIC	?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z	; CvUnitCycler::Rebuild
EXTRN	?GetCycleOrder@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCycleOrder
EXTRN	?getNumUnits@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumUnits
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
EXTRN	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z:PROC	; CvUnit::workRate
EXTRN	?SetCycleOrder@CvUnit@@QAEXH@Z:PROC		; CvUnit::SetCycleOrder
EXTRN	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::nextUnit
EXTRN	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z:PROC	; CvPlayer::firstUnit
EXTRN	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z:PROC ; CvGlobals::UnwrapUnitPointer
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z$1
__ehfuncinfo$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcycler.cpp
xdata$x	ENDS
;	COMDAT ?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z
_TEXT	SEGMENT
tv81 = -216						; size = 4
_this$ = -212						; size = 4
$T217832 = -196						; size = 4
$T217774 = -136						; size = 4
$T217765 = -132						; size = 4
$T217748 = -128						; size = 4
$T217736 = -124						; size = 4
$T217732 = -120						; size = 4
$T217707 = -104						; size = 4
_inst$217698 = -100					; size = 4
$T217694 = -96						; size = 4
$T217684 = -92						; size = 4
$T217675 = -88						; size = 4
$T217666 = -84						; size = 4
$T217662 = -80						; size = 4
$T217658 = -76						; size = 4
$T217652 = -72						; size = 4
$T217651 = -68						; size = 4
_iScore$217187 = -64					; size = 4
_pBestUnit$217180 = -60					; size = 4
_iX$217181 = -56					; size = 4
_iBestUnitScore$217179 = -52				; size = 4
_iY$217182 = -48					; size = 4
_iNumUnits$217175 = -44					; size = 4
_pCurrentUnit$217174 = -40				; size = 8
_pSelectedUnit$217152 = -32				; size = 4
_pkFirstUnit$ = -28					; size = 4
_pUnitNode$ = -24					; size = 4
_pLoopUnit$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pkStartUnit$ = 8					; size = 4
?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z PROC		; CvUnitCycler::Rebuild, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	// Delete contents of old list
; 30   : 	Node* pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax
$LN20@Rebuild:

; 31   : 	while(pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	je	SHORT $LN19@Rebuild

; 32   : 	{
; 33   : 		DeleteNode(pUnitNode);

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CvUnitCycler::DeleteNode

; 34   : 		pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 35   : 	}

	jmp	SHORT $LN20@Rebuild
$LN19@Rebuild:

; 36   : 
; 37   : 	if (pkStartUnit == NULL)

	cmp	DWORD PTR _pkStartUnit$[ebp], 0
	jne	$LN18@Rebuild

; 38   : 	{
; 39   : 		// If no unit supplied, use the selected unit.
; 40   : 		auto_ptr<ICvUnit1> pSelectedUnit(DLLUI->GetHeadSelectedUnit());

	mov	ecx, DWORD PTR $T217658[ebp]
	mov	DWORD PTR tv81[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	DWORD PTR tv81[ebp], edx
	mov	eax, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	DWORD PTR $T217662[ebp], eax
	mov	ecx, DWORD PTR $T217662[ebp]
	mov	DWORD PTR _pSelectedUnit$217152[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 41   : 		pkStartUnit = GC.UnwrapUnitPointer(pSelectedUnit.get());

	mov	edx, DWORD PTR _pSelectedUnit$217152[ebp]
	mov	DWORD PTR $T217666[ebp], edx
	mov	eax, DWORD PTR $T217666[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	DWORD PTR _pkStartUnit$[ebp], eax

; 42   : 
; 43   : 		if (pkStartUnit && pkStartUnit->getOwner() != m_pkPlayer->GetID())

	cmp	DWORD PTR _pkStartUnit$[ebp], 0
	je	SHORT $LN17@Rebuild
	mov	ecx, DWORD PTR _pkStartUnit$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T217675[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T217684[ebp], edx
	mov	eax, DWORD PTR $T217675[ebp]
	cmp	eax, DWORD PTR $T217684[ebp]
	je	SHORT $LN17@Rebuild

; 44   : 		{
; 45   : 			// Not ours, fall back to just selecting a worker
; 46   : 			pkStartUnit = NULL;

	mov	DWORD PTR _pkStartUnit$[ebp], 0
$LN17@Rebuild:

; 47   : 		}
; 48   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pSelectedUnit$217152[ebp]
	mov	DWORD PTR $T217694[ebp], ecx
	cmp	DWORD PTR $T217694[ebp], 0
	je	SHORT $LN18@Rebuild
	mov	edx, DWORD PTR $T217694[ebp]
	mov	DWORD PTR _inst$217698[ebp], edx
	mov	eax, DWORD PTR _inst$217698[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$217698[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN18@Rebuild:

; 49   : 
; 50   : 	CvUnit* pLoopUnit;
; 51   : 	int iLoop;
; 52   : 	CvUnit* pkFirstUnit = m_pkPlayer->firstUnit(&iLoop);

	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::firstUnit
	mov	DWORD PTR _pkFirstUnit$[ebp], eax

; 53   : 	for(pLoopUnit = pkFirstUnit; pLoopUnit != NULL; pLoopUnit = m_pkPlayer->nextUnit(&iLoop))

	mov	eax, DWORD PTR _pkFirstUnit$[ebp]
	mov	DWORD PTR _pLoopUnit$[ebp], eax
	jmp	SHORT $LN16@Rebuild
$LN15@Rebuild:
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::nextUnit
	mov	DWORD PTR _pLoopUnit$[ebp], eax
$LN16@Rebuild:
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN14@Rebuild

; 54   : 	{
; 55   : 		// Reset cycle order (will be used later in this function)
; 56   : 		pLoopUnit->SetCycleOrder(0);

	push	0
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?SetCycleOrder@CvUnit@@QAEXH@Z		; CvUnit::SetCycleOrder

; 57   : 
; 58   : 		if (!pkStartUnit)

	cmp	DWORD PTR _pkStartUnit$[ebp], 0
	jne	SHORT $LN13@Rebuild

; 59   : 		{
; 60   : 			// Workers first
; 61   : 			if(pLoopUnit->workRate(true) > 0)

	push	-1
	push	1
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z ; CvUnit::workRate
	test	eax, eax
	jle	SHORT $LN13@Rebuild

; 62   : 				pkStartUnit = pLoopUnit;

	mov	eax, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR _pkStartUnit$[ebp], eax
$LN13@Rebuild:

; 63   : 		}
; 64   : 	}

	jmp	SHORT $LN15@Rebuild
$LN14@Rebuild:

; 65   : 
; 66   : 	if (!pkStartUnit)

	cmp	DWORD PTR _pkStartUnit$[ebp], 0
	jne	SHORT $LN11@Rebuild

; 67   : 		pkStartUnit = pkFirstUnit;

	mov	ecx, DWORD PTR _pkFirstUnit$[ebp]
	mov	DWORD PTR _pkStartUnit$[ebp], ecx
$LN11@Rebuild:

; 68   : 
; 69   : 	// Add first unit to list
; 70   : 	if(pkStartUnit)

	cmp	DWORD PTR _pkStartUnit$[ebp], 0
	je	$LN21@Rebuild

; 71   : 	{
; 72   : 		m_kNodeList.insertAtEnd(pkStartUnit->GetID());

	mov	edx, DWORD PTR _pkStartUnit$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR $T217707[ebp], eax
	mov	ecx, DWORD PTR $T217707[ebp]
	mov	DWORD PTR $T217651[ebp], ecx
	lea	edx, DWORD PTR $T217651[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insertAtEnd@?$CLinkList@H@@QAEXABH@Z	; CLinkList<int>::insertAtEnd

; 73   : 
; 74   : 		// Current unit is the first one
; 75   : 		UnitHandle pCurrentUnit = pkStartUnit;

	mov	eax, DWORD PTR _pkStartUnit$[ebp]
	mov	DWORD PTR _pCurrentUnit$217174[ebp], eax
	mov	BYTE PTR _pCurrentUnit$217174[ebp+4], 0
	cmp	DWORD PTR _pCurrentUnit$217174[ebp], 0
	je	SHORT $LN58@Rebuild
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN58@Rebuild:
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 76   : 		pCurrentUnit->SetCycleOrder(1);

	push	1
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?SetCycleOrder@CvUnit@@QAEXH@Z		; CvUnit::SetCycleOrder

; 77   : 
; 78   : 		// Loop through units until everyone is accounted for
; 79   : 		int iNumUnits = m_pkPlayer->getNumUnits();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?getNumUnits@CvPlayer@@QBEHXZ		; CvPlayer::getNumUnits
	mov	DWORD PTR _iNumUnits$217175[ebp], eax
$LN9@Rebuild:

; 80   : 		while(m_kNodeList.getLength() < iNumUnits)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T217732[ebp], eax
	mov	ecx, DWORD PTR $T217732[ebp]
	cmp	ecx, DWORD PTR _iNumUnits$217175[ebp]
	jge	$LN8@Rebuild

; 81   : 		{
; 82   : 			int iBestUnitScore = MAX_INT;

	mov	DWORD PTR _iBestUnitScore$217179[ebp], 2147483647 ; 7fffffffH

; 83   : 			CvUnit* pBestUnit = NULL;

	mov	DWORD PTR _pBestUnit$217180[ebp], 0

; 84   : 
; 85   : 			int iX = pCurrentUnit->getX();

	mov	edx, DWORD PTR _pCurrentUnit$217174[ebp]
	mov	DWORD PTR $T217736[ebp], edx
	mov	eax, DWORD PTR $T217736[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _iX$217181[ebp], ecx

; 86   : 			int iY = pCurrentUnit->getY();

	mov	edx, DWORD PTR _pCurrentUnit$217174[ebp]
	mov	DWORD PTR $T217748[ebp], edx
	mov	eax, DWORD PTR $T217748[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _iY$217182[ebp], ecx

; 87   : 			for(pLoopUnit = m_pkPlayer->firstUnit(&iLoop); pLoopUnit != NULL; pLoopUnit = m_pkPlayer->nextUnit(&iLoop))

	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?firstUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::firstUnit
	mov	DWORD PTR _pLoopUnit$[ebp], eax
	jmp	SHORT $LN7@Rebuild
$LN6@Rebuild:
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?nextUnit@CvPlayer@@QAEPAVCvUnit@@PAH_N@Z ; CvPlayer::nextUnit
	mov	DWORD PTR _pLoopUnit$[ebp], eax
$LN7@Rebuild:
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN5@Rebuild

; 88   : 			{
; 89   : 				// If we've already added this unit to the cycle list, skip it
; 90   : 				if(pLoopUnit->GetCycleOrder() == 1)

	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?GetCycleOrder@CvUnit@@QBEHXZ		; CvUnit::GetCycleOrder
	cmp	eax, 1
	jne	SHORT $LN80@Rebuild

; 91   : 					continue;

	jmp	SHORT $LN6@Rebuild

; 92   : 
; 93   : 				int iScore = plotDistance(iX, iY, pLoopUnit->getX(), pLoopUnit->getY());

$LN80@Rebuild:
	mov	eax, DWORD PTR _pLoopUnit$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T217765[ebp], ecx
	mov	edx, DWORD PTR _pLoopUnit$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T217774[ebp], eax
	mov	ecx, DWORD PTR $T217765[ebp]
	push	ecx
	mov	edx, DWORD PTR $T217774[ebp]
	push	edx
	mov	eax, DWORD PTR _iY$217182[ebp]
	push	eax
	mov	ecx, DWORD PTR _iX$217181[ebp]
	push	ecx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iScore$217187[ebp], eax

; 94   : 
; 95   : 				// Closest unit yet
; 96   : 				if(iScore < iBestUnitScore)

	mov	edx, DWORD PTR _iScore$217187[ebp]
	cmp	edx, DWORD PTR _iBestUnitScore$217179[ebp]
	jge	SHORT $LN3@Rebuild

; 97   : 				{
; 98   : 					iBestUnitScore = iScore;

	mov	eax, DWORD PTR _iScore$217187[ebp]
	mov	DWORD PTR _iBestUnitScore$217179[ebp], eax

; 99   : 					pBestUnit = pLoopUnit;

	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR _pBestUnit$217180[ebp], ecx
$LN3@Rebuild:

; 100  : 				}
; 101  : 			}

	jmp	SHORT $LN6@Rebuild
$LN5@Rebuild:

; 102  : 
; 103  : 			CvAssertMsg(pBestUnit, "Didn't find a unit to add to cycle list.");
; 104  : 
; 105  : 			if (pBestUnit)

	cmp	DWORD PTR _pBestUnit$217180[ebp], 0
	je	SHORT $LN2@Rebuild

; 106  : 			{
; 107  : 				m_kNodeList.insertAtEnd(pBestUnit->GetID());

	mov	edx, DWORD PTR _pBestUnit$217180[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR $T217832[ebp], eax
	mov	ecx, DWORD PTR $T217832[ebp]
	mov	DWORD PTR $T217652[ebp], ecx
	lea	edx, DWORD PTR $T217652[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insertAtEnd@?$CLinkList@H@@QAEXABH@Z	; CLinkList<int>::insertAtEnd

; 108  : 
; 109  : 				// Now have a new current unit
; 110  : 				pCurrentUnit = pBestUnit;

	cmp	DWORD PTR _pCurrentUnit$217174[ebp], 0
	je	SHORT $LN132@Rebuild
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN132@Rebuild:
	mov	eax, DWORD PTR _pBestUnit$217180[ebp]
	mov	DWORD PTR _pCurrentUnit$217174[ebp], eax
	cmp	DWORD PTR _pCurrentUnit$217174[ebp], 0
	je	SHORT $LN139@Rebuild
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 111  : 				pCurrentUnit->SetCycleOrder(1);

$LN139@Rebuild:
	push	1
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?SetCycleOrder@CvUnit@@QAEXH@Z		; CvUnit::SetCycleOrder

; 112  : 			}
; 113  : 			else

	jmp	SHORT $LN1@Rebuild
$LN2@Rebuild:

; 114  : 				break;

	jmp	SHORT $LN8@Rebuild
$LN1@Rebuild:

; 115  : 		}

	jmp	$LN9@Rebuild
$LN8@Rebuild:

; 116  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pCurrentUnit$217174[ebp], 0
	je	SHORT $LN21@Rebuild
	mov	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN21@Rebuild:

; 117  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z$0:
	lea	ecx, DWORD PTR _pSelectedUnit$217152[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z$1:
	lea	ecx, DWORD PTR _pCurrentUnit$217174[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z ENDP		; CvUnitCycler::Rebuild
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
tv157 = -92						; size = 4
tv138 = -88						; size = 4
tv135 = -84						; size = 4
$T217963 = -80						; size = 4
$T217936 = -60						; size = 4
_iDY$ = -24						; size = 4
_iDX$ = -20						; size = 4
_iWrappedDX$ = -16					; size = 4
_iHX1$ = -12						; size = 4
_iHX2$ = -8						; size = 4
_iWrappedDY$ = -4					; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[ebp]
	sub	eax, DWORD PTR _iX1$[ebp]
	push	eax
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDX$[ebp], eax

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	ecx, DWORD PTR _iY2$[ebp]
	sub	ecx, DWORD PTR _iY1$[ebp]
	push	ecx
	call	?dyWrap@@YAHH@Z				; dyWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDY$[ebp], eax

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, DWORD PTR _iWrappedDY$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[ebp], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	cmp	DWORD PTR _iY1$[ebp], 0
	jl	SHORT $LN35@plotDistan
	mov	edx, DWORD PTR _iY1$[ebp]
	sar	edx, 1
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN33@plotDistan
$LN35@plotDistan:
	mov	eax, DWORD PTR _iY1$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv135[ebp], eax
$LN33@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	sub	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _iHX1$[ebp], eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	mov	ecx, DWORD PTR _iY1$[ebp]
	add	ecx, DWORD PTR _iWrappedDY$[ebp]
	mov	DWORD PTR $T217936[ebp], ecx
	js	SHORT $LN39@plotDistan
	mov	edx, DWORD PTR $T217936[ebp]
	sar	edx, 1
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN37@plotDistan
$LN39@plotDistan:
	mov	eax, DWORD PTR $T217936[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv138[ebp], eax
$LN37@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	add	eax, DWORD PTR _iWrappedDX$[ebp]
	sub	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _iHX2$[ebp], eax

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	ecx, DWORD PTR _iHX2$[ebp]
	sub	ecx, DWORD PTR _iHX1$[ebp]
	push	ecx
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDX$[ebp], eax

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	mov	edx, DWORD PTR _iHX2$[ebp]
	sub	edx, DWORD PTR _iHX1$[ebp]
	xor	eax, eax
	test	edx, edx
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iWrappedDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	jmp	SHORT $LN3@plotDistan

; 163  : 	}
; 164  : 	else

	jmp	SHORT $LN3@plotDistan
$LN2@plotDistan:

; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	mov	edx, DWORD PTR _iDX$[ebp]
	cmp	edx, DWORD PTR _iDY$[ebp]
	jge	SHORT $LN57@plotDistan
	lea	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN58@plotDistan
$LN57@plotDistan:
	lea	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN58@plotDistan:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T217963[ebp], edx
	mov	eax, DWORD PTR $T217963[ebp]
	mov	eax, DWORD PTR [eax]
$LN3@plotDistan:

; 170  : #endif
; 171  : 	}
; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
$T217986 = -16						; size = 4
$T217978 = -12						; size = 4
$T217974 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T217974[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T217978[ebp], ecx
	movzx	edx, BYTE PTR $T217974[ebp]
	test	edx, edx
	je	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR $T217978[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDX$[ebp], eax
	jle	SHORT $LN11@dxWrap
	mov	ecx, DWORD PTR _iDX$[ebp]
	sub	ecx, DWORD PTR $T217978[ebp]
	mov	DWORD PTR $T217986[ebp], ecx
	jmp	SHORT $LN13@dxWrap
	jmp	SHORT $LN12@dxWrap
$LN11@dxWrap:
	mov	edx, DWORD PTR $T217978[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDX$[ebp], edx
	jge	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR $T217978[ebp]
	mov	DWORD PTR $T217986[ebp], eax
	jmp	SHORT $LN13@dxWrap
$LN12@dxWrap:
	mov	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR $T217986[ebp], ecx
$LN13@dxWrap:
	mov	eax, DWORD PTR $T217986[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
$T218007 = -16						; size = 4
$T217999 = -12						; size = 4
$T217995 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T217995[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T217999[ebp], ecx
	movzx	edx, BYTE PTR $T217995[ebp]
	test	edx, edx
	je	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR $T217999[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDY$[ebp], eax
	jle	SHORT $LN11@dyWrap
	mov	ecx, DWORD PTR _iDY$[ebp]
	sub	ecx, DWORD PTR $T217999[ebp]
	mov	DWORD PTR $T218007[ebp], ecx
	jmp	SHORT $LN13@dyWrap
	jmp	SHORT $LN12@dyWrap
$LN11@dyWrap:
	mov	edx, DWORD PTR $T217999[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDY$[ebp], edx
	jge	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR _iDY$[ebp]
	add	eax, DWORD PTR $T217999[ebp]
	mov	DWORD PTR $T218007[ebp], eax
	jmp	SHORT $LN13@dyWrap
$LN12@dyWrap:
	mov	ecx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR $T218007[ebp], ecx
$LN13@dyWrap:
	mov	eax, DWORD PTR $T218007[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?AddUnit@CvUnitCycler@@QAEXH@Z			; CvUnitCycler::AddUnit
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcycler.cpp
;	COMDAT ?AddUnit@CvUnitCycler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iID$ = 8						; size = 4
?AddUnit@CvUnitCycler@@QAEXH@Z PROC			; CvUnitCycler::AddUnit, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	Rebuild();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Rebuild@CvUnitCycler@@QAEXPAVCvUnit@@@Z ; CvUnitCycler::Rebuild

; 127  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddUnit@CvUnitCycler@@QAEXH@Z ENDP			; CvUnitCycler::AddUnit
_TEXT	ENDS
PUBLIC	?NextNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CvUnitCycler::NextNode
PUBLIC	?RemoveUnit@CvUnitCycler@@QAEXH@Z		; CvUnitCycler::RemoveUnit
; Function compile flags: /Odtp
;	COMDAT ?RemoveUnit@CvUnitCycler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pUnitNode$ = -4					; size = 4
_iID$ = 8						; size = 4
?RemoveUnit@CvUnitCycler@@QAEXH@Z PROC			; CvUnitCycler::RemoveUnit, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	CLLNode<int>* pUnitNode;
; 132  : 
; 133  : 	pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax
$LN4@RemoveUnit:

; 134  : 
; 135  : 	while(pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	je	SHORT $LN5@RemoveUnit

; 136  : 	{
; 137  : 		if(pUnitNode->m_data == iID)

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _iID$[ebp]
	jne	SHORT $LN2@RemoveUnit

; 138  : 		{
; 139  : 			pUnitNode = DeleteNode(pUnitNode);

	mov	edx, DWORD PTR _pUnitNode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CvUnitCycler::DeleteNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 140  : 			break;

	jmp	SHORT $LN5@RemoveUnit

; 141  : 		}
; 142  : 		else

	jmp	SHORT $LN1@RemoveUnit
$LN2@RemoveUnit:

; 143  : 		{
; 144  : 			pUnitNode = NextNode(pUnitNode);

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CvUnitCycler::NextNode
	mov	DWORD PTR _pUnitNode$[ebp], eax
$LN1@RemoveUnit:

; 145  : 		}
; 146  : 	}

	jmp	SHORT $LN4@RemoveUnit
$LN5@RemoveUnit:

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveUnit@CvUnitCycler@@QAEXH@Z ENDP			; CvUnitCycler::RemoveUnit
_TEXT	ENDS
PUBLIC	?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ	; CvUnitCycler::TailNode
PUBLIC	?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::PreviousNode
PUBLIC	?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::NextNode
PUBLIC	?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z ; CvUnitCycler::Cycle
EXTRN	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ:PROC ; CvUnit::AI_getUnitAIType
EXTRN	?ReadyToSelect@CvUnit@@QBE_NXZ:PROC		; CvUnit::ReadyToSelect
EXTRN	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z:PROC	; CvPlayer::getUnit
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z$0
__ehfuncinfo$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitcycler.cpp
xdata$x	ENDS
;	COMDAT ?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T218050 = -52						; size = 4
$T218046 = -48						; size = 4
$T218042 = -44						; size = 4
$T218035 = -40						; size = 4
$T218015 = -36						; size = 4
$T218014 = -32						; size = 4
_pFirstUnitNode$ = -28					; size = 4
_pUnitNode$ = -24					; size = 4
_pLoopUnit$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_pUnit$ = 8						; size = 4
_bForward$ = 12						; size = 1
_bWorkers$ = 16						; size = 1
_pbWrap$ = 20						; size = 4
?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z PROC	; CvUnitCycler::Cycle, COMDAT
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 	const CLLNode<int>* pUnitNode;
; 154  : 	const CLLNode<int>* pFirstUnitNode;
; 155  : 	UnitHandle pLoopUnit;

	mov	DWORD PTR _pLoopUnit$[ebp], 0
	mov	BYTE PTR _pLoopUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 156  : 
; 157  : 	if (pbWrap != NULL)

	cmp	DWORD PTR _pbWrap$[ebp], 0
	je	SHORT $LN26@Cycle

; 158  : 	{
; 159  : 		*pbWrap = false;

	mov	eax, DWORD PTR _pbWrap$[ebp]
	mov	BYTE PTR [eax], 0
$LN26@Cycle:

; 160  : 	}
; 161  : 
; 162  : 	pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 163  : 
; 164  : 	if (pUnit != NULL)

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN25@Cycle
$LN24@Cycle:

; 165  : 	{
; 166  : 		while (pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	je	SHORT $LN25@Cycle

; 167  : 		{
; 168  : 			if (m_pkPlayer->getUnit(pUnitNode->m_data) == pUnit)

	mov	ecx, DWORD PTR _pUnitNode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	cmp	eax, DWORD PTR _pUnit$[ebp]
	jne	SHORT $LN22@Cycle

; 169  : 			{
; 170  : 				if (bForward)

	movzx	ecx, BYTE PTR _bForward$[ebp]
	test	ecx, ecx
	je	SHORT $LN21@Cycle

; 171  : 				{
; 172  : 					pUnitNode = NextNode(pUnitNode);

	mov	edx, DWORD PTR _pUnitNode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::NextNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 173  : 				}
; 174  : 				else

	jmp	SHORT $LN20@Cycle
$LN21@Cycle:

; 175  : 				{
; 176  : 					pUnitNode = PreviousNode(pUnitNode);

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::PreviousNode
	mov	DWORD PTR _pUnitNode$[ebp], eax
$LN20@Cycle:

; 177  : 				}
; 178  : 				break;

	jmp	SHORT $LN25@Cycle
$LN22@Cycle:

; 179  : 			}
; 180  : 
; 181  : 			pUnitNode = NextNode(pUnitNode);

	mov	ecx, DWORD PTR _pUnitNode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::NextNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 182  : 		}

	jmp	SHORT $LN24@Cycle
$LN25@Cycle:

; 183  : 	}
; 184  : 
; 185  : 	if (pUnitNode == NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	jne	SHORT $LN19@Cycle

; 186  : 	{
; 187  : 		if (bForward)

	movzx	edx, BYTE PTR _bForward$[ebp]
	test	edx, edx
	je	SHORT $LN18@Cycle

; 188  : 		{
; 189  : 			pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 190  : 		}
; 191  : 		else

	jmp	SHORT $LN17@Cycle
$LN18@Cycle:

; 192  : 		{
; 193  : 			pUnitNode = TailNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ ; CvUnitCycler::TailNode
	mov	DWORD PTR _pUnitNode$[ebp], eax
$LN17@Cycle:

; 194  : 		}
; 195  : 
; 196  : 		if (pbWrap != NULL)

	cmp	DWORD PTR _pbWrap$[ebp], 0
	je	SHORT $LN19@Cycle

; 197  : 		{
; 198  : 			*pbWrap = true;

	mov	eax, DWORD PTR _pbWrap$[ebp]
	mov	BYTE PTR [eax], 1
$LN19@Cycle:

; 199  : 		}
; 200  : 	}
; 201  : 
; 202  : 	if (pUnitNode != NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	je	$LN15@Cycle

; 203  : 	{
; 204  : 		pFirstUnitNode = pUnitNode;

	mov	ecx, DWORD PTR _pUnitNode$[ebp]
	mov	DWORD PTR _pFirstUnitNode$[ebp], ecx
$LN14@Cycle:

; 205  : 
; 206  : 		while (true)

	mov	edx, 1
	test	edx, edx
	je	$LN15@Cycle

; 207  : 		{
; 208  : #ifdef AUI_WARNING_FIXES
; 209  : 			if (pUnitNode)
; 210  : 			{
; 211  : 				pLoopUnit = m_pkPlayer->getUnit(pUnitNode->m_data);
; 212  : #else
; 213  : 			pLoopUnit = m_pkPlayer->getUnit(pUnitNode->m_data);

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T218035[ebp], eax
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN33@Cycle
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN33@Cycle:
	mov	eax, DWORD PTR $T218035[ebp]
	mov	DWORD PTR _pLoopUnit$[ebp], eax
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN40@Cycle
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 214  : #endif
; 215  : 			CvAssertMsg(pLoopUnit, "LoopUnit is not assigned a valid value");
; 216  : 
; 217  : 			if (pLoopUnit && pLoopUnit->ReadyToSelect())

$LN40@Cycle:
	xor	ecx, ecx
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	setne	cl
	movzx	edx, cl
	test	edx, edx
	je	$LN12@Cycle
	mov	eax, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR $T218042[ebp], eax
	mov	ecx, DWORD PTR $T218042[ebp]
	call	?ReadyToSelect@CvUnit@@QBE_NXZ		; CvUnit::ReadyToSelect
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Cycle

; 218  : 			{
; 219  : 				if (!bWorkers || pLoopUnit->AI_getUnitAIType() == UNITAI_WORKER || pLoopUnit->AI_getUnitAIType() == UNITAI_WORKER_SEA)

	movzx	edx, BYTE PTR _bWorkers$[ebp]
	test	edx, edx
	je	SHORT $LN10@Cycle
	mov	eax, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR $T218046[ebp], eax
	mov	ecx, DWORD PTR $T218046[ebp]
	call	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ ; CvUnit::AI_getUnitAIType
	cmp	eax, 2
	je	SHORT $LN10@Cycle
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR $T218050[ebp], ecx
	mov	ecx, DWORD PTR $T218050[ebp]
	call	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ ; CvUnit::AI_getUnitAIType
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN12@Cycle
$LN10@Cycle:

; 220  : 				{
; 221  : 					if (pUnit && pLoopUnit== pUnit)

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN50@Cycle
	mov	edx, DWORD PTR _pLoopUnit$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _pUnit$[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN50@Cycle

; 222  : 					{
; 223  : 						if (pbWrap != NULL)

	cmp	DWORD PTR _pbWrap$[ebp], 0
	je	SHORT $LN50@Cycle

; 224  : 						{
; 225  : 							*pbWrap = true;

	mov	edx, DWORD PTR _pbWrap$[ebp]
	mov	BYTE PTR [edx], 1

; 226  : 						}
; 227  : 					}
; 228  : 
; 229  : 					return pLoopUnit.pointer();

$LN50@Cycle:
	mov	eax, DWORD PTR _pLoopUnit$[ebp]
	mov	DWORD PTR $T218014[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN53@Cycle
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN53@Cycle:
	mov	eax, DWORD PTR $T218014[ebp]
	jmp	$LN27@Cycle
$LN12@Cycle:

; 230  : 				}
; 231  : 			}
; 232  : #ifdef AUI_WARNING_FIXES
; 233  : 			}
; 234  : #endif
; 235  : 
; 236  : 			if (bForward)

	movzx	ecx, BYTE PTR _bForward$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@Cycle

; 237  : 			{
; 238  : 				pUnitNode = NextNode(pUnitNode);

	mov	edx, DWORD PTR _pUnitNode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::NextNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 239  : 
; 240  : 				if (pUnitNode == NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	jne	SHORT $LN6@Cycle

; 241  : 				{
; 242  : 					pUnitNode = HeadNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ; CvUnitCycler::HeadNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 243  : 
; 244  : 					if (pbWrap != NULL)

	cmp	DWORD PTR _pbWrap$[ebp], 0
	je	SHORT $LN6@Cycle

; 245  : 					{
; 246  : 						*pbWrap = true;

	mov	eax, DWORD PTR _pbWrap$[ebp]
	mov	BYTE PTR [eax], 1
$LN6@Cycle:

; 247  : 					}
; 248  : 				}
; 249  : 			}
; 250  : 			else

	jmp	SHORT $LN4@Cycle
$LN7@Cycle:

; 251  : 			{
; 252  : 				pUnitNode = PreviousNode(pUnitNode);

	mov	ecx, DWORD PTR _pUnitNode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ; CvUnitCycler::PreviousNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 253  : 
; 254  : 				if (pUnitNode == NULL)

	cmp	DWORD PTR _pUnitNode$[ebp], 0
	jne	SHORT $LN4@Cycle

; 255  : 				{
; 256  : 					pUnitNode = TailNode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ ; CvUnitCycler::TailNode
	mov	DWORD PTR _pUnitNode$[ebp], eax

; 257  : 
; 258  : 					if (pbWrap != NULL)

	cmp	DWORD PTR _pbWrap$[ebp], 0
	je	SHORT $LN4@Cycle

; 259  : 					{
; 260  : 						*pbWrap = true;

	mov	edx, DWORD PTR _pbWrap$[ebp]
	mov	BYTE PTR [edx], 1
$LN4@Cycle:

; 261  : 					}
; 262  : 				}
; 263  : 			}
; 264  : 
; 265  : 			if (pUnitNode == pFirstUnitNode)

	mov	eax, DWORD PTR _pUnitNode$[ebp]
	cmp	eax, DWORD PTR _pFirstUnitNode$[ebp]
	jne	SHORT $LN1@Cycle

; 266  : 			{
; 267  : 				break;

	jmp	SHORT $LN15@Cycle
$LN1@Cycle:

; 268  : 			}
; 269  : 		}

	jmp	$LN14@Cycle
$LN15@Cycle:

; 270  : 	}
; 271  : 
; 272  : 	return NULL;

	mov	DWORD PTR $T218015[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pLoopUnit$[ebp], 0
	je	SHORT $LN58@Cycle
	mov	ecx, DWORD PTR _pLoopUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN58@Cycle:
	mov	eax, DWORD PTR $T218015[ebp]
$LN27@Cycle:

; 273  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z$0:
	lea	ecx, DWORD PTR _pLoopUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Cycle@CvUnitCycler@@QAEPAVCvUnit@@PAV2@_N1PA_N@Z ENDP	; CvUnitCycler::Cycle
PUBLIC	?deleteNode@?$CLinkList@H@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CLinkList<int>::deleteNode
; Function compile flags: /Odtp
;	COMDAT ?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_pNode$ = 8						; size = 4
?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z PROC ; CvUnitCycler::DeleteNode, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	return m_kNodeList.deleteNode(pNode);

	mov	eax, DWORD PTR _pNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deleteNode@?$CLinkList@H@@QAEPAV?$CLLNode@H@@PAV2@@Z ; CLinkList<int>::deleteNode

; 280  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ENDP ; CvUnitCycler::DeleteNode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z PROC	; CvUnitCycler::NextNode, COMDAT
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 	return m_kNodeList.next(pNode);

	cmp	DWORD PTR _pNode$[ebp], 0
	je	SHORT $LN5@NextNode
	mov	eax, DWORD PTR _pNode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN3@NextNode
$LN5@NextNode:
	mov	DWORD PTR tv69[ebp], 0
$LN3@NextNode:
	mov	eax, DWORD PTR tv69[ebp]

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NextNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ENDP	; CvUnitCycler::NextNode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?NextNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?NextNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z PROC	; CvUnitCycler::NextNode, COMDAT
; _this$ = ecx

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 291  : 	return m_kNodeList.next(pNode);

	cmp	DWORD PTR _pNode$[ebp], 0
	je	SHORT $LN5@NextNode@2
	mov	eax, DWORD PTR _pNode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN3@NextNode@2
$LN5@NextNode@2:
	mov	DWORD PTR tv69[ebp], 0
$LN3@NextNode@2:
	mov	eax, DWORD PTR tv69[ebp]

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NextNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@PAV2@@Z ENDP	; CvUnitCycler::NextNode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_pNode$ = 8						; size = 4
?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z PROC ; CvUnitCycler::PreviousNode, COMDAT
; _this$ = ecx

; 296  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 	return m_kNodeList.prev(pNode);

	cmp	DWORD PTR _pNode$[ebp], 0
	je	SHORT $LN5@PreviousNo
	mov	eax, DWORD PTR _pNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN3@PreviousNo
$LN5@PreviousNo:
	mov	DWORD PTR tv69[ebp], 0
$LN3@PreviousNo:
	mov	eax, DWORD PTR tv69[ebp]

; 298  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?PreviousNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@PBV2@@Z ENDP ; CvUnitCycler::PreviousNode
_TEXT	ENDS
PUBLIC	?HeadNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ	; CvUnitCycler::HeadNode
; Function compile flags: /Odtp
;	COMDAT ?HeadNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T218127 = -4						; size = 4
?HeadNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ PROC	; CvUnitCycler::HeadNode, COMDAT
; _this$ = ecx

; 302  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 	return m_kNodeList.head();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218127[ebp], ecx
	mov	eax, DWORD PTR $T218127[ebp]

; 304  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HeadNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ ENDP	; CvUnitCycler::HeadNode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T218133 = -4						; size = 4
?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ PROC	; CvUnitCycler::HeadNode, COMDAT
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	return m_kNodeList.head();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218133[ebp], ecx
	mov	eax, DWORD PTR $T218133[ebp]

; 310  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HeadNode@CvUnitCycler@@QAEPAV?$CLLNode@H@@XZ ENDP	; CvUnitCycler::HeadNode
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T218139 = -4						; size = 4
?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ PROC	; CvUnitCycler::TailNode, COMDAT
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 	return m_kNodeList.tail();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T218139[ebp], ecx
	mov	eax, DWORD PTR $T218139[ebp]

; 316  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TailNode@CvUnitCycler@@QBEPBV?$CLLNode@H@@XZ ENDP	; CvUnitCycler::TailNode
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$CLinkList@H@@@Z ; operator>><int>
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvUnitCycler@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvUnitCycler@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvUnitCycler@@@Z PROC	; operator>>, COMDAT

; 320  : {

	push	ebp
	mov	ebp, esp

; 321  : 	writeTo.Clear();

	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?Clear@CvUnitCycler@@QAEXXZ		; CvUnitCycler::Clear

; 322  : 	loadFrom >> writeTo.m_kNodeList;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	call	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$CLinkList@H@@@Z ; operator>><int>
	add	esp, 8

; 323  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 324  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvUnitCycler@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$CLinkList@H@@@Z ; operator<<<int>
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvUnitCycler@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvUnitCycler@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvUnitCycler@@@Z PROC	; operator<<, COMDAT

; 328  : {

	push	ebp
	mov	ebp, esp

; 329  : 	saveTo << readFrom.m_kNodeList;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	call	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$CLinkList@H@@@Z ; operator<<<int>
	add	esp, 8

; 330  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 331  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvUnitCycler@@@Z ENDP	; operator<<
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
_TEXT	ENDS
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if(m_target) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN2@FObjectHan:

; 150  : 		}
; 151  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_inst$218156 = -8					; size = 4
$T218151 = -4						; size = 4
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 720  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T218151[ebp], ecx
	cmp	DWORD PTR $T218151[ebp], 0
	je	SHORT $LN1@auto_ptr
	mov	edx, DWORD PTR $T218151[ebp]
	mov	DWORD PTR _inst$218156[ebp], edx
	mov	eax, DWORD PTR _inst$218156[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$218156[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@auto_ptr:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
_TEXT	ENDS
PUBLIC	??_7?$CLLNode@H@@6B@				; CLLNode<int>::`vftable'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_E?$CLLNode@H@@UAEPAXI@Z:PROC			; CLLNode<int>::`vector deleting destructor'
;	COMDAT ??_7?$CLLNode@H@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\linkedlist.h
CONST	SEGMENT
??_7?$CLLNode@H@@6B@ DD FLAT:??_E?$CLLNode@H@@UAEPAXI@Z	; CLLNode<int>::`vftable'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?insertAtEnd@?$CLinkList@H@@QAEXABH@Z
_TEXT	SEGMENT
tv72 = -20						; size = 4
_this$ = -16						; size = 4
$T218160 = -12						; size = 4
$T218159 = -8						; size = 4
_pNode$ = -4						; size = 4
_val$ = 8						; size = 4
?insertAtEnd@?$CLinkList@H@@QAEXABH@Z PROC		; CLinkList<int>::insertAtEnd, COMDAT
; _this$ = ecx

; 175  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 	CLLNode<tVARTYPE>* pNode;
; 177  : 
; 178  : 	assert((m_pHead == NULL) || (m_iLength > 0));
; 179  : 
; 180  : 	pNode = FNEW(CLLNode<tVARTYPE>(val), c_eCiv5GameplayDLL, 0);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T218160[ebp], eax
	cmp	DWORD PTR $T218160[ebp], 0
	je	SHORT $LN5@insertAtEn
	mov	eax, DWORD PTR $T218160[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CLLNode@H@@6B@
	mov	ecx, DWORD PTR $T218160[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR $T218160[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T218160[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR $T218160[ebp]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN6@insertAtEn
$LN5@insertAtEn:
	mov	DWORD PTR tv72[ebp], 0
$LN6@insertAtEn:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T218159[ebp], ecx
	mov	edx, DWORD PTR $T218159[ebp]
	mov	DWORD PTR _pNode$[ebp], edx

; 181  : 
; 182  : 	if (m_pTail != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@insertAtEn

; 183  : 	{
; 184  : 		m_pTail->m_pNext = pNode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _pNode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 185  : 		pNode->m_pPrev = m_pTail;

	mov	ecx, DWORD PTR _pNode$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 186  : 		m_pTail = pNode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pNode$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 187  : 	}
; 188  : 	else

	jmp	SHORT $LN1@insertAtEn
$LN2@insertAtEn:

; 189  : 	{
; 190  : 		m_pHead = pNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 191  : 		m_pTail = pNode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pNode$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN1@insertAtEn:

; 192  : 	}
; 193  : 
; 194  : 	m_iLength++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?insertAtEnd@?$CLinkList@H@@QAEXABH@Z ENDP		; CLinkList<int>::insertAtEnd
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?deleteNode@?$CLinkList@H@@QAEPAV?$CLLNode@H@@PAV2@@Z
_TEXT	SEGMENT
tv90 = -24						; size = 4
_this$ = -20						; size = 4
$T218176 = -16						; size = 4
$T218175 = -12						; size = 4
_pPrevNode$ = -8					; size = 4
_pNextNode$ = -4					; size = 4
_pNode$ = 8						; size = 4
?deleteNode@?$CLinkList@H@@QAEPAV?$CLLNode@H@@PAV2@@Z PROC ; CLinkList<int>::deleteNode, COMDAT
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	CLLNode<tVARTYPE>* pPrevNode;
; 252  : 	CLLNode<tVARTYPE>* pNextNode;
; 253  : 
; 254  : 	assert(pNode != NULL);
; 255  : 	if (!pNode) return NULL;

	cmp	DWORD PTR _pNode$[ebp], 0
	jne	SHORT $LN7@deleteNode
	xor	eax, eax
	jmp	$LN8@deleteNode
$LN7@deleteNode:

; 256  : 
; 257  : 	pPrevNode = pNode->m_pPrev;

	mov	eax, DWORD PTR _pNode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pPrevNode$[ebp], ecx

; 258  : 	pNextNode = pNode->m_pNext;

	mov	edx, DWORD PTR _pNode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pNextNode$[ebp], eax

; 259  : 
; 260  : 	if ((pPrevNode != NULL) && (pNextNode != NULL))

	cmp	DWORD PTR _pPrevNode$[ebp], 0
	je	SHORT $LN6@deleteNode
	cmp	DWORD PTR _pNextNode$[ebp], 0
	je	SHORT $LN6@deleteNode

; 261  : 	{
; 262  : 		pPrevNode->m_pNext = pNextNode;

	mov	ecx, DWORD PTR _pPrevNode$[ebp]
	mov	edx, DWORD PTR _pNextNode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 263  : 		pNextNode->m_pPrev = pPrevNode;

	mov	eax, DWORD PTR _pNextNode$[ebp]
	mov	ecx, DWORD PTR _pPrevNode$[ebp]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN5@deleteNode
$LN6@deleteNode:

; 264  : 	}
; 265  : 	else if (pPrevNode != NULL)

	cmp	DWORD PTR _pPrevNode$[ebp], 0
	je	SHORT $LN4@deleteNode

; 266  : 	{
; 267  : 		pPrevNode->m_pNext = NULL;

	mov	edx, DWORD PTR _pPrevNode$[ebp]
	mov	DWORD PTR [edx+8], 0

; 268  : 		m_pTail = pPrevNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPrevNode$[ebp]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN5@deleteNode
$LN4@deleteNode:

; 269  : 	}
; 270  : 	else if (pNextNode != NULL)

	cmp	DWORD PTR _pNextNode$[ebp], 0
	je	SHORT $LN2@deleteNode

; 271  : 	{
; 272  : 		pNextNode->m_pPrev = NULL;

	mov	edx, DWORD PTR _pNextNode$[ebp]
	mov	DWORD PTR [edx+12], 0

; 273  : 		m_pHead = pNextNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNextNode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 274  : 	}
; 275  : 	else

	jmp	SHORT $LN5@deleteNode
$LN2@deleteNode:

; 276  : 	{
; 277  : 		m_pHead = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 278  : 		m_pTail = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN5@deleteNode:

; 279  : 	}
; 280  : 
; 281  : 	SAFE_DELETE(pNode);

	mov	ecx, DWORD PTR _pNode$[ebp]
	mov	DWORD PTR $T218176[ebp], ecx
	mov	edx, DWORD PTR $T218176[ebp]
	mov	DWORD PTR $T218175[ebp], edx
	cmp	DWORD PTR $T218175[ebp], 0
	je	SHORT $LN12@deleteNode
	push	1
	mov	eax, DWORD PTR $T218175[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T218175[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN13@deleteNode
$LN12@deleteNode:
	mov	DWORD PTR tv90[ebp], 0
$LN13@deleteNode:
	mov	DWORD PTR _pNode$[ebp], 0

; 282  : 
; 283  : 	m_iLength--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 284  : 
; 285  : 	return pNextNode;

	mov	eax, DWORD PTR _pNextNode$[ebp]
$LN8@deleteNode:

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?deleteNode@?$CLinkList@H@@QAEPAV?$CLLNode@H@@PAV2@@Z ENDP ; CLinkList<int>::deleteNode
_TEXT	ENDS
PUBLIC	?Read@?$CLinkList@H@@QAEXAAVFDataStream@@@Z	; CLinkList<int>::Read
; Function compile flags: /Odtp
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$CLinkList@H@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$CLinkList@H@@@Z PROC ; operator>><int>, COMDAT

; 532  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 533  : 	writeTo.Read(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	call	?Read@?$CLinkList@H@@QAEXAAVFDataStream@@@Z ; CLinkList<int>::Read

; 534  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 535  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$CLinkList@H@@@Z ENDP ; operator>><int>
_TEXT	ENDS
PUBLIC	?Write@?$CLinkList@H@@QBEXAAVFDataStream@@@Z	; CLinkList<int>::Write
; Function compile flags: /Odtp
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$CLinkList@H@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$CLinkList@H@@@Z PROC ; operator<<<int>, COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 526  : 	readFrom.Write(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	call	?Write@?$CLinkList@H@@QBEXAAVFDataStream@@@Z ; CLinkList<int>::Write

; 527  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 528  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$CLinkList@H@@@Z ENDP ; operator<<<int>
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@?$CLinkList@H@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T218274 = -52						; size = 4
$T218261 = -36						; size = 4
$T218242 = -16						; size = 4
_i$217432 = -12						; size = 4
_pData$217429 = -8					; size = 4
_iLength$ = -4						; size = 4
_kStream$ = 8						; size = 4
?Read@?$CLinkList@H@@QAEXAAVFDataStream@@@Z PROC	; CLinkList<int>::Read, COMDAT
; _this$ = ecx

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 470  : 	int iLength;
; 471  : 	kStream >>  iLength ;

	lea	eax, DWORD PTR _iLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 472  : 	clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$CLinkList@H@@QAEXXZ		; CLinkList<int>::clear

; 473  : 
; 474  : 	if ( iLength )

	cmp	DWORD PTR _iLength$[ebp], 0
	je	SHORT $LN5@Read

; 475  : 	{
; 476  : 		T* pData = FNEW(T, c_eCiv5GameplayDLL, 0);;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T218242[ebp], eax
	mov	ecx, DWORD PTR $T218242[ebp]
	mov	DWORD PTR _pData$217429[ebp], ecx

; 477  : 		for ( int i = 0; i < iLength; i++ )

	mov	DWORD PTR _i$217432[ebp], 0
	jmp	SHORT $LN3@Read
$LN2@Read:
	mov	edx, DWORD PTR _i$217432[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217432[ebp], edx
$LN3@Read:
	mov	eax, DWORD PTR _i$217432[ebp]
	cmp	eax, DWORD PTR _iLength$[ebp]
	jge	SHORT $LN1@Read

; 478  : 		{
; 479  : 			kStream >>  *pData ;

	mov	ecx, DWORD PTR _pData$217429[ebp]
	mov	DWORD PTR $T218261[ebp], ecx
	mov	edx, DWORD PTR $T218261[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 480  : 			insertAtEnd( *pData );

	mov	eax, DWORD PTR _pData$217429[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insertAtEnd@?$CLinkList@H@@QAEXABH@Z	; CLinkList<int>::insertAtEnd

; 481  : 		}

	jmp	SHORT $LN2@Read
$LN1@Read:

; 482  : 		SAFE_DELETE( pData );

	mov	ecx, DWORD PTR _pData$217429[ebp]
	mov	DWORD PTR $T218274[ebp], ecx
	mov	edx, DWORD PTR $T218274[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pData$217429[ebp], 0
$LN5@Read:

; 483  : 	}
; 484  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@?$CLinkList@H@@QAEXAAVFDataStream@@@Z ENDP	; CLinkList<int>::Read
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@?$CLinkList@H@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
tv66 = -20						; size = 4
_this$ = -16						; size = 4
$T218281 = -12						; size = 4
_iLength$ = -8						; size = 4
_pNode$ = -4						; size = 4
_kStream$ = 8						; size = 4
?Write@?$CLinkList@H@@QBEXAAVFDataStream@@@Z PROC	; CLinkList<int>::Write, COMDAT
; _this$ = ecx

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 489  : 	int iLength = getLength();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218281[ebp], ecx
	mov	edx, DWORD PTR $T218281[ebp]
	mov	DWORD PTR _iLength$[ebp], edx

; 490  : 	kStream <<  iLength ;

	lea	eax, DWORD PTR _iLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 491  : 	const CLLNode< T >* pNode = head();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pNode$[ebp], edx
$LN2@Write:

; 492  : 	while ( pNode )

	cmp	DWORD PTR _pNode$[ebp], 0
	je	SHORT $LN3@Write

; 493  : 	{
; 494  : 		kStream << pNode->m_data ;

	mov	eax, DWORD PTR _pNode$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 495  : 		pNode = next( pNode );

	cmp	DWORD PTR _pNode$[ebp], 0
	je	SHORT $LN15@Write
	mov	ecx, DWORD PTR _pNode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv66[ebp], edx
	jmp	SHORT $LN13@Write
$LN15@Write:
	mov	DWORD PTR tv66[ebp], 0
$LN13@Write:
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR _pNode$[ebp], eax

; 496  : 	}

	jmp	SHORT $LN2@Write
$LN3@Write:

; 497  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@?$CLinkList@H@@QBEXAAVFDataStream@@@Z ENDP	; CLinkList<int>::Write
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_G?$CLinkList@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
___flags$ = 8						; size = 4
??_G?$CLinkList@H@@UAEPAXI@Z PROC			; CLinkList<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CLinkList@H@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$CLinkList@H@@QAEXXZ		; CLinkList<int>::clear
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CLinkList@H@@UAEPAXI@Z ENDP			; CLinkList<int>::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$CLinkList@H@@QAEXXZ
_TEXT	SEGMENT
tv77 = -24						; size = 4
_this$ = -20						; size = 4
$T218324 = -16						; size = 4
$T218323 = -12						; size = 4
_pNextNode$ = -8					; size = 4
_pCurrNode$ = -4					; size = 4
?clear@?$CLinkList@H@@QAEXXZ PROC			; CLinkList<int>::clear, COMDAT
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 	CLLNode<tVARTYPE>* pCurrNode;
; 129  : 	CLLNode<tVARTYPE>* pNextNode;
; 130  : 
; 131  : 	pCurrNode = m_pHead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pCurrNode$[ebp], ecx
$LN2@clear:

; 132  : 	while (pCurrNode != NULL)

	cmp	DWORD PTR _pCurrNode$[ebp], 0
	je	SHORT $LN1@clear

; 133  : 	{
; 134  : 		pNextNode = pCurrNode->m_pNext;

	mov	edx, DWORD PTR _pCurrNode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _pNextNode$[ebp], eax

; 135  : 		SAFE_DELETE(pCurrNode);

	mov	ecx, DWORD PTR _pCurrNode$[ebp]
	mov	DWORD PTR $T218324[ebp], ecx
	mov	edx, DWORD PTR $T218324[ebp]
	mov	DWORD PTR $T218323[ebp], edx
	cmp	DWORD PTR $T218323[ebp], 0
	je	SHORT $LN7@clear
	push	1
	mov	eax, DWORD PTR $T218323[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T218323[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@clear
$LN7@clear:
	mov	DWORD PTR tv77[ebp], 0
$LN8@clear:
	mov	DWORD PTR _pCurrNode$[ebp], 0

; 136  : 		pCurrNode = pNextNode;

	mov	ecx, DWORD PTR _pNextNode$[ebp]
	mov	DWORD PTR _pCurrNode$[ebp], ecx

; 137  : 	}

	jmp	SHORT $LN2@clear
$LN1@clear:

; 138  : 
; 139  : 	m_iLength = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 140  : 
; 141  : 	m_pHead = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 142  : 	m_pTail = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 143  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$CLinkList@H@@QAEXXZ ENDP			; CLinkList<int>::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_G?$CLLNode@H@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CLLNode@H@@UAEPAXI@Z PROC				; CLLNode<int>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$CLLNode@H@@6B@
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CLLNode@H@@UAEPAXI@Z ENDP				; CLLNode<int>::`scalar deleting destructor'
_TEXT	ENDS
END
