; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllGame.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvGame1 DD 0dc39d22cH
	DW	012aeH
	DW	04395H
	DB	08aH
	DB	020H
	DB	0eeH
	DB	0f1H
	DB	045H
	DB	0a7H
	DB	07dH
	DB	0d0H
_guidICvGame2 DD 019ee7781H
	DW	0c484H
	DW	0414eH
	DB	097H
	DB	0c9H
	DB	0b7H
	DB	04eH
	DB	0bfH
	DB	04H
	DB	06eH
	DB	07eH
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllGame@@6B@				; CvDllGame::`vftable'
PUBLIC	??_7ICvGame2@@6B@				; ICvGame2::`vftable'
PUBLIC	??_7ICvGame1@@6B@				; ICvGame1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllGame@@QAE@PAVCvGame@@@Z			; CvDllGame::CvDllGame
PUBLIC	?QueryInterface@CvDllGame@@UAGPAXU_GUID@@@Z	; CvDllGame::QueryInterface
PUBLIC	?Destroy@CvDllGame@@EAGXXZ			; CvDllGame::Destroy
PUBLIC	?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z ; CvDllGame::GetPlayer
PUBLIC	?GetActivePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ ; CvDllGame::GetActivePlayer
PUBLIC	?GetActiveTeam@CvDllGame@@UAG?AW4TeamTypes@@XZ	; CvDllGame::GetActiveTeam
PUBLIC	?GetGameTurn@CvDllGame@@UBGHXZ			; CvDllGame::GetGameTurn
PUBLIC	?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z	; CvDllGame::ChangeNumGameTurnActive
PUBLIC	?CountHumanPlayersAlive@CvDllGame@@UBGHXZ	; CvDllGame::CountHumanPlayersAlive
PUBLIC	?CountNumHumanGameTurnActive@CvDllGame@@UAGHXZ	; CvDllGame::CountNumHumanGameTurnActive
PUBLIC	?CyclePlotUnits@CvDllGame@@UAG_NPAVICvPlot1@@_N1H@Z ; CvDllGame::CyclePlotUnits
PUBLIC	?CycleUnits@CvDllGame@@UAGX_N00@Z		; CvDllGame::CycleUnits
PUBLIC	?DoGameStarted@CvDllGame@@UAGXXZ		; CvDllGame::DoGameStarted
PUBLIC	?EndTurnTimerReset@CvDllGame@@UAGXXZ		; CvDllGame::EndTurnTimerReset
PUBLIC	?EndTurnTimerSemaphoreDecrement@CvDllGame@@UAGXXZ ; CvDllGame::EndTurnTimerSemaphoreDecrement
PUBLIC	?EndTurnTimerSemaphoreIncrement@CvDllGame@@UAGXXZ ; CvDllGame::EndTurnTimerSemaphoreIncrement
PUBLIC	?GetAction@CvDllGame@@UAGHH_N00@Z		; CvDllGame::GetAction
PUBLIC	?IsAction@CvDllGame@@UAGHH_N00@Z		; CvDllGame::IsAction
PUBLIC	?GetBarbarianCampImprovementType@CvDllGame@@UAG?AW4ImprovementTypes@@XZ ; CvDllGame::GetBarbarianCampImprovementType
PUBLIC	?GetElapsedGameTurns@CvDllGame@@UBGHXZ		; CvDllGame::GetElapsedGameTurns
PUBLIC	?GetFOW@CvDllGame@@UAG_NXZ			; CvDllGame::GetFOW
PUBLIC	?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ ; CvDllGame::GetGameDeals
PUBLIC	?GetGameSpeedType@CvDllGame@@UBG?AW4GameSpeedTypes@@XZ ; CvDllGame::GetGameSpeedType
PUBLIC	?GetGameState@CvDllGame@@UAG?AW4GameStateTypes@@XZ ; CvDllGame::GetGameState
PUBLIC	?GetHandicapType@CvDllGame@@UBG?AW4HandicapTypes@@XZ ; CvDllGame::GetHandicapType
PUBLIC	?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ ; CvDllGame::GetRandomNumberGenerator
PUBLIC	?GetJonRandNum@CvDllGame@@UAGHHPBD@Z		; CvDllGame::GetJonRandNum
PUBLIC	?GetMaxTurns@CvDllGame@@UBGHXZ			; CvDllGame::GetMaxTurns
PUBLIC	?GetNumGameTurnActive@CvDllGame@@UAGHXZ		; CvDllGame::GetNumGameTurnActive
PUBLIC	?GetPausePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ ; CvDllGame::GetPausePlayer
PUBLIC	?GetPbemTurnSent@CvDllGame@@UBG_NXZ		; CvDllGame::GetPbemTurnSent
PUBLIC	?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z ; CvDllGame::GetPlotUnit
PUBLIC	?GetVariableCitySizeFromPopulation@CvDllGame@@UAGII@Z ; CvDllGame::GetVariableCitySizeFromPopulation
PUBLIC	?GetVictory@CvDllGame@@UBG?AW4VictoryTypes@@XZ	; CvDllGame::GetVictory
PUBLIC	?GetVotesNeededForDiploVictory@CvDllGame@@UBGHXZ ; CvDllGame::GetVotesNeededForDiploVictory
PUBLIC	?GetWinner@CvDllGame@@UBG?AW4TeamTypes@@XZ	; CvDllGame::GetWinner
PUBLIC	?GetWinningTurn@CvDllGame@@UBGHXZ		; CvDllGame::GetWinningTurn
PUBLIC	?HandleAction@CvDllGame@@UAGXH@Z		; CvDllGame::HandleAction
PUBLIC	?HasTurnTimerExpired@CvDllGame@@UAG_NXZ		; CvDllGame::HasTurnTimerExpired
PUBLIC	?Init@CvDllGame@@UAGXW4HandicapTypes@@@Z	; CvDllGame::Init
PUBLIC	?Init2@CvDllGame@@UAG_NXZ			; CvDllGame::Init2
PUBLIC	?InitScoreCalculation@CvDllGame@@UAGXXZ		; CvDllGame::InitScoreCalculation
PUBLIC	?InitTacticalAnalysisMap@CvDllGame@@UAGXH@Z	; CvDllGame::InitTacticalAnalysisMap
PUBLIC	?IsCityScreenBlocked@CvDllGame@@UAG_NXZ		; CvDllGame::IsCityScreenBlocked
PUBLIC	?CanOpenCityScreen@CvDllGame@@UAG_NW4PlayerTypes@@PAVICvCity1@@@Z ; CvDllGame::CanOpenCityScreen
PUBLIC	?IsDebugMode@CvDllGame@@UBG_NXZ			; CvDllGame::IsDebugMode
PUBLIC	?IsFinalInitialized@CvDllGame@@UBG_NXZ		; CvDllGame::IsFinalInitialized
PUBLIC	?IsGameMultiPlayer@CvDllGame@@UBG_NXZ		; CvDllGame::IsGameMultiPlayer
PUBLIC	?IsHotSeat@CvDllGame@@UBG_NXZ			; CvDllGame::IsHotSeat
PUBLIC	?IsMPOption@CvDllGame@@UBE_NW4MultiplayerOptionTypes@@@Z ; CvDllGame::IsMPOption
PUBLIC	?IsNetworkMultiPlayer@CvDllGame@@UBG_NXZ	; CvDllGame::IsNetworkMultiPlayer
PUBLIC	?IsOption@CvDllGame@@UBE_NW4GameOptionTypes@@@Z	; CvDllGame::IsOption
PUBLIC	?IsPaused@CvDllGame@@UAG_NXZ			; CvDllGame::IsPaused
PUBLIC	?IsPbem@CvDllGame@@UBG_NXZ			; CvDllGame::IsPbem
PUBLIC	?IsTeamGame@CvDllGame@@UBG_NXZ			; CvDllGame::IsTeamGame
PUBLIC	?LogGameState@CvDllGame@@UAGX_N@Z		; CvDllGame::LogGameState
PUBLIC	?ResetTurnTimer@CvDllGame@@UAGXXZ		; CvDllGame::ResetTurnTimer
PUBLIC	?SelectAll@CvDllGame@@UAGXPAVICvPlot1@@@Z	; CvDllGame::SelectAll
PUBLIC	?SelectGroup@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z	; CvDllGame::SelectGroup
PUBLIC	?SelectionListIgnoreBuildingDefense@CvDllGame@@UAG_NXZ ; CvDllGame::SelectionListIgnoreBuildingDefense
PUBLIC	?SelectionListMove@CvDllGame@@UAGXPAVICvPlot1@@_N@Z ; CvDllGame::SelectionListMove
PUBLIC	?SelectSettler@CvDllGame@@UAGXXZ		; CvDllGame::SelectSettler
PUBLIC	?SelectUnit@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z	; CvDllGame::SelectUnit
PUBLIC	?SendPlayerOptions@CvDllGame@@UAGX_N@Z		; CvDllGame::SendPlayerOptions
PUBLIC	?SetDebugMode@CvDllGame@@UAGX_N@Z		; CvDllGame::SetDebugMode
PUBLIC	?SetFinalInitialized@CvDllGame@@UAGX_N@Z	; CvDllGame::SetFinalInitialized
PUBLIC	?SetInitialTime@CvDllGame@@UAGXI@Z		; CvDllGame::SetInitialTime
PUBLIC	?SetMPOption@CvDllGame@@UAEXW4MultiplayerOptionTypes@@_N@Z ; CvDllGame::SetMPOption
PUBLIC	?SetPausePlayer@CvDllGame@@UAGXW4PlayerTypes@@@Z ; CvDllGame::SetPausePlayer
PUBLIC	?SetTimeStr@CvDllGame@@UAGXPADH_N@Z		; CvDllGame::SetTimeStr
PUBLIC	?TunerEverConnected@CvDllGame@@UBG_NXZ		; CvDllGame::TunerEverConnected
PUBLIC	?Uninit@CvDllGame@@UAGXXZ			; CvDllGame::Uninit
PUBLIC	?UnitIsMoving@CvDllGame@@UAGXXZ			; CvDllGame::UnitIsMoving
PUBLIC	?Update@CvDllGame@@UAGXXZ			; CvDllGame::Update
PUBLIC	?UpdateSelectionList@CvDllGame@@UAGXXZ		; CvDllGame::UpdateSelectionList
PUBLIC	?UpdateTestEndTurn@CvDllGame@@UAGXXZ		; CvDllGame::UpdateTestEndTurn
PUBLIC	?Read@CvDllGame@@UAGXAAVFDataStream@@@Z		; CvDllGame::Read
PUBLIC	?Write@CvDllGame@@UBGXAAVFDataStream@@@Z	; CvDllGame::Write
PUBLIC	?ReadSupportingClassData@CvDllGame@@UAGXAAVFDataStream@@@Z ; CvDllGame::ReadSupportingClassData
PUBLIC	?WriteSupportingClassData@CvDllGame@@UBGXAAVFDataStream@@@Z ; CvDllGame::WriteSupportingClassData
PUBLIC	?WriteReplay@CvDllGame@@UBGXAAVFDataStream@@@Z	; CvDllGame::WriteReplay
PUBLIC	?CanMoveUnitTo@CvDllGame@@UBG_NPAVICvUnit1@@PAVICvPlot1@@@Z ; CvDllGame::CanMoveUnitTo
PUBLIC	?HasTurnTimerExpired@CvDllGame@@UAG_NW4PlayerTypes@@@Z ; CvDllGame::HasTurnTimerExpired
PUBLIC	?TurnTimerSync@CvDllGame@@UAGXMM@Z		; CvDllGame::TurnTimerSync
PUBLIC	?GetTurnTimerData@CvDllGame@@UAGXAAM0@Z		; CvDllGame::GetTurnTimerData
PUBLIC	?NetMessageStaticsReset@CvDllGame@@UAGXXZ	; CvDllGame::NetMessageStaticsReset
PUBLIC	?SetLastTurnAICivsProcessed@CvDllGame@@UAGXXZ	; CvDllGame::SetLastTurnAICivsProcessed
PUBLIC	?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z	; CvDllGame::GetGreatWorkAudio
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllGame@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_7CvDllGame@@6B@ DD FLAT:?QueryInterface@CvDllGame@@UAGPAXU_GUID@@@Z ; CvDllGame::`vftable'
	DD	FLAT:?Destroy@CvDllGame@@EAGXXZ
	DD	FLAT:?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z
	DD	FLAT:?GetActivePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ
	DD	FLAT:?GetActiveTeam@CvDllGame@@UAG?AW4TeamTypes@@XZ
	DD	FLAT:?GetGameTurn@CvDllGame@@UBGHXZ
	DD	FLAT:?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z
	DD	FLAT:?CountHumanPlayersAlive@CvDllGame@@UBGHXZ
	DD	FLAT:?CountNumHumanGameTurnActive@CvDllGame@@UAGHXZ
	DD	FLAT:?CyclePlotUnits@CvDllGame@@UAG_NPAVICvPlot1@@_N1H@Z
	DD	FLAT:?CycleUnits@CvDllGame@@UAGX_N00@Z
	DD	FLAT:?DoGameStarted@CvDllGame@@UAGXXZ
	DD	FLAT:?EndTurnTimerReset@CvDllGame@@UAGXXZ
	DD	FLAT:?EndTurnTimerSemaphoreDecrement@CvDllGame@@UAGXXZ
	DD	FLAT:?EndTurnTimerSemaphoreIncrement@CvDllGame@@UAGXXZ
	DD	FLAT:?GetAction@CvDllGame@@UAGHH_N00@Z
	DD	FLAT:?IsAction@CvDllGame@@UAGHH_N00@Z
	DD	FLAT:?GetBarbarianCampImprovementType@CvDllGame@@UAG?AW4ImprovementTypes@@XZ
	DD	FLAT:?GetElapsedGameTurns@CvDllGame@@UBGHXZ
	DD	FLAT:?GetFOW@CvDllGame@@UAG_NXZ
	DD	FLAT:?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ
	DD	FLAT:?GetGameSpeedType@CvDllGame@@UBG?AW4GameSpeedTypes@@XZ
	DD	FLAT:?GetGameState@CvDllGame@@UAG?AW4GameStateTypes@@XZ
	DD	FLAT:?GetHandicapType@CvDllGame@@UBG?AW4HandicapTypes@@XZ
	DD	FLAT:?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ
	DD	FLAT:?GetJonRandNum@CvDllGame@@UAGHHPBD@Z
	DD	FLAT:?GetMaxTurns@CvDllGame@@UBGHXZ
	DD	FLAT:?GetNumGameTurnActive@CvDllGame@@UAGHXZ
	DD	FLAT:?GetPausePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ
	DD	FLAT:?GetPbemTurnSent@CvDllGame@@UBG_NXZ
	DD	FLAT:?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z
	DD	FLAT:?GetVariableCitySizeFromPopulation@CvDllGame@@UAGII@Z
	DD	FLAT:?GetVictory@CvDllGame@@UBG?AW4VictoryTypes@@XZ
	DD	FLAT:?GetVotesNeededForDiploVictory@CvDllGame@@UBGHXZ
	DD	FLAT:?GetWinner@CvDllGame@@UBG?AW4TeamTypes@@XZ
	DD	FLAT:?GetWinningTurn@CvDllGame@@UBGHXZ
	DD	FLAT:?HandleAction@CvDllGame@@UAGXH@Z
	DD	FLAT:?HasTurnTimerExpired@CvDllGame@@UAG_NXZ
	DD	FLAT:?Init@CvDllGame@@UAGXW4HandicapTypes@@@Z
	DD	FLAT:?Init2@CvDllGame@@UAG_NXZ
	DD	FLAT:?InitScoreCalculation@CvDllGame@@UAGXXZ
	DD	FLAT:?InitTacticalAnalysisMap@CvDllGame@@UAGXH@Z
	DD	FLAT:?IsCityScreenBlocked@CvDllGame@@UAG_NXZ
	DD	FLAT:?CanOpenCityScreen@CvDllGame@@UAG_NW4PlayerTypes@@PAVICvCity1@@@Z
	DD	FLAT:?IsDebugMode@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsFinalInitialized@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsGameMultiPlayer@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsHotSeat@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsMPOption@CvDllGame@@UBE_NW4MultiplayerOptionTypes@@@Z
	DD	FLAT:?IsNetworkMultiPlayer@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsOption@CvDllGame@@UBE_NW4GameOptionTypes@@@Z
	DD	FLAT:?IsPaused@CvDllGame@@UAG_NXZ
	DD	FLAT:?IsPbem@CvDllGame@@UBG_NXZ
	DD	FLAT:?IsTeamGame@CvDllGame@@UBG_NXZ
	DD	FLAT:?LogGameState@CvDllGame@@UAGX_N@Z
	DD	FLAT:?ResetTurnTimer@CvDllGame@@UAGXXZ
	DD	FLAT:?SelectAll@CvDllGame@@UAGXPAVICvPlot1@@@Z
	DD	FLAT:?SelectGroup@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z
	DD	FLAT:?SelectionListIgnoreBuildingDefense@CvDllGame@@UAG_NXZ
	DD	FLAT:?SelectionListMove@CvDllGame@@UAGXPAVICvPlot1@@_N@Z
	DD	FLAT:?SelectSettler@CvDllGame@@UAGXXZ
	DD	FLAT:?SelectUnit@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z
	DD	FLAT:?SendPlayerOptions@CvDllGame@@UAGX_N@Z
	DD	FLAT:?SetDebugMode@CvDllGame@@UAGX_N@Z
	DD	FLAT:?SetFinalInitialized@CvDllGame@@UAGX_N@Z
	DD	FLAT:?SetInitialTime@CvDllGame@@UAGXI@Z
	DD	FLAT:?SetMPOption@CvDllGame@@UAEXW4MultiplayerOptionTypes@@_N@Z
	DD	FLAT:?SetPausePlayer@CvDllGame@@UAGXW4PlayerTypes@@@Z
	DD	FLAT:?SetTimeStr@CvDllGame@@UAGXPADH_N@Z
	DD	FLAT:?TunerEverConnected@CvDllGame@@UBG_NXZ
	DD	FLAT:?Uninit@CvDllGame@@UAGXXZ
	DD	FLAT:?UnitIsMoving@CvDllGame@@UAGXXZ
	DD	FLAT:?Update@CvDllGame@@UAGXXZ
	DD	FLAT:?UpdateSelectionList@CvDllGame@@UAGXXZ
	DD	FLAT:?UpdateTestEndTurn@CvDllGame@@UAGXXZ
	DD	FLAT:?Read@CvDllGame@@UAGXAAVFDataStream@@@Z
	DD	FLAT:?Write@CvDllGame@@UBGXAAVFDataStream@@@Z
	DD	FLAT:?ReadSupportingClassData@CvDllGame@@UAGXAAVFDataStream@@@Z
	DD	FLAT:?WriteSupportingClassData@CvDllGame@@UBGXAAVFDataStream@@@Z
	DD	FLAT:?WriteReplay@CvDllGame@@UBGXAAVFDataStream@@@Z
	DD	FLAT:?CanMoveUnitTo@CvDllGame@@UBG_NPAVICvUnit1@@PAVICvPlot1@@@Z
	DD	FLAT:?HasTurnTimerExpired@CvDllGame@@UAG_NW4PlayerTypes@@@Z
	DD	FLAT:?TurnTimerSync@CvDllGame@@UAGXMM@Z
	DD	FLAT:?GetTurnTimerData@CvDllGame@@UAGXAAM0@Z
	DD	FLAT:?NetMessageStaticsReset@CvDllGame@@UAGXXZ
	DD	FLAT:?SetLastTurnAICivsProcessed@CvDllGame@@UAGXXZ
	DD	FLAT:?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z
CONST	ENDS
;	COMDAT ??_7ICvGame2@@6B@
CONST	SEGMENT
??_7ICvGame2@@6B@ DD FLAT:__purecall			; ICvGame2::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvGame1@@6B@
CONST	SEGMENT
??_7ICvGame1@@6B@ DD FLAT:__purecall			; ICvGame1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllgame.cpp
CONST	ENDS
;	COMDAT ??0CvDllGame@@QAE@PAVCvGame@@@Z
_TEXT	SEGMENT
tv86 = -16						; size = 4
_this$ = -12						; size = 4
$T219185 = -8						; size = 4
$T219181 = -4						; size = 4
_pGame$ = 8						; size = 4
??0CvDllGame@@QAE@PAVCvGame@@@Z PROC			; CvDllGame::CvDllGame, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvGame1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7ICvGame2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllGame@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pGame$[ebp]
	mov	DWORD PTR [edx+8], eax

; 25   : 	if(gDLL)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR $T219181[ebp], ecx
	cmp	DWORD PTR $T219181[ebp], 0
	je	SHORT $LN2@CvDllGame

; 26   : 		gDLL->GetGameCoreLock();

	mov	edx, DWORD PTR $T219185[ebp]
	mov	DWORD PTR tv86[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv86[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx+912]
	call	eax
$LN2@CvDllGame:

; 27   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllGame@@QAE@PAVCvGame@@@Z ENDP			; CvDllGame::CvDllGame
_TEXT	ENDS
PUBLIC	??1CvDllGame@@QAE@XZ				; CvDllGame::~CvDllGame
; Function compile flags: /Odtp
;	COMDAT ??1CvDllGame@@QAE@XZ
_TEXT	SEGMENT
tv79 = -16						; size = 4
_this$ = -12						; size = 4
$T219195 = -8						; size = 4
$T219191 = -4						; size = 4
??1CvDllGame@@QAE@XZ PROC				; CvDllGame::~CvDllGame, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllGame@@6B@

; 31   : 	if(gDLL)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR $T219191[ebp], ecx
	cmp	DWORD PTR $T219191[ebp], 0
	je	SHORT $LN2@CvDllGame@2

; 32   : 		gDLL->ReleaseGameCoreLock();

	mov	edx, DWORD PTR $T219195[ebp]
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx+916]
	call	eax
$LN2@CvDllGame@2:

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllGame@@QAE@XZ ENDP				; CvDllGame::~CvDllGame
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllGame@@QAEIXZ		; CvDllGame::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllGame@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv134 = -128						; size = 4
tv197 = -124						; size = 4
tv129 = -120						; size = 4
tv173 = -116						; size = 4
tv92 = -112						; size = 4
tv149 = -108						; size = 4
$T219204 = -104						; size = 16
$T219203 = -88						; size = 16
$T219202 = -72						; size = 16
$T219201 = -56						; size = 16
$T219200 = -40						; size = 16
$T219199 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllGame@@UAGPAXU_GUID@@@Z PROC	; CvDllGame::QueryInterface, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi

; 37   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 38   : 		guidInterface == ICvGame1::GetInterfaceId()	 ||
; 39   : 		guidInterface == ICvGame2::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T219200[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T219200[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T219200[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T219200[ebp+12], eax
	mov	ecx, DWORD PTR $T219200[ebp]
	mov	DWORD PTR $T219199[ebp], ecx
	mov	edx, DWORD PTR $T219200[ebp+4]
	mov	DWORD PTR $T219199[ebp+4], edx
	mov	eax, DWORD PTR $T219200[ebp+8]
	mov	DWORD PTR $T219199[ebp+8], eax
	mov	ecx, DWORD PTR $T219200[ebp+12]
	mov	DWORD PTR $T219199[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219199[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv149[ebp], edx
	repe cmpsb
	je	SHORT $LN23@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv149[ebp], eax
$LN23@QueryInter:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR tv92[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv92[ebp], 0
	sete	dl
	test	edx, edx
	jne	$LN1@QueryInter
	mov	eax, DWORD PTR _guidICvGame1
	mov	DWORD PTR $T219202[ebp], eax
	mov	ecx, DWORD PTR _guidICvGame1+4
	mov	DWORD PTR $T219202[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvGame1+8
	mov	DWORD PTR $T219202[ebp+8], edx
	mov	eax, DWORD PTR _guidICvGame1+12
	mov	DWORD PTR $T219202[ebp+12], eax
	mov	ecx, DWORD PTR $T219202[ebp]
	mov	DWORD PTR $T219201[ebp], ecx
	mov	edx, DWORD PTR $T219202[ebp+4]
	mov	DWORD PTR $T219201[ebp+4], edx
	mov	eax, DWORD PTR $T219202[ebp+8]
	mov	DWORD PTR $T219201[ebp+8], eax
	mov	ecx, DWORD PTR $T219202[ebp+12]
	mov	DWORD PTR $T219201[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219201[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv173[ebp], edx
	repe cmpsb
	je	SHORT $LN24@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv173[ebp], eax
$LN24@QueryInter:
	mov	ecx, DWORD PTR tv173[ebp]
	mov	DWORD PTR tv129[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv129[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvGame2
	mov	DWORD PTR $T219204[ebp], eax
	mov	ecx, DWORD PTR _guidICvGame2+4
	mov	DWORD PTR $T219204[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvGame2+8
	mov	DWORD PTR $T219204[ebp+8], edx
	mov	eax, DWORD PTR _guidICvGame2+12
	mov	DWORD PTR $T219204[ebp+12], eax
	mov	ecx, DWORD PTR $T219204[ebp]
	mov	DWORD PTR $T219203[ebp], ecx
	mov	edx, DWORD PTR $T219204[ebp+4]
	mov	DWORD PTR $T219203[ebp+4], edx
	mov	eax, DWORD PTR $T219204[ebp+8]
	mov	DWORD PTR $T219203[ebp+8], eax
	mov	ecx, DWORD PTR $T219204[ebp+12]
	mov	DWORD PTR $T219203[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219203[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv197[ebp], edx
	repe cmpsb
	je	SHORT $LN25@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv197[ebp], eax
$LN25@QueryInter:
	mov	ecx, DWORD PTR tv197[ebp]
	mov	DWORD PTR tv134[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv134[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 40   : 	{
; 41   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllGame@@QAEIXZ	; CvDllGame::IncrementReference

; 42   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 43   : 	}
; 44   : 
; 45   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 46   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllGame@@UAGPAXU_GUID@@@Z ENDP	; CvDllGame::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllGame@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllGame@@QAEIXZ PROC		; CvDllGame::IncrementReference, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 51   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllGame@@QAEIXZ ENDP		; CvDllGame::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllGame@@SAXPAX@Z				; CvDllGame::operator delete
PUBLIC	?DecrementReference@CvDllGame@@QAEIXZ		; CvDllGame::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllGame@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T219249 = -8						; size = 4
$T219248 = -4						; size = 4
?DecrementReference@CvDllGame@@QAEIXZ PROC		; CvDllGame::DecrementReference, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 57   : 	{
; 58   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T219249[ebp], ecx
	mov	edx, DWORD PTR $T219249[ebp]
	mov	DWORD PTR $T219248[ebp], edx
	cmp	DWORD PTR $T219248[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T219248[ebp]
	call	??1CvDllGame@@QAE@XZ			; CvDllGame::~CvDllGame
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T219248[ebp]
	push	ecx
	call	??3CvDllGame@@SAXPAX@Z			; CvDllGame::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T219248[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 59   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 60   : 	}
; 61   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 62   : 	{
; 63   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 64   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 65   : 	}
; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllGame@@QAEIXZ ENDP		; CvDllGame::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllGame@@QAEIXZ		; CvDllGame::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllGame@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllGame@@QAEIXZ PROC		; CvDllGame::GetReferenceCount, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 71   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllGame@@QAEIXZ ENDP		; CvDllGame::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllGame@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllGame@@EAGXXZ PROC				; CvDllGame::Destroy, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp

; 75   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllGame@@QAEIXZ	; CvDllGame::DecrementReference

; 76   : }

	pop	ebp
	ret	4
?Destroy@CvDllGame@@EAGXXZ ENDP				; CvDllGame::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllGame@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllGame@@SAXPAX@Z PROC				; CvDllGame::operator delete, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp

; 80   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 81   : }

	pop	ebp
	ret	0
??3CvDllGame@@SAXPAX@Z ENDP				; CvDllGame::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllGame@@SAPAXI@Z				; CvDllGame::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllGame@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllGame@@SAPAXI@Z PROC				; CvDllGame::operator new, COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp

; 85   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 86   : }

	pop	ebp
	ret	0
??2CvDllGame@@SAPAXI@Z ENDP				; CvDllGame::operator new
_TEXT	ENDS
EXTRN	??3CvDllPlayer@@SAXPAX@Z:PROC			; CvDllPlayer::operator delete
EXTRN	??0CvDllPlayer@@QAE@PAVCvPlayerAI@@@Z:PROC	; CvDllPlayer::CvDllPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	??2CvDllPlayer@@SAPAXI@Z:PROC			; CvDllPlayer::operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
xdata$x	SEGMENT
__unwindtable$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z$0
__ehfuncinfo$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllgame.cpp
xdata$x	ENDS
;	COMDAT ?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
tv77 = -28						; size = 4
$T219274 = -24						; size = 4
$T219267 = -20						; size = 4
$T219266 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ePlayer$ = 12						; size = 4
?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z PROC ; CvDllGame::GetPlayer, COMDAT

; 89   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 90   : 	return new CvDllPlayer(&CvPlayerAI::getPlayer(ePlayer));

	push	12					; 0000000cH
	call	??2CvDllPlayer@@SAPAXI@Z		; CvDllPlayer::operator new
	add	esp, 4
	mov	DWORD PTR $T219267[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219267[ebp], 0
	je	SHORT $LN3@GetPlayer
	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T219274[ebp], eax
	mov	ecx, DWORD PTR $T219274[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T219267[ebp]
	call	??0CvDllPlayer@@QAE@PAVCvPlayerAI@@@Z	; CvDllPlayer::CvDllPlayer
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@GetPlayer
$LN3@GetPlayer:
	mov	DWORD PTR tv77[ebp], 0
$LN4@GetPlayer:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T219266[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T219266[ebp]

; 91   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z$0:
	mov	eax, DWORD PTR $T219267[ebp]
	push	eax
	call	??3CvDllPlayer@@SAXPAX@Z		; CvDllPlayer::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlayer@CvDllGame@@UAGPAVICvPlayer1@@W4PlayerTypes@@@Z ENDP ; CvDllGame::GetPlayer
PUBLIC	?GetInstance@CvDllGame@@QAEPAVCvGame@@XZ	; CvDllGame::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@CvDllGame@@QAEPAVCvGame@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstance@CvDllGame@@QAEPAVCvGame@@XZ PROC		; CvDllGame::GetInstance, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	return m_pGame;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 96   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CvDllGame@@QAEPAVCvGame@@XZ ENDP		; CvDllGame::GetInstance
_TEXT	ENDS
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
; Function compile flags: /Odtp
;	COMDAT ?GetActivePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetActivePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ PROC	; CvDllGame::GetActivePlayer, COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp

; 100  : 	return m_pGame->getActivePlayer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer

; 101  : }

	pop	ebp
	ret	4
?GetActivePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ ENDP	; CvDllGame::GetActivePlayer
_TEXT	ENDS
EXTRN	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ:PROC ; CvGame::getActiveTeam
; Function compile flags: /Odtp
;	COMDAT ?GetActiveTeam@CvDllGame@@UAG?AW4TeamTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetActiveTeam@CvDllGame@@UAG?AW4TeamTypes@@XZ PROC	; CvDllGame::GetActiveTeam, COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp

; 105  : 	return m_pGame->getActiveTeam();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ ; CvGame::getActiveTeam

; 106  : }

	pop	ebp
	ret	4
?GetActiveTeam@CvDllGame@@UAG?AW4TeamTypes@@XZ ENDP	; CvDllGame::GetActiveTeam
_TEXT	ENDS
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
; Function compile flags: /Odtp
;	COMDAT ?GetGameTurn@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetGameTurn@CvDllGame@@UBGHXZ PROC			; CvDllGame::GetGameTurn, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp

; 110  : 	return m_pGame->getGameTurn();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn

; 111  : }

	pop	ebp
	ret	4
?GetGameTurn@CvDllGame@@UBGHXZ ENDP			; CvDllGame::GetGameTurn
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?changeNumGameTurnActive@CvGame@@QAEXHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvGame::changeNumGameTurnActive
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z$0
__ehfuncinfo$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z
_TEXT	SEGMENT
tv70 = -60						; size = 4
tv85 = -53						; size = 1
tv82 = -52						; size = 4
tv79 = -48						; size = 4
_strWhy$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_iChange$ = 12						; size = 4
_why$ = 16						; size = 4
?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z PROC	; CvDllGame::ChangeNumGameTurnActive, COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 115  : 	std::string strWhy;

	lea	ecx, DWORD PTR _strWhy$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 	if(why != NULL && strlen(why) > 0)

	cmp	DWORD PTR _why$[ebp], 0
	je	SHORT $LN1@ChangeNumG
	mov	eax, DWORD PTR _why$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
$LL5@ChangeNumG:
	mov	edx, DWORD PTR tv79[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv85[ebp], al
	add	DWORD PTR tv79[ebp], 1
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL5@ChangeNumG
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	je	SHORT $LN1@ChangeNumG

; 117  : 		strWhy = why;

	mov	edx, DWORD PTR _why$[ebp]
	push	edx
	lea	ecx, DWORD PTR _strWhy$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@ChangeNumG:

; 118  : 
; 119  : 	m_pGame->changeNumGameTurnActive(iChange, strWhy);

	lea	eax, DWORD PTR _strWhy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iChange$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?changeNumGameTurnActive@CvGame@@QAEXHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvGame::changeNumGameTurnActive

; 120  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strWhy$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z$0:
	lea	ecx, DWORD PTR _strWhy$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ChangeNumGameTurnActive@CvDllGame@@UAGXHPBD@Z ENDP	; CvDllGame::ChangeNumGameTurnActive
EXTRN	?countHumanPlayersAlive@CvGame@@QBEHXZ:PROC	; CvGame::countHumanPlayersAlive
; Function compile flags: /Odtp
;	COMDAT ?CountHumanPlayersAlive@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?CountHumanPlayersAlive@CvDllGame@@UBGHXZ PROC		; CvDllGame::CountHumanPlayersAlive, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp

; 124  : 	return m_pGame->countHumanPlayersAlive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?countHumanPlayersAlive@CvGame@@QBEHXZ	; CvGame::countHumanPlayersAlive

; 125  : }

	pop	ebp
	ret	4
?CountHumanPlayersAlive@CvDllGame@@UBGHXZ ENDP		; CvDllGame::CountHumanPlayersAlive
_TEXT	ENDS
EXTRN	?countNumHumanGameTurnActive@CvGame@@QAEHXZ:PROC ; CvGame::countNumHumanGameTurnActive
; Function compile flags: /Odtp
;	COMDAT ?CountNumHumanGameTurnActive@CvDllGame@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?CountNumHumanGameTurnActive@CvDllGame@@UAGHXZ PROC	; CvDllGame::CountNumHumanGameTurnActive, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp

; 129  : 	return m_pGame->countNumHumanGameTurnActive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?countNumHumanGameTurnActive@CvGame@@QAEHXZ ; CvGame::countNumHumanGameTurnActive

; 130  : }

	pop	ebp
	ret	4
?CountNumHumanGameTurnActive@CvDllGame@@UAGHXZ ENDP	; CvDllGame::CountNumHumanGameTurnActive
_TEXT	ENDS
EXTRN	?cyclePlotUnits@CvGame@@QAE_NPAVCvPlot@@_N1H@Z:PROC ; CvGame::cyclePlotUnits
EXTRN	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ:PROC	; CvDllPlot::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?CyclePlotUnits@CvDllGame@@UAG_NPAVICvPlot1@@_N1H@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkPlot$ = -4						; size = 4
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
_bForward$ = 16						; size = 1
_bAuto$ = 20						; size = 1
_iCount$ = 24						; size = 4
?CyclePlotUnits@CvDllGame@@UAG_NPAVICvPlot1@@_N1H@Z PROC ; CvDllGame::CyclePlotUnits, COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 134  : 	CvPlot* pkPlot = (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN3@CyclePlotU
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@CyclePlotU
$LN3@CyclePlotU:
	mov	DWORD PTR tv71[ebp], 0
$LN4@CyclePlotU:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkPlot$[ebp], eax

; 135  : 	return m_pGame->cyclePlotUnits(pkPlot, bForward, bAuto, iCount);

	mov	ecx, DWORD PTR _iCount$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bAuto$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bForward$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?cyclePlotUnits@CvGame@@QAE_NPAVCvPlot@@_N1H@Z ; CvGame::cyclePlotUnits

; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CyclePlotUnits@CvDllGame@@UAG_NPAVICvPlot1@@_N1H@Z ENDP ; CvDllGame::CyclePlotUnits
_TEXT	ENDS
EXTRN	?cycleUnits@CvGame@@QAEX_N00@Z:PROC		; CvGame::cycleUnits
; Function compile flags: /Odtp
;	COMDAT ?CycleUnits@CvDllGame@@UAGX_N00@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bClear$ = 12						; size = 1
_bForward$ = 16						; size = 1
_bWorkers$ = 20						; size = 1
?CycleUnits@CvDllGame@@UAGX_N00@Z PROC			; CvDllGame::CycleUnits, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  : 	m_pGame->cycleUnits(bClear, bForward, bWorkers);

	movzx	eax, BYTE PTR _bWorkers$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bForward$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bClear$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?cycleUnits@CvGame@@QAEX_N00@Z		; CvGame::cycleUnits

; 141  : }

	pop	ebp
	ret	16					; 00000010H
?CycleUnits@CvDllGame@@UAGX_N00@Z ENDP			; CvDllGame::CycleUnits
_TEXT	ENDS
EXTRN	?DoGameStarted@CvGame@@QAEXXZ:PROC		; CvGame::DoGameStarted
; Function compile flags: /Odtp
;	COMDAT ?DoGameStarted@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?DoGameStarted@CvDllGame@@UAGXXZ PROC			; CvDllGame::DoGameStarted, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  : 	m_pGame->DoGameStarted();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?DoGameStarted@CvGame@@QAEXXZ		; CvGame::DoGameStarted

; 146  : }

	pop	ebp
	ret	4
?DoGameStarted@CvDllGame@@UAGXXZ ENDP			; CvDllGame::DoGameStarted
_TEXT	ENDS
EXTRN	?endTurnTimerReset@CvGame@@QAEXXZ:PROC		; CvGame::endTurnTimerReset
; Function compile flags: /Odtp
;	COMDAT ?EndTurnTimerReset@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndTurnTimerReset@CvDllGame@@UAGXXZ PROC		; CvDllGame::EndTurnTimerReset, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp

; 150  : 	m_pGame->endTurnTimerReset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?endTurnTimerReset@CvGame@@QAEXXZ	; CvGame::endTurnTimerReset

; 151  : }

	pop	ebp
	ret	4
?EndTurnTimerReset@CvDllGame@@UAGXXZ ENDP		; CvDllGame::EndTurnTimerReset
_TEXT	ENDS
EXTRN	?endTurnTimerSemaphoreDecrement@CvGame@@QAEXXZ:PROC ; CvGame::endTurnTimerSemaphoreDecrement
; Function compile flags: /Odtp
;	COMDAT ?EndTurnTimerSemaphoreDecrement@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndTurnTimerSemaphoreDecrement@CvDllGame@@UAGXXZ PROC	; CvDllGame::EndTurnTimerSemaphoreDecrement, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp

; 155  : 	m_pGame->endTurnTimerSemaphoreDecrement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?endTurnTimerSemaphoreDecrement@CvGame@@QAEXXZ ; CvGame::endTurnTimerSemaphoreDecrement

; 156  : }

	pop	ebp
	ret	4
?EndTurnTimerSemaphoreDecrement@CvDllGame@@UAGXXZ ENDP	; CvDllGame::EndTurnTimerSemaphoreDecrement
_TEXT	ENDS
EXTRN	?endTurnTimerSemaphoreIncrement@CvGame@@QAEXXZ:PROC ; CvGame::endTurnTimerSemaphoreIncrement
; Function compile flags: /Odtp
;	COMDAT ?EndTurnTimerSemaphoreIncrement@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?EndTurnTimerSemaphoreIncrement@CvDllGame@@UAGXXZ PROC	; CvDllGame::EndTurnTimerSemaphoreIncrement, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp

; 160  : 	m_pGame->endTurnTimerSemaphoreIncrement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?endTurnTimerSemaphoreIncrement@CvGame@@QAEXXZ ; CvGame::endTurnTimerSemaphoreIncrement

; 161  : }

	pop	ebp
	ret	4
?EndTurnTimerSemaphoreIncrement@CvDllGame@@UAGXXZ ENDP	; CvDllGame::EndTurnTimerSemaphoreIncrement
_TEXT	ENDS
EXTRN	?GetAction@CvGame@@QAEHH_N00@Z:PROC		; CvGame::GetAction
; Function compile flags: /Odtp
;	COMDAT ?GetAction@CvDllGame@@UAGHH_N00@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iKeyStroke$ = 12					; size = 4
_bAlt$ = 16						; size = 1
_bShift$ = 20						; size = 1
_bCtrl$ = 24						; size = 1
?GetAction@CvDllGame@@UAGHH_N00@Z PROC			; CvDllGame::GetAction, COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp

; 165  : 	return m_pGame->GetAction(iKeyStroke, bAlt, bShift, bCtrl);

	movzx	eax, BYTE PTR _bCtrl$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bShift$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bAlt$[ebp]
	push	edx
	mov	eax, DWORD PTR _iKeyStroke$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetAction@CvGame@@QAEHH_N00@Z		; CvGame::GetAction

; 166  : }

	pop	ebp
	ret	20					; 00000014H
?GetAction@CvDllGame@@UAGHH_N00@Z ENDP			; CvDllGame::GetAction
_TEXT	ENDS
EXTRN	?IsAction@CvGame@@QAEHH_N00@Z:PROC		; CvGame::IsAction
; Function compile flags: /Odtp
;	COMDAT ?IsAction@CvDllGame@@UAGHH_N00@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iKeyStroke$ = 12					; size = 4
_bAlt$ = 16						; size = 1
_bShift$ = 20						; size = 1
_bCtrl$ = 24						; size = 1
?IsAction@CvDllGame@@UAGHH_N00@Z PROC			; CvDllGame::IsAction, COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp

; 170  : 	return m_pGame->IsAction(iKeyStroke, bAlt, bShift, bCtrl);

	movzx	eax, BYTE PTR _bCtrl$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bShift$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bAlt$[ebp]
	push	edx
	mov	eax, DWORD PTR _iKeyStroke$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?IsAction@CvGame@@QAEHH_N00@Z		; CvGame::IsAction

; 171  : }

	pop	ebp
	ret	20					; 00000014H
?IsAction@CvDllGame@@UAGHH_N00@Z ENDP			; CvDllGame::IsAction
_TEXT	ENDS
EXTRN	?GetBarbarianCampImprovementType@CvGame@@QAE?AW4ImprovementTypes@@XZ:PROC ; CvGame::GetBarbarianCampImprovementType
; Function compile flags: /Odtp
;	COMDAT ?GetBarbarianCampImprovementType@CvDllGame@@UAG?AW4ImprovementTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetBarbarianCampImprovementType@CvDllGame@@UAG?AW4ImprovementTypes@@XZ PROC ; CvDllGame::GetBarbarianCampImprovementType, COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp

; 175  : 	return m_pGame->GetBarbarianCampImprovementType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetBarbarianCampImprovementType@CvGame@@QAE?AW4ImprovementTypes@@XZ ; CvGame::GetBarbarianCampImprovementType

; 176  : }

	pop	ebp
	ret	4
?GetBarbarianCampImprovementType@CvDllGame@@UAG?AW4ImprovementTypes@@XZ ENDP ; CvDllGame::GetBarbarianCampImprovementType
_TEXT	ENDS
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
; Function compile flags: /Odtp
;	COMDAT ?GetElapsedGameTurns@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetElapsedGameTurns@CvDllGame@@UBGHXZ PROC		; CvDllGame::GetElapsedGameTurns, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : 	return m_pGame->getElapsedGameTurns();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns

; 181  : }

	pop	ebp
	ret	4
?GetElapsedGameTurns@CvDllGame@@UBGHXZ ENDP		; CvDllGame::GetElapsedGameTurns
_TEXT	ENDS
EXTRN	?getFOW@CvGame@@QAE_NXZ:PROC			; CvGame::getFOW
; Function compile flags: /Odtp
;	COMDAT ?GetFOW@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetFOW@CvDllGame@@UAG_NXZ PROC				; CvDllGame::GetFOW, COMDAT

; 184  : {

	push	ebp
	mov	ebp, esp

; 185  : 	return m_pGame->getFOW();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getFOW@CvGame@@QAE_NXZ			; CvGame::getFOW

; 186  : }

	pop	ebp
	ret	4
?GetFOW@CvDllGame@@UAG_NXZ ENDP				; CvDllGame::GetFOW
_TEXT	ENDS
EXTRN	??3CvDllGameDeals@@SAXPAX@Z:PROC		; CvDllGameDeals::operator delete
EXTRN	??0CvDllGameDeals@@QAE@PAVCvGameDeals@@@Z:PROC	; CvDllGameDeals::CvDllGameDeals
EXTRN	??2CvDllGameDeals@@SAPAXI@Z:PROC		; CvDllGameDeals::operator new
EXTRN	?GetGameDeals@CvGame@@QAEPAVCvGameDeals@@XZ:PROC ; CvGame::GetGameDeals
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ$0
__ehfuncinfo$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T219336 = -24						; size = 4
$T219335 = -20						; size = 4
_pGameDeals$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ PROC	; CvDllGame::GetGameDeals, COMDAT

; 189  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 190  : 	CvGameDeals* pGameDeals = m_pGame->GetGameDeals();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetGameDeals@CvGame@@QAEPAVCvGameDeals@@XZ ; CvGame::GetGameDeals
	mov	DWORD PTR _pGameDeals$[ebp], eax

; 191  : 	return (NULL != pGameDeals)? new CvDllGameDeals(pGameDeals) : NULL;

	cmp	DWORD PTR _pGameDeals$[ebp], 0
	je	SHORT $LN5@GetGameDea
	push	12					; 0000000cH
	call	??2CvDllGameDeals@@SAPAXI@Z		; CvDllGameDeals::operator new
	add	esp, 4
	mov	DWORD PTR $T219336[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219336[ebp], 0
	je	SHORT $LN3@GetGameDea
	mov	ecx, DWORD PTR _pGameDeals$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T219336[ebp]
	call	??0CvDllGameDeals@@QAE@PAVCvGameDeals@@@Z ; CvDllGameDeals::CvDllGameDeals
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetGameDea
$LN3@GetGameDea:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetGameDea:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T219335[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T219335[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetGameDea
$LN5@GetGameDea:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetGameDea:
	mov	eax, DWORD PTR tv74[ebp]

; 192  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ$0:
	mov	eax, DWORD PTR $T219336[ebp]
	push	eax
	call	??3CvDllGameDeals@@SAXPAX@Z		; CvDllGameDeals::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGameDeals@CvDllGame@@UAGPAVICvGameDeals1@@XZ ENDP	; CvDllGame::GetGameDeals
EXTRN	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ:PROC ; CvGame::getGameSpeedType
; Function compile flags: /Odtp
;	COMDAT ?GetGameSpeedType@CvDllGame@@UBG?AW4GameSpeedTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetGameSpeedType@CvDllGame@@UBG?AW4GameSpeedTypes@@XZ PROC ; CvDllGame::GetGameSpeedType, COMDAT

; 195  : {

	push	ebp
	mov	ebp, esp

; 196  : 	return m_pGame->getGameSpeedType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ ; CvGame::getGameSpeedType

; 197  : }

	pop	ebp
	ret	4
?GetGameSpeedType@CvDllGame@@UBG?AW4GameSpeedTypes@@XZ ENDP ; CvDllGame::GetGameSpeedType
_TEXT	ENDS
EXTRN	?getGameState@CvGame@@QAE?AW4GameStateTypes@@XZ:PROC ; CvGame::getGameState
; Function compile flags: /Odtp
;	COMDAT ?GetGameState@CvDllGame@@UAG?AW4GameStateTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetGameState@CvDllGame@@UAG?AW4GameStateTypes@@XZ PROC	; CvDllGame::GetGameState, COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp

; 201  : 	return m_pGame->getGameState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getGameState@CvGame@@QAE?AW4GameStateTypes@@XZ ; CvGame::getGameState

; 202  : }

	pop	ebp
	ret	4
?GetGameState@CvDllGame@@UAG?AW4GameStateTypes@@XZ ENDP	; CvDllGame::GetGameState
_TEXT	ENDS
EXTRN	?getHandicapType@CvGame@@QBE?AW4HandicapTypes@@XZ:PROC ; CvGame::getHandicapType
; Function compile flags: /Odtp
;	COMDAT ?GetHandicapType@CvDllGame@@UBG?AW4HandicapTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetHandicapType@CvDllGame@@UBG?AW4HandicapTypes@@XZ PROC ; CvDllGame::GetHandicapType, COMDAT

; 205  : {

	push	ebp
	mov	ebp, esp

; 206  : 	return m_pGame->getHandicapType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getHandicapType@CvGame@@QBE?AW4HandicapTypes@@XZ ; CvGame::getHandicapType

; 207  : }

	pop	ebp
	ret	4
?GetHandicapType@CvDllGame@@UBG?AW4HandicapTypes@@XZ ENDP ; CvDllGame::GetHandicapType
_TEXT	ENDS
EXTRN	??3CvDllRandom@@SAXPAX@Z:PROC			; CvDllRandom::operator delete
EXTRN	??0CvDllRandom@@QAE@PAVCvRandom@@@Z:PROC	; CvDllRandom::CvDllRandom
EXTRN	?getJonRand@CvGame@@QAEAAVCvRandom@@XZ:PROC	; CvGame::getJonRand
EXTRN	??2CvDllRandom@@SAPAXI@Z:PROC			; CvDllRandom::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ$0
__ehfuncinfo$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ
_TEXT	SEGMENT
tv78 = -24						; size = 4
$T219357 = -20						; size = 4
$T219356 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ PROC ; CvDllGame::GetRandomNumberGenerator, COMDAT

; 210  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 211  : 	return new CvDllRandom(&m_pGame->getJonRand());

	push	12					; 0000000cH
	call	??2CvDllRandom@@SAPAXI@Z		; CvDllRandom::operator new
	add	esp, 4
	mov	DWORD PTR $T219357[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219357[ebp], 0
	je	SHORT $LN3@GetRandomN
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getJonRand@CvGame@@QAEAAVCvRandom@@XZ	; CvGame::getJonRand
	push	eax
	mov	ecx, DWORD PTR $T219357[ebp]
	call	??0CvDllRandom@@QAE@PAVCvRandom@@@Z	; CvDllRandom::CvDllRandom
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN4@GetRandomN
$LN3@GetRandomN:
	mov	DWORD PTR tv78[ebp], 0
$LN4@GetRandomN:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T219356[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T219356[ebp]

; 212  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ$0:
	mov	eax, DWORD PTR $T219357[ebp]
	push	eax
	call	??3CvDllRandom@@SAXPAX@Z		; CvDllRandom::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRandomNumberGenerator@CvDllGame@@UAGPAVICvRandom1@@XZ ENDP ; CvDllGame::GetRandomNumberGenerator
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
; Function compile flags: /Odtp
;	COMDAT ?GetJonRandNum@CvDllGame@@UAGHHPBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iNum$ = 12						; size = 4
_pszLog$ = 16						; size = 4
?GetJonRandNum@CvDllGame@@UAGHHPBD@Z PROC		; CvDllGame::GetJonRandNum, COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp

; 216  : 	return m_pGame->getJonRandNum(iNum, pszLog);

	mov	eax, DWORD PTR _pszLog$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 217  : }

	pop	ebp
	ret	12					; 0000000cH
?GetJonRandNum@CvDllGame@@UAGHHPBD@Z ENDP		; CvDllGame::GetJonRandNum
_TEXT	ENDS
EXTRN	?getMaxTurns@CvGame@@QBEHXZ:PROC		; CvGame::getMaxTurns
; Function compile flags: /Odtp
;	COMDAT ?GetMaxTurns@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetMaxTurns@CvDllGame@@UBGHXZ PROC			; CvDllGame::GetMaxTurns, COMDAT

; 220  : {

	push	ebp
	mov	ebp, esp

; 221  : 	return m_pGame->getMaxTurns();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getMaxTurns@CvGame@@QBEHXZ		; CvGame::getMaxTurns

; 222  : }

	pop	ebp
	ret	4
?GetMaxTurns@CvDllGame@@UBGHXZ ENDP			; CvDllGame::GetMaxTurns
_TEXT	ENDS
EXTRN	?getNumGameTurnActive@CvGame@@QAEHXZ:PROC	; CvGame::getNumGameTurnActive
; Function compile flags: /Odtp
;	COMDAT ?GetNumGameTurnActive@CvDllGame@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumGameTurnActive@CvDllGame@@UAGHXZ PROC		; CvDllGame::GetNumGameTurnActive, COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp

; 226  : 	return m_pGame->getNumGameTurnActive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getNumGameTurnActive@CvGame@@QAEHXZ	; CvGame::getNumGameTurnActive

; 227  : }

	pop	ebp
	ret	4
?GetNumGameTurnActive@CvDllGame@@UAGHXZ ENDP		; CvDllGame::GetNumGameTurnActive
_TEXT	ENDS
EXTRN	?getPausePlayer@CvGame@@QAE?AW4PlayerTypes@@XZ:PROC ; CvGame::getPausePlayer
; Function compile flags: /Odtp
;	COMDAT ?GetPausePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPausePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ PROC	; CvDllGame::GetPausePlayer, COMDAT

; 230  : {

	push	ebp
	mov	ebp, esp

; 231  : 	return m_pGame->getPausePlayer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getPausePlayer@CvGame@@QAE?AW4PlayerTypes@@XZ ; CvGame::getPausePlayer

; 232  : }

	pop	ebp
	ret	4
?GetPausePlayer@CvDllGame@@UAG?AW4PlayerTypes@@XZ ENDP	; CvDllGame::GetPausePlayer
_TEXT	ENDS
EXTRN	?getPbemTurnSent@CvGame@@QBE_NXZ:PROC		; CvGame::getPbemTurnSent
; Function compile flags: /Odtp
;	COMDAT ?GetPbemTurnSent@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPbemTurnSent@CvDllGame@@UBG_NXZ PROC		; CvDllGame::GetPbemTurnSent, COMDAT

; 235  : {

	push	ebp
	mov	ebp, esp

; 236  : 	return m_pGame->getPbemTurnSent();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getPbemTurnSent@CvGame@@QBE_NXZ	; CvGame::getPbemTurnSent

; 237  : }

	pop	ebp
	ret	4
?GetPbemTurnSent@CvDllGame@@UBG_NXZ ENDP		; CvDllGame::GetPbemTurnSent
_TEXT	ENDS
EXTRN	??3CvDllUnit@@SAXPAX@Z:PROC			; CvDllUnit::operator delete
EXTRN	??0CvDllUnit@@QAE@PAVCvUnit@@@Z:PROC		; CvDllUnit::CvDllUnit
EXTRN	??2CvDllUnit@@SAPAXI@Z:PROC			; CvDllUnit::operator new
EXTRN	?getPlotUnit@CvGame@@QAEPAVCvUnit@@PAVCvPlot@@H@Z:PROC ; CvGame::getPlotUnit
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z$0
__ehfuncinfo$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z
_TEXT	SEGMENT
tv84 = -40						; size = 4
tv89 = -36						; size = 4
tv71 = -32						; size = 4
$T219382 = -28						; size = 4
$T219381 = -24						; size = 4
_pkUnit$ = -20						; size = 4
_pkPlot$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
_iIndex$ = 16						; size = 4
?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z PROC ; CvDllGame::GetPlotUnit, COMDAT

; 240  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 241  : 	CvPlot* pkPlot = (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN3@GetPlotUni
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@GetPlotUni
$LN3@GetPlotUni:
	mov	DWORD PTR tv71[ebp], 0
$LN4@GetPlotUni:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkPlot$[ebp], eax

; 242  : 	CvUnit* pkUnit = m_pGame->getPlotUnit(pkPlot, iIndex);

	mov	ecx, DWORD PTR _iIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getPlotUnit@CvGame@@QAEPAVCvUnit@@PAVCvPlot@@H@Z ; CvGame::getPlotUnit
	mov	DWORD PTR _pkUnit$[ebp], eax

; 243  : 
; 244  : 	return (NULL != pkUnit)? new CvDllUnit(pkUnit) : NULL;

	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	SHORT $LN7@GetPlotUni
	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T219382[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219382[ebp], 0
	je	SHORT $LN5@GetPlotUni
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T219382[ebp]
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN6@GetPlotUni
$LN5@GetPlotUni:
	mov	DWORD PTR tv89[ebp], 0
$LN6@GetPlotUni:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T219381[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T219381[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@GetPlotUni
$LN7@GetPlotUni:
	mov	DWORD PTR tv84[ebp], 0
$LN8@GetPlotUni:
	mov	eax, DWORD PTR tv84[ebp]

; 245  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z$0:
	mov	eax, DWORD PTR $T219382[ebp]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlotUnit@CvDllGame@@UAGPAVICvUnit1@@PAVICvPlot1@@H@Z ENDP ; CvDllGame::GetPlotUnit
EXTRN	?GetVariableCitySizeFromPopulation@CvGame@@QAEII@Z:PROC ; CvGame::GetVariableCitySizeFromPopulation
; Function compile flags: /Odtp
;	COMDAT ?GetVariableCitySizeFromPopulation@CvDllGame@@UAGII@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_nPopulation$ = 12					; size = 4
?GetVariableCitySizeFromPopulation@CvDllGame@@UAGII@Z PROC ; CvDllGame::GetVariableCitySizeFromPopulation, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp

; 249  : 	return m_pGame->GetVariableCitySizeFromPopulation(nPopulation);

	mov	eax, DWORD PTR _nPopulation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetVariableCitySizeFromPopulation@CvGame@@QAEII@Z ; CvGame::GetVariableCitySizeFromPopulation

; 250  : }

	pop	ebp
	ret	8
?GetVariableCitySizeFromPopulation@CvDllGame@@UAGII@Z ENDP ; CvDllGame::GetVariableCitySizeFromPopulation
_TEXT	ENDS
EXTRN	?getVictory@CvGame@@QBE?AW4VictoryTypes@@XZ:PROC ; CvGame::getVictory
; Function compile flags: /Odtp
;	COMDAT ?GetVictory@CvDllGame@@UBG?AW4VictoryTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetVictory@CvDllGame@@UBG?AW4VictoryTypes@@XZ PROC	; CvDllGame::GetVictory, COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp

; 254  : 	return m_pGame->getVictory();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getVictory@CvGame@@QBE?AW4VictoryTypes@@XZ ; CvGame::getVictory

; 255  : }

	pop	ebp
	ret	4
?GetVictory@CvDllGame@@UBG?AW4VictoryTypes@@XZ ENDP	; CvDllGame::GetVictory
_TEXT	ENDS
EXTRN	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ:PROC ; CvGame::GetVotesNeededForDiploVictory
; Function compile flags: /Odtp
;	COMDAT ?GetVotesNeededForDiploVictory@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetVotesNeededForDiploVictory@CvDllGame@@UBGHXZ PROC	; CvDllGame::GetVotesNeededForDiploVictory, COMDAT

; 258  : {

	push	ebp
	mov	ebp, esp

; 259  : 	return m_pGame->GetVotesNeededForDiploVictory();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ ; CvGame::GetVotesNeededForDiploVictory

; 260  : }

	pop	ebp
	ret	4
?GetVotesNeededForDiploVictory@CvDllGame@@UBGHXZ ENDP	; CvDllGame::GetVotesNeededForDiploVictory
_TEXT	ENDS
EXTRN	?getWinner@CvGame@@QBE?AW4TeamTypes@@XZ:PROC	; CvGame::getWinner
; Function compile flags: /Odtp
;	COMDAT ?GetWinner@CvDllGame@@UBG?AW4TeamTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetWinner@CvDllGame@@UBG?AW4TeamTypes@@XZ PROC		; CvDllGame::GetWinner, COMDAT

; 263  : {

	push	ebp
	mov	ebp, esp

; 264  : 	return m_pGame->getWinner();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getWinner@CvGame@@QBE?AW4TeamTypes@@XZ	; CvGame::getWinner

; 265  : }

	pop	ebp
	ret	4
?GetWinner@CvDllGame@@UBG?AW4TeamTypes@@XZ ENDP		; CvDllGame::GetWinner
_TEXT	ENDS
EXTRN	?GetWinningTurn@CvGame@@QBEHXZ:PROC		; CvGame::GetWinningTurn
; Function compile flags: /Odtp
;	COMDAT ?GetWinningTurn@CvDllGame@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetWinningTurn@CvDllGame@@UBGHXZ PROC			; CvDllGame::GetWinningTurn, COMDAT

; 268  : {

	push	ebp
	mov	ebp, esp

; 269  : 	return m_pGame->GetWinningTurn();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetWinningTurn@CvGame@@QBEHXZ		; CvGame::GetWinningTurn

; 270  : }

	pop	ebp
	ret	4
?GetWinningTurn@CvDllGame@@UBGHXZ ENDP			; CvDllGame::GetWinningTurn
_TEXT	ENDS
EXTRN	?handleAction@CvGame@@QAEXH@Z:PROC		; CvGame::handleAction
; Function compile flags: /Odtp
;	COMDAT ?HandleAction@CvDllGame@@UAGXH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iAction$ = 12						; size = 4
?HandleAction@CvDllGame@@UAGXH@Z PROC			; CvDllGame::HandleAction, COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp

; 274  : 	m_pGame->handleAction(iAction);

	mov	eax, DWORD PTR _iAction$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?handleAction@CvGame@@QAEXH@Z		; CvGame::handleAction

; 275  : }

	pop	ebp
	ret	8
?HandleAction@CvDllGame@@UAGXH@Z ENDP			; CvDllGame::HandleAction
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?HasTurnTimerExpired@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?HasTurnTimerExpired@CvDllGame@@UAG_NXZ PROC		; CvDllGame::HasTurnTimerExpired, COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp

; 279  : 	CvAssertMsg(0, "Obsolete");
; 280  : 	return false;

	xor	al, al

; 281  : }

	pop	ebp
	ret	4
?HasTurnTimerExpired@CvDllGame@@UAG_NXZ ENDP		; CvDllGame::HasTurnTimerExpired
_TEXT	ENDS
EXTRN	?hasTurnTimerExpired@CvGame@@QAE_NW4PlayerTypes@@@Z:PROC ; CvGame::hasTurnTimerExpired
; Function compile flags: /Odtp
;	COMDAT ?HasTurnTimerExpired@CvDllGame@@UAG_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_playerID$ = 12						; size = 4
?HasTurnTimerExpired@CvDllGame@@UAG_NW4PlayerTypes@@@Z PROC ; CvDllGame::HasTurnTimerExpired, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp

; 285  : 	return m_pGame->hasTurnTimerExpired(playerID);

	mov	eax, DWORD PTR _playerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?hasTurnTimerExpired@CvGame@@QAE_NW4PlayerTypes@@@Z ; CvGame::hasTurnTimerExpired

; 286  : }

	pop	ebp
	ret	8
?HasTurnTimerExpired@CvDllGame@@UAG_NW4PlayerTypes@@@Z ENDP ; CvDllGame::HasTurnTimerExpired
_TEXT	ENDS
EXTRN	?TurnTimerSync@CvGame@@QAEXMM@Z:PROC		; CvGame::TurnTimerSync
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ?TurnTimerSync@CvDllGame@@UAGXMM@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_fCurTurnTime$ = 12					; size = 4
_fTurnStartTime$ = 16					; size = 4
?TurnTimerSync@CvDllGame@@UAGXMM@Z PROC			; CvDllGame::TurnTimerSync, COMDAT

; 289  : {

	push	ebp
	mov	ebp, esp

; 290  : 	return m_pGame->TurnTimerSync(fCurTurnTime, fTurnStartTime);

	push	ecx
	fld	DWORD PTR _fTurnStartTime$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fCurTurnTime$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?TurnTimerSync@CvGame@@QAEXMM@Z		; CvGame::TurnTimerSync

; 291  : }

	pop	ebp
	ret	12					; 0000000cH
?TurnTimerSync@CvDllGame@@UAGXMM@Z ENDP			; CvDllGame::TurnTimerSync
_TEXT	ENDS
EXTRN	?GetTurnTimerData@CvGame@@QAEXAAM0@Z:PROC	; CvGame::GetTurnTimerData
; Function compile flags: /Odtp
;	COMDAT ?GetTurnTimerData@CvDllGame@@UAGXAAM0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_fCurTurnTime$ = 12					; size = 4
_fTurnStartTime$ = 16					; size = 4
?GetTurnTimerData@CvDllGame@@UAGXAAM0@Z PROC		; CvDllGame::GetTurnTimerData, COMDAT

; 294  : {

	push	ebp
	mov	ebp, esp

; 295  : 	return m_pGame->GetTurnTimerData(fCurTurnTime, fTurnStartTime);

	mov	eax, DWORD PTR _fTurnStartTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fCurTurnTime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetTurnTimerData@CvGame@@QAEXAAM0@Z	; CvGame::GetTurnTimerData

; 296  : }

	pop	ebp
	ret	12					; 0000000cH
?GetTurnTimerData@CvDllGame@@UAGXAAM0@Z ENDP		; CvDllGame::GetTurnTimerData
_TEXT	ENDS
EXTRN	?init@CvGame@@QAEXW4HandicapTypes@@@Z:PROC	; CvGame::init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvDllGame@@UAGXW4HandicapTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eHandicap$ = 12					; size = 4
?Init@CvDllGame@@UAGXW4HandicapTypes@@@Z PROC		; CvDllGame::Init, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp

; 300  : 	m_pGame->init(eHandicap);

	mov	eax, DWORD PTR _eHandicap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?init@CvGame@@QAEXW4HandicapTypes@@@Z	; CvGame::init

; 301  : }

	pop	ebp
	ret	8
?Init@CvDllGame@@UAGXW4HandicapTypes@@@Z ENDP		; CvDllGame::Init
_TEXT	ENDS
EXTRN	?init2@CvGame@@QAE_NXZ:PROC			; CvGame::init2
; Function compile flags: /Odtp
;	COMDAT ?Init2@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Init2@CvDllGame@@UAG_NXZ PROC				; CvDllGame::Init2, COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp

; 305  : 	return m_pGame->init2();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?init2@CvGame@@QAE_NXZ			; CvGame::init2

; 306  : }

	pop	ebp
	ret	4
?Init2@CvDllGame@@UAG_NXZ ENDP				; CvDllGame::Init2
_TEXT	ENDS
EXTRN	?initScoreCalculation@CvGame@@QAEXXZ:PROC	; CvGame::initScoreCalculation
; Function compile flags: /Odtp
;	COMDAT ?InitScoreCalculation@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?InitScoreCalculation@CvDllGame@@UAGXXZ PROC		; CvDllGame::InitScoreCalculation, COMDAT

; 309  : {

	push	ebp
	mov	ebp, esp

; 310  : 	m_pGame->initScoreCalculation();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?initScoreCalculation@CvGame@@QAEXXZ	; CvGame::initScoreCalculation

; 311  : }

	pop	ebp
	ret	4
?InitScoreCalculation@CvDllGame@@UAGXXZ ENDP		; CvDllGame::InitScoreCalculation
_TEXT	ENDS
EXTRN	?Init@CvTacticalAnalysisMap@@QAEXH@Z:PROC	; CvTacticalAnalysisMap::Init
EXTRN	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ:PROC ; CvGame::GetTacticalAnalysisMap
; Function compile flags: /Odtp
;	COMDAT ?InitTacticalAnalysisMap@CvDllGame@@UAGXH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iNumPlots$ = 12					; size = 4
?InitTacticalAnalysisMap@CvDllGame@@UAGXH@Z PROC	; CvDllGame::InitTacticalAnalysisMap, COMDAT

; 314  : {

	push	ebp
	mov	ebp, esp

; 315  : 	m_pGame->GetTacticalAnalysisMap()->Init(iNumPlots);

	mov	eax, DWORD PTR _iNumPlots$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ ; CvGame::GetTacticalAnalysisMap
	mov	ecx, eax
	call	?Init@CvTacticalAnalysisMap@@QAEXH@Z	; CvTacticalAnalysisMap::Init

; 316  : }

	pop	ebp
	ret	8
?InitTacticalAnalysisMap@CvDllGame@@UAGXH@Z ENDP	; CvDllGame::InitTacticalAnalysisMap
_TEXT	ENDS
EXTRN	?IsCityScreenBlocked@CvGame@@QAE_NXZ:PROC	; CvGame::IsCityScreenBlocked
; Function compile flags: /Odtp
;	COMDAT ?IsCityScreenBlocked@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsCityScreenBlocked@CvDllGame@@UAG_NXZ PROC		; CvDllGame::IsCityScreenBlocked, COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp

; 320  : 	return m_pGame->IsCityScreenBlocked();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsCityScreenBlocked@CvGame@@QAE_NXZ	; CvGame::IsCityScreenBlocked

; 321  : }

	pop	ebp
	ret	4
?IsCityScreenBlocked@CvDllGame@@UAG_NXZ ENDP		; CvDllGame::IsCityScreenBlocked
_TEXT	ENDS
EXTRN	?CanOpenCityScreen@CvGame@@QAE_NW4PlayerTypes@@PAVCvCity@@@Z:PROC ; CvGame::CanOpenCityScreen
EXTRN	?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z:PROC ; CvGlobals::UnwrapCityPointer
; Function compile flags: /Odtp
;	COMDAT ?CanOpenCityScreen@CvDllGame@@UAG_NW4PlayerTypes@@PAVICvCity1@@@Z
_TEXT	SEGMENT
_pCity$ = -4						; size = 4
_this$ = 8						; size = 4
_eOpener$ = 12						; size = 4
_pkCity$ = 16						; size = 4
?CanOpenCityScreen@CvDllGame@@UAG_NW4PlayerTypes@@PAVICvCity1@@@Z PROC ; CvDllGame::CanOpenCityScreen, COMDAT

; 324  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 325  : 	CvCity* pCity = GC.UnwrapCityPointer(pkCity);

	mov	eax, DWORD PTR _pkCity$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapCityPointer@CvGlobals@@QAEPAVCvCity@@PAVICvCity1@@@Z ; CvGlobals::UnwrapCityPointer
	mov	DWORD PTR _pCity$[ebp], eax

; 326  : 	return m_pGame->CanOpenCityScreen(eOpener, pCity);

	mov	ecx, DWORD PTR _pCity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eOpener$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?CanOpenCityScreen@CvGame@@QAE_NW4PlayerTypes@@PAVCvCity@@@Z ; CvGame::CanOpenCityScreen

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CanOpenCityScreen@CvDllGame@@UAG_NW4PlayerTypes@@PAVICvCity1@@@Z ENDP ; CvDllGame::CanOpenCityScreen
_TEXT	ENDS
EXTRN	?isDebugMode@CvGame@@QBE_NXZ:PROC		; CvGame::isDebugMode
; Function compile flags: /Odtp
;	COMDAT ?IsDebugMode@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsDebugMode@CvDllGame@@UBG_NXZ PROC			; CvDllGame::IsDebugMode, COMDAT

; 330  : {

	push	ebp
	mov	ebp, esp

; 331  : 	return m_pGame->isDebugMode();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode

; 332  : }

	pop	ebp
	ret	4
?IsDebugMode@CvDllGame@@UBG_NXZ ENDP			; CvDllGame::IsDebugMode
_TEXT	ENDS
EXTRN	?isFinalInitialized@CvGame@@QBE_NXZ:PROC	; CvGame::isFinalInitialized
; Function compile flags: /Odtp
;	COMDAT ?IsFinalInitialized@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsFinalInitialized@CvDllGame@@UBG_NXZ PROC		; CvDllGame::IsFinalInitialized, COMDAT

; 335  : {

	push	ebp
	mov	ebp, esp

; 336  : 	return m_pGame->isFinalInitialized();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isFinalInitialized@CvGame@@QBE_NXZ	; CvGame::isFinalInitialized

; 337  : }

	pop	ebp
	ret	4
?IsFinalInitialized@CvDllGame@@UBG_NXZ ENDP		; CvDllGame::IsFinalInitialized
_TEXT	ENDS
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
; Function compile flags: /Odtp
;	COMDAT ?IsGameMultiPlayer@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsGameMultiPlayer@CvDllGame@@UBG_NXZ PROC		; CvDllGame::IsGameMultiPlayer, COMDAT

; 340  : {

	push	ebp
	mov	ebp, esp

; 341  : 	return m_pGame->isGameMultiPlayer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer

; 342  : }

	pop	ebp
	ret	4
?IsGameMultiPlayer@CvDllGame@@UBG_NXZ ENDP		; CvDllGame::IsGameMultiPlayer
_TEXT	ENDS
EXTRN	?isHotSeat@CvGame@@QBE_NXZ:PROC			; CvGame::isHotSeat
; Function compile flags: /Odtp
;	COMDAT ?IsHotSeat@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsHotSeat@CvDllGame@@UBG_NXZ PROC			; CvDllGame::IsHotSeat, COMDAT

; 345  : {

	push	ebp
	mov	ebp, esp

; 346  : 	return m_pGame->isHotSeat();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isHotSeat@CvGame@@QBE_NXZ		; CvGame::isHotSeat

; 347  : }

	pop	ebp
	ret	4
?IsHotSeat@CvDllGame@@UBG_NXZ ENDP			; CvDllGame::IsHotSeat
_TEXT	ENDS
EXTRN	?isMPOption@CvGame@@QBE_NW4MultiplayerOptionTypes@@@Z:PROC ; CvGame::isMPOption
; Function compile flags: /Odtp
;	COMDAT ?IsMPOption@CvDllGame@@UBE_NW4MultiplayerOptionTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
?IsMPOption@CvDllGame@@UBE_NW4MultiplayerOptionTypes@@@Z PROC ; CvDllGame::IsMPOption, COMDAT
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 	return m_pGame->isMPOption(eIndex);

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?isMPOption@CvGame@@QBE_NW4MultiplayerOptionTypes@@@Z ; CvGame::isMPOption

; 352  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsMPOption@CvDllGame@@UBE_NW4MultiplayerOptionTypes@@@Z ENDP ; CvDllGame::IsMPOption
_TEXT	ENDS
EXTRN	?isNetworkMultiPlayer@CvGame@@QBE_NXZ:PROC	; CvGame::isNetworkMultiPlayer
; Function compile flags: /Odtp
;	COMDAT ?IsNetworkMultiPlayer@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsNetworkMultiPlayer@CvDllGame@@UBG_NXZ PROC		; CvDllGame::IsNetworkMultiPlayer, COMDAT

; 355  : {

	push	ebp
	mov	ebp, esp

; 356  : 	return m_pGame->isNetworkMultiPlayer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isNetworkMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isNetworkMultiPlayer

; 357  : }

	pop	ebp
	ret	4
?IsNetworkMultiPlayer@CvDllGame@@UBG_NXZ ENDP		; CvDllGame::IsNetworkMultiPlayer
_TEXT	ENDS
EXTRN	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z:PROC ; CvGame::isOption
; Function compile flags: /Odtp
;	COMDAT ?IsOption@CvDllGame@@UBE_NW4GameOptionTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
?IsOption@CvDllGame@@UBE_NW4GameOptionTypes@@@Z PROC	; CvDllGame::IsOption, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	return m_pGame->isOption(eIndex);

	mov	eax, DWORD PTR _eIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption

; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsOption@CvDllGame@@UBE_NW4GameOptionTypes@@@Z ENDP	; CvDllGame::IsOption
_TEXT	ENDS
EXTRN	?isPaused@CvGame@@QAE_NXZ:PROC			; CvGame::isPaused
; Function compile flags: /Odtp
;	COMDAT ?IsPaused@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsPaused@CvDllGame@@UAG_NXZ PROC			; CvDllGame::IsPaused, COMDAT

; 365  : {

	push	ebp
	mov	ebp, esp

; 366  : 	return m_pGame->isPaused();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isPaused@CvGame@@QAE_NXZ		; CvGame::isPaused

; 367  : }

	pop	ebp
	ret	4
?IsPaused@CvDllGame@@UAG_NXZ ENDP			; CvDllGame::IsPaused
_TEXT	ENDS
EXTRN	?isPbem@CvGame@@QBE_NXZ:PROC			; CvGame::isPbem
; Function compile flags: /Odtp
;	COMDAT ?IsPbem@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsPbem@CvDllGame@@UBG_NXZ PROC				; CvDllGame::IsPbem, COMDAT

; 370  : {

	push	ebp
	mov	ebp, esp

; 371  : 	return m_pGame->isPbem();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isPbem@CvGame@@QBE_NXZ			; CvGame::isPbem

; 372  : }

	pop	ebp
	ret	4
?IsPbem@CvDllGame@@UBG_NXZ ENDP				; CvDllGame::IsPbem
_TEXT	ENDS
EXTRN	?isTeamGame@CvGame@@QBE_NXZ:PROC		; CvGame::isTeamGame
; Function compile flags: /Odtp
;	COMDAT ?IsTeamGame@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsTeamGame@CvDllGame@@UBG_NXZ PROC			; CvDllGame::IsTeamGame, COMDAT

; 375  : {

	push	ebp
	mov	ebp, esp

; 376  : 	return m_pGame->isTeamGame();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isTeamGame@CvGame@@QBE_NXZ		; CvGame::isTeamGame

; 377  : }

	pop	ebp
	ret	4
?IsTeamGame@CvDllGame@@UBG_NXZ ENDP			; CvDllGame::IsTeamGame
_TEXT	ENDS
EXTRN	?LogGameState@CvGame@@QAEX_N@Z:PROC		; CvGame::LogGameState
; Function compile flags: /Odtp
;	COMDAT ?LogGameState@CvDllGame@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bLogHeaders$ = 12					; size = 1
?LogGameState@CvDllGame@@UAGX_N@Z PROC			; CvDllGame::LogGameState, COMDAT

; 380  : {

	push	ebp
	mov	ebp, esp

; 381  : 	m_pGame->LogGameState(bLogHeaders);

	movzx	eax, BYTE PTR _bLogHeaders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?LogGameState@CvGame@@QAEX_N@Z		; CvGame::LogGameState

; 382  : }

	pop	ebp
	ret	8
?LogGameState@CvDllGame@@UAGX_N@Z ENDP			; CvDllGame::LogGameState
_TEXT	ENDS
EXTRN	?resetTurnTimer@CvGame@@QAEX_N@Z:PROC		; CvGame::resetTurnTimer
; Function compile flags: /Odtp
;	COMDAT ?ResetTurnTimer@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?ResetTurnTimer@CvDllGame@@UAGXXZ PROC			; CvDllGame::ResetTurnTimer, COMDAT

; 385  : {

	push	ebp
	mov	ebp, esp

; 386  : 	m_pGame->resetTurnTimer();

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?resetTurnTimer@CvGame@@QAEX_N@Z	; CvGame::resetTurnTimer

; 387  : }

	pop	ebp
	ret	4
?ResetTurnTimer@CvDllGame@@UAGXXZ ENDP			; CvDllGame::ResetTurnTimer
_TEXT	ENDS
EXTRN	?selectAll@CvGame@@QAEXPAVCvPlot@@@Z:PROC	; CvGame::selectAll
; Function compile flags: /Odtp
;	COMDAT ?SelectAll@CvDllGame@@UAGXPAVICvPlot1@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkPlot$ = -4						; size = 4
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
?SelectAll@CvDllGame@@UAGXPAVICvPlot1@@@Z PROC		; CvDllGame::SelectAll, COMDAT

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 391  : 	CvPlot* pkPlot = (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN3@SelectAll
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@SelectAll
$LN3@SelectAll:
	mov	DWORD PTR tv71[ebp], 0
$LN4@SelectAll:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkPlot$[ebp], eax

; 392  : 	m_pGame->selectAll(pkPlot);

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?selectAll@CvGame@@QAEXPAVCvPlot@@@Z	; CvGame::selectAll

; 393  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SelectAll@CvDllGame@@UAGXPAVICvPlot1@@@Z ENDP		; CvDllGame::SelectAll
_TEXT	ENDS
EXTRN	?selectGroup@CvGame@@QAEXPAVCvUnit@@_N11@Z:PROC	; CvGame::selectGroup
EXTRN	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ:PROC	; CvDllUnit::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?SelectGroup@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkUnit$ = -4						; size = 4
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
_bShift$ = 16						; size = 1
_bCtrl$ = 20						; size = 1
_bAlt$ = 24						; size = 1
?SelectGroup@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z PROC	; CvDllGame::SelectGroup, COMDAT

; 396  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 397  : 	CvUnit* pkUnit = (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN3@SelectGrou
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@SelectGrou
$LN3@SelectGrou:
	mov	DWORD PTR tv71[ebp], 0
$LN4@SelectGrou:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkUnit$[ebp], eax

; 398  : 	m_pGame->selectGroup(pkUnit, bShift, bCtrl, bAlt);

	movzx	ecx, BYTE PTR _bAlt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bCtrl$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bShift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?selectGroup@CvGame@@QAEXPAVCvUnit@@_N11@Z ; CvGame::selectGroup

; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SelectGroup@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z ENDP	; CvDllGame::SelectGroup
_TEXT	ENDS
EXTRN	?selectionListIgnoreBuildingDefense@CvGame@@QAE_NXZ:PROC ; CvGame::selectionListIgnoreBuildingDefense
; Function compile flags: /Odtp
;	COMDAT ?SelectionListIgnoreBuildingDefense@CvDllGame@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?SelectionListIgnoreBuildingDefense@CvDllGame@@UAG_NXZ PROC ; CvDllGame::SelectionListIgnoreBuildingDefense, COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp

; 403  : 	return m_pGame->selectionListIgnoreBuildingDefense();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?selectionListIgnoreBuildingDefense@CvGame@@QAE_NXZ ; CvGame::selectionListIgnoreBuildingDefense

; 404  : }

	pop	ebp
	ret	4
?SelectionListIgnoreBuildingDefense@CvDllGame@@UAG_NXZ ENDP ; CvDllGame::SelectionListIgnoreBuildingDefense
_TEXT	ENDS
EXTRN	?selectionListMove@CvGame@@QAEXPAVCvPlot@@_N@Z:PROC ; CvGame::selectionListMove
; Function compile flags: /Odtp
;	COMDAT ?SelectionListMove@CvDllGame@@UAGXPAVICvPlot1@@_N@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkPlot$ = -4						; size = 4
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
_bShift$ = 16						; size = 1
?SelectionListMove@CvDllGame@@UAGXPAVICvPlot1@@_N@Z PROC ; CvDllGame::SelectionListMove, COMDAT

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 408  : 	CvPlot* pkPlot = (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN3@SelectionL
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@SelectionL
$LN3@SelectionL:
	mov	DWORD PTR tv71[ebp], 0
$LN4@SelectionL:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkPlot$[ebp], eax

; 409  : 	m_pGame->selectionListMove(pkPlot, bShift);

	movzx	ecx, BYTE PTR _bShift$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?selectionListMove@CvGame@@QAEXPAVCvPlot@@_N@Z ; CvGame::selectionListMove

; 410  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SelectionListMove@CvDllGame@@UAGXPAVICvPlot1@@_N@Z ENDP ; CvDllGame::SelectionListMove
_TEXT	ENDS
EXTRN	?SelectSettler@CvGame@@QAEXXZ:PROC		; CvGame::SelectSettler
; Function compile flags: /Odtp
;	COMDAT ?SelectSettler@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?SelectSettler@CvDllGame@@UAGXXZ PROC			; CvDllGame::SelectSettler, COMDAT

; 413  : {

	push	ebp
	mov	ebp, esp

; 414  : 	m_pGame->SelectSettler();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SelectSettler@CvGame@@QAEXXZ		; CvGame::SelectSettler

; 415  : }

	pop	ebp
	ret	4
?SelectSettler@CvDllGame@@UAGXXZ ENDP			; CvDllGame::SelectSettler
_TEXT	ENDS
EXTRN	?selectUnit@CvGame@@QAEXPAVCvUnit@@_N11@Z:PROC	; CvGame::selectUnit
; Function compile flags: /Odtp
;	COMDAT ?SelectUnit@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkUnit$ = -4						; size = 4
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
_bClear$ = 16						; size = 1
_bToggle$ = 20						; size = 1
_bSound$ = 24						; size = 1
?SelectUnit@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z PROC	; CvDllGame::SelectUnit, COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 419  : 	CvUnit* pkUnit = (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN3@SelectUnit
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@SelectUnit
$LN3@SelectUnit:
	mov	DWORD PTR tv71[ebp], 0
$LN4@SelectUnit:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkUnit$[ebp], eax

; 420  : 	m_pGame->selectUnit(pkUnit, bClear, bToggle, bSound);

	movzx	ecx, BYTE PTR _bSound$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bToggle$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bClear$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?selectUnit@CvGame@@QAEXPAVCvUnit@@_N11@Z ; CvGame::selectUnit

; 421  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SelectUnit@CvDllGame@@UAGXPAVICvUnit1@@_N11@Z ENDP	; CvDllGame::SelectUnit
_TEXT	ENDS
EXTRN	?sendPlayerOptions@CvGame@@QAEX_N@Z:PROC	; CvGame::sendPlayerOptions
; Function compile flags: /Odtp
;	COMDAT ?SendPlayerOptions@CvDllGame@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bForce$ = 12						; size = 1
?SendPlayerOptions@CvDllGame@@UAGX_N@Z PROC		; CvDllGame::SendPlayerOptions, COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp

; 425  : 	m_pGame->sendPlayerOptions(bForce);

	movzx	eax, BYTE PTR _bForce$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?sendPlayerOptions@CvGame@@QAEX_N@Z	; CvGame::sendPlayerOptions

; 426  : }

	pop	ebp
	ret	8
?SendPlayerOptions@CvDllGame@@UAGX_N@Z ENDP		; CvDllGame::SendPlayerOptions
_TEXT	ENDS
EXTRN	?setDebugMode@CvGame@@QAEX_N@Z:PROC		; CvGame::setDebugMode
; Function compile flags: /Odtp
;	COMDAT ?SetDebugMode@CvDllGame@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bDebugMode$ = 12					; size = 1
?SetDebugMode@CvDllGame@@UAGX_N@Z PROC			; CvDllGame::SetDebugMode, COMDAT

; 429  : {

	push	ebp
	mov	ebp, esp

; 430  : 	m_pGame->setDebugMode(bDebugMode);

	movzx	eax, BYTE PTR _bDebugMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?setDebugMode@CvGame@@QAEX_N@Z		; CvGame::setDebugMode

; 431  : }

	pop	ebp
	ret	8
?SetDebugMode@CvDllGame@@UAGX_N@Z ENDP			; CvDllGame::SetDebugMode
_TEXT	ENDS
EXTRN	?setFinalInitialized@CvGame@@QAEX_N@Z:PROC	; CvGame::setFinalInitialized
; Function compile flags: /Odtp
;	COMDAT ?SetFinalInitialized@CvDllGame@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bNewValue$ = 12					; size = 1
?SetFinalInitialized@CvDllGame@@UAGX_N@Z PROC		; CvDllGame::SetFinalInitialized, COMDAT

; 434  : {

	push	ebp
	mov	ebp, esp

; 435  : 	m_pGame->setFinalInitialized(bNewValue);

	movzx	eax, BYTE PTR _bNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?setFinalInitialized@CvGame@@QAEX_N@Z	; CvGame::setFinalInitialized

; 436  : }

	pop	ebp
	ret	8
?SetFinalInitialized@CvDllGame@@UAGX_N@Z ENDP		; CvDllGame::SetFinalInitialized
_TEXT	ENDS
EXTRN	?setInitialTime@CvGame@@QAEXI@Z:PROC		; CvGame::setInitialTime
; Function compile flags: /Odtp
;	COMDAT ?SetInitialTime@CvDllGame@@UAGXI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_uiNewValue$ = 12					; size = 4
?SetInitialTime@CvDllGame@@UAGXI@Z PROC			; CvDllGame::SetInitialTime, COMDAT

; 439  : {

	push	ebp
	mov	ebp, esp

; 440  : 	m_pGame->setInitialTime(uiNewValue);

	mov	eax, DWORD PTR _uiNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?setInitialTime@CvGame@@QAEXI@Z		; CvGame::setInitialTime

; 441  : }

	pop	ebp
	ret	8
?SetInitialTime@CvDllGame@@UAGXI@Z ENDP			; CvDllGame::SetInitialTime
_TEXT	ENDS
EXTRN	?setMPOption@CvGame@@QAEXW4MultiplayerOptionTypes@@_N@Z:PROC ; CvGame::setMPOption
; Function compile flags: /Odtp
;	COMDAT ?SetMPOption@CvDllGame@@UAEXW4MultiplayerOptionTypes@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eIndex$ = 8						; size = 4
_bEnabled$ = 12						; size = 1
?SetMPOption@CvDllGame@@UAEXW4MultiplayerOptionTypes@@_N@Z PROC ; CvDllGame::SetMPOption, COMDAT
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	m_pGame->setMPOption(eIndex, bEnabled);

	movzx	eax, BYTE PTR _bEnabled$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?setMPOption@CvGame@@QAEXW4MultiplayerOptionTypes@@_N@Z ; CvGame::setMPOption

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetMPOption@CvDllGame@@UAEXW4MultiplayerOptionTypes@@_N@Z ENDP ; CvDllGame::SetMPOption
_TEXT	ENDS
EXTRN	?setPausePlayer@CvGame@@QAEXW4PlayerTypes@@@Z:PROC ; CvGame::setPausePlayer
; Function compile flags: /Odtp
;	COMDAT ?SetPausePlayer@CvDllGame@@UAGXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eNewValue$ = 12					; size = 4
?SetPausePlayer@CvDllGame@@UAGXW4PlayerTypes@@@Z PROC	; CvDllGame::SetPausePlayer, COMDAT

; 449  : {

	push	ebp
	mov	ebp, esp

; 450  : 	m_pGame->setPausePlayer(eNewValue);

	mov	eax, DWORD PTR _eNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?setPausePlayer@CvGame@@QAEXW4PlayerTypes@@@Z ; CvGame::setPausePlayer

; 451  : }

	pop	ebp
	ret	8
?SetPausePlayer@CvDllGame@@UAGXW4PlayerTypes@@@Z ENDP	; CvDllGame::SetPausePlayer
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	__$ArrayPad$
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:PROC ; CvGameTextMgr::setDateStr
EXTRN	?getCalendar@CvGame@@QBE?AW4CalendarTypes@@XZ:PROC ; CvGame::getCalendar
EXTRN	?getStartYear@CvGame@@QBEHXZ:PROC		; CvGame::getStartYear
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z$0
__ehfuncinfo$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllgame.cpp
xdata$x	ENDS
;	COMDAT ?SetTimeStr@CvDllGame@@UAGXPADH_N@Z
_TEXT	SEGMENT
_strString$218882 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_szString$ = 12						; size = 4
_iGameTurn$ = 16					; size = 4
_bSave$ = 20						; size = 1
?SetTimeStr@CvDllGame@@UAGXPADH_N@Z PROC		; CvDllGame::SetTimeStr, COMDAT

; 454  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 455  : 	if(szString)

	cmp	DWORD PTR _szString$[ebp], 0
	je	SHORT $LN2@SetTimeStr

; 456  : 	{
; 457  : 		CvString strString;

	lea	ecx, DWORD PTR _strString$218882[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 458  : 		CvGameTextMgr::setDateStr(strString,
; 459  : 		                          iGameTurn,
; 460  : 		                          bSave,
; 461  : 		                          m_pGame->getCalendar(),
; 462  : 		                          m_pGame->getStartYear(),
; 463  : 		                          m_pGame->getGameSpeedType());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ ; CvGame::getGameSpeedType
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getStartYear@CvGame@@QBEHXZ		; CvGame::getStartYear
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?getCalendar@CvGame@@QBE?AW4CalendarTypes@@XZ ; CvGame::getCalendar
	push	eax
	movzx	eax, BYTE PTR _bSave$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iGameTurn$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strString$218882[ebp]
	push	edx
	call	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setDateStr
	add	esp, 24					; 00000018H

; 464  : 
; 465  : 		strcpy_s(szString, 256, strString.c_str());

	lea	ecx, DWORD PTR _strString$218882[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	256					; 00000100H
	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH

; 466  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strString$218882[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@SetTimeStr:

; 467  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z$0:
	lea	ecx, DWORD PTR _strString$218882[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetTimeStr@CvDllGame@@UAGXPADH_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetTimeStr@CvDllGame@@UAGXPADH_N@Z ENDP		; CvDllGame::SetTimeStr
EXTRN	?TunerEverConnected@CvGame@@QBE_NXZ:PROC	; CvGame::TunerEverConnected
; Function compile flags: /Odtp
;	COMDAT ?TunerEverConnected@CvDllGame@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?TunerEverConnected@CvDllGame@@UBG_NXZ PROC		; CvDllGame::TunerEverConnected, COMDAT

; 470  : {

	push	ebp
	mov	ebp, esp

; 471  : 	return m_pGame->TunerEverConnected();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?TunerEverConnected@CvGame@@QBE_NXZ	; CvGame::TunerEverConnected

; 472  : }

	pop	ebp
	ret	4
?TunerEverConnected@CvDllGame@@UBG_NXZ ENDP		; CvDllGame::TunerEverConnected
_TEXT	ENDS
EXTRN	?uninit@CvGame@@QAEXXZ:PROC			; CvGame::uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Uninit@CvDllGame@@UAGXXZ PROC				; CvDllGame::Uninit, COMDAT

; 475  : {

	push	ebp
	mov	ebp, esp

; 476  : 	m_pGame->uninit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?uninit@CvGame@@QAEXXZ			; CvGame::uninit

; 477  : }

	pop	ebp
	ret	4
?Uninit@CvDllGame@@UAGXXZ ENDP				; CvDllGame::Uninit
_TEXT	ENDS
EXTRN	?unitIsMoving@CvGame@@QAEXXZ:PROC		; CvGame::unitIsMoving
; Function compile flags: /Odtp
;	COMDAT ?UnitIsMoving@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UnitIsMoving@CvDllGame@@UAGXXZ PROC			; CvDllGame::UnitIsMoving, COMDAT

; 480  : {

	push	ebp
	mov	ebp, esp

; 481  : 	m_pGame->unitIsMoving();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?unitIsMoving@CvGame@@QAEXXZ		; CvGame::unitIsMoving

; 482  : }

	pop	ebp
	ret	4
?UnitIsMoving@CvDllGame@@UAGXXZ ENDP			; CvDllGame::UnitIsMoving
_TEXT	ENDS
EXTRN	?update@CvGame@@QAEXXZ:PROC			; CvGame::update
; Function compile flags: /Odtp
;	COMDAT ?Update@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Update@CvDllGame@@UAGXXZ PROC				; CvDllGame::Update, COMDAT

; 485  : {

	push	ebp
	mov	ebp, esp

; 486  : 	m_pGame->update();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?update@CvGame@@QAEXXZ			; CvGame::update

; 487  : }

	pop	ebp
	ret	4
?Update@CvDllGame@@UAGXXZ ENDP				; CvDllGame::Update
_TEXT	ENDS
EXTRN	?updateSelectionList@CvGame@@QAEXXZ:PROC	; CvGame::updateSelectionList
; Function compile flags: /Odtp
;	COMDAT ?UpdateSelectionList@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UpdateSelectionList@CvDllGame@@UAGXXZ PROC		; CvDllGame::UpdateSelectionList, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	m_pGame->updateSelectionList();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?updateSelectionList@CvGame@@QAEXXZ	; CvGame::updateSelectionList

; 492  : }

	pop	ebp
	ret	4
?UpdateSelectionList@CvDllGame@@UAGXXZ ENDP		; CvDllGame::UpdateSelectionList
_TEXT	ENDS
EXTRN	?updateTestEndTurn@CvGame@@QAEXXZ:PROC		; CvGame::updateTestEndTurn
; Function compile flags: /Odtp
;	COMDAT ?UpdateTestEndTurn@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UpdateTestEndTurn@CvDllGame@@UAGXXZ PROC		; CvDllGame::UpdateTestEndTurn, COMDAT

; 495  : {

	push	ebp
	mov	ebp, esp

; 496  : 	m_pGame->updateTestEndTurn();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?updateTestEndTurn@CvGame@@QAEXXZ	; CvGame::updateTestEndTurn

; 497  : }

	pop	ebp
	ret	4
?UpdateTestEndTurn@CvDllGame@@UAGXXZ ENDP		; CvDllGame::UpdateTestEndTurn
_TEXT	ENDS
EXTRN	?Read@CvGame@@QAEXAAVFDataStream@@@Z:PROC	; CvGame::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvDllGame@@UAGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Read@CvDllGame@@UAGXAAVFDataStream@@@Z PROC		; CvDllGame::Read, COMDAT

; 500  : {

	push	ebp
	mov	ebp, esp

; 501  : 	m_pGame->Read(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Read@CvGame@@QAEXAAVFDataStream@@@Z	; CvGame::Read

; 502  : }

	pop	ebp
	ret	8
?Read@CvDllGame@@UAGXAAVFDataStream@@@Z ENDP		; CvDllGame::Read
_TEXT	ENDS
EXTRN	?Write@CvGame@@QBEXAAVFDataStream@@@Z:PROC	; CvGame::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvDllGame@@UBGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Write@CvDllGame@@UBGXAAVFDataStream@@@Z PROC		; CvDllGame::Write, COMDAT

; 505  : {

	push	ebp
	mov	ebp, esp

; 506  : 	m_pGame->Write(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Write@CvGame@@QBEXAAVFDataStream@@@Z	; CvGame::Write

; 507  : }

	pop	ebp
	ret	8
?Write@CvDllGame@@UBGXAAVFDataStream@@@Z ENDP		; CvDllGame::Write
_TEXT	ENDS
EXTRN	?ReadSupportingClassData@CvGame@@QAEXAAVFDataStream@@@Z:PROC ; CvGame::ReadSupportingClassData
; Function compile flags: /Odtp
;	COMDAT ?ReadSupportingClassData@CvDllGame@@UAGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?ReadSupportingClassData@CvDllGame@@UAGXAAVFDataStream@@@Z PROC ; CvDllGame::ReadSupportingClassData, COMDAT

; 510  : {

	push	ebp
	mov	ebp, esp

; 511  : 	m_pGame->ReadSupportingClassData(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ReadSupportingClassData@CvGame@@QAEXAAVFDataStream@@@Z ; CvGame::ReadSupportingClassData

; 512  : }

	pop	ebp
	ret	8
?ReadSupportingClassData@CvDllGame@@UAGXAAVFDataStream@@@Z ENDP ; CvDllGame::ReadSupportingClassData
_TEXT	ENDS
EXTRN	?WriteSupportingClassData@CvGame@@QAEXAAVFDataStream@@@Z:PROC ; CvGame::WriteSupportingClassData
; Function compile flags: /Odtp
;	COMDAT ?WriteSupportingClassData@CvDllGame@@UBGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?WriteSupportingClassData@CvDllGame@@UBGXAAVFDataStream@@@Z PROC ; CvDllGame::WriteSupportingClassData, COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp

; 516  : 	m_pGame->WriteSupportingClassData(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?WriteSupportingClassData@CvGame@@QAEXAAVFDataStream@@@Z ; CvGame::WriteSupportingClassData

; 517  : }

	pop	ebp
	ret	8
?WriteSupportingClassData@CvDllGame@@UBGXAAVFDataStream@@@Z ENDP ; CvDllGame::WriteSupportingClassData
_TEXT	ENDS
EXTRN	?writeReplay@CvGame@@QAEXAAVFDataStream@@@Z:PROC ; CvGame::writeReplay
; Function compile flags: /Odtp
;	COMDAT ?WriteReplay@CvDllGame@@UBGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?WriteReplay@CvDllGame@@UBGXAAVFDataStream@@@Z PROC	; CvDllGame::WriteReplay, COMDAT

; 520  : {

	push	ebp
	mov	ebp, esp

; 521  : 	m_pGame->writeReplay(kStream);

	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?writeReplay@CvGame@@QAEXAAVFDataStream@@@Z ; CvGame::writeReplay

; 522  : }

	pop	ebp
	ret	8
?WriteReplay@CvDllGame@@UBGXAAVFDataStream@@@Z ENDP	; CvDllGame::WriteReplay
_TEXT	ENDS
EXTRN	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z:PROC	; CvAStar::GeneratePath
EXTRN	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ:PROC ; CvGlobals::getInterfacePathFinder
EXTRN	?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z:PROC ; CvGlobals::UnwrapPlotPointer
EXTRN	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z:PROC ; CvGlobals::UnwrapUnitPointer
; Function compile flags: /Odtp
;	COMDAT ?CanMoveUnitTo@CvDllGame@@UBG_NPAVICvUnit1@@PAVICvPlot1@@@Z
_TEXT	SEGMENT
$T219559 = -40						; size = 4
$T219555 = -36						; size = 4
$T219546 = -32						; size = 4
$T219537 = -28						; size = 4
$T219533 = -24						; size = 4
$T219529 = -20						; size = 4
_pkUnit$ = -16						; size = 4
_pNode$ = -12						; size = 4
_bCanFindPath$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
_pPlot$ = 16						; size = 4
?CanMoveUnitTo@CvDllGame@@UBG_NPAVICvUnit1@@PAVICvPlot1@@@Z PROC ; CvDllGame::CanMoveUnitTo, COMDAT

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 526  : 	if(pUnit == NULL || pPlot == NULL)

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN4@CanMoveUni
	cmp	DWORD PTR _pPlot$[ebp], 0
	jne	SHORT $LN5@CanMoveUni
$LN4@CanMoveUni:

; 527  : 	{
; 528  : 		return false;

	xor	al, al
	jmp	$LN6@CanMoveUni
$LN5@CanMoveUni:

; 529  : 	}
; 530  : 
; 531  : 	CvUnit* pkUnit = GC.UnwrapUnitPointer(pUnit);

	mov	eax, DWORD PTR _pUnit$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	DWORD PTR _pkUnit$[ebp], eax

; 532  : 	CvPlot* pkPlot = GC.UnwrapPlotPointer(pPlot);

	mov	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapPlotPointer@CvGlobals@@QAEPAVCvPlot@@PAVICvPlot1@@@Z ; CvGlobals::UnwrapPlotPointer
	mov	DWORD PTR _pkPlot$[ebp], eax

; 533  : 
; 534  : 	GC.getInterfacePathFinder().SetData(pkUnit);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR $T219529[ebp], eax
	mov	edx, DWORD PTR $T219529[ebp]
	movzx	eax, BYTE PTR [edx+80]
	test	eax, eax
	je	SHORT $LN8@CanMoveUni
	mov	ecx, DWORD PTR $T219529[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	edx, DWORD PTR _pkUnit$[ebp]
	je	SHORT $LN8@CanMoveUni
	mov	eax, DWORD PTR $T219529[ebp]
	mov	BYTE PTR [eax+78], 1
$LN8@CanMoveUni:
	mov	ecx, DWORD PTR $T219529[ebp]
	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	DWORD PTR [ecx+44], edx

; 535  : 
; 536  : 	// can the unit actually walk there
; 537  : 	bool bCanFindPath = GC.getInterfacePathFinder().GeneratePath(pkUnit->getX(), pkUnit->getY(), pkPlot->getX(), pkPlot->getY(), MOVE_UNITS_IGNORE_DANGER | MOVE_UNITS_THROUGH_ENEMY /*iFlags*/, true/*bReuse*/);

	mov	eax, DWORD PTR _pkPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T219533[ebp], ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T219537[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T219546[ebp], edx
	mov	eax, DWORD PTR _pkUnit$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T219555[ebp], ecx
	push	1
	push	24					; 00000018H
	mov	edx, DWORD PTR $T219533[ebp]
	push	edx
	mov	eax, DWORD PTR $T219537[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219546[ebp]
	push	ecx
	mov	edx, DWORD PTR $T219555[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	ecx, eax
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	mov	BYTE PTR _bCanFindPath$[ebp], al

; 538  : 	if(!bCanFindPath)

	movzx	eax, BYTE PTR _bCanFindPath$[ebp]
	test	eax, eax
	jne	SHORT $LN3@CanMoveUni

; 539  : 	{
; 540  : 		return false;

	xor	al, al
	jmp	SHORT $LN6@CanMoveUni
$LN3@CanMoveUni:

; 541  : 	}
; 542  : 
; 543  : 	CvAStarNode* pNode = GC.getInterfacePathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR $T219559[ebp], eax
	mov	ecx, DWORD PTR $T219559[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR _pNode$[ebp], edx

; 544  : 	FAssertMsg(pNode, "Invalid node. What?");
; 545  : 	if(!pNode)

	cmp	DWORD PTR _pNode$[ebp], 0
	jne	SHORT $LN2@CanMoveUni

; 546  : 	{
; 547  : 		return false;

	xor	al, al
	jmp	SHORT $LN6@CanMoveUni
$LN2@CanMoveUni:

; 548  : 	}
; 549  : 
; 550  : 	// move is too far away
; 551  : 	if(pNode->m_iData2 >= 2)

	mov	eax, DWORD PTR _pNode$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jl	SHORT $LN1@CanMoveUni

; 552  : 	{
; 553  : 		return false;

	xor	al, al
	jmp	SHORT $LN6@CanMoveUni
$LN1@CanMoveUni:

; 554  : 	}
; 555  : 
; 556  : 	return true;

	mov	al, 1
$LN6@CanMoveUni:

; 557  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CanMoveUnitTo@CvDllGame@@UBG_NPAVICvUnit1@@PAVICvPlot1@@@Z ENDP ; CvDllGame::CanMoveUnitTo
_TEXT	ENDS
EXTRN	?NetMessageStaticsReset@CvGame@@QAEXXZ:PROC	; CvGame::NetMessageStaticsReset
; Function compile flags: /Odtp
;	COMDAT ?NetMessageStaticsReset@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?NetMessageStaticsReset@CvDllGame@@UAGXXZ PROC		; CvDllGame::NetMessageStaticsReset, COMDAT

; 561  : {

	push	ebp
	mov	ebp, esp

; 562  : 	m_pGame->NetMessageStaticsReset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?NetMessageStaticsReset@CvGame@@QAEXXZ	; CvGame::NetMessageStaticsReset

; 563  : }

	pop	ebp
	ret	4
?NetMessageStaticsReset@CvDllGame@@UAGXXZ ENDP		; CvDllGame::NetMessageStaticsReset
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z:PROC ; CultureHelpers::GetGreatWorkAudio
EXTRN	?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z:PROC ; CvGameCulture::GetGreatWorkType
EXTRN	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ:PROC ; CvGame::GetGameCulture
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z$0
__ehfuncinfo$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllgame.cpp
xdata$x	ENDS
;	COMDAT ?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z
_TEXT	SEGMENT
$T219565 = -49						; size = 1
_audio$218947 = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_eType$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_GreatWorkIndex$ = 12					; size = 4
_strSound$ = 16						; size = 4
_length$ = 20						; size = 4
?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z PROC		; CvDllGame::GetGreatWorkAudio, COMDAT

; 566  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 567  : 	if (GreatWorkIndex == -1)

	cmp	DWORD PTR _GreatWorkIndex$[ebp], -1
	jne	SHORT $LN4@GetGreatWo

; 568  : 	{
; 569  : 		return false;

	xor	al, al
	jmp	$LN5@GetGreatWo
$LN4@GetGreatWo:

; 570  : 	}
; 571  : 
; 572  : 	const GreatWorkType eType = m_pGame->GetGameCulture()->GetGreatWorkType(GreatWorkIndex);

	mov	eax, DWORD PTR _GreatWorkIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetGameCulture@CvGame@@QAEPAVCvGameCulture@@XZ ; CvGame::GetGameCulture
	mov	ecx, eax
	call	?GetGreatWorkType@CvGameCulture@@QBE?AW4GreatWorkType@@H@Z ; CvGameCulture::GetGreatWorkType
	mov	DWORD PTR _eType$[ebp], eax

; 573  : 	if(eType != NO_GREAT_WORK)

	cmp	DWORD PTR _eType$[ebp], -1
	je	SHORT $LN3@GetGreatWo

; 574  : 	{
; 575  : 		const CvString audio = CultureHelpers::GetGreatWorkAudio(eType);

	mov	edx, DWORD PTR _eType$[ebp]
	push	edx
	lea	eax, DWORD PTR _audio$218947[ebp]
	push	eax
	call	?GetGreatWorkAudio@CultureHelpers@@YA?AVCvString@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkAudio
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 576  : 
; 577  : 		if(audio.GetLength() <= length)

	lea	ecx, DWORD PTR _audio$218947[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	cmp	eax, DWORD PTR _length$[ebp]
	jg	SHORT $LN2@GetGreatWo

; 578  : 		{
; 579  : 			if(strcpy_s(strSound, length, audio.c_str()) == 0)

	lea	ecx, DWORD PTR _audio$218947[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSound$[ebp]
	push	edx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@GetGreatWo

; 580  : 			{
; 581  : 				return true;

	mov	BYTE PTR $T219565[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _audio$218947[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T219565[ebp]
	jmp	SHORT $LN5@GetGreatWo
$LN2@GetGreatWo:

; 582  : 			}
; 583  : 		}
; 584  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _audio$218947[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@GetGreatWo:

; 585  : 
; 586  : 	return false;

	xor	al, al
$LN5@GetGreatWo:

; 587  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z$0:
	lea	ecx, DWORD PTR _audio$218947[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGreatWorkAudio@CvDllGame@@UAG_NHPADH@Z ENDP		; CvDllGame::GetGreatWorkAudio
EXTRN	?SetLastTurnAICivsProcessed@CvGame@@QAEXXZ:PROC	; CvGame::SetLastTurnAICivsProcessed
; Function compile flags: /Odtp
;	COMDAT ?SetLastTurnAICivsProcessed@CvDllGame@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?SetLastTurnAICivsProcessed@CvDllGame@@UAGXXZ PROC	; CvDllGame::SetLastTurnAICivsProcessed, COMDAT

; 590  : {

	push	ebp
	mov	ebp, esp

; 591  : 	m_pGame->SetLastTurnAICivsProcessed();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLastTurnAICivsProcessed@CvGame@@QAEXXZ ; CvGame::SetLastTurnAICivsProcessed

; 592  : }

	pop	ebp
	ret	4
?SetLastTurnAICivsProcessed@CvDllGame@@UAGXXZ ENDP	; CvDllGame::SetLastTurnAICivsProcessed
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
END
