; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvInternalGameCoreUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
EXTRN	?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ:PROC ; CvBuildingClassInfo::getMaxGlobalInstances
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinternalgamecoreutils.cpp
;	COMDAT ?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z
_TEXT	SEGMENT
_kBuildingClass$ = 8					; size = 4
?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z PROC ; isWorldWonderClass, COMDAT

; 14   : {

	push	ebp
	mov	ebp, esp

; 15   : 	return kBuildingClass.getMaxGlobalInstances() != -1;;

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxGlobalInstances
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
	mov	al, cl

; 16   : }

	pop	ebp
	ret	0
?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ENDP ; isWorldWonderClass
_TEXT	ENDS
PUBLIC	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
EXTRN	?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ:PROC ; CvBuildingClassInfo::getMaxTeamInstances
; Function compile flags: /Odtp
;	COMDAT ?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z
_TEXT	SEGMENT
_kBuildingClass$ = 8					; size = 4
?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z PROC	; isTeamWonderClass, COMDAT

; 19   : {

	push	ebp
	mov	ebp, esp

; 20   : 	return kBuildingClass.getMaxTeamInstances() != -1;

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxTeamInstances
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
	mov	al, cl

; 21   : }

	pop	ebp
	ret	0
?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ENDP	; isTeamWonderClass
_TEXT	ENDS
PUBLIC	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
EXTRN	?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ:PROC ; CvBuildingClassInfo::getMaxPlayerInstances
; Function compile flags: /Odtp
;	COMDAT ?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z
_TEXT	SEGMENT
_kBuildingClass$ = 8					; size = 4
?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z PROC ; isNationalWonderClass, COMDAT

; 24   : {

	push	ebp
	mov	ebp, esp

; 25   : 	return kBuildingClass.getMaxPlayerInstances() != -1;

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxPlayerInstances
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
	mov	al, cl

; 26   : }

	pop	ebp
	ret	0
?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ENDP ; isNationalWonderClass
_TEXT	ENDS
PUBLIC	?isLimitedWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isLimitedWonderClass
; Function compile flags: /Odtp
;	COMDAT ?isLimitedWonderClass@@YA_NABVCvBuildingClassInfo@@@Z
_TEXT	SEGMENT
tv76 = -4						; size = 4
_kBuildingClass$ = 8					; size = 4
?isLimitedWonderClass@@YA_NABVCvBuildingClassInfo@@@Z PROC ; isLimitedWonderClass, COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 30   : 	return (isWorldWonderClass(kBuildingClass) || isTeamWonderClass(kBuildingClass) || isNationalWonderClass(kBuildingClass));

	mov	eax, DWORD PTR _kBuildingClass$[ebp]
	push	eax
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@isLimitedW
	mov	edx, DWORD PTR _kBuildingClass$[ebp]
	push	edx
	call	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@isLimitedW
	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	push	ecx
	call	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@isLimitedW
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@isLimitedW
$LN3@isLimitedW:
	mov	DWORD PTR tv76[ebp], 1
$LN4@isLimitedW:
	mov	al, BYTE PTR tv76[ebp]

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isLimitedWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ENDP ; isLimitedWonderClass
_TEXT	ENDS
PUBLIC	?limitedWonderClassLimit@@YAHABVCvBuildingClassInfo@@@Z ; limitedWonderClassLimit
; Function compile flags: /Odtp
;	COMDAT ?limitedWonderClassLimit@@YAHABVCvBuildingClassInfo@@@Z
_TEXT	SEGMENT
tv78 = -16						; size = 4
_iCount$ = -12						; size = 4
_bIsLimited$ = -5					; size = 1
_iMax$ = -4						; size = 4
_kBuildingClass$ = 8					; size = 4
?limitedWonderClassLimit@@YAHABVCvBuildingClassInfo@@@Z PROC ; limitedWonderClassLimit, COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 35   : 	int iCount = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 36   : 	bool bIsLimited = false;

	mov	BYTE PTR _bIsLimited$[ebp], 0

; 37   : 
; 38   : 	int iMax = -1;

	mov	DWORD PTR _iMax$[ebp], -1

; 39   : 	iMax = kBuildingClass.getMaxGlobalInstances();

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxGlobalInstances
	mov	DWORD PTR _iMax$[ebp], eax

; 40   : 	if(iMax != -1)

	cmp	DWORD PTR _iMax$[ebp], -1
	je	SHORT $LN3@limitedWon

; 41   : 	{
; 42   : 		iCount += iMax;

	mov	eax, DWORD PTR _iCount$[ebp]
	add	eax, DWORD PTR _iMax$[ebp]
	mov	DWORD PTR _iCount$[ebp], eax

; 43   : 		bIsLimited = true;

	mov	BYTE PTR _bIsLimited$[ebp], 1
$LN3@limitedWon:

; 44   : 	}
; 45   : 
; 46   : 	iMax = kBuildingClass.getMaxTeamInstances();

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxTeamInstances
	mov	DWORD PTR _iMax$[ebp], eax

; 47   : 	if(iMax != -1)

	cmp	DWORD PTR _iMax$[ebp], -1
	je	SHORT $LN2@limitedWon

; 48   : 	{
; 49   : 		iCount += iMax;

	mov	ecx, DWORD PTR _iCount$[ebp]
	add	ecx, DWORD PTR _iMax$[ebp]
	mov	DWORD PTR _iCount$[ebp], ecx

; 50   : 		bIsLimited = true;

	mov	BYTE PTR _bIsLimited$[ebp], 1
$LN2@limitedWon:

; 51   : 	}
; 52   : 
; 53   : 	iMax = kBuildingClass.getMaxPlayerInstances();

	mov	ecx, DWORD PTR _kBuildingClass$[ebp]
	call	?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxPlayerInstances
	mov	DWORD PTR _iMax$[ebp], eax

; 54   : 	if(iMax != -1)

	cmp	DWORD PTR _iMax$[ebp], -1
	je	SHORT $LN1@limitedWon

; 55   : 	{
; 56   : 		iCount += iMax;

	mov	edx, DWORD PTR _iCount$[ebp]
	add	edx, DWORD PTR _iMax$[ebp]
	mov	DWORD PTR _iCount$[ebp], edx

; 57   : 		bIsLimited = true;

	mov	BYTE PTR _bIsLimited$[ebp], 1
$LN1@limitedWon:

; 58   : 	}
; 59   : 
; 60   : 	return bIsLimited ? iCount : -1;

	movzx	eax, BYTE PTR _bIsLimited$[ebp]
	test	eax, eax
	je	SHORT $LN6@limitedWon
	mov	ecx, DWORD PTR _iCount$[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN7@limitedWon
$LN6@limitedWon:
	mov	DWORD PTR tv78[ebp], -1
$LN7@limitedWon:
	mov	eax, DWORD PTR tv78[ebp]

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?limitedWonderClassLimit@@YAHABVCvBuildingClassInfo@@@Z ENDP ; limitedWonderClassLimit
_TEXT	ENDS
PUBLIC	?getWorldSizeMaxConscript@@YAHABVCvPolicyEntry@@@Z ; getWorldSizeMaxConscript
EXTRN	?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ:PROC ; CvWorldInfo::getMaxConscriptModifier
EXTRN	?getWorldInfo@CvMap@@QBEABVCvWorldInfo@@XZ:PROC	; CvMap::getWorldInfo
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?GetMaxConscript@CvPolicyEntry@@QBEHXZ:PROC	; CvPolicyEntry::GetMaxConscript
; Function compile flags: /Odtp
;	COMDAT ?getWorldSizeMaxConscript@@YAHABVCvPolicyEntry@@@Z
_TEXT	SEGMENT
tv79 = -24						; size = 4
$T216743 = -20						; size = 4
$T216736 = -16						; size = 4
$T216732 = -12						; size = 4
$T216731 = -8						; size = 4
_iMaxConscript$ = -4					; size = 4
_kPolicy$ = 8						; size = 4
?getWorldSizeMaxConscript@@YAHABVCvPolicyEntry@@@Z PROC	; getWorldSizeMaxConscript, COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 65   : 	int iMaxConscript = kPolicy.GetMaxConscript();

	mov	ecx, DWORD PTR _kPolicy$[ebp]
	call	?GetMaxConscript@CvPolicyEntry@@QBEHXZ	; CvPolicyEntry::GetMaxConscript
	mov	DWORD PTR _iMaxConscript$[ebp], eax

; 66   : 
; 67   : 	iMaxConscript *= std::max(0, (GC.getMap().getWorldInfo().getMaxConscriptModifier() + 100));

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T216736[ebp], eax
	mov	ecx, DWORD PTR $T216736[ebp]
	call	?getWorldInfo@CvMap@@QBEABVCvWorldInfo@@XZ ; CvMap::getWorldInfo
	mov	ecx, eax
	call	?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getMaxConscriptModifier
	add	eax, 100				; 00000064H
	mov	DWORD PTR $T216731[ebp], eax
	mov	DWORD PTR $T216732[ebp], 0
	mov	ecx, DWORD PTR $T216732[ebp]
	cmp	ecx, DWORD PTR $T216731[ebp]
	jge	SHORT $LN7@getWorldSi
	lea	edx, DWORD PTR $T216731[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN8@getWorldSi
$LN7@getWorldSi:
	lea	eax, DWORD PTR $T216732[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN8@getWorldSi:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T216743[ebp], ecx
	mov	edx, DWORD PTR $T216743[ebp]
	mov	eax, DWORD PTR _iMaxConscript$[ebp]
	imul	eax, DWORD PTR [edx]
	mov	DWORD PTR _iMaxConscript$[ebp], eax

; 68   : 	iMaxConscript /= 100;

	mov	eax, DWORD PTR _iMaxConscript$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iMaxConscript$[ebp], eax

; 69   : 
; 70   : 	return iMaxConscript;

	mov	eax, DWORD PTR _iMaxConscript$[ebp]

; 71   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldSizeMaxConscript@@YAHABVCvPolicyEntry@@@Z ENDP	; getWorldSizeMaxConscript
_TEXT	ENDS
END
