; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvAdvisorRecommender.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
PUBLIC	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
PUBLIC	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
PUBLIC	?Init@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Init
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
PUBLIC	??0CvAdvisorRecommender@@QAE@XZ			; CvAdvisorRecommender::CvAdvisorRecommender
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvAdvisorRecommender@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$3
__ehfuncinfo$??0CvAdvisorRecommender@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CvAdvisorRecommender@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ??0CvAdvisorRecommender@@QAE@XZ
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T220314 = -68						; size = 4
$T220297 = -56						; size = 4
$T220280 = -44						; size = 4
$T220263 = -32						; size = 4
$T220246 = -20						; size = 4
$T220245 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvAdvisorRecommender@@QAE@XZ PROC			; CvAdvisorRecommender::CvAdvisorRecommender, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvAdvisorRecommender@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220246[ebp], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T220245[ebp], eax
$LN8@CvAdvisorR:
	mov	ecx, DWORD PTR $T220246[ebp]
	sub	ecx, 1
	mov	DWORD PTR $T220246[ebp], ecx
	js	SHORT $LN9@CvAdvisorR
	mov	edx, DWORD PTR $T220245[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T220245[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR $T220245[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR $T220245[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T220245[ebp], edx
	jmp	SHORT $LN8@CvAdvisorR
$LN9@CvAdvisorR:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T220263[ebp], eax
	mov	ecx, DWORD PTR $T220263[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	mov	DWORD PTR $T220280[ebp], ecx
	mov	ecx, DWORD PTR $T220280[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 768				; 00000300H
	mov	DWORD PTR $T220297[ebp], edx
	mov	ecx, DWORD PTR $T220297[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1584				; 00000630H
	mov	DWORD PTR $T220314[ebp], eax
	mov	ecx, DWORD PTR $T220314[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 17   : 	Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::Init

; 18   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ	; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1584				; 00000630H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
__ehhandler$??0CvAdvisorRecommender@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvAdvisorRecommender@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvAdvisorRecommender@@QAE@XZ ENDP			; CvAdvisorRecommender::CvAdvisorRecommender
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?Uninit@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Uninit
PUBLIC	??1CvAdvisorRecommender@@QAE@XZ			; CvAdvisorRecommender::~CvAdvisorRecommender
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvAdvisorRecommender@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$3
__ehfuncinfo$??1CvAdvisorRecommender@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CvAdvisorRecommender@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ??1CvAdvisorRecommender@@QAE@XZ
_TEXT	SEGMENT
_this$ = -80						; size = 4
$T220461 = -76						; size = 4
$T220429 = -60						; size = 4
$T220397 = -44						; size = 4
$T220365 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvAdvisorRecommender@@QAE@XZ PROC			; CvAdvisorRecommender::~CvAdvisorRecommender, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvAdvisorRecommender@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 22   : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::Uninit

; 23   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1584				; 00000630H
	mov	DWORD PTR $T220365[ebp], eax
	mov	ecx, DWORD PTR $T220365[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	mov	DWORD PTR $T220397[ebp], ecx
	mov	ecx, DWORD PTR $T220397[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 720				; 000002d0H
	mov	DWORD PTR $T220429[ebp], edx
	mov	ecx, DWORD PTR $T220429[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T220461[ebp], eax
	mov	ecx, DWORD PTR $T220461[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ	; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1584				; 00000630H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
__ehhandler$??1CvAdvisorRecommender@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvAdvisorRecommender@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvAdvisorRecommender@@QAE@XZ ENDP			; CvAdvisorRecommender::~CvAdvisorRecommender
PUBLIC	?Reset@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Reset
; Function compile flags: /Odtp
;	COMDAT ?Init@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CvAdvisorRecommender@@QAEXXZ PROC			; CvAdvisorRecommender::Init, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::Reset

; 28   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CvAdvisorRecommender@@QAEXXZ ENDP			; CvAdvisorRecommender::Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Uninit@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninit@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::Uninit, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::Uninit
_TEXT	ENDS
PUBLIC	?ResetTechs@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::ResetTechs
PUBLIC	?ResetCity@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::ResetCity
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::Reset, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	ResetCity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCity@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::ResetCity

; 37   : 	ResetTechs();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetTechs@CvAdvisorRecommender@@QAEXXZ ; CvAdvisorRecommender::ResetTechs

; 38   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::Reset
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ResetCity@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T220537 = -20						; size = 4
_i$220530 = -16						; size = 4
$T220506 = -12						; size = 4
_i$220500 = -8						; size = 4
_ui$217176 = -4						; size = 4
?ResetCity@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::ResetCity, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217176[ebp], 0
	jmp	SHORT $LN3@ResetCity
$LN2@ResetCity:
	mov	eax, DWORD PTR _ui$217176[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217176[ebp], eax
$LN3@ResetCity:
	cmp	DWORD PTR _ui$217176[ebp], 4
	jae	SHORT $LN1@ResetCity

; 43   : 	{
; 44   : 		m_aRecommendedBuilds[ui].m_eBuildableType = NOT_A_CITY_BUILDABLE;

	mov	ecx, DWORD PTR _ui$217176[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 45   : 		m_aRecommendedBuilds[ui].m_iIndex = -1;

	mov	eax, DWORD PTR _ui$217176[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+4], -1

; 46   : 		m_aRecommendedBuilds[ui].m_iTurnsToConstruct = -1;

	mov	edx, DWORD PTR _ui$217176[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+8], -1

; 47   : 	}

	jmp	SHORT $LN2@ResetCity
$LN1@ResetCity:

; 48   : 
; 49   : 	m_aCityBuildables.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	mov	DWORD PTR $T220506[ebp], ecx
	xor	edx, edx
	je	SHORT $LN14@ResetCity
	mov	DWORD PTR _i$220500[ebp], 0
	jmp	SHORT $LN12@ResetCity
$LN11@ResetCity:
	mov	eax, DWORD PTR _i$220500[ebp]
	add	eax, 1
	mov	DWORD PTR _i$220500[ebp], eax
$LN12@ResetCity:
	mov	ecx, DWORD PTR $T220506[ebp]
	mov	edx, DWORD PTR _i$220500[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN14@ResetCity
	jmp	SHORT $LN11@ResetCity
$LN14@ResetCity:
	mov	eax, DWORD PTR $T220506[ebp]
	mov	DWORD PTR [eax+4], 0

; 50   : 	m_aFinalRoundBuildables.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1584				; 00000630H
	mov	DWORD PTR $T220537[ebp], ecx
	xor	edx, edx
	je	SHORT $LN24@ResetCity
	mov	DWORD PTR _i$220530[ebp], 0
	jmp	SHORT $LN22@ResetCity
$LN21@ResetCity:
	mov	eax, DWORD PTR _i$220530[ebp]
	add	eax, 1
	mov	DWORD PTR _i$220530[ebp], eax
$LN22@ResetCity:
	mov	ecx, DWORD PTR $T220537[ebp]
	mov	edx, DWORD PTR _i$220530[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN24@ResetCity
	jmp	SHORT $LN21@ResetCity
$LN24@ResetCity:
	mov	eax, DWORD PTR $T220537[ebp]
	mov	DWORD PTR [eax+4], 0

; 51   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetCity@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::ResetCity
_TEXT	ENDS
PUBLIC	?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back
PUBLIC	??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
PUBLIC	?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z ; CvAdvisorRecommender::UpdateCityRecommendations
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z:PROC ; CvProjectProductionAI::GetWeight
EXTRN	?GetProjectProductionAI@CvCityStrategyAI@@QAEPAVCvProjectProductionAI@@XZ:PROC ; CvCityStrategyAI::GetProjectProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z:PROC ; CvCity::canCreate
EXTRN	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ:PROC ; CvProjectXMLEntries::GetNumProjects
EXTRN	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ:PROC ; CvGlobals::GetGameProjects
EXTRN	?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z:PROC ; CvUnitProductionAI::GetWeight
EXTRN	?GetUnitProductionAI@CvCityStrategyAI@@QAEPAVCvUnitProductionAI@@XZ:PROC ; CvCityStrategyAI::GetUnitProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvCity::canTrain
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
EXTRN	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ:PROC ; CvGlobals::GetGameUnits
EXTRN	?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z:PROC ; CvBuildingProductionAI::GetWeight
EXTRN	?GetBuildingProductionAI@CvCityStrategyAI@@QAEPAVCvBuildingProductionAI@@XZ:PROC ; CvCityStrategyAI::GetBuildingProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
EXTRN	?getAsyncRandNum@CvGame@@QAEHHPBD@Z:PROC	; CvGame::getAsyncRandNum
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
; Function compile flags: /Odtp
;	COMDAT ?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -260						; size = 4
$T220798 = -256						; size = 4
_elem$220789 = -252					; size = 16
$T220760 = -236						; size = 4
$T220736 = -220						; size = 4
$T220732 = -216						; size = 4
$T220723 = -212						; size = 4
$T220718 = -208						; size = 4
_weightedElem$220717 = -204				; size = 16
$T220693 = -188						; size = 4
_elem$220692 = -184					; size = 16
$T220667 = -168						; size = 4
$T220662 = -164						; size = 4
$T220650 = -160						; size = 4
$T220646 = -156						; size = 4
$T220633 = -152						; size = 4
_elem$220632 = -148					; size = 16
$T220599 = -132						; size = 4
_weightedElem$220594 = -128				; size = 16
_weightedElem$220578 = -112				; size = 16
_weightedElem$220562 = -96				; size = 16
$T220543 = -80						; size = 4
_iScore$217375 = -76					; size = 4
_eAvailableAdvisor$217376 = -72				; size = 4
_i$217371 = -68						; size = 4
_i$217366 = -64						; size = 4
_iNewWeight$217365 = -60				; size = 4
_iI$217361 = -56					; size = 4
_eProject$217358 = -52					; size = 4
_iProjectLoop$217354 = -48				; size = 4
_eUnit$217351 = -44					; size = 4
_iUnitLoop$217347 = -40					; size = 4
_eBuilding$217344 = -36					; size = 4
_iBuildingLoop$217340 = -32				; size = 4
_fcn$ = -28						; size = 8
_iWeight$ = -20						; size = 4
_buildable$ = -16					; size = 12
_pCityStrategy$ = -4					; size = 4
_pCity$ = 8						; size = 4
?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z PROC ; CvAdvisorRecommender::UpdateCityRecommendations, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	ResetCity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCity@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::ResetCity

; 56   : 
; 57   : 	CvCityStrategyAI* pCityStrategy = pCity->GetCityStrategyAI();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	DWORD PTR _pCityStrategy$[ebp], eax

; 58   : 
; 59   : 	RandomNumberDelegate fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T220543[ebp], eax
	push	OFFSET ?getAsyncRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getAsyncRandNum
	mov	ecx, DWORD PTR $T220543[ebp]
	push	ecx
	lea	edx, DWORD PTR _fcn$[ebp]
	push	edx
	call	??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
	add	esp, 12					; 0000000cH

; 60   : 
; 61   : 	CvCityBuildable buildable;

	mov	DWORD PTR _buildable$[ebp], 0
	mov	DWORD PTR _buildable$[ebp+4], 0
	mov	DWORD PTR _buildable$[ebp+8], 0

; 62   : 	int iWeight;
; 63   : 
; 64   : 	// buildings
; 65   : #ifdef AUI_WARNING_FIXES
; 66   : 	for (uint iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)
; 67   : #else
; 68   : 	for(int iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)

	mov	DWORD PTR _iBuildingLoop$217340[ebp], 0
	jmp	SHORT $LN23@UpdateCity
$LN22@UpdateCity:
	mov	eax, DWORD PTR _iBuildingLoop$217340[ebp]
	add	eax, 1
	mov	DWORD PTR _iBuildingLoop$217340[ebp], eax
$LN23@UpdateCity:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	DWORD PTR _iBuildingLoop$217340[ebp], eax
	jge	$LN21@UpdateCity

; 69   : #endif
; 70   : 	{
; 71   : 		BuildingTypes eBuilding = (BuildingTypes)iBuildingLoop;

	mov	ecx, DWORD PTR _iBuildingLoop$217340[ebp]
	mov	DWORD PTR _eBuilding$217344[ebp], ecx

; 72   : 		if(!pCity->canConstruct(eBuilding))

	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _eBuilding$217344[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@UpdateCity

; 73   : 		{
; 74   : 			continue;

	jmp	SHORT $LN22@UpdateCity
$LN20@UpdateCity:

; 75   : 		}
; 76   : 
; 77   : 		buildable.m_eBuildableType = CITY_BUILDABLE_BUILDING;

	mov	DWORD PTR _buildable$[ebp], 1

; 78   : 		buildable.m_iIndex = iBuildingLoop;

	mov	ecx, DWORD PTR _iBuildingLoop$217340[ebp]
	mov	DWORD PTR _buildable$[ebp+4], ecx

; 79   : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eBuilding, 0);

	push	0
	mov	edx, DWORD PTR _eBuilding$217344[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _buildable$[ebp+8], eax

; 80   : 
; 81   : 		iWeight = pCityStrategy->GetBuildingProductionAI()->GetWeight(eBuilding);

	mov	eax, DWORD PTR _eBuilding$217344[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityStrategy$[ebp]
	call	?GetBuildingProductionAI@CvCityStrategyAI@@QAEPAVCvBuildingProductionAI@@XZ ; CvCityStrategyAI::GetBuildingProductionAI
	mov	ecx, eax
	call	?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z ; CvBuildingProductionAI::GetWeight
	mov	DWORD PTR _iWeight$[ebp], eax

; 82   : 		m_aCityBuildables.push_back(buildable, iWeight);

	mov	DWORD PTR _weightedElem$220562[ebp], 0
	mov	DWORD PTR _weightedElem$220562[ebp+4], 0
	mov	DWORD PTR _weightedElem$220562[ebp+8], 0
	mov	DWORD PTR _weightedElem$220562[ebp+12], 0
	mov	ecx, DWORD PTR _buildable$[ebp]
	mov	DWORD PTR _weightedElem$220562[ebp], ecx
	mov	edx, DWORD PTR _buildable$[ebp+4]
	mov	DWORD PTR _weightedElem$220562[ebp+4], edx
	mov	eax, DWORD PTR _buildable$[ebp+8]
	mov	DWORD PTR _weightedElem$220562[ebp+8], eax
	mov	ecx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR _weightedElem$220562[ebp+12], ecx
	lea	edx, DWORD PTR _weightedElem$220562[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back

; 83   : 	}

	jmp	$LN22@UpdateCity
$LN21@UpdateCity:

; 84   : 
; 85   : 	// units
; 86   : #ifdef AUI_WARNING_FIXES
; 87   : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 88   : #else
; 89   : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	DWORD PTR _iUnitLoop$217347[ebp], 0
	jmp	SHORT $LN19@UpdateCity
$LN18@UpdateCity:
	mov	eax, DWORD PTR _iUnitLoop$217347[ebp]
	add	eax, 1
	mov	DWORD PTR _iUnitLoop$217347[ebp], eax
$LN19@UpdateCity:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	DWORD PTR _iUnitLoop$217347[ebp], eax
	jge	$LN17@UpdateCity

; 90   : #endif
; 91   : 	{
; 92   : 		UnitTypes eUnit = (UnitTypes)iUnitLoop;

	mov	ecx, DWORD PTR _iUnitLoop$217347[ebp]
	mov	DWORD PTR _eUnit$217351[ebp], ecx

; 93   : 		if(!pCity->canTrain(eUnit))

	push	0
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _eUnit$217351[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvCity::canTrain
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@UpdateCity

; 94   : 		{
; 95   : 			continue;

	jmp	SHORT $LN18@UpdateCity
$LN16@UpdateCity:

; 96   : 		}
; 97   : 
; 98   : 		buildable.m_eBuildableType = CITY_BUILDABLE_UNIT;

	mov	DWORD PTR _buildable$[ebp], 2

; 99   : 		buildable.m_iIndex = iUnitLoop;

	mov	ecx, DWORD PTR _iUnitLoop$217347[ebp]
	mov	DWORD PTR _buildable$[ebp+4], ecx

; 100  : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eUnit, 0);

	push	0
	mov	edx, DWORD PTR _eUnit$217351[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _buildable$[ebp+8], eax

; 101  : 		iWeight = pCityStrategy->GetUnitProductionAI()->GetWeight(eUnit);

	mov	eax, DWORD PTR _eUnit$217351[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityStrategy$[ebp]
	call	?GetUnitProductionAI@CvCityStrategyAI@@QAEPAVCvUnitProductionAI@@XZ ; CvCityStrategyAI::GetUnitProductionAI
	mov	ecx, eax
	call	?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z ; CvUnitProductionAI::GetWeight
	mov	DWORD PTR _iWeight$[ebp], eax

; 102  : 		m_aCityBuildables.push_back(buildable, iWeight);

	mov	DWORD PTR _weightedElem$220578[ebp], 0
	mov	DWORD PTR _weightedElem$220578[ebp+4], 0
	mov	DWORD PTR _weightedElem$220578[ebp+8], 0
	mov	DWORD PTR _weightedElem$220578[ebp+12], 0
	mov	ecx, DWORD PTR _buildable$[ebp]
	mov	DWORD PTR _weightedElem$220578[ebp], ecx
	mov	edx, DWORD PTR _buildable$[ebp+4]
	mov	DWORD PTR _weightedElem$220578[ebp+4], edx
	mov	eax, DWORD PTR _buildable$[ebp+8]
	mov	DWORD PTR _weightedElem$220578[ebp+8], eax
	mov	ecx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR _weightedElem$220578[ebp+12], ecx
	lea	edx, DWORD PTR _weightedElem$220578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back

; 103  : 	}

	jmp	$LN18@UpdateCity
$LN17@UpdateCity:

; 104  : 
; 105  : 	// projects
; 106  : #ifdef AUI_WARNING_FIXES
; 107  : 	for (uint iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)
; 108  : #else
; 109  : 	for(int iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)

	mov	DWORD PTR _iProjectLoop$217354[ebp], 0
	jmp	SHORT $LN15@UpdateCity
$LN14@UpdateCity:
	mov	eax, DWORD PTR _iProjectLoop$217354[ebp]
	add	eax, 1
	mov	DWORD PTR _iProjectLoop$217354[ebp], eax
$LN15@UpdateCity:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _iProjectLoop$217354[ebp], eax
	jge	$LN13@UpdateCity

; 110  : #endif
; 111  : 	{
; 112  : 		ProjectTypes eProject = (ProjectTypes)iProjectLoop;

	mov	ecx, DWORD PTR _iProjectLoop$217354[ebp]
	mov	DWORD PTR _eProject$217358[ebp], ecx

; 113  : 		if(!pCity->canCreate(eProject))

	push	0
	push	0
	mov	edx, DWORD PTR _eProject$217358[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z ; CvCity::canCreate
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@UpdateCity

; 114  : 		{
; 115  : 			continue;

	jmp	SHORT $LN14@UpdateCity
$LN12@UpdateCity:

; 116  : 		}
; 117  : 
; 118  : 		buildable.m_eBuildableType = CITY_BUILDABLE_PROJECT;

	mov	DWORD PTR _buildable$[ebp], 3

; 119  : 		buildable.m_iIndex = iProjectLoop;

	mov	ecx, DWORD PTR _iProjectLoop$217354[ebp]
	mov	DWORD PTR _buildable$[ebp+4], ecx

; 120  : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eProject, 0);

	push	0
	mov	edx, DWORD PTR _eProject$217358[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _buildable$[ebp+8], eax

; 121  : 		iWeight = pCityStrategy->GetProjectProductionAI()->GetWeight(eProject);

	mov	eax, DWORD PTR _eProject$217358[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCityStrategy$[ebp]
	call	?GetProjectProductionAI@CvCityStrategyAI@@QAEPAVCvProjectProductionAI@@XZ ; CvCityStrategyAI::GetProjectProductionAI
	mov	ecx, eax
	call	?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z ; CvProjectProductionAI::GetWeight
	mov	DWORD PTR _iWeight$[ebp], eax

; 122  : 		m_aCityBuildables.push_back(buildable, iWeight);

	mov	DWORD PTR _weightedElem$220594[ebp], 0
	mov	DWORD PTR _weightedElem$220594[ebp+4], 0
	mov	DWORD PTR _weightedElem$220594[ebp+8], 0
	mov	DWORD PTR _weightedElem$220594[ebp+12], 0
	mov	ecx, DWORD PTR _buildable$[ebp]
	mov	DWORD PTR _weightedElem$220594[ebp], ecx
	mov	edx, DWORD PTR _buildable$[ebp+4]
	mov	DWORD PTR _weightedElem$220594[ebp+4], edx
	mov	eax, DWORD PTR _buildable$[ebp+8]
	mov	DWORD PTR _weightedElem$220594[ebp+8], eax
	mov	ecx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR _weightedElem$220594[ebp+12], ecx
	lea	edx, DWORD PTR _weightedElem$220594[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back

; 123  : 	}

	jmp	$LN14@UpdateCity
$LN13@UpdateCity:

; 124  : 
; 125  : 	// reweigh by cost
; 126  : 	for(int iI = 0; iI < m_aCityBuildables.size(); iI++)

	mov	DWORD PTR _iI$217361[ebp], 0
	jmp	SHORT $LN11@UpdateCity
$LN10@UpdateCity:
	mov	eax, DWORD PTR _iI$217361[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217361[ebp], eax
$LN11@UpdateCity:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+772]
	mov	DWORD PTR $T220599[ebp], edx
	mov	eax, DWORD PTR _iI$217361[ebp]
	cmp	eax, DWORD PTR $T220599[ebp]
	jge	$LN9@UpdateCity

; 127  : 	{
; 128  : 		buildable = m_aCityBuildables.GetElement(iI);

	mov	ecx, DWORD PTR _iI$217361[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+768]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _buildable$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _buildable$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _buildable$[ebp+8], eax

; 129  : 
; 130  : 		// Compute the new weight and change it
; 131  : 		int iNewWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(m_aCityBuildables.GetWeight(iI), buildable.m_iTurnsToConstruct);

	mov	DWORD PTR _elem$220632[ebp], 0
	mov	DWORD PTR _elem$220632[ebp+4], 0
	mov	DWORD PTR _elem$220632[ebp+8], 0
	mov	DWORD PTR _elem$220632[ebp+12], 0
	mov	ecx, DWORD PTR _iI$217361[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+768]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _elem$220632[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _elem$220632[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _elem$220632[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _elem$220632[ebp+12], edx
	mov	eax, DWORD PTR _elem$220632[ebp+12]
	mov	DWORD PTR $T220633[ebp], eax
	mov	ecx, DWORD PTR _buildable$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR $T220633[ebp]
	push	edx
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft
	add	esp, 8
	mov	DWORD PTR _iNewWeight$217365[ebp], eax

; 132  : 		m_aCityBuildables.SetWeight(iI, iNewWeight);

	mov	eax, DWORD PTR _iI$217361[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	mov	ecx, DWORD PTR _iNewWeight$217365[ebp]
	mov	DWORD PTR [edx+eax+12], ecx

; 133  : 	}

	jmp	$LN10@UpdateCity
$LN9@UpdateCity:

; 134  : 
; 135  : 	m_aCityBuildables.SortItems();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 768				; 00000300H
	mov	DWORD PTR $T220662[ebp], edx
	mov	eax, DWORD PTR $T220662[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR $T220662[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T220646[ebp], ecx
	mov	eax, DWORD PTR $T220662[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220650[ebp], ecx
	mov	edx, DWORD PTR $T220646[ebp]
	sub	edx, DWORD PTR $T220650[ebp]
	sar	edx, 4
	push	edx
	mov	eax, DWORD PTR $T220646[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220650[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 136  : 
; 137  : 	// move top buildables into final round!
; 138  : 	for(int i = 0; i < NUM_ADVISOR_TYPES; i++)

	mov	DWORD PTR _i$217366[ebp], 0
	jmp	SHORT $LN8@UpdateCity
$LN7@UpdateCity:
	mov	edx, DWORD PTR _i$217366[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217366[ebp], edx
$LN8@UpdateCity:
	cmp	DWORD PTR _i$217366[ebp], 4
	jge	$LN6@UpdateCity

; 139  : 	{
; 140  : 		// if index is out of bounds
; 141  : 		if(i >= m_aCityBuildables.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+772]
	mov	DWORD PTR $T220667[ebp], ecx
	mov	edx, DWORD PTR _i$217366[ebp]
	cmp	edx, DWORD PTR $T220667[ebp]
	jl	SHORT $LN5@UpdateCity

; 142  : 		{
; 143  : 			break;

	jmp	$LN6@UpdateCity
$LN5@UpdateCity:

; 144  : 		}
; 145  : 
; 146  : 		m_aFinalRoundBuildables.push_back(m_aCityBuildables.GetElement(i), m_aCityBuildables.GetWeight(i));

	mov	DWORD PTR _elem$220692[ebp], 0
	mov	DWORD PTR _elem$220692[ebp+4], 0
	mov	DWORD PTR _elem$220692[ebp+8], 0
	mov	DWORD PTR _elem$220692[ebp+12], 0
	mov	eax, DWORD PTR _i$217366[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+768]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _elem$220692[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _elem$220692[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _elem$220692[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _elem$220692[ebp+12], ecx
	mov	edx, DWORD PTR _elem$220692[ebp+12]
	mov	DWORD PTR $T220693[ebp], edx
	mov	eax, DWORD PTR _i$217366[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+768]
	mov	DWORD PTR $T220718[ebp], eax
	mov	DWORD PTR _weightedElem$220717[ebp], 0
	mov	DWORD PTR _weightedElem$220717[ebp+4], 0
	mov	DWORD PTR _weightedElem$220717[ebp+8], 0
	mov	DWORD PTR _weightedElem$220717[ebp+12], 0
	mov	edx, DWORD PTR $T220718[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _weightedElem$220717[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _weightedElem$220717[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _weightedElem$220717[ebp+8], edx
	mov	eax, DWORD PTR $T220693[ebp]
	mov	DWORD PTR _weightedElem$220717[ebp+12], eax
	lea	ecx, DWORD PTR _weightedElem$220717[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1584				; 00000630H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back

; 147  : 	}

	jmp	$LN7@UpdateCity
$LN6@UpdateCity:

; 148  : 
; 149  : 	for(int i = 0; i < m_aFinalRoundBuildables.size(); i++)

	mov	DWORD PTR _i$217371[ebp], 0
	jmp	SHORT $LN4@UpdateCity
$LN3@UpdateCity:
	mov	edx, DWORD PTR _i$217371[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217371[ebp], edx
$LN4@UpdateCity:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1588]
	mov	DWORD PTR $T220723[ebp], ecx
	mov	edx, DWORD PTR _i$217371[ebp]
	cmp	edx, DWORD PTR $T220723[ebp]
	jge	$LN24@UpdateCity

; 150  : 	{
; 151  : 		m_aFinalRoundBuildables.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1584				; 00000630H
	mov	DWORD PTR $T220760[ebp], eax
	mov	ecx, DWORD PTR $T220760[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR $T220760[ebp]
	add	edx, DWORD PTR [eax]
	mov	DWORD PTR $T220732[ebp], edx
	mov	ecx, DWORD PTR $T220760[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220736[ebp], edx
	mov	eax, DWORD PTR $T220732[ebp]
	sub	eax, DWORD PTR $T220736[ebp]
	sar	eax, 4
	push	eax
	mov	ecx, DWORD PTR $T220732[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220736[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 152  : 
; 153  : 		buildable = m_aFinalRoundBuildables.GetElement(0);

	xor	eax, eax
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1584]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _buildable$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _buildable$[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _buildable$[ebp+8], edx

; 154  : 		int iScore = m_aFinalRoundBuildables.GetWeight(0);

	mov	DWORD PTR _elem$220789[ebp], 0
	mov	DWORD PTR _elem$220789[ebp+4], 0
	mov	DWORD PTR _elem$220789[ebp+8], 0
	mov	DWORD PTR _elem$220789[ebp+12], 0
	xor	eax, eax
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1584]
	add	edx, eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _elem$220789[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _elem$220789[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _elem$220789[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _elem$220789[ebp+12], ecx
	mov	edx, DWORD PTR _elem$220789[ebp+12]
	mov	DWORD PTR _iScore$217375[ebp], edx

; 155  : 
; 156  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS)
; 157  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForBuildable(pCity, buildable);
; 158  : #else
; 159  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForBuildable(pCity->getOwner(), buildable);

	mov	eax, DWORD PTR _pCity$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR $T220798[ebp], ecx
	lea	edx, DWORD PTR _buildable$[ebp]
	push	edx
	mov	eax, DWORD PTR $T220798[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable
	mov	DWORD PTR _eAvailableAdvisor$217376[ebp], eax

; 160  : #endif
; 161  : 		if(eAvailableAdvisor != NO_ADVISOR_TYPE)

	cmp	DWORD PTR _eAvailableAdvisor$217376[ebp], -1
	je	SHORT $LN143@UpdateCity

; 162  : 		{
; 163  : 			m_aRecommendedBuilds[eAvailableAdvisor] = buildable;

	mov	ecx, DWORD PTR _eAvailableAdvisor$217376[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _buildable$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _buildable$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _buildable$[ebp+8]
	mov	DWORD PTR [ecx+8], edx

; 164  : 		}
; 165  : 
; 166  : 		m_aFinalRoundBuildables.SetWeight(0, iScore / 2);

$LN143@UpdateCity:
	xor	ecx, ecx
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+1584]
	mov	eax, DWORD PTR _iScore$217375[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [esi+ecx+12], eax

; 167  : 	}

	jmp	$LN3@UpdateCity
$LN24@UpdateCity:

; 168  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z ENDP ; CvAdvisorRecommender::UpdateCityRecommendations
_TEXT	ENDS
PUBLIC	?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsUnitRecommended
; Function compile flags: /Odtp
;	COMDAT ?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eUnit$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsUnitRecommended, COMDAT
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_UNIT && (UnitTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eUnit)

	mov	eax, DWORD PTR _eAdvisor$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax], 2
	jne	SHORT $LN2@IsUnitReco
	mov	edx, DWORD PTR _eAdvisor$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	cmp	ecx, DWORD PTR _eUnit$[ebp]
	jne	SHORT $LN2@IsUnitReco

; 173  : 	{
; 174  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@IsUnitReco

; 175  : 	}
; 176  : 	else

	jmp	SHORT $LN3@IsUnitReco
$LN2@IsUnitReco:

; 177  : 	{
; 178  : 		return false;

	xor	al, al
$LN3@IsUnitReco:

; 179  : 	}
; 180  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsUnitRecommended
_TEXT	ENDS
PUBLIC	?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsBuildingRecommended
; Function compile flags: /Odtp
;	COMDAT ?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eBuilding$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsBuildingRecommended, COMDAT
; _this$ = ecx

; 183  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_BUILDING && (BuildingTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eBuilding)

	mov	eax, DWORD PTR _eAdvisor$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax], 1
	jne	SHORT $LN2@IsBuilding
	mov	edx, DWORD PTR _eAdvisor$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	cmp	ecx, DWORD PTR _eBuilding$[ebp]
	jne	SHORT $LN2@IsBuilding

; 185  : 	{
; 186  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@IsBuilding

; 187  : 	}
; 188  : 	else

	jmp	SHORT $LN3@IsBuilding
$LN2@IsBuilding:

; 189  : 	{
; 190  : 		return false;

	xor	al, al
$LN3@IsBuilding:

; 191  : 	}
; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsBuildingRecommended
_TEXT	ENDS
PUBLIC	?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsProjectRecommended
; Function compile flags: /Odtp
;	COMDAT ?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eProject$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsProjectRecommended, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_PROJECT && (ProjectTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eProject)

	mov	eax, DWORD PTR _eAdvisor$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax], 3
	jne	SHORT $LN2@IsProjectR
	mov	edx, DWORD PTR _eAdvisor$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+4]
	cmp	ecx, DWORD PTR _eProject$[ebp]
	jne	SHORT $LN2@IsProjectR

; 197  : 	{
; 198  : 		return true;

	mov	al, 1
	jmp	SHORT $LN3@IsProjectR

; 199  : 	}
; 200  : 	else

	jmp	SHORT $LN3@IsProjectR
$LN2@IsProjectR:

; 201  : 	{
; 202  : 		return false;

	xor	al, al
$LN3@IsProjectR:

; 203  : 	}
; 204  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsProjectRecommended
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?ResetTechs@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T220876 = -20						; size = 4
_i$220871 = -16						; size = 4
$T220845 = -12						; size = 4
_i$220839 = -8						; size = 4
_ui$217405 = -4						; size = 4
?ResetTechs@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::ResetTechs, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217405[ebp], 0
	jmp	SHORT $LN3@ResetTechs
$LN2@ResetTechs:
	mov	eax, DWORD PTR _ui$217405[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217405[ebp], eax
$LN3@ResetTechs:
	cmp	DWORD PTR _ui$217405[ebp], 4
	jae	SHORT $LN1@ResetTechs

; 209  : 	{
; 210  : 		m_aRecommendedTechs[ui] = NO_TECH;

	mov	ecx, DWORD PTR _ui$217405[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+48], -1

; 211  : 	}

	jmp	SHORT $LN2@ResetTechs
$LN1@ResetTechs:

; 212  : 
; 213  : 	m_aResearchableTechs.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T220845[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN14@ResetTechs
	mov	DWORD PTR _i$220839[ebp], 0
	jmp	SHORT $LN12@ResetTechs
$LN11@ResetTechs:
	mov	edx, DWORD PTR _i$220839[ebp]
	add	edx, 1
	mov	DWORD PTR _i$220839[ebp], edx
$LN12@ResetTechs:
	mov	eax, DWORD PTR $T220845[ebp]
	mov	ecx, DWORD PTR _i$220839[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN14@ResetTechs
	jmp	SHORT $LN11@ResetTechs
$LN14@ResetTechs:
	mov	edx, DWORD PTR $T220845[ebp]
	mov	DWORD PTR [edx+4], 0

; 214  : 	m_aFinalRoundTechs.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 720				; 000002d0H
	mov	DWORD PTR $T220876[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN24@ResetTechs
	mov	DWORD PTR _i$220871[ebp], 0
	jmp	SHORT $LN22@ResetTechs
$LN21@ResetTechs:
	mov	edx, DWORD PTR _i$220871[ebp]
	add	edx, 1
	mov	DWORD PTR _i$220871[ebp], edx
$LN22@ResetTechs:
	mov	eax, DWORD PTR $T220876[ebp]
	mov	ecx, DWORD PTR _i$220871[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN24@ResetTechs
	jmp	SHORT $LN21@ResetTechs
$LN24@ResetTechs:
	mov	edx, DWORD PTR $T220876[ebp]
	mov	DWORD PTR [edx+4], 0

; 215  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ResetTechs@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::ResetTechs
_TEXT	ENDS
PUBLIC	?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForTech
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back
PUBLIC	?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z ; CvAdvisorRecommender::UpdateTechRecommendations
EXTRN	?GetNumFreeTechs@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetNumFreeTechs
EXTRN	?GetResearchTurnsLeft@CvPlayerTechs@@QBEHW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::GetResearchTurnsLeft
EXTRN	?GetWeight@CvTechAI@@QAEHW4TechTypes@@@Z:PROC	; CvTechAI::GetWeight
EXTRN	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::CanResearch
EXTRN	?GetNumTechs@CvTechXMLEntries@@QAEHXZ:PROC	; CvTechXMLEntries::GetNumTechs
EXTRN	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ:PROC ; CvPlayerTechs::GetTechs
EXTRN	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ:PROC ; CvPlayerTechs::GetTechAI
EXTRN	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ:PROC ; CvPlayer::GetPlayerTechs
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	__fltused:DWORD
EXTRN	___libm_sse2_pow:PROC
; Function compile flags: /Odtp
;	COMDAT ?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv178 = -256						; size = 4
_this$ = -252						; size = 4
_elem$221139 = -248					; size = 8
$T221122 = -240						; size = 4
$T221098 = -224						; size = 4
$T221094 = -220						; size = 4
$T221085 = -216						; size = 4
$T221080 = -212						; size = 4
_weightedElem$221076 = -208				; size = 8
$T221062 = -200						; size = 4
_elem$221056 = -196					; size = 8
$T221043 = -188						; size = 4
$T221038 = -184						; size = 4
$T221026 = -180						; size = 4
$T221022 = -176						; size = 4
$T221007 = -172						; size = 4
$T221000 = -168						; size = 4
_elem$220994 = -164					; size = 8
_elem$220980 = -156					; size = 8
$T220971 = -148						; size = 4
$T220967 = -144						; size = 4
$T220963 = -140						; size = 4
$T220947 = -136						; size = 4
$T220942 = -132						; size = 4
_weightedElem$220938 = -128				; size = 8
$T220932 = -120						; size = 4
$T220916 = -116						; size = 4
$T220885 = -112						; size = 4
$T220881 = -108						; size = 4
$T220880 = -104						; size = 4
$T220879 = -100						; size = 8
_eTech$217449 = -92					; size = 4
_iScore$217451 = -88					; size = 4
_eAvailableAdvisor$217452 = -84				; size = 4
_i$217445 = -80						; size = 4
_i$217440 = -76						; size = 4
_fAdditionalTurnCostFactor$217432 = -72			; size = 8
_iTurnsLeft$217430 = -60				; size = 4
_iNewWeight$217435 = -56				; size = 4
_eTech$217428 = -52					; size = 4
_fWeightDivisor$217431 = -48				; size = 8
_fTotalCostFactor$217433 = -40				; size = 8
_iI$217424 = -28					; size = 4
_eTech$217421 = -24					; size = 4
_fcn$ = -20						; size = 8
_pPlayerTechAI$ = -12					; size = 4
_iTechLoop$ = -8					; size = 4
_pPlayerTechs$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z PROC ; CvAdvisorRecommender::UpdateTechRecommendations, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	ResetTechs();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetTechs@CvAdvisorRecommender@@QAEXXZ ; CvAdvisorRecommender::ResetTechs

; 220  : 	CvPlayerTechs* pPlayerTechs = GET_PLAYER(ePlayer).GetPlayerTechs();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220885[ebp], eax
	mov	ecx, DWORD PTR $T220885[ebp]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	DWORD PTR _pPlayerTechs$[ebp], eax

; 221  : 	CvTechAI* pPlayerTechAI = pPlayerTechs->GetTechAI();

	mov	ecx, DWORD PTR _pPlayerTechs$[ebp]
	call	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ ; CvPlayerTechs::GetTechAI
	mov	DWORD PTR _pPlayerTechAI$[ebp], eax

; 222  : 
; 223  : 	RandomNumberDelegate fcn;

	mov	DWORD PTR _fcn$[ebp], 0
	mov	DWORD PTR _fcn$[ebp+4], 0
	mov	DWORD PTR _fcn$[ebp], 0
	mov	DWORD PTR _fcn$[ebp+4], 0

; 224  : #ifdef AUI_WARNING_FIXES
; 225  : 	uint iTechLoop;
; 226  : #else
; 227  : 	int iTechLoop;
; 228  : #endif
; 229  : 
; 230  : 	// Use the synchronous random number generate
; 231  : 	// Asynchronous one would be:
; 232  : 	fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T220916[ebp], ecx
	push	OFFSET ?getAsyncRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getAsyncRandNum
	mov	edx, DWORD PTR $T220916[ebp]
	push	edx
	lea	eax, DWORD PTR $T220879[ebp]
	push	eax
	call	??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T220932[ebp], eax
	mov	ecx, DWORD PTR $T220932[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _fcn$[ebp+4], edx
	mov	eax, DWORD PTR $T220932[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fcn$[ebp], ecx

; 233  : 	//fcn = MakeDelegate (&GC.getGame(), &CvGame::getJonRandNum);
; 234  : 
; 235  : 	// Loop through adding the researchable techs
; 236  : 	for(iTechLoop = 0; iTechLoop < pPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)

	mov	DWORD PTR _iTechLoop$[ebp], 0
	jmp	SHORT $LN17@UpdateTech
$LN16@UpdateTech:
	mov	edx, DWORD PTR _iTechLoop$[ebp]
	add	edx, 1
	mov	DWORD PTR _iTechLoop$[ebp], edx
$LN17@UpdateTech:
	mov	ecx, DWORD PTR _pPlayerTechs$[ebp]
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	cmp	DWORD PTR _iTechLoop$[ebp], eax
	jge	SHORT $LN15@UpdateTech

; 237  : 	{
; 238  : 		TechTypes eTech = (TechTypes)iTechLoop;

	mov	eax, DWORD PTR _iTechLoop$[ebp]
	mov	DWORD PTR _eTech$217421[ebp], eax

; 239  : 		if(pPlayerTechs->CanResearch(eTech))

	push	0
	mov	ecx, DWORD PTR _eTech$217421[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerTechs$[ebp]
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN40@UpdateTech

; 240  : 		{
; 241  : 			m_aResearchableTechs.push_back(iTechLoop, pPlayerTechAI->GetWeight(eTech));

	mov	eax, DWORD PTR _eTech$217421[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerTechAI$[ebp]
	call	?GetWeight@CvTechAI@@QAEHW4TechTypes@@@Z ; CvTechAI::GetWeight
	mov	DWORD PTR $T220942[ebp], eax
	mov	DWORD PTR _weightedElem$220938[ebp], 0
	mov	DWORD PTR _weightedElem$220938[ebp+4], 0
	mov	ecx, DWORD PTR _iTechLoop$[ebp]
	mov	DWORD PTR _weightedElem$220938[ebp], ecx
	mov	edx, DWORD PTR $T220942[ebp]
	mov	DWORD PTR _weightedElem$220938[ebp+4], edx
	lea	eax, DWORD PTR _weightedElem$220938[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back
$LN40@UpdateTech:

; 242  : 		}
; 243  : 	}

	jmp	SHORT $LN16@UpdateTech
$LN15@UpdateTech:

; 244  : 
; 245  : 	// weigh by cost
; 246  : 	for(int iI = 0; iI < m_aResearchableTechs.size(); iI++)

	mov	DWORD PTR _iI$217424[ebp], 0
	jmp	SHORT $LN13@UpdateTech
$LN12@UpdateTech:
	mov	ecx, DWORD PTR _iI$217424[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217424[ebp], ecx
$LN13@UpdateTech:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T220947[ebp], eax
	mov	ecx, DWORD PTR _iI$217424[ebp]
	cmp	ecx, DWORD PTR $T220947[ebp]
	jge	$LN11@UpdateTech

; 247  : 	{
; 248  : 		TechTypes eTech = (TechTypes) m_aResearchableTechs.GetElement(iI);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _iI$217424[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _eTech$217428[ebp], edx

; 249  : 		int iTurnsLeft = 0;

	mov	DWORD PTR _iTurnsLeft$217430[ebp], 0

; 250  : 
; 251  : 		iTurnsLeft = pPlayerTechs->GetResearchTurnsLeft(eTech, true);

	push	1
	mov	eax, DWORD PTR _eTech$217428[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerTechs$[ebp]
	call	?GetResearchTurnsLeft@CvPlayerTechs@@QBEHW4TechTypes@@_N@Z ; CvPlayerTechs::GetResearchTurnsLeft
	mov	DWORD PTR _iTurnsLeft$217430[ebp], eax

; 252  : 
; 253  : 		double fWeightDivisor;
; 254  : 
; 255  : 		// 10 turns will add 0.02; 80 turns will add 0.16
; 256  : 		double fAdditionalTurnCostFactor = GC.getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT() * iTurnsLeft;	// 0.015

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8008
	movss	DWORD PTR $T220963[ebp], xmm0
	cvtsi2ss xmm0, DWORD PTR _iTurnsLeft$217430[ebp]
	mulss	xmm0, DWORD PTR $T220963[ebp]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _fAdditionalTurnCostFactor$217432[ebp], xmm0

; 257  : 		double fTotalCostFactor = GC.getAI_RESEARCH_WEIGHT_BASE_MOD() + fAdditionalTurnCostFactor;	// 0.15

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8012
	movss	DWORD PTR $T220967[ebp], xmm0
	cvtss2sd xmm0, DWORD PTR $T220967[ebp]
	addsd	xmm0, QWORD PTR _fAdditionalTurnCostFactor$217432[ebp]
	movsd	QWORD PTR _fTotalCostFactor$217433[ebp], xmm0

; 258  : 
; 259  : 		fWeightDivisor = pow((double) iTurnsLeft, fTotalCostFactor);

	cvtsi2sd xmm0, DWORD PTR _iTurnsLeft$217430[ebp]
	movsd	xmm1, QWORD PTR _fTotalCostFactor$217433[ebp]
	call	___libm_sse2_pow
	movsd	QWORD PTR _fWeightDivisor$217431[ebp], xmm0

; 260  : 
; 261  : 		// if the tech is free, then we don't want inverse the weighting. More expensive techs = better.
; 262  : 		int iNewWeight = 0;

	mov	DWORD PTR _iNewWeight$217435[ebp], 0

; 263  : 		if(GET_PLAYER(ePlayer).GetNumFreeTechs() == 0)

	mov	ecx, DWORD PTR _ePlayer$[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220971[ebp], ecx
	mov	ecx, DWORD PTR $T220971[ebp]
	call	?GetNumFreeTechs@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTechs
	test	eax, eax
	jne	SHORT $LN10@UpdateTech

; 264  : 		{
; 265  : 			iNewWeight = int(double(m_aResearchableTechs.GetWeight(iI)) / fWeightDivisor);

	mov	DWORD PTR _elem$220980[ebp], 0
	mov	DWORD PTR _elem$220980[ebp+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _iI$217424[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$220980[ebp], edx
	mov	DWORD PTR _elem$220980[ebp+4], eax
	cvtsi2sd xmm0, DWORD PTR _elem$220980[ebp+4]
	divsd	xmm0, QWORD PTR _fWeightDivisor$217431[ebp]
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _iNewWeight$217435[ebp], ecx

; 266  : 		}
; 267  : 		else

	jmp	$LN9@UpdateTech
$LN10@UpdateTech:

; 268  : 		{
; 269  : 			iNewWeight = m_aResearchableTechs.GetWeight(iI) * max(iTurnsLeft / 2, 1);

	mov	DWORD PTR $T220880[ebp], 1
	mov	eax, DWORD PTR _iTurnsLeft$217430[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR $T220881[ebp], eax
	mov	DWORD PTR _elem$220994[ebp], 0
	mov	DWORD PTR _elem$220994[ebp+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _iI$217424[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$220994[ebp], edx
	mov	DWORD PTR _elem$220994[ebp+4], eax
	mov	ecx, DWORD PTR _elem$220994[ebp+4]
	mov	DWORD PTR $T221000[ebp], ecx
	mov	edx, DWORD PTR $T220881[ebp]
	cmp	edx, DWORD PTR $T220880[ebp]
	jge	SHORT $LN72@UpdateTech
	lea	eax, DWORD PTR $T220880[ebp]
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN73@UpdateTech
$LN72@UpdateTech:
	lea	ecx, DWORD PTR $T220881[ebp]
	mov	DWORD PTR tv178[ebp], ecx
$LN73@UpdateTech:
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR $T221007[ebp], edx
	mov	eax, DWORD PTR $T221007[ebp]
	mov	ecx, DWORD PTR $T221000[ebp]
	imul	ecx, DWORD PTR [eax]
	mov	DWORD PTR _iNewWeight$217435[ebp], ecx
$LN9@UpdateTech:

; 270  : 		}
; 271  : 
; 272  : 		// Now actually change the weight
; 273  : 		m_aResearchableTechs.SetWeight(iI, iNewWeight);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _iI$217424[ebp]
	mov	edx, DWORD PTR _iNewWeight$217435[ebp]
	mov	DWORD PTR [eax+ecx*8+4], edx

; 274  : 	}

	jmp	$LN12@UpdateTech
$LN11@UpdateTech:

; 275  : 
; 276  : 	m_aResearchableTechs.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T221038[ebp], eax
	mov	ecx, DWORD PTR $T221038[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T221038[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T221022[ebp], edx
	mov	eax, DWORD PTR $T221038[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T221026[ebp], ecx
	mov	edx, DWORD PTR $T221022[ebp]
	sub	edx, DWORD PTR $T221026[ebp]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR $T221022[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221026[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 277  : 
; 278  : 	// move techs into final round!
; 279  : 	for(int i = 0; i < NUM_ADVISOR_TYPES; i++)

	mov	DWORD PTR _i$217440[ebp], 0
	jmp	SHORT $LN8@UpdateTech
$LN7@UpdateTech:
	mov	edx, DWORD PTR _i$217440[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217440[ebp], edx
$LN8@UpdateTech:
	cmp	DWORD PTR _i$217440[ebp], 4
	jge	$LN6@UpdateTech

; 280  : 	{
; 281  : 		// if index is out of bounds
; 282  : 		if(i >= m_aResearchableTechs.size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR $T221043[ebp], ecx
	mov	edx, DWORD PTR _i$217440[ebp]
	cmp	edx, DWORD PTR $T221043[ebp]
	jl	SHORT $LN5@UpdateTech

; 283  : 		{
; 284  : 			break;

	jmp	$LN6@UpdateTech
$LN5@UpdateTech:

; 285  : 		}
; 286  : 
; 287  : 		m_aFinalRoundTechs.push_back(m_aResearchableTechs.GetElement(i), m_aResearchableTechs.GetWeight(i));

	mov	DWORD PTR _elem$221056[ebp], 0
	mov	DWORD PTR _elem$221056[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _i$217440[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$221056[ebp], eax
	mov	DWORD PTR _elem$221056[ebp+4], ecx
	mov	edx, DWORD PTR _elem$221056[ebp+4]
	mov	DWORD PTR $T221062[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _i$217440[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T221080[ebp], eax
	mov	DWORD PTR _weightedElem$221076[ebp], 0
	mov	DWORD PTR _weightedElem$221076[ebp+4], 0
	mov	ecx, DWORD PTR $T221080[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _weightedElem$221076[ebp], edx
	mov	eax, DWORD PTR $T221062[ebp]
	mov	DWORD PTR _weightedElem$221076[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$221076[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back

; 288  : 	}

	jmp	$LN7@UpdateTech
$LN6@UpdateTech:

; 289  : 
; 290  : 	for(int i = 0; i < m_aFinalRoundTechs.size(); i++)

	mov	DWORD PTR _i$217445[ebp], 0
	jmp	SHORT $LN4@UpdateTech
$LN3@UpdateTech:
	mov	edx, DWORD PTR _i$217445[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217445[ebp], edx
$LN4@UpdateTech:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+724]
	mov	DWORD PTR $T221085[ebp], ecx
	mov	edx, DWORD PTR _i$217445[ebp]
	cmp	edx, DWORD PTR $T221085[ebp]
	jge	$LN2@UpdateTech

; 291  : 	{
; 292  : 		m_aFinalRoundTechs.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 720				; 000002d0H
	mov	DWORD PTR $T221122[ebp], eax
	mov	ecx, DWORD PTR $T221122[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T221122[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T221094[ebp], edx
	mov	eax, DWORD PTR $T221122[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T221098[ebp], ecx
	mov	edx, DWORD PTR $T221094[ebp]
	sub	edx, DWORD PTR $T221098[ebp]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR $T221094[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221098[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 293  : 
; 294  : 		TechTypes eTech = (TechTypes)m_aFinalRoundTechs.GetElement(0);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _eTech$217449[ebp], edx

; 295  : 		int iScore = m_aFinalRoundTechs.GetWeight(0);

	mov	DWORD PTR _elem$221139[ebp], 0
	mov	DWORD PTR _elem$221139[ebp+4], 0
	xor	eax, eax
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _elem$221139[ebp], ecx
	mov	DWORD PTR _elem$221139[ebp+4], edx
	mov	eax, DWORD PTR _elem$221139[ebp+4]
	mov	DWORD PTR _iScore$217451[ebp], eax

; 296  : 
; 297  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForTech(ePlayer, eTech);

	mov	ecx, DWORD PTR _eTech$217449[ebp]
	push	ecx
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForTech
	mov	DWORD PTR _eAvailableAdvisor$217452[ebp], eax

; 298  : 		if(eAvailableAdvisor != NO_ADVISOR_TYPE)

	cmp	DWORD PTR _eAvailableAdvisor$217452[ebp], -1
	je	SHORT $LN1@UpdateTech

; 299  : 		{
; 300  : 			m_aRecommendedTechs[eAvailableAdvisor] = eTech;

	mov	eax, DWORD PTR _eAvailableAdvisor$217452[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eTech$217449[ebp]
	mov	DWORD PTR [ecx+eax*4+48], edx
$LN1@UpdateTech:

; 301  : 		}
; 302  : 
; 303  : 		m_aFinalRoundTechs.SetWeight(0, iScore / 2);

	xor	ecx, ecx
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+720]
	mov	eax, DWORD PTR _iScore$217451[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [esi+ecx+4], eax

; 304  : 	}

	jmp	$LN3@UpdateTech
$LN2@UpdateTech:

; 305  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z ENDP ; CvAdvisorRecommender::UpdateTechRecommendations
_TEXT	ENDS
PUBLIC	?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsTechRecommended
; Function compile flags: /Odtp
;	COMDAT ?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eTech$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsTechRecommended, COMDAT
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	return (m_aRecommendedTechs[eAdvisor] == eTech);

	mov	eax, DWORD PTR _eAdvisor$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+48]
	xor	eax, eax
	cmp	edx, DWORD PTR _eTech$[ebp]
	sete	al

; 310  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsTechRecommended
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@	; `string'
PUBLIC	??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@		; `string'
PUBLIC	??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@	; `string'
PUBLIC	??_C@_0BA@DBJAEMOP@FLAVOR_RELIGION?$AA@		; `string'
PUBLIC	??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@	; `string'
PUBLIC	??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@		; `string'
PUBLIC	??_C@_0L@OJILNFCD@FLAVOR_AIR?$AA@		; `string'
PUBLIC	??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@	; `string'
PUBLIC	??_C@_0N@CLMADBAM@FLAVOR_NAVAL?$AA@		; `string'
PUBLIC	??_C@_0O@NPKFFFBK@FLAVOR_MOBILE?$AA@		; `string'
PUBLIC	??_C@_0O@EHNMEILB@FLAVOR_RANGED?$AA@		; `string'
PUBLIC	??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@		; `string'
PUBLIC	??_C@_0BJ@NNFHMIPH@FLAVOR_MILITARY_TRAINING?$AA@ ; `string'
PUBLIC	??_C@_0P@CHEPBLFE@FLAVOR_DEFENSE?$AA@		; `string'
PUBLIC	??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@		; `string'
PUBLIC	??_C@_0BI@PNCDJFOL@FLAVOR_WATER_CONNECTION?$AA@	; `string'
PUBLIC	??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@		; `string'
PUBLIC	??_C@_0BB@OGEJLBEB@FLAVOR_HAPPINESS?$AA@	; `string'
PUBLIC	??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@		; `string'
PUBLIC	??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@		; `string'
PUBLIC	??_C@_0BC@FHBLEBJB@FLAVOR_PRODUCTION?$AA@	; `string'
PUBLIC	??_C@_0BG@IGGMBFOJ@FLAVOR_INFRASTRUCTURE?$AA@	; `string'
PUBLIC	??_C@_0BI@OGGDNFPL@FLAVOR_TILE_IMPROVEMENT?$AA@	; `string'
PUBLIC	??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@		; `string'
PUBLIC	??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@	; `string'
PUBLIC	??_C@_0BO@BCBMNLKM@FLAVOR_NAVAL_TILE_IMPROVEMENT?$AA@ ; `string'
PUBLIC	??_C@_0BE@FCAMGBL@FLAVOR_NAVAL_GROWTH?$AA@	; `string'
PUBLIC	??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
;	COMDAT ??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@ DB 'FLAVOR_SPACESHIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@ DB 'FLAVOR_SCIENCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@
CONST	SEGMENT
??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@ DB 'FLAVOR_DIPLOMACY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DBJAEMOP@FLAVOR_RELIGION?$AA@
CONST	SEGMENT
??_C@_0BA@DBJAEMOP@FLAVOR_RELIGION?$AA@ DB 'FLAVOR_RELIGION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@
CONST	SEGMENT
??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@ DB 'FLAVOR_GREAT_PEOPLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@
CONST	SEGMENT
??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@ DB 'FLAVOR_NUKE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJILNFCD@FLAVOR_AIR?$AA@
CONST	SEGMENT
??_C@_0L@OJILNFCD@FLAVOR_AIR?$AA@ DB 'FLAVOR_AIR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@
CONST	SEGMENT
??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@ DB 'FLAVOR_NAVAL_RECON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CLMADBAM@FLAVOR_NAVAL?$AA@
CONST	SEGMENT
??_C@_0N@CLMADBAM@FLAVOR_NAVAL?$AA@ DB 'FLAVOR_NAVAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NPKFFFBK@FLAVOR_MOBILE?$AA@
CONST	SEGMENT
??_C@_0O@NPKFFFBK@FLAVOR_MOBILE?$AA@ DB 'FLAVOR_MOBILE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHNMEILB@FLAVOR_RANGED?$AA@
CONST	SEGMENT
??_C@_0O@EHNMEILB@FLAVOR_RANGED?$AA@ DB 'FLAVOR_RANGED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@
CONST	SEGMENT
??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@ DB 'FLAVOR_RECON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NNFHMIPH@FLAVOR_MILITARY_TRAINING?$AA@
CONST	SEGMENT
??_C@_0BJ@NNFHMIPH@FLAVOR_MILITARY_TRAINING?$AA@ DB 'FLAVOR_MILITARY_TRAI'
	DB	'NING', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHEPBLFE@FLAVOR_DEFENSE?$AA@
CONST	SEGMENT
??_C@_0P@CHEPBLFE@FLAVOR_DEFENSE?$AA@ DB 'FLAVOR_DEFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@
CONST	SEGMENT
??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@ DB 'FLAVOR_OFFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PNCDJFOL@FLAVOR_WATER_CONNECTION?$AA@
CONST	SEGMENT
??_C@_0BI@PNCDJFOL@FLAVOR_WATER_CONNECTION?$AA@ DB 'FLAVOR_WATER_CONNECTI'
	DB	'ON', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
CONST	SEGMENT
??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@ DB 'FLAVOR_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGEJLBEB@FLAVOR_HAPPINESS?$AA@
CONST	SEGMENT
??_C@_0BB@OGEJLBEB@FLAVOR_HAPPINESS?$AA@ DB 'FLAVOR_HAPPINESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@
CONST	SEGMENT
??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@ DB 'FLAVOR_CULTURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@
CONST	SEGMENT
??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@ DB 'FLAVOR_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FHBLEBJB@FLAVOR_PRODUCTION?$AA@
CONST	SEGMENT
??_C@_0BC@FHBLEBJB@FLAVOR_PRODUCTION?$AA@ DB 'FLAVOR_PRODUCTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IGGMBFOJ@FLAVOR_INFRASTRUCTURE?$AA@
CONST	SEGMENT
??_C@_0BG@IGGMBFOJ@FLAVOR_INFRASTRUCTURE?$AA@ DB 'FLAVOR_INFRASTRUCTURE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OGGDNFPL@FLAVOR_TILE_IMPROVEMENT?$AA@
CONST	SEGMENT
??_C@_0BI@OGGDNFPL@FLAVOR_TILE_IMPROVEMENT?$AA@ DB 'FLAVOR_TILE_IMPROVEME'
	DB	'NT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
CONST	SEGMENT
??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@ DB 'FLAVOR_GROWTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
CONST	SEGMENT
??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@ DB 'FLAVOR_EXPANSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BCBMNLKM@FLAVOR_NAVAL_TILE_IMPROVEMENT?$AA@
CONST	SEGMENT
??_C@_0BO@BCBMNLKM@FLAVOR_NAVAL_TILE_IMPROVEMENT?$AA@ DB 'FLAVOR_NAVAL_TI'
	DB	'LE_IMPROVEMENT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCAMGBL@FLAVOR_NAVAL_GROWTH?$AA@
CONST	SEGMENT
??_C@_0BE@FCAMGBL@FLAVOR_NAVAL_GROWTH?$AA@ DB 'FLAVOR_NAVAL_GROWTH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@
CONST	SEGMENT
??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@ DB 'FLAVOR_CITY_DEFENSE', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z$0
__ehfuncinfo$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
_TEXT	SEGMENT
tv71 = -232						; size = 4
_this$ = -228						; size = 4
$T221208 = -224						; size = 4
$T221203 = -220						; size = 4
$T221202 = -216						; size = 4
$T221201 = -212						; size = 4
$T221200 = -208						; size = 4
$T221199 = -204						; size = 4
$T221198 = -200						; size = 4
$T221197 = -196						; size = 4
$T221196 = -192						; size = 4
$T221195 = -188						; size = 4
$T221194 = -184						; size = 4
$T221193 = -180						; size = 4
$T221192 = -176						; size = 4
$T221191 = -172						; size = 4
$T221190 = -168						; size = 4
$T221189 = -164						; size = 4
$T221188 = -160						; size = 4
$T221187 = -156						; size = 4
$T221186 = -152						; size = 4
$T221185 = -148						; size = 4
$T221184 = -144						; size = 4
$T221183 = -140						; size = 4
$T221182 = -136						; size = 4
$T221181 = -132						; size = 4
$T221180 = -128						; size = 4
$T221179 = -124						; size = 4
$T221178 = -120						; size = 4
$T221177 = -116						; size = 4
$T221176 = -112						; size = 4
$T221175 = -108						; size = 4
$T221174 = -104						; size = 4
$T221173 = -100						; size = 4
$T221172 = -96						; size = 4
$T221171 = -92						; size = 4
$T221170 = -88						; size = 4
$T221169 = -84						; size = 4
$T221168 = -80						; size = 4
$T221167 = -76						; size = 4
$T221166 = -72						; size = 4
$T221165 = -68						; size = 4
$T221164 = -64						; size = 4
$T221163 = -60						; size = 4
$T221162 = -56						; size = 4
$T221161 = -52						; size = 4
$T221160 = -48						; size = 4
_strFlavorName$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eAdvisor$ = 8						; size = 4
_eFlavor$ = 12						; size = 4
?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z PROC ; CvAdvisorRecommender::AdvisorInterestInFlavor, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 	CvString strFlavorName = GC.getFlavorTypes(eFlavor);

	mov	eax, DWORD PTR _eFlavor$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1760
	mov	DWORD PTR $T221208[ebp], eax
	mov	ecx, DWORD PTR $T221208[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 315  : 
; 316  : 	switch(eAdvisor)

	mov	edx, DWORD PTR _eAdvisor$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 3
	ja	$LN87@AdvisorInt
	mov	eax, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN230@AdvisorInt[eax*4]
$LN86@AdvisorInt:

; 317  : 	{
; 318  : 	case ADVISOR_ECONOMIC:
; 319  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	push	OFFSET ??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN85@AdvisorInt

; 320  : 		{
; 321  : 			return 1;

	mov	DWORD PTR $T221160[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221160[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN85@AdvisorInt:

; 322  : 		}
; 323  : 		else if(strFlavorName == "FLAVOR_NAVAL_GROWTH")

	push	OFFSET ??_C@_0BE@FCAMGBL@FLAVOR_NAVAL_GROWTH?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN83@AdvisorInt

; 324  : 		{
; 325  : 			return 10;

	mov	DWORD PTR $T221161[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221161[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN83@AdvisorInt:

; 326  : 		}
; 327  : 		else if(strFlavorName == "FLAVOR_NAVAL_TILE_IMPROVEMENT")

	push	OFFSET ??_C@_0BO@BCBMNLKM@FLAVOR_NAVAL_TILE_IMPROVEMENT?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN81@AdvisorInt

; 328  : 		{
; 329  : 			return 10;

	mov	DWORD PTR $T221162[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221162[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN81@AdvisorInt:

; 330  : 		}
; 331  : 		else if(strFlavorName == "FLAVOR_EXPANSION")

	push	OFFSET ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN79@AdvisorInt

; 332  : 		{
; 333  : 			return 10;

	mov	DWORD PTR $T221163[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221163[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN79@AdvisorInt:

; 334  : 		}
; 335  : 		else if(strFlavorName == "FLAVOR_GROWTH")

	push	OFFSET ??_C@_0O@CLFAHDIJ@FLAVOR_GROWTH?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN77@AdvisorInt

; 336  : 		{
; 337  : 			return 10;

	mov	DWORD PTR $T221164[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221164[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN77@AdvisorInt:

; 338  : 		}
; 339  : 		else if(strFlavorName == "FLAVOR_TILE_IMPROVEMENT")

	push	OFFSET ??_C@_0BI@OGGDNFPL@FLAVOR_TILE_IMPROVEMENT?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN75@AdvisorInt

; 340  : 		{
; 341  : 			return 10;

	mov	DWORD PTR $T221165[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221165[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN75@AdvisorInt:

; 342  : 		}
; 343  : 		else if(strFlavorName == "FLAVOR_INFRASTRUCTURE")

	push	OFFSET ??_C@_0BG@IGGMBFOJ@FLAVOR_INFRASTRUCTURE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN73@AdvisorInt

; 344  : 		{
; 345  : 			return 5;

	mov	DWORD PTR $T221166[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221166[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN73@AdvisorInt:

; 346  : 		}
; 347  : 		else if(strFlavorName == "FLAVOR_PRODUCTION")

	push	OFFSET ??_C@_0BC@FHBLEBJB@FLAVOR_PRODUCTION?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN71@AdvisorInt

; 348  : 		{
; 349  : 			return 10;

	mov	DWORD PTR $T221167[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221167[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN71@AdvisorInt:

; 350  : 		}
; 351  : 		else if(strFlavorName == "FLAVOR_GOLD")

	push	OFFSET ??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN69@AdvisorInt

; 352  : 		{
; 353  : 			return 10;

	mov	DWORD PTR $T221168[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221168[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN69@AdvisorInt:

; 354  : 		}
; 355  : 		else if(strFlavorName == "FLAVOR_CULTURE")

	push	OFFSET ??_C@_0P@DAJFKJHO@FLAVOR_CULTURE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN67@AdvisorInt

; 356  : 		{
; 357  : 			return 10;

	mov	DWORD PTR $T221169[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221169[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN84@AdvisorInt
$LN67@AdvisorInt:

; 358  : 		}
; 359  : 		else if(strFlavorName == "FLAVOR_HAPPINESS")

	push	OFFSET ??_C@_0BB@OGEJLBEB@FLAVOR_HAPPINESS?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN65@AdvisorInt

; 360  : 		{
; 361  : 			return 10;

	mov	DWORD PTR $T221170[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221170[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN84@AdvisorInt
$LN65@AdvisorInt:

; 362  : 		}
; 363  : 		else if(strFlavorName == "FLAVOR_WONDER")

	push	OFFSET ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN63@AdvisorInt

; 364  : 		{
; 365  : 			return 5;

	mov	DWORD PTR $T221171[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221171[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN84@AdvisorInt
$LN63@AdvisorInt:

; 366  : 		}
; 367  : 		else if(strFlavorName == "FLAVOR_WATER_CONNECTION")

	push	OFFSET ??_C@_0BI@PNCDJFOL@FLAVOR_WATER_CONNECTION?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN84@AdvisorInt

; 368  : 		{
; 369  : 			return 5;

	mov	DWORD PTR $T221172[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221172[ebp]
	jmp	$LN89@AdvisorInt
$LN84@AdvisorInt:

; 370  : 		}
; 371  : 
; 372  : 		break;

	jmp	$LN87@AdvisorInt
$LN60@AdvisorInt:

; 373  : 	case ADVISOR_MILITARY:
; 374  : 		if(strFlavorName == "FLAVOR_OFFENSE")

	push	OFFSET ??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@AdvisorInt

; 375  : 		{
; 376  : 			return 10;

	mov	DWORD PTR $T221173[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221173[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN59@AdvisorInt:

; 377  : 		}
; 378  : 		else if(strFlavorName == "FLAVOR_DEFENSE")

	push	OFFSET ??_C@_0P@CHEPBLFE@FLAVOR_DEFENSE?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@AdvisorInt

; 379  : 		{
; 380  : 			return 10;

	mov	DWORD PTR $T221174[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221174[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN57@AdvisorInt:

; 381  : 		}
; 382  : 		else if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	push	OFFSET ??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN55@AdvisorInt

; 383  : 		{
; 384  : 			return 5;

	mov	DWORD PTR $T221175[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221175[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN55@AdvisorInt:

; 385  : 		}
; 386  : 		else if(strFlavorName == "FLAVOR_MILITARY_TRAINING")

	push	OFFSET ??_C@_0BJ@NNFHMIPH@FLAVOR_MILITARY_TRAINING?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN53@AdvisorInt

; 387  : 		{
; 388  : 			return 7;

	mov	DWORD PTR $T221176[ebp], 7
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221176[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN53@AdvisorInt:

; 389  : 		}
; 390  : 		else if(strFlavorName == "FLAVOR_RECON")

	push	OFFSET ??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@AdvisorInt

; 391  : 		{
; 392  : 			return 3;

	mov	DWORD PTR $T221177[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221177[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN51@AdvisorInt:

; 393  : 		}
; 394  : 		else if(strFlavorName == "FLAVOR_RANGED")

	push	OFFSET ??_C@_0O@EHNMEILB@FLAVOR_RANGED?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN49@AdvisorInt

; 395  : 		{
; 396  : 			return 10;

	mov	DWORD PTR $T221178[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221178[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN49@AdvisorInt:

; 397  : 		}
; 398  : 		else if(strFlavorName == "FLAVOR_MOBILE")

	push	OFFSET ??_C@_0O@NPKFFFBK@FLAVOR_MOBILE?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN47@AdvisorInt

; 399  : 		{
; 400  : 			return 7;

	mov	DWORD PTR $T221179[ebp], 7
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221179[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN47@AdvisorInt:

; 401  : 		}
; 402  : 		else if(strFlavorName == "FLAVOR_NAVAL")

	push	OFFSET ??_C@_0N@CLMADBAM@FLAVOR_NAVAL?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN45@AdvisorInt

; 403  : 		{
; 404  : 			return 10;

	mov	DWORD PTR $T221180[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221180[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN45@AdvisorInt:

; 405  : 		}
; 406  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	push	OFFSET ??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN43@AdvisorInt

; 407  : 		{
; 408  : 			return 3;

	mov	DWORD PTR $T221181[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221181[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN43@AdvisorInt:

; 409  : 		}
; 410  : 		else if(strFlavorName == "FLAVOR_AIR")

	push	OFFSET ??_C@_0L@OJILNFCD@FLAVOR_AIR?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@AdvisorInt

; 411  : 		{
; 412  : 			return 10;

	mov	DWORD PTR $T221182[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221182[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN58@AdvisorInt
$LN41@AdvisorInt:

; 413  : 		}
; 414  : 		else if(strFlavorName == "FLAVOR_INFRASTRUCTURE")

	push	OFFSET ??_C@_0BG@IGGMBFOJ@FLAVOR_INFRASTRUCTURE?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@AdvisorInt

; 415  : 		{
; 416  : 			return 1;

	mov	DWORD PTR $T221183[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221183[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN58@AdvisorInt
$LN39@AdvisorInt:

; 417  : 		}
; 418  : 		else if(strFlavorName == "FLAVOR_PRODUCTION")

	push	OFFSET ??_C@_0BC@FHBLEBJB@FLAVOR_PRODUCTION?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN37@AdvisorInt

; 419  : 		{
; 420  : 			return 1;

	mov	DWORD PTR $T221184[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221184[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN58@AdvisorInt
$LN37@AdvisorInt:

; 421  : 		}
; 422  : 		else if(strFlavorName == "FLAVOR_NUKE")

	push	OFFSET ??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN58@AdvisorInt

; 423  : 		{
; 424  : 			return 10;

	mov	DWORD PTR $T221185[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221185[ebp]
	jmp	$LN89@AdvisorInt
$LN58@AdvisorInt:

; 425  : 		}
; 426  : 		break;

	jmp	$LN87@AdvisorInt
$LN34@AdvisorInt:

; 427  : 	case ADVISOR_FOREIGN:
; 428  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	push	OFFSET ??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@AdvisorInt

; 429  : 		{
; 430  : 			return 1;

	mov	DWORD PTR $T221186[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221186[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN32@AdvisorInt
$LN33@AdvisorInt:

; 431  : 		}
; 432  : 		else if(strFlavorName == "FLAVOR_RECON")

	push	OFFSET ??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN31@AdvisorInt

; 433  : 		{
; 434  : 			return 10;

	mov	DWORD PTR $T221187[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221187[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN32@AdvisorInt
$LN31@AdvisorInt:

; 435  : 		}
; 436  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	push	OFFSET ??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@AdvisorInt

; 437  : 		{
; 438  : 			return 10;

	mov	DWORD PTR $T221188[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221188[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN32@AdvisorInt
$LN29@AdvisorInt:

; 439  : 		}
; 440  : 		else if(strFlavorName == "FLAVOR_GREAT_PEOPLE")

	push	OFFSET ??_C@_0BE@FPNJJFAD@FLAVOR_GREAT_PEOPLE?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@AdvisorInt

; 441  : 		{
; 442  : 			return 5;

	mov	DWORD PTR $T221189[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221189[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN32@AdvisorInt
$LN27@AdvisorInt:

; 443  : 		}
; 444  : 		else if(strFlavorName == "FLAVOR_WONDER")

	push	OFFSET ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@AdvisorInt

; 445  : 		{
; 446  : 			return 5;

	mov	DWORD PTR $T221190[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221190[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN32@AdvisorInt
$LN25@AdvisorInt:

; 447  : 		}
; 448  : 		else if(strFlavorName == "FLAVOR_RELIGION")

	push	OFFSET ??_C@_0BA@DBJAEMOP@FLAVOR_RELIGION?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN23@AdvisorInt

; 449  : 		{
; 450  : 			return 10;

	mov	DWORD PTR $T221191[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221191[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN32@AdvisorInt
$LN23@AdvisorInt:

; 451  : 		}
; 452  : 		else if(strFlavorName == "FLAVOR_DIPLOMACY")

	push	OFFSET ??_C@_0BB@BPIBEAAN@FLAVOR_DIPLOMACY?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@AdvisorInt

; 453  : 		{
; 454  : 			return 10;

	mov	DWORD PTR $T221192[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221192[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN32@AdvisorInt
$LN21@AdvisorInt:

; 455  : 		}
; 456  : 		else if(strFlavorName == "FLAVOR_NUKE")

	push	OFFSET ??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN32@AdvisorInt

; 457  : 		{
; 458  : 			return 5;

	mov	DWORD PTR $T221193[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221193[ebp]
	jmp	$LN89@AdvisorInt
$LN32@AdvisorInt:

; 459  : 		}
; 460  : 		break;

	jmp	$LN87@AdvisorInt
$LN18@AdvisorInt:

; 461  : 	case ADVISOR_SCIENCE:
; 462  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	push	OFFSET ??_C@_0BE@EEBBMCFH@FLAVOR_CITY_DEFENSE?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@AdvisorInt

; 463  : 		{
; 464  : 			return 1;

	mov	DWORD PTR $T221194[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221194[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN17@AdvisorInt:

; 465  : 		}
; 466  : 		else if(strFlavorName == "FLAVOR_NAVAL_TILE_IMPROVEMENT")

	push	OFFSET ??_C@_0BO@BCBMNLKM@FLAVOR_NAVAL_TILE_IMPROVEMENT?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@AdvisorInt

; 467  : 		{
; 468  : 			return 1;

	mov	DWORD PTR $T221195[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221195[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN15@AdvisorInt:

; 469  : 		}
; 470  : 		else if(strFlavorName == "FLAVOR_TILE_IMPROVEMENT")

	push	OFFSET ??_C@_0BI@OGGDNFPL@FLAVOR_TILE_IMPROVEMENT?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@AdvisorInt

; 471  : 		{
; 472  : 			return 1;

	mov	DWORD PTR $T221196[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221196[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN13@AdvisorInt:

; 473  : 		}
; 474  : 		else if(strFlavorName == "FLAVOR_RECON")

	push	OFFSET ??_C@_0N@PFDLLNAJ@FLAVOR_RECON?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@AdvisorInt

; 475  : 		{
; 476  : 			return 3;

	mov	DWORD PTR $T221197[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221197[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN11@AdvisorInt:

; 477  : 		}
; 478  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	push	OFFSET ??_C@_0BD@DBIDKOHE@FLAVOR_NAVAL_RECON?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@AdvisorInt

; 479  : 		{
; 480  : 			return 3;

	mov	DWORD PTR $T221198[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221198[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN9@AdvisorInt:

; 481  : 		}
; 482  : 		else if(strFlavorName == "FLAVOR_AIR")

	push	OFFSET ??_C@_0L@OJILNFCD@FLAVOR_AIR?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@AdvisorInt

; 483  : 		{
; 484  : 			return 5;

	mov	DWORD PTR $T221199[ebp], 5
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221199[ebp]
	jmp	$LN89@AdvisorInt
	jmp	$LN87@AdvisorInt
$LN7@AdvisorInt:

; 485  : 		}
; 486  : 		else if(strFlavorName == "FLAVOR_SCIENCE")

	push	OFFSET ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
	lea	eax, DWORD PTR _strFlavorName$[ebp]
	push	eax
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@AdvisorInt

; 487  : 		{
; 488  : 			return 10;

	mov	DWORD PTR $T221200[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221200[ebp]
	jmp	$LN89@AdvisorInt
	jmp	SHORT $LN87@AdvisorInt
$LN5@AdvisorInt:

; 489  : 		}
; 490  : 		else if(strFlavorName == "FLAVOR_SPACESHIP")

	push	OFFSET ??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@
	lea	edx, DWORD PTR _strFlavorName$[ebp]
	push	edx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AdvisorInt

; 491  : 		{
; 492  : 			return 10;

	mov	DWORD PTR $T221201[ebp], 10		; 0000000aH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221201[ebp]
	jmp	SHORT $LN89@AdvisorInt
	jmp	SHORT $LN87@AdvisorInt
$LN3@AdvisorInt:

; 493  : 		}
; 494  : 		else if(strFlavorName == "FLAVOR_NUKE")

	push	OFFSET ??_C@_0M@KEOIKGOO@FLAVOR_NUKE?$AA@
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN87@AdvisorInt

; 495  : 		{
; 496  : 			return 3;

	mov	DWORD PTR $T221202[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221202[ebp]
	jmp	SHORT $LN89@AdvisorInt
$LN87@AdvisorInt:

; 497  : 		}
; 498  : 		break;
; 499  : 	}
; 500  : 
; 501  : 	return 0;

	mov	DWORD PTR $T221203[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T221203[ebp]
$LN89@AdvisorInt:

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
$LN230@AdvisorInt:
	DD	$LN60@AdvisorInt
	DD	$LN86@AdvisorInt
	DD	$LN34@AdvisorInt
	DD	$LN18@AdvisorInt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z$0:
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ENDP ; CvAdvisorRecommender::AdvisorInterestInFlavor
EXTRN	?GetFlavorValue@CvTechEntry@@QBEHH@Z:PROC	; CvTechEntry::GetFlavorValue
EXTRN	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z:PROC ; CvTechXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T221405 = -64						; size = 4
$T221401 = -60						; size = 4
_ui$217655 = -56					; size = 4
_eAdvisor$217651 = -52					; size = 4
_uiAdvisor$217647 = -48					; size = 4
_iTechFlavorValue$217645 = -44				; size = 4
_eFlavor$217643 = -40					; size = 4
_i$217639 = -36						; size = 4
_ui$217633 = -32					; size = 4
_pTechEntry$ = -28					; size = 4
_aiAdvisorValues$ = -24					; size = 16
_eWinningAdvisor$ = -8					; size = 4
_iHighestValue$ = -4					; size = 4
_ePlayer$ = 8						; size = 4
_eTech$ = 12						; size = 4
?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z PROC ; CvAdvisorRecommender::FindUnassignedAdvisorForTech, COMDAT
; _this$ = ecx

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 	int aiAdvisorValues[NUM_ADVISOR_TYPES];
; 507  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217633[ebp], 0
	jmp	SHORT $LN16@FindUnassi
$LN15@FindUnassi:
	mov	eax, DWORD PTR _ui$217633[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217633[ebp], eax
$LN16@FindUnassi:
	cmp	DWORD PTR _ui$217633[ebp], 4
	jae	SHORT $LN14@FindUnassi

; 508  : 	{
; 509  : 		aiAdvisorValues[ui] = 0;

	mov	ecx, DWORD PTR _ui$217633[ebp]
	mov	DWORD PTR _aiAdvisorValues$[ebp+ecx*4], 0

; 510  : 	}

	jmp	SHORT $LN15@FindUnassi
$LN14@FindUnassi:

; 511  : 
; 512  : 	CvTechEntry* pTechEntry = GET_PLAYER(ePlayer).GetPlayerTechs()->GetTechs()->GetEntry(eTech);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T221401[ebp], edx
	mov	eax, DWORD PTR _eTech$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T221401[ebp]
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z ; CvTechXMLEntries::GetEntry
	mov	DWORD PTR _pTechEntry$[ebp], eax

; 513  : 	if(pTechEntry == NULL)

	cmp	DWORD PTR _pTechEntry$[ebp], 0
	jne	SHORT $LN13@FindUnassi

; 514  : 	{
; 515  : 		//Should never happen.
; 516  : 		return NO_ADVISOR_TYPE;

	or	eax, -1
	jmp	$LN17@FindUnassi
$LN13@FindUnassi:

; 517  : 	}
; 518  : 
; 519  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	mov	DWORD PTR _i$217639[ebp], 0
	jmp	SHORT $LN12@FindUnassi
$LN11@FindUnassi:
	mov	ecx, DWORD PTR _i$217639[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217639[ebp], ecx
$LN12@FindUnassi:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T221405[ebp], edx
	mov	eax, DWORD PTR _i$217639[ebp]
	cmp	eax, DWORD PTR $T221405[ebp]
	jge	SHORT $LN10@FindUnassi

; 520  : 	{
; 521  : 		FlavorTypes eFlavor = (FlavorTypes)i;

	mov	ecx, DWORD PTR _i$217639[ebp]
	mov	DWORD PTR _eFlavor$217643[ebp], ecx

; 522  : 		int iTechFlavorValue = pTechEntry->GetFlavorValue(eFlavor);

	mov	edx, DWORD PTR _eFlavor$217643[ebp]
	push	edx
	mov	ecx, DWORD PTR _pTechEntry$[ebp]
	call	?GetFlavorValue@CvTechEntry@@QBEHH@Z	; CvTechEntry::GetFlavorValue
	mov	DWORD PTR _iTechFlavorValue$217645[ebp], eax

; 523  : 		if(iTechFlavorValue <= 0)

	cmp	DWORD PTR _iTechFlavorValue$217645[ebp], 0
	jg	SHORT $LN9@FindUnassi

; 524  : 		{
; 525  : 			continue;

	jmp	SHORT $LN11@FindUnassi
$LN9@FindUnassi:

; 526  : 		}
; 527  : 
; 528  : 		for(uint uiAdvisor = 0; uiAdvisor < NUM_ADVISOR_TYPES; uiAdvisor++)

	mov	DWORD PTR _uiAdvisor$217647[ebp], 0
	jmp	SHORT $LN8@FindUnassi
$LN7@FindUnassi:
	mov	eax, DWORD PTR _uiAdvisor$217647[ebp]
	add	eax, 1
	mov	DWORD PTR _uiAdvisor$217647[ebp], eax
$LN8@FindUnassi:
	cmp	DWORD PTR _uiAdvisor$217647[ebp], 4
	jae	SHORT $LN6@FindUnassi

; 529  : 		{
; 530  : 			AdvisorTypes eAdvisor = (AdvisorTypes)uiAdvisor;

	mov	ecx, DWORD PTR _uiAdvisor$217647[ebp]
	mov	DWORD PTR _eAdvisor$217651[ebp], ecx

; 531  : 			aiAdvisorValues[uiAdvisor] += iTechFlavorValue * AdvisorInterestInFlavor(eAdvisor, eFlavor);

	mov	edx, DWORD PTR _eFlavor$217643[ebp]
	push	edx
	mov	eax, DWORD PTR _eAdvisor$217651[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
	imul	eax, DWORD PTR _iTechFlavorValue$217645[ebp]
	mov	ecx, DWORD PTR _uiAdvisor$217647[ebp]
	add	eax, DWORD PTR _aiAdvisorValues$[ebp+ecx*4]
	mov	edx, DWORD PTR _uiAdvisor$217647[ebp]
	mov	DWORD PTR _aiAdvisorValues$[ebp+edx*4], eax

; 532  : 		}

	jmp	SHORT $LN7@FindUnassi
$LN6@FindUnassi:

; 533  : 	}

	jmp	SHORT $LN11@FindUnassi
$LN10@FindUnassi:

; 534  : 
; 535  : 	AdvisorTypes eWinningAdvisor = NO_ADVISOR_TYPE;

	mov	DWORD PTR _eWinningAdvisor$[ebp], -1

; 536  : 	int iHighestValue = 0;

	mov	DWORD PTR _iHighestValue$[ebp], 0

; 537  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217655[ebp], 0
	jmp	SHORT $LN5@FindUnassi
$LN4@FindUnassi:
	mov	eax, DWORD PTR _ui$217655[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217655[ebp], eax
$LN5@FindUnassi:
	cmp	DWORD PTR _ui$217655[ebp], 4
	jae	SHORT $LN3@FindUnassi

; 538  : 	{
; 539  : 		// skip this advisor if already assigned
; 540  : 		if(m_aRecommendedTechs[ui] != NO_TECH)

	mov	ecx, DWORD PTR _ui$217655[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+48], -1
	je	SHORT $LN2@FindUnassi

; 541  : 		{
; 542  : 			continue;

	jmp	SHORT $LN4@FindUnassi
$LN2@FindUnassi:

; 543  : 		}
; 544  : 
; 545  : 		if(aiAdvisorValues[ui] > iHighestValue)

	mov	eax, DWORD PTR _ui$217655[ebp]
	mov	ecx, DWORD PTR _aiAdvisorValues$[ebp+eax*4]
	cmp	ecx, DWORD PTR _iHighestValue$[ebp]
	jle	SHORT $LN1@FindUnassi

; 546  : 		{
; 547  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	edx, DWORD PTR _ui$217655[ebp]
	mov	DWORD PTR _eWinningAdvisor$[ebp], edx

; 548  : 			iHighestValue = aiAdvisorValues[ui];

	mov	eax, DWORD PTR _ui$217655[ebp]
	mov	ecx, DWORD PTR _aiAdvisorValues$[ebp+eax*4]
	mov	DWORD PTR _iHighestValue$[ebp], ecx
$LN1@FindUnassi:

; 549  : 		}
; 550  : 	}

	jmp	SHORT $LN4@FindUnassi
$LN3@FindUnassi:

; 551  : 
; 552  : 	return eWinningAdvisor;

	mov	eax, DWORD PTR _eWinningAdvisor$[ebp]
$LN17@FindUnassi:

; 553  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ENDP ; CvAdvisorRecommender::FindUnassignedAdvisorForTech
_TEXT	ENDS
EXTRN	?GetFlavorValue@CvProjectEntry@@QBEHH@Z:PROC	; CvProjectEntry::GetFlavorValue
EXTRN	?GetFlavorValue@CvUnitEntry@@QBEHH@Z:PROC	; CvUnitEntry::GetFlavorValue
EXTRN	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z:PROC	; CvBuildingEntry::GetFlavorValue
EXTRN	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z:PROC ; CvGlobals::getProjectInfo
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
; Function compile flags: /Odtp
;	COMDAT ?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z
_TEXT	SEGMENT
tv68 = -76						; size = 4
_this$ = -72						; size = 4
$T221411 = -68						; size = 4
_ui$217706 = -64					; size = 4
_eAdvisor$217702 = -60					; size = 4
_uiAdvisor$217698 = -56					; size = 4
_iFlavorValue$217691 = -52				; size = 4
_eFlavor$217689 = -48					; size = 4
_i$217685 = -44						; size = 4
_ui$217668 = -40					; size = 4
_pUnit$ = -36						; size = 4
_pBuilding$ = -32					; size = 4
_aiAdvisorValues$ = -28					; size = 16
_eWinningAdvisor$ = -12					; size = 4
_pProject$ = -8						; size = 4
_iHighestValue$ = -4					; size = 4
___formal$ = 8						; size = 4
_buildable$ = 12					; size = 4
?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z PROC ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable, COMDAT
; _this$ = ecx

; 560  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 561  : 	int aiAdvisorValues[NUM_ADVISOR_TYPES];
; 562  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217668[ebp], 0
	jmp	SHORT $LN25@FindUnassi@2
$LN24@FindUnassi@2:
	mov	eax, DWORD PTR _ui$217668[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217668[ebp], eax
$LN25@FindUnassi@2:
	cmp	DWORD PTR _ui$217668[ebp], 4
	jae	SHORT $LN23@FindUnassi@2

; 563  : 	{
; 564  : 		aiAdvisorValues[ui] = 0;

	mov	ecx, DWORD PTR _ui$217668[ebp]
	mov	DWORD PTR _aiAdvisorValues$[ebp+ecx*4], 0

; 565  : 	}

	jmp	SHORT $LN24@FindUnassi@2
$LN23@FindUnassi@2:

; 566  : 
; 567  : 	CvBuildingEntry* pBuilding = NULL;

	mov	DWORD PTR _pBuilding$[ebp], 0

; 568  : 	CvUnitEntry*     pUnit     = NULL;

	mov	DWORD PTR _pUnit$[ebp], 0

; 569  : 	CvProjectEntry*  pProject  = NULL;

	mov	DWORD PTR _pProject$[ebp], 0

; 570  : 	switch(buildable.m_eBuildableType)

	mov	edx, DWORD PTR _buildable$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 1
	je	SHORT $LN19@FindUnassi@2
	cmp	DWORD PTR tv68[ebp], 2
	je	SHORT $LN20@FindUnassi@2
	cmp	DWORD PTR tv68[ebp], 3
	je	SHORT $LN18@FindUnassi@2
	jmp	SHORT $LN21@FindUnassi@2
$LN20@FindUnassi@2:

; 571  : 	{
; 572  : 	case CITY_BUILDABLE_UNIT:
; 573  : 		pUnit = GC.getUnitInfo((UnitTypes)buildable.m_iIndex);

	mov	ecx, DWORD PTR _buildable$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pUnit$[ebp], eax

; 574  : 		break;

	jmp	SHORT $LN21@FindUnassi@2
$LN19@FindUnassi@2:

; 575  : 	case CITY_BUILDABLE_BUILDING:
; 576  : 		pBuilding = GC.getBuildingInfo((BuildingTypes)buildable.m_iIndex);

	mov	eax, DWORD PTR _buildable$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuilding$[ebp], eax

; 577  : 		break;

	jmp	SHORT $LN21@FindUnassi@2
$LN18@FindUnassi@2:

; 578  : 	case CITY_BUILDABLE_PROJECT:
; 579  : 		pProject = GC.getProjectInfo((ProjectTypes)buildable.m_iIndex);

	mov	edx, DWORD PTR _buildable$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
	mov	DWORD PTR _pProject$[ebp], eax
$LN21@FindUnassi@2:

; 580  : 		break;
; 581  : 	}
; 582  : 
; 583  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	mov	DWORD PTR _i$217685[ebp], 0
	jmp	SHORT $LN17@FindUnassi@2
$LN16@FindUnassi@2:
	mov	ecx, DWORD PTR _i$217685[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$217685[ebp], ecx
$LN17@FindUnassi@2:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	DWORD PTR $T221411[ebp], edx
	mov	eax, DWORD PTR _i$217685[ebp]
	cmp	eax, DWORD PTR $T221411[ebp]
	jge	$LN15@FindUnassi@2

; 584  : 	{
; 585  : 		FlavorTypes eFlavor = (FlavorTypes)i;

	mov	ecx, DWORD PTR _i$217685[ebp]
	mov	DWORD PTR _eFlavor$217689[ebp], ecx

; 586  : 		int iFlavorValue = 0;

	mov	DWORD PTR _iFlavorValue$217691[ebp], 0

; 587  : 		if(pBuilding)

	cmp	DWORD PTR _pBuilding$[ebp], 0
	je	SHORT $LN14@FindUnassi@2

; 588  : 		{
; 589  : 			iFlavorValue = pBuilding->GetFlavorValue(eFlavor);

	mov	edx, DWORD PTR _eFlavor$217689[ebp]
	push	edx
	mov	ecx, DWORD PTR _pBuilding$[ebp]
	call	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z ; CvBuildingEntry::GetFlavorValue
	mov	DWORD PTR _iFlavorValue$217691[ebp], eax
	jmp	SHORT $LN13@FindUnassi@2
$LN14@FindUnassi@2:

; 590  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 591  : 			CvPlayer* pPlayer = pCity->GetPlayer();
; 592  : 			CvPlayerPolicies* pPlayerPolicies = NULL;
; 593  : 			if (pPlayer)
; 594  : 				pPlayerPolicies = pPlayer->GetPlayerPolicies();
; 595  : 			if (pPlayerPolicies)
; 596  : 			{
; 597  : 				for (int iI = 0; iI < GC.getNumPolicyInfos(); iI++)
; 598  : 				{
; 599  : 					PolicyTypes ePolicy = static_cast<PolicyTypes>(iI);
; 600  : 					CvPolicyEntry* pPolicy = GC.getPolicyInfo(ePolicy);
; 601  : 					if (pPolicy && pPlayerPolicies->HasPolicy(ePolicy))
; 602  : 					{
; 603  : 						iFlavorValue += pPolicy->GetBuildingClassFlavorChanges(pBuilding->GetBuildingClassType(), eFlavor);
; 604  : 					}
; 605  : 				}
; 606  : 			}
; 607  : #endif
; 608  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 609  : 			const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(pCity->GetCityReligions()->GetReligiousMajority(), pCity->getOwner());
; 610  : 			if (pReligion)
; 611  : 			{
; 612  : 				pReligion->m_Beliefs.GetBuildingClassFlavorChange(static_cast<BuildingClassTypes>(pBuilding->GetBuildingClassType()), eFlavor);
; 613  : 			}
; 614  : #endif
; 615  : 		}
; 616  : 		else if(pUnit)

	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN12@FindUnassi@2

; 617  : 		{
; 618  : 			iFlavorValue = pUnit->GetFlavorValue(eFlavor);

	mov	eax, DWORD PTR _eFlavor$217689[ebp]
	push	eax
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?GetFlavorValue@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetFlavorValue
	mov	DWORD PTR _iFlavorValue$217691[ebp], eax
	jmp	SHORT $LN13@FindUnassi@2
$LN12@FindUnassi@2:

; 619  : 		}
; 620  : 		else if(pProject)

	cmp	DWORD PTR _pProject$[ebp], 0
	je	SHORT $LN13@FindUnassi@2

; 621  : 		{
; 622  : 			iFlavorValue = pProject->GetFlavorValue(eFlavor);

	mov	ecx, DWORD PTR _eFlavor$217689[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pProject$[ebp]
	call	?GetFlavorValue@CvProjectEntry@@QBEHH@Z	; CvProjectEntry::GetFlavorValue
	mov	DWORD PTR _iFlavorValue$217691[ebp], eax
$LN13@FindUnassi@2:

; 623  : 		}
; 624  : 
; 625  : 		if(iFlavorValue <= 0)

	cmp	DWORD PTR _iFlavorValue$217691[ebp], 0
	jg	SHORT $LN9@FindUnassi@2

; 626  : 		{
; 627  : 			continue;

	jmp	SHORT $LN16@FindUnassi@2
$LN9@FindUnassi@2:

; 628  : 		}
; 629  : 
; 630  : 		for(uint uiAdvisor = 0; uiAdvisor < NUM_ADVISOR_TYPES; uiAdvisor++)

	mov	DWORD PTR _uiAdvisor$217698[ebp], 0
	jmp	SHORT $LN8@FindUnassi@2
$LN7@FindUnassi@2:
	mov	edx, DWORD PTR _uiAdvisor$217698[ebp]
	add	edx, 1
	mov	DWORD PTR _uiAdvisor$217698[ebp], edx
$LN8@FindUnassi@2:
	cmp	DWORD PTR _uiAdvisor$217698[ebp], 4
	jae	SHORT $LN6@FindUnassi@2

; 631  : 		{
; 632  : 			AdvisorTypes eAdvisor = (AdvisorTypes)uiAdvisor;

	mov	eax, DWORD PTR _uiAdvisor$217698[ebp]
	mov	DWORD PTR _eAdvisor$217702[ebp], eax

; 633  : 			aiAdvisorValues[uiAdvisor] += iFlavorValue * AdvisorInterestInFlavor(eAdvisor, eFlavor);

	mov	ecx, DWORD PTR _eFlavor$217689[ebp]
	push	ecx
	mov	edx, DWORD PTR _eAdvisor$217702[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
	imul	eax, DWORD PTR _iFlavorValue$217691[ebp]
	mov	ecx, DWORD PTR _uiAdvisor$217698[ebp]
	add	eax, DWORD PTR _aiAdvisorValues$[ebp+ecx*4]
	mov	edx, DWORD PTR _uiAdvisor$217698[ebp]
	mov	DWORD PTR _aiAdvisorValues$[ebp+edx*4], eax

; 634  : 		}

	jmp	SHORT $LN7@FindUnassi@2
$LN6@FindUnassi@2:

; 635  : 	}

	jmp	$LN16@FindUnassi@2
$LN15@FindUnassi@2:

; 636  : 
; 637  : 	AdvisorTypes eWinningAdvisor = NO_ADVISOR_TYPE;

	mov	DWORD PTR _eWinningAdvisor$[ebp], -1

; 638  : 	int iHighestValue = 0;

	mov	DWORD PTR _iHighestValue$[ebp], 0

; 639  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)

	mov	DWORD PTR _ui$217706[ebp], 0
	jmp	SHORT $LN5@FindUnassi@2
$LN4@FindUnassi@2:
	mov	eax, DWORD PTR _ui$217706[ebp]
	add	eax, 1
	mov	DWORD PTR _ui$217706[ebp], eax
$LN5@FindUnassi@2:
	cmp	DWORD PTR _ui$217706[ebp], 4
	jae	SHORT $LN3@FindUnassi@2

; 640  : 	{
; 641  : 		// skip this advisor if already assigned
; 642  : 		if(m_aRecommendedBuilds[ui].m_eBuildableType != NOT_A_CITY_BUILDABLE)

	mov	ecx, DWORD PTR _ui$217706[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx], 0
	je	SHORT $LN2@FindUnassi@2

; 643  : 		{
; 644  : 			continue;

	jmp	SHORT $LN4@FindUnassi@2
$LN2@FindUnassi@2:

; 645  : 		}
; 646  : 
; 647  : 		if(aiAdvisorValues[ui] > iHighestValue)

	mov	eax, DWORD PTR _ui$217706[ebp]
	mov	ecx, DWORD PTR _aiAdvisorValues$[ebp+eax*4]
	cmp	ecx, DWORD PTR _iHighestValue$[ebp]
	jle	SHORT $LN1@FindUnassi@2

; 648  : 		{
; 649  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	edx, DWORD PTR _ui$217706[ebp]
	mov	DWORD PTR _eWinningAdvisor$[ebp], edx

; 650  : 			iHighestValue = aiAdvisorValues[ui];

	mov	eax, DWORD PTR _ui$217706[ebp]
	mov	ecx, DWORD PTR _aiAdvisorValues$[ebp+eax*4]
	mov	DWORD PTR _iHighestValue$[ebp], ecx
$LN1@FindUnassi@2:

; 651  : 		}
; 652  : 	}

	jmp	SHORT $LN4@FindUnassi@2
$LN3@FindUnassi@2:

; 653  : 
; 654  : 	return eWinningAdvisor;

	mov	eax, DWORD PTR _eWinningAdvisor$[ebp]

; 655  : 
; 656  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ENDP ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ PROC		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ ENDP		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T221544 = -20						; size = 4
_pRet$221541 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221544[ebp], edx
	cmp	DWORD PTR $T221544[ebp], 4
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T221544[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221541[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221544[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$221541[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$221541[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T221575 = -24						; size = 4
$T221574 = -20						; size = 4
_i$221567 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221575[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T221574[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$221567[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$221567[ebp]
	add	eax, 1
	mov	DWORD PTR _i$221567[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$221567[ebp]
	cmp	ecx, DWORD PTR $T221575[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T221574[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T221574[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T221588 = -8						; size = 4
$T221587 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T221588[ebp], ecx
	cmp	DWORD PTR $T221588[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T221588[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T221588[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T221588[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T221587[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T221652 = -20						; size = 4
_pRet$221649 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 80			; 00000050H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221652[ebp], edx
	cmp	DWORD PTR $T221652[ebp], 80		; 00000050H
	jbe	SHORT $LN7@FStaticVec@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T221652[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221649[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221652[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@3
$LN7@FStaticVec@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$221649[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 80			; 00000050H
$LN8@FStaticVec@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$221649[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T221683 = -24						; size = 4
$T221682 = -20						; size = 4
_i$221675 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221683[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T221682[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@4
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@4
	mov	DWORD PTR _i$221675[ebp], 0
	jmp	SHORT $LN10@FStaticVec@4
$LN9@FStaticVec@4:
	mov	eax, DWORD PTR _i$221675[ebp]
	add	eax, 1
	mov	DWORD PTR _i$221675[ebp], eax
$LN10@FStaticVec@4:
	mov	ecx, DWORD PTR _i$221675[ebp]
	cmp	ecx, DWORD PTR $T221683[ebp]
	jae	SHORT $LN5@FStaticVec@4
	jmp	SHORT $LN9@FStaticVec@4
$LN5@FStaticVec@4:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T221682[ebp], edx
	je	SHORT $LN1@FStaticVec@4
	mov	eax, DWORD PTR $T221682[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@4:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T221696 = -8						; size = 4
$T221695 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+652], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T221696[ebp], ecx
	cmp	DWORD PTR $T221696[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR $T221696[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T221696[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T221696[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@2:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T221695[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T221760 = -20						; size = 4
_pRet$221757 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 50			; 00000032H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221760[ebp], edx
	cmp	DWORD PTR $T221760[ebp], 50		; 00000032H
	jbe	SHORT $LN7@FStaticVec@5
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T221760[ebp]
	shl	eax, 4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221757[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221760[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@5
$LN7@FStaticVec@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$221757[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 50			; 00000032H
$LN8@FStaticVec@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$221757[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T221791 = -24						; size = 4
$T221790 = -20						; size = 4
_i$221783 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221791[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T221790[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@6
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@6
	mov	DWORD PTR _i$221783[ebp], 0
	jmp	SHORT $LN10@FStaticVec@6
$LN9@FStaticVec@6:
	mov	eax, DWORD PTR _i$221783[ebp]
	add	eax, 1
	mov	DWORD PTR _i$221783[ebp], eax
$LN10@FStaticVec@6:
	mov	ecx, DWORD PTR _i$221783[ebp]
	cmp	ecx, DWORD PTR $T221791[ebp]
	jae	SHORT $LN5@FStaticVec@6
	jmp	SHORT $LN9@FStaticVec@6
$LN5@FStaticVec@6:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T221790[ebp], edx
	je	SHORT $LN1@FStaticVec@6
	mov	eax, DWORD PTR $T221790[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@6:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T221804 = -8						; size = 4
$T221803 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+812], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T221804[ebp], ecx
	je	SHORT $LN4@push_back@3
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR $T221804[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T221804[ebp]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T221804[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@3:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T221803[ebp], edx

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv157[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T221868 = -20						; size = 4
_pRet$221864 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T221868[ebp], edx
	cmp	DWORD PTR $T221868[ebp], 4
	jbe	SHORT $LN7@FStaticVec@7
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T221868[ebp]
	shl	eax, 4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221864[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T221868[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@7
$LN7@FStaticVec@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$221864[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN8@FStaticVec@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$221864[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T221899 = -24						; size = 4
$T221898 = -20						; size = 4
_i$221893 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T221899[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T221898[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@8
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@8
	mov	DWORD PTR _i$221893[ebp], 0
	jmp	SHORT $LN10@FStaticVec@8
$LN9@FStaticVec@8:
	mov	eax, DWORD PTR _i$221893[ebp]
	add	eax, 1
	mov	DWORD PTR _i$221893[ebp], eax
$LN10@FStaticVec@8:
	mov	ecx, DWORD PTR _i$221893[ebp]
	cmp	ecx, DWORD PTR $T221899[ebp]
	jae	SHORT $LN5@FStaticVec@8
	jmp	SHORT $LN9@FStaticVec@8
$LN5@FStaticVec@8:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T221898[ebp], edx
	je	SHORT $LN1@FStaticVec@8
	mov	eax, DWORD PTR $T221898[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@8:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T221912 = -8						; size = 4
$T221911 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@4

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T221912[ebp], ecx
	je	SHORT $LN4@push_back@4
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR $T221912[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T221912[ebp]
	mov	edx, DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T221912[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN5@push_back@4
$LN4@push_back@4:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@4:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T221911[ebp], edx

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv157[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T222006 = -44						; size = 4
$T222005 = -40						; size = 4
_i$221998 = -36						; size = 4
$T221984 = -32						; size = 4
$T221977 = -28						; size = 4
_pRet$221974 = -24					; size = 4
$T221967 = -20						; size = 4
$T221966 = -16						; size = 4
_i$217955 = -12						; size = 4
_uiNewSize$217947 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$217947[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$217947[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$217947[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T221977[ebp], ecx
	cmp	DWORD PTR $T221977[ebp], 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T221977[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$221974[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T221977[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$221974[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$221974[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$217955[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$217955[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217955[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$217955[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$217955[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T221967[ebp], ecx
	cmp	DWORD PTR $T221967[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$217955[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T221984[ebp], edx
	mov	eax, DWORD PTR $T221967[ebp]
	mov	ecx, DWORD PTR $T221984[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T221967[ebp]
	mov	ecx, DWORD PTR $T221984[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T221967[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T221966[ebp], ecx
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T222006[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T222005[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize
	mov	DWORD PTR _i$221998[ebp], 0
	jmp	SHORT $LN29@GrowSize
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$221998[ebp]
	add	edx, 1
	mov	DWORD PTR _i$221998[ebp], edx
$LN29@GrowSize:
	mov	eax, DWORD PTR _i$221998[ebp]
	cmp	eax, DWORD PTR $T222006[ebp]
	jae	SHORT $LN24@GrowSize
	jmp	SHORT $LN28@GrowSize
$LN24@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T222005[ebp], ecx
	je	SHORT $LN25@GrowSize
	mov	edx, DWORD PTR $T222005[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T222052 = -44						; size = 4
$T222051 = -40						; size = 4
_i$222044 = -36						; size = 4
$T222030 = -32						; size = 4
$T222023 = -28						; size = 4
_pRet$222020 = -24					; size = 4
$T222013 = -20						; size = 4
$T222012 = -16						; size = 4
_i$218007 = -12						; size = 4
_uiNewSize$217999 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@2

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$217999[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$217999[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@2

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@2
$LN6@GrowSize@2:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$217999[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@2
$LN7@GrowSize@2:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T222023[ebp], ecx
	cmp	DWORD PTR $T222023[ebp], 80		; 00000050H
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T222023[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$222020[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T222023[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@2
$LN16@GrowSize@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$222020[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 80			; 00000050H
$LN17@GrowSize@2:
	mov	ecx, DWORD PTR _pRet$222020[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@2

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@2
$LN5@GrowSize@2:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$218007[ebp], 0
	jmp	SHORT $LN3@GrowSize@2
$LN2@GrowSize@2:
	mov	edx, DWORD PTR _i$218007[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218007[ebp], edx
$LN3@GrowSize@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$218007[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@2

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$218007[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T222013[ebp], ecx
	cmp	DWORD PTR $T222013[ebp], 0
	je	SHORT $LN12@GrowSize@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$218007[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T222030[ebp], edx
	mov	eax, DWORD PTR $T222013[ebp]
	mov	ecx, DWORD PTR $T222030[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T222013[ebp]
	mov	ecx, DWORD PTR $T222030[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T222013[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@2
$LN12@GrowSize@2:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@2:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T222012[ebp], ecx
	jmp	SHORT $LN2@GrowSize@2
$LN4@GrowSize@2:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T222052[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T222051[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@2
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@2
	mov	DWORD PTR _i$222044[ebp], 0
	jmp	SHORT $LN29@GrowSize@2
$LN28@GrowSize@2:
	mov	edx, DWORD PTR _i$222044[ebp]
	add	edx, 1
	mov	DWORD PTR _i$222044[ebp], edx
$LN29@GrowSize@2:
	mov	eax, DWORD PTR _i$222044[ebp]
	cmp	eax, DWORD PTR $T222052[ebp]
	jae	SHORT $LN24@GrowSize@2
	jmp	SHORT $LN28@GrowSize@2
$LN24@GrowSize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T222051[ebp], ecx
	je	SHORT $LN25@GrowSize@2
	mov	edx, DWORD PTR $T222051[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+652], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T222097 = -44						; size = 4
$T222096 = -40						; size = 4
_i$222089 = -36						; size = 4
$T222075 = -32						; size = 4
$T222068 = -28						; size = 4
_pRet$222065 = -24					; size = 4
$T222058 = -20						; size = 4
$T222057 = -16						; size = 4
_i$218059 = -12						; size = 4
_uiNewSize$218051 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@3

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$218051[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$218051[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@3

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@3
$LN6@GrowSize@3:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$218051[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@3
$LN7@GrowSize@3:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T222068[ebp], ecx
	cmp	DWORD PTR $T222068[ebp], 50		; 00000032H
	jbe	SHORT $LN16@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T222068[ebp]
	shl	edx, 4
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$222065[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T222068[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@3
$LN16@GrowSize@3:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$222065[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 50			; 00000032H
$LN17@GrowSize@3:
	mov	ecx, DWORD PTR _pRet$222065[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@3

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@3
$LN5@GrowSize@3:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$218059[ebp], 0
	jmp	SHORT $LN3@GrowSize@3
$LN2@GrowSize@3:
	mov	edx, DWORD PTR _i$218059[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218059[ebp], edx
$LN3@GrowSize@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$218059[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@3

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$218059[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T222058[ebp], edx
	je	SHORT $LN12@GrowSize@3
	mov	eax, DWORD PTR _i$218059[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR $T222075[ebp], eax
	mov	edx, DWORD PTR $T222075[ebp]
	mov	eax, DWORD PTR $T222058[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T222058[ebp]
	mov	ecx, DWORD PTR $T222075[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T222058[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@3
$LN12@GrowSize@3:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@3:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T222057[ebp], ecx
	jmp	SHORT $LN2@GrowSize@3
$LN4@GrowSize@3:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T222097[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T222096[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@3
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@3
	mov	DWORD PTR _i$222089[ebp], 0
	jmp	SHORT $LN29@GrowSize@3
$LN28@GrowSize@3:
	mov	edx, DWORD PTR _i$222089[ebp]
	add	edx, 1
	mov	DWORD PTR _i$222089[ebp], edx
$LN29@GrowSize@3:
	mov	eax, DWORD PTR _i$222089[ebp]
	cmp	eax, DWORD PTR $T222097[ebp]
	jae	SHORT $LN24@GrowSize@3
	jmp	SHORT $LN28@GrowSize@3
$LN24@GrowSize@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T222096[ebp], ecx
	je	SHORT $LN25@GrowSize@3
	mov	edx, DWORD PTR $T222096[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+812], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T222142 = -44						; size = 4
$T222141 = -40						; size = 4
_i$222136 = -36						; size = 4
$T222120 = -32						; size = 4
$T222113 = -28						; size = 4
_pRet$222109 = -24					; size = 4
$T222103 = -20						; size = 4
$T222102 = -16						; size = 4
_i$218111 = -12						; size = 4
_uiNewSize$218103 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@4:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@4

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$218103[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$218103[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@4

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@4
$LN6@GrowSize@4:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$218103[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@4
$LN7@GrowSize@4:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T222113[ebp], ecx
	cmp	DWORD PTR $T222113[ebp], 4
	jbe	SHORT $LN16@GrowSize@4
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T222113[ebp]
	shl	edx, 4
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$222109[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T222113[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@4
$LN16@GrowSize@4:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$222109[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4
$LN17@GrowSize@4:
	mov	ecx, DWORD PTR _pRet$222109[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@4

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@4
$LN5@GrowSize@4:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$218111[ebp], 0
	jmp	SHORT $LN3@GrowSize@4
$LN2@GrowSize@4:
	mov	edx, DWORD PTR _i$218111[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218111[ebp], edx
$LN3@GrowSize@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$218111[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@4

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$218111[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T222103[ebp], edx
	je	SHORT $LN12@GrowSize@4
	mov	eax, DWORD PTR _i$218111[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR $T222120[ebp], eax
	mov	edx, DWORD PTR $T222120[ebp]
	mov	eax, DWORD PTR $T222103[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T222103[ebp]
	mov	ecx, DWORD PTR $T222120[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T222103[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@4
$LN12@GrowSize@4:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@4:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T222102[ebp], ecx
	jmp	SHORT $LN2@GrowSize@4
$LN4@GrowSize@4:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T222142[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T222141[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@4
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@4
	mov	DWORD PTR _i$222136[ebp], 0
	jmp	SHORT $LN29@GrowSize@4
$LN28@GrowSize@4:
	mov	edx, DWORD PTR _i$222136[ebp]
	add	edx, 1
	mov	DWORD PTR _i$222136[ebp], edx
$LN29@GrowSize@4:
	mov	eax, DWORD PTR _i$222136[ebp]
	cmp	eax, DWORD PTR $T222142[ebp]
	jae	SHORT $LN24@GrowSize@4
	jmp	SHORT $LN28@GrowSize@4
$LN24@GrowSize@4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T222141[ebp], ecx
	je	SHORT $LN25@GrowSize@4
	mov	edx, DWORD PTR $T222141[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@4:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+76], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
_TEXT	ENDS
;	COMDAT ??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_func$ = 16						; size = 4
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z PROC ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>, COMDAT

; 2030 : FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2)) { 

	push	ebp
	mov	ebp, esp

; 2031 : 	return FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE>(x, func);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _func$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2032 : }

	pop	ebp
	ret	0
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ENDP ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z
_TEXT	SEGMENT
$T222305 = -128						; size = 4
__Mid$218253 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$218253[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$218253[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$218253[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$218253[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$218253[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$218253[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$218253[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T222305[ebp], edx
	jmp	SHORT $LN92@Sort
$LN91@Sort:
	mov	eax, DWORD PTR $T222305[ebp]
	sub	eax, 8
	mov	DWORD PTR $T222305[ebp], eax
$LN92@Sort:
	mov	ecx, DWORD PTR $T222305[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort
	mov	edx, DWORD PTR $T222305[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort
	push	0
	mov	eax, DWORD PTR $T222305[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort:
	jmp	SHORT $LN91@Sort
$LN88@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z
_TEXT	SEGMENT
$T222501 = -128						; size = 4
__Mid$218324 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort@2:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort@2
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort@2

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$218324[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$218324[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$218324[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort@2

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$218324[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$218324[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort@2
$LN5@Sort@2:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$218324[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$218324[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort@2:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort@2
$LN6@Sort@2:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort@2

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort@2
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort@2:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T222501[ebp], edx
	jmp	SHORT $LN92@Sort@2
$LN91@Sort@2:
	mov	eax, DWORD PTR $T222501[ebp]
	sub	eax, 8
	mov	DWORD PTR $T222501[ebp], eax
$LN92@Sort@2:
	mov	ecx, DWORD PTR $T222501[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort@2
	mov	edx, DWORD PTR $T222501[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort@2
	push	0
	mov	eax, DWORD PTR $T222501[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort@2:
	jmp	SHORT $LN91@Sort@2
$LN88@Sort@2:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort@2
$LN3@Sort@2:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort@2

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort@2:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z
_TEXT	SEGMENT
$T222697 = -136						; size = 4
__Mid$218395 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
$LN7@Sort@3:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort@3
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort@3

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$218395[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$218395[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 4
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$218395[ebp+4]
	sar	edx, 4
	cmp	ecx, edx
	jge	SHORT $LN5@Sort@3

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$218395[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$218395[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort@3
$LN5@Sort@3:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$218395[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$218395[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort@3:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort@3
$LN6@Sort@3:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort@3

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	cmp	edx, 1
	jle	SHORT $LN76@Sort@3
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort@3:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T222697[ebp], edx
	jmp	SHORT $LN92@Sort@3
$LN91@Sort@3:
	mov	eax, DWORD PTR $T222697[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T222697[ebp], eax
$LN92@Sort@3:
	mov	ecx, DWORD PTR $T222697[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 4
	cmp	ecx, 1
	jle	SHORT $LN88@Sort@3
	mov	edx, DWORD PTR $T222697[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	cmp	edx, 1
	jle	SHORT $LN96@Sort@3
	push	0
	mov	eax, DWORD PTR $T222697[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort@3:
	jmp	SHORT $LN91@Sort@3
$LN88@Sort@3:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort@3
$LN3@Sort@3:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort@3

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort@3:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z
_TEXT	SEGMENT
$T222893 = -136						; size = 4
__Mid$218466 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
$LN7@Sort@4:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort@4
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort@4

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$218466[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$218466[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 4
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$218466[ebp+4]
	sar	edx, 4
	cmp	ecx, edx
	jge	SHORT $LN5@Sort@4

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$218466[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$218466[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort@4
$LN5@Sort@4:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$218466[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$218466[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort@4:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort@4
$LN6@Sort@4:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort@4

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	cmp	edx, 1
	jle	SHORT $LN76@Sort@4
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort@4:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T222893[ebp], edx
	jmp	SHORT $LN92@Sort@4
$LN91@Sort@4:
	mov	eax, DWORD PTR $T222893[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T222893[ebp], eax
$LN92@Sort@4:
	mov	ecx, DWORD PTR $T222893[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 4
	cmp	ecx, 1
	jle	SHORT $LN88@Sort@4
	mov	edx, DWORD PTR $T222893[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	cmp	edx, 1
	jle	SHORT $LN96@Sort@4
	push	0
	mov	eax, DWORD PTR $T222893[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort@4:
	jmp	SHORT $LN91@Sort@4
$LN88@Sort@4:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort@4
$LN3@Sort@4:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort@4

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort@4:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
$T223136 = -124						; size = 4
__Tmp$223132 = -120					; size = 8
$T223116 = -112						; size = 4
$T223115 = -108						; size = 4
__Tmp$223111 = -104					; size = 8
$T223095 = -96						; size = 4
__Tmp$223091 = -92					; size = 8
$T223075 = -84						; size = 4
$T223074 = -80						; size = 4
__Tmp$223070 = -76					; size = 8
$T223054 = -68						; size = 4
$T223053 = -64						; size = 4
__Tmp$223048 = -60					; size = 8
$T223030 = -52						; size = 4
$T223029 = -48						; size = 4
__Tmp$223024 = -44					; size = 8
$T223003 = -36						; size = 4
__Tmp$222998 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_
	jmp	SHORT $LN17@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223003[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T223003[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_
	mov	ecx, DWORD PTR $T223003[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$222998[ebp], edx
	mov	eax, DWORD PTR $T223003[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$222998[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223003[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$222998[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$222998[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_
	jmp	SHORT $LN10@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T223030[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223029[ebp], edx
	mov	eax, DWORD PTR $T223029[ebp]
	cmp	eax, DWORD PTR $T223030[ebp]
	je	SHORT $LN10@Unguarded_
	mov	ecx, DWORD PTR $T223029[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223024[ebp], edx
	mov	eax, DWORD PTR $T223029[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223024[ebp+4], ecx
	mov	edx, DWORD PTR $T223030[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223029[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T223030[ebp]
	mov	ecx, DWORD PTR __Tmp$223024[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223024[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_
$LN12@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223054[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223053[ebp], eax
	mov	ecx, DWORD PTR $T223053[ebp]
	cmp	ecx, DWORD PTR $T223054[ebp]
	je	SHORT $LN5@Unguarded_
	mov	edx, DWORD PTR $T223053[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223048[ebp], eax
	mov	ecx, DWORD PTR $T223053[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223048[ebp+4], edx
	mov	eax, DWORD PTR $T223054[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T223053[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T223054[ebp]
	mov	edx, DWORD PTR __Tmp$223048[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223048[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223075[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223074[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T223074[ebp]
	cmp	eax, DWORD PTR $T223075[ebp]
	je	SHORT $LN73@Unguarded_
	mov	ecx, DWORD PTR $T223074[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223070[ebp], edx
	mov	eax, DWORD PTR $T223074[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223070[ebp+4], ecx
	mov	edx, DWORD PTR $T223075[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223074[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T223075[ebp]
	mov	ecx, DWORD PTR __Tmp$223070[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223070[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN6@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223095[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T223095[ebp]
	je	SHORT $LN2@Unguarded_
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223091[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223091[ebp+4], eax
	mov	ecx, DWORD PTR $T223095[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T223095[ebp]
	mov	eax, DWORD PTR __Tmp$223091[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223091[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223116[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223115[ebp], ecx
	mov	edx, DWORD PTR $T223115[ebp]
	cmp	edx, DWORD PTR $T223116[ebp]
	je	SHORT $LN87@Unguarded_
	mov	eax, DWORD PTR $T223115[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223111[ebp], ecx
	mov	edx, DWORD PTR $T223115[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223111[ebp+4], eax
	mov	ecx, DWORD PTR $T223116[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T223115[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T223116[ebp]
	mov	eax, DWORD PTR __Tmp$223111[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223111[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223136[ebp], eax
	mov	ecx, DWORD PTR $T223136[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_
	mov	edx, DWORD PTR $T223136[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223132[ebp], eax
	mov	ecx, DWORD PTR $T223136[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223132[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T223136[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$223132[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223132[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:

; 3076 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
$T223310 = -124						; size = 4
__Tmp$223308 = -120					; size = 8
$T223290 = -112						; size = 4
$T223289 = -108						; size = 4
__Tmp$223287 = -104					; size = 8
$T223269 = -96						; size = 4
__Tmp$223267 = -92					; size = 8
$T223249 = -84						; size = 4
$T223248 = -80						; size = 4
__Tmp$223244 = -76					; size = 8
$T223228 = -68						; size = 4
$T223227 = -64						; size = 4
__Tmp$223223 = -60					; size = 8
$T223204 = -52						; size = 4
$T223203 = -48						; size = 4
__Tmp$223199 = -44					; size = 8
$T223177 = -36						; size = 4
__Tmp$223173 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_@2:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_@2
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_@2
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_@2

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_@2
$LN25@Unguarded_@2:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_@2
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_@2
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_@2

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_@2
$LN24@Unguarded_@2:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_@2:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_@2
$LN20@Unguarded_@2:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_@2:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_@2

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_@2
	jmp	SHORT $LN17@Unguarded_@2

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_@2:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_@2

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_@2

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_@2
$LN16@Unguarded_@2:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223177[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T223177[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_@2
	mov	ecx, DWORD PTR $T223177[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223173[ebp], edx
	mov	eax, DWORD PTR $T223177[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223173[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223177[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$223173[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223173[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_@2:
	jmp	$LN20@Unguarded_@2
$LN19@Unguarded_@2:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_@2
$LN13@Unguarded_@2:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_@2

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_@2
	jmp	SHORT $LN10@Unguarded_@2

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_@2:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_@2

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_@2

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_@2
$LN9@Unguarded_@2:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T223204[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223203[ebp], edx
	mov	eax, DWORD PTR $T223203[ebp]
	cmp	eax, DWORD PTR $T223204[ebp]
	je	SHORT $LN10@Unguarded_@2
	mov	ecx, DWORD PTR $T223203[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223199[ebp], edx
	mov	eax, DWORD PTR $T223203[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223199[ebp+4], ecx
	mov	edx, DWORD PTR $T223204[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223203[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T223204[ebp]
	mov	ecx, DWORD PTR __Tmp$223199[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223199[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_@2:
	jmp	$LN13@Unguarded_@2
$LN12@Unguarded_@2:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_@2
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_@2

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_@2
$LN7@Unguarded_@2:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_@2

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_@2

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223228[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223227[ebp], eax
	mov	ecx, DWORD PTR $T223227[ebp]
	cmp	ecx, DWORD PTR $T223228[ebp]
	je	SHORT $LN5@Unguarded_@2
	mov	edx, DWORD PTR $T223227[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223223[ebp], eax
	mov	ecx, DWORD PTR $T223227[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223223[ebp+4], edx
	mov	eax, DWORD PTR $T223228[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T223227[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T223228[ebp]
	mov	edx, DWORD PTR __Tmp$223223[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223223[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_@2:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223249[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223248[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T223248[ebp]
	cmp	eax, DWORD PTR $T223249[ebp]
	je	SHORT $LN73@Unguarded_@2
	mov	ecx, DWORD PTR $T223248[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223244[ebp], edx
	mov	eax, DWORD PTR $T223248[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223244[ebp+4], ecx
	mov	edx, DWORD PTR $T223249[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T223248[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T223249[ebp]
	mov	ecx, DWORD PTR __Tmp$223244[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223244[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_@2:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_@2
$LN6@Unguarded_@2:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_@2

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_@2

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223269[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T223269[ebp]
	je	SHORT $LN2@Unguarded_@2
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223267[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223267[ebp+4], eax
	mov	ecx, DWORD PTR $T223269[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T223269[ebp]
	mov	eax, DWORD PTR __Tmp$223267[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223267[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_@2:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223290[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223289[ebp], ecx
	mov	edx, DWORD PTR $T223289[ebp]
	cmp	edx, DWORD PTR $T223290[ebp]
	je	SHORT $LN87@Unguarded_@2
	mov	eax, DWORD PTR $T223289[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223287[ebp], ecx
	mov	edx, DWORD PTR $T223289[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223287[ebp+4], eax
	mov	ecx, DWORD PTR $T223290[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T223289[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T223290[ebp]
	mov	eax, DWORD PTR __Tmp$223287[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223287[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_@2:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_@2
$LN3@Unguarded_@2:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223310[ebp], eax
	mov	ecx, DWORD PTR $T223310[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_@2
	mov	edx, DWORD PTR $T223310[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223308[ebp], eax
	mov	ecx, DWORD PTR $T223310[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223308[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T223310[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$223308[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223308[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_@2:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_@2:

; 3076 : 		}

	jmp	$LN23@Unguarded_@2
$LN28@Unguarded_@2:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
$T223484 = -180						; size = 4
__Tmp$223482 = -176					; size = 16
$T223464 = -160						; size = 4
$T223463 = -156						; size = 4
__Tmp$223461 = -152					; size = 16
$T223443 = -136						; size = 4
__Tmp$223441 = -132					; size = 16
$T223423 = -116						; size = 4
$T223422 = -112						; size = 4
__Tmp$223420 = -108					; size = 16
$T223402 = -92						; size = 4
$T223401 = -88						; size = 4
__Tmp$223399 = -84					; size = 16
$T223378 = -68						; size = 4
$T223377 = -64						; size = 4
__Tmp$223375 = -60					; size = 16
$T223351 = -44						; size = 4
__Tmp$223349 = -40					; size = 16
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_@3:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_@3
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_@3
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_@3

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_@3
$LN25@Unguarded_@3:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_@3
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_@3
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_@3

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_@3
$LN24@Unguarded_@3:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_@3:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_@3
$LN20@Unguarded_@3:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_@3:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_@3

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_@3
	jmp	$LN17@Unguarded_@3

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_@3:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_@3

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_@3

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_@3
$LN16@Unguarded_@3:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223351[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T223351[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_@3
	mov	ecx, DWORD PTR $T223351[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223349[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223349[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223349[ebp+8], ecx
	mov	edx, DWORD PTR $T223351[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223349[ebp+12], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR $T223351[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Tmp$223349[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223349[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223349[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223349[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN17@Unguarded_@3:
	jmp	$LN20@Unguarded_@3
$LN19@Unguarded_@3:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_@3
$LN13@Unguarded_@3:
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], edx
$LN14@Unguarded_@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_@3

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR [ecx-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN55@Unguarded_@3
	jmp	$LN10@Unguarded_@3

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_@3:
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx-4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Unguarded_@3

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_@3

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_@3
$LN9@Unguarded_@3:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T223378[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223377[ebp], ecx
	mov	edx, DWORD PTR $T223377[ebp]
	cmp	edx, DWORD PTR $T223378[ebp]
	je	SHORT $LN10@Unguarded_@3
	mov	eax, DWORD PTR $T223377[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223375[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223375[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$223375[ebp+8], eax
	mov	ecx, DWORD PTR $T223377[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223375[ebp+12], edx
	mov	eax, DWORD PTR $T223378[ebp]
	mov	ecx, DWORD PTR $T223377[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T223378[ebp]
	mov	edx, DWORD PTR __Tmp$223375[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223375[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223375[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$223375[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN10@Unguarded_@3:
	jmp	$LN13@Unguarded_@3
$LN12@Unguarded_@3:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_@3
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_@3

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_@3
$LN7@Unguarded_@3:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_@3

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_@3

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223402[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223401[ebp], ecx
	mov	edx, DWORD PTR $T223401[ebp]
	cmp	edx, DWORD PTR $T223402[ebp]
	je	SHORT $LN5@Unguarded_@3
	mov	eax, DWORD PTR $T223401[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223399[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223399[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$223399[ebp+8], eax
	mov	ecx, DWORD PTR $T223401[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223399[ebp+12], edx
	mov	eax, DWORD PTR $T223402[ebp]
	mov	ecx, DWORD PTR $T223401[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T223402[ebp]
	mov	edx, DWORD PTR __Tmp$223399[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223399[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223399[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$223399[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN5@Unguarded_@3:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223423[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223422[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T223422[ebp]
	cmp	eax, DWORD PTR $T223423[ebp]
	je	SHORT $LN73@Unguarded_@3
	mov	ecx, DWORD PTR $T223422[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223420[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223420[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223420[ebp+8], ecx
	mov	edx, DWORD PTR $T223422[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223420[ebp+12], eax
	mov	ecx, DWORD PTR $T223423[ebp]
	mov	edx, DWORD PTR $T223422[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T223423[ebp]
	mov	eax, DWORD PTR __Tmp$223420[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223420[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223420[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223420[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN73@Unguarded_@3:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_@3
$LN6@Unguarded_@3:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_@3

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_@3

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223443[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR $T223443[ebp]
	je	SHORT $LN2@Unguarded_@3
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223441[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223441[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$223441[ebp+8], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$223441[ebp+12], ecx
	mov	edx, DWORD PTR $T223443[ebp]
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T223443[ebp]
	mov	ecx, DWORD PTR __Tmp$223441[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223441[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223441[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$223441[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN2@Unguarded_@3:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223464[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223463[ebp], edx
	mov	eax, DWORD PTR $T223463[ebp]
	cmp	eax, DWORD PTR $T223464[ebp]
	je	SHORT $LN87@Unguarded_@3
	mov	ecx, DWORD PTR $T223463[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223461[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223461[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223461[ebp+8], ecx
	mov	edx, DWORD PTR $T223463[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223461[ebp+12], eax
	mov	ecx, DWORD PTR $T223464[ebp]
	mov	edx, DWORD PTR $T223463[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T223464[ebp]
	mov	eax, DWORD PTR __Tmp$223461[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223461[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223461[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223461[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN87@Unguarded_@3:

; 3073 : 			}
; 3074 : 		else

	jmp	$LN4@Unguarded_@3
$LN3@Unguarded_@3:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223484[ebp], eax
	mov	ecx, DWORD PTR $T223484[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_@3
	mov	edx, DWORD PTR $T223484[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223482[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223482[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$223482[ebp+8], edx
	mov	eax, DWORD PTR $T223484[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$223482[ebp+12], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR $T223484[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR __Tmp$223482[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223482[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223482[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$223482[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN94@Unguarded_@3:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], eax
$LN4@Unguarded_@3:

; 3076 : 		}

	jmp	$LN23@Unguarded_@3
$LN28@Unguarded_@3:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
$T223658 = -180						; size = 4
__Tmp$223657 = -176					; size = 16
$T223638 = -160						; size = 4
$T223637 = -156						; size = 4
__Tmp$223636 = -152					; size = 16
$T223617 = -136						; size = 4
__Tmp$223616 = -132					; size = 16
$T223597 = -116						; size = 4
$T223596 = -112						; size = 4
__Tmp$223595 = -108					; size = 16
$T223576 = -92						; size = 4
$T223575 = -88						; size = 4
__Tmp$223574 = -84					; size = 16
$T223552 = -68						; size = 4
$T223551 = -64						; size = 4
__Tmp$223550 = -60					; size = 16
$T223525 = -44						; size = 4
__Tmp$223524 = -40					; size = 16
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Mid$[ebp], eax

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_@4:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_@4
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_@4
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_@4

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_@4
$LN25@Unguarded_@4:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_@4
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_@4
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_@4

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_@4
$LN24@Unguarded_@4:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_@4:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_@4
$LN20@Unguarded_@4:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_@4:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_@4

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_@4
	jmp	$LN17@Unguarded_@4

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_@4:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_@4

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_@4

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_@4
$LN16@Unguarded_@4:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223525[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T223525[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_@4
	mov	ecx, DWORD PTR $T223525[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223524[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223524[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223524[ebp+8], ecx
	mov	edx, DWORD PTR $T223525[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223524[ebp+12], eax
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR $T223525[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Tmp$223524[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223524[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223524[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223524[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN17@Unguarded_@4:
	jmp	$LN20@Unguarded_@4
$LN19@Unguarded_@4:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_@4
$LN13@Unguarded_@4:
	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], edx
$LN14@Unguarded_@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_@4

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR [ecx-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN55@Unguarded_@4
	jmp	$LN10@Unguarded_@4

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_@4:
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx-4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Unguarded_@4

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_@4

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_@4
$LN9@Unguarded_@4:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T223552[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223551[ebp], ecx
	mov	edx, DWORD PTR $T223551[ebp]
	cmp	edx, DWORD PTR $T223552[ebp]
	je	SHORT $LN10@Unguarded_@4
	mov	eax, DWORD PTR $T223551[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223550[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223550[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$223550[ebp+8], eax
	mov	ecx, DWORD PTR $T223551[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223550[ebp+12], edx
	mov	eax, DWORD PTR $T223552[ebp]
	mov	ecx, DWORD PTR $T223551[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T223552[ebp]
	mov	edx, DWORD PTR __Tmp$223550[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223550[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223550[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$223550[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN10@Unguarded_@4:
	jmp	$LN13@Unguarded_@4
$LN12@Unguarded_@4:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_@4
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_@4

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_@4
$LN7@Unguarded_@4:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_@4

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_@4

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223576[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223575[ebp], ecx
	mov	edx, DWORD PTR $T223575[ebp]
	cmp	edx, DWORD PTR $T223576[ebp]
	je	SHORT $LN5@Unguarded_@4
	mov	eax, DWORD PTR $T223575[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223574[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223574[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$223574[ebp+8], eax
	mov	ecx, DWORD PTR $T223575[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223574[ebp+12], edx
	mov	eax, DWORD PTR $T223576[ebp]
	mov	ecx, DWORD PTR $T223575[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T223576[ebp]
	mov	edx, DWORD PTR __Tmp$223574[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223574[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223574[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$223574[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN5@Unguarded_@4:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223597[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223596[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T223596[ebp]
	cmp	eax, DWORD PTR $T223597[ebp]
	je	SHORT $LN73@Unguarded_@4
	mov	ecx, DWORD PTR $T223596[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223595[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223595[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223595[ebp+8], ecx
	mov	edx, DWORD PTR $T223596[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223595[ebp+12], eax
	mov	ecx, DWORD PTR $T223597[ebp]
	mov	edx, DWORD PTR $T223596[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T223597[ebp]
	mov	eax, DWORD PTR __Tmp$223595[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223595[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223595[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223595[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN73@Unguarded_@4:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_@4
$LN6@Unguarded_@4:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_@4

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_@4

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223617[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	cmp	ecx, DWORD PTR $T223617[ebp]
	je	SHORT $LN2@Unguarded_@4
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223616[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223616[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$223616[ebp+8], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$223616[ebp+12], ecx
	mov	edx, DWORD PTR $T223617[ebp]
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T223617[ebp]
	mov	ecx, DWORD PTR __Tmp$223616[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223616[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223616[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$223616[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN2@Unguarded_@4:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	eax, DWORD PTR __Plast$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR __Plast$[ebp], eax
	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T223638[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T223637[ebp], edx
	mov	eax, DWORD PTR $T223637[ebp]
	cmp	eax, DWORD PTR $T223638[ebp]
	je	SHORT $LN87@Unguarded_@4
	mov	ecx, DWORD PTR $T223637[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223636[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223636[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223636[ebp+8], ecx
	mov	edx, DWORD PTR $T223637[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$223636[ebp+12], eax
	mov	ecx, DWORD PTR $T223638[ebp]
	mov	edx, DWORD PTR $T223637[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T223638[ebp]
	mov	eax, DWORD PTR __Tmp$223636[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$223636[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$223636[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$223636[ebp+12]
	mov	DWORD PTR [edx+12], ecx
$LN87@Unguarded_@4:

; 3073 : 			}
; 3074 : 		else

	jmp	$LN4@Unguarded_@4
$LN3@Unguarded_@4:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T223658[ebp], eax
	mov	ecx, DWORD PTR $T223658[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_@4
	mov	edx, DWORD PTR $T223658[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223657[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223657[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$223657[ebp+8], edx
	mov	eax, DWORD PTR $T223658[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$223657[ebp+12], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR $T223658[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR __Tmp$223657[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223657[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223657[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$223657[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN94@Unguarded_@4:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Gfirst$[ebp], eax
$LN4@Unguarded_@4:

; 3076 : 		}

	jmp	$LN23@Unguarded_@4
$LN28@Unguarded_@4:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__Step$218938 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$218938[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$218938[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$218938[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$218938[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$218938[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$218938[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$218938[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$218938[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$218938[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z
_TEXT	SEGMENT
$T223971 = -20						; size = 4
$T223970 = -16						; size = 4
__Hole$218956 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$218956[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$218956[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$218956[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$218956[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$218956[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T223971[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T223970[ebp], esp
	mov	edx, DWORD PTR $T223970[ebp]
	mov	eax, DWORD PTR $T223971[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T223970[ebp]
	mov	eax, DWORD PTR $T223971[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$218956[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
$T224041 = -52						; size = 4
$T224040 = -48						; size = 4
$T224024 = -42						; size = 1
$T224023 = -41						; size = 1
$T224022 = -40						; size = 4
$T224021 = -36						; size = 4
$T224020 = -32						; size = 4
__Cat$224031 = -24					; size = 1
$T224029 = -23						; size = 1
$T224028 = -22						; size = 1
$T224027 = -21						; size = 1
__First1$218997 = -20					; size = 4
__Val$218987 = -16					; size = 8
__Next1$218986 = -8					; size = 4
__Next$218982 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$218982[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$218982[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$218982[ebp], edx
	mov	eax, DWORD PTR __Next$218982[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$218982[ebp]
	mov	DWORD PTR __Next1$218986[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$218982[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$218987[ebp], eax
	mov	ecx, DWORD PTR __Next$218982[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$218987[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$218987[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$218986[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$218986[ebp], ecx
	mov	edx, DWORD PTR __Next1$218986[ebp]
	mov	DWORD PTR $T224041[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T224040[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T224027[ebp], cl
	mov	dl, BYTE PTR __Cat$224031[ebp]
	mov	BYTE PTR $T224028[ebp], dl
	mov	al, BYTE PTR $T224027[ebp]
	mov	BYTE PTR $T224024[ebp], al
	mov	cl, BYTE PTR $T224029[ebp]
	mov	BYTE PTR $T224023[ebp], cl
	mov	edx, DWORD PTR $T224041[ebp]
	mov	DWORD PTR $T224022[ebp], edx
	mov	eax, DWORD PTR __Next$218982[ebp]
	mov	DWORD PTR $T224021[ebp], eax
	mov	ecx, DWORD PTR $T224040[ebp]
	mov	DWORD PTR $T224020[ebp], ecx
$LN22@Insertion_:
	mov	edx, DWORD PTR $T224020[ebp]
	cmp	edx, DWORD PTR $T224021[ebp]
	je	SHORT $LN15@Insertion_
	mov	eax, DWORD PTR $T224021[ebp]
	sub	eax, 8
	mov	DWORD PTR $T224021[ebp], eax
	mov	ecx, DWORD PTR $T224022[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T224022[ebp], ecx
	mov	edx, DWORD PTR $T224021[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T224022[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_
$LN15@Insertion_:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$218987[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$218987[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$218986[ebp]
	mov	DWORD PTR __First1$218997[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$218997[ebp]
	mov	DWORD PTR __Next1$218986[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$218997[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$218997[ebp], edx
	mov	eax, DWORD PTR __First1$218997[ebp]
	mov	ecx, DWORD PTR __Val$218987[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$218997[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$218986[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$218986[ebp]
	mov	eax, DWORD PTR __Val$218987[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$218987[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
__Step$219003 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median@2

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$219003[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$219003[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$219003[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$219003[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219003[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219003[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$219003[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$219003[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$219003[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median@2
$LN2@Median@2:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median@2:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z
_TEXT	SEGMENT
$T224357 = -20						; size = 4
$T224356 = -16						; size = 4
__Hole$219021 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$219021[ebp], eax
$LN2@Make_heap@2:
	cmp	DWORD PTR __Hole$219021[ebp], 0
	jle	SHORT $LN3@Make_heap@2

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$219021[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$219021[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$219021[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T224357[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T224356[ebp], esp
	mov	edx, DWORD PTR $T224356[ebp]
	mov	eax, DWORD PTR $T224357[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T224356[ebp]
	mov	eax, DWORD PTR $T224357[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$219021[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap@2
$LN3@Make_heap@2:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
$T224427 = -52						; size = 4
$T224426 = -48						; size = 4
$T224410 = -42						; size = 1
$T224409 = -41						; size = 1
$T224408 = -40						; size = 4
$T224407 = -36						; size = 4
$T224406 = -32						; size = 4
__Cat$224417 = -24					; size = 1
$T224414 = -23						; size = 1
$T224413 = -22						; size = 1
$T224412 = -21						; size = 1
__First1$219062 = -20					; size = 4
__Val$219052 = -16					; size = 8
__Next1$219051 = -8					; size = 4
__Next$219047 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@2

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$219047[ebp], ecx
$LN7@Insertion_@2:
	mov	edx, DWORD PTR __Next$219047[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$219047[ebp], edx
	mov	eax, DWORD PTR __Next$219047[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@2

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$219047[ebp]
	mov	DWORD PTR __Next1$219051[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$219047[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$219052[ebp], eax
	mov	ecx, DWORD PTR __Next$219047[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$219052[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$219052[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_@2

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$219051[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$219051[ebp], ecx
	mov	edx, DWORD PTR __Next1$219051[ebp]
	mov	DWORD PTR $T224427[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T224426[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T224412[ebp], cl
	mov	dl, BYTE PTR __Cat$224417[ebp]
	mov	BYTE PTR $T224413[ebp], dl
	mov	al, BYTE PTR $T224412[ebp]
	mov	BYTE PTR $T224410[ebp], al
	mov	cl, BYTE PTR $T224414[ebp]
	mov	BYTE PTR $T224409[ebp], cl
	mov	edx, DWORD PTR $T224427[ebp]
	mov	DWORD PTR $T224408[ebp], edx
	mov	eax, DWORD PTR __Next$219047[ebp]
	mov	DWORD PTR $T224407[ebp], eax
	mov	ecx, DWORD PTR $T224426[ebp]
	mov	DWORD PTR $T224406[ebp], ecx
$LN22@Insertion_@2:
	mov	edx, DWORD PTR $T224406[ebp]
	cmp	edx, DWORD PTR $T224407[ebp]
	je	SHORT $LN15@Insertion_@2
	mov	eax, DWORD PTR $T224407[ebp]
	sub	eax, 8
	mov	DWORD PTR $T224407[ebp], eax
	mov	ecx, DWORD PTR $T224408[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T224408[ebp], ecx
	mov	edx, DWORD PTR $T224407[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T224408[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_@2
$LN15@Insertion_@2:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$219052[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$219052[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@2
$LN5@Insertion_@2:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$219051[ebp]
	mov	DWORD PTR __First1$219062[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@2
$LN2@Insertion_@2:
	mov	ecx, DWORD PTR __First1$219062[ebp]
	mov	DWORD PTR __Next1$219051[ebp], ecx
$LN3@Insertion_@2:
	mov	edx, DWORD PTR __First1$219062[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$219062[ebp], edx
	mov	eax, DWORD PTR __First1$219062[ebp]
	mov	ecx, DWORD PTR __Val$219052[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_@2

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$219062[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$219051[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_@2
$LN1@Insertion_@2:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$219051[ebp]
	mov	eax, DWORD PTR __Val$219052[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$219052[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_@2:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_@2
$LN9@Insertion_@2:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
__Step$219068 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median@3

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$219068[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$219068[ebp]
	shl	ecx, 1
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Step$219068[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ecx, DWORD PTR __Step$219068[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219068[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219068[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$219068[ebp]
	shl	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$219068[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$219068[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median@3
$LN2@Median@3:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median@3:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z
_TEXT	SEGMENT
$T224743 = -20						; size = 4
$T224742 = -16						; size = 4
__Hole$219086 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$219086[ebp], eax
$LN2@Make_heap@3:
	cmp	DWORD PTR __Hole$219086[ebp], 0
	jle	SHORT $LN3@Make_heap@3

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$219086[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$219086[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$219086[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T224743[ebp], edx
	sub	esp, 16					; 00000010H
	mov	DWORD PTR $T224742[ebp], esp
	mov	eax, DWORD PTR $T224743[ebp]
	mov	ecx, DWORD PTR $T224742[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T224742[ebp]
	mov	edx, DWORD PTR $T224743[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Bottom$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$219086[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap@3
$LN3@Make_heap@3:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
$T224813 = -60						; size = 4
$T224812 = -56						; size = 4
$T224796 = -50						; size = 1
$T224795 = -49						; size = 1
$T224794 = -48						; size = 4
$T224793 = -44						; size = 4
$T224792 = -40						; size = 4
__Cat$224804 = -32					; size = 1
$T224801 = -31						; size = 1
$T224800 = -30						; size = 1
$T224799 = -29						; size = 1
__First1$219127 = -28					; size = 4
__Val$219117 = -24					; size = 16
__Next1$219116 = -8					; size = 4
__Next$219112 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@3

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$219112[ebp], ecx
$LN7@Insertion_@3:
	mov	edx, DWORD PTR __Next$219112[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Next$219112[ebp], edx
	mov	eax, DWORD PTR __Next$219112[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@3

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$219112[ebp]
	mov	DWORD PTR __Next1$219116[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$219112[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$219117[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$219117[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Val$219117[ebp+8], edx
	mov	eax, DWORD PTR __Next$219112[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$219117[ebp+12], ecx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$219117[ebp+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	$LN5@Insertion_@3

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, DWORD PTR __Next1$219116[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next1$219116[ebp], eax
	mov	ecx, DWORD PTR __Next1$219116[ebp]
	mov	DWORD PTR $T224813[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T224812[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T224799[ebp], al
	mov	cl, BYTE PTR __Cat$224804[ebp]
	mov	BYTE PTR $T224800[ebp], cl
	mov	dl, BYTE PTR $T224799[ebp]
	mov	BYTE PTR $T224796[ebp], dl
	mov	al, BYTE PTR $T224801[ebp]
	mov	BYTE PTR $T224795[ebp], al
	mov	ecx, DWORD PTR $T224813[ebp]
	mov	DWORD PTR $T224794[ebp], ecx
	mov	edx, DWORD PTR __Next$219112[ebp]
	mov	DWORD PTR $T224793[ebp], edx
	mov	eax, DWORD PTR $T224812[ebp]
	mov	DWORD PTR $T224792[ebp], eax
$LN22@Insertion_@3:
	mov	ecx, DWORD PTR $T224792[ebp]
	cmp	ecx, DWORD PTR $T224793[ebp]
	je	SHORT $LN15@Insertion_@3
	mov	edx, DWORD PTR $T224793[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR $T224793[ebp], edx
	mov	eax, DWORD PTR $T224794[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T224794[ebp], eax
	mov	ecx, DWORD PTR $T224793[ebp]
	mov	edx, DWORD PTR $T224794[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN22@Insertion_@3
$LN15@Insertion_@3:

; 2977 : 				*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$219117[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$219117[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$219117[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Val$219117[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@3
$LN5@Insertion_@3:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	edx, DWORD PTR __Next1$219116[ebp]
	mov	DWORD PTR __First1$219127[ebp], edx

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@3
$LN2@Insertion_@3:
	mov	eax, DWORD PTR __First1$219127[ebp]
	mov	DWORD PTR __Next1$219116[ebp], eax
$LN3@Insertion_@3:
	mov	ecx, DWORD PTR __First1$219127[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __First1$219127[ebp], ecx
	mov	edx, DWORD PTR __First1$219127[ebp]
	mov	eax, DWORD PTR __Val$219117[ebp+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@Insertion_@3

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	eax, DWORD PTR __First1$219127[ebp]
	mov	ecx, DWORD PTR __Next1$219116[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN2@Insertion_@3
$LN1@Insertion_@3:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	ecx, DWORD PTR __Next1$219116[ebp]
	mov	edx, DWORD PTR __Val$219117[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val$219117[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Val$219117[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Val$219117[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN4@Insertion_@3:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_@3
$LN9@Insertion_@3:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
__Step$219133 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median@4

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$219133[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$219133[ebp]
	shl	ecx, 1
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Step$219133[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ecx, DWORD PTR __Step$219133[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219133[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$219133[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$219133[ebp]
	shl	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$219133[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$219133[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median@4
$LN2@Median@4:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median@4:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z
_TEXT	SEGMENT
$T225129 = -20						; size = 4
$T225128 = -16						; size = 4
__Hole$219151 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 4
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$219151[ebp], eax
$LN2@Make_heap@4:
	cmp	DWORD PTR __Hole$219151[ebp], 0
	jle	SHORT $LN3@Make_heap@4

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$219151[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$219151[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$219151[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T225129[ebp], edx
	sub	esp, 16					; 00000010H
	mov	DWORD PTR $T225128[ebp], esp
	mov	eax, DWORD PTR $T225129[ebp]
	mov	ecx, DWORD PTR $T225128[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T225128[ebp]
	mov	edx, DWORD PTR $T225129[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __Bottom$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Hole$219151[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap@4
$LN3@Make_heap@4:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
$T225199 = -60						; size = 4
$T225198 = -56						; size = 4
$T225182 = -50						; size = 1
$T225181 = -49						; size = 1
$T225180 = -48						; size = 4
$T225179 = -44						; size = 4
$T225178 = -40						; size = 4
__Cat$225189 = -32					; size = 1
$T225187 = -31						; size = 1
$T225186 = -30						; size = 1
$T225185 = -29						; size = 1
__First1$219192 = -28					; size = 4
__Val$219182 = -24					; size = 16
__Next1$219181 = -8					; size = 4
__Next$219177 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@4

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$219177[ebp], ecx
$LN7@Insertion_@4:
	mov	edx, DWORD PTR __Next$219177[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Next$219177[ebp], edx
	mov	eax, DWORD PTR __Next$219177[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@4

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$219177[ebp]
	mov	DWORD PTR __Next1$219181[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$219177[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$219182[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Val$219182[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Val$219182[ebp+8], edx
	mov	eax, DWORD PTR __Next$219177[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Val$219182[ebp+12], ecx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$219182[ebp+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	$LN5@Insertion_@4

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, DWORD PTR __Next1$219181[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __Next1$219181[ebp], eax
	mov	ecx, DWORD PTR __Next1$219181[ebp]
	mov	DWORD PTR $T225199[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T225198[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T225185[ebp], al
	mov	cl, BYTE PTR __Cat$225189[ebp]
	mov	BYTE PTR $T225186[ebp], cl
	mov	dl, BYTE PTR $T225185[ebp]
	mov	BYTE PTR $T225182[ebp], dl
	mov	al, BYTE PTR $T225187[ebp]
	mov	BYTE PTR $T225181[ebp], al
	mov	ecx, DWORD PTR $T225199[ebp]
	mov	DWORD PTR $T225180[ebp], ecx
	mov	edx, DWORD PTR __Next$219177[ebp]
	mov	DWORD PTR $T225179[ebp], edx
	mov	eax, DWORD PTR $T225198[ebp]
	mov	DWORD PTR $T225178[ebp], eax
$LN22@Insertion_@4:
	mov	ecx, DWORD PTR $T225178[ebp]
	cmp	ecx, DWORD PTR $T225179[ebp]
	je	SHORT $LN15@Insertion_@4
	mov	edx, DWORD PTR $T225179[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR $T225179[ebp], edx
	mov	eax, DWORD PTR $T225180[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T225180[ebp], eax
	mov	ecx, DWORD PTR $T225179[ebp]
	mov	edx, DWORD PTR $T225180[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN22@Insertion_@4
$LN15@Insertion_@4:

; 2977 : 				*_First = _Val;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Val$219182[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$219182[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$219182[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Val$219182[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@4
$LN5@Insertion_@4:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	edx, DWORD PTR __Next1$219181[ebp]
	mov	DWORD PTR __First1$219192[ebp], edx

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@4
$LN2@Insertion_@4:
	mov	eax, DWORD PTR __First1$219192[ebp]
	mov	DWORD PTR __Next1$219181[ebp], eax
$LN3@Insertion_@4:
	mov	ecx, DWORD PTR __First1$219192[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR __First1$219192[ebp], ecx
	mov	edx, DWORD PTR __First1$219192[ebp]
	mov	eax, DWORD PTR __Val$219182[ebp+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@Insertion_@4

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	eax, DWORD PTR __First1$219192[ebp]
	mov	ecx, DWORD PTR __Next1$219181[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN2@Insertion_@4
$LN1@Insertion_@4:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	ecx, DWORD PTR __Next1$219181[ebp]
	mov	edx, DWORD PTR __Val$219182[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val$219182[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Val$219182[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Val$219182[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN4@Insertion_@4:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_@4
$LN9@Insertion_@4:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__Tmp$225267 = -24					; size = 8
__Tmp$225245 = -16					; size = 8
__Tmp$225223 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$225223[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$225223[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$225223[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$225223[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$225245[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$225245[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$225245[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$225245[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$225267[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$225267[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$225267[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$225267[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
$T225294 = -32						; size = 4
$T225293 = -28						; size = 8
__Idx$225289 = -20					; size = 4
$T225280 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T225293[ebp]
	mov	DWORD PTR $T225280[ebp], edx
	mov	eax, DWORD PTR $T225280[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225280[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T225294[ebp], ecx
	mov	eax, DWORD PTR $T225294[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225289[ebp], eax
	jmp	SHORT $LN14@Adjust_hea
$LN13@Adjust_hea:
	mov	eax, DWORD PTR $T225294[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225289[ebp], eax
$LN14@Adjust_hea:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T225294[ebp]
	jge	SHORT $LN12@Adjust_hea
	mov	eax, DWORD PTR __Idx$225289[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T225293[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea
	mov	edx, DWORD PTR __Idx$225289[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T225294[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$225289[ebp]
	mov	DWORD PTR $T225294[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea
$LN12@Adjust_hea:
	mov	edx, DWORD PTR $T225294[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T225293[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T225293[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
__Tmp$225361 = -24					; size = 8
__Tmp$225339 = -16					; size = 8
__Tmp$225317 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3@2

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3@2
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$225317[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$225317[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$225317[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$225317[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3@2:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3@2

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3@2
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$225339[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$225339[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$225339[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$225339[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3@2:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3@2

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3@2
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$225361[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$225361[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$225361[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$225361[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3@2:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z
_TEXT	SEGMENT
$T225386 = -32						; size = 4
$T225385 = -28						; size = 8
__Idx$225381 = -20					; size = 4
$T225372 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea@2
$LN4@Adjust_hea@2:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea@2:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea@2

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea@2

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea@2:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea@2
$LN3@Adjust_hea@2:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea@2

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea@2:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T225385[ebp]
	mov	DWORD PTR $T225372[ebp], edx
	mov	eax, DWORD PTR $T225372[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225372[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T225386[ebp], ecx
	mov	eax, DWORD PTR $T225386[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225381[ebp], eax
	jmp	SHORT $LN14@Adjust_hea@2
$LN13@Adjust_hea@2:
	mov	eax, DWORD PTR $T225386[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225381[ebp], eax
$LN14@Adjust_hea@2:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T225386[ebp]
	jge	SHORT $LN12@Adjust_hea@2
	mov	eax, DWORD PTR __Idx$225381[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T225385[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea@2
	mov	edx, DWORD PTR __Idx$225381[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T225386[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$225381[ebp]
	mov	DWORD PTR $T225386[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea@2
$LN12@Adjust_hea@2:
	mov	edx, DWORD PTR $T225386[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T225385[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T225385[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
__Tmp$225453 = -48					; size = 16
__Tmp$225431 = -32					; size = 16
__Tmp$225409 = -16					; size = 16
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3@3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3@3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$225409[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$225409[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$225409[ebp+8], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$225409[ebp+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Tmp$225409[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$225409[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$225409[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$225409[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3@3:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN24@Med3@3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3@3
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$225431[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$225431[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$225431[ebp+8], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$225431[ebp+12], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR __Tmp$225431[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$225431[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$225431[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$225431[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3@3:
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Med3@3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	ecx, DWORD PTR __Mid$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3@3
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$225453[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$225453[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$225453[ebp+8], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$225453[ebp+12], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$225453[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$225453[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$225453[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$225453[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN4@Med3@3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z
_TEXT	SEGMENT
$T225478 = -40						; size = 4
$T225477 = -36						; size = 16
__Idx$225473 = -20					; size = 4
$T225464 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea@3
$LN4@Adjust_hea@3:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea@3:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea@3

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR __Idx$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __First$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [esi+eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@Adjust_hea@3

; 2062 : 			--_Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Idx$[ebp], ecx
$LN2@Adjust_hea@3:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	edx, DWORD PTR __Idx$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Hole$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea@3
$LN3@Adjust_hea@3:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea@3

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	sub	edx, 1
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Hole$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Hole$[ebp], eax
$LN1@Adjust_hea@3:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	ecx, DWORD PTR $T225477[ebp]
	mov	DWORD PTR $T225464[ebp], ecx
	mov	edx, DWORD PTR $T225464[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T225464[ebp]
	mov	edx, DWORD PTR __Val$[ebp+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T225478[ebp], eax
	mov	eax, DWORD PTR $T225478[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225473[ebp], eax
	jmp	SHORT $LN14@Adjust_hea@3
$LN13@Adjust_hea@3:
	mov	eax, DWORD PTR $T225478[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225473[ebp], eax
$LN14@Adjust_hea@3:
	mov	ecx, DWORD PTR __Top$[ebp]
	cmp	ecx, DWORD PTR $T225478[ebp]
	jge	SHORT $LN12@Adjust_hea@3
	mov	edx, DWORD PTR __Idx$225473[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T225477[ebp+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN12@Adjust_hea@3
	mov	ecx, DWORD PTR __Idx$225473[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR $T225478[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Idx$225473[ebp]
	mov	DWORD PTR $T225478[ebp], edx
	jmp	SHORT $LN13@Adjust_hea@3
$LN12@Adjust_hea@3:
	mov	eax, DWORD PTR $T225478[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T225477[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225477[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T225477[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T225477[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
__Tmp$225546 = -48					; size = 16
__Tmp$225524 = -32					; size = 16
__Tmp$225502 = -16					; size = 16
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3@4

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3@4
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$225502[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$225502[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$225502[ebp+8], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$225502[ebp+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Tmp$225502[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$225502[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$225502[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$225502[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3@4:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN24@Med3@4

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3@4
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$225524[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$225524[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$225524[ebp+8], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$225524[ebp+12], eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR __Tmp$225524[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$225524[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Tmp$225524[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Tmp$225524[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3@4:
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Med3@4

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	ecx, DWORD PTR __Mid$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3@4
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$225546[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$225546[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$225546[ebp+8], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$225546[ebp+12], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$225546[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$225546[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$225546[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$225546[ebp+12]
	mov	DWORD PTR [eax+12], edx
$LN4@Med3@4:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
$T225570 = -40						; size = 4
$T225569 = -36						; size = 16
__Idx$225565 = -20					; size = 4
$T225556 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea@4
$LN4@Adjust_hea@4:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea@4:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea@4

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR __Idx$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __First$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [esi+eax+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@Adjust_hea@4

; 2062 : 			--_Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Idx$[ebp], ecx
$LN2@Adjust_hea@4:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	edx, DWORD PTR __Idx$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Hole$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea@4
$LN3@Adjust_hea@4:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea@4

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	sub	edx, 1
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Hole$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	eax, DWORD PTR __Bottom$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Hole$[ebp], eax
$LN1@Adjust_hea@4:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	ecx, DWORD PTR $T225569[ebp]
	mov	DWORD PTR $T225556[ebp], ecx
	mov	edx, DWORD PTR $T225556[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Val$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T225556[ebp]
	mov	edx, DWORD PTR __Val$[ebp+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T225570[ebp], eax
	mov	eax, DWORD PTR $T225570[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225565[ebp], eax
	jmp	SHORT $LN14@Adjust_hea@4
$LN13@Adjust_hea@4:
	mov	eax, DWORD PTR $T225570[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$225565[ebp], eax
$LN14@Adjust_hea@4:
	mov	ecx, DWORD PTR __Top$[ebp]
	cmp	ecx, DWORD PTR $T225570[ebp]
	jge	SHORT $LN12@Adjust_hea@4
	mov	edx, DWORD PTR __Idx$225565[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T225569[ebp+12]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN12@Adjust_hea@4
	mov	ecx, DWORD PTR __Idx$225565[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR $T225570[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR __Idx$225565[ebp]
	mov	DWORD PTR $T225570[ebp], edx
	jmp	SHORT $LN13@Adjust_hea@4
$LN12@Adjust_hea@4:
	mov	eax, DWORD PTR $T225570[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T225569[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225569[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T225569[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T225569[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
$T225616 = -60						; size = 8
$T225587 = -20						; size = 4
$T225581 = -12						; size = 4
$T225580 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T225581[ebp], eax
	lea	ecx, DWORD PTR $T225616[ebp]
	mov	DWORD PTR $T225580[ebp], ecx
	mov	edx, DWORD PTR $T225580[ebp]
	mov	eax, DWORD PTR $T225581[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T225580[ebp]
	mov	eax, DWORD PTR $T225581[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T225587[ebp], esp
	mov	eax, DWORD PTR $T225587[ebp]
	mov	ecx, DWORD PTR $T225616[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225587[ebp]
	mov	eax, DWORD PTR $T225616[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
$T225662 = -60						; size = 8
$T225633 = -20						; size = 4
$T225627 = -12						; size = 4
$T225626 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T225627[ebp], eax
	lea	ecx, DWORD PTR $T225662[ebp]
	mov	DWORD PTR $T225626[ebp], ecx
	mov	edx, DWORD PTR $T225626[ebp]
	mov	eax, DWORD PTR $T225627[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T225626[ebp]
	mov	eax, DWORD PTR $T225627[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T225633[ebp], esp
	mov	eax, DWORD PTR $T225633[ebp]
	mov	ecx, DWORD PTR $T225662[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225633[ebp]
	mov	eax, DWORD PTR $T225662[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
$T225708 = -76						; size = 16
$T225679 = -20						; size = 4
$T225673 = -12						; size = 4
$T225672 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T225673[ebp], eax
	lea	ecx, DWORD PTR $T225708[ebp]
	mov	DWORD PTR $T225672[ebp], ecx
	mov	edx, DWORD PTR $T225673[ebp]
	mov	eax, DWORD PTR $T225672[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T225672[ebp]
	mov	ecx, DWORD PTR $T225673[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR $T225679[ebp], esp
	mov	ecx, DWORD PTR $T225679[ebp]
	mov	edx, DWORD PTR $T225708[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T225708[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T225708[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T225679[ebp]
	mov	ecx, DWORD PTR $T225708[ebp+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, 16					; 00000010H
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	push	edx
	push	0
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
$T225754 = -76						; size = 16
$T225725 = -20						; size = 4
$T225719 = -12						; size = 4
$T225718 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T225719[ebp], eax
	lea	ecx, DWORD PTR $T225754[ebp]
	mov	DWORD PTR $T225718[ebp], ecx
	mov	edx, DWORD PTR $T225719[ebp]
	mov	eax, DWORD PTR $T225718[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T225718[ebp]
	mov	ecx, DWORD PTR $T225719[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	sub	esp, 16					; 00000010H
	mov	DWORD PTR $T225725[ebp], esp
	mov	ecx, DWORD PTR $T225725[ebp]
	mov	edx, DWORD PTR $T225754[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T225754[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T225754[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T225725[ebp]
	mov	ecx, DWORD PTR $T225754[ebp+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, 16					; 00000010H
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 4
	push	edx
	push	0
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
END
