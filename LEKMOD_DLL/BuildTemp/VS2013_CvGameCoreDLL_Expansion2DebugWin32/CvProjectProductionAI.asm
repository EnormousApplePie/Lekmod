; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvProjectProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ		; CvWeightedVector<int,18,1>::~CvWeightedVector<int,18,1>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
PUBLIC	??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z	; CvProjectProductionAI::CvProjectProductionAI
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z$0
__ehfuncinfo$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprojectproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T217503 = -36						; size = 4
$T217486 = -24						; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z PROC	; CvProjectProductionAI::CvProjectProductionAI, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCity$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T217486[ebp], edx
	mov	ecx, DWORD PTR $T217486[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR $T217503[ebp], eax
	mov	ecx, DWORD PTR $T217503[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>

; 18   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ	; CvWeightedVector<int,18,1>::~CvWeightedVector<int,18,1>
__ehhandler$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvProjectProductionAI@@QAE@PAVCvCity@@@Z ENDP	; CvProjectProductionAI::CvProjectProductionAI
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
PUBLIC	??1CvProjectProductionAI@@QAE@XZ		; CvProjectProductionAI::~CvProjectProductionAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvProjectProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvProjectProductionAI@@QAE@XZ$0
__ehfuncinfo$??1CvProjectProductionAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvProjectProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprojectproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvProjectProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T217582 = -44						; size = 4
$T217550 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvProjectProductionAI@@QAE@XZ PROC			; CvProjectProductionAI::~CvProjectProductionAI, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvProjectProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR $T217550[ebp], eax
	mov	ecx, DWORD PTR $T217550[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T217582[ebp], ecx
	mov	ecx, DWORD PTR $T217582[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvProjectProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ	; CvWeightedVector<int,18,1>::~CvWeightedVector<int,18,1>
__ehhandler$??1CvProjectProductionAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvProjectProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvProjectProductionAI@@QAE@XZ ENDP			; CvProjectProductionAI::~CvProjectProductionAI
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back
PUBLIC	?Reset@CvProjectProductionAI@@QAEXXZ		; CvProjectProductionAI::Reset
EXTRN	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ:PROC ; CvProjectXMLEntries::GetNumProjects
EXTRN	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ:PROC ; CvGlobals::GetGameProjects
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvProjectProductionAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
_weightedElem$217662 = -20				; size = 8
$T217621 = -12						; size = 4
_i$217615 = -8						; size = 4
_i$216667 = -4						; size = 4
?Reset@CvProjectProductionAI@@QAEXXZ PROC		; CvProjectProductionAI::Reset, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	m_ProjectAIWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T217621[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN14@Reset
	mov	DWORD PTR _i$217615[ebp], 0
	jmp	SHORT $LN12@Reset
$LN11@Reset:
	mov	edx, DWORD PTR _i$217615[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217615[ebp], edx
$LN12@Reset:
	mov	eax, DWORD PTR $T217621[ebp]
	mov	ecx, DWORD PTR _i$217615[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN14@Reset
	jmp	SHORT $LN11@Reset
$LN14@Reset:
	mov	edx, DWORD PTR $T217621[ebp]
	mov	DWORD PTR [edx+4], 0

; 29   : 
; 30   : 	// Loop through reading each one and add an entry with 0 weight to our vector
; 31   : #ifdef AUI_WARNING_FIXES
; 32   : 	for (uint i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)
; 33   : #else
; 34   : 	for(int i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)

	mov	DWORD PTR _i$216667[ebp], 0
	jmp	SHORT $LN3@Reset
$LN2@Reset:
	mov	eax, DWORD PTR _i$216667[ebp]
	add	eax, 1
	mov	DWORD PTR _i$216667[ebp], eax
$LN3@Reset:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _i$216667[ebp], eax
	jge	SHORT $LN4@Reset

; 35   : #endif
; 36   : 	{
; 37   : 		m_ProjectAIWeights.push_back(i, 0);

	mov	DWORD PTR _weightedElem$217662[ebp], 0
	mov	DWORD PTR _weightedElem$217662[ebp+4], 0
	mov	ecx, DWORD PTR _i$216667[ebp]
	mov	DWORD PTR _weightedElem$217662[ebp], ecx
	mov	DWORD PTR _weightedElem$217662[ebp+4], 0
	lea	edx, DWORD PTR _weightedElem$217662[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back

; 38   : 	}

	jmp	SHORT $LN2@Reset
$LN4@Reset:

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvProjectProductionAI@@QAEXXZ ENDP		; CvProjectProductionAI::Reset
_TEXT	ENDS
PUBLIC	?Read@CvProjectProductionAI@@QAEXAAVFDataStream@@@Z ; CvProjectProductionAI::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvProjectProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T217743 = -72						; size = 4
_weightedElem$217742 = -28				; size = 8
$T217698 = -20						; size = 4
_i$217692 = -16						; size = 4
_i$216677 = -12						; size = 4
_uiVersion$ = -8					; size = 4
_iWeight$ = -4						; size = 4
_kStream$ = 8						; size = 4
?Read@CvProjectProductionAI@@QAEXAAVFDataStream@@@Z PROC ; CvProjectProductionAI::Read, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	// Version number to maintain backwards compatibility
; 45   : 	uint uiVersion;
; 46   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 47   : 
; 48   : 	int iWeight;
; 49   : 
; 50   : 	// Reset vector
; 51   : 	m_ProjectAIWeights.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T217698[ebp], ecx
	xor	edx, edx
	je	SHORT $LN16@Read
	mov	DWORD PTR _i$217692[ebp], 0
	jmp	SHORT $LN14@Read
$LN13@Read:
	mov	eax, DWORD PTR _i$217692[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217692[ebp], eax
$LN14@Read:
	mov	ecx, DWORD PTR $T217698[ebp]
	mov	edx, DWORD PTR _i$217692[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN16@Read
	jmp	SHORT $LN13@Read
$LN16@Read:
	mov	eax, DWORD PTR $T217698[ebp]
	mov	DWORD PTR [eax+4], 0

; 52   : 
; 53   : 	// Loop through reading each one and adding it to our vector
; 54   : #ifdef AUI_WARNING_FIXES
; 55   : 	for (uint i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)
; 56   : #else
; 57   : 	for(int i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)

	mov	DWORD PTR _i$216677[ebp], 0
	jmp	SHORT $LN3@Read
$LN2@Read:
	mov	ecx, DWORD PTR _i$216677[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$216677[ebp], ecx
$LN3@Read:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _i$216677[ebp], eax
	jge	SHORT $LN4@Read

; 58   : #endif
; 59   : 	{
; 60   : 		kStream >> iWeight;

	lea	edx, DWORD PTR _iWeight$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 61   : 		m_ProjectAIWeights.push_back(i, iWeight);

	mov	eax, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR $T217743[ebp], eax
	mov	DWORD PTR _weightedElem$217742[ebp], 0
	mov	DWORD PTR _weightedElem$217742[ebp+4], 0
	mov	ecx, DWORD PTR _i$216677[ebp]
	mov	DWORD PTR _weightedElem$217742[ebp], ecx
	mov	edx, DWORD PTR $T217743[ebp]
	mov	DWORD PTR _weightedElem$217742[ebp+4], edx
	lea	eax, DWORD PTR _weightedElem$217742[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back

; 62   : 	}

	jmp	SHORT $LN2@Read
$LN4@Read:

; 63   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvProjectProductionAI@@QAEXAAVFDataStream@@@Z ENDP ; CvProjectProductionAI::Read
_TEXT	ENDS
PUBLIC	?Write@CvProjectProductionAI@@QBEXAAVFDataStream@@@Z ; CvProjectProductionAI::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvProjectProductionAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_elem$217763 = -20					; size = 8
$T217746 = -12						; size = 4
_i$216686 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvProjectProductionAI@@QBEXAAVFDataStream@@@Z PROC ; CvProjectProductionAI::Write, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 	// Current version number
; 69   : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 70   : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 71   : 
; 72   : 	// Loop through writing each entry
; 73   : #ifdef AUI_WARNING_FIXES
; 74   : 	for (uint i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)
; 75   : #else
; 76   : 	for(int i = 0; i < GC.GetGameProjects()->GetNumProjects(); i++)

	mov	DWORD PTR _i$216686[ebp], 0
	jmp	SHORT $LN3@Write
$LN2@Write:
	mov	ecx, DWORD PTR _i$216686[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$216686[ebp], ecx
$LN3@Write:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _i$216686[ebp], eax
	jge	SHORT $LN4@Write

; 77   : #endif
; 78   : 	{
; 79   : 		kStream << m_ProjectAIWeights.GetWeight(i);

	mov	DWORD PTR _elem$217763[ebp], 0
	mov	DWORD PTR _elem$217763[ebp+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$216686[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$217763[ebp], edx
	mov	DWORD PTR _elem$217763[ebp+4], eax
	mov	ecx, DWORD PTR _elem$217763[ebp+4]
	mov	DWORD PTR $T217746[ebp], ecx
	lea	edx, DWORD PTR $T217746[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 80   : 	}

	jmp	SHORT $LN2@Write
$LN4@Write:

; 81   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvProjectProductionAI@@QBEXAAVFDataStream@@@Z ENDP ; CvProjectProductionAI::Write
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvProjectProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvProjectProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvProjectEntry@@QBEHH@Z:PROC	; CvProjectEntry::GetFlavorValue
EXTRN	?GetEntry@CvProjectXMLEntries@@QAEPAVCvProjectEntry@@H@Z:PROC ; CvProjectXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?AddFlavorWeights@CvProjectProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
tv92 = -20						; size = 4
_this$ = -16						; size = 4
$T217777 = -12						; size = 4
_entry$ = -8						; size = 4
_iProject$ = -4						; size = 4
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvProjectProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvProjectProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 86   : #ifdef AUI_WARNING_FIXES
; 87   : 	uint iProject;
; 88   : #else
; 89   : 	int iProject;
; 90   : #endif
; 91   : 	CvProjectEntry* entry(NULL);

	mov	DWORD PTR _entry$[ebp], 0

; 92   : 
; 93   : 	// Loop through all projects
; 94   : 	for(iProject = 0; iProject < GC.GetGameProjects()->GetNumProjects(); iProject++)

	mov	DWORD PTR _iProject$[ebp], 0
	jmp	SHORT $LN4@AddFlavorW
$LN3@AddFlavorW:
	mov	eax, DWORD PTR _iProject$[ebp]
	add	eax, 1
	mov	DWORD PTR _iProject$[ebp], eax
$LN4@AddFlavorW:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _iProject$[ebp], eax
	jge	SHORT $LN5@AddFlavorW

; 95   : 	{
; 96   : 		entry = GC.GetGameProjects()->GetEntry(iProject);

	mov	ecx, DWORD PTR _iProject$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetEntry@CvProjectXMLEntries@@QAEPAVCvProjectEntry@@H@Z ; CvProjectXMLEntries::GetEntry
	mov	DWORD PTR _entry$[ebp], eax

; 97   : 		if(entry)

	cmp	DWORD PTR _entry$[ebp], 0
	je	SHORT $LN1@AddFlavorW

; 98   : 		{
; 99   : 			// Set its weight by looking at project's weight for this flavor and using iWeight multiplier passed in
; 100  : 			m_ProjectAIWeights.IncreaseWeight(iProject, entry->GetFlavorValue(eFlavor) * iWeight);

	mov	edx, DWORD PTR _eFlavor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _entry$[ebp]
	call	?GetFlavorValue@CvProjectEntry@@QBEHH@Z	; CvProjectEntry::GetFlavorValue
	imul	eax, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR $T217777[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _iProject$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR $T217777[ebp]
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], edx
$LN1@AddFlavorW:

; 101  : 		}

	jmp	SHORT $LN3@AddFlavorW
$LN5@AddFlavorW:

; 102  : 	}
; 103  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?AddFlavorWeights@CvProjectProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvProjectProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z ; CvProjectProductionAI::GetWeight
; Function compile flags: /Odtp
;	COMDAT ?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_elem$217791 = -8					; size = 8
_eProject$ = 8						; size = 4
?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z PROC ; CvProjectProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	return m_ProjectAIWeights.GetWeight(eProject);

	mov	DWORD PTR _elem$217791[ebp], 0
	mov	DWORD PTR _elem$217791[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _eProject$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$217791[ebp], eax
	mov	DWORD PTR _elem$217791[ebp+4], ecx
	mov	eax, DWORD PTR _elem$217791[ebp+4]

; 109  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z ENDP ; CvProjectProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ ; CvProjectProductionAI::LogPossibleBuilds
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>
PUBLIC	?RecommendProject@CvProjectProductionAI@@QAE?AW4ProjectTypes@@XZ ; CvProjectProductionAI::RecommendProject
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z:PROC ; CvCity::canCreate
; Function compile flags: /Odtp
;	COMDAT ?RecommendProject@CvProjectProductionAI@@QAE?AW4ProjectTypes@@XZ
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T217931 = -84						; size = 4
$T217881 = -64						; size = 4
$T217877 = -60						; size = 4
$T217868 = -56						; size = 4
_weightedElem$217860 = -44				; size = 8
$T217842 = -36						; size = 4
$T217841 = -32						; size = 4
_elem$217835 = -28					; size = 8
$T217826 = -20						; size = 4
_i$217821 = -16						; size = 4
_iTurnsLeft$ = -12					; size = 4
_iWeight$ = -8						; size = 4
_iProjectLoop$ = -4					; size = 4
?RecommendProject@CvProjectProductionAI@@QAE?AW4ProjectTypes@@XZ PROC ; CvProjectProductionAI::RecommendProject, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	CvAssert(m_pCity);
; 115  : 	if(!m_pCity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@RecommendP

; 116  : 		return NO_PROJECT;

	or	eax, -1
	jmp	$LN8@RecommendP
$LN7@RecommendP:

; 117  : 
; 118  : #ifdef AUI_WARNING_FIXES
; 119  : 	uint iProjectLoop;
; 120  : #else
; 121  : 	int iProjectLoop;
; 122  : #endif
; 123  : 	int iWeight;
; 124  : 	int iTurnsLeft;
; 125  : 
; 126  : 	// Reset list of all the possible projects
; 127  : 	m_Buildables.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	mov	DWORD PTR $T217826[ebp], ecx
	xor	edx, edx
	je	SHORT $LN18@RecommendP
	mov	DWORD PTR _i$217821[ebp], 0
	jmp	SHORT $LN16@RecommendP
$LN15@RecommendP:
	mov	eax, DWORD PTR _i$217821[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217821[ebp], eax
$LN16@RecommendP:
	mov	ecx, DWORD PTR $T217826[ebp]
	mov	edx, DWORD PTR _i$217821[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN18@RecommendP
	jmp	SHORT $LN15@RecommendP
$LN18@RecommendP:
	mov	eax, DWORD PTR $T217826[ebp]
	mov	DWORD PTR [eax+4], 0

; 128  : 
; 129  : 	// Loop through adding the available projects
; 130  : 	for(iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)

	mov	DWORD PTR _iProjectLoop$[ebp], 0
	jmp	SHORT $LN6@RecommendP
$LN5@RecommendP:
	mov	ecx, DWORD PTR _iProjectLoop$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iProjectLoop$[ebp], ecx
$LN6@RecommendP:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	DWORD PTR _iProjectLoop$[ebp], eax
	jge	$LN4@RecommendP

; 131  : 	{
; 132  : 		// Make sure this project can be built now
; 133  : 		if(m_pCity->canCreate((ProjectTypes)iProjectLoop))

	push	0
	push	0
	mov	edx, DWORD PTR _iProjectLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z ; CvCity::canCreate
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@RecommendP

; 134  : 		{
; 135  : 			// Update weight based on turns to construct
; 136  : 			iTurnsLeft = m_pCity->getProductionTurnsLeft((ProjectTypes) iProjectLoop, 0);

	push	0
	mov	edx, DWORD PTR _iProjectLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z ; CvCity::getProductionTurnsLeft
	mov	DWORD PTR _iTurnsLeft$[ebp], eax

; 137  : 			iWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(m_ProjectAIWeights.GetWeight((ProjectTypes)iProjectLoop), iTurnsLeft);

	mov	ecx, DWORD PTR _iProjectLoop$[ebp]
	mov	DWORD PTR $T217841[ebp], ecx
	mov	DWORD PTR _elem$217835[ebp], 0
	mov	DWORD PTR _elem$217835[ebp+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR $T217841[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$217835[ebp], edx
	mov	DWORD PTR _elem$217835[ebp+4], eax
	mov	ecx, DWORD PTR _elem$217835[ebp+4]
	mov	DWORD PTR $T217842[ebp], ecx
	mov	edx, DWORD PTR _iTurnsLeft$[ebp]
	push	edx
	mov	eax, DWORD PTR $T217842[ebp]
	push	eax
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft
	add	esp, 8
	mov	DWORD PTR _iWeight$[ebp], eax

; 138  : 			m_Buildables.push_back(iProjectLoop, iWeight);

	mov	DWORD PTR _weightedElem$217860[ebp], 0
	mov	DWORD PTR _weightedElem$217860[ebp+4], 0
	mov	ecx, DWORD PTR _iProjectLoop$[ebp]
	mov	DWORD PTR _weightedElem$217860[ebp], ecx
	mov	edx, DWORD PTR _iWeight$[ebp]
	mov	DWORD PTR _weightedElem$217860[ebp+4], edx
	lea	eax, DWORD PTR _weightedElem$217860[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back
$LN3@RecommendP:

; 139  : 		}
; 140  : 	}

	jmp	$LN5@RecommendP
$LN4@RecommendP:

; 141  : 
; 142  : 	// Sort items and grab the first one
; 143  : 	if(m_Buildables.size() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR $T217868[ebp], edx
	cmp	DWORD PTR $T217868[ebp], 0
	jle	SHORT $LN2@RecommendP

; 144  : 	{
; 145  : 		m_Buildables.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 164				; 000000a4H
	mov	DWORD PTR $T217931[ebp], eax
	mov	ecx, DWORD PTR $T217931[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T217931[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T217877[ebp], edx
	mov	eax, DWORD PTR $T217931[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T217881[ebp], ecx
	mov	edx, DWORD PTR $T217877[ebp]
	sub	edx, DWORD PTR $T217881[ebp]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR $T217877[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217881[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 146  : 		LogPossibleBuilds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ ; CvProjectProductionAI::LogPossibleBuilds

; 147  : 		return (ProjectTypes)m_Buildables.GetElement(0);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	eax, DWORD PTR [edx+ecx]
	jmp	SHORT $LN8@RecommendP

; 148  : 	}
; 149  : 
; 150  : 	// Unless we didn't find any
; 151  : 	else

	jmp	SHORT $LN8@RecommendP
$LN2@RecommendP:

; 152  : 	{
; 153  : 		return NO_PROJECT;

	or	eax, -1
$LN8@RecommendP:

; 154  : 	}
; 155  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RecommendProject@CvProjectProductionAI@@QAE?AW4ProjectTypes@@XZ ENDP ; CvProjectProductionAI::RecommendProject
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_C@_0BA@LNDGDLB@Project?0?5?$CFs?0?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_07NBCGADJA@Unknown?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z:PROC ; CvCityStrategyAI::GetLogFileName
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0BA@LNDGDLB@Project?0?5?$CFs?0?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BA@LNDGDLB@Project?0?5?$CFs?0?5?$CFd?$AA@ DB 'Project, %s, %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBCGADJA@Unknown?$AA@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown?$AA@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$8
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$11
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$12
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvprojectproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ
_TEXT	SEGMENT
tv310 = -496						; size = 4
tv291 = -492						; size = 4
tv321 = -488						; size = 4
tv289 = -484						; size = 4
tv332 = -480						; size = 4
tv287 = -476						; size = 4
tv343 = -472						; size = 4
tv354 = -468						; size = 4
tv147 = -464						; size = 4
tv365 = -460						; size = 4
_this$ = -456						; size = 4
$T218140 = -452						; size = 4
$T218136 = -448						; size = 4
$T218129 = -444						; size = 4
_elem$218128 = -440					; size = 8
$T218114 = -432						; size = 4
$T218105 = -428						; size = 4
$T218092 = -424						; size = 4
$T218087 = -420						; size = 4
$T218051 = -416						; size = 4
$T218050 = -412						; size = 4
$T218042 = -408						; size = 4
$T218038 = -404						; size = 4
$T218032 = -400						; size = 4
$T218028 = -396						; size = 4
$T217950 = -392						; size = 28
$T217947 = -364						; size = 28
$T217946 = -336						; size = 28
$T217945 = -308						; size = 28
$T217944 = -280						; size = 28
$T217943 = -252						; size = 28
_pProjectEntry$216748 = -224				; size = 4
_iI$216744 = -220					; size = 4
_strOutBuf$216727 = -216				; size = 28
_playerName$216730 = -188				; size = 28
_cityName$216731 = -160					; size = 28
_strDesc$216732 = -132					; size = 28
_strLogName$216733 = -104				; size = 28
_pLog$216736 = -76					; size = 4
_strTemp$216729 = -72					; size = 28
_strBaseString$216728 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ PROC	; CvProjectProductionAI::LogPossibleBuilds, COMDAT
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 484				; 000001e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN7@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@LogPossibl

; 161  : 	{
; 162  : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 163  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 164  : 		CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$216729[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 165  : 		CvString playerName;

	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 166  : 		CvString cityName;

	lea	ecx, DWORD PTR _cityName$216731[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 167  : 		CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 168  : 		CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$216733[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 169  : 
; 170  : 		CvAssert(m_pCity);
; 171  : 		if(!m_pCity) return;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN68@LogPossibl
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$216733[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$216731[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$216729[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN7@LogPossibl

; 172  : 
; 173  : 		// Find the name of this civ and city
; 174  : 		playerName = GET_PLAYER(m_pCity->getOwner()).getCivilizationShortDescription();

$LN68@LogPossibl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR $T218028[ebp], edx
	mov	eax, DWORD PTR $T218028[ebp]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T218032[ebp], eax
	mov	ecx, DWORD PTR $T218032[ebp]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T218038[ebp], eax
	cmp	DWORD PTR $T218038[ebp], 0
	je	SHORT $LN73@LogPossibl
	mov	ecx, DWORD PTR $T218038[ebp]
	push	ecx
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN74@LogPossibl
$LN73@LogPossibl:
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN74@LogPossibl:

; 175  : 		cityName = m_pCity->getName();

	lea	edx, DWORD PTR $T217943[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv365[ebp], eax
	mov	ecx, DWORD PTR tv365[ebp]
	mov	DWORD PTR $T218042[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR $T218042[ebp]
	push	edx
	lea	ecx, DWORD PTR _cityName$216731[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217943[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 176  : 
; 177  : 		// Open the log file
; 178  : 		FILogFile* pLog;
; 179  : 		pLog = LOGFILEMGR.GetLog(m_pCity->GetCityStrategyAI()->GetLogFileName(playerName, cityName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv147[ebp], eax
	lea	eax, DWORD PTR _cityName$216731[ebp]
	push	eax
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217944[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z ; CvCityStrategyAI::GetLogFileName
	mov	DWORD PTR tv354[ebp], eax
	mov	ecx, DWORD PTR tv354[ebp]
	mov	DWORD PTR $T218050[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T218050[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T218051[ebp], eax
	push	0
	push	1
	mov	edx, DWORD PTR $T218051[ebp]
	push	edx
	mov	eax, DWORD PTR tv147[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$216736[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217944[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 180  : 		CvAssert(pLog);
; 181  : 		if(!pLog) return;

	cmp	DWORD PTR _pLog$216736[ebp], 0
	jne	SHORT $LN4@LogPossibl
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$216733[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$216731[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$216729[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	$LN7@LogPossibl
$LN4@LogPossibl:

; 182  : 
; 183  : 		// Get the leading info for this line
; 184  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T218087[ebp], ecx
	mov	ecx, DWORD PTR $T218087[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$216728[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 185  : 		strBaseString += playerName + ", " + cityName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _playerName$216730[ebp]
	push	eax
	lea	ecx, DWORD PTR $T217945[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv343[ebp], eax
	mov	edx, DWORD PTR tv343[ebp]
	mov	DWORD PTR tv287[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	eax, DWORD PTR _cityName$216731[ebp]
	push	eax
	mov	ecx, DWORD PTR tv287[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217946[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv332[ebp], eax
	mov	eax, DWORD PTR tv332[ebp]
	mov	DWORD PTR tv289[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv289[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217947[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv321[ebp], eax
	mov	eax, DWORD PTR tv321[ebp]
	mov	DWORD PTR tv291[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR tv291[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T217947[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T217946[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217945[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 186  : 
; 187  : 		// Dump out the weight of each buildable item
; 188  : 		for(int iI = 0; iI < m_Buildables.size(); iI++)

	mov	DWORD PTR _iI$216744[ebp], 0
	jmp	SHORT $LN3@LogPossibl
$LN2@LogPossibl:
	mov	edx, DWORD PTR _iI$216744[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$216744[ebp], edx
$LN3@LogPossibl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR $T218092[ebp], ecx
	mov	edx, DWORD PTR _iI$216744[ebp]
	cmp	edx, DWORD PTR $T218092[ebp]
	jge	$LN1@LogPossibl

; 189  : 		{
; 190  : 			CvProjectEntry* pProjectEntry = GC.GetGameProjects()->GetEntry(m_Buildables.GetElement(iI));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	mov	edx, DWORD PTR _iI$216744[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T218105[ebp], eax
	mov	ecx, DWORD PTR $T218105[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetEntry@CvProjectXMLEntries@@QAEPAVCvProjectEntry@@H@Z ; CvProjectXMLEntries::GetEntry
	mov	DWORD PTR _pProjectEntry$216748[ebp], eax

; 191  : 
; 192  : 			strDesc = (pProjectEntry != NULL)? pProjectEntry->GetDescription() : "Unknown";

	cmp	DWORD PTR _pProjectEntry$216748[ebp], 0
	je	SHORT $LN9@LogPossibl
	mov	ecx, DWORD PTR _pProjectEntry$216748[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T218114[ebp], eax
	jmp	SHORT $LN10@LogPossibl
$LN9@LogPossibl:
	mov	DWORD PTR $T218114[ebp], OFFSET ??_C@_07NBCGADJA@Unknown?$AA@
$LN10@LogPossibl:
	cmp	DWORD PTR $T218114[ebp], 0
	je	SHORT $LN120@LogPossibl
	mov	eax, DWORD PTR $T218114[ebp]
	push	eax
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN121@LogPossibl
$LN120@LogPossibl:
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN121@LogPossibl:

; 193  : 			strTemp.Format("Project, %s, %d", strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	DWORD PTR _elem$218128[ebp], 0
	mov	DWORD PTR _elem$218128[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	eax, DWORD PTR _iI$216744[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$218128[ebp], ecx
	mov	DWORD PTR _elem$218128[ebp+4], edx
	mov	eax, DWORD PTR _elem$218128[ebp+4]
	mov	DWORD PTR $T218129[ebp], eax
	mov	ecx, DWORD PTR $T218129[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0BA@LNDGDLB@Project?0?5?$CFs?0?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTemp$216729[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 194  : 			strOutBuf = strBaseString + strTemp;

	lea	eax, DWORD PTR _strTemp$216729[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	push	ecx
	lea	edx, DWORD PTR $T217950[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv310[ebp], eax
	mov	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR $T218136[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T218136[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T217950[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 195  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T218140[ebp], eax
	mov	ecx, DWORD PTR $T218140[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$216736[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$216736[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 196  : 		}

	jmp	$LN2@LogPossibl
$LN1@LogPossibl:

; 197  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _strLogName$216733[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cityName$216731[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strTemp$216729[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@LogPossibl:

; 198  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strOutBuf$216727[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$216728[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strTemp$216729[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _playerName$216730[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _cityName$216731[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strDesc$216732[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strLogName$216733[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T217943[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T217944[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$9:
	lea	ecx, DWORD PTR $T217945[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$10:
	lea	ecx, DWORD PTR $T217946[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$11:
	lea	ecx, DWORD PTR $T217947[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ$12:
	lea	ecx, DWORD PTR $T217950[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-488]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleBuilds@CvProjectProductionAI@@QAEXXZ ENDP	; CvProjectProductionAI::LogPossibleBuilds
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ PROC		; CvWeightedVector<int,18,1>::~CvWeightedVector<int,18,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$0BC@$00@@QAE@XZ ENDP		; CvWeightedVector<int,18,1>::~CvWeightedVector<int,18,1>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T218217 = -20						; size = 4
_pRet$218214 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 18			; 00000012H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218217[ebp], edx
	cmp	DWORD PTR $T218217[ebp], 18		; 00000012H
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T218217[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218214[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T218217[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$218214[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 18			; 00000012H
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$218214[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T218248 = -24						; size = 4
$T218247 = -20						; size = 4
_i$218240 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T218248[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T218247[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$218240[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$218240[ebp]
	add	eax, 1
	mov	DWORD PTR _i$218240[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$218240[ebp]
	cmp	ecx, DWORD PTR $T218248[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T218247[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T218247[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::~FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T218261 = -8						; size = 4
$T218260 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218261[ebp], ecx
	cmp	DWORD PTR $T218261[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T218261[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T218261[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T218261[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T218260[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::push_back
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T218355 = -44						; size = 4
$T218354 = -40						; size = 4
_i$218347 = -36						; size = 4
$T218333 = -32						; size = 4
$T218326 = -28						; size = 4
_pRet$218323 = -24					; size = 4
$T218316 = -20						; size = 4
$T218315 = -16						; size = 4
_i$216819 = -12						; size = 4
_uiNewSize$216811 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$216811[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$216811[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$216811[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218326[ebp], ecx
	cmp	DWORD PTR $T218326[ebp], 18		; 00000012H
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T218326[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$218323[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T218326[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$218323[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 18			; 00000012H
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$218323[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$216819[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$216819[ebp]
	add	edx, 1
	mov	DWORD PTR _i$216819[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$216819[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$216819[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T218316[ebp], ecx
	cmp	DWORD PTR $T218316[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$216819[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T218333[ebp], edx
	mov	eax, DWORD PTR $T218316[ebp]
	mov	ecx, DWORD PTR $T218333[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T218316[ebp]
	mov	ecx, DWORD PTR $T218333[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T218316[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T218315[ebp], ecx
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T218355[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T218354[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize
	mov	DWORD PTR _i$218347[ebp], 0
	jmp	SHORT $LN29@GrowSize
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$218347[ebp]
	add	edx, 1
	mov	DWORD PTR _i$218347[ebp], edx
$LN29@GrowSize:
	mov	eax, DWORD PTR _i$218347[ebp]
	cmp	eax, DWORD PTR $T218355[ebp]
	jae	SHORT $LN24@GrowSize
	jmp	SHORT $LN28@GrowSize
$LN24@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T218354[ebp], ecx
	je	SHORT $LN25@GrowSize
	mov	edx, DWORD PTR $T218354[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+156], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$0BC@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,18,1>::WeightedElement,18,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0BC@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,18,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,18,1>::WeightedElement *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z
_TEXT	SEGMENT
$T218485 = -128						; size = 4
__Mid$216899 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$216899[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$216899[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$216899[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$216899[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$216899[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$216899[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$216899[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T218485[ebp], edx
	jmp	SHORT $LN92@Sort
$LN91@Sort:
	mov	eax, DWORD PTR $T218485[ebp]
	sub	eax, 8
	mov	DWORD PTR $T218485[ebp], eax
$LN92@Sort:
	mov	ecx, DWORD PTR $T218485[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort
	mov	edx, DWORD PTR $T218485[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort
	push	0
	mov	eax, DWORD PTR $T218485[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort:
	jmp	SHORT $LN91@Sort
$LN88@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,18,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Median<CvWeightedVector<int,18,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0@Z
_TEXT	SEGMENT
$T218728 = -124						; size = 4
__Tmp$218723 = -120					; size = 8
$T218708 = -112						; size = 4
$T218707 = -108						; size = 4
__Tmp$218702 = -104					; size = 8
$T218687 = -96						; size = 4
__Tmp$218682 = -92					; size = 8
$T218667 = -84						; size = 4
$T218666 = -80						; size = 4
__Tmp$218661 = -76					; size = 8
$T218646 = -68						; size = 4
$T218645 = -64						; size = 4
__Tmp$218640 = -60					; size = 8
$T218622 = -52						; size = 4
$T218621 = -48						; size = 4
__Tmp$218616 = -44					; size = 8
$T218595 = -36						; size = 4
__Tmp$218590 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,18,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Median<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_
	jmp	SHORT $LN17@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T218595[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T218595[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_
	mov	ecx, DWORD PTR $T218595[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$218590[ebp], edx
	mov	eax, DWORD PTR $T218595[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$218590[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T218595[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$218590[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$218590[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_
	jmp	SHORT $LN10@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T218622[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T218621[ebp], edx
	mov	eax, DWORD PTR $T218621[ebp]
	cmp	eax, DWORD PTR $T218622[ebp]
	je	SHORT $LN10@Unguarded_
	mov	ecx, DWORD PTR $T218621[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$218616[ebp], edx
	mov	eax, DWORD PTR $T218621[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$218616[ebp+4], ecx
	mov	edx, DWORD PTR $T218622[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T218621[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T218622[ebp]
	mov	ecx, DWORD PTR __Tmp$218616[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$218616[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_
$LN12@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T218646[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T218645[ebp], eax
	mov	ecx, DWORD PTR $T218645[ebp]
	cmp	ecx, DWORD PTR $T218646[ebp]
	je	SHORT $LN5@Unguarded_
	mov	edx, DWORD PTR $T218645[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$218640[ebp], eax
	mov	ecx, DWORD PTR $T218645[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$218640[ebp+4], edx
	mov	eax, DWORD PTR $T218646[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T218645[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T218646[ebp]
	mov	edx, DWORD PTR __Tmp$218640[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$218640[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T218667[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T218666[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T218666[ebp]
	cmp	eax, DWORD PTR $T218667[ebp]
	je	SHORT $LN73@Unguarded_
	mov	ecx, DWORD PTR $T218666[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$218661[ebp], edx
	mov	eax, DWORD PTR $T218666[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$218661[ebp+4], ecx
	mov	edx, DWORD PTR $T218667[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T218666[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T218667[ebp]
	mov	ecx, DWORD PTR __Tmp$218661[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$218661[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN6@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T218687[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T218687[ebp]
	je	SHORT $LN2@Unguarded_
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$218682[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$218682[ebp+4], eax
	mov	ecx, DWORD PTR $T218687[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T218687[ebp]
	mov	eax, DWORD PTR __Tmp$218682[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$218682[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T218708[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T218707[ebp], ecx
	mov	edx, DWORD PTR $T218707[ebp]
	cmp	edx, DWORD PTR $T218708[ebp]
	je	SHORT $LN87@Unguarded_
	mov	eax, DWORD PTR $T218707[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$218702[ebp], ecx
	mov	edx, DWORD PTR $T218707[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$218702[ebp+4], eax
	mov	ecx, DWORD PTR $T218708[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T218707[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T218708[ebp]
	mov	eax, DWORD PTR __Tmp$218702[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$218702[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T218728[ebp], eax
	mov	ecx, DWORD PTR $T218728[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_
	mov	edx, DWORD PTR $T218728[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$218723[ebp], eax
	mov	ecx, DWORD PTR $T218728[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$218723[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T218728[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$218723[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$218723[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:

; 3076 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,18,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z
_TEXT	SEGMENT
__Step$217043 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,18,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$217043[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$217043[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$217043[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$217043[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$217043[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$217043[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$217043[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$217043[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$217043[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,18,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0PAH0@Z
_TEXT	SEGMENT
$T219041 = -20						; size = 4
$T219040 = -16						; size = 4
__Hole$217061 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$217061[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$217061[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$217061[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$217061[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$217061[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T219041[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T219040[ebp], esp
	mov	edx, DWORD PTR $T219040[ebp]
	mov	eax, DWORD PTR $T219041[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T219040[ebp]
	mov	eax, DWORD PTR $T219041[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$217061[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z
_TEXT	SEGMENT
$T219111 = -52						; size = 4
$T219110 = -48						; size = 4
$T219094 = -42						; size = 1
$T219093 = -41						; size = 1
$T219092 = -40						; size = 4
$T219091 = -36						; size = 4
$T219090 = -32						; size = 4
__Cat$219101 = -24					; size = 1
$T219099 = -23						; size = 1
$T219098 = -22						; size = 1
$T219097 = -21						; size = 1
__First1$217102 = -20					; size = 4
__Val$217092 = -16					; size = 8
__Next1$217091 = -8					; size = 4
__Next$217087 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$217087[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$217087[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$217087[ebp], edx
	mov	eax, DWORD PTR __Next$217087[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$217087[ebp]
	mov	DWORD PTR __Next1$217091[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$217087[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$217092[ebp], eax
	mov	ecx, DWORD PTR __Next$217087[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$217092[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$217092[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$217091[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$217091[ebp], ecx
	mov	edx, DWORD PTR __Next1$217091[ebp]
	mov	DWORD PTR $T219111[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T219110[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T219097[ebp], cl
	mov	dl, BYTE PTR __Cat$219101[ebp]
	mov	BYTE PTR $T219098[ebp], dl
	mov	al, BYTE PTR $T219097[ebp]
	mov	BYTE PTR $T219094[ebp], al
	mov	cl, BYTE PTR $T219099[ebp]
	mov	BYTE PTR $T219093[ebp], cl
	mov	edx, DWORD PTR $T219111[ebp]
	mov	DWORD PTR $T219092[ebp], edx
	mov	eax, DWORD PTR __Next$217087[ebp]
	mov	DWORD PTR $T219091[ebp], eax
	mov	ecx, DWORD PTR $T219110[ebp]
	mov	DWORD PTR $T219090[ebp], ecx
$LN22@Insertion_:
	mov	edx, DWORD PTR $T219090[ebp]
	cmp	edx, DWORD PTR $T219091[ebp]
	je	SHORT $LN15@Insertion_
	mov	eax, DWORD PTR $T219091[ebp]
	sub	eax, 8
	mov	DWORD PTR $T219091[ebp], eax
	mov	ecx, DWORD PTR $T219092[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T219092[ebp], ecx
	mov	edx, DWORD PTR $T219091[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T219092[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_
$LN15@Insertion_:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$217092[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$217092[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$217091[ebp]
	mov	DWORD PTR __First1$217102[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$217102[ebp]
	mov	DWORD PTR __Next1$217091[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$217102[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$217102[ebp], edx
	mov	eax, DWORD PTR __First1$217102[ebp]
	mov	ecx, DWORD PTR __Val$217092[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$217102[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$217091[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$217091[ebp]
	mov	eax, DWORD PTR __Val$217092[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$217092[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z
_TEXT	SEGMENT
__Tmp$219178 = -24					; size = 8
__Tmp$219159 = -16					; size = 8
__Tmp$219135 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$219135[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$219135[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$219135[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$219135[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219159[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$219159[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$219159[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$219159[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219178[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$219178[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$219178[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$219178[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,18,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z
_TEXT	SEGMENT
$T219206 = -32						; size = 4
$T219205 = -28						; size = 8
__Idx$219201 = -20					; size = 4
$T219192 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T219205[ebp]
	mov	DWORD PTR $T219192[ebp], edx
	mov	eax, DWORD PTR $T219192[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T219192[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T219206[ebp], ecx
	mov	eax, DWORD PTR $T219206[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$219201[ebp], eax
	jmp	SHORT $LN14@Adjust_hea
$LN13@Adjust_hea:
	mov	eax, DWORD PTR $T219206[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$219201[ebp], eax
$LN14@Adjust_hea:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T219206[ebp]
	jge	SHORT $LN12@Adjust_hea
	mov	eax, DWORD PTR __Idx$219201[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T219205[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea
	mov	edx, DWORD PTR __Idx$219201[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T219206[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$219201[ebp]
	mov	DWORD PTR $T219206[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea
$LN12@Adjust_hea:
	mov	edx, DWORD PTR $T219206[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T219205[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T219205[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z
_TEXT	SEGMENT
$T219252 = -60						; size = 8
$T219223 = -20						; size = 4
$T219217 = -12						; size = 4
$T219216 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T219217[ebp], eax
	lea	ecx, DWORD PTR $T219252[ebp]
	mov	DWORD PTR $T219216[ebp], ecx
	mov	edx, DWORD PTR $T219216[ebp]
	mov	eax, DWORD PTR $T219217[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T219216[ebp]
	mov	eax, DWORD PTR $T219217[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T219223[ebp], esp
	mov	eax, DWORD PTR $T219223[ebp]
	mov	ecx, DWORD PTR $T219252[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T219223[ebp]
	mov	eax, DWORD PTR $T219252[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,18,1>::WeightedElement *,int,CvWeightedVector<int,18,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0BC@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,18,1>::WeightedElement *,CvWeightedVector<int,18,1>::WeightedElement>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T219283 = -2092					; size = 4
$T219282 = -2088					; size = 4
$T219281 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T219281[ebp], eax
	mov	ecx, DWORD PTR $T219281[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219282[ebp], eax
	mov	eax, DWORD PTR $T219282[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T219283[ebp], eax
	mov	ecx, DWORD PTR $T219283[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
END
