; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllContext.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
PUBLIC	?s_pSingleton@CvDllGameContext@@0PAV1@A		; CvDllGameContext::s_pSingleton
PUBLIC	?s_hHeap@CvDllGameContext@@0PAXA		; CvDllGameContext::s_hHeap
_BSS	SEGMENT
?s_pSingleton@CvDllGameContext@@0PAV1@A DD 01H DUP (?)	; CvDllGameContext::s_pSingleton
_BSS	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
?s_hHeap@CvDllGameContext@@0PAXA DD 0ffffffffH		; CvDllGameContext::s_hHeap
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_CIV5_XP2_DLL_GUID DD 013c6ca53H
	DW	050ffH
	DW	04a66H
	DB	094H
	DB	01bH
	DB	05dH
	DB	05dH
	DB	0aaH
	DB	090H
	DB	0c6H
	DB	084H
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvGameContext1 DD 0a309fa38H
	DW	0cf60H
	DW	04239H
	DB	0a1H
	DB	062H
	DB	085H
	DB	086H
	DB	0c0H
	DB	0d1H
	DB	0c7H
	DB	0d3H
_guidICvNetMessageHandler1 DD 055b80da7H
	DW	0d175H
	DW	04ea7H
	DB	0b5H
	DB	055H
	DB	0b9H
	DB	088H
	DB	045H
	DB	0ddH
	DB	0dcH
	DB	08eH
_guidICvGameContext2 DD 0cf7820cdH
	DW	0e960H
	DW	041efH
	DB	09cH
	DB	05aH
	DB	09dH
	DB	03H
	DB	0cH
	DB	03bH
	DB	0c3H
	DB	0bH
_guidICvGameContext3 DD 08921e7a6H
	DW	0a1fdH
	DW	04301H
	DB	094H
	DB	0b9H
	DB	0d5H
	DB	083H
	DB	0ccH
	DB	010H
	DB	02aH
	DB	011H
_guidICvEngineUtility4 DD 0dd8a29a2H
	DW	0e752H
	DW	04bf7H
	DB	09eH
	DB	0e0H
	DB	042H
	DB	0b8H
	DB	015H
	DB	05fH
	DB	017H
	DB	05fH
CONST	ENDS
PUBLIC	??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
PUBLIC	??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
PUBLIC	??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
PUBLIC	??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
PUBLIC	??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
PUBLIC	??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
PUBLIC	?_Buy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Buy
PUBLIC	?_Buy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Buy
PUBLIC	?_Buy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Buy
PUBLIC	??_7CvDllGameContext@@6B@			; CvDllGameContext::`vftable'
PUBLIC	??_7ICvGameContext3@@6B@			; ICvGameContext3::`vftable'
PUBLIC	??_7ICvGameContext2@@6B@			; ICvGameContext2::`vftable'
PUBLIC	??_7ICvGameContext1@@6B@			; ICvGameContext1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllGameContext@@IAE@XZ			; CvDllGameContext::CvDllGameContext
PUBLIC	?QueryInterface@CvDllGameContext@@UAGPAXU_GUID@@@Z ; CvDllGameContext::QueryInterface
PUBLIC	?Destroy@CvDllGameContext@@MAGXXZ		; CvDllGameContext::Destroy
PUBLIC	?GetDLLGUID@CvDllGameContext@@UAG?AU_GUID@@XZ	; CvDllGameContext::GetDLLGUID
PUBLIC	?GetDLLVersion@CvDllGameContext@@UAGPBDXZ	; CvDllGameContext::GetDLLVersion
PUBLIC	?GetNetworkSyncronizer@CvDllGameContext@@UAGPAVICvNetworkSyncronization1@@XZ ; CvDllGameContext::GetNetworkSyncronizer
PUBLIC	?GetNetMessageHandler@CvDllGameContext@@UAGPAVICvNetMessageHandler1@@XZ ; CvDllGameContext::GetNetMessageHandler
PUBLIC	?GetWorldBuilderMapLoader@CvDllGameContext@@UAGPAVICvWorldBuilderMapLoader1@@XZ ; CvDllGameContext::GetWorldBuilderMapLoader
PUBLIC	?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ ; CvDllGameContext::GetPreGame
PUBLIC	?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ	; CvDllGameContext::GetGame
PUBLIC	?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ ; CvDllGameContext::GetGameAsynch
PUBLIC	?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ	; CvDllGameContext::GetMap
PUBLIC	?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z ; CvDllGameContext::GetTeam
PUBLIC	?GetInfoTypeForString@CvDllGameContext@@UBGHPBD_N@Z ; CvDllGameContext::GetInfoTypeForString
PUBLIC	?GetInfoTypeForHash@CvDllGameContext@@UBGHI_N@Z	; CvDllGameContext::GetInfoTypeForHash
PUBLIC	?GetCivilizationInfoIndex@CvDllGameContext@@UAG?AW4CivilizationTypes@@PBD@Z ; CvDllGameContext::GetCivilizationInfoIndex
PUBLIC	?GetNumPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumPlayableCivilizationInfos
PUBLIC	?GetNumAIPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumAIPlayableCivilizationInfos
PUBLIC	?GetNumPlayableMinorCivs@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumPlayableMinorCivs
PUBLIC	?GetNumBuildInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumBuildInfos
PUBLIC	?GetNumBuildingInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumBuildingInfos
PUBLIC	?GetNumCivilizationInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumCivilizationInfos
PUBLIC	?GetNumClimateInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumClimateInfos
PUBLIC	?GetNumColorInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumColorInfos
PUBLIC	?GetNumEraInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumEraInfos
PUBLIC	?GetNumFeatureInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumFeatureInfos
PUBLIC	?GetNumGameOptionInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumGameOptionInfos
PUBLIC	?GetNumGameSpeedInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumGameSpeedInfos
PUBLIC	?GetNumHandicapInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumHandicapInfos
PUBLIC	?GetNumImprovementInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumImprovementInfos
PUBLIC	?GetNumLeaderHeadInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumLeaderHeadInfos
PUBLIC	?GetNumMinorCivInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumMinorCivInfos
PUBLIC	?GetNumPlayerColorInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumPlayerColorInfos
PUBLIC	?GetNumPolicyInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumPolicyInfos
PUBLIC	?GetNumPromotionInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumPromotionInfos
PUBLIC	?GetNumResourceInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumResourceInfos
PUBLIC	?GetNumSeaLevelInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumSeaLevelInfos
PUBLIC	?GetNumTechInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumTechInfos
PUBLIC	?GetNumTerrainInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumTerrainInfos
PUBLIC	?GetNumUnitCombatClassInfos@CvDllGameContext@@UAGHXZ ; CvDllGameContext::GetNumUnitCombatClassInfos
PUBLIC	?GetNumUnitInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumUnitInfos
PUBLIC	?GetNumVictoryInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumVictoryInfos
PUBLIC	?GetNumWorldInfos@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetNumWorldInfos
PUBLIC	?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z ; CvDllGameContext::GetBuildInfo
PUBLIC	?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z ; CvDllGameContext::GetBuildingInfo
PUBLIC	?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z ; CvDllGameContext::GetCivilizationInfo
PUBLIC	?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z ; CvDllGameContext::GetColorInfo
PUBLIC	?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z ; CvDllGameContext::GetEraInfo
PUBLIC	?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z ; CvDllGameContext::GetFeatureInfo
PUBLIC	?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z ; CvDllGameContext::GetGameOptionInfo
PUBLIC	?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z ; CvDllGameContext::GetGameSpeedInfo
PUBLIC	?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z ; CvDllGameContext::GetHandicapInfo
PUBLIC	?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z ; CvDllGameContext::GetInterfaceModeInfo
PUBLIC	?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z ; CvDllGameContext::GetImprovementInfo
PUBLIC	?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z ; CvDllGameContext::GetLeaderHeadInfo
PUBLIC	?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z ; CvDllGameContext::GetMinorCivInfo
PUBLIC	?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z ; CvDllGameContext::GetMissionInfo
PUBLIC	?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z ; CvDllGameContext::GetPlayerColorInfo
PUBLIC	?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z ; CvDllGameContext::GetPlayerOptionInfo
PUBLIC	?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z ; CvDllGameContext::GetPolicyInfo
PUBLIC	?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z ; CvDllGameContext::GetPromotionInfo
PUBLIC	?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z ; CvDllGameContext::GetResourceInfo
PUBLIC	?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z ; CvDllGameContext::GetTechInfo
PUBLIC	?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z ; CvDllGameContext::GetTerrainInfo
PUBLIC	?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z ; CvDllGameContext::GetUnitInfo
PUBLIC	?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z ; CvDllGameContext::GetUnitCombatClassInfo
PUBLIC	?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z ; CvDllGameContext::GetVictoryInfo
PUBLIC	?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z ; CvDllGameContext::GetDefineSTRING
PUBLIC	?GetMOVE_DENOMINATOR@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetMOVE_DENOMINATOR
PUBLIC	?GetMAX_CITY_HIT_POINTS@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetMAX_CITY_HIT_POINTS
PUBLIC	?GetCITY_ZOOM_OFFSET@CvDllGameContext@@UBGMXZ	; CvDllGameContext::GetCITY_ZOOM_OFFSET
PUBLIC	?GetCITY_ZOOM_LEVEL_1@CvDllGameContext@@UBGMXZ	; CvDllGameContext::GetCITY_ZOOM_LEVEL_1
PUBLIC	?GetCITY_ZOOM_LEVEL_2@CvDllGameContext@@UBGMXZ	; CvDllGameContext::GetCITY_ZOOM_LEVEL_2
PUBLIC	?GetCITY_ZOOM_LEVEL_3@CvDllGameContext@@UBGMXZ	; CvDllGameContext::GetCITY_ZOOM_LEVEL_3
PUBLIC	?GetRUINS_IMPROVEMENT@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetRUINS_IMPROVEMENT
PUBLIC	?GetSHALLOW_WATER_TERRAIN@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetSHALLOW_WATER_TERRAIN
PUBLIC	?GetDEFICIT_UNIT_DISBANDING_THRESHOLD@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetDEFICIT_UNIT_DISBANDING_THRESHOLD
PUBLIC	?GetLAST_UNIT_ART_ERA@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetLAST_UNIT_ART_ERA
PUBLIC	?GetLAST_EMBARK_ART_ERA@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetLAST_EMBARK_ART_ERA
PUBLIC	?GetHEAVY_RESOURCE_THRESHOLD@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetHEAVY_RESOURCE_THRESHOLD
PUBLIC	?GetSTANDARD_HANDICAP@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetSTANDARD_HANDICAP
PUBLIC	?GetSTANDARD_GAMESPEED@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetSTANDARD_GAMESPEED
PUBLIC	?GetLAST_BRIDGE_ART_ERA@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetLAST_BRIDGE_ART_ERA
PUBLIC	?GetBARBARIAN_CIVILIZATION@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetBARBARIAN_CIVILIZATION
PUBLIC	?GetMINOR_CIVILIZATION@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetMINOR_CIVILIZATION
PUBLIC	?GetBARBARIAN_HANDICAP@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetBARBARIAN_HANDICAP
PUBLIC	?GetBARBARIAN_LEADER@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetBARBARIAN_LEADER
PUBLIC	?GetMINOR_CIV_HANDICAP@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetMINOR_CIV_HANDICAP
PUBLIC	?GetWALLS_BUILDINGCLASS@CvDllGameContext@@UBGHXZ ; CvDllGameContext::GetWALLS_BUILDINGCLASS
PUBLIC	?GetAI_HANDICAP@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetAI_HANDICAP
PUBLIC	?GetNUM_CITY_PLOTS@CvDllGameContext@@UBGHXZ	; CvDllGameContext::GetNUM_CITY_PLOTS
PUBLIC	?GetHexDebugLayerNames@CvDllGameContext@@UAGPAPBDXZ ; CvDllGameContext::GetHexDebugLayerNames
PUBLIC	?GetHexDebugLayerScale@CvDllGameContext@@UAGMPBD@Z ; CvDllGameContext::GetHexDebugLayerScale
PUBLIC	?GetHexDebugLayerString@CvDllGameContext@@UAG_NPAVICvPlot1@@PBDW4PlayerTypes@@PADI@Z ; CvDllGameContext::GetHexDebugLayerString
PUBLIC	?Init@CvDllGameContext@@UAGXXZ			; CvDllGameContext::Init
PUBLIC	?Uninit@CvDllGameContext@@UAGXXZ		; CvDllGameContext::Uninit
PUBLIC	?GetScriptSystemUtility@CvDllGameContext@@UAGPAVICvScriptSystemUtility1@@XZ ; CvDllGameContext::GetScriptSystemUtility
PUBLIC	?GetNotificationType@CvDllGameContext@@UBGPBDH@Z ; CvDllGameContext::GetNotificationType
PUBLIC	?GetLogging@CvDllGameContext@@UAG_NXZ		; CvDllGameContext::GetLogging
PUBLIC	?SetLogging@CvDllGameContext@@UAGX_N@Z		; CvDllGameContext::SetLogging
PUBLIC	?GetRandLogging@CvDllGameContext@@UAGHXZ	; CvDllGameContext::GetRandLogging
PUBLIC	?SetRandLogging@CvDllGameContext@@UAGXH@Z	; CvDllGameContext::SetRandLogging
PUBLIC	?GetAILogging@CvDllGameContext@@UAG_NXZ		; CvDllGameContext::GetAILogging
PUBLIC	?SetAILogging@CvDllGameContext@@UAGX_N@Z	; CvDllGameContext::SetAILogging
PUBLIC	?GetAIPerfLogging@CvDllGameContext@@UAG_NXZ	; CvDllGameContext::GetAIPerfLogging
PUBLIC	?SetAIPerfLogging@CvDllGameContext@@UAGX_N@Z	; CvDllGameContext::SetAIPerfLogging
PUBLIC	?GetBuilderAILogging@CvDllGameContext@@UAG_NXZ	; CvDllGameContext::GetBuilderAILogging
PUBLIC	?SetBuilderAILogging@CvDllGameContext@@UAGX_N@Z	; CvDllGameContext::SetBuilderAILogging
PUBLIC	?GetPlayerAndCityAILogSplit@CvDllGameContext@@UAG_NXZ ; CvDllGameContext::GetPlayerAndCityAILogSplit
PUBLIC	?SetPlayerAndCityAILogSplit@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetPlayerAndCityAILogSplit
PUBLIC	?GetTutorialLogging@CvDllGameContext@@UAG_NXZ	; CvDllGameContext::GetTutorialLogging
PUBLIC	?SetTutorialLogging@CvDllGameContext@@UAGX_N@Z	; CvDllGameContext::SetTutorialLogging
PUBLIC	?GetTutorialDebugging@CvDllGameContext@@UAG_NXZ	; CvDllGameContext::GetTutorialDebugging
PUBLIC	?SetTutorialDebugging@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetTutorialDebugging
PUBLIC	?GetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAG_NXZ ; CvDllGameContext::GetAllowRClickMovementWhileScrolling
PUBLIC	?SetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetAllowRClickMovementWhileScrolling
PUBLIC	?GetPostTurnAutosaves@CvDllGameContext@@UAG_NXZ	; CvDllGameContext::GetPostTurnAutosaves
PUBLIC	?SetPostTurnAutosaves@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetPostTurnAutosaves
PUBLIC	?GetDatabaseLoadUtility@CvDllGameContext@@UAGPAVICvDLLDatabaseUtility1@@XZ ; CvDllGameContext::GetDatabaseLoadUtility
PUBLIC	?GetPlotDirectionX@CvDllGameContext@@UAGPAHXZ	; CvDllGameContext::GetPlotDirectionX
PUBLIC	?GetPlotDirectionY@CvDllGameContext@@UAGPAHXZ	; CvDllGameContext::GetPlotDirectionY
PUBLIC	?GetCityPlotX@CvDllGameContext@@UAGPAHXZ	; CvDllGameContext::GetCityPlotX
PUBLIC	?GetCityPlotY@CvDllGameContext@@UAGPAHXZ	; CvDllGameContext::GetCityPlotY
PUBLIC	?SetGameDatabase@CvDllGameContext@@UAGXPAVConnection@Database@@@Z ; CvDllGameContext::SetGameDatabase
PUBLIC	?SetDLLIFace@CvDllGameContext@@UAG_NPAVICvEngineUtility1@@@Z ; CvDllGameContext::SetDLLIFace
PUBLIC	?IsGraphicsInitialized@CvDllGameContext@@UBG_NXZ ; CvDllGameContext::IsGraphicsInitialized
PUBLIC	?SetGraphicsInitialized@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetGraphicsInitialized
PUBLIC	?SetOutOfSyncDebuggingEnabled@CvDllGameContext@@UAGX_N@Z ; CvDllGameContext::SetOutOfSyncDebuggingEnabled
PUBLIC	?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z ; CvDllGameContext::RandomNumberGeneratorSyncCheck
PUBLIC	?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ ; CvDllGameContext::CreateRandomNumberGenerator
PUBLIC	?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z ; CvDllGameContext::GetRandomNumberGenerator
PUBLIC	?DestroyRandomNumberGenerator@CvDllGameContext@@UAGXI@Z ; CvDllGameContext::DestroyRandomNumberGenerator
PUBLIC	?CreateNetInitInfo@CvDllGameContext@@UAGIXZ	; CvDllGameContext::CreateNetInitInfo
PUBLIC	?GetNetInitInfo@CvDllGameContext@@UAGPAVICvNetInitInfo1@@I@Z ; CvDllGameContext::GetNetInitInfo
PUBLIC	?DestroyNetInitInfo@CvDllGameContext@@UAGXI@Z	; CvDllGameContext::DestroyNetInitInfo
PUBLIC	?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ	; CvDllGameContext::CreateNetLoadGameInfo
PUBLIC	?GetNetLoadGameInfo@CvDllGameContext@@UAGPAVICvNetLoadGameInfo1@@I@Z ; CvDllGameContext::GetNetLoadGameInfo
PUBLIC	?DestroyNetLoadGameInfo@CvDllGameContext@@UAGXI@Z ; CvDllGameContext::DestroyNetLoadGameInfo
PUBLIC	?TEMPOnHexUnitChanged@CvDllGameContext@@UAGXPAVICvUnit1@@@Z ; CvDllGameContext::TEMPOnHexUnitChanged
PUBLIC	?TEMPOnHexUnitChangedAttack@CvDllGameContext@@UAGXPAVICvUnit1@@@Z ; CvDllGameContext::TEMPOnHexUnitChangedAttack
PUBLIC	?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z ; CvDllGameContext::TEMPCalculatePathFinderUpdates
PUBLIC	?ResetPathFinder@CvDllGameContext@@UAGXXZ	; CvDllGameContext::ResetPathFinder
PUBLIC	?SetEngineUserInterface@CvDllGameContext@@UAGXPAVICvUserInterface2@@@Z ; CvDllGameContext::SetEngineUserInterface
PUBLIC	?Debug_GetHeap@CvDllGameContext@@UBGPAXXZ	; CvDllGameContext::Debug_GetHeap
EXTRN	??3CvDllWorldBuilderMapLoader@@SAXPAX@Z:PROC	; CvDllWorldBuilderMapLoader::operator delete
EXTRN	??3CvDllScriptSystemUtility@@SAXPAX@Z:PROC	; CvDllScriptSystemUtility::operator delete
EXTRN	??3CvDllNetMessageHandler@@SAXPAX@Z:PROC	; CvDllNetMessageHandler::operator delete
EXTRN	??3CvDllNetworkSyncronization@@SAXPAX@Z:PROC	; CvDllNetworkSyncronization::operator delete
EXTRN	??0CvDllWorldBuilderMapLoader@@QAE@XZ:PROC	; CvDllWorldBuilderMapLoader::CvDllWorldBuilderMapLoader
EXTRN	??2CvDllWorldBuilderMapLoader@@SAPAXI@Z:PROC	; CvDllWorldBuilderMapLoader::operator new
EXTRN	??0CvDllScriptSystemUtility@@QAE@XZ:PROC	; CvDllScriptSystemUtility::CvDllScriptSystemUtility
EXTRN	??2CvDllScriptSystemUtility@@SAPAXI@Z:PROC	; CvDllScriptSystemUtility::operator new
EXTRN	??0CvDllNetMessageHandler@@QAE@XZ:PROC		; CvDllNetMessageHandler::CvDllNetMessageHandler
EXTRN	??2CvDllNetMessageHandler@@SAPAXI@Z:PROC	; CvDllNetMessageHandler::operator new
EXTRN	??0CvDllNetworkSyncronization@@QAE@XZ:PROC	; CvDllNetworkSyncronization::CvDllNetworkSyncronization
EXTRN	??2CvDllNetworkSyncronization@@SAPAXI@Z:PROC	; CvDllNetworkSyncronization::operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllGameContext@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	SEGMENT
??_7CvDllGameContext@@6B@ DD FLAT:?QueryInterface@CvDllGameContext@@UAGPAXU_GUID@@@Z ; CvDllGameContext::`vftable'
	DD	FLAT:?Destroy@CvDllGameContext@@MAGXXZ
	DD	FLAT:?GetDLLGUID@CvDllGameContext@@UAG?AU_GUID@@XZ
	DD	FLAT:?GetDLLVersion@CvDllGameContext@@UAGPBDXZ
	DD	FLAT:?GetNetworkSyncronizer@CvDllGameContext@@UAGPAVICvNetworkSyncronization1@@XZ
	DD	FLAT:?GetNetMessageHandler@CvDllGameContext@@UAGPAVICvNetMessageHandler1@@XZ
	DD	FLAT:?GetWorldBuilderMapLoader@CvDllGameContext@@UAGPAVICvWorldBuilderMapLoader1@@XZ
	DD	FLAT:?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ
	DD	FLAT:?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ
	DD	FLAT:?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ
	DD	FLAT:?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ
	DD	FLAT:?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z
	DD	FLAT:?GetInfoTypeForString@CvDllGameContext@@UBGHPBD_N@Z
	DD	FLAT:?GetInfoTypeForHash@CvDllGameContext@@UBGHI_N@Z
	DD	FLAT:?GetCivilizationInfoIndex@CvDllGameContext@@UAG?AW4CivilizationTypes@@PBD@Z
	DD	FLAT:?GetNumPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumAIPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumPlayableMinorCivs@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumBuildInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumBuildingInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumCivilizationInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumClimateInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumColorInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumEraInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumFeatureInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumGameOptionInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumGameSpeedInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumHandicapInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumImprovementInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumLeaderHeadInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumMinorCivInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumPlayerColorInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumPolicyInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumPromotionInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumResourceInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumSeaLevelInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumTechInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumTerrainInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumUnitCombatClassInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumUnitInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumVictoryInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetNumWorldInfos@CvDllGameContext@@UAGHXZ
	DD	FLAT:?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z
	DD	FLAT:?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z
	DD	FLAT:?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z
	DD	FLAT:?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z
	DD	FLAT:?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z
	DD	FLAT:?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z
	DD	FLAT:?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z
	DD	FLAT:?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z
	DD	FLAT:?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z
	DD	FLAT:?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z
	DD	FLAT:?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z
	DD	FLAT:?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z
	DD	FLAT:?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z
	DD	FLAT:?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z
	DD	FLAT:?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z
	DD	FLAT:?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z
	DD	FLAT:?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z
	DD	FLAT:?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z
	DD	FLAT:?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z
	DD	FLAT:?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z
	DD	FLAT:?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z
	DD	FLAT:?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z
	DD	FLAT:?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z
	DD	FLAT:?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z
	DD	FLAT:?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z
	DD	FLAT:?GetMOVE_DENOMINATOR@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetMAX_CITY_HIT_POINTS@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetCITY_ZOOM_OFFSET@CvDllGameContext@@UBGMXZ
	DD	FLAT:?GetCITY_ZOOM_LEVEL_1@CvDllGameContext@@UBGMXZ
	DD	FLAT:?GetCITY_ZOOM_LEVEL_2@CvDllGameContext@@UBGMXZ
	DD	FLAT:?GetCITY_ZOOM_LEVEL_3@CvDllGameContext@@UBGMXZ
	DD	FLAT:?GetRUINS_IMPROVEMENT@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetSHALLOW_WATER_TERRAIN@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetDEFICIT_UNIT_DISBANDING_THRESHOLD@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetLAST_UNIT_ART_ERA@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetLAST_EMBARK_ART_ERA@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetHEAVY_RESOURCE_THRESHOLD@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetSTANDARD_HANDICAP@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetSTANDARD_GAMESPEED@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetLAST_BRIDGE_ART_ERA@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetBARBARIAN_CIVILIZATION@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetMINOR_CIVILIZATION@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetBARBARIAN_HANDICAP@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetBARBARIAN_LEADER@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetMINOR_CIV_HANDICAP@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetWALLS_BUILDINGCLASS@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetAI_HANDICAP@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetNUM_CITY_PLOTS@CvDllGameContext@@UBGHXZ
	DD	FLAT:?GetHexDebugLayerNames@CvDllGameContext@@UAGPAPBDXZ
	DD	FLAT:?GetHexDebugLayerScale@CvDllGameContext@@UAGMPBD@Z
	DD	FLAT:?GetHexDebugLayerString@CvDllGameContext@@UAG_NPAVICvPlot1@@PBDW4PlayerTypes@@PADI@Z
	DD	FLAT:?Init@CvDllGameContext@@UAGXXZ
	DD	FLAT:?Uninit@CvDllGameContext@@UAGXXZ
	DD	FLAT:?GetScriptSystemUtility@CvDllGameContext@@UAGPAVICvScriptSystemUtility1@@XZ
	DD	FLAT:?GetNotificationType@CvDllGameContext@@UBGPBDH@Z
	DD	FLAT:?GetLogging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetLogging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetRandLogging@CvDllGameContext@@UAGHXZ
	DD	FLAT:?SetRandLogging@CvDllGameContext@@UAGXH@Z
	DD	FLAT:?GetAILogging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetAILogging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetAIPerfLogging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetAIPerfLogging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetBuilderAILogging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetBuilderAILogging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetPlayerAndCityAILogSplit@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetPlayerAndCityAILogSplit@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetTutorialLogging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetTutorialLogging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetTutorialDebugging@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetTutorialDebugging@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetPostTurnAutosaves@CvDllGameContext@@UAG_NXZ
	DD	FLAT:?SetPostTurnAutosaves@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?GetDatabaseLoadUtility@CvDllGameContext@@UAGPAVICvDLLDatabaseUtility1@@XZ
	DD	FLAT:?GetPlotDirectionX@CvDllGameContext@@UAGPAHXZ
	DD	FLAT:?GetPlotDirectionY@CvDllGameContext@@UAGPAHXZ
	DD	FLAT:?GetCityPlotX@CvDllGameContext@@UAGPAHXZ
	DD	FLAT:?GetCityPlotY@CvDllGameContext@@UAGPAHXZ
	DD	FLAT:?SetGameDatabase@CvDllGameContext@@UAGXPAVConnection@Database@@@Z
	DD	FLAT:?SetDLLIFace@CvDllGameContext@@UAG_NPAVICvEngineUtility1@@@Z
	DD	FLAT:?IsGraphicsInitialized@CvDllGameContext@@UBG_NXZ
	DD	FLAT:?SetGraphicsInitialized@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?SetOutOfSyncDebuggingEnabled@CvDllGameContext@@UAGX_N@Z
	DD	FLAT:?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z
	DD	FLAT:?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ
	DD	FLAT:?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z
	DD	FLAT:?DestroyRandomNumberGenerator@CvDllGameContext@@UAGXI@Z
	DD	FLAT:?CreateNetInitInfo@CvDllGameContext@@UAGIXZ
	DD	FLAT:?GetNetInitInfo@CvDllGameContext@@UAGPAVICvNetInitInfo1@@I@Z
	DD	FLAT:?DestroyNetInitInfo@CvDllGameContext@@UAGXI@Z
	DD	FLAT:?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ
	DD	FLAT:?GetNetLoadGameInfo@CvDllGameContext@@UAGPAVICvNetLoadGameInfo1@@I@Z
	DD	FLAT:?DestroyNetLoadGameInfo@CvDllGameContext@@UAGXI@Z
	DD	FLAT:?TEMPOnHexUnitChanged@CvDllGameContext@@UAGXPAVICvUnit1@@@Z
	DD	FLAT:?TEMPOnHexUnitChangedAttack@CvDllGameContext@@UAGXPAVICvUnit1@@@Z
	DD	FLAT:?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z
	DD	FLAT:?ResetPathFinder@CvDllGameContext@@UAGXXZ
	DD	FLAT:?SetEngineUserInterface@CvDllGameContext@@UAGXPAVICvUserInterface2@@@Z
	DD	FLAT:?Debug_GetHeap@CvDllGameContext@@UBGPAXXZ
CONST	ENDS
;	COMDAT ??_7ICvGameContext3@@6B@
CONST	SEGMENT
??_7ICvGameContext3@@6B@ DD FLAT:__purecall		; ICvGameContext3::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvGameContext2@@6B@
CONST	SEGMENT
??_7ICvGameContext2@@6B@ DD FLAT:__purecall		; ICvGameContext2::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvGameContext1@@6B@
CONST	SEGMENT
??_7ICvGameContext1@@6B@ DD FLAT:__purecall		; ICvGameContext1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvDllGameContext@@IAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0CvDllGameContext@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvDllGameContext@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$10
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$1
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$12
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$2
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$3
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$4
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvDllGameContext@@IAE@XZ$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ??0CvDllGameContext@@IAE@XZ
_TEXT	SEGMENT
tv156 = -240						; size = 4
tv148 = -236						; size = 4
tv140 = -232						; size = 4
tv132 = -228						; size = 4
tv325 = -224						; size = 4
tv350 = -220						; size = 4
tv267 = -216						; size = 4
tv296 = -212						; size = 4
tv216 = -208						; size = 4
tv241 = -204						; size = 4
_this$ = -200						; size = 4
$T226983 = -196						; size = 4
$T226948 = -186						; size = 1
$T226935 = -185						; size = 1
$T226931 = -184						; size = 4
$T226924 = -176						; size = 4
$T226917 = -168						; size = 4
$T226882 = -158						; size = 1
$T226869 = -157						; size = 1
$T226865 = -156						; size = 4
$T226858 = -148						; size = 4
$T226851 = -140						; size = 4
$T226811 = -62						; size = 1
$T226798 = -61						; size = 1
$T226794 = -60						; size = 4
$T226787 = -52						; size = 4
$T226747 = -44						; size = 4
$T226746 = -40						; size = 4
$T226743 = -36						; size = 4
$T226742 = -32						; size = 4
$T226739 = -28						; size = 4
$T226738 = -24						; size = 4
$T226735 = -20						; size = 4
$T226734 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvDllGameContext@@IAE@XZ PROC			; CvDllGameContext::CvDllGameContext, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvDllGameContext@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvGameContext1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7ICvGameContext2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvGameContext3@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CvDllGameContext@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T226851[ebp], edx
	lea	eax, DWORD PTR $T226811[ebp]
	mov	DWORD PTR $T226787[ebp], eax
	lea	ecx, DWORD PTR $T226798[ebp]
	mov	DWORD PTR $T226794[ebp], ecx
	mov	edx, DWORD PTR $T226851[ebp]
	mov	DWORD PTR tv241[ebp], edx
	mov	eax, DWORD PTR $T226851[ebp]
	mov	DWORD PTR tv216[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR $T226851[ebp]
	call	?_Buy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR $T226917[ebp], edx
	lea	eax, DWORD PTR $T226882[ebp]
	mov	DWORD PTR $T226858[ebp], eax
	lea	ecx, DWORD PTR $T226869[ebp]
	mov	DWORD PTR $T226865[ebp], ecx
	mov	edx, DWORD PTR $T226917[ebp]
	mov	DWORD PTR tv296[ebp], edx
	mov	eax, DWORD PTR $T226917[ebp]
	mov	DWORD PTR tv267[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	0
	mov	ecx, DWORD PTR $T226917[ebp]
	call	?_Buy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR $T226983[ebp], edx
	lea	eax, DWORD PTR $T226948[ebp]
	mov	DWORD PTR $T226924[ebp], eax
	lea	ecx, DWORD PTR $T226935[ebp]
	mov	DWORD PTR $T226931[ebp], ecx
	mov	edx, DWORD PTR $T226983[ebp]
	mov	DWORD PTR tv350[ebp], edx
	mov	eax, DWORD PTR $T226983[ebp]
	mov	DWORD PTR tv325[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	push	0
	mov	ecx, DWORD PTR $T226983[ebp]
	call	?_Buy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0

; 60   : 	m_pNetworkSyncronizer = new CvDllNetworkSyncronization();

	push	4
	call	??2CvDllNetworkSyncronization@@SAPAXI@Z	; CvDllNetworkSyncronization::operator new
	add	esp, 4
	mov	DWORD PTR $T226735[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T226735[ebp], 0
	je	SHORT $LN3@CvDllGameC
	mov	ecx, DWORD PTR $T226735[ebp]
	call	??0CvDllNetworkSyncronization@@QAE@XZ	; CvDllNetworkSyncronization::CvDllNetworkSyncronization
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN4@CvDllGameC
$LN3@CvDllGameC:
	mov	DWORD PTR tv132[ebp], 0
$LN4@CvDllGameC:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T226734[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T226734[ebp]
	mov	DWORD PTR [eax+4], ecx

; 61   : 	m_pNetMessageHandler = new CvDllNetMessageHandler();

	push	4
	call	??2CvDllNetMessageHandler@@SAPAXI@Z	; CvDllNetMessageHandler::operator new
	add	esp, 4
	mov	DWORD PTR $T226739[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T226739[ebp], 0
	je	SHORT $LN5@CvDllGameC
	mov	ecx, DWORD PTR $T226739[ebp]
	call	??0CvDllNetMessageHandler@@QAE@XZ	; CvDllNetMessageHandler::CvDllNetMessageHandler
	mov	DWORD PTR tv140[ebp], eax
	jmp	SHORT $LN6@CvDllGameC
$LN5@CvDllGameC:
	mov	DWORD PTR tv140[ebp], 0
$LN6@CvDllGameC:
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T226738[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T226738[ebp]
	mov	DWORD PTR [eax+8], ecx

; 62   : 	m_pScriptSystemUtility = new CvDllScriptSystemUtility();

	push	4
	call	??2CvDllScriptSystemUtility@@SAPAXI@Z	; CvDllScriptSystemUtility::operator new
	add	esp, 4
	mov	DWORD PTR $T226743[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T226743[ebp], 0
	je	SHORT $LN7@CvDllGameC
	mov	ecx, DWORD PTR $T226743[ebp]
	call	??0CvDllScriptSystemUtility@@QAE@XZ	; CvDllScriptSystemUtility::CvDllScriptSystemUtility
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN8@CvDllGameC
$LN7@CvDllGameC:
	mov	DWORD PTR tv148[ebp], 0
$LN8@CvDllGameC:
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T226742[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T226742[ebp]
	mov	DWORD PTR [eax+12], ecx

; 63   : 	m_pWorldBuilderMapLoader = new CvDllWorldBuilderMapLoader();

	push	4
	call	??2CvDllWorldBuilderMapLoader@@SAPAXI@Z	; CvDllWorldBuilderMapLoader::operator new
	add	esp, 4
	mov	DWORD PTR $T226747[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T226747[ebp], 0
	je	SHORT $LN9@CvDllGameC
	mov	ecx, DWORD PTR $T226747[ebp]
	call	??0CvDllWorldBuilderMapLoader@@QAE@XZ	; CvDllWorldBuilderMapLoader::CvDllWorldBuilderMapLoader
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN10@CvDllGameC
$LN9@CvDllGameC:
	mov	DWORD PTR tv156[ebp], 0
$LN10@CvDllGameC:
	mov	edx, DWORD PTR tv156[ebp]
	mov	DWORD PTR $T226746[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T226746[ebp]
	mov	DWORD PTR [eax+16], ecx

; 64   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$7:
	mov	ecx, DWORD PTR $T226851[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$10:
	mov	ecx, DWORD PTR $T226917[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$12:
	mov	ecx, DWORD PTR $T226983[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$3:
	mov	eax, DWORD PTR $T226735[ebp]
	push	eax
	call	??3CvDllNetworkSyncronization@@SAXPAX@Z	; CvDllNetworkSyncronization::operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$4:
	mov	eax, DWORD PTR $T226739[ebp]
	push	eax
	call	??3CvDllNetMessageHandler@@SAXPAX@Z	; CvDllNetMessageHandler::operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$5:
	mov	eax, DWORD PTR $T226743[ebp]
	push	eax
	call	??3CvDllScriptSystemUtility@@SAXPAX@Z	; CvDllScriptSystemUtility::operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CvDllGameContext@@IAE@XZ$6:
	mov	eax, DWORD PTR $T226747[ebp]
	push	eax
	call	??3CvDllWorldBuilderMapLoader@@SAXPAX@Z	; CvDllWorldBuilderMapLoader::operator delete
	pop	ecx
	ret	0
__ehhandler$??0CvDllGameContext@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvDllGameContext@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvDllGameContext@@IAE@XZ ENDP			; CvDllGameContext::CvDllGameContext
PUBLIC	?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Tidy
PUBLIC	?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Tidy
PUBLIC	?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Tidy
PUBLIC	?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase
PUBLIC	?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase
PUBLIC	?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase
PUBLIC	??1CvDllGameContext@@QAE@XZ			; CvDllGameContext::~CvDllGameContext
EXTRN	??3CvDllNetLoadGameInfo@@SAXPAX@Z:PROC		; CvDllNetLoadGameInfo::operator delete
EXTRN	??1CvDllNetLoadGameInfo@@QAE@XZ:PROC		; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo
EXTRN	??3CvDllNetInitInfo@@SAXPAX@Z:PROC		; CvDllNetInitInfo::operator delete
EXTRN	??1CvDllNetInitInfo@@QAE@XZ:PROC		; CvDllNetInitInfo::~CvDllNetInitInfo
EXTRN	??1CvDllWorldBuilderMapLoader@@QAE@XZ:PROC	; CvDllWorldBuilderMapLoader::~CvDllWorldBuilderMapLoader
EXTRN	??1CvDllScriptSystemUtility@@QAE@XZ:PROC	; CvDllScriptSystemUtility::~CvDllScriptSystemUtility
EXTRN	??1CvDllNetMessageHandler@@QAE@XZ:PROC		; CvDllNetMessageHandler::~CvDllNetMessageHandler
EXTRN	??1CvDllNetworkSyncronization@@QAE@XZ:PROC	; CvDllNetworkSyncronization::~CvDllNetworkSyncronization
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$??1CvDllGameContext@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CvDllGameContext@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvDllGameContext@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvDllGameContext@@QAE@XZ$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ??1CvDllGameContext@@QAE@XZ
_TEXT	SEGMENT
tv229 = -404						; size = 4
tv195 = -400						; size = 4
tv161 = -396						; size = 4
tv130 = -392						; size = 4
tv92 = -388						; size = 4
tv86 = -384						; size = 4
tv80 = -380						; size = 4
_this$ = -376						; size = 4
$T227825 = -372						; size = 4
$T227739 = -336						; size = 4
$T227653 = -300						; size = 4
$T227567 = -264						; size = 4
$T227415 = -208						; size = 4
$T227399 = -204						; size = 4
$T227553 = -200						; size = 4
$T227552 = -196						; size = 4
$T227551 = -192						; size = 4
$T227550 = -188						; size = 4
$T227549 = -184						; size = 4
$T227342 = -180						; size = 4
$T227318 = -176						; size = 4
$T227308 = -172						; size = 4
$T227282 = -168						; size = 4
$T227266 = -164						; size = 4
$T227295 = -160						; size = 4
$T227294 = -156						; size = 4
$T227293 = -152						; size = 4
$T227292 = -148						; size = 4
$T227291 = -144						; size = 4
$T227209 = -140						; size = 4
$T227185 = -136						; size = 4
$T227175 = -132						; size = 4
$T227149 = -128						; size = 4
$T227133 = -124						; size = 4
$T227162 = -120						; size = 4
$T227161 = -116						; size = 4
$T227160 = -112						; size = 4
$T227159 = -108						; size = 4
$T227158 = -104						; size = 4
$T227080 = -100						; size = 4
$T227056 = -96						; size = 4
$T227025 = -92						; size = 4
$T227024 = -88						; size = 4
$T227023 = -84						; size = 4
$T227020 = -80						; size = 4
$T227019 = -76						; size = 4
$T227018 = -72						; size = 4
$T227015 = -68						; size = 4
$T227014 = -64						; size = 4
$T227013 = -60						; size = 4
$T227010 = -56						; size = 4
$T227009 = -52						; size = 4
$T227006 = -48						; size = 4
$T227005 = -44						; size = 4
$T227002 = -40						; size = 4
$T227001 = -36						; size = 4
$T226998 = -32						; size = 4
$T226997 = -28						; size = 4
_it$221689 = -24					; size = 4
_it$221502 = -20					; size = 4
_it$221315 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1CvDllGameContext@@QAE@XZ PROC			; CvDllGameContext::~CvDllGameContext, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvDllGameContext@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 392				; 00000188H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllGameContext@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 68   : 	delete m_pNetworkSyncronizer;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T226998[ebp], edx
	mov	eax, DWORD PTR $T226998[ebp]
	mov	DWORD PTR $T226997[ebp], eax
	cmp	DWORD PTR $T226997[ebp], 0
	je	SHORT $LN12@CvDllGameC@2
	mov	ecx, DWORD PTR $T226997[ebp]
	call	??1CvDllNetworkSyncronization@@QAE@XZ	; CvDllNetworkSyncronization::~CvDllNetworkSyncronization
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN30@CvDllGameC@2
	mov	edx, DWORD PTR $T226997[ebp]
	push	edx
	call	??3CvDllNetworkSyncronization@@SAXPAX@Z	; CvDllNetworkSyncronization::operator delete
	add	esp, 4
$LN30@CvDllGameC@2:
	mov	eax, DWORD PTR $T226997[ebp]
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN13@CvDllGameC@2
$LN12@CvDllGameC@2:
	mov	DWORD PTR tv80[ebp], 0
$LN13@CvDllGameC@2:

; 69   : 	delete m_pNetMessageHandler;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T227002[ebp], edx
	mov	eax, DWORD PTR $T227002[ebp]
	mov	DWORD PTR $T227001[ebp], eax
	cmp	DWORD PTR $T227001[ebp], 0
	je	SHORT $LN14@CvDllGameC@2
	mov	ecx, DWORD PTR $T227001[ebp]
	call	??1CvDllNetMessageHandler@@QAE@XZ	; CvDllNetMessageHandler::~CvDllNetMessageHandler
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN33@CvDllGameC@2
	mov	edx, DWORD PTR $T227001[ebp]
	push	edx
	call	??3CvDllNetMessageHandler@@SAXPAX@Z	; CvDllNetMessageHandler::operator delete
	add	esp, 4
$LN33@CvDllGameC@2:
	mov	eax, DWORD PTR $T227001[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN15@CvDllGameC@2
$LN14@CvDllGameC@2:
	mov	DWORD PTR tv86[ebp], 0
$LN15@CvDllGameC@2:

; 70   : 	delete m_pScriptSystemUtility;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T227006[ebp], edx
	mov	eax, DWORD PTR $T227006[ebp]
	mov	DWORD PTR $T227005[ebp], eax
	cmp	DWORD PTR $T227005[ebp], 0
	je	SHORT $LN16@CvDllGameC@2
	mov	ecx, DWORD PTR $T227005[ebp]
	call	??1CvDllScriptSystemUtility@@QAE@XZ	; CvDllScriptSystemUtility::~CvDllScriptSystemUtility
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN36@CvDllGameC@2
	mov	edx, DWORD PTR $T227005[ebp]
	push	edx
	call	??3CvDllScriptSystemUtility@@SAXPAX@Z	; CvDllScriptSystemUtility::operator delete
	add	esp, 4
$LN36@CvDllGameC@2:
	mov	eax, DWORD PTR $T227005[ebp]
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN17@CvDllGameC@2
$LN16@CvDllGameC@2:
	mov	DWORD PTR tv92[ebp], 0
$LN17@CvDllGameC@2:

; 71   : 	delete m_pWorldBuilderMapLoader;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T227010[ebp], edx
	mov	eax, DWORD PTR $T227010[ebp]
	mov	DWORD PTR $T227009[ebp], eax
	cmp	DWORD PTR $T227009[ebp], 0
	je	SHORT $LN18@CvDllGameC@2
	mov	ecx, DWORD PTR $T227009[ebp]
	call	??1CvDllWorldBuilderMapLoader@@QAE@XZ	; CvDllWorldBuilderMapLoader::~CvDllWorldBuilderMapLoader
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN39@CvDllGameC@2
	mov	edx, DWORD PTR $T227009[ebp]
	push	edx
	call	??3CvDllWorldBuilderMapLoader@@SAXPAX@Z	; CvDllWorldBuilderMapLoader::operator delete
	add	esp, 4
$LN39@CvDllGameC@2:
	mov	eax, DWORD PTR $T227009[ebp]
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN19@CvDllGameC@2
$LN18@CvDllGameC@2:
	mov	DWORD PTR tv130[ebp], 0
$LN19@CvDllGameC@2:

; 72   : 
; 73   : 	for(std::vector<std::pair<uint, CvRandom*> >::iterator it = m_RandomNumberGenerators.begin();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T227056[ebp], edx
	mov	eax, DWORD PTR $T227056[ebp]
	mov	DWORD PTR _it$221315[ebp], eax

; 74   : 	        it != m_RandomNumberGenerators.end(); ++it)

	jmp	SHORT $LN9@CvDllGameC@2
$LN8@CvDllGameC@2:
	mov	ecx, DWORD PTR _it$221315[ebp]
	add	ecx, 8
	mov	DWORD PTR _it$221315[ebp], ecx
$LN9@CvDllGameC@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR $T227080[ebp], eax
	mov	ecx, DWORD PTR $T227080[ebp]
	mov	DWORD PTR $T227013[ebp], ecx
	mov	edx, DWORD PTR _it$221315[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T227013[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN7@CvDllGameC@2

; 75   : 	{
; 76   : 		delete(*it).second;

	mov	eax, DWORD PTR _it$221315[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T227015[ebp], ecx
	mov	edx, DWORD PTR $T227015[ebp]
	mov	DWORD PTR $T227014[ebp], edx
	cmp	DWORD PTR $T227014[ebp], 0
	je	SHORT $LN20@CvDllGameC@2
	push	1
	mov	eax, DWORD PTR $T227014[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T227014[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN65@CvDllGameC@2
$LN20@CvDllGameC@2:
	mov	DWORD PTR tv161[ebp], 0

; 77   : 		it->second = NULL;

$LN65@CvDllGameC@2:
	mov	ecx, DWORD PTR _it$221315[ebp]
	mov	DWORD PTR [ecx+4], 0

; 78   : 	}

	jmp	SHORT $LN8@CvDllGameC@2
$LN7@CvDllGameC@2:

; 79   : 	m_RandomNumberGenerators.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR $T227175[ebp], edx
	mov	eax, DWORD PTR $T227175[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227133[ebp], ecx
	mov	edx, DWORD PTR $T227133[ebp]
	mov	DWORD PTR $T227159[ebp], edx
	mov	eax, DWORD PTR $T227159[ebp]
	mov	DWORD PTR $T227158[ebp], eax
	mov	ecx, DWORD PTR $T227175[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227149[ebp], edx
	mov	eax, DWORD PTR $T227149[ebp]
	mov	DWORD PTR $T227161[ebp], eax
	mov	ecx, DWORD PTR $T227161[ebp]
	mov	DWORD PTR $T227160[ebp], ecx
	mov	edx, DWORD PTR $T227158[ebp]
	push	edx
	mov	eax, DWORD PTR $T227160[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227162[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227175[ebp]
	call	?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase

; 80   : 
; 81   : 	for(std::vector<std::pair<uint, CvDllNetInitInfo*> >::iterator it = m_NetInitInfos.begin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T227185[ebp], eax
	mov	ecx, DWORD PTR $T227185[ebp]
	mov	DWORD PTR _it$221502[ebp], ecx

; 82   : 	        it != m_NetInitInfos.end(); ++it)

	jmp	SHORT $LN6@CvDllGameC@2
$LN5@CvDllGameC@2:
	mov	edx, DWORD PTR _it$221502[ebp]
	add	edx, 8
	mov	DWORD PTR _it$221502[ebp], edx
$LN6@CvDllGameC@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T227209[ebp], ecx
	mov	edx, DWORD PTR $T227209[ebp]
	mov	DWORD PTR $T227018[ebp], edx
	mov	eax, DWORD PTR _it$221502[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T227018[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@CvDllGameC@2

; 83   : 	{
; 84   : 		delete(*it).second;

	mov	ecx, DWORD PTR _it$221502[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227020[ebp], edx
	mov	eax, DWORD PTR $T227020[ebp]
	mov	DWORD PTR $T227019[ebp], eax
	cmp	DWORD PTR $T227019[ebp], 0
	je	SHORT $LN22@CvDllGameC@2
	mov	ecx, DWORD PTR $T227019[ebp]
	call	??1CvDllNetInitInfo@@QAE@XZ		; CvDllNetInitInfo::~CvDllNetInitInfo
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN110@CvDllGameC@2
	mov	edx, DWORD PTR $T227019[ebp]
	push	edx
	call	??3CvDllNetInitInfo@@SAXPAX@Z		; CvDllNetInitInfo::operator delete
	add	esp, 4
$LN110@CvDllGameC@2:
	mov	eax, DWORD PTR $T227019[ebp]
	mov	DWORD PTR tv195[ebp], eax
	jmp	SHORT $LN112@CvDllGameC@2
$LN22@CvDllGameC@2:
	mov	DWORD PTR tv195[ebp], 0

; 85   : 		it->second = NULL;

$LN112@CvDllGameC@2:
	mov	ecx, DWORD PTR _it$221502[ebp]
	mov	DWORD PTR [ecx+4], 0

; 86   : 	}

	jmp	$LN5@CvDllGameC@2
$LN4@CvDllGameC@2:

; 87   : 	m_NetInitInfos.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR $T227308[ebp], edx
	mov	eax, DWORD PTR $T227308[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227266[ebp], ecx
	mov	edx, DWORD PTR $T227266[ebp]
	mov	DWORD PTR $T227292[ebp], edx
	mov	eax, DWORD PTR $T227292[ebp]
	mov	DWORD PTR $T227291[ebp], eax
	mov	ecx, DWORD PTR $T227308[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227282[ebp], edx
	mov	eax, DWORD PTR $T227282[ebp]
	mov	DWORD PTR $T227294[ebp], eax
	mov	ecx, DWORD PTR $T227294[ebp]
	mov	DWORD PTR $T227293[ebp], ecx
	mov	edx, DWORD PTR $T227291[ebp]
	push	edx
	mov	eax, DWORD PTR $T227293[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227295[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227308[ebp]
	call	?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase

; 88   : 
; 89   : 
; 90   : 	for(std::vector<std::pair<uint, CvDllNetLoadGameInfo*> >::iterator it = m_NetLoadGameInfos.begin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR $T227318[ebp], eax
	mov	ecx, DWORD PTR $T227318[ebp]
	mov	DWORD PTR _it$221689[ebp], ecx

; 91   : 	        it != m_NetLoadGameInfos.end(); ++it)

	jmp	SHORT $LN3@CvDllGameC@2
$LN2@CvDllGameC@2:
	mov	edx, DWORD PTR _it$221689[ebp]
	add	edx, 8
	mov	DWORD PTR _it$221689[ebp], edx
$LN3@CvDllGameC@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR $T227342[ebp], ecx
	mov	edx, DWORD PTR $T227342[ebp]
	mov	DWORD PTR $T227023[ebp], edx
	mov	eax, DWORD PTR _it$221689[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T227023[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@CvDllGameC@2

; 92   : 	{
; 93   : 		delete(*it).second;

	mov	ecx, DWORD PTR _it$221689[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227025[ebp], edx
	mov	eax, DWORD PTR $T227025[ebp]
	mov	DWORD PTR $T227024[ebp], eax
	cmp	DWORD PTR $T227024[ebp], 0
	je	SHORT $LN24@CvDllGameC@2
	mov	ecx, DWORD PTR $T227024[ebp]
	call	??1CvDllNetLoadGameInfo@@QAE@XZ		; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo
	mov	ecx, 1
	and	ecx, 1
	je	SHORT $LN157@CvDllGameC@2
	mov	edx, DWORD PTR $T227024[ebp]
	push	edx
	call	??3CvDllNetLoadGameInfo@@SAXPAX@Z	; CvDllNetLoadGameInfo::operator delete
	add	esp, 4
$LN157@CvDllGameC@2:
	mov	eax, DWORD PTR $T227024[ebp]
	mov	DWORD PTR tv229[ebp], eax
	jmp	SHORT $LN159@CvDllGameC@2
$LN24@CvDllGameC@2:
	mov	DWORD PTR tv229[ebp], 0

; 94   : 		it->second = NULL;

$LN159@CvDllGameC@2:
	mov	ecx, DWORD PTR _it$221689[ebp]
	mov	DWORD PTR [ecx+4], 0

; 95   : 	}

	jmp	$LN2@CvDllGameC@2
$LN1@CvDllGameC@2:

; 96   : 	m_NetLoadGameInfos.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR $T227567[ebp], edx
	mov	eax, DWORD PTR $T227567[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T227399[ebp], ecx
	mov	edx, DWORD PTR $T227399[ebp]
	mov	DWORD PTR $T227550[ebp], edx
	mov	eax, DWORD PTR $T227550[ebp]
	mov	DWORD PTR $T227549[ebp], eax
	mov	ecx, DWORD PTR $T227567[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T227415[ebp], edx
	mov	eax, DWORD PTR $T227415[ebp]
	mov	DWORD PTR $T227552[ebp], eax
	mov	ecx, DWORD PTR $T227552[ebp]
	mov	DWORD PTR $T227551[ebp], ecx
	mov	edx, DWORD PTR $T227549[ebp]
	push	edx
	mov	eax, DWORD PTR $T227551[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227553[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227567[ebp]
	call	?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase

; 97   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	mov	DWORD PTR $T227653[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T227653[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR $T227739[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T227739[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T227825[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T227825[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$3:
	mov	ecx, DWORD PTR $T227653[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$5:
	mov	ecx, DWORD PTR $T227739[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CvDllGameContext@@QAE@XZ$7:
	mov	ecx, DWORD PTR $T227825[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
__ehhandler$??1CvDllGameContext@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvDllGameContext@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvDllGameContext@@QAE@XZ ENDP			; CvDllGameContext::~CvDllGameContext
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllGameContext@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv145 = -168						; size = 4
tv264 = -164						; size = 4
tv140 = -160						; size = 4
tv208 = -156						; size = 4
tv135 = -152						; size = 4
tv184 = -148						; size = 4
tv130 = -144						; size = 4
tv160 = -140						; size = 4
$T227842 = -136						; size = 16
$T227841 = -120						; size = 16
$T227840 = -104						; size = 16
$T227839 = -88						; size = 16
$T227838 = -72						; size = 16
$T227837 = -56						; size = 16
$T227836 = -40						; size = 16
$T227835 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllGameContext@@UAGPAXU_GUID@@@Z PROC	; CvDllGameContext::QueryInterface, COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	push	edi

; 101  : 	if(	guidInterface == ICvUnknown::GetInterfaceId() ||
; 102  :         guidInterface == ICvGameContext1::GetInterfaceId() ||
; 103  : 		guidInterface == ICvGameContext2::GetInterfaceId() ||
; 104  : 		guidInterface == ICvGameContext3::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T227836[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T227836[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T227836[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T227836[ebp+12], eax
	mov	ecx, DWORD PTR $T227836[ebp]
	mov	DWORD PTR $T227835[ebp], ecx
	mov	edx, DWORD PTR $T227836[ebp+4]
	mov	DWORD PTR $T227835[ebp+4], edx
	mov	eax, DWORD PTR $T227836[ebp+8]
	mov	DWORD PTR $T227835[ebp+8], eax
	mov	ecx, DWORD PTR $T227836[ebp+12]
	mov	DWORD PTR $T227835[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T227835[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv160[ebp], edx
	repe cmpsb
	je	SHORT $LN29@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv160[ebp], eax
$LN29@QueryInter:
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR tv130[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv130[ebp], 0
	sete	dl
	test	edx, edx
	jne	$LN1@QueryInter
	mov	eax, DWORD PTR _guidICvGameContext1
	mov	DWORD PTR $T227838[ebp], eax
	mov	ecx, DWORD PTR _guidICvGameContext1+4
	mov	DWORD PTR $T227838[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvGameContext1+8
	mov	DWORD PTR $T227838[ebp+8], edx
	mov	eax, DWORD PTR _guidICvGameContext1+12
	mov	DWORD PTR $T227838[ebp+12], eax
	mov	ecx, DWORD PTR $T227838[ebp]
	mov	DWORD PTR $T227837[ebp], ecx
	mov	edx, DWORD PTR $T227838[ebp+4]
	mov	DWORD PTR $T227837[ebp+4], edx
	mov	eax, DWORD PTR $T227838[ebp+8]
	mov	DWORD PTR $T227837[ebp+8], eax
	mov	ecx, DWORD PTR $T227838[ebp+12]
	mov	DWORD PTR $T227837[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T227837[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv184[ebp], edx
	repe cmpsb
	je	SHORT $LN30@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv184[ebp], eax
$LN30@QueryInter:
	mov	ecx, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv135[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv135[ebp], 0
	sete	dl
	test	edx, edx
	jne	$LN1@QueryInter
	mov	eax, DWORD PTR _guidICvGameContext2
	mov	DWORD PTR $T227840[ebp], eax
	mov	ecx, DWORD PTR _guidICvGameContext2+4
	mov	DWORD PTR $T227840[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvGameContext2+8
	mov	DWORD PTR $T227840[ebp+8], edx
	mov	eax, DWORD PTR _guidICvGameContext2+12
	mov	DWORD PTR $T227840[ebp+12], eax
	mov	ecx, DWORD PTR $T227840[ebp]
	mov	DWORD PTR $T227839[ebp], ecx
	mov	edx, DWORD PTR $T227840[ebp+4]
	mov	DWORD PTR $T227839[ebp+4], edx
	mov	eax, DWORD PTR $T227840[ebp+8]
	mov	DWORD PTR $T227839[ebp+8], eax
	mov	ecx, DWORD PTR $T227840[ebp+12]
	mov	DWORD PTR $T227839[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T227839[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv208[ebp], edx
	repe cmpsb
	je	SHORT $LN31@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv208[ebp], eax
$LN31@QueryInter:
	mov	ecx, DWORD PTR tv208[ebp]
	mov	DWORD PTR tv140[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv140[ebp], 0
	sete	dl
	test	edx, edx
	jne	$LN1@QueryInter
	mov	eax, DWORD PTR _guidICvGameContext3
	mov	DWORD PTR $T227842[ebp], eax
	mov	ecx, DWORD PTR _guidICvGameContext3+4
	mov	DWORD PTR $T227842[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvGameContext3+8
	mov	DWORD PTR $T227842[ebp+8], edx
	mov	eax, DWORD PTR _guidICvGameContext3+12
	mov	DWORD PTR $T227842[ebp+12], eax
	mov	ecx, DWORD PTR $T227842[ebp]
	mov	DWORD PTR $T227841[ebp], ecx
	mov	edx, DWORD PTR $T227842[ebp+4]
	mov	DWORD PTR $T227841[ebp+4], edx
	mov	eax, DWORD PTR $T227842[ebp+8]
	mov	DWORD PTR $T227841[ebp+8], eax
	mov	ecx, DWORD PTR $T227842[ebp+12]
	mov	DWORD PTR $T227841[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T227841[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv264[ebp], edx
	repe cmpsb
	je	SHORT $LN32@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv264[ebp], eax
$LN32@QueryInter:
	mov	ecx, DWORD PTR tv264[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv145[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 105  : 	{
; 106  : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 107  : 	}
; 108  : 
; 109  : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 110  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllGameContext@@UAGPAXU_GUID@@@Z ENDP	; CvDllGameContext::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetDLLGUID@CvDllGameContext@@UAG?AU_GUID@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
?GetDLLGUID@CvDllGameContext@@UAG?AU_GUID@@XZ PROC	; CvDllGameContext::GetDLLGUID, COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp

; 115  : 	return CIV5_XP2_DLL_GUID;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _CIV5_XP2_DLL_GUID
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _CIV5_XP2_DLL_GUID+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _CIV5_XP2_DLL_GUID+8
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _CIV5_XP2_DLL_GUID+12
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 116  : }

	pop	ebp
	ret	8
?GetDLLGUID@CvDllGameContext@@UAG?AU_GUID@@XZ ENDP	; CvDllGameContext::GetDLLGUID
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetDLLVersion@CvDllGameContext@@UAGPBDXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetDLLVersion@CvDllGameContext@@UAGPBDXZ PROC		; CvDllGameContext::GetDLLVersion, COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp

; 121  : 	return CIV5_XP2_DLL_VERSION;

	mov	eax, DWORD PTR _CIV5_XP2_DLL_VERSION

; 122  : }

	pop	ebp
	ret	4
?GetDLLVersion@CvDllGameContext@@UAGPBDXZ ENDP		; CvDllGameContext::GetDLLVersion
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllGameContext@@MAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllGameContext@@MAGXXZ PROC			; CvDllGameContext::Destroy, COMDAT

; 126  : {

	push	ebp
	mov	ebp, esp

; 127  : 	//Do nothing, it's a singleton controlled by the DLL.
; 128  : }

	pop	ebp
	ret	4
?Destroy@CvDllGameContext@@MAGXXZ ENDP			; CvDllGameContext::Destroy
_TEXT	ENDS
PUBLIC	??3ICvUnknown@@SGXPAX@Z				; ICvUnknown::operator delete
PUBLIC	?InitializeSingleton@CvDllGameContext@@SAXXZ	; CvDllGameContext::InitializeSingleton
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__HeapSetInformation@16:PROC
EXTRN	__imp__HeapCreate@12:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitializeSingleton@CvDllGameContext@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializeSingleton@CvDllGameContext@@SAXXZ$0
__ehfuncinfo$?InitializeSingleton@CvDllGameContext@@SAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitializeSingleton@CvDllGameContext@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?InitializeSingleton@CvDllGameContext@@SAXXZ
_TEXT	SEGMENT
tv80 = -28						; size = 4
$T227904 = -24						; size = 4
$T227903 = -20						; size = 4
_HeapInformation$221770 = -16				; size = 4
__$EHRec$ = -12						; size = 12
?InitializeSingleton@CvDllGameContext@@SAXXZ PROC	; CvDllGameContext::InitializeSingleton, COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitializeSingleton@CvDllGameContext@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 132  : 	if(s_pSingleton == NULL)

	cmp	DWORD PTR ?s_pSingleton@CvDllGameContext@@0PAV1@A, 0 ; CvDllGameContext::s_pSingleton
	jne	SHORT $LN1@Initialize

; 133  : 	{
; 134  : 		FAssert(s_hHeap == INVALID_HANDLE_VALUE);
; 135  : 		s_hHeap = HeapCreate(0, 0, 0);

	push	0
	push	0
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	mov	DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA, eax ; CvDllGameContext::s_hHeap

; 136  : 
; 137  : 		//
; 138  : 		// Enable the low-fragmentation heap (LFH). Starting with Windows Vista,
; 139  : 		// the LFH is enabled by default but this call does not cause an error.
; 140  : 		//
; 141  : 		ULONG HeapInformation = 2;	//Low Fragmentation Heap

	mov	DWORD PTR _HeapInformation$221770[ebp], 2

; 142  : 		HeapSetInformation(s_hHeap,
; 143  : 		                   HeapCompatibilityInformation,
; 144  : 		                   &HeapInformation,
; 145  : 		                   sizeof(HeapInformation));

	push	4
	lea	eax, DWORD PTR _HeapInformation$221770[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap
	push	ecx
	call	DWORD PTR __imp__HeapSetInformation@16
$LN1@Initialize:

; 146  : 
; 147  : 	}
; 148  : 	s_pSingleton = FNEW(CvDllGameContext(), c_eCiv5GameplayDLL, 0);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T227904[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T227904[ebp], 0
	je	SHORT $LN4@Initialize
	mov	ecx, DWORD PTR $T227904[ebp]
	call	??0CvDllGameContext@@IAE@XZ		; CvDllGameContext::CvDllGameContext
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@Initialize
$LN4@Initialize:
	mov	DWORD PTR tv80[ebp], 0
$LN5@Initialize:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T227903[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T227903[ebp]
	mov	DWORD PTR ?s_pSingleton@CvDllGameContext@@0PAV1@A, eax ; CvDllGameContext::s_pSingleton

; 149  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitializeSingleton@CvDllGameContext@@SAXXZ$0:
	mov	eax, DWORD PTR $T227904[ebp]
	push	eax
	call	??3ICvUnknown@@SGXPAX@Z			; ICvUnknown::operator delete
	ret	0
__ehhandler$?InitializeSingleton@CvDllGameContext@@SAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitializeSingleton@CvDllGameContext@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitializeSingleton@CvDllGameContext@@SAXXZ ENDP	; CvDllGameContext::InitializeSingleton
PUBLIC	?DestroySingleton@CvDllGameContext@@SAXXZ	; CvDllGameContext::DestroySingleton
EXTRN	__imp__HeapDestroy@4:PROC
; Function compile flags: /Odtp
;	COMDAT ?DestroySingleton@CvDllGameContext@@SAXXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_inst$227944 = -12					; size = 4
$T227937 = -8						; size = 4
$T227936 = -4						; size = 4
?DestroySingleton@CvDllGameContext@@SAXXZ PROC		; CvDllGameContext::DestroySingleton, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 153  : 	SAFE_DELETE(s_pSingleton);

	mov	eax, DWORD PTR ?s_pSingleton@CvDllGameContext@@0PAV1@A ; CvDllGameContext::s_pSingleton
	mov	DWORD PTR $T227937[ebp], eax
	mov	ecx, DWORD PTR $T227937[ebp]
	mov	DWORD PTR $T227936[ebp], ecx
	cmp	DWORD PTR $T227936[ebp], 0
	je	SHORT $LN5@DestroySin
	mov	ecx, DWORD PTR $T227936[ebp]
	call	??1CvDllGameContext@@QAE@XZ		; CvDllGameContext::~CvDllGameContext
	mov	edx, 1
	and	edx, 1
	je	SHORT $LN8@DestroySin
	cmp	DWORD PTR $T227936[ebp], 0
	je	SHORT $LN8@DestroySin
	mov	eax, DWORD PTR $T227936[ebp]
	mov	DWORD PTR _inst$227944[ebp], eax
	mov	ecx, DWORD PTR _inst$227944[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$227944[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN8@DestroySin:
	mov	edx, DWORD PTR $T227936[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DestroySin
$LN5@DestroySin:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DestroySin:
	mov	DWORD PTR ?s_pSingleton@CvDllGameContext@@0PAV1@A, 0 ; CvDllGameContext::s_pSingleton

; 154  : 	HeapDestroy(s_hHeap);

	mov	eax, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4

; 155  : 	s_hHeap = INVALID_HANDLE_VALUE;

	mov	DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA, -1 ; CvDllGameContext::s_hHeap

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroySingleton@CvDllGameContext@@SAXXZ ENDP		; CvDllGameContext::DestroySingleton
_TEXT	ENDS
PUBLIC	?GetSingleton@CvDllGameContext@@SAPAV1@XZ	; CvDllGameContext::GetSingleton
; Function compile flags: /Odtp
;	COMDAT ?GetSingleton@CvDllGameContext@@SAPAV1@XZ
_TEXT	SEGMENT
?GetSingleton@CvDllGameContext@@SAPAV1@XZ PROC		; CvDllGameContext::GetSingleton, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp

; 160  : 	return s_pSingleton;

	mov	eax, DWORD PTR ?s_pSingleton@CvDllGameContext@@0PAV1@A ; CvDllGameContext::s_pSingleton

; 161  : }

	pop	ebp
	ret	0
?GetSingleton@CvDllGameContext@@SAPAV1@XZ ENDP		; CvDllGameContext::GetSingleton
_TEXT	ENDS
PUBLIC	?GetHeap@CvDllGameContext@@QAEPAXXZ		; CvDllGameContext::GetHeap
; Function compile flags: /Odtp
;	COMDAT ?GetHeap@CvDllGameContext@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeap@CvDllGameContext@@QAEPAXXZ PROC		; CvDllGameContext::GetHeap, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	return s_hHeap;

	mov	eax, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeap@CvDllGameContext@@QAEPAXXZ ENDP		; CvDllGameContext::GetHeap
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Debug_GetHeap@CvDllGameContext@@UBGPAXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Debug_GetHeap@CvDllGameContext@@UBGPAXXZ PROC		; CvDllGameContext::Debug_GetHeap, COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp

; 170  : 	return s_hHeap;

	mov	eax, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap

; 171  : }

	pop	ebp
	ret	4
?Debug_GetHeap@CvDllGameContext@@UBGPAXXZ ENDP		; CvDllGameContext::Debug_GetHeap
_TEXT	ENDS
PUBLIC	?Allocate@CvDllGameContext@@SAPAXI@Z		; CvDllGameContext::Allocate
EXTRN	__imp__HeapAlloc@12:PROC
; Function compile flags: /Odtp
;	COMDAT ?Allocate@CvDllGameContext@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
?Allocate@CvDllGameContext@@SAPAXI@Z PROC		; CvDllGameContext::Allocate, COMDAT

; 178  : {

	push	ebp
	mov	ebp, esp

; 179  : 	return HeapAlloc(s_hHeap, 0, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap
	push	ecx
	call	DWORD PTR __imp__HeapAlloc@12

; 180  : }

	pop	ebp
	ret	0
?Allocate@CvDllGameContext@@SAPAXI@Z ENDP		; CvDllGameContext::Allocate
_TEXT	ENDS
PUBLIC	?Free@CvDllGameContext@@SAXPAX@Z		; CvDllGameContext::Free
EXTRN	__imp__HeapFree@12:PROC
; Function compile flags: /Odtp
;	COMDAT ?Free@CvDllGameContext@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CvDllGameContext@@SAXPAX@Z PROC			; CvDllGameContext::Free, COMDAT

; 187  : {

	push	ebp
	mov	ebp, esp

; 188  : 	HeapFree(s_hHeap, 0, p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_hHeap@CvDllGameContext@@0PAXA ; CvDllGameContext::s_hHeap
	push	ecx
	call	DWORD PTR __imp__HeapFree@12

; 189  : }

	pop	ebp
	ret	0
?Free@CvDllGameContext@@SAXPAX@Z ENDP			; CvDllGameContext::Free
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNetworkSyncronizer@CvDllGameContext@@UAGPAVICvNetworkSyncronization1@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNetworkSyncronizer@CvDllGameContext@@UAGPAVICvNetworkSyncronization1@@XZ PROC ; CvDllGameContext::GetNetworkSyncronizer, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp

; 193  : 	return m_pNetworkSyncronizer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 194  : }

	pop	ebp
	ret	4
?GetNetworkSyncronizer@CvDllGameContext@@UAGPAVICvNetworkSyncronization1@@XZ ENDP ; CvDllGameContext::GetNetworkSyncronizer
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNetMessageHandler@CvDllGameContext@@UAGPAVICvNetMessageHandler1@@XZ
_TEXT	SEGMENT
$T227962 = -32						; size = 16
$T227961 = -16						; size = 16
_this$ = 8						; size = 4
?GetNetMessageHandler@CvDllGameContext@@UAGPAVICvNetMessageHandler1@@XZ PROC ; CvDllGameContext::GetNetMessageHandler, COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 198  : 	return (ICvNetMessageHandler1*)m_pNetMessageHandler->QueryInterface(ICvNetMessageHandler1::GetInterfaceId());

	mov	eax, DWORD PTR _guidICvNetMessageHandler1
	mov	DWORD PTR $T227962[ebp], eax
	mov	ecx, DWORD PTR _guidICvNetMessageHandler1+4
	mov	DWORD PTR $T227962[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvNetMessageHandler1+8
	mov	DWORD PTR $T227962[ebp+8], edx
	mov	eax, DWORD PTR _guidICvNetMessageHandler1+12
	mov	DWORD PTR $T227962[ebp+12], eax
	mov	ecx, DWORD PTR $T227962[ebp]
	mov	DWORD PTR $T227961[ebp], ecx
	mov	edx, DWORD PTR $T227962[ebp+4]
	mov	DWORD PTR $T227961[ebp+4], edx
	mov	eax, DWORD PTR $T227962[ebp+8]
	mov	DWORD PTR $T227961[ebp+8], eax
	mov	ecx, DWORD PTR $T227962[ebp+12]
	mov	DWORD PTR $T227961[ebp+12], ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR $T227961[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T227961[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T227961[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T227961[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx

; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNetMessageHandler@CvDllGameContext@@UAGPAVICvNetMessageHandler1@@XZ ENDP ; CvDllGameContext::GetNetMessageHandler
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetWorldBuilderMapLoader@CvDllGameContext@@UAGPAVICvWorldBuilderMapLoader1@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetWorldBuilderMapLoader@CvDllGameContext@@UAGPAVICvWorldBuilderMapLoader1@@XZ PROC ; CvDllGameContext::GetWorldBuilderMapLoader, COMDAT

; 202  : {

	push	ebp
	mov	ebp, esp

; 203  : 	return m_pWorldBuilderMapLoader;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 204  : }

	pop	ebp
	ret	4
?GetWorldBuilderMapLoader@CvDllGameContext@@UAGPAVICvWorldBuilderMapLoader1@@XZ ENDP ; CvDllGameContext::GetWorldBuilderMapLoader
_TEXT	ENDS
EXTRN	??3CvDllPreGame@@SAXPAX@Z:PROC			; CvDllPreGame::operator delete
EXTRN	??0CvDllPreGame@@QAE@XZ:PROC			; CvDllPreGame::CvDllPreGame
EXTRN	??2CvDllPreGame@@SAPAXI@Z:PROC			; CvDllPreGame::operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ$0
__ehfuncinfo$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T227972 = -20						; size = 4
$T227971 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ PROC ; CvDllGameContext::GetPreGame, COMDAT

; 207  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 208  : 	return new CvDllPreGame();

	push	4
	call	??2CvDllPreGame@@SAPAXI@Z		; CvDllPreGame::operator new
	add	esp, 4
	mov	DWORD PTR $T227972[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T227972[ebp], 0
	je	SHORT $LN3@GetPreGame
	mov	ecx, DWORD PTR $T227972[ebp]
	call	??0CvDllPreGame@@QAE@XZ			; CvDllPreGame::CvDllPreGame
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@GetPreGame
$LN3@GetPreGame:
	mov	DWORD PTR tv74[ebp], 0
$LN4@GetPreGame:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T227971[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T227971[ebp]

; 209  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ$0:
	mov	eax, DWORD PTR $T227972[ebp]
	push	eax
	call	??3CvDllPreGame@@SAXPAX@Z		; CvDllPreGame::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPreGame@CvDllGameContext@@UAGPAVICvPreGame1@@XZ ENDP ; CvDllGameContext::GetPreGame
EXTRN	??3CvDllGame@@SAXPAX@Z:PROC			; CvDllGame::operator delete
EXTRN	??0CvDllGame@@QAE@PAVCvGame@@@Z:PROC		; CvDllGame::CvDllGame
EXTRN	??2CvDllGame@@SAPAXI@Z:PROC			; CvDllGame::operator new
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
xdata$x	SEGMENT
__unwindtable$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ$0
__ehfuncinfo$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ
_TEXT	SEGMENT
tv78 = -28						; size = 4
$T227985 = -24						; size = 4
$T227984 = -20						; size = 4
_pkGame$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ PROC	; CvDllGameContext::GetGame, COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 213  : 	CvGame* pkGame = GC.getGamePointer();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _pkGame$[ebp], eax

; 214  : 	if(pkGame)

	cmp	DWORD PTR _pkGame$[ebp], 0
	je	SHORT $LN1@GetGame

; 215  : 		return new CvDllGame(pkGame);

	push	12					; 0000000cH
	call	??2CvDllGame@@SAPAXI@Z			; CvDllGame::operator new
	add	esp, 4
	mov	DWORD PTR $T227985[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T227985[ebp], 0
	je	SHORT $LN4@GetGame
	mov	ecx, DWORD PTR _pkGame$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227985[ebp]
	call	??0CvDllGame@@QAE@PAVCvGame@@@Z		; CvDllGame::CvDllGame
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@GetGame
$LN4@GetGame:
	mov	DWORD PTR tv78[ebp], 0
$LN5@GetGame:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T227984[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T227984[ebp]
	jmp	SHORT $LN2@GetGame
$LN1@GetGame:

; 216  : 	return NULL;

	xor	eax, eax
$LN2@GetGame:

; 217  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ$0:
	mov	eax, DWORD PTR $T227985[ebp]
	push	eax
	call	??3CvDllGame@@SAXPAX@Z			; CvDllGame::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGame@CvDllGameContext@@UAGPAVICvGame1@@XZ ENDP	; CvDllGameContext::GetGame
EXTRN	??3CvDllGameAsynch@@SAXPAX@Z:PROC		; CvDllGameAsynch::operator delete
EXTRN	??0CvDllGameAsynch@@QAE@PAVCvGame@@@Z:PROC	; CvDllGameAsynch::CvDllGameAsynch
EXTRN	??2CvDllGameAsynch@@SAPAXI@Z:PROC		; CvDllGameAsynch::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
xdata$x	SEGMENT
__unwindtable$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ$0
__ehfuncinfo$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ
_TEXT	SEGMENT
tv78 = -28						; size = 4
$T228001 = -24						; size = 4
$T228000 = -20						; size = 4
_pkGame$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ PROC ; CvDllGameContext::GetGameAsynch, COMDAT

; 220  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 221  : 	CvGame* pkGame = GC.getGamePointer();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _pkGame$[ebp], eax

; 222  : 	if(pkGame)

	cmp	DWORD PTR _pkGame$[ebp], 0
	je	SHORT $LN1@GetGameAsy

; 223  : 		return new CvDllGameAsynch(pkGame);

	push	12					; 0000000cH
	call	??2CvDllGameAsynch@@SAPAXI@Z		; CvDllGameAsynch::operator new
	add	esp, 4
	mov	DWORD PTR $T228001[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228001[ebp], 0
	je	SHORT $LN4@GetGameAsy
	mov	ecx, DWORD PTR _pkGame$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228001[ebp]
	call	??0CvDllGameAsynch@@QAE@PAVCvGame@@@Z	; CvDllGameAsynch::CvDllGameAsynch
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@GetGameAsy
$LN4@GetGameAsy:
	mov	DWORD PTR tv78[ebp], 0
$LN5@GetGameAsy:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T228000[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228000[ebp]
	jmp	SHORT $LN2@GetGameAsy
$LN1@GetGameAsy:

; 224  : 	return NULL;

	xor	eax, eax
$LN2@GetGameAsy:

; 225  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ$0:
	mov	eax, DWORD PTR $T228001[ebp]
	push	eax
	call	??3CvDllGameAsynch@@SAXPAX@Z		; CvDllGameAsynch::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGameAsynch@CvDllGameContext@@UAGPAVICvGameAsynch1@@XZ ENDP ; CvDllGameContext::GetGameAsynch
EXTRN	??3CvDllMap@@SAXPAX@Z:PROC			; CvDllMap::operator delete
EXTRN	??0CvDllMap@@QAE@PAVCvMap@@@Z:PROC		; CvDllMap::CvDllMap
EXTRN	??2CvDllMap@@SAPAXI@Z:PROC			; CvDllMap::operator new
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
xdata$x	SEGMENT
__unwindtable$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ$0
__ehfuncinfo$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ
_TEXT	SEGMENT
tv78 = -28						; size = 4
$T228017 = -24						; size = 4
$T228016 = -20						; size = 4
_pkMap$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ PROC	; CvDllGameContext::GetMap, COMDAT

; 228  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 229  : 	CvMap* pkMap = GC.getMapPointer();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _pkMap$[ebp], eax

; 230  : 	if(pkMap)

	cmp	DWORD PTR _pkMap$[ebp], 0
	je	SHORT $LN1@GetMap

; 231  : 		return new CvDllMap(pkMap);

	push	12					; 0000000cH
	call	??2CvDllMap@@SAPAXI@Z			; CvDllMap::operator new
	add	esp, 4
	mov	DWORD PTR $T228017[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228017[ebp], 0
	je	SHORT $LN4@GetMap
	mov	ecx, DWORD PTR _pkMap$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228017[ebp]
	call	??0CvDllMap@@QAE@PAVCvMap@@@Z		; CvDllMap::CvDllMap
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@GetMap
$LN4@GetMap:
	mov	DWORD PTR tv78[ebp], 0
$LN5@GetMap:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T228016[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228016[ebp]
	jmp	SHORT $LN2@GetMap
$LN1@GetMap:

; 232  : 	return NULL;

	xor	eax, eax
$LN2@GetMap:

; 233  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ$0:
	mov	eax, DWORD PTR $T228017[ebp]
	push	eax
	call	??3CvDllMap@@SAXPAX@Z			; CvDllMap::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMap@CvDllGameContext@@UAGPAVICvMap1@@XZ ENDP	; CvDllGameContext::GetMap
EXTRN	??3CvDllTeam@@SAXPAX@Z:PROC			; CvDllTeam::operator delete
EXTRN	??0CvDllTeam@@QAE@PAVCvTeam@@@Z:PROC		; CvDllTeam::CvDllTeam
EXTRN	??2CvDllTeam@@SAPAXI@Z:PROC			; CvDllTeam::operator new
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
xdata$x	SEGMENT
__unwindtable$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z$0
__ehfuncinfo$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z
_TEXT	SEGMENT
tv78 = -28						; size = 4
$T228033 = -24						; size = 4
$T228032 = -20						; size = 4
_kTeam$221847 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eTeam$ = 12						; size = 4
?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z PROC ; CvDllGameContext::GetTeam, COMDAT

; 236  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 237  : 	if(eTeam < MAX_TEAMS)

	cmp	DWORD PTR _eTeam$[ebp], 64		; 00000040H
	jge	SHORT $LN1@GetTeam

; 238  : 	{
; 239  : 		CvTeam& kTeam = CvTeam::getTeam(eTeam);

	mov	eax, DWORD PTR _eTeam$[ebp]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kTeam$221847[ebp], eax

; 240  : 		return new CvDllTeam(&kTeam);

	push	12					; 0000000cH
	call	??2CvDllTeam@@SAPAXI@Z			; CvDllTeam::operator new
	add	esp, 4
	mov	DWORD PTR $T228033[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228033[ebp], 0
	je	SHORT $LN4@GetTeam
	mov	ecx, DWORD PTR _kTeam$221847[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228033[ebp]
	call	??0CvDllTeam@@QAE@PAVCvTeam@@@Z		; CvDllTeam::CvDllTeam
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@GetTeam
$LN4@GetTeam:
	mov	DWORD PTR tv78[ebp], 0
$LN5@GetTeam:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T228032[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228032[ebp]
	jmp	SHORT $LN2@GetTeam
$LN1@GetTeam:

; 241  : 	}
; 242  : 
; 243  : 	return NULL;

	xor	eax, eax
$LN2@GetTeam:

; 244  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z$0:
	mov	eax, DWORD PTR $T228033[ebp]
	push	eax
	call	??3CvDllTeam@@SAXPAX@Z			; CvDllTeam::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTeam@CvDllGameContext@@UAGPAVICvTeam1@@W4TeamTypes@@@Z ENDP ; CvDllGameContext::GetTeam
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
; Function compile flags: /Odtp
;	COMDAT ?GetInfoTypeForString@CvDllGameContext@@UBGHPBD_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szType$ = 12						; size = 4
_hideAssert$ = 16					; size = 1
?GetInfoTypeForString@CvDllGameContext@@UBGHPBD_N@Z PROC ; CvDllGameContext::GetInfoTypeForString, COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp

; 248  : 	return GC.getInfoTypeForString(szType, hideAssert);

	movzx	eax, BYTE PTR _hideAssert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 249  : }

	pop	ebp
	ret	12					; 0000000cH
?GetInfoTypeForString@CvDllGameContext@@UBGHPBD_N@Z ENDP ; CvDllGameContext::GetInfoTypeForString
_TEXT	ENDS
EXTRN	?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z:PROC	; CvGlobals::getInfoTypeForHash
; Function compile flags: /Odtp
;	COMDAT ?GetInfoTypeForHash@CvDllGameContext@@UBGHI_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_uiHash$ = 12						; size = 4
_hideAssert$ = 16					; size = 1
?GetInfoTypeForHash@CvDllGameContext@@UBGHI_N@Z PROC	; CvDllGameContext::GetInfoTypeForHash, COMDAT

; 252  : {

	push	ebp
	mov	ebp, esp

; 253  : 	return GC.getInfoTypeForHash(uiHash, hideAssert);

	movzx	eax, BYTE PTR _hideAssert$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uiHash$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForHash@CvGlobals@@QBEHI_N@Z ; CvGlobals::getInfoTypeForHash

; 254  : }

	pop	ebp
	ret	12					; 0000000cH
?GetInfoTypeForHash@CvDllGameContext@@UBGHI_N@Z ENDP	; CvDllGameContext::GetInfoTypeForHash
_TEXT	ENDS
EXTRN	?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z:PROC ; CvGlobals::getCivilizationInfoIndex
; Function compile flags: /Odtp
;	COMDAT ?GetCivilizationInfoIndex@CvDllGameContext@@UAG?AW4CivilizationTypes@@PBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszType$ = 12						; size = 4
?GetCivilizationInfoIndex@CvDllGameContext@@UAG?AW4CivilizationTypes@@PBD@Z PROC ; CvDllGameContext::GetCivilizationInfoIndex, COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp

; 258  : 	return GC.getCivilizationInfoIndex(pszType);

	mov	eax, DWORD PTR _pszType$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCivilizationInfoIndex@CvGlobals@@QAE?AW4CivilizationTypes@@PBD@Z ; CvGlobals::getCivilizationInfoIndex

; 259  : }

	pop	ebp
	ret	8
?GetCivilizationInfoIndex@CvDllGameContext@@UAG?AW4CivilizationTypes@@PBD@Z ENDP ; CvDllGameContext::GetCivilizationInfoIndex
_TEXT	ENDS
EXTRN	?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ:PROC ; CvGlobals::getNumPlayableCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ PROC ; CvDllGameContext::GetNumPlayableCivilizationInfos, COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp

; 263  : 	return GC.getNumPlayableCivilizationInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ; CvGlobals::getNumPlayableCivilizationInfos
	mov	eax, DWORD PTR [eax]

; 264  : }

	pop	ebp
	ret	4
?GetNumPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ ENDP ; CvDllGameContext::GetNumPlayableCivilizationInfos
_TEXT	ENDS
EXTRN	?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ:PROC ; CvGlobals::getNumAIPlayableCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumAIPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumAIPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ PROC ; CvDllGameContext::GetNumAIPlayableCivilizationInfos, COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp

; 268  : 	return GC.getNumAIPlayableCivilizationInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIPlayableCivilizationInfos@CvGlobals@@QAEAAHXZ ; CvGlobals::getNumAIPlayableCivilizationInfos
	mov	eax, DWORD PTR [eax]

; 269  : }

	pop	ebp
	ret	4
?GetNumAIPlayableCivilizationInfos@CvDllGameContext@@UAGHXZ ENDP ; CvDllGameContext::GetNumAIPlayableCivilizationInfos
_TEXT	ENDS
EXTRN	?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ:PROC	; CvGlobals::GetNumPlayableMinorCivs
; Function compile flags: /Odtp
;	COMDAT ?GetNumPlayableMinorCivs@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumPlayableMinorCivs@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumPlayableMinorCivs, COMDAT

; 272  : {

	push	ebp
	mov	ebp, esp

; 273  : 	return GC.GetNumPlayableMinorCivs();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetNumPlayableMinorCivs@CvGlobals@@QBEHXZ ; CvGlobals::GetNumPlayableMinorCivs

; 274  : }

	pop	ebp
	ret	4
?GetNumPlayableMinorCivs@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumPlayableMinorCivs
_TEXT	ENDS
EXTRN	?getNumBuildInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumBuildInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumBuildInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumBuildInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumBuildInfos, COMDAT

; 277  : {

	push	ebp
	mov	ebp, esp

; 278  : 	return GC.getNumBuildInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumBuildInfos

; 279  : }

	pop	ebp
	ret	4
?GetNumBuildInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumBuildInfos
_TEXT	ENDS
EXTRN	?getNumBuildingInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumBuildingInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumBuildingInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumBuildingInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumBuildingInfos, COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp

; 283  : 	return GC.getNumBuildingInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumBuildingInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumBuildingInfos

; 284  : }

	pop	ebp
	ret	4
?GetNumBuildingInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumBuildingInfos
_TEXT	ENDS
EXTRN	?getNumCivilizationInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumCivilizationInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumCivilizationInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumCivilizationInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumCivilizationInfos, COMDAT

; 287  : {

	push	ebp
	mov	ebp, esp

; 288  : 	return GC.getNumCivilizationInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumCivilizationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCivilizationInfos

; 289  : }

	pop	ebp
	ret	4
?GetNumCivilizationInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumCivilizationInfos
_TEXT	ENDS
EXTRN	?getNumClimateInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumClimateInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumClimateInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumClimateInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumClimateInfos, COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp

; 293  : 	return GC.getNumClimateInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumClimateInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumClimateInfos

; 294  : }

	pop	ebp
	ret	4
?GetNumClimateInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumClimateInfos
_TEXT	ENDS
EXTRN	?GetNumColorInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::GetNumColorInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumColorInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumColorInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumColorInfos, COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp

; 298  : 	return GC.GetNumColorInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetNumColorInfos@CvGlobals@@QAEHXZ	; CvGlobals::GetNumColorInfos

; 299  : }

	pop	ebp
	ret	4
?GetNumColorInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumColorInfos
_TEXT	ENDS
EXTRN	?getNumEraInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumEraInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumEraInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumEraInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumEraInfos, COMDAT

; 302  : {

	push	ebp
	mov	ebp, esp

; 303  : 	return GC.getNumEraInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumEraInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumEraInfos

; 304  : }

	pop	ebp
	ret	4
?GetNumEraInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumEraInfos
_TEXT	ENDS
EXTRN	?getNumFeatureInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumFeatureInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumFeatureInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumFeatureInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumFeatureInfos, COMDAT

; 307  : {

	push	ebp
	mov	ebp, esp

; 308  : 	return GC.getNumFeatureInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos

; 309  : }

	pop	ebp
	ret	4
?GetNumFeatureInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumFeatureInfos
_TEXT	ENDS
EXTRN	?getNumGameOptionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumGameOptionInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumGameOptionInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumGameOptionInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumGameOptionInfos, COMDAT

; 312  : {

	push	ebp
	mov	ebp, esp

; 313  : 	return GC.getNumGameOptionInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumGameOptionInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumGameOptionInfos

; 314  : }

	pop	ebp
	ret	4
?GetNumGameOptionInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumGameOptionInfos
_TEXT	ENDS
EXTRN	?getNumGameSpeedInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumGameSpeedInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumGameSpeedInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumGameSpeedInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumGameSpeedInfos, COMDAT

; 317  : {

	push	ebp
	mov	ebp, esp

; 318  : 	return GC.getNumGameSpeedInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumGameSpeedInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumGameSpeedInfos

; 319  : }

	pop	ebp
	ret	4
?GetNumGameSpeedInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumGameSpeedInfos
_TEXT	ENDS
EXTRN	?getNumHandicapInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumHandicapInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumHandicapInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumHandicapInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumHandicapInfos, COMDAT

; 322  : {

	push	ebp
	mov	ebp, esp

; 323  : 	return GC.getNumHandicapInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumHandicapInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumHandicapInfos

; 324  : }

	pop	ebp
	ret	4
?GetNumHandicapInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumHandicapInfos
_TEXT	ENDS
EXTRN	?getNumImprovementInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumImprovementInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumImprovementInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumImprovementInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumImprovementInfos, COMDAT

; 327  : {

	push	ebp
	mov	ebp, esp

; 328  : 	return GC.getNumImprovementInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumImprovementInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumImprovementInfos

; 329  : }

	pop	ebp
	ret	4
?GetNumImprovementInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumImprovementInfos
_TEXT	ENDS
EXTRN	?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumLeaderHeadInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumLeaderHeadInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumLeaderHeadInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumLeaderHeadInfos, COMDAT

; 332  : {

	push	ebp
	mov	ebp, esp

; 333  : 	return GC.getNumLeaderHeadInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumLeaderHeadInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumLeaderHeadInfos

; 334  : }

	pop	ebp
	ret	4
?GetNumLeaderHeadInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumLeaderHeadInfos
_TEXT	ENDS
EXTRN	?getNumMinorCivInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumMinorCivInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumMinorCivInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumMinorCivInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumMinorCivInfos, COMDAT

; 337  : {

	push	ebp
	mov	ebp, esp

; 338  : 	return GC.getNumMinorCivInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumMinorCivInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumMinorCivInfos

; 339  : }

	pop	ebp
	ret	4
?GetNumMinorCivInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumMinorCivInfos
_TEXT	ENDS
EXTRN	?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::GetNumPlayerColorInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumPlayerColorInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumPlayerColorInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumPlayerColorInfos, COMDAT

; 342  : {

	push	ebp
	mov	ebp, esp

; 343  : 	return GC.GetNumPlayerColorInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetNumPlayerColorInfos@CvGlobals@@QAEHXZ ; CvGlobals::GetNumPlayerColorInfos

; 344  : }

	pop	ebp
	ret	4
?GetNumPlayerColorInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumPlayerColorInfos
_TEXT	ENDS
EXTRN	?getNumPolicyInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumPolicyInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumPolicyInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumPolicyInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumPolicyInfos, COMDAT

; 347  : {

	push	ebp
	mov	ebp, esp

; 348  : 	return GC.getNumPolicyInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPolicyInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPolicyInfos

; 349  : }

	pop	ebp
	ret	4
?GetNumPolicyInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumPolicyInfos
_TEXT	ENDS
EXTRN	?getNumPromotionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumPromotionInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumPromotionInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumPromotionInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumPromotionInfos, COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp

; 353  : 	return GC.getNumPromotionInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos

; 354  : }

	pop	ebp
	ret	4
?GetNumPromotionInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumPromotionInfos
_TEXT	ENDS
EXTRN	?getNumResourceInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumResourceInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumResourceInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumResourceInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumResourceInfos, COMDAT

; 357  : {

	push	ebp
	mov	ebp, esp

; 358  : 	return GC.getNumResourceInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumResourceInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumResourceInfos

; 359  : }

	pop	ebp
	ret	4
?GetNumResourceInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumResourceInfos
_TEXT	ENDS
EXTRN	?getNumSeaLevelInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumSeaLevelInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumSeaLevelInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumSeaLevelInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumSeaLevelInfos, COMDAT

; 362  : {

	push	ebp
	mov	ebp, esp

; 363  : 	return GC.getNumSeaLevelInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumSeaLevelInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumSeaLevelInfos

; 364  : }

	pop	ebp
	ret	4
?GetNumSeaLevelInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumSeaLevelInfos
_TEXT	ENDS
EXTRN	?getNumTechInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumTechInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumTechInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumTechInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumTechInfos, COMDAT

; 367  : {

	push	ebp
	mov	ebp, esp

; 368  : 	return GC.getNumTechInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTechInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTechInfos

; 369  : }

	pop	ebp
	ret	4
?GetNumTechInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumTechInfos
_TEXT	ENDS
EXTRN	?getNumTerrainInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumTerrainInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumTerrainInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumTerrainInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumTerrainInfos, COMDAT

; 372  : {

	push	ebp
	mov	ebp, esp

; 373  : 	return GC.getNumTerrainInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos

; 374  : }

	pop	ebp
	ret	4
?GetNumTerrainInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumTerrainInfos
_TEXT	ENDS
EXTRN	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumUnitCombatClassInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumUnitCombatClassInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumUnitCombatClassInfos@CvDllGameContext@@UAGHXZ PROC ; CvDllGameContext::GetNumUnitCombatClassInfos, COMDAT

; 377  : {

	push	ebp
	mov	ebp, esp

; 378  : 	return GC.getNumUnitCombatClassInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumUnitCombatClassInfos

; 379  : }

	pop	ebp
	ret	4
?GetNumUnitCombatClassInfos@CvDllGameContext@@UAGHXZ ENDP ; CvDllGameContext::GetNumUnitCombatClassInfos
_TEXT	ENDS
EXTRN	?getNumUnitInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumUnitInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumUnitInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumUnitInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumUnitInfos, COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp

; 383  : 	return GC.getNumUnitInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitInfos

; 384  : }

	pop	ebp
	ret	4
?GetNumUnitInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumUnitInfos
_TEXT	ENDS
EXTRN	?getNumVictoryInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumVictoryInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumVictoryInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumVictoryInfos@CvDllGameContext@@UAGHXZ PROC	; CvDllGameContext::GetNumVictoryInfos, COMDAT

; 387  : {

	push	ebp
	mov	ebp, esp

; 388  : 	return GC.getNumVictoryInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumVictoryInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumVictoryInfos

; 389  : }

	pop	ebp
	ret	4
?GetNumVictoryInfos@CvDllGameContext@@UAGHXZ ENDP	; CvDllGameContext::GetNumVictoryInfos
_TEXT	ENDS
EXTRN	?getNumWorldInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumWorldInfos
; Function compile flags: /Odtp
;	COMDAT ?GetNumWorldInfos@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumWorldInfos@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetNumWorldInfos, COMDAT

; 392  : {

	push	ebp
	mov	ebp, esp

; 393  : 	return GC.getNumWorldInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumWorldInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumWorldInfos

; 394  : }

	pop	ebp
	ret	4
?GetNumWorldInfos@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetNumWorldInfos
_TEXT	ENDS
EXTRN	??3CvDllBuildInfo@@SAXPAX@Z:PROC		; CvDllBuildInfo::operator delete
EXTRN	??0CvDllBuildInfo@@QAE@PAVCvBuildInfo@@@Z:PROC	; CvDllBuildInfo::CvDllBuildInfo
EXTRN	??2CvDllBuildInfo@@SAPAXI@Z:PROC		; CvDllBuildInfo::operator new
EXTRN	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z:PROC ; CvGlobals::getBuildInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z$0
__ehfuncinfo$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228109 = -24						; size = 4
$T228108 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eBuildNum$ = 12					; size = 4
?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z PROC ; CvDllGameContext::GetBuildInfo, COMDAT

; 397  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 398  : 	CvBuildInfo* pkInfo = GC.getBuildInfo(eBuildNum);

	mov	eax, DWORD PTR _eBuildNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ; CvGlobals::getBuildInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 399  : 	return (NULL != pkInfo)? new CvDllBuildInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetBuildIn
	push	12					; 0000000cH
	call	??2CvDllBuildInfo@@SAPAXI@Z		; CvDllBuildInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228109[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228109[ebp], 0
	je	SHORT $LN3@GetBuildIn
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228109[ebp]
	call	??0CvDllBuildInfo@@QAE@PAVCvBuildInfo@@@Z ; CvDllBuildInfo::CvDllBuildInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetBuildIn
$LN3@GetBuildIn:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetBuildIn:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228108[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228108[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetBuildIn
$LN5@GetBuildIn:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetBuildIn:
	mov	eax, DWORD PTR tv74[ebp]

; 400  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z$0:
	mov	eax, DWORD PTR $T228109[ebp]
	push	eax
	call	??3CvDllBuildInfo@@SAXPAX@Z		; CvDllBuildInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetBuildInfo@CvDllGameContext@@UAGPAVICvBuildInfo1@@W4BuildTypes@@@Z ENDP ; CvDllGameContext::GetBuildInfo
EXTRN	??3CvDllBuildingInfo@@SAXPAX@Z:PROC		; CvDllBuildingInfo::operator delete
EXTRN	??0CvDllBuildingInfo@@QAE@PAVCvBuildingEntry@@@Z:PROC ; CvDllBuildingInfo::CvDllBuildingInfo
EXTRN	??2CvDllBuildingInfo@@SAPAXI@Z:PROC		; CvDllBuildingInfo::operator new
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z$0
__ehfuncinfo$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228124 = -24						; size = 4
$T228123 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eBuilding$ = 12					; size = 4
?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z PROC ; CvDllGameContext::GetBuildingInfo, COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 404  : 	CvBuildingEntry* pkEntry = GC.getBuildingInfo(eBuilding);

	mov	eax, DWORD PTR _eBuilding$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 405  : 	return (NULL != pkEntry)? new CvDllBuildingInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetBuildin
	push	12					; 0000000cH
	call	??2CvDllBuildingInfo@@SAPAXI@Z		; CvDllBuildingInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228124[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228124[ebp], 0
	je	SHORT $LN3@GetBuildin
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228124[ebp]
	call	??0CvDllBuildingInfo@@QAE@PAVCvBuildingEntry@@@Z ; CvDllBuildingInfo::CvDllBuildingInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetBuildin
$LN3@GetBuildin:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetBuildin:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228123[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228123[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetBuildin
$LN5@GetBuildin:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetBuildin:
	mov	eax, DWORD PTR tv74[ebp]

; 406  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z$0:
	mov	eax, DWORD PTR $T228124[ebp]
	push	eax
	call	??3CvDllBuildingInfo@@SAXPAX@Z		; CvDllBuildingInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetBuildingInfo@CvDllGameContext@@UAGPAVICvBuildingInfo1@@W4BuildingTypes@@@Z ENDP ; CvDllGameContext::GetBuildingInfo
EXTRN	??3CvDllCivilizationInfo@@SAXPAX@Z:PROC		; CvDllCivilizationInfo::operator delete
EXTRN	??0CvDllCivilizationInfo@@QAE@PAVCvCivilizationInfo@@@Z:PROC ; CvDllCivilizationInfo::CvDllCivilizationInfo
EXTRN	??2CvDllCivilizationInfo@@SAPAXI@Z:PROC		; CvDllCivilizationInfo::operator new
EXTRN	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z:PROC ; CvGlobals::getCivilizationInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z$0
__ehfuncinfo$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228139 = -24						; size = 4
$T228138 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eCivilizationNum$ = 12					; size = 4
?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z PROC ; CvDllGameContext::GetCivilizationInfo, COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 410  : 	CvCivilizationInfo* pkInfo = GC.getCivilizationInfo(eCivilizationNum);

	mov	eax, DWORD PTR _eCivilizationNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCivilizationInfo@CvGlobals@@QAEPAVCvCivilizationInfo@@W4CivilizationTypes@@@Z ; CvGlobals::getCivilizationInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 411  : 	return (NULL != pkInfo)? new CvDllCivilizationInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetCiviliz
	push	12					; 0000000cH
	call	??2CvDllCivilizationInfo@@SAPAXI@Z	; CvDllCivilizationInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228139[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228139[ebp], 0
	je	SHORT $LN3@GetCiviliz
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228139[ebp]
	call	??0CvDllCivilizationInfo@@QAE@PAVCvCivilizationInfo@@@Z ; CvDllCivilizationInfo::CvDllCivilizationInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetCiviliz
$LN3@GetCiviliz:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetCiviliz:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228138[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228138[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetCiviliz
$LN5@GetCiviliz:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetCiviliz:
	mov	eax, DWORD PTR tv74[ebp]

; 412  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z$0:
	mov	eax, DWORD PTR $T228139[ebp]
	push	eax
	call	??3CvDllCivilizationInfo@@SAXPAX@Z	; CvDllCivilizationInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCivilizationInfo@CvDllGameContext@@UAGPAVICvCivilizationInfo1@@W4CivilizationTypes@@@Z ENDP ; CvDllGameContext::GetCivilizationInfo
EXTRN	??3CvDllColorInfo@@SAXPAX@Z:PROC		; CvDllColorInfo::operator delete
EXTRN	??0CvDllColorInfo@@QAE@PAVCvColorInfo@@@Z:PROC	; CvDllColorInfo::CvDllColorInfo
EXTRN	??2CvDllColorInfo@@SAPAXI@Z:PROC		; CvDllColorInfo::operator new
EXTRN	?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z:PROC ; CvGlobals::GetColorInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z$0
__ehfuncinfo$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228154 = -24						; size = 4
$T228153 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_e$ = 12						; size = 4
?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z PROC ; CvDllGameContext::GetColorInfo, COMDAT

; 415  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 416  : 	CvColorInfo* pkInfo = GC.GetColorInfo(e);

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetColorInfo@CvGlobals@@QAEPAVCvColorInfo@@W4ColorTypes@@@Z ; CvGlobals::GetColorInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 417  : 	return (NULL != pkInfo)? new CvDllColorInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetColorIn
	push	12					; 0000000cH
	call	??2CvDllColorInfo@@SAPAXI@Z		; CvDllColorInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228154[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228154[ebp], 0
	je	SHORT $LN3@GetColorIn
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228154[ebp]
	call	??0CvDllColorInfo@@QAE@PAVCvColorInfo@@@Z ; CvDllColorInfo::CvDllColorInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetColorIn
$LN3@GetColorIn:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetColorIn:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228153[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228153[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetColorIn
$LN5@GetColorIn:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetColorIn:
	mov	eax, DWORD PTR tv74[ebp]

; 418  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z$0:
	mov	eax, DWORD PTR $T228154[ebp]
	push	eax
	call	??3CvDllColorInfo@@SAXPAX@Z		; CvDllColorInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetColorInfo@CvDllGameContext@@UAGPAVICvColorInfo1@@W4ColorTypes@@@Z ENDP ; CvDllGameContext::GetColorInfo
EXTRN	??3CvDllEraInfo@@SAXPAX@Z:PROC			; CvDllEraInfo::operator delete
EXTRN	??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z:PROC	; CvDllEraInfo::CvDllEraInfo
EXTRN	??2CvDllEraInfo@@SAPAXI@Z:PROC			; CvDllEraInfo::operator new
EXTRN	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z:PROC ; CvGlobals::getEraInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z$0
__ehfuncinfo$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228169 = -24						; size = 4
$T228168 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eEraNum$ = 12						; size = 4
?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z PROC ; CvDllGameContext::GetEraInfo, COMDAT

; 421  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 422  : 	CvEraInfo* pkInfo = GC.getEraInfo(eEraNum);

	mov	eax, DWORD PTR _eEraNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getEraInfo@CvGlobals@@QAEPAVCvEraInfo@@W4EraTypes@@@Z ; CvGlobals::getEraInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 423  : 	return (NULL != pkInfo)? new CvDllEraInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetEraInfo
	push	12					; 0000000cH
	call	??2CvDllEraInfo@@SAPAXI@Z		; CvDllEraInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228169[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228169[ebp], 0
	je	SHORT $LN3@GetEraInfo
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228169[ebp]
	call	??0CvDllEraInfo@@QAE@PAVCvEraInfo@@@Z	; CvDllEraInfo::CvDllEraInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetEraInfo
$LN3@GetEraInfo:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetEraInfo:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228168[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228168[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetEraInfo
$LN5@GetEraInfo:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetEraInfo:
	mov	eax, DWORD PTR tv74[ebp]

; 424  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z$0:
	mov	eax, DWORD PTR $T228169[ebp]
	push	eax
	call	??3CvDllEraInfo@@SAXPAX@Z		; CvDllEraInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetEraInfo@CvDllGameContext@@UAGPAVICvEraInfo1@@W4EraTypes@@@Z ENDP ; CvDllGameContext::GetEraInfo
EXTRN	??3CvDllFeatureInfo@@SAXPAX@Z:PROC		; CvDllFeatureInfo::operator delete
EXTRN	??0CvDllFeatureInfo@@QAE@PAVCvFeatureInfo@@@Z:PROC ; CvDllFeatureInfo::CvDllFeatureInfo
EXTRN	??2CvDllFeatureInfo@@SAPAXI@Z:PROC		; CvDllFeatureInfo::operator new
EXTRN	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z:PROC ; CvGlobals::getFeatureInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z$0
__ehfuncinfo$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228184 = -24						; size = 4
$T228183 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eFeatureNum$ = 12					; size = 4
?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z PROC ; CvDllGameContext::GetFeatureInfo, COMDAT

; 427  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 428  : 	CvFeatureInfo* pkInfo = GC.getFeatureInfo(eFeatureNum);

	mov	eax, DWORD PTR _eFeatureNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 429  : 	return (NULL != pkInfo)? new CvDllFeatureInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetFeature
	push	12					; 0000000cH
	call	??2CvDllFeatureInfo@@SAPAXI@Z		; CvDllFeatureInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228184[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228184[ebp], 0
	je	SHORT $LN3@GetFeature
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228184[ebp]
	call	??0CvDllFeatureInfo@@QAE@PAVCvFeatureInfo@@@Z ; CvDllFeatureInfo::CvDllFeatureInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetFeature
$LN3@GetFeature:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetFeature:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228183[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228183[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetFeature
$LN5@GetFeature:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetFeature:
	mov	eax, DWORD PTR tv74[ebp]

; 430  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z$0:
	mov	eax, DWORD PTR $T228184[ebp]
	push	eax
	call	??3CvDllFeatureInfo@@SAXPAX@Z		; CvDllFeatureInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFeatureInfo@CvDllGameContext@@UAGPAVICvFeatureInfo1@@W4FeatureTypes@@@Z ENDP ; CvDllGameContext::GetFeatureInfo
EXTRN	??3CvDllGameOptionInfo@@SAXPAX@Z:PROC		; CvDllGameOptionInfo::operator delete
EXTRN	??0CvDllGameOptionInfo@@QAE@PAVCvGameOptionInfo@@@Z:PROC ; CvDllGameOptionInfo::CvDllGameOptionInfo
EXTRN	??2CvDllGameOptionInfo@@SAPAXI@Z:PROC		; CvDllGameOptionInfo::operator new
EXTRN	?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z:PROC ; CvGlobals::getGameOptionInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z$0
__ehfuncinfo$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228199 = -24						; size = 4
$T228198 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eGameOptionNum$ = 12					; size = 4
?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z PROC ; CvDllGameContext::GetGameOptionInfo, COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 434  : 	CvGameOptionInfo* pkInfo = GC.getGameOptionInfo(eGameOptionNum);

	mov	eax, DWORD PTR _eGameOptionNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getGameOptionInfo@CvGlobals@@QAEPAVCvGameOptionInfo@@W4GameOptionTypes@@@Z ; CvGlobals::getGameOptionInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 435  : 	return (NULL != pkInfo)? new CvDllGameOptionInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetGameOpt
	push	12					; 0000000cH
	call	??2CvDllGameOptionInfo@@SAPAXI@Z	; CvDllGameOptionInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228199[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228199[ebp], 0
	je	SHORT $LN3@GetGameOpt
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228199[ebp]
	call	??0CvDllGameOptionInfo@@QAE@PAVCvGameOptionInfo@@@Z ; CvDllGameOptionInfo::CvDllGameOptionInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetGameOpt
$LN3@GetGameOpt:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetGameOpt:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228198[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228198[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetGameOpt
$LN5@GetGameOpt:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetGameOpt:
	mov	eax, DWORD PTR tv74[ebp]

; 436  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z$0:
	mov	eax, DWORD PTR $T228199[ebp]
	push	eax
	call	??3CvDllGameOptionInfo@@SAXPAX@Z	; CvDllGameOptionInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGameOptionInfo@CvDllGameContext@@UAGPAVICvGameOptionInfo1@@W4GameOptionTypes@@@Z ENDP ; CvDllGameContext::GetGameOptionInfo
EXTRN	??3CvDllGameSpeedInfo@@SAXPAX@Z:PROC		; CvDllGameSpeedInfo::operator delete
EXTRN	??0CvDllGameSpeedInfo@@QAE@PAVCvGameSpeedInfo@@@Z:PROC ; CvDllGameSpeedInfo::CvDllGameSpeedInfo
EXTRN	??2CvDllGameSpeedInfo@@SAPAXI@Z:PROC		; CvDllGameSpeedInfo::operator new
EXTRN	?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z:PROC ; CvGlobals::getGameSpeedInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z$0
__ehfuncinfo$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228214 = -24						; size = 4
$T228213 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eGameSpeedNum$ = 12					; size = 4
?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z PROC ; CvDllGameContext::GetGameSpeedInfo, COMDAT

; 439  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 440  : 	CvGameSpeedInfo* pkInfo = GC.getGameSpeedInfo(eGameSpeedNum);

	mov	eax, DWORD PTR _eGameSpeedNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z ; CvGlobals::getGameSpeedInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 441  : 	return (NULL != pkInfo)? new CvDllGameSpeedInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetGameSpe
	push	12					; 0000000cH
	call	??2CvDllGameSpeedInfo@@SAPAXI@Z		; CvDllGameSpeedInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228214[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228214[ebp], 0
	je	SHORT $LN3@GetGameSpe
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228214[ebp]
	call	??0CvDllGameSpeedInfo@@QAE@PAVCvGameSpeedInfo@@@Z ; CvDllGameSpeedInfo::CvDllGameSpeedInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetGameSpe
$LN3@GetGameSpe:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetGameSpe:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228213[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228213[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetGameSpe
$LN5@GetGameSpe:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetGameSpe:
	mov	eax, DWORD PTR tv74[ebp]

; 442  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z$0:
	mov	eax, DWORD PTR $T228214[ebp]
	push	eax
	call	??3CvDllGameSpeedInfo@@SAXPAX@Z		; CvDllGameSpeedInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetGameSpeedInfo@CvDllGameContext@@UAGPAVICvGameSpeedInfo1@@W4GameSpeedTypes@@@Z ENDP ; CvDllGameContext::GetGameSpeedInfo
EXTRN	??3CvDllHandicapInfo@@SAXPAX@Z:PROC		; CvDllHandicapInfo::operator delete
EXTRN	??0CvDllHandicapInfo@@QAE@PAVCvHandicapInfo@@@Z:PROC ; CvDllHandicapInfo::CvDllHandicapInfo
EXTRN	??2CvDllHandicapInfo@@SAPAXI@Z:PROC		; CvDllHandicapInfo::operator new
EXTRN	?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z:PROC ; CvGlobals::getHandicapInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z$0
__ehfuncinfo$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228229 = -24						; size = 4
$T228228 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eHandicapNum$ = 12					; size = 4
?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z PROC ; CvDllGameContext::GetHandicapInfo, COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 446  : 	CvHandicapInfo* pkInfo = GC.getHandicapInfo(eHandicapNum);

	mov	eax, DWORD PTR _eHandicapNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z ; CvGlobals::getHandicapInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 447  : 	return (NULL != pkInfo)? new CvDllHandicapInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetHandica
	push	12					; 0000000cH
	call	??2CvDllHandicapInfo@@SAPAXI@Z		; CvDllHandicapInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228229[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228229[ebp], 0
	je	SHORT $LN3@GetHandica
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228229[ebp]
	call	??0CvDllHandicapInfo@@QAE@PAVCvHandicapInfo@@@Z ; CvDllHandicapInfo::CvDllHandicapInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetHandica
$LN3@GetHandica:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetHandica:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228228[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228228[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetHandica
$LN5@GetHandica:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetHandica:
	mov	eax, DWORD PTR tv74[ebp]

; 448  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z$0:
	mov	eax, DWORD PTR $T228229[ebp]
	push	eax
	call	??3CvDllHandicapInfo@@SAXPAX@Z		; CvDllHandicapInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetHandicapInfo@CvDllGameContext@@UAGPAVICvHandicapInfo1@@W4HandicapTypes@@@Z ENDP ; CvDllGameContext::GetHandicapInfo
EXTRN	??3CvDllInterfaceModeInfo@@SAXPAX@Z:PROC	; CvDllInterfaceModeInfo::operator delete
EXTRN	??0CvDllInterfaceModeInfo@@QAE@PAVCvInterfaceModeInfo@@@Z:PROC ; CvDllInterfaceModeInfo::CvDllInterfaceModeInfo
EXTRN	??2CvDllInterfaceModeInfo@@SAPAXI@Z:PROC	; CvDllInterfaceModeInfo::operator new
EXTRN	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z:PROC ; CvGlobals::getInterfaceModeInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z$0
__ehfuncinfo$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228244 = -24						; size = 4
$T228243 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_e$ = 12						; size = 4
?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z PROC ; CvDllGameContext::GetInterfaceModeInfo, COMDAT

; 451  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 452  : 	CvInterfaceModeInfo* pkInfo = GC.getInterfaceModeInfo(e);

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z ; CvGlobals::getInterfaceModeInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 453  : 	return (NULL != pkInfo)? new CvDllInterfaceModeInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetInterfa
	push	12					; 0000000cH
	call	??2CvDllInterfaceModeInfo@@SAPAXI@Z	; CvDllInterfaceModeInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228244[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228244[ebp], 0
	je	SHORT $LN3@GetInterfa
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228244[ebp]
	call	??0CvDllInterfaceModeInfo@@QAE@PAVCvInterfaceModeInfo@@@Z ; CvDllInterfaceModeInfo::CvDllInterfaceModeInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetInterfa
$LN3@GetInterfa:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetInterfa:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228243[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228243[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetInterfa
$LN5@GetInterfa:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetInterfa:
	mov	eax, DWORD PTR tv74[ebp]

; 454  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z$0:
	mov	eax, DWORD PTR $T228244[ebp]
	push	eax
	call	??3CvDllInterfaceModeInfo@@SAXPAX@Z	; CvDllInterfaceModeInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetInterfaceModeInfo@CvDllGameContext@@UAGPAVICvInterfaceModeInfo1@@W4InterfaceModeTypes@@@Z ENDP ; CvDllGameContext::GetInterfaceModeInfo
EXTRN	??3CvDllImprovementInfo@@SAXPAX@Z:PROC		; CvDllImprovementInfo::operator delete
EXTRN	??0CvDllImprovementInfo@@QAE@PAVCvImprovementEntry@@@Z:PROC ; CvDllImprovementInfo::CvDllImprovementInfo
EXTRN	??2CvDllImprovementInfo@@SAPAXI@Z:PROC		; CvDllImprovementInfo::operator new
EXTRN	?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z:PROC ; CvGlobals::getImprovementInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z$0
__ehfuncinfo$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228259 = -24						; size = 4
$T228258 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eImprovement$ = 12					; size = 4
?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z PROC ; CvDllGameContext::GetImprovementInfo, COMDAT

; 457  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 458  : 	CvImprovementEntry* pkEntry = GC.getImprovementInfo(eImprovement);

	mov	eax, DWORD PTR _eImprovement$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getImprovementInfo@CvGlobals@@QAEPAVCvImprovementEntry@@W4ImprovementTypes@@@Z ; CvGlobals::getImprovementInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 459  : 	return (NULL != pkEntry)? new CvDllImprovementInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetImprove
	push	12					; 0000000cH
	call	??2CvDllImprovementInfo@@SAPAXI@Z	; CvDllImprovementInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228259[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228259[ebp], 0
	je	SHORT $LN3@GetImprove
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228259[ebp]
	call	??0CvDllImprovementInfo@@QAE@PAVCvImprovementEntry@@@Z ; CvDllImprovementInfo::CvDllImprovementInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetImprove
$LN3@GetImprove:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetImprove:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228258[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228258[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetImprove
$LN5@GetImprove:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetImprove:
	mov	eax, DWORD PTR tv74[ebp]

; 460  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z$0:
	mov	eax, DWORD PTR $T228259[ebp]
	push	eax
	call	??3CvDllImprovementInfo@@SAXPAX@Z	; CvDllImprovementInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetImprovementInfo@CvDllGameContext@@UAGPAVICvImprovementInfo1@@W4ImprovementTypes@@@Z ENDP ; CvDllGameContext::GetImprovementInfo
EXTRN	??3CvDllLeaderHeadInfo@@SAXPAX@Z:PROC		; CvDllLeaderHeadInfo::operator delete
EXTRN	??0CvDllLeaderHeadInfo@@QAE@PAVCvLeaderHeadInfo@@@Z:PROC ; CvDllLeaderHeadInfo::CvDllLeaderHeadInfo
EXTRN	??2CvDllLeaderHeadInfo@@SAPAXI@Z:PROC		; CvDllLeaderHeadInfo::operator new
EXTRN	?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z:PROC ; CvGlobals::getLeaderHeadInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z$0
__ehfuncinfo$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228274 = -24						; size = 4
$T228273 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eLeaderHeadNum$ = 12					; size = 4
?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z PROC ; CvDllGameContext::GetLeaderHeadInfo, COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 464  : 	CvLeaderHeadInfo* pkInfo = GC.getLeaderHeadInfo(eLeaderHeadNum);

	mov	eax, DWORD PTR _eLeaderHeadNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLeaderHeadInfo@CvGlobals@@QAEPAVCvLeaderHeadInfo@@W4LeaderHeadTypes@@@Z ; CvGlobals::getLeaderHeadInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 465  : 	return (NULL != pkInfo)? new CvDllLeaderHeadInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetLeaderH
	push	12					; 0000000cH
	call	??2CvDllLeaderHeadInfo@@SAPAXI@Z	; CvDllLeaderHeadInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228274[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228274[ebp], 0
	je	SHORT $LN3@GetLeaderH
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228274[ebp]
	call	??0CvDllLeaderHeadInfo@@QAE@PAVCvLeaderHeadInfo@@@Z ; CvDllLeaderHeadInfo::CvDllLeaderHeadInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetLeaderH
$LN3@GetLeaderH:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetLeaderH:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228273[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228273[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetLeaderH
$LN5@GetLeaderH:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetLeaderH:
	mov	eax, DWORD PTR tv74[ebp]

; 466  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z$0:
	mov	eax, DWORD PTR $T228274[ebp]
	push	eax
	call	??3CvDllLeaderHeadInfo@@SAXPAX@Z	; CvDllLeaderHeadInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLeaderHeadInfo@CvDllGameContext@@UAGPAVICvLeaderHeadInfo1@@W4LeaderHeadTypes@@@Z ENDP ; CvDllGameContext::GetLeaderHeadInfo
EXTRN	??3CvDllMinorCivInfo@@SAXPAX@Z:PROC		; CvDllMinorCivInfo::operator delete
EXTRN	??0CvDllMinorCivInfo@@QAE@PAVCvMinorCivInfo@@@Z:PROC ; CvDllMinorCivInfo::CvDllMinorCivInfo
EXTRN	??2CvDllMinorCivInfo@@SAPAXI@Z:PROC		; CvDllMinorCivInfo::operator new
EXTRN	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z:PROC ; CvGlobals::getMinorCivInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z$0
__ehfuncinfo$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228289 = -24						; size = 4
$T228288 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eMinorCiv$ = 12					; size = 4
?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z PROC ; CvDllGameContext::GetMinorCivInfo, COMDAT

; 469  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 470  : 	CvMinorCivInfo* pkInfo = GC.getMinorCivInfo(eMinorCiv);

	mov	eax, DWORD PTR _eMinorCiv$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ; CvGlobals::getMinorCivInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 471  : 	return (NULL != pkInfo)? new CvDllMinorCivInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetMinorCi
	push	12					; 0000000cH
	call	??2CvDllMinorCivInfo@@SAPAXI@Z		; CvDllMinorCivInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228289[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228289[ebp], 0
	je	SHORT $LN3@GetMinorCi
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228289[ebp]
	call	??0CvDllMinorCivInfo@@QAE@PAVCvMinorCivInfo@@@Z ; CvDllMinorCivInfo::CvDllMinorCivInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetMinorCi
$LN3@GetMinorCi:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetMinorCi:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228288[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228288[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetMinorCi
$LN5@GetMinorCi:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetMinorCi:
	mov	eax, DWORD PTR tv74[ebp]

; 472  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z$0:
	mov	eax, DWORD PTR $T228289[ebp]
	push	eax
	call	??3CvDllMinorCivInfo@@SAXPAX@Z		; CvDllMinorCivInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMinorCivInfo@CvDllGameContext@@UAGPAVICvMinorCivInfo1@@W4MinorCivTypes@@@Z ENDP ; CvDllGameContext::GetMinorCivInfo
EXTRN	??3CvDllMissionInfo@@SAXPAX@Z:PROC		; CvDllMissionInfo::operator delete
EXTRN	??0CvDllMissionInfo@@QAE@PAVCvMissionInfo@@@Z:PROC ; CvDllMissionInfo::CvDllMissionInfo
EXTRN	??2CvDllMissionInfo@@SAPAXI@Z:PROC		; CvDllMissionInfo::operator new
EXTRN	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z:PROC ; CvGlobals::getMissionInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z$0
__ehfuncinfo$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228304 = -24						; size = 4
$T228303 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eMission$ = 12						; size = 4
?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z PROC ; CvDllGameContext::GetMissionInfo, COMDAT

; 475  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 476  : 	CvMissionInfo* pkInfo = GC.getMissionInfo(eMission);

	mov	eax, DWORD PTR _eMission$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ; CvGlobals::getMissionInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 477  : 	return (NULL != pkInfo)? new CvDllMissionInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetMission
	push	12					; 0000000cH
	call	??2CvDllMissionInfo@@SAPAXI@Z		; CvDllMissionInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228304[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228304[ebp], 0
	je	SHORT $LN3@GetMission
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228304[ebp]
	call	??0CvDllMissionInfo@@QAE@PAVCvMissionInfo@@@Z ; CvDllMissionInfo::CvDllMissionInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetMission
$LN3@GetMission:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetMission:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228303[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228303[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetMission
$LN5@GetMission:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetMission:
	mov	eax, DWORD PTR tv74[ebp]

; 478  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z$0:
	mov	eax, DWORD PTR $T228304[ebp]
	push	eax
	call	??3CvDllMissionInfo@@SAXPAX@Z		; CvDllMissionInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMissionInfo@CvDllGameContext@@UAGPAVICvMissionInfo1@@W4MissionTypes@@@Z ENDP ; CvDllGameContext::GetMissionInfo
EXTRN	??3CvDllPlayerColorInfo@@SAXPAX@Z:PROC		; CvDllPlayerColorInfo::operator delete
EXTRN	??0CvDllPlayerColorInfo@@QAE@PAVCvPlayerColorInfo@@@Z:PROC ; CvDllPlayerColorInfo::CvDllPlayerColorInfo
EXTRN	??2CvDllPlayerColorInfo@@SAPAXI@Z:PROC		; CvDllPlayerColorInfo::operator new
EXTRN	?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z:PROC ; CvGlobals::GetPlayerColorInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z$0
__ehfuncinfo$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228319 = -24						; size = 4
$T228318 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_e$ = 12						; size = 4
?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z PROC ; CvDllGameContext::GetPlayerColorInfo, COMDAT

; 481  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 482  : 	CvPlayerColorInfo* pkInfo = GC.GetPlayerColorInfo(e);

	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetPlayerColorInfo@CvGlobals@@QAEPAVCvPlayerColorInfo@@W4PlayerColorTypes@@@Z ; CvGlobals::GetPlayerColorInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 483  : 	return (NULL != pkInfo)? new CvDllPlayerColorInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetPlayerC
	push	12					; 0000000cH
	call	??2CvDllPlayerColorInfo@@SAPAXI@Z	; CvDllPlayerColorInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228319[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228319[ebp], 0
	je	SHORT $LN3@GetPlayerC
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228319[ebp]
	call	??0CvDllPlayerColorInfo@@QAE@PAVCvPlayerColorInfo@@@Z ; CvDllPlayerColorInfo::CvDllPlayerColorInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetPlayerC
$LN3@GetPlayerC:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetPlayerC:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228318[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228318[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetPlayerC
$LN5@GetPlayerC:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetPlayerC:
	mov	eax, DWORD PTR tv74[ebp]

; 484  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z$0:
	mov	eax, DWORD PTR $T228319[ebp]
	push	eax
	call	??3CvDllPlayerColorInfo@@SAXPAX@Z	; CvDllPlayerColorInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlayerColorInfo@CvDllGameContext@@UAGPAVICvPlayerColorInfo1@@W4PlayerColorTypes@@@Z ENDP ; CvDllGameContext::GetPlayerColorInfo
EXTRN	??3CvDllPlayerOptionInfo@@SAXPAX@Z:PROC		; CvDllPlayerOptionInfo::operator delete
EXTRN	??0CvDllPlayerOptionInfo@@QAE@PAVCvPlayerOptionInfo@@@Z:PROC ; CvDllPlayerOptionInfo::CvDllPlayerOptionInfo
EXTRN	??2CvDllPlayerOptionInfo@@SAPAXI@Z:PROC		; CvDllPlayerOptionInfo::operator new
EXTRN	?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z:PROC ; CvGlobals::getPlayerOptionInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z$0
__ehfuncinfo$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228334 = -24						; size = 4
$T228333 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ePlayerOptionNum$ = 12					; size = 4
?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z PROC ; CvDllGameContext::GetPlayerOptionInfo, COMDAT

; 487  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 488  : 	CvPlayerOptionInfo* pkInfo = GC.getPlayerOptionInfo(ePlayerOptionNum);

	mov	eax, DWORD PTR _ePlayerOptionNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerOptionInfo@CvGlobals@@QAEPAVCvPlayerOptionInfo@@W4PlayerOptionTypes@@@Z ; CvGlobals::getPlayerOptionInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 489  : 	return (NULL != pkInfo)? new CvDllPlayerOptionInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetPlayerO
	push	12					; 0000000cH
	call	??2CvDllPlayerOptionInfo@@SAPAXI@Z	; CvDllPlayerOptionInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228334[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228334[ebp], 0
	je	SHORT $LN3@GetPlayerO
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228334[ebp]
	call	??0CvDllPlayerOptionInfo@@QAE@PAVCvPlayerOptionInfo@@@Z ; CvDllPlayerOptionInfo::CvDllPlayerOptionInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetPlayerO
$LN3@GetPlayerO:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetPlayerO:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228333[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228333[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetPlayerO
$LN5@GetPlayerO:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetPlayerO:
	mov	eax, DWORD PTR tv74[ebp]

; 490  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z$0:
	mov	eax, DWORD PTR $T228334[ebp]
	push	eax
	call	??3CvDllPlayerOptionInfo@@SAXPAX@Z	; CvDllPlayerOptionInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlayerOptionInfo@CvDllGameContext@@UAGPAVICvPlayerOptionInfo1@@W4PlayerOptionTypes@@@Z ENDP ; CvDllGameContext::GetPlayerOptionInfo
EXTRN	??3CvDllPolicyInfo@@SAXPAX@Z:PROC		; CvDllPolicyInfo::operator delete
EXTRN	??0CvDllPolicyInfo@@QAE@PAVCvPolicyEntry@@@Z:PROC ; CvDllPolicyInfo::CvDllPolicyInfo
EXTRN	??2CvDllPolicyInfo@@SAPAXI@Z:PROC		; CvDllPolicyInfo::operator new
EXTRN	?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z:PROC ; CvGlobals::getPolicyInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z$0
__ehfuncinfo$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228349 = -24						; size = 4
$T228348 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ePolicy$ = 12						; size = 4
?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z PROC ; CvDllGameContext::GetPolicyInfo, COMDAT

; 493  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 494  : 	CvPolicyEntry* pkInfo = GC.getPolicyInfo(ePolicy);

	mov	eax, DWORD PTR _ePolicy$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPolicyInfo@CvGlobals@@QAEPAVCvPolicyEntry@@W4PolicyTypes@@@Z ; CvGlobals::getPolicyInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 495  : 	return (NULL != pkInfo)? new CvDllPolicyInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetPolicyI
	push	12					; 0000000cH
	call	??2CvDllPolicyInfo@@SAPAXI@Z		; CvDllPolicyInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228349[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228349[ebp], 0
	je	SHORT $LN3@GetPolicyI
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228349[ebp]
	call	??0CvDllPolicyInfo@@QAE@PAVCvPolicyEntry@@@Z ; CvDllPolicyInfo::CvDllPolicyInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetPolicyI
$LN3@GetPolicyI:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetPolicyI:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228348[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228348[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetPolicyI
$LN5@GetPolicyI:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetPolicyI:
	mov	eax, DWORD PTR tv74[ebp]

; 496  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z$0:
	mov	eax, DWORD PTR $T228349[ebp]
	push	eax
	call	??3CvDllPolicyInfo@@SAXPAX@Z		; CvDllPolicyInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPolicyInfo@CvDllGameContext@@UAGPAVICvPolicyInfo1@@W4PolicyTypes@@@Z ENDP ; CvDllGameContext::GetPolicyInfo
EXTRN	??3CvDllPromotionInfo@@SAXPAX@Z:PROC		; CvDllPromotionInfo::operator delete
EXTRN	??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z:PROC ; CvDllPromotionInfo::CvDllPromotionInfo
EXTRN	??2CvDllPromotionInfo@@SAPAXI@Z:PROC		; CvDllPromotionInfo::operator new
EXTRN	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z:PROC ; CvGlobals::getPromotionInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z$0
__ehfuncinfo$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228364 = -24						; size = 4
$T228363 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ePromotion$ = 12					; size = 4
?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z PROC ; CvDllGameContext::GetPromotionInfo, COMDAT

; 499  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 500  : 	CvPromotionEntry* pkInfo = GC.getPromotionInfo(ePromotion);

	mov	eax, DWORD PTR _ePromotion$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 501  : 	return (NULL != pkInfo)? new CvDllPromotionInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetPromoti
	push	12					; 0000000cH
	call	??2CvDllPromotionInfo@@SAPAXI@Z		; CvDllPromotionInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228364[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228364[ebp], 0
	je	SHORT $LN3@GetPromoti
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228364[ebp]
	call	??0CvDllPromotionInfo@@QAE@PAVCvPromotionEntry@@@Z ; CvDllPromotionInfo::CvDllPromotionInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetPromoti
$LN3@GetPromoti:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetPromoti:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228363[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228363[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetPromoti
$LN5@GetPromoti:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetPromoti:
	mov	eax, DWORD PTR tv74[ebp]

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z$0:
	mov	eax, DWORD PTR $T228364[ebp]
	push	eax
	call	??3CvDllPromotionInfo@@SAXPAX@Z		; CvDllPromotionInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPromotionInfo@CvDllGameContext@@UAGPAVICvPromotionInfo1@@W4PromotionTypes@@@Z ENDP ; CvDllGameContext::GetPromotionInfo
EXTRN	??3CvDllResourceInfo@@SAXPAX@Z:PROC		; CvDllResourceInfo::operator delete
EXTRN	??0CvDllResourceInfo@@QAE@PAVCvResourceInfo@@@Z:PROC ; CvDllResourceInfo::CvDllResourceInfo
EXTRN	??2CvDllResourceInfo@@SAPAXI@Z:PROC		; CvDllResourceInfo::operator new
EXTRN	?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z:PROC ; CvGlobals::getResourceInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z$0
__ehfuncinfo$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228379 = -24						; size = 4
$T228378 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eResourceNum$ = 12					; size = 4
?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z PROC ; CvDllGameContext::GetResourceInfo, COMDAT

; 505  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 506  : 	CvResourceInfo* pkInfo = GC.getResourceInfo(eResourceNum);

	mov	eax, DWORD PTR _eResourceNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getResourceInfo@CvGlobals@@QAEPAVCvResourceInfo@@W4ResourceTypes@@@Z ; CvGlobals::getResourceInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 507  : 	return (NULL != pkInfo)? new CvDllResourceInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetResourc
	push	12					; 0000000cH
	call	??2CvDllResourceInfo@@SAPAXI@Z		; CvDllResourceInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228379[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228379[ebp], 0
	je	SHORT $LN3@GetResourc
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228379[ebp]
	call	??0CvDllResourceInfo@@QAE@PAVCvResourceInfo@@@Z ; CvDllResourceInfo::CvDllResourceInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetResourc
$LN3@GetResourc:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetResourc:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228378[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228378[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetResourc
$LN5@GetResourc:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetResourc:
	mov	eax, DWORD PTR tv74[ebp]

; 508  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z$0:
	mov	eax, DWORD PTR $T228379[ebp]
	push	eax
	call	??3CvDllResourceInfo@@SAXPAX@Z		; CvDllResourceInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetResourceInfo@CvDllGameContext@@UAGPAVICvResourceInfo1@@W4ResourceTypes@@@Z ENDP ; CvDllGameContext::GetResourceInfo
EXTRN	??3CvDllTechInfo@@SAXPAX@Z:PROC			; CvDllTechInfo::operator delete
EXTRN	??0CvDllTechInfo@@QAE@PAVCvTechEntry@@@Z:PROC	; CvDllTechInfo::CvDllTechInfo
EXTRN	??2CvDllTechInfo@@SAPAXI@Z:PROC			; CvDllTechInfo::operator new
EXTRN	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z:PROC ; CvGlobals::getTechInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z$0
__ehfuncinfo$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228394 = -24						; size = 4
$T228393 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eTech$ = 12						; size = 4
?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z PROC ; CvDllGameContext::GetTechInfo, COMDAT

; 511  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 512  : 	CvTechEntry* pkEntry = GC.getTechInfo(eTech);

	mov	eax, DWORD PTR _eTech$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 513  : 	return (NULL != pkEntry)? new CvDllTechInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetTechInf
	push	12					; 0000000cH
	call	??2CvDllTechInfo@@SAPAXI@Z		; CvDllTechInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228394[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228394[ebp], 0
	je	SHORT $LN3@GetTechInf
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228394[ebp]
	call	??0CvDllTechInfo@@QAE@PAVCvTechEntry@@@Z ; CvDllTechInfo::CvDllTechInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetTechInf
$LN3@GetTechInf:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetTechInf:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228393[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228393[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetTechInf
$LN5@GetTechInf:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetTechInf:
	mov	eax, DWORD PTR tv74[ebp]

; 514  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z$0:
	mov	eax, DWORD PTR $T228394[ebp]
	push	eax
	call	??3CvDllTechInfo@@SAXPAX@Z		; CvDllTechInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTechInfo@CvDllGameContext@@UAGPAVICvTechInfo1@@W4TechTypes@@@Z ENDP ; CvDllGameContext::GetTechInfo
EXTRN	??3CvDllTerrainInfo@@SAXPAX@Z:PROC		; CvDllTerrainInfo::operator delete
EXTRN	??0CvDllTerrainInfo@@QAE@PAVCvTerrainInfo@@@Z:PROC ; CvDllTerrainInfo::CvDllTerrainInfo
EXTRN	??2CvDllTerrainInfo@@SAPAXI@Z:PROC		; CvDllTerrainInfo::operator new
EXTRN	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z:PROC ; CvGlobals::getTerrainInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z$0
__ehfuncinfo$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228409 = -24						; size = 4
$T228408 = -20						; size = 4
_pkInfo$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eTerrainNum$ = 12					; size = 4
?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z PROC ; CvDllGameContext::GetTerrainInfo, COMDAT

; 517  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 518  : 	CvTerrainInfo* pkInfo = GC.getTerrainInfo(eTerrainNum);

	mov	eax, DWORD PTR _eTerrainNum$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z ; CvGlobals::getTerrainInfo
	mov	DWORD PTR _pkInfo$[ebp], eax

; 519  : 	return (NULL != pkInfo)? new CvDllTerrainInfo(pkInfo) : NULL;

	cmp	DWORD PTR _pkInfo$[ebp], 0
	je	SHORT $LN5@GetTerrain
	push	12					; 0000000cH
	call	??2CvDllTerrainInfo@@SAPAXI@Z		; CvDllTerrainInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228409[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228409[ebp], 0
	je	SHORT $LN3@GetTerrain
	mov	ecx, DWORD PTR _pkInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228409[ebp]
	call	??0CvDllTerrainInfo@@QAE@PAVCvTerrainInfo@@@Z ; CvDllTerrainInfo::CvDllTerrainInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetTerrain
$LN3@GetTerrain:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetTerrain:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228408[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228408[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetTerrain
$LN5@GetTerrain:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetTerrain:
	mov	eax, DWORD PTR tv74[ebp]

; 520  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z$0:
	mov	eax, DWORD PTR $T228409[ebp]
	push	eax
	call	??3CvDllTerrainInfo@@SAXPAX@Z		; CvDllTerrainInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTerrainInfo@CvDllGameContext@@UAGPAVICvTerrainInfo1@@W4TerrainTypes@@@Z ENDP ; CvDllGameContext::GetTerrainInfo
EXTRN	??3CvDllUnitInfo@@SAXPAX@Z:PROC			; CvDllUnitInfo::operator delete
EXTRN	??0CvDllUnitInfo@@QAE@PAVCvUnitEntry@@@Z:PROC	; CvDllUnitInfo::CvDllUnitInfo
EXTRN	??2CvDllUnitInfo@@SAPAXI@Z:PROC			; CvDllUnitInfo::operator new
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z$0
__ehfuncinfo$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228424 = -24						; size = 4
$T228423 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eUnit$ = 12						; size = 4
?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z PROC ; CvDllGameContext::GetUnitInfo, COMDAT

; 523  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 524  : 	CvUnitEntry* pkEntry = GC.getUnitInfo(eUnit);

	mov	eax, DWORD PTR _eUnit$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 525  : 	return (NULL != pkEntry)? new CvDllUnitInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetUnitInf
	push	12					; 0000000cH
	call	??2CvDllUnitInfo@@SAPAXI@Z		; CvDllUnitInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228424[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228424[ebp], 0
	je	SHORT $LN3@GetUnitInf
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228424[ebp]
	call	??0CvDllUnitInfo@@QAE@PAVCvUnitEntry@@@Z ; CvDllUnitInfo::CvDllUnitInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetUnitInf
$LN3@GetUnitInf:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetUnitInf:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228423[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228423[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetUnitInf
$LN5@GetUnitInf:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetUnitInf:
	mov	eax, DWORD PTR tv74[ebp]

; 526  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z$0:
	mov	eax, DWORD PTR $T228424[ebp]
	push	eax
	call	??3CvDllUnitInfo@@SAXPAX@Z		; CvDllUnitInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnitInfo@CvDllGameContext@@UAGPAVICvUnitInfo1@@W4UnitTypes@@@Z ENDP ; CvDllGameContext::GetUnitInfo
EXTRN	??3CvDllUnitCombatClassInfo@@SAXPAX@Z:PROC	; CvDllUnitCombatClassInfo::operator delete
EXTRN	??0CvDllUnitCombatClassInfo@@QAE@PAVCvBaseInfo@@@Z:PROC ; CvDllUnitCombatClassInfo::CvDllUnitCombatClassInfo
EXTRN	??2CvDllUnitCombatClassInfo@@SAPAXI@Z:PROC	; CvDllUnitCombatClassInfo::operator new
EXTRN	?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z:PROC ; CvGlobals::getUnitCombatClassInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z$0
__ehfuncinfo$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228439 = -24						; size = 4
$T228438 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eUnitCombat$ = 12					; size = 4
?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z PROC ; CvDllGameContext::GetUnitCombatClassInfo, COMDAT

; 529  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 530  : 	CvBaseInfo* pkEntry = GC.getUnitCombatClassInfo(eUnitCombat);

	mov	eax, DWORD PTR _eUnitCombat$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitCombatClassInfo@CvGlobals@@QAEPAVCvBaseInfo@@W4UnitCombatTypes@@@Z ; CvGlobals::getUnitCombatClassInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 531  : 	return (NULL != pkEntry)? new CvDllUnitCombatClassInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetUnitCom
	push	12					; 0000000cH
	call	??2CvDllUnitCombatClassInfo@@SAPAXI@Z	; CvDllUnitCombatClassInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228439[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228439[ebp], 0
	je	SHORT $LN3@GetUnitCom
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228439[ebp]
	call	??0CvDllUnitCombatClassInfo@@QAE@PAVCvBaseInfo@@@Z ; CvDllUnitCombatClassInfo::CvDllUnitCombatClassInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetUnitCom
$LN3@GetUnitCom:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetUnitCom:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228438[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228438[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetUnitCom
$LN5@GetUnitCom:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetUnitCom:
	mov	eax, DWORD PTR tv74[ebp]

; 532  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z$0:
	mov	eax, DWORD PTR $T228439[ebp]
	push	eax
	call	??3CvDllUnitCombatClassInfo@@SAXPAX@Z	; CvDllUnitCombatClassInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnitCombatClassInfo@CvDllGameContext@@UAGPAVICvUnitCombatClassInfo1@@W4UnitCombatTypes@@@Z ENDP ; CvDllGameContext::GetUnitCombatClassInfo
EXTRN	??3CvDllVictoryInfo@@SAXPAX@Z:PROC		; CvDllVictoryInfo::operator delete
EXTRN	??0CvDllVictoryInfo@@QAE@PAVCvVictoryInfo@@@Z:PROC ; CvDllVictoryInfo::CvDllVictoryInfo
EXTRN	??2CvDllVictoryInfo@@SAPAXI@Z:PROC		; CvDllVictoryInfo::operator new
EXTRN	?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z:PROC ; CvGlobals::getVictoryInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z$0
__ehfuncinfo$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z
_TEXT	SEGMENT
tv74 = -32						; size = 4
tv79 = -28						; size = 4
$T228454 = -24						; size = 4
$T228453 = -20						; size = 4
_pkEntry$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_eVictoryType$ = 12					; size = 4
?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z PROC ; CvDllGameContext::GetVictoryInfo, COMDAT

; 535  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 536  : 	CvVictoryInfo* pkEntry = GC.getVictoryInfo(eVictoryType);

	mov	eax, DWORD PTR _eVictoryType$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getVictoryInfo@CvGlobals@@QAEPAVCvVictoryInfo@@W4VictoryTypes@@@Z ; CvGlobals::getVictoryInfo
	mov	DWORD PTR _pkEntry$[ebp], eax

; 537  : 	return (NULL != pkEntry)? new CvDllVictoryInfo(pkEntry) : NULL;

	cmp	DWORD PTR _pkEntry$[ebp], 0
	je	SHORT $LN5@GetVictory
	push	12					; 0000000cH
	call	??2CvDllVictoryInfo@@SAPAXI@Z		; CvDllVictoryInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T228454[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T228454[ebp], 0
	je	SHORT $LN3@GetVictory
	mov	ecx, DWORD PTR _pkEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228454[ebp]
	call	??0CvDllVictoryInfo@@QAE@PAVCvVictoryInfo@@@Z ; CvDllVictoryInfo::CvDllVictoryInfo
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@GetVictory
$LN3@GetVictory:
	mov	DWORD PTR tv79[ebp], 0
$LN4@GetVictory:
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T228453[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T228453[ebp]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@GetVictory
$LN5@GetVictory:
	mov	DWORD PTR tv74[ebp], 0
$LN6@GetVictory:
	mov	eax, DWORD PTR tv74[ebp]

; 538  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z$0:
	mov	eax, DWORD PTR $T228454[ebp]
	push	eax
	call	??3CvDllVictoryInfo@@SAXPAX@Z		; CvDllVictoryInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetVictoryInfo@CvDllGameContext@@UAGPAVICvVictoryInfo1@@W4VictoryTypes@@@Z ENDP ; CvDllGameContext::GetVictoryInfo
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	__$ArrayPad$
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp__strncpy_s:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ:PROC
EXTRN	?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z:PROC ; CvGlobals::getDefineSTRING
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z$0
__ehfuncinfo$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z
_TEXT	SEGMENT
$T228469 = -45						; size = 1
_strDefine$222171 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_szBuffer$ = 12						; size = 4
_lenBuffer$ = 16					; size = 4
_szName$ = 20						; size = 4
_bReportErrors$ = 24					; size = 1
?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z PROC ; CvDllGameContext::GetDefineSTRING, COMDAT

; 541  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 542  : 	if(szBuffer != NULL && lenBuffer > 0)

	cmp	DWORD PTR _szBuffer$[ebp], 0
	je	$LN2@GetDefineS
	cmp	DWORD PTR _lenBuffer$[ebp], 0
	jbe	SHORT $LN2@GetDefineS

; 543  : 	{
; 544  : 		CvString strDefine = GC.getDefineSTRING(szName, bReportErrors);

	movzx	eax, BYTE PTR _bReportErrors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strDefine$222171[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDefineSTRING@CvGlobals@@QAE?AVCvString@@PBD_N@Z ; CvGlobals::getDefineSTRING
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 545  : 		if(strDefine.size() < lenBuffer)

	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	cmp	eax, DWORD PTR _lenBuffer$[ebp]
	jae	SHORT $LN1@GetDefineS

; 546  : 		{
; 547  : 			strncpy_s(szBuffer, lenBuffer, strDefine.c_str(), strDefine.size());

	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	call	DWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
	push	eax
	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	eax, DWORD PTR _lenBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__strncpy_s
	add	esp, 16					; 00000010H

; 548  : 			return true;

	mov	BYTE PTR $T228469[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T228469[ebp]
	jmp	SHORT $LN3@GetDefineS
$LN1@GetDefineS:

; 549  : 		}
; 550  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@GetDefineS:

; 551  : 
; 552  : 	return false;

	xor	al, al
$LN3@GetDefineS:

; 553  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z$0:
	lea	ecx, DWORD PTR _strDefine$222171[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDefineSTRING@CvDllGameContext@@UAG_NPADIPBD_N@Z ENDP ; CvDllGameContext::GetDefineSTRING
; Function compile flags: /Odtp
;	COMDAT ?GetMOVE_DENOMINATOR@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228490 = -4						; size = 4
_this$ = 8						; size = 4
?GetMOVE_DENOMINATOR@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetMOVE_DENOMINATOR, COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 557  : 	return GC.getMOVE_DENOMINATOR();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
	mov	DWORD PTR $T228490[ebp], eax
	mov	eax, DWORD PTR $T228490[ebp]

; 558  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMOVE_DENOMINATOR@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetMOVE_DENOMINATOR
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetMAX_CITY_HIT_POINTS@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228496 = -4						; size = 4
_this$ = 8						; size = 4
?GetMAX_CITY_HIT_POINTS@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetMAX_CITY_HIT_POINTS, COMDAT

; 561  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 562  : 	return GC.getMAX_CITY_HIT_POINTS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7372
	mov	DWORD PTR $T228496[ebp], eax
	mov	eax, DWORD PTR $T228496[ebp]

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMAX_CITY_HIT_POINTS@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetMAX_CITY_HIT_POINTS
_TEXT	ENDS
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ?GetCITY_ZOOM_OFFSET@CvDllGameContext@@UBGMXZ
_TEXT	SEGMENT
$T228502 = -4						; size = 4
_this$ = 8						; size = 4
?GetCITY_ZOOM_OFFSET@CvDllGameContext@@UBGMXZ PROC	; CvDllGameContext::GetCITY_ZOOM_OFFSET, COMDAT

; 566  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 567  : 	return GC.getCITY_ZOOM_OFFSET();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8032
	movss	DWORD PTR $T228502[ebp], xmm0
	fld	DWORD PTR $T228502[ebp]

; 568  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCITY_ZOOM_OFFSET@CvDllGameContext@@UBGMXZ ENDP	; CvDllGameContext::GetCITY_ZOOM_OFFSET
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetCITY_ZOOM_LEVEL_1@CvDllGameContext@@UBGMXZ
_TEXT	SEGMENT
$T228509 = -4						; size = 4
_this$ = 8						; size = 4
?GetCITY_ZOOM_LEVEL_1@CvDllGameContext@@UBGMXZ PROC	; CvDllGameContext::GetCITY_ZOOM_LEVEL_1, COMDAT

; 571  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 572  : 	return GC.getCITY_ZOOM_LEVEL_1();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8020
	movss	DWORD PTR $T228509[ebp], xmm0
	fld	DWORD PTR $T228509[ebp]

; 573  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCITY_ZOOM_LEVEL_1@CvDllGameContext@@UBGMXZ ENDP	; CvDllGameContext::GetCITY_ZOOM_LEVEL_1
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetCITY_ZOOM_LEVEL_2@CvDllGameContext@@UBGMXZ
_TEXT	SEGMENT
$T228515 = -4						; size = 4
_this$ = 8						; size = 4
?GetCITY_ZOOM_LEVEL_2@CvDllGameContext@@UBGMXZ PROC	; CvDllGameContext::GetCITY_ZOOM_LEVEL_2, COMDAT

; 576  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 577  : 	return GC.getCITY_ZOOM_LEVEL_2();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8024
	movss	DWORD PTR $T228515[ebp], xmm0
	fld	DWORD PTR $T228515[ebp]

; 578  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCITY_ZOOM_LEVEL_2@CvDllGameContext@@UBGMXZ ENDP	; CvDllGameContext::GetCITY_ZOOM_LEVEL_2
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetCITY_ZOOM_LEVEL_3@CvDllGameContext@@UBGMXZ
_TEXT	SEGMENT
$T228521 = -4						; size = 4
_this$ = 8						; size = 4
?GetCITY_ZOOM_LEVEL_3@CvDllGameContext@@UBGMXZ PROC	; CvDllGameContext::GetCITY_ZOOM_LEVEL_3, COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 582  : 	return GC.getCITY_ZOOM_LEVEL_3();

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8028
	movss	DWORD PTR $T228521[ebp], xmm0
	fld	DWORD PTR $T228521[ebp]

; 583  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetCITY_ZOOM_LEVEL_3@CvDllGameContext@@UBGMXZ ENDP	; CvDllGameContext::GetCITY_ZOOM_LEVEL_3
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetRUINS_IMPROVEMENT@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228527 = -4						; size = 4
_this$ = 8						; size = 4
?GetRUINS_IMPROVEMENT@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetRUINS_IMPROVEMENT, COMDAT

; 586  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 587  : 	return GC.getRUINS_IMPROVEMENT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8400
	mov	DWORD PTR $T228527[ebp], eax
	mov	eax, DWORD PTR $T228527[ebp]

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetRUINS_IMPROVEMENT@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetRUINS_IMPROVEMENT
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSHALLOW_WATER_TERRAIN@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228533 = -4						; size = 4
_this$ = 8						; size = 4
?GetSHALLOW_WATER_TERRAIN@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetSHALLOW_WATER_TERRAIN, COMDAT

; 591  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 592  : 	return GC.getSHALLOW_WATER_TERRAIN();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8396
	mov	DWORD PTR $T228533[ebp], eax
	mov	eax, DWORD PTR $T228533[ebp]

; 593  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSHALLOW_WATER_TERRAIN@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetSHALLOW_WATER_TERRAIN
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetDEFICIT_UNIT_DISBANDING_THRESHOLD@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228539 = -4						; size = 4
_this$ = 8						; size = 4
?GetDEFICIT_UNIT_DISBANDING_THRESHOLD@CvDllGameContext@@UBGHXZ PROC ; CvDllGameContext::GetDEFICIT_UNIT_DISBANDING_THRESHOLD, COMDAT

; 596  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 597  : 	return GC.getDEFICIT_UNIT_DISBANDING_THRESHOLD();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6548
	mov	DWORD PTR $T228539[ebp], eax
	mov	eax, DWORD PTR $T228539[ebp]

; 598  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDEFICIT_UNIT_DISBANDING_THRESHOLD@CvDllGameContext@@UBGHXZ ENDP ; CvDllGameContext::GetDEFICIT_UNIT_DISBANDING_THRESHOLD
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetLAST_UNIT_ART_ERA@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228545 = -4						; size = 4
_this$ = 8						; size = 4
?GetLAST_UNIT_ART_ERA@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetLAST_UNIT_ART_ERA, COMDAT

; 601  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 602  : 	return GC.getLAST_UNIT_ART_ERA();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8492
	mov	DWORD PTR $T228545[ebp], eax
	mov	eax, DWORD PTR $T228545[ebp]

; 603  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLAST_UNIT_ART_ERA@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetLAST_UNIT_ART_ERA
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetLAST_EMBARK_ART_ERA@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228551 = -4						; size = 4
_this$ = 8						; size = 4
?GetLAST_EMBARK_ART_ERA@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetLAST_EMBARK_ART_ERA, COMDAT

; 606  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 607  : 	return GC.getLAST_EMBARK_ART_ERA();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8488
	mov	DWORD PTR $T228551[ebp], eax
	mov	eax, DWORD PTR $T228551[ebp]

; 608  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLAST_EMBARK_ART_ERA@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetLAST_EMBARK_ART_ERA
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetHEAVY_RESOURCE_THRESHOLD@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228557 = -4						; size = 4
_this$ = 8						; size = 4
?GetHEAVY_RESOURCE_THRESHOLD@CvDllGameContext@@UBGHXZ PROC ; CvDllGameContext::GetHEAVY_RESOURCE_THRESHOLD, COMDAT

; 611  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 612  : 	return GC.getHEAVY_RESOURCE_THRESHOLD();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7808
	mov	DWORD PTR $T228557[ebp], eax
	mov	eax, DWORD PTR $T228557[ebp]

; 613  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetHEAVY_RESOURCE_THRESHOLD@CvDllGameContext@@UBGHXZ ENDP ; CvDllGameContext::GetHEAVY_RESOURCE_THRESHOLD
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSTANDARD_HANDICAP@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228563 = -4						; size = 4
_this$ = 8						; size = 4
?GetSTANDARD_HANDICAP@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetSTANDARD_HANDICAP, COMDAT

; 616  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 617  : 	return GC.getSTANDARD_HANDICAP();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8452
	mov	DWORD PTR $T228563[ebp], eax
	mov	eax, DWORD PTR $T228563[ebp]

; 618  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSTANDARD_HANDICAP@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetSTANDARD_HANDICAP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetSTANDARD_GAMESPEED@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228569 = -4						; size = 4
_this$ = 8						; size = 4
?GetSTANDARD_GAMESPEED@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetSTANDARD_GAMESPEED, COMDAT

; 621  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 622  : 	return GC.getSTANDARD_GAMESPEED();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8464
	mov	DWORD PTR $T228569[ebp], eax
	mov	eax, DWORD PTR $T228569[ebp]

; 623  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSTANDARD_GAMESPEED@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetSTANDARD_GAMESPEED
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetLAST_BRIDGE_ART_ERA@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228575 = -4						; size = 4
_this$ = 8						; size = 4
?GetLAST_BRIDGE_ART_ERA@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetLAST_BRIDGE_ART_ERA, COMDAT

; 626  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 627  : 	return GC.getLAST_BRIDGE_ART_ERA();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8496
	mov	DWORD PTR $T228575[ebp], eax
	mov	eax, DWORD PTR $T228575[ebp]

; 628  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLAST_BRIDGE_ART_ERA@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetLAST_BRIDGE_ART_ERA
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetBARBARIAN_CIVILIZATION@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228581 = -4						; size = 4
_this$ = 8						; size = 4
?GetBARBARIAN_CIVILIZATION@CvDllGameContext@@UBGHXZ PROC ; CvDllGameContext::GetBARBARIAN_CIVILIZATION, COMDAT

; 631  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 632  : 	return GC.getBARBARIAN_CIVILIZATION();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8508
	mov	DWORD PTR $T228581[ebp], eax
	mov	eax, DWORD PTR $T228581[ebp]

; 633  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBARBARIAN_CIVILIZATION@CvDllGameContext@@UBGHXZ ENDP ; CvDllGameContext::GetBARBARIAN_CIVILIZATION
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetMINOR_CIVILIZATION@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228587 = -4						; size = 4
_this$ = 8						; size = 4
?GetMINOR_CIVILIZATION@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetMINOR_CIVILIZATION, COMDAT

; 636  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 637  : 	return GC.getMINOR_CIVILIZATION();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8520
	mov	DWORD PTR $T228587[ebp], eax
	mov	eax, DWORD PTR $T228587[ebp]

; 638  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMINOR_CIVILIZATION@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetMINOR_CIVILIZATION
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetBARBARIAN_HANDICAP@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228593 = -4						; size = 4
_this$ = 8						; size = 4
?GetBARBARIAN_HANDICAP@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetBARBARIAN_HANDICAP, COMDAT

; 641  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 642  : 	return GC.getBARBARIAN_HANDICAP();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8504
	mov	DWORD PTR $T228593[ebp], eax
	mov	eax, DWORD PTR $T228593[ebp]

; 643  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBARBARIAN_HANDICAP@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetBARBARIAN_HANDICAP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetBARBARIAN_LEADER@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228599 = -4						; size = 4
_this$ = 8						; size = 4
?GetBARBARIAN_LEADER@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetBARBARIAN_LEADER, COMDAT

; 646  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 647  : 	return GC.getBARBARIAN_LEADER();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8512
	mov	DWORD PTR $T228599[ebp], eax
	mov	eax, DWORD PTR $T228599[ebp]

; 648  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBARBARIAN_LEADER@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetBARBARIAN_LEADER
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetMINOR_CIV_HANDICAP@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228605 = -4						; size = 4
_this$ = 8						; size = 4
?GetMINOR_CIV_HANDICAP@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetMINOR_CIV_HANDICAP, COMDAT

; 651  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 652  : 	return GC.getMINOR_CIV_HANDICAP();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8516
	mov	DWORD PTR $T228605[ebp], eax
	mov	eax, DWORD PTR $T228605[ebp]

; 653  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMINOR_CIV_HANDICAP@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetMINOR_CIV_HANDICAP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetWALLS_BUILDINGCLASS@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228611 = -4						; size = 4
_this$ = 8						; size = 4
?GetWALLS_BUILDINGCLASS@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetWALLS_BUILDINGCLASS, COMDAT

; 656  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 657  : 	return GC.getWALLS_BUILDINGCLASS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8552
	mov	DWORD PTR $T228611[ebp], eax
	mov	eax, DWORD PTR $T228611[ebp]

; 658  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWALLS_BUILDINGCLASS@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetWALLS_BUILDINGCLASS
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetAI_HANDICAP@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
$T228617 = -4						; size = 4
_this$ = 8						; size = 4
?GetAI_HANDICAP@CvDllGameContext@@UBGHXZ PROC		; CvDllGameContext::GetAI_HANDICAP, COMDAT

; 661  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 662  : 	return GC.getAI_HANDICAP();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8544
	mov	DWORD PTR $T228617[ebp], eax
	mov	eax, DWORD PTR $T228617[ebp]

; 663  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetAI_HANDICAP@CvDllGameContext@@UBGHXZ ENDP		; CvDllGameContext::GetAI_HANDICAP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNUM_CITY_PLOTS@CvDllGameContext@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNUM_CITY_PLOTS@CvDllGameContext@@UBGHXZ PROC	; CvDllGameContext::GetNUM_CITY_PLOTS, COMDAT

; 666  : {

	push	ebp
	mov	ebp, esp

; 667  : 	return NUM_CITY_PLOTS;

	mov	eax, 37					; 00000025H

; 668  : }

	pop	ebp
	ret	4
?GetNUM_CITY_PLOTS@CvDllGameContext@@UBGHXZ ENDP	; CvDllGameContext::GetNUM_CITY_PLOTS
_TEXT	ENDS
EXTRN	?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ:PROC ; CvGlobals::GetHexDebugLayerNames
; Function compile flags: /Odtp
;	COMDAT ?GetHexDebugLayerNames@CvDllGameContext@@UAGPAPBDXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetHexDebugLayerNames@CvDllGameContext@@UAGPAPBDXZ PROC ; CvDllGameContext::GetHexDebugLayerNames, COMDAT

; 671  : {

	push	ebp
	mov	ebp, esp

; 672  : 	return GC.GetHexDebugLayerNames();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetHexDebugLayerNames@CvGlobals@@QAEPAPBDXZ ; CvGlobals::GetHexDebugLayerNames

; 673  : }

	pop	ebp
	ret	4
?GetHexDebugLayerNames@CvDllGameContext@@UAGPAPBDXZ ENDP ; CvDllGameContext::GetHexDebugLayerNames
_TEXT	ENDS
EXTRN	?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z:PROC ; CvGlobals::GetHexDebugLayerScale
; Function compile flags: /Odtp
;	COMDAT ?GetHexDebugLayerScale@CvDllGameContext@@UAGMPBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_szLayerName$ = 12					; size = 4
?GetHexDebugLayerScale@CvDllGameContext@@UAGMPBD@Z PROC	; CvDllGameContext::GetHexDebugLayerScale, COMDAT

; 676  : {

	push	ebp
	mov	ebp, esp

; 677  : 	return GC.GetHexDebugLayerScale(szLayerName);

	mov	eax, DWORD PTR _szLayerName$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetHexDebugLayerScale@CvGlobals@@QAEMPBD@Z ; CvGlobals::GetHexDebugLayerScale

; 678  : }

	pop	ebp
	ret	8
?GetHexDebugLayerScale@CvDllGameContext@@UAGMPBD@Z ENDP	; CvDllGameContext::GetHexDebugLayerScale
_TEXT	ENDS
EXTRN	?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z:PROC ; CvGlobals::GetHexDebugLayerString
EXTRN	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ:PROC	; CvDllPlot::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetHexDebugLayerString@CvDllGameContext@@UAG_NPAVICvPlot1@@PBDW4PlayerTypes@@PADI@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_pkPlot$ = -4						; size = 4
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
_szLayerName$ = 16					; size = 4
_ePlayer$ = 20						; size = 4
_szBuffer$ = 24						; size = 4
_uiBufferLength$ = 28					; size = 4
?GetHexDebugLayerString@CvDllGameContext@@UAG_NPAVICvPlot1@@PBDW4PlayerTypes@@PADI@Z PROC ; CvDllGameContext::GetHexDebugLayerString, COMDAT

; 681  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 682  : 	CvPlot* pkPlot = (NULL != pPlot)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN4@GetHexDebu
	mov	ecx, DWORD PTR _pPlot$[ebp]
	call	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ; CvDllPlot::GetInstance
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@GetHexDebu
$LN4@GetHexDebu:
	mov	DWORD PTR tv71[ebp], 0
$LN5@GetHexDebu:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _pkPlot$[ebp], eax

; 683  : 	if(pkPlot != NULL)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@GetHexDebu

; 684  : 	{
; 685  : 		return GC.GetHexDebugLayerString(pkPlot, szLayerName, ePlayer, szBuffer, uiBufferLength);

	mov	ecx, DWORD PTR _uiBufferLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szLayerName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetHexDebugLayerString@CvGlobals@@QAE_NPAVCvPlot@@PBDW4PlayerTypes@@PADI@Z ; CvGlobals::GetHexDebugLayerString
	jmp	SHORT $LN2@GetHexDebu
$LN1@GetHexDebu:

; 686  : 	}
; 687  : 
; 688  : 	return false;

	xor	al, al
$LN2@GetHexDebu:

; 689  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?GetHexDebugLayerString@CvDllGameContext@@UAG_NPAVICvPlot1@@PBDW4PlayerTypes@@PADI@Z ENDP ; CvDllGameContext::GetHexDebugLayerString
_TEXT	ENDS
EXTRN	?init@CvGlobals@@QAEXXZ:PROC			; CvGlobals::init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvDllGameContext@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Init@CvDllGameContext@@UAGXXZ PROC			; CvDllGameContext::Init, COMDAT

; 692  : {

	push	ebp
	mov	ebp, esp

; 693  : 	GC.init();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?init@CvGlobals@@QAEXXZ			; CvGlobals::init

; 694  : }

	pop	ebp
	ret	4
?Init@CvDllGameContext@@UAGXXZ ENDP			; CvDllGameContext::Init
_TEXT	ENDS
EXTRN	?uninit@CvGlobals@@QAEXXZ:PROC			; CvGlobals::uninit
; Function compile flags: /Odtp
;	COMDAT ?Uninit@CvDllGameContext@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Uninit@CvDllGameContext@@UAGXXZ PROC			; CvDllGameContext::Uninit, COMDAT

; 697  : {

	push	ebp
	mov	ebp, esp

; 698  : 	GC.uninit();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?uninit@CvGlobals@@QAEXXZ		; CvGlobals::uninit

; 699  : }

	pop	ebp
	ret	4
?Uninit@CvDllGameContext@@UAGXXZ ENDP			; CvDllGameContext::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetScriptSystemUtility@CvDllGameContext@@UAGPAVICvScriptSystemUtility1@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetScriptSystemUtility@CvDllGameContext@@UAGPAVICvScriptSystemUtility1@@XZ PROC ; CvDllGameContext::GetScriptSystemUtility, COMDAT

; 702  : {

	push	ebp
	mov	ebp, esp

; 703  : 	return m_pScriptSystemUtility;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 704  : }

	pop	ebp
	ret	4
?GetScriptSystemUtility@CvDllGameContext@@UAGPAVICvScriptSystemUtility1@@XZ ENDP ; CvDllGameContext::GetScriptSystemUtility
_TEXT	ENDS
EXTRN	?GetTypeName@CvNotificationEntry@@QAEPBDXZ:PROC	; CvNotificationEntry::GetTypeName
EXTRN	?GetEntry@CvNotificationXMLEntries@@QAEPAVCvNotificationEntry@@H@Z:PROC ; CvNotificationXMLEntries::GetEntry
EXTRN	?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ:PROC ; CvGlobals::GetNotificationEntries
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationType@CvDllGameContext@@UBGPBDH@Z
_TEXT	SEGMENT
_pkEntry$222277 = -8					; size = 4
_pkEntries$ = -4					; size = 4
_this$ = 8						; size = 4
_NotificationID$ = 12					; size = 4
?GetNotificationType@CvDllGameContext@@UBGPBDH@Z PROC	; CvDllGameContext::GetNotificationType, COMDAT

; 707  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 708  : 	CvNotificationXMLEntries* pkEntries = GC.GetNotificationEntries();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetNotificationEntries@CvGlobals@@QAEPAVCvNotificationXMLEntries@@XZ ; CvGlobals::GetNotificationEntries
	mov	DWORD PTR _pkEntries$[ebp], eax

; 709  : 	if(pkEntries != NULL)

	cmp	DWORD PTR _pkEntries$[ebp], 0
	je	SHORT $LN2@GetNotific

; 710  : 	{
; 711  : 		CvNotificationEntry* pkEntry = pkEntries->GetEntry(NotificationID);

	mov	eax, DWORD PTR _NotificationID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkEntries$[ebp]
	call	?GetEntry@CvNotificationXMLEntries@@QAEPAVCvNotificationEntry@@H@Z ; CvNotificationXMLEntries::GetEntry
	mov	DWORD PTR _pkEntry$222277[ebp], eax

; 712  : 		if(pkEntry != NULL)

	cmp	DWORD PTR _pkEntry$222277[ebp], 0
	je	SHORT $LN2@GetNotific

; 713  : 			return pkEntry->GetTypeName();

	mov	ecx, DWORD PTR _pkEntry$222277[ebp]
	call	?GetTypeName@CvNotificationEntry@@QAEPBDXZ ; CvNotificationEntry::GetTypeName
	jmp	SHORT $LN3@GetNotific
$LN2@GetNotific:

; 714  : 	}
; 715  : 
; 716  : 	return NULL;

	xor	eax, eax
$LN3@GetNotific:

; 717  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetNotificationType@CvDllGameContext@@UBGPBDH@Z ENDP	; CvDllGameContext::GetNotificationType
_TEXT	ENDS
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
; Function compile flags: /Odtp
;	COMDAT ?GetLogging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetLogging@CvDllGameContext@@UAG_NXZ PROC		; CvDllGameContext::GetLogging, COMDAT

; 720  : {

	push	ebp
	mov	ebp, esp

; 721  : 	return GC.getLogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging

; 722  : }

	pop	ebp
	ret	4
?GetLogging@CvDllGameContext@@UAG_NXZ ENDP		; CvDllGameContext::GetLogging
_TEXT	ENDS
EXTRN	?setLogging@CvGlobals@@QAEX_N@Z:PROC		; CvGlobals::setLogging
; Function compile flags: /Odtp
;	COMDAT ?SetLogging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetLogging@CvDllGameContext@@UAGX_N@Z PROC		; CvDllGameContext::SetLogging, COMDAT

; 725  : {

	push	ebp
	mov	ebp, esp

; 726  : 	GC.setLogging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setLogging@CvGlobals@@QAEX_N@Z		; CvGlobals::setLogging

; 727  : }

	pop	ebp
	ret	8
?SetLogging@CvDllGameContext@@UAGX_N@Z ENDP		; CvDllGameContext::SetLogging
_TEXT	ENDS
EXTRN	?getRandLogging@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getRandLogging
; Function compile flags: /Odtp
;	COMDAT ?GetRandLogging@CvDllGameContext@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetRandLogging@CvDllGameContext@@UAGHXZ PROC		; CvDllGameContext::GetRandLogging, COMDAT

; 730  : {

	push	ebp
	mov	ebp, esp

; 731  : 	return GC.getRandLogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getRandLogging@CvGlobals@@QAEHXZ	; CvGlobals::getRandLogging

; 732  : }

	pop	ebp
	ret	4
?GetRandLogging@CvDllGameContext@@UAGHXZ ENDP		; CvDllGameContext::GetRandLogging
_TEXT	ENDS
EXTRN	?setRandLogging@CvGlobals@@QAEXH@Z:PROC		; CvGlobals::setRandLogging
; Function compile flags: /Odtp
;	COMDAT ?SetRandLogging@CvDllGameContext@@UAGXH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iRandLoggingFlags$ = 12				; size = 4
?SetRandLogging@CvDllGameContext@@UAGXH@Z PROC		; CvDllGameContext::SetRandLogging, COMDAT

; 735  : {

	push	ebp
	mov	ebp, esp

; 736  : 	GC.setRandLogging(iRandLoggingFlags);

	mov	eax, DWORD PTR _iRandLoggingFlags$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setRandLogging@CvGlobals@@QAEXH@Z	; CvGlobals::setRandLogging

; 737  : }

	pop	ebp
	ret	8
?SetRandLogging@CvDllGameContext@@UAGXH@Z ENDP		; CvDllGameContext::SetRandLogging
_TEXT	ENDS
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
; Function compile flags: /Odtp
;	COMDAT ?GetAILogging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAILogging@CvDllGameContext@@UAG_NXZ PROC		; CvDllGameContext::GetAILogging, COMDAT

; 740  : {

	push	ebp
	mov	ebp, esp

; 741  : 	return GC.getAILogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging

; 742  : }

	pop	ebp
	ret	4
?GetAILogging@CvDllGameContext@@UAG_NXZ ENDP		; CvDllGameContext::GetAILogging
_TEXT	ENDS
EXTRN	?setAILogging@CvGlobals@@QAEX_N@Z:PROC		; CvGlobals::setAILogging
; Function compile flags: /Odtp
;	COMDAT ?SetAILogging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetAILogging@CvDllGameContext@@UAGX_N@Z PROC		; CvDllGameContext::SetAILogging, COMDAT

; 745  : {

	push	ebp
	mov	ebp, esp

; 746  : 	GC.setAILogging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setAILogging@CvGlobals@@QAEX_N@Z	; CvGlobals::setAILogging

; 747  : }

	pop	ebp
	ret	8
?SetAILogging@CvDllGameContext@@UAGX_N@Z ENDP		; CvDllGameContext::SetAILogging
_TEXT	ENDS
EXTRN	?getAIPerfLogging@CvGlobals@@QAE_NXZ:PROC	; CvGlobals::getAIPerfLogging
; Function compile flags: /Odtp
;	COMDAT ?GetAIPerfLogging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAIPerfLogging@CvDllGameContext@@UAG_NXZ PROC	; CvDllGameContext::GetAIPerfLogging, COMDAT

; 750  : {

	push	ebp
	mov	ebp, esp

; 751  : 	return GC.getAIPerfLogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIPerfLogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAIPerfLogging

; 752  : }

	pop	ebp
	ret	4
?GetAIPerfLogging@CvDllGameContext@@UAG_NXZ ENDP	; CvDllGameContext::GetAIPerfLogging
_TEXT	ENDS
EXTRN	?setAIPerfLogging@CvGlobals@@QAEX_N@Z:PROC	; CvGlobals::setAIPerfLogging
; Function compile flags: /Odtp
;	COMDAT ?SetAIPerfLogging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetAIPerfLogging@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetAIPerfLogging, COMDAT

; 755  : {

	push	ebp
	mov	ebp, esp

; 756  : 	GC.setAIPerfLogging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setAIPerfLogging@CvGlobals@@QAEX_N@Z	; CvGlobals::setAIPerfLogging

; 757  : }

	pop	ebp
	ret	8
?SetAIPerfLogging@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetAIPerfLogging
_TEXT	ENDS
EXTRN	?GetBuilderAILogging@CvGlobals@@QAE_NXZ:PROC	; CvGlobals::GetBuilderAILogging
; Function compile flags: /Odtp
;	COMDAT ?GetBuilderAILogging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetBuilderAILogging@CvDllGameContext@@UAG_NXZ PROC	; CvDllGameContext::GetBuilderAILogging, COMDAT

; 760  : {

	push	ebp
	mov	ebp, esp

; 761  : 	return GC.GetBuilderAILogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetBuilderAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::GetBuilderAILogging

; 762  : }

	pop	ebp
	ret	4
?GetBuilderAILogging@CvDllGameContext@@UAG_NXZ ENDP	; CvDllGameContext::GetBuilderAILogging
_TEXT	ENDS
EXTRN	?SetBuilderAILogging@CvGlobals@@QAEX_N@Z:PROC	; CvGlobals::SetBuilderAILogging
; Function compile flags: /Odtp
;	COMDAT ?SetBuilderAILogging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetBuilderAILogging@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetBuilderAILogging, COMDAT

; 765  : {

	push	ebp
	mov	ebp, esp

; 766  : 	GC.SetBuilderAILogging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetBuilderAILogging@CvGlobals@@QAEX_N@Z ; CvGlobals::SetBuilderAILogging

; 767  : }

	pop	ebp
	ret	8
?SetBuilderAILogging@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetBuilderAILogging
_TEXT	ENDS
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
; Function compile flags: /Odtp
;	COMDAT ?GetPlayerAndCityAILogSplit@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPlayerAndCityAILogSplit@CvDllGameContext@@UAG_NXZ PROC ; CvDllGameContext::GetPlayerAndCityAILogSplit, COMDAT

; 770  : {

	push	ebp
	mov	ebp, esp

; 771  : 	return GC.getPlayerAndCityAILogSplit();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit

; 772  : }

	pop	ebp
	ret	4
?GetPlayerAndCityAILogSplit@CvDllGameContext@@UAG_NXZ ENDP ; CvDllGameContext::GetPlayerAndCityAILogSplit
_TEXT	ENDS
EXTRN	?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z:PROC ; CvGlobals::setPlayerAndCityAILogSplit
; Function compile flags: /Odtp
;	COMDAT ?SetPlayerAndCityAILogSplit@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetPlayerAndCityAILogSplit@CvDllGameContext@@UAGX_N@Z PROC ; CvDllGameContext::SetPlayerAndCityAILogSplit, COMDAT

; 775  : {

	push	ebp
	mov	ebp, esp

; 776  : 	GC.setPlayerAndCityAILogSplit(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setPlayerAndCityAILogSplit@CvGlobals@@QAEX_N@Z ; CvGlobals::setPlayerAndCityAILogSplit

; 777  : }

	pop	ebp
	ret	8
?SetPlayerAndCityAILogSplit@CvDllGameContext@@UAGX_N@Z ENDP ; CvDllGameContext::SetPlayerAndCityAILogSplit
_TEXT	ENDS
EXTRN	?GetTutorialLogging@CvGlobals@@QAE_NXZ:PROC	; CvGlobals::GetTutorialLogging
; Function compile flags: /Odtp
;	COMDAT ?GetTutorialLogging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetTutorialLogging@CvDllGameContext@@UAG_NXZ PROC	; CvDllGameContext::GetTutorialLogging, COMDAT

; 780  : {

	push	ebp
	mov	ebp, esp

; 781  : 	return GC.GetTutorialLogging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetTutorialLogging@CvGlobals@@QAE_NXZ	; CvGlobals::GetTutorialLogging

; 782  : }

	pop	ebp
	ret	4
?GetTutorialLogging@CvDllGameContext@@UAG_NXZ ENDP	; CvDllGameContext::GetTutorialLogging
_TEXT	ENDS
EXTRN	?SetTutorialLogging@CvGlobals@@QAEX_N@Z:PROC	; CvGlobals::SetTutorialLogging
; Function compile flags: /Odtp
;	COMDAT ?SetTutorialLogging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetTutorialLogging@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetTutorialLogging, COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp

; 786  : 	GC.SetTutorialLogging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetTutorialLogging@CvGlobals@@QAEX_N@Z	; CvGlobals::SetTutorialLogging

; 787  : }

	pop	ebp
	ret	8
?SetTutorialLogging@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetTutorialLogging
_TEXT	ENDS
EXTRN	?GetTutorialDebugging@CvGlobals@@QAE_NXZ:PROC	; CvGlobals::GetTutorialDebugging
; Function compile flags: /Odtp
;	COMDAT ?GetTutorialDebugging@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetTutorialDebugging@CvDllGameContext@@UAG_NXZ PROC	; CvDllGameContext::GetTutorialDebugging, COMDAT

; 790  : {

	push	ebp
	mov	ebp, esp

; 791  : 	return GC.GetTutorialDebugging();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetTutorialDebugging@CvGlobals@@QAE_NXZ ; CvGlobals::GetTutorialDebugging

; 792  : }

	pop	ebp
	ret	4
?GetTutorialDebugging@CvDllGameContext@@UAG_NXZ ENDP	; CvDllGameContext::GetTutorialDebugging
_TEXT	ENDS
EXTRN	?SetTutorialDebugging@CvGlobals@@QAEX_N@Z:PROC	; CvGlobals::SetTutorialDebugging
; Function compile flags: /Odtp
;	COMDAT ?SetTutorialDebugging@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetTutorialDebugging@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetTutorialDebugging, COMDAT

; 795  : {

	push	ebp
	mov	ebp, esp

; 796  : 	GC.SetTutorialDebugging(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetTutorialDebugging@CvGlobals@@QAEX_N@Z ; CvGlobals::SetTutorialDebugging

; 797  : }

	pop	ebp
	ret	8
?SetTutorialDebugging@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetTutorialDebugging
_TEXT	ENDS
EXTRN	?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::GetAllowRClickMovementWhileScrolling
; Function compile flags: /Odtp
;	COMDAT ?GetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAG_NXZ PROC ; CvDllGameContext::GetAllowRClickMovementWhileScrolling, COMDAT

; 800  : {

	push	ebp
	mov	ebp, esp

; 801  : 	return GC.GetAllowRClickMovementWhileScrolling();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetAllowRClickMovementWhileScrolling@CvGlobals@@QAE_NXZ ; CvGlobals::GetAllowRClickMovementWhileScrolling

; 802  : }

	pop	ebp
	ret	4
?GetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAG_NXZ ENDP ; CvDllGameContext::GetAllowRClickMovementWhileScrolling
_TEXT	ENDS
EXTRN	?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z:PROC ; CvGlobals::SetAllowRClickMovementWhileScrolling
; Function compile flags: /Odtp
;	COMDAT ?SetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bAllow$ = 12						; size = 1
?SetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAGX_N@Z PROC ; CvDllGameContext::SetAllowRClickMovementWhileScrolling, COMDAT

; 805  : {

	push	ebp
	mov	ebp, esp

; 806  : 	GC.SetAllowRClickMovementWhileScrolling(bAllow);

	movzx	eax, BYTE PTR _bAllow$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetAllowRClickMovementWhileScrolling@CvGlobals@@QAEX_N@Z ; CvGlobals::SetAllowRClickMovementWhileScrolling

; 807  : }

	pop	ebp
	ret	8
?SetAllowRClickMovementWhileScrolling@CvDllGameContext@@UAGX_N@Z ENDP ; CvDllGameContext::SetAllowRClickMovementWhileScrolling
_TEXT	ENDS
EXTRN	?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ:PROC	; CvGlobals::GetPostTurnAutosaves
; Function compile flags: /Odtp
;	COMDAT ?GetPostTurnAutosaves@CvDllGameContext@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPostTurnAutosaves@CvDllGameContext@@UAG_NXZ PROC	; CvDllGameContext::GetPostTurnAutosaves, COMDAT

; 810  : {

	push	ebp
	mov	ebp, esp

; 811  : 	return GC.GetPostTurnAutosaves();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetPostTurnAutosaves@CvGlobals@@QAE_NXZ ; CvGlobals::GetPostTurnAutosaves

; 812  : }

	pop	ebp
	ret	4
?GetPostTurnAutosaves@CvDllGameContext@@UAG_NXZ ENDP	; CvDllGameContext::GetPostTurnAutosaves
_TEXT	ENDS
EXTRN	?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z:PROC	; CvGlobals::SetPostTurnAutosaves
; Function compile flags: /Odtp
;	COMDAT ?SetPostTurnAutosaves@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bEnable$ = 12						; size = 1
?SetPostTurnAutosaves@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetPostTurnAutosaves, COMDAT

; 815  : {

	push	ebp
	mov	ebp, esp

; 816  : 	GC.SetPostTurnAutosaves(bEnable);

	movzx	eax, BYTE PTR _bEnable$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetPostTurnAutosaves@CvGlobals@@QAEX_N@Z ; CvGlobals::SetPostTurnAutosaves

; 817  : }

	pop	ebp
	ret	8
?SetPostTurnAutosaves@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetPostTurnAutosaves
_TEXT	ENDS
EXTRN	?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ:PROC ; CvGlobals::getDatabaseLoadUtility
; Function compile flags: /Odtp
;	COMDAT ?GetDatabaseLoadUtility@CvDllGameContext@@UAGPAVICvDLLDatabaseUtility1@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetDatabaseLoadUtility@CvDllGameContext@@UAGPAVICvDLLDatabaseUtility1@@XZ PROC ; CvDllGameContext::GetDatabaseLoadUtility, COMDAT

; 820  : {

	push	ebp
	mov	ebp, esp

; 821  : 	return GC.getDatabaseLoadUtility();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getDatabaseLoadUtility@CvGlobals@@QAEPAVICvDLLDatabaseUtility1@@XZ ; CvGlobals::getDatabaseLoadUtility

; 822  : }

	pop	ebp
	ret	4
?GetDatabaseLoadUtility@CvDllGameContext@@UAGPAVICvDLLDatabaseUtility1@@XZ ENDP ; CvDllGameContext::GetDatabaseLoadUtility
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetPlotDirectionX@CvDllGameContext@@UAGPAHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPlotDirectionX@CvDllGameContext@@UAGPAHXZ PROC	; CvDllGameContext::GetPlotDirectionX, COMDAT

; 825  : {

	push	ebp
	mov	ebp, esp

; 826  : 	return GC.getPlotDirectionX();

	mov	eax, OFFSET ?gGlobals@@3VCvGlobals@@A+112

; 827  : }

	pop	ebp
	ret	4
?GetPlotDirectionX@CvDllGameContext@@UAGPAHXZ ENDP	; CvDllGameContext::GetPlotDirectionX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetPlotDirectionY@CvDllGameContext@@UAGPAHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPlotDirectionY@CvDllGameContext@@UAGPAHXZ PROC	; CvDllGameContext::GetPlotDirectionY, COMDAT

; 830  : {

	push	ebp
	mov	ebp, esp

; 831  : 	return GC.getPlotDirectionY();

	mov	eax, OFFSET ?gGlobals@@3VCvGlobals@@A+136

; 832  : }

	pop	ebp
	ret	4
?GetPlotDirectionY@CvDllGameContext@@UAGPAHXZ ENDP	; CvDllGameContext::GetPlotDirectionY
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetCityPlotX@CvDllGameContext@@UAGPAHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetCityPlotX@CvDllGameContext@@UAGPAHXZ PROC		; CvDllGameContext::GetCityPlotX, COMDAT

; 835  : {

	push	ebp
	mov	ebp, esp

; 836  : 	return GC.getCityPlotX();

	mov	eax, OFFSET ?gGlobals@@3VCvGlobals@@A+160

; 837  : }

	pop	ebp
	ret	4
?GetCityPlotX@CvDllGameContext@@UAGPAHXZ ENDP		; CvDllGameContext::GetCityPlotX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetCityPlotY@CvDllGameContext@@UAGPAHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetCityPlotY@CvDllGameContext@@UAGPAHXZ PROC		; CvDllGameContext::GetCityPlotY, COMDAT

; 840  : {

	push	ebp
	mov	ebp, esp

; 841  : 	return GC.getCityPlotY();

	mov	eax, OFFSET ?gGlobals@@3VCvGlobals@@A+308

; 842  : }

	pop	ebp
	ret	4
?GetCityPlotY@CvDllGameContext@@UAGPAHXZ ENDP		; CvDllGameContext::GetCityPlotY
_TEXT	ENDS
EXTRN	?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z:PROC ; CvGlobals::SetGameDatabase
; Function compile flags: /Odtp
;	COMDAT ?SetGameDatabase@CvDllGameContext@@UAGXPAVConnection@Database@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pGameDatabase$ = 12					; size = 4
?SetGameDatabase@CvDllGameContext@@UAGXPAVConnection@Database@@@Z PROC ; CvDllGameContext::SetGameDatabase, COMDAT

; 845  : {

	push	ebp
	mov	ebp, esp

; 846  : 	GC.SetGameDatabase(pGameDatabase);

	mov	eax, DWORD PTR _pGameDatabase$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetGameDatabase@CvGlobals@@QAEXPAVConnection@Database@@@Z ; CvGlobals::SetGameDatabase

; 847  : }

	pop	ebp
	ret	8
?SetGameDatabase@CvDllGameContext@@UAGXPAVConnection@Database@@@Z ENDP ; CvDllGameContext::SetGameDatabase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetDLLIFace@CvDllGameContext@@UAG_NPAVICvEngineUtility1@@@Z
_TEXT	SEGMENT
tv75 = -52						; size = 4
$T228723 = -48						; size = 16
$T228722 = -32						; size = 16
_inst$228712 = -16					; size = 4
$T228702 = -12						; size = 4
_pDllInterface$ = -8					; size = 4
_pOldDll$ = -4						; size = 4
_this$ = 8						; size = 4
_pDll$ = 12						; size = 4
?SetDLLIFace@CvDllGameContext@@UAG_NPAVICvEngineUtility1@@@Z PROC ; CvDllGameContext::SetDLLIFace, COMDAT

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 851  : 	//Since we're using QueryInterface to allocate a new instance, we need to explicitly clean up the old reference.
; 852  : 	ICvEngineUtility4* pOldDll = GC.getDLLIFace();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR _pOldDll$[ebp], eax

; 853  : #ifndef AUI_WARNING_FIXES
; 854  : 	if(pOldDll != NULL)

	cmp	DWORD PTR _pOldDll$[ebp], 0
	je	SHORT $LN1@SetDLLIFac

; 855  : #endif
; 856  : 	{
; 857  : 		delete pOldDll;

	mov	ecx, DWORD PTR _pOldDll$[ebp]
	mov	DWORD PTR $T228702[ebp], ecx
	cmp	DWORD PTR $T228702[ebp], 0
	je	SHORT $LN1@SetDLLIFac
	mov	edx, DWORD PTR $T228702[ebp]
	mov	DWORD PTR _inst$228712[ebp], edx
	mov	eax, DWORD PTR _inst$228712[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inst$228712[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
$LN1@SetDLLIFac:

; 858  : 	}
; 859  : 
; 860  : 	ICvEngineUtility4* pDllInterface = (pDll != NULL)? pDll->QueryInterface<ICvEngineUtility4>() : NULL;

	cmp	DWORD PTR _pDll$[ebp], 0
	je	SHORT $LN4@SetDLLIFac
	mov	ecx, DWORD PTR _guidICvEngineUtility4
	mov	DWORD PTR $T228723[ebp], ecx
	mov	edx, DWORD PTR _guidICvEngineUtility4+4
	mov	DWORD PTR $T228723[ebp+4], edx
	mov	eax, DWORD PTR _guidICvEngineUtility4+8
	mov	DWORD PTR $T228723[ebp+8], eax
	mov	ecx, DWORD PTR _guidICvEngineUtility4+12
	mov	DWORD PTR $T228723[ebp+12], ecx
	mov	edx, DWORD PTR $T228723[ebp]
	mov	DWORD PTR $T228722[ebp], edx
	mov	eax, DWORD PTR $T228723[ebp+4]
	mov	DWORD PTR $T228722[ebp+4], eax
	mov	ecx, DWORD PTR $T228723[ebp+8]
	mov	DWORD PTR $T228722[ebp+8], ecx
	mov	edx, DWORD PTR $T228723[ebp+12]
	mov	DWORD PTR $T228722[ebp+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR $T228722[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T228722[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T228722[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T228722[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _pDll$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDll$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN5@SetDLLIFac
$LN4@SetDLLIFac:
	mov	DWORD PTR tv75[ebp], 0
$LN5@SetDLLIFac:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _pDllInterface$[ebp], ecx

; 861  : 	GC.setDLLIFace(pDllInterface);	//GameCore will claim ownership.

	mov	edx, DWORD PTR _pDllInterface$[ebp]
	mov	DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564, edx

; 862  : 
; 863  : 	return pDllInterface != NULL;

	xor	eax, eax
	cmp	DWORD PTR _pDllInterface$[ebp], 0
	setne	al

; 864  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetDLLIFace@CvDllGameContext@@UAG_NPAVICvEngineUtility1@@@Z ENDP ; CvDllGameContext::SetDLLIFace
_TEXT	ENDS
EXTRN	?IsGraphicsInitialized@CvGlobals@@QBE_NXZ:PROC	; CvGlobals::IsGraphicsInitialized
; Function compile flags: /Odtp
;	COMDAT ?IsGraphicsInitialized@CvDllGameContext@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsGraphicsInitialized@CvDllGameContext@@UBG_NXZ PROC	; CvDllGameContext::IsGraphicsInitialized, COMDAT

; 867  : {

	push	ebp
	mov	ebp, esp

; 868  : 	return GC.IsGraphicsInitialized();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?IsGraphicsInitialized@CvGlobals@@QBE_NXZ ; CvGlobals::IsGraphicsInitialized

; 869  : }

	pop	ebp
	ret	4
?IsGraphicsInitialized@CvDllGameContext@@UBG_NXZ ENDP	; CvDllGameContext::IsGraphicsInitialized
_TEXT	ENDS
EXTRN	?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z:PROC ; CvGlobals::SetGraphicsInitialized
; Function compile flags: /Odtp
;	COMDAT ?SetGraphicsInitialized@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bVal$ = 12						; size = 1
?SetGraphicsInitialized@CvDllGameContext@@UAGX_N@Z PROC	; CvDllGameContext::SetGraphicsInitialized, COMDAT

; 872  : {

	push	ebp
	mov	ebp, esp

; 873  : 	GC.SetGraphicsInitialized(bVal);

	movzx	eax, BYTE PTR _bVal$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?SetGraphicsInitialized@CvGlobals@@QAEX_N@Z ; CvGlobals::SetGraphicsInitialized

; 874  : }

	pop	ebp
	ret	8
?SetGraphicsInitialized@CvDllGameContext@@UAGX_N@Z ENDP	; CvDllGameContext::SetGraphicsInitialized
_TEXT	ENDS
EXTRN	?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z:PROC ; CvGlobals::setOutOfSyncDebuggingEnabled
; Function compile flags: /Odtp
;	COMDAT ?SetOutOfSyncDebuggingEnabled@CvDllGameContext@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_isEnabled$ = 12					; size = 1
?SetOutOfSyncDebuggingEnabled@CvDllGameContext@@UAGX_N@Z PROC ; CvDllGameContext::SetOutOfSyncDebuggingEnabled, COMDAT

; 877  : {

	push	ebp
	mov	ebp, esp

; 878  : 	GC.setOutOfSyncDebuggingEnabled(isEnabled);

	movzx	eax, BYTE PTR _isEnabled$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?setOutOfSyncDebuggingEnabled@CvGlobals@@QAEX_N@Z ; CvGlobals::setOutOfSyncDebuggingEnabled

; 879  : }

	pop	ebp
	ret	8
?SetOutOfSyncDebuggingEnabled@CvDllGameContext@@UAGX_N@Z ENDP ; CvDllGameContext::SetOutOfSyncDebuggingEnabled
_TEXT	ENDS
PUBLIC	??_C@_0BL@PGBLOBGI@?6Remote?5callstack?5history?6?$AA@ ; `string'
PUBLIC	??_C@_07JFHFGCCE@?5times?6?$AA@			; `string'
PUBLIC	??_C@_0BH@IHKEFPDL@Last?5message?5repeated?5?$AA@ ; `string'
PUBLIC	??_C@_0BK@NPJAKILA@?6Local?5callstack?5history?6?$AA@ ; `string'
PUBLIC	??_C@_08IFNGLKCF@?7REMOTE?$DN?$AA@		; `string'
PUBLIC	??_C@_07DBJNMEKP@?5LOCAL?$DN?$AA@		; `string'
PUBLIC	??_C@_08FBLOGPDB@?7?5Call?5?$CD?$AA@		; `string'
PUBLIC	??_C@_0BA@FILKIODF@Seed?5History?5?9?6?$AA@	; `string'
PUBLIC	??_C@_0O@BFICDMLA@?6Debug?5dump?3?6?$AA@	; `string'
PUBLIC	??_C@_09DDDABMGJ@Remote?5?3?6?$AA@		; `string'
PUBLIC	??_C@_08HOIOJOGM@Local?5?3?6?$AA@		; `string'
PUBLIC	??_C@_0CF@EPEKCELF@?6First?5different?5callstack?5at?5ca@ ; `string'
PUBLIC	??_C@_0BD@INMHKADI@remote?5CallStack?3?6?$AA@	; `string'
PUBLIC	??_C@_0EB@JIFICGIN@?6remote?5random?5number?5generator?5@ ; `string'
PUBLIC	??_C@_0BC@DDEGDMIL@Local?5CallStack?3?6?$AA@	; `string'
PUBLIC	??_C@_0EB@HAKMNBDI@?6Local?5random?5number?5generator?5c@ ; `string'
PUBLIC	??_C@_09PICJJDH@?6Remote?3?6?$AA@		; `string'
PUBLIC	??_C@_08HMFGJBP@?6Local?3?6?$AA@		; `string'
PUBLIC	??_C@_06HPAOHAOM@Call?5?$CD?$AA@		; `string'
PUBLIC	??_C@_0CF@LOLFHJLH@?5random?5number?5seeds?5are?5differe@ ; `string'
PUBLIC	??_C@_09CEKJFLPF@At?5Call?5?$CD?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BF@IFEBLOKI@?0?5remote?4resetCount?$DN?$AA@ ; `string'
PUBLIC	??_C@_0BE@KGCNIHPC@?6?7local?4resetCount?$DN?$AA@ ; `string'
PUBLIC	??_C@_0BE@PGKLMCHP@?0?5remote?4callCount?$DN?$AA@ ; `string'
PUBLIC	??_C@_0BD@EDPFCHII@?6?7local?4callCount?$DN?$AA@ ; `string'
PUBLIC	??_C@_0P@KGOBJAEJ@?0?5remote?4seed?$DN?$AA@	; `string'
PUBLIC	??_C@_0DM@EDIKCBBL@Game?5Random?5Number?5Generators?5ar@ ; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0BG@HGKFLJFE@net_message_debug?4log?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getSeedHistory@CvRandom@@QBEABV?$vector@KV?$allocator@K@std@@@std@@XZ:PROC ; CvRandom::getSeedHistory
EXTRN	?getResolvedCallStacks@CvRandom@@QBEABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ:PROC ; CvRandom::getResolvedCallStacks
EXTRN	?resolveCallStacks@CvRandom@@QBEXXZ:PROC	; CvRandom::resolveCallStacks
EXTRN	?callStackDebuggingEnabled@CvRandom@@QBE_NXZ:PROC ; CvRandom::callStackDebuggingEnabled
EXTRN	?getResetCount@CvRandom@@QBEKXZ:PROC		; CvRandom::getResetCount
EXTRN	?getCallCount@CvRandom@@QBEKXZ:PROC		; CvRandom::getCallCount
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z:PROC
EXTRN	__imp___itoa_s:PROC
EXTRN	?getSeed@CvRandom@@QBEKXZ:PROC			; CvRandom::getSeed
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	??9CvRandom@@QBE_NABV0@@Z:PROC			; CvRandom::operator!=
EXTRN	?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z:PROC ; CvGlobals::UnwrapRandomPointer
EXTRN	?getJonRand@CvGame@@QAEAAVCvRandom@@XZ:PROC	; CvGame::getJonRand
EXTRN	_memset:PROC
;	COMDAT ??_C@_0BL@PGBLOBGI@?6Remote?5callstack?5history?6?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_0BL@PGBLOBGI@?6Remote?5callstack?5history?6?$AA@ DB 0aH, 'Remote ca'
	DB	'llstack history', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFHFGCCE@?5times?6?$AA@
CONST	SEGMENT
??_C@_07JFHFGCCE@?5times?6?$AA@ DB ' times', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHKEFPDL@Last?5message?5repeated?5?$AA@
CONST	SEGMENT
??_C@_0BH@IHKEFPDL@Last?5message?5repeated?5?$AA@ DB 'Last message repeat'
	DB	'ed ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NPJAKILA@?6Local?5callstack?5history?6?$AA@
CONST	SEGMENT
??_C@_0BK@NPJAKILA@?6Local?5callstack?5history?6?$AA@ DB 0aH, 'Local call'
	DB	'stack history', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IFNGLKCF@?7REMOTE?$DN?$AA@
CONST	SEGMENT
??_C@_08IFNGLKCF@?7REMOTE?$DN?$AA@ DB 09H, 'REMOTE=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBJNMEKP@?5LOCAL?$DN?$AA@
CONST	SEGMENT
??_C@_07DBJNMEKP@?5LOCAL?$DN?$AA@ DB ' LOCAL=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBLOGPDB@?7?5Call?5?$CD?$AA@
CONST	SEGMENT
??_C@_08FBLOGPDB@?7?5Call?5?$CD?$AA@ DB 09H, ' Call #', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FILKIODF@Seed?5History?5?9?6?$AA@
CONST	SEGMENT
??_C@_0BA@FILKIODF@Seed?5History?5?9?6?$AA@ DB 'Seed History -', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BFICDMLA@?6Debug?5dump?3?6?$AA@
CONST	SEGMENT
??_C@_0O@BFICDMLA@?6Debug?5dump?3?6?$AA@ DB 0aH, 'Debug dump:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDDABMGJ@Remote?5?3?6?$AA@
CONST	SEGMENT
??_C@_09DDDABMGJ@Remote?5?3?6?$AA@ DB 'Remote :', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOIOJOGM@Local?5?3?6?$AA@
CONST	SEGMENT
??_C@_08HOIOJOGM@Local?5?3?6?$AA@ DB 'Local :', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@EPEKCELF@?6First?5different?5callstack?5at?5ca@
CONST	SEGMENT
??_C@_0CF@EPEKCELF@?6First?5different?5callstack?5at?5ca@ DB 0aH, 'First '
	DB	'different callstack at call #', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INMHKADI@remote?5CallStack?3?6?$AA@
CONST	SEGMENT
??_C@_0BD@INMHKADI@remote?5CallStack?3?6?$AA@ DB 'remote CallStack:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JIFICGIN@?6remote?5random?5number?5generator?5@
CONST	SEGMENT
??_C@_0EB@JIFICGIN@?6remote?5random?5number?5generator?5@ DB 0aH, 'remote'
	DB	' random number generator called more than local at call #', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDEGDMIL@Local?5CallStack?3?6?$AA@
CONST	SEGMENT
??_C@_0BC@DDEGDMIL@Local?5CallStack?3?6?$AA@ DB 'Local CallStack:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HAKMNBDI@?6Local?5random?5number?5generator?5c@
CONST	SEGMENT
??_C@_0EB@HAKMNBDI@?6Local?5random?5number?5generator?5c@ DB 0aH, 'Local '
	DB	'random number generator called more than remote at call #', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PICJJDH@?6Remote?3?6?$AA@
CONST	SEGMENT
??_C@_09PICJJDH@?6Remote?3?6?$AA@ DB 0aH, 'Remote:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMFGJBP@?6Local?3?6?$AA@
CONST	SEGMENT
??_C@_08HMFGJBP@?6Local?3?6?$AA@ DB 0aH, 'Local:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPAOHAOM@Call?5?$CD?$AA@
CONST	SEGMENT
??_C@_06HPAOHAOM@Call?5?$CD?$AA@ DB 'Call #', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LOLFHJLH@?5random?5number?5seeds?5are?5differe@
CONST	SEGMENT
??_C@_0CF@LOLFHJLH@?5random?5number?5seeds?5are?5differe@ DB ' random num'
	DB	'ber seeds are different.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEKJFLPF@At?5Call?5?$CD?$AA@
CONST	SEGMENT
??_C@_09CEKJFLPF@At?5Call?5?$CD?$AA@ DB 'At Call #', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IFEBLOKI@?0?5remote?4resetCount?$DN?$AA@
CONST	SEGMENT
??_C@_0BF@IFEBLOKI@?0?5remote?4resetCount?$DN?$AA@ DB ', remote.resetCoun'
	DB	't=', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGCNIHPC@?6?7local?4resetCount?$DN?$AA@
CONST	SEGMENT
??_C@_0BE@KGCNIHPC@?6?7local?4resetCount?$DN?$AA@ DB 0aH, 09H, 'local.res'
	DB	'etCount=', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PGKLMCHP@?0?5remote?4callCount?$DN?$AA@
CONST	SEGMENT
??_C@_0BE@PGKLMCHP@?0?5remote?4callCount?$DN?$AA@ DB ', remote.callCount='
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EDPFCHII@?6?7local?4callCount?$DN?$AA@
CONST	SEGMENT
??_C@_0BD@EDPFCHII@?6?7local?4callCount?$DN?$AA@ DB 0aH, 09H, 'local.call'
	DB	'Count=', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KGOBJAEJ@?0?5remote?4seed?$DN?$AA@
CONST	SEGMENT
??_C@_0P@KGOBJAEJ@?0?5remote?4seed?$DN?$AA@ DB ', remote.seed=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@EDIKCBBL@Game?5Random?5Number?5Generators?5ar@
CONST	SEGMENT
??_C@_0DM@EDIKCBBL@Game?5Random?5Number?5Generators?5ar@ DB 'Game Random '
	DB	'Number Generators are out of sync : local.seed=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HGKFLJFE@net_message_debug?4log?$AA@
CONST	SEGMENT
??_C@_0BG@HGKFLJFE@net_message_debug?4log?$AA@ DB 'net_message_debug.log', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$3
__ehfuncinfo$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z
_TEXT	SEGMENT
tv78 = -572						; size = 4
$T229251 = -568						; size = 4
$T229235 = -564						; size = 4
$T229223 = -560						; size = 4
$T229206 = -556						; size = 4
$T229190 = -552						; size = 4
$T229178 = -548						; size = 4
$T229167 = -544						; size = 4
$T229163 = -540						; size = 4
$T229147 = -536						; size = 4
$T229139 = -532						; size = 4
$T229135 = -528						; size = 4
$T229119 = -524						; size = 4
$T229099 = -520						; size = 4
$T229082 = -516						; size = 4
$T229073 = -512						; size = 4
$T229064 = -508						; size = 4
$T229050 = -504						; size = 4
$T229046 = -500						; size = 4
$T229030 = -496						; size = 4
$T229013 = -492						; size = 4
$T228998 = -488						; size = 4
$T228989 = -484						; size = 4
$T228962 = -480						; size = 4
$T228945 = -476						; size = 4
$T228924 = -472						; size = 4
$T228907 = -468						; size = 4
$T228872 = -464						; size = 4
$T228856 = -460						; size = 4
$T228839 = -456						; size = 4
$T228824 = -452						; size = 4
$T228815 = -448						; size = 4
$T228806 = -444						; size = 4
$T228797 = -440						; size = 4
$T228792 = -436						; size = 4
$T228788 = -432						; size = 4
$T228784 = -428						; size = 4
$T228780 = -424						; size = 4
$T228776 = -420						; size = 4
$T228772 = -416						; size = 4
$T228768 = -412						; size = 4
$T228760 = -405						; size = 1
$T228759 = -404						; size = 4
$T228758 = -400						; size = 4
$T228757 = -396						; size = 4
$T228756 = -392						; size = 4
$T228755 = -388						; size = 4
$T228754 = -384						; size = 4
$T228753 = -380						; size = 4
$T228752 = -376						; size = 4
$T228751 = -372						; size = 4
$T228750 = -368						; size = 4
$T228749 = -364						; size = 4
$T228748 = -360						; size = 4
$T228747 = -356						; size = 4
$T228746 = -352						; size = 4
$T228745 = -348						; size = 4
$T228744 = -344						; size = 4
$T228743 = -340						; size = 4
$T228742 = -336						; size = 4
$T228741 = -332						; size = 4
$T228740 = -328						; size = 4
$T228739 = -324						; size = 4
$T228738 = -320						; size = 4
_repeatCount$223025 = -316				; size = 4
_lastCallStackLogged$223024 = -312			; size = 28
_i$223030 = -284					; size = 4
_localCallStack$222417 = -280				; size = 28
_localSeedHistory$222433 = -252				; size = 4
_remoteSeedHistory$222438 = -248			; size = 4
_remoteCallStackIterator$222992 = -244			; size = 4
_remoteSeedIterator$222848 = -240			; size = 4
_localCallStackIterator$222987 = -236			; size = 4
_localSeedIterator$222842 = -232			; size = 4
_localCallStacks$222423 = -228				; size = 4
_callNumber$222850 = -224				; size = 4
_remoteCallStacks$222428 = -220				; size = 4
_remoteCallStack$222418 = -216				; size = 28
_rngLogMessage$222403 = -188				; size = 28
_logFile$222399 = -160					; size = 4
_formatBuf$222401 = -156				; size = 128
__$ArrayPad$ = -24					; size = 4
_pkRandom$ = -20					; size = 4
_localSimRandomNumberGenerator$ = -16			; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_ePlayer$ = 12						; size = 4
_pRandom$ = 16						; size = 4
_bIsHost$ = 20						; size = 1
?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z PROC ; CvDllGameContext::RandomNumberGeneratorSyncCheck, COMDAT

; 886  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 560				; 00000230H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 887  : 	// uh oh! Check the Random number generator!
; 888  : 	const CvRandom& localSimRandomNumberGenerator = GC.getGame().getJonRand();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T228768[ebp], eax
	mov	ecx, DWORD PTR $T228768[ebp]
	call	?getJonRand@CvGame@@QAEAAVCvRandom@@XZ	; CvGame::getJonRand
	mov	DWORD PTR _localSimRandomNumberGenerator$[ebp], eax

; 889  : 	CvRandom* pkRandom = GC.UnwrapRandomPointer(pRandom);

	mov	ecx, DWORD PTR _pRandom$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z ; CvGlobals::UnwrapRandomPointer
	mov	DWORD PTR _pkRandom$[ebp], eax

; 890  : 
; 891  : 	if(localSimRandomNumberGenerator != *pkRandom)

	mov	edx, DWORD PTR _pkRandom$[ebp]
	push	edx
	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	??9CvRandom@@QBE_NABV0@@Z		; CvRandom::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN38@RandomNumb

; 892  : 	{
; 893  : 		FILogFile* logFile = LOGFILEMGR.GetLog("net_message_debug.log", 0);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv78[ebp], eax
	push	0
	push	0
	push	OFFSET ??_C@_0BG@HGKFLJFE@net_message_debug?4log?$AA@
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _logFile$222399[ebp], eax

; 894  : 
; 895  : 		char formatBuf[128] = {"\0"};

	mov	cx, WORD PTR ??_C@_01LOCGONAA@?$AA?$AA@
	mov	WORD PTR _formatBuf$222401[ebp], cx
	push	126					; 0000007eH
	push	0
	lea	edx, DWORD PTR _formatBuf$222401[ebp+2]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 896  : 		std::string rngLogMessage = "Game Random Number Generators are out of sync : local.seed=";

	push	OFFSET ??_C@_0DM@EDIKCBBL@Game?5Random?5Number?5Generators?5ar@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 897  : #ifdef AUI_WARNING_FIXES
; 898  : #ifdef AUI_USE_SFMT_RNG
; 899  : 		_itoa_s(localSimRandomNumberGenerator.getSeed().first, formatBuf, 128, 10);
; 900  : 		rngLogMessage += formatBuf;
; 901  : 		rngLogMessage += ", remote.seed=";
; 902  : 		_itoa_s(pkRandom->getSeed().first, formatBuf, 128, 10);
; 903  : #else
; 904  : 		_itoa_s(localSimRandomNumberGenerator.getSeed(), formatBuf, 128, 10);
; 905  : 		rngLogMessage += formatBuf;
; 906  : 		rngLogMessage += ", remote.seed=";
; 907  : 		_itoa_s(pkRandom->getSeed(), formatBuf, 128, 10);
; 908  : #endif
; 909  : 		rngLogMessage += formatBuf;
; 910  : 		rngLogMessage += "\n\tlocal.callCount=";
; 911  : 		_itoa_s(localSimRandomNumberGenerator.getCallCount(), formatBuf, 128, 10);
; 912  : 		rngLogMessage += formatBuf;
; 913  : 		rngLogMessage += ", remote.callCount=";
; 914  : 		_itoa_s(pkRandom->getCallCount(), formatBuf, 128, 10);
; 915  : 		rngLogMessage += formatBuf;
; 916  : 		rngLogMessage += "\n\tlocal.resetCount=";
; 917  : 		_itoa_s(localSimRandomNumberGenerator.getResetCount(), formatBuf, 128, 10);
; 918  : 		rngLogMessage += formatBuf;
; 919  : 		rngLogMessage += ", remote.resetCount=";
; 920  : 		_itoa_s(pkRandom->getResetCount(), formatBuf, 128, 10);
; 921  : 		rngLogMessage += formatBuf;
; 922  : #else
; 923  : 		rngLogMessage += _itoa_s(localSimRandomNumberGenerator.getSeed(), formatBuf, 10);

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?getSeed@CvRandom@@QBEKXZ		; CvRandom::getSeed
	mov	DWORD PTR $T228772[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	eax, DWORD PTR _formatBuf$222401[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228772[ebp]
	push	ecx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 924  : 		rngLogMessage += ", remote.seed=";

	push	OFFSET ??_C@_0P@KGOBJAEJ@?0?5remote?4seed?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 925  : 		rngLogMessage += _itoa_s(pkRandom->getSeed(), formatBuf, 10);

	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?getSeed@CvRandom@@QBEKXZ		; CvRandom::getSeed
	mov	DWORD PTR $T228776[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR $T228776[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 926  : 		rngLogMessage += "\n\tlocal.callCount=";

	push	OFFSET ??_C@_0BD@EDPFCHII@?6?7local?4callCount?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 927  : 		rngLogMessage += _itoa_s(localSimRandomNumberGenerator.getCallCount(), formatBuf, 10);

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?getCallCount@CvRandom@@QBEKXZ		; CvRandom::getCallCount
	mov	DWORD PTR $T228780[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228780[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 928  : 		rngLogMessage += ", remote.callCount=";

	push	OFFSET ??_C@_0BE@PGKLMCHP@?0?5remote?4callCount?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 929  : 		rngLogMessage += _itoa_s(pkRandom->getCallCount(), formatBuf, 10);

	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?getCallCount@CvRandom@@QBEKXZ		; CvRandom::getCallCount
	mov	DWORD PTR $T228784[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	eax, DWORD PTR _formatBuf$222401[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228784[ebp]
	push	ecx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 930  : 		rngLogMessage += "\n\tlocal.resetCount=";

	push	OFFSET ??_C@_0BE@KGCNIHPC@?6?7local?4resetCount?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 931  : 		rngLogMessage += _itoa_s(localSimRandomNumberGenerator.getResetCount(), formatBuf, 10);

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?getResetCount@CvRandom@@QBEKXZ		; CvRandom::getResetCount
	mov	DWORD PTR $T228788[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR $T228788[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 932  : 		rngLogMessage += ", remote.resetCount=";

	push	OFFSET ??_C@_0BF@IFEBLOKI@?0?5remote?4resetCount?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 933  : 		rngLogMessage += _itoa_s(pkRandom->getResetCount(), formatBuf, 10);

	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?getResetCount@CvRandom@@QBEKXZ		; CvRandom::getResetCount
	mov	DWORD PTR $T228792[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR $T228792[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 934  : #endif
; 935  : 		rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 936  : 
; 937  : 		if(localSimRandomNumberGenerator.callStackDebuggingEnabled() && pkRandom->callStackDebuggingEnabled())

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?callStackDebuggingEnabled@CvRandom@@QBE_NXZ ; CvRandom::callStackDebuggingEnabled
	movzx	eax, al
	test	eax, eax
	je	$LN37@RandomNumb
	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?callStackDebuggingEnabled@CvRandom@@QBE_NXZ ; CvRandom::callStackDebuggingEnabled
	movzx	ecx, al
	test	ecx, ecx
	je	$LN37@RandomNumb

; 938  : 		{
; 939  : #ifndef AUI_WARNING_FIXES
; 940  : 			std::string localCallStack("");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _localCallStack$222417[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 941  : 			std::string remoteCallStack("");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	ecx, DWORD PTR _remoteCallStack$222418[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 942  : #endif
; 943  : 			localSimRandomNumberGenerator.resolveCallStacks();

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?resolveCallStacks@CvRandom@@QBEXXZ	; CvRandom::resolveCallStacks

; 944  : 			const std::vector<std::string>& localCallStacks = localSimRandomNumberGenerator.getResolvedCallStacks();

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?getResolvedCallStacks@CvRandom@@QBEABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; CvRandom::getResolvedCallStacks
	mov	DWORD PTR _localCallStacks$222423[ebp], eax

; 945  : 			const std::vector<std::string>& remoteCallStacks =  pkRandom->getResolvedCallStacks();

	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?getResolvedCallStacks@CvRandom@@QBEABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; CvRandom::getResolvedCallStacks
	mov	DWORD PTR _remoteCallStacks$222428[ebp], eax

; 946  : 			const std::vector<unsigned long>& localSeedHistory = localSimRandomNumberGenerator.getSeedHistory();

	mov	ecx, DWORD PTR _localSimRandomNumberGenerator$[ebp]
	call	?getSeedHistory@CvRandom@@QBEABV?$vector@KV?$allocator@K@std@@@std@@XZ ; CvRandom::getSeedHistory
	mov	DWORD PTR _localSeedHistory$222433[ebp], eax

; 947  : 			const std::vector<unsigned long>& remoteSeedHistory = pkRandom->getSeedHistory();

	mov	ecx, DWORD PTR _pkRandom$[ebp]
	call	?getSeedHistory@CvRandom@@QBEABV?$vector@KV?$allocator@K@std@@@std@@XZ ; CvRandom::getSeedHistory
	mov	DWORD PTR _remoteSeedHistory$222438[ebp], eax

; 948  : 			std::vector<unsigned long>::const_iterator localSeedIterator = localSeedHistory.begin();

	mov	edx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228797[ebp], eax
	mov	ecx, DWORD PTR $T228797[ebp]
	mov	DWORD PTR _localSeedIterator$222842[ebp], ecx

; 949  : 			std::vector<unsigned long>::const_iterator remoteSeedIterator = remoteSeedHistory.begin();

	mov	edx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228806[ebp], eax
	mov	ecx, DWORD PTR $T228806[ebp]
	mov	DWORD PTR _remoteSeedIterator$222848[ebp], ecx

; 950  : 			unsigned int callNumber = 0;

	mov	DWORD PTR _callNumber$222850[ebp], 0

; 951  : 			for(localSeedIterator = localSeedHistory.begin(), remoteSeedIterator = remoteSeedHistory.begin(); localSeedIterator != localSeedHistory.end() && remoteSeedIterator != remoteSeedHistory.end(); ++localSeedIterator, ++remoteSeedIterator, ++callNumber)

	mov	edx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228815[ebp], eax
	mov	ecx, DWORD PTR $T228815[ebp]
	mov	DWORD PTR $T228738[ebp], ecx
	mov	edx, DWORD PTR $T228738[ebp]
	mov	DWORD PTR _localSeedIterator$222842[ebp], edx
	mov	eax, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T228824[ebp], ecx
	mov	edx, DWORD PTR $T228824[ebp]
	mov	DWORD PTR $T228739[ebp], edx
	mov	eax, DWORD PTR $T228739[ebp]
	mov	DWORD PTR _remoteSeedIterator$222848[ebp], eax
	jmp	SHORT $LN36@RandomNumb
$LN35@RandomNumb:
	mov	ecx, DWORD PTR _localSeedIterator$222842[ebp]
	add	ecx, 4
	mov	DWORD PTR _localSeedIterator$222842[ebp], ecx
	mov	edx, DWORD PTR _remoteSeedIterator$222848[ebp]
	add	edx, 4
	mov	DWORD PTR _remoteSeedIterator$222848[ebp], edx
	mov	eax, DWORD PTR _callNumber$222850[ebp]
	add	eax, 1
	mov	DWORD PTR _callNumber$222850[ebp], eax
$LN36@RandomNumb:
	mov	ecx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228839[ebp], edx
	mov	eax, DWORD PTR $T228839[ebp]
	mov	DWORD PTR $T228740[ebp], eax
	mov	ecx, DWORD PTR _localSeedIterator$222842[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T228740[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN34@RandomNumb
	mov	edx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T228856[ebp], eax
	mov	ecx, DWORD PTR $T228856[ebp]
	mov	DWORD PTR $T228741[ebp], ecx
	mov	edx, DWORD PTR _remoteSeedIterator$222848[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T228741[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN34@RandomNumb

; 952  : 			{
; 953  : 				if(*localSeedIterator != *remoteSeedIterator)

	mov	eax, DWORD PTR _localSeedIterator$222842[ebp]
	mov	DWORD PTR $T228872[ebp], eax
	mov	ecx, DWORD PTR $T228872[ebp]
	mov	edx, DWORD PTR _remoteSeedIterator$222848[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	$LN33@RandomNumb

; 954  : 				{
; 955  : 					if(callNumber < localCallStacks.size() && callNumber < remoteCallStacks.size())

	mov	ecx, DWORD PTR _localCallStacks$222423[ebp]
	mov	edx, DWORD PTR _localCallStacks$222423[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	cmp	DWORD PTR _callNumber$222850[ebp], eax
	jae	$LN33@RandomNumb
	mov	edx, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	eax, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	cmp	DWORD PTR _callNumber$222850[ebp], eax
	jae	$LN33@RandomNumb

; 956  : 					{
; 957  : 						rngLogMessage += "At Call #";

	push	OFFSET ??_C@_09CEKJFLPF@At?5Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 958  : #ifdef AUI_WARNING_FIXES
; 959  : 						_itoa_s(callNumber, formatBuf, 128, 10);
; 960  : 						rngLogMessage += formatBuf;
; 961  : 						rngLogMessage += " random number seeds are different.\n";
; 962  : 						if (callNumber > 0)
; 963  : 						{
; 964  : 							rngLogMessage += "Call #";
; 965  : 							_itoa_s(callNumber - 1, formatBuf, 128, 10);
; 966  : 							rngLogMessage += formatBuf;
; 967  : 							rngLogMessage += "\nLocal:\n";
; 968  : 							rngLogMessage += localCallStacks[callNumber - 1];
; 969  : 							rngLogMessage += "\nRemote:\n";
; 970  : 							rngLogMessage += remoteCallStacks[callNumber - 1];
; 971  : 						}
; 972  : 						rngLogMessage += "Call #";
; 973  : 						_itoa_s(callNumber, formatBuf, 128, 10);
; 974  : 						rngLogMessage += formatBuf;
; 975  : #else
; 976  : 						rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR _callNumber$222850[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 977  : 						rngLogMessage += " random number seeds are different.\n";

	push	OFFSET ??_C@_0CF@LOLFHJLH@?5random?5number?5seeds?5are?5differe@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 978  : 						if(callNumber > 0)

	cmp	DWORD PTR _callNumber$222850[ebp], 0
	jbe	$LN31@RandomNumb

; 979  : 						{
; 980  : 							rngLogMessage += "Call #";

	push	OFFSET ??_C@_06HPAOHAOM@Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 981  : 							rngLogMessage += _itoa_s(callNumber - 1, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR _callNumber$222850[ebp]
	sub	edx, 1
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 982  : 							rngLogMessage += "\nLocal:\n";

	push	OFFSET ??_C@_08HMFGJBP@?6Local?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 983  : 							rngLogMessage += localCallStacks[callNumber - 1];

	mov	eax, DWORD PTR _callNumber$222850[ebp]
	sub	eax, 1
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _localCallStacks$222423[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 984  : 							rngLogMessage += "\nRemote:\n";

	push	OFFSET ??_C@_09PICJJDH@?6Remote?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 985  : 							rngLogMessage += remoteCallStacks[callNumber - 1];

	mov	edx, DWORD PTR _callNumber$222850[ebp]
	sub	edx, 1
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _remoteCallStacks$222428[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN31@RandomNumb:

; 986  : 						}
; 987  : 						rngLogMessage += "Call #";

	push	OFFSET ??_C@_06HPAOHAOM@Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 988  : 						rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR _callNumber$222850[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 989  : #endif
; 990  : 						rngLogMessage += "\nLocal:\n";

	push	OFFSET ??_C@_08HMFGJBP@?6Local?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 991  : 						rngLogMessage += localCallStacks[callNumber];

	mov	eax, DWORD PTR _callNumber$222850[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _localCallStacks$222423[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 992  : 						rngLogMessage += "\nRemote:\n";

	push	OFFSET ??_C@_09PICJJDH@?6Remote?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 993  : 						rngLogMessage += remoteCallStacks[callNumber];

	mov	edx, DWORD PTR _callNumber$222850[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _remoteCallStacks$222428[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 994  : 						break;

	jmp	SHORT $LN34@RandomNumb
$LN33@RandomNumb:

; 995  : 					}
; 996  : 				}
; 997  : 			}

	jmp	$LN35@RandomNumb
$LN34@RandomNumb:

; 998  : 			if(localSeedIterator != localSeedHistory.end() && remoteSeedIterator == remoteSeedHistory.end())

	mov	ecx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228907[ebp], edx
	mov	eax, DWORD PTR $T228907[ebp]
	mov	DWORD PTR $T228742[ebp], eax
	mov	ecx, DWORD PTR _localSeedIterator$222842[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T228742[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN30@RandomNumb
	mov	edx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T228924[ebp], eax
	mov	ecx, DWORD PTR $T228924[ebp]
	mov	DWORD PTR $T228743[ebp], ecx
	mov	edx, DWORD PTR _remoteSeedIterator$222848[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T228743[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN30@RandomNumb

; 999  : 			{
; 1000 : 				rngLogMessage += "\nLocal random number generator called more than remote at call #";

	push	OFFSET ??_C@_0EB@HAKMNBDI@?6Local?5random?5number?5generator?5c@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1001 : #ifdef AUI_WARNING_FIXES
; 1002 : 				_itoa_s(callNumber, formatBuf, 128, 10);
; 1003 : 				rngLogMessage += formatBuf;
; 1004 : #else
; 1005 : 				rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR _callNumber$222850[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1006 : #endif
; 1007 : 				rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1008 : 				if(callNumber < localSeedHistory.size())

	mov	ecx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	edx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _callNumber$222850[ebp], eax
	jae	SHORT $LN29@RandomNumb

; 1009 : 				{
; 1010 : 					rngLogMessage += "Local CallStack:\n";

	push	OFFSET ??_C@_0BC@DDEGDMIL@Local?5CallStack?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1011 : 					rngLogMessage += localCallStacks[callNumber];

	mov	ecx, DWORD PTR _callNumber$222850[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _localCallStacks$222423[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN29@RandomNumb:

; 1012 : 				}
; 1013 : 			}

	jmp	$LN28@RandomNumb
$LN30@RandomNumb:

; 1014 : 			else if(remoteSeedIterator != remoteSeedHistory.end() && localSeedIterator == localSeedHistory.end())

	mov	eax, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T228945[ebp], ecx
	mov	edx, DWORD PTR $T228945[ebp]
	mov	DWORD PTR $T228744[ebp], edx
	mov	eax, DWORD PTR _remoteSeedIterator$222848[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T228744[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN28@RandomNumb
	mov	ecx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T228962[ebp], edx
	mov	eax, DWORD PTR $T228962[ebp]
	mov	DWORD PTR $T228745[ebp], eax
	mov	ecx, DWORD PTR _localSeedIterator$222842[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T228745[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN28@RandomNumb

; 1015 : 			{
; 1016 : 				rngLogMessage += "\nremote random number generator called more than local at call #";

	push	OFFSET ??_C@_0EB@JIFICGIN@?6remote?5random?5number?5generator?5@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1017 : #ifdef AUI_WARNING_FIXES
; 1018 : 				_itoa_s(callNumber, formatBuf, 128, 10);
; 1019 : 				rngLogMessage += formatBuf;
; 1020 : #else
; 1021 : 				rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR _callNumber$222850[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1022 : #endif
; 1023 : 				rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1024 : 				if(callNumber < remoteSeedHistory.size())

	mov	eax, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	ecx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR _callNumber$222850[ebp], edx
	jae	SHORT $LN28@RandomNumb

; 1025 : 				{
; 1026 : 					rngLogMessage += "remote CallStack:\n";

	push	OFFSET ??_C@_0BD@INMHKADI@remote?5CallStack?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1027 : 					rngLogMessage += remoteCallStacks[callNumber];

	mov	eax, DWORD PTR _callNumber$222850[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _remoteCallStacks$222428[ebp]
	add	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN28@RandomNumb:

; 1028 : 				}
; 1029 : 			}
; 1030 : 
; 1031 : 			// find first different call
; 1032 : 			std::vector<std::string>::const_iterator localCallStackIterator;

	mov	DWORD PTR _localCallStackIterator$222987[ebp], 0

; 1033 : 			std::vector<std::string>::const_iterator remoteCallStackIterator;

	mov	DWORD PTR _remoteCallStackIterator$222992[ebp], 0

; 1034 : 			for(localCallStackIterator = localCallStacks.begin(), remoteCallStackIterator = remoteCallStacks.begin(), callNumber = 0; localCallStackIterator != localCallStacks.end() && remoteCallStackIterator != remoteCallStacks.end(); ++localCallStackIterator, ++remoteCallStackIterator, ++callNumber)

	mov	edx, DWORD PTR _localCallStacks$222423[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T228989[ebp], eax
	mov	ecx, DWORD PTR $T228989[ebp]
	mov	DWORD PTR $T228746[ebp], ecx
	mov	edx, DWORD PTR $T228746[ebp]
	mov	DWORD PTR _localCallStackIterator$222987[ebp], edx
	mov	eax, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T228998[ebp], ecx
	mov	edx, DWORD PTR $T228998[ebp]
	mov	DWORD PTR $T228747[ebp], edx
	mov	eax, DWORD PTR $T228747[ebp]
	mov	DWORD PTR _remoteCallStackIterator$222992[ebp], eax
	mov	DWORD PTR _callNumber$222850[ebp], 0
	jmp	SHORT $LN25@RandomNumb
$LN24@RandomNumb:
	mov	ecx, DWORD PTR _localCallStackIterator$222987[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _localCallStackIterator$222987[ebp], ecx
	mov	edx, DWORD PTR _remoteCallStackIterator$222992[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _remoteCallStackIterator$222992[ebp], edx
	mov	eax, DWORD PTR _callNumber$222850[ebp]
	add	eax, 1
	mov	DWORD PTR _callNumber$222850[ebp], eax
$LN25@RandomNumb:
	mov	ecx, DWORD PTR _localCallStacks$222423[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T229013[ebp], edx
	mov	eax, DWORD PTR $T229013[ebp]
	mov	DWORD PTR $T228748[ebp], eax
	mov	ecx, DWORD PTR _localCallStackIterator$222987[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T228748[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN23@RandomNumb
	mov	edx, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T229030[ebp], eax
	mov	ecx, DWORD PTR $T229030[ebp]
	mov	DWORD PTR $T228749[ebp], ecx
	mov	edx, DWORD PTR _remoteCallStackIterator$222992[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T228749[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN23@RandomNumb

; 1035 : 			{
; 1036 : 				if(*localCallStackIterator != *remoteCallStackIterator)

	mov	eax, DWORD PTR _remoteCallStackIterator$222992[ebp]
	mov	DWORD PTR $T229046[ebp], eax
	mov	ecx, DWORD PTR _localCallStackIterator$222987[ebp]
	mov	DWORD PTR $T229050[ebp], ecx
	mov	edx, DWORD PTR $T229046[ebp]
	push	edx
	mov	eax, DWORD PTR $T229050[ebp]
	push	eax
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN22@RandomNumb

; 1037 : 				{
; 1038 : 					rngLogMessage += "\nFirst different callstack at call #";

	push	OFFSET ??_C@_0CF@EPEKCELF@?6First?5different?5callstack?5at?5ca@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1039 : #ifdef AUI_WARNING_FIXES
; 1040 : 					_itoa_s(callNumber, formatBuf, 128, 10);
; 1041 : 					rngLogMessage += formatBuf;
; 1042 : #else
; 1043 : 					rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR _callNumber$222850[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1044 : #endif
; 1045 : 					rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1046 : 					rngLogMessage += "Local :\n";

	push	OFFSET ??_C@_08HOIOJOGM@Local?5?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1047 : 					rngLogMessage += *localCallStackIterator;

	mov	ecx, DWORD PTR _localCallStackIterator$222987[ebp]
	push	ecx
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1048 : 					rngLogMessage += "Remote :\n";

	push	OFFSET ??_C@_09DDDABMGJ@Remote?5?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1049 : 					rngLogMessage += *remoteCallStackIterator;

	mov	edx, DWORD PTR _remoteCallStackIterator$222992[ebp]
	push	edx
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1050 : 					break;

	jmp	SHORT $LN23@RandomNumb
$LN22@RandomNumb:

; 1051 : 				}
; 1052 : 			}

	jmp	$LN24@RandomNumb
$LN23@RandomNumb:

; 1053 : 
; 1054 : 			if(logFile)

	cmp	DWORD PTR _logFile$222399[ebp], 0
	je	SHORT $LN21@RandomNumb

; 1055 : 			{
; 1056 : 				logFile->DebugMsg(rngLogMessage.c_str());

	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	eax, DWORD PTR _logFile$222399[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _logFile$222399[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	add	esp, 8
$LN21@RandomNumb:

; 1057 : 			}
; 1058 : 
; 1059 : 			CvAssertMsg(false, rngLogMessage.c_str());
; 1060 : 
; 1061 : 			if(logFile)

	cmp	DWORD PTR _logFile$222399[ebp], 0
	je	$LN20@RandomNumb

; 1062 : 			{
; 1063 : 				rngLogMessage = "\nDebug dump:\n";

	push	OFFSET ??_C@_0O@BFICDMLA@?6Debug?5dump?3?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1064 : 
; 1065 : 
; 1066 : 				// add full history
; 1067 : 				rngLogMessage += "Seed History -\n";

	push	OFFSET ??_C@_0BA@FILKIODF@Seed?5History?5?9?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1068 : 				localSeedIterator = localSeedHistory.begin();

	mov	ecx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T229064[ebp], edx
	mov	eax, DWORD PTR $T229064[ebp]
	mov	DWORD PTR $T228750[ebp], eax
	mov	ecx, DWORD PTR $T228750[ebp]
	mov	DWORD PTR _localSeedIterator$222842[ebp], ecx

; 1069 : 				remoteSeedIterator = remoteSeedHistory.begin();

	mov	edx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T229073[ebp], eax
	mov	ecx, DWORD PTR $T229073[ebp]
	mov	DWORD PTR $T228751[ebp], ecx
	mov	edx, DWORD PTR $T228751[ebp]
	mov	DWORD PTR _remoteSeedIterator$222848[ebp], edx

; 1070 : 				callNumber = 0;

	mov	DWORD PTR _callNumber$222850[ebp], 0
$LN19@RandomNumb:

; 1071 : 				while(localSeedIterator != localSeedHistory.end() || remoteSeedIterator != remoteSeedHistory.end())

	mov	eax, DWORD PTR _localSeedHistory$222433[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T229082[ebp], ecx
	mov	edx, DWORD PTR $T229082[ebp]
	mov	DWORD PTR $T228752[ebp], edx
	mov	eax, DWORD PTR _localSeedIterator$222842[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T228752[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN17@RandomNumb
	mov	ecx, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T229099[ebp], edx
	mov	eax, DWORD PTR $T229099[ebp]
	mov	DWORD PTR $T228753[ebp], eax
	mov	ecx, DWORD PTR _remoteSeedIterator$222848[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T228753[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN18@RandomNumb
$LN17@RandomNumb:

; 1072 : 				{
; 1073 : 					++callNumber;

	mov	edx, DWORD PTR _callNumber$222850[ebp]
	add	edx, 1
	mov	DWORD PTR _callNumber$222850[ebp], edx

; 1074 : 					rngLogMessage += "\t Call #";

	push	OFFSET ??_C@_08FBLOGPDB@?7?5Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1075 : #ifdef AUI_WARNING_FIXES
; 1076 : 					_itoa_s(callNumber, formatBuf, 128, 10);
; 1077 : 					rngLogMessage += formatBuf;
; 1078 : #else
; 1079 : 					rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	eax, DWORD PTR _formatBuf$222401[ebp]
	push	eax
	mov	ecx, DWORD PTR _callNumber$222850[ebp]
	push	ecx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1080 : #endif
; 1081 : 					rngLogMessage += " LOCAL=";

	push	OFFSET ??_C@_07DBJNMEKP@?5LOCAL?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1082 : 					if(localSeedIterator != localSeedHistory.end())

	mov	edx, DWORD PTR _localSeedHistory$222433[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T229119[ebp], eax
	mov	ecx, DWORD PTR $T229119[ebp]
	mov	DWORD PTR $T228754[ebp], ecx
	mov	edx, DWORD PTR _localSeedIterator$222842[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T228754[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN16@RandomNumb

; 1083 : 					{
; 1084 : #ifdef AUI_WARNING_FIXES
; 1085 : 						_itoa_s(*localSeedIterator, formatBuf, 128, 10);
; 1086 : 						rngLogMessage += formatBuf;
; 1087 : #else
; 1088 : 						rngLogMessage += _itoa_s(*localSeedIterator, formatBuf, 10);

	mov	eax, DWORD PTR _localSeedIterator$222842[ebp]
	mov	DWORD PTR $T229135[ebp], eax
	mov	ecx, DWORD PTR $T229135[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229139[ebp], edx
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	eax, DWORD PTR _formatBuf$222401[ebp]
	push	eax
	mov	ecx, DWORD PTR $T229139[ebp]
	push	ecx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1089 : #endif
; 1090 : 						++localSeedIterator;

	mov	edx, DWORD PTR _localSeedIterator$222842[ebp]
	add	edx, 4
	mov	DWORD PTR _localSeedIterator$222842[ebp], edx
$LN16@RandomNumb:

; 1091 : 					}
; 1092 : 					rngLogMessage += "\tREMOTE=";

	push	OFFSET ??_C@_08IFNGLKCF@?7REMOTE?$DN?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1093 : 					if(remoteSeedIterator != remoteSeedHistory.end())

	mov	eax, DWORD PTR _remoteSeedHistory$222438[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T229147[ebp], ecx
	mov	edx, DWORD PTR $T229147[ebp]
	mov	DWORD PTR $T228755[ebp], edx
	mov	eax, DWORD PTR _remoteSeedIterator$222848[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T228755[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN15@RandomNumb

; 1094 : 					{
; 1095 : #ifdef AUI_WARNING_FIXES
; 1096 : 						_itoa_s(*remoteSeedIterator, formatBuf, 128, 10);
; 1097 : 						rngLogMessage += formatBuf;
; 1098 : #else
; 1099 : 						rngLogMessage += _itoa_s(*remoteSeedIterator, formatBuf, 10);

	mov	ecx, DWORD PTR _remoteSeedIterator$222848[ebp]
	mov	DWORD PTR $T229163[ebp], ecx
	mov	edx, DWORD PTR $T229163[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229167[ebp], eax
	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR $T229167[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1100 : #endif
; 1101 : 						++remoteSeedIterator;

	mov	eax, DWORD PTR _remoteSeedIterator$222848[ebp]
	add	eax, 4
	mov	DWORD PTR _remoteSeedIterator$222848[ebp], eax
$LN15@RandomNumb:

; 1102 : 					}
; 1103 : 					rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1104 : 				}

	jmp	$LN19@RandomNumb
$LN18@RandomNumb:

; 1105 : 
; 1106 : 				rngLogMessage += "\nLocal callstack history\n";

	push	OFFSET ??_C@_0BK@NPJAKILA@?6Local?5callstack?5history?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1107 : 				callNumber = 0;

	mov	DWORD PTR _callNumber$222850[ebp], 0

; 1108 : 				std::string lastCallStackLogged;

	lea	ecx, DWORD PTR _lastCallStackLogged$223024[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1109 : 				unsigned int repeatCount = 0;

	mov	DWORD PTR _repeatCount$223025[ebp], 0

; 1110 : 				std::vector<std::string>::const_iterator i;

	mov	DWORD PTR _i$223030[ebp], 0

; 1111 : 				for(i = localCallStacks.begin(); i != localCallStacks.end(); ++i)

	mov	ecx, DWORD PTR _localCallStacks$222423[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T229178[ebp], edx
	mov	eax, DWORD PTR $T229178[ebp]
	mov	DWORD PTR $T228756[ebp], eax
	mov	ecx, DWORD PTR $T228756[ebp]
	mov	DWORD PTR _i$223030[ebp], ecx
	jmp	SHORT $LN14@RandomNumb
$LN13@RandomNumb:
	mov	edx, DWORD PTR _i$223030[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _i$223030[ebp], edx
$LN14@RandomNumb:
	mov	eax, DWORD PTR _localCallStacks$222423[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T229190[ebp], ecx
	mov	edx, DWORD PTR $T229190[ebp]
	mov	DWORD PTR $T228757[ebp], edx
	mov	eax, DWORD PTR _i$223030[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T228757[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN12@RandomNumb

; 1112 : 				{
; 1113 : 					if(lastCallStackLogged != *i)

	mov	ecx, DWORD PTR _i$223030[ebp]
	mov	DWORD PTR $T229206[ebp], ecx
	mov	edx, DWORD PTR $T229206[ebp]
	push	edx
	lea	eax, DWORD PTR _lastCallStackLogged$223024[ebp]
	push	eax
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN11@RandomNumb

; 1114 : 					{
; 1115 : 						if(repeatCount > 0)

	cmp	DWORD PTR _repeatCount$223025[ebp], 0
	jbe	SHORT $LN10@RandomNumb

; 1116 : 						{
; 1117 : 							rngLogMessage += "Last message repeated ";

	push	OFFSET ??_C@_0BH@IHKEFPDL@Last?5message?5repeated?5?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1118 : #ifdef AUI_WARNING_FIXES
; 1119 : 							_itoa_s(repeatCount, formatBuf, 128, 10);
; 1120 : 							rngLogMessage += formatBuf;
; 1121 : #else
; 1122 : 							rngLogMessage += _itoa_s(repeatCount, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR _repeatCount$223025[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1123 : #endif
; 1124 : 							rngLogMessage += " times\n";

	push	OFFSET ??_C@_07JFHFGCCE@?5times?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN10@RandomNumb:

; 1125 : 						}
; 1126 : 						rngLogMessage += "Call #";

	push	OFFSET ??_C@_06HPAOHAOM@Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1127 : #ifdef AUI_WARNING_FIXES
; 1128 : 						_itoa_s(callNumber, formatBuf, 128, 10);
; 1129 : 						rngLogMessage += formatBuf;
; 1130 : #else
; 1131 : 						rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR _callNumber$222850[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1132 : #endif
; 1133 : 						rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1134 : 						rngLogMessage += *i;

	mov	eax, DWORD PTR _i$223030[ebp]
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1135 : 						lastCallStackLogged = *i;

	mov	ecx, DWORD PTR _i$223030[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lastCallStackLogged$223024[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1136 : 						repeatCount = 0;

	mov	DWORD PTR _repeatCount$223025[ebp], 0

; 1137 : 					}
; 1138 : 					else

	jmp	SHORT $LN9@RandomNumb
$LN11@RandomNumb:

; 1139 : 					{
; 1140 : 						repeatCount++;

	mov	edx, DWORD PTR _repeatCount$223025[ebp]
	add	edx, 1
	mov	DWORD PTR _repeatCount$223025[ebp], edx
$LN9@RandomNumb:

; 1141 : 					}
; 1142 : 					++callNumber;

	mov	eax, DWORD PTR _callNumber$222850[ebp]
	add	eax, 1
	mov	DWORD PTR _callNumber$222850[ebp], eax

; 1143 : 				}

	jmp	$LN13@RandomNumb
$LN12@RandomNumb:

; 1144 : 
; 1145 : 				rngLogMessage += "\nRemote callstack history\n";

	push	OFFSET ??_C@_0BL@PGBLOBGI@?6Remote?5callstack?5history?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1146 : 				callNumber = 0;

	mov	DWORD PTR _callNumber$222850[ebp], 0

; 1147 : 				repeatCount = 0;

	mov	DWORD PTR _repeatCount$223025[ebp], 0

; 1148 : 				for(i = remoteCallStacks.begin(); i != remoteCallStacks.end(); ++i)

	mov	ecx, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T229223[ebp], edx
	mov	eax, DWORD PTR $T229223[ebp]
	mov	DWORD PTR $T228758[ebp], eax
	mov	ecx, DWORD PTR $T228758[ebp]
	mov	DWORD PTR _i$223030[ebp], ecx
	jmp	SHORT $LN8@RandomNumb
$LN7@RandomNumb:
	mov	edx, DWORD PTR _i$223030[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _i$223030[ebp], edx
$LN8@RandomNumb:
	mov	eax, DWORD PTR _remoteCallStacks$222428[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T229235[ebp], ecx
	mov	edx, DWORD PTR $T229235[ebp]
	mov	DWORD PTR $T228759[ebp], edx
	mov	eax, DWORD PTR _i$223030[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T228759[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN6@RandomNumb

; 1149 : 				{
; 1150 : 					if(lastCallStackLogged != *i)

	mov	ecx, DWORD PTR _i$223030[ebp]
	mov	DWORD PTR $T229251[ebp], ecx
	mov	edx, DWORD PTR $T229251[ebp]
	push	edx
	lea	eax, DWORD PTR _lastCallStackLogged$223024[ebp]
	push	eax
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@RandomNumb

; 1151 : 					{
; 1152 : 						if(repeatCount > 0)

	cmp	DWORD PTR _repeatCount$223025[ebp], 0
	jbe	SHORT $LN4@RandomNumb

; 1153 : 						{
; 1154 : 							rngLogMessage += "Last message repeated ";

	push	OFFSET ??_C@_0BH@IHKEFPDL@Last?5message?5repeated?5?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1155 : #ifdef AUI_WARNING_FIXES
; 1156 : 							_itoa_s(repeatCount, formatBuf, 128, 10);
; 1157 : 							rngLogMessage += formatBuf;
; 1158 : #else
; 1159 : 							rngLogMessage += _itoa_s(repeatCount, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	edx, DWORD PTR _formatBuf$222401[ebp]
	push	edx
	mov	eax, DWORD PTR _repeatCount$223025[ebp]
	push	eax
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1160 : #endif
; 1161 : 							rngLogMessage += " times\n";

	push	OFFSET ??_C@_07JFHFGCCE@?5times?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN4@RandomNumb:

; 1162 : 						}
; 1163 : 						rngLogMessage += "Call #";

	push	OFFSET ??_C@_06HPAOHAOM@Call?5?$CD?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1164 : #ifdef AUI_WARNING_FIXES
; 1165 : 						_itoa_s(callNumber, formatBuf, 128, 10);
; 1166 : 						rngLogMessage += formatBuf;
; 1167 : #else
; 1168 : 						rngLogMessage += _itoa_s(callNumber, formatBuf, 10);

	push	10					; 0000000aH
	push	128					; 00000080H
	lea	ecx, DWORD PTR _formatBuf$222401[ebp]
	push	ecx
	mov	edx, DWORD PTR _callNumber$222850[ebp]
	push	edx
	call	DWORD PTR __imp___itoa_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z

; 1169 : #endif
; 1170 : 						rngLogMessage += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1171 : 						rngLogMessage += *i;

	mov	eax, DWORD PTR _i$223030[ebp]
	push	eax
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1172 : 						lastCallStackLogged = *i;

	mov	ecx, DWORD PTR _i$223030[ebp]
	push	ecx
	lea	ecx, DWORD PTR _lastCallStackLogged$223024[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 1173 : 						repeatCount = 0;

	mov	DWORD PTR _repeatCount$223025[ebp], 0

; 1174 : 					}
; 1175 : 					else

	jmp	SHORT $LN3@RandomNumb
$LN5@RandomNumb:

; 1176 : 					{
; 1177 : 						repeatCount++;

	mov	edx, DWORD PTR _repeatCount$223025[ebp]
	add	edx, 1
	mov	DWORD PTR _repeatCount$223025[ebp], edx
$LN3@RandomNumb:

; 1178 : 					}
; 1179 : 					++callNumber;

	mov	eax, DWORD PTR _callNumber$222850[ebp]
	add	eax, 1
	mov	DWORD PTR _callNumber$222850[ebp], eax

; 1180 : 				}

	jmp	$LN7@RandomNumb
$LN6@RandomNumb:

; 1181 : 				logFile->DebugMsg(rngLogMessage.c_str());

	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _logFile$222399[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _logFile$222399[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
	add	esp, 8

; 1182 : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _lastCallStackLogged$223024[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN20@RandomNumb:

; 1183 : 
; 1184 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _remoteCallStack$222418[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _localCallStack$222417[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1185 : 		else

	jmp	SHORT $LN2@RandomNumb
$LN37@RandomNumb:

; 1186 : 		{
; 1187 : 			if(logFile)

	cmp	DWORD PTR _logFile$222399[ebp], 0
	je	SHORT $LN2@RandomNumb

; 1188 : 			{
; 1189 : 				logFile->DebugMsg(rngLogMessage.c_str());

	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	edx, DWORD PTR _logFile$222399[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _logFile$222399[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	add	esp, 8
$LN2@RandomNumb:

; 1190 : 			}
; 1191 : 			CvAssertMsg(false, rngLogMessage.c_str());
; 1192 : 		}
; 1193 : 
; 1194 : 
; 1195 : 		/* If this point has been reached, the OOS may be nearly unrecoverable
; 1196 : 		// attempt to recover
; 1197 : 		if(m_isHost)
; 1198 : 		{
; 1199 : 			CvRandom & rng = auto_ptr<ICvGame1> pGame = GameCore::GetGame();\n.getJonRand();
; 1200 : 			rng.reset(m_simRandomNumberGenerator.getSeed());
; 1201 : 		}
; 1202 : 		// brute force approach
; 1203 : 		// JAR : todo - this is the solution of last resort if
; 1204 : 		// loadDelta() doesn't work out
; 1205 : 		*/
; 1206 : 		return false;

	mov	BYTE PTR $T228760[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T228760[ebp]
	jmp	SHORT $LN39@RandomNumb
$LN38@RandomNumb:

; 1207 : 	}
; 1208 : 
; 1209 : 	return true;

	mov	al, 1
$LN39@RandomNumb:

; 1210 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$0:
	lea	ecx, DWORD PTR _rngLogMessage$222403[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$1:
	lea	ecx, DWORD PTR _localCallStack$222417[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$2:
	lea	ecx, DWORD PTR _remoteCallStack$222418[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z$3:
	lea	ecx, DWORD PTR _lastCallStackLogged$223024[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-564]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RandomNumberGeneratorSyncCheck@CvDllGameContext@@UAG_NW4PlayerTypes@@PAVICvRandom1@@_N@Z ENDP ; CvDllGameContext::RandomNumberGeneratorSyncCheck
PUBLIC	?push_back@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::push_back
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CvRandom@@QAE@XZ:PROC			; CvRandom::CvRandom
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ$0
__ehfuncinfo$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ
_TEXT	SEGMENT
tv77 = -96						; size = 4
$T229275 = -36						; size = 4
$T229274 = -32						; size = 4
$T229273 = -28						; size = 4
_entry$ = -24						; size = 8
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ PROC ; CvDllGameContext::CreateRandomNumberGenerator, COMDAT

; 1213 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1214 : 	uint index = m_uiRngCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 1215 : 	std::pair<uint, CvRandom*> entry(index, FNEW(CvRandom, c_eCiv5GameplayDLL, 0));

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T229275[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T229275[ebp], 0
	je	SHORT $LN3@CreateRand
	mov	ecx, DWORD PTR $T229275[ebp]
	call	??0CvRandom@@QAE@XZ			; CvRandom::CvRandom
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@CreateRand
$LN3@CreateRand:
	mov	DWORD PTR tv77[ebp], 0
$LN4@CreateRand:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T229274[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T229274[ebp]
	mov	DWORD PTR $T229273[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR _entry$[ebp], ecx
	mov	edx, DWORD PTR $T229273[ebp]
	mov	DWORD PTR _entry$[ebp+4], edx

; 1216 : 
; 1217 : 	m_RandomNumberGenerators.push_back(entry);

	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?push_back@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::push_back

; 1218 : 	return index;

	mov	eax, DWORD PTR _index$[ebp]

; 1219 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ$0:
	mov	eax, DWORD PTR $T229275[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateRandomNumberGenerator@CvDllGameContext@@UAGIXZ ENDP ; CvDllGameContext::CreateRandomNumberGenerator
EXTRN	??3CvDllRandom@@SAXPAX@Z:PROC			; CvDllRandom::operator delete
EXTRN	??0CvDllRandom@@QAE@PAVCvRandom@@@Z:PROC	; CvDllRandom::CvDllRandom
EXTRN	??2CvDllRandom@@SAPAXI@Z:PROC			; CvDllRandom::operator new
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z$0
__ehfuncinfo$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z
_TEXT	SEGMENT
tv134 = -44						; size = 4
$T229476 = -40						; size = 4
$T229445 = -36						; size = 4
$T229421 = -32						; size = 4
$T229408 = -28						; size = 4
$T229407 = -24						; size = 4
$T229406 = -20						; size = 4
_it$223075 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z PROC ; CvDllGameContext::GetRandomNumberGenerator, COMDAT

; 1222 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1223 : 	for(std::vector<std::pair<uint, CvRandom*> >::iterator it = m_RandomNumberGenerators.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T229421[ebp], ecx
	mov	edx, DWORD PTR $T229421[ebp]
	mov	DWORD PTR _it$223075[ebp], edx

; 1224 : 	        it != m_RandomNumberGenerators.end(); ++it)

	jmp	SHORT $LN4@GetRandomN
$LN3@GetRandomN:
	mov	eax, DWORD PTR _it$223075[ebp]
	add	eax, 8
	mov	DWORD PTR _it$223075[ebp], eax
$LN4@GetRandomN:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T229445[ebp], edx
	mov	eax, DWORD PTR $T229445[ebp]
	mov	DWORD PTR $T229406[ebp], eax
	mov	ecx, DWORD PTR _it$223075[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T229406[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetRandomN

; 1225 : 	{
; 1226 : 		if((*it).first == index)

	mov	edx, DWORD PTR _it$223075[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _index$[ebp]
	jne	SHORT $LN1@GetRandomN

; 1227 : 			return new CvDllRandom((*it).second);

	push	12					; 0000000cH
	call	??2CvDllRandom@@SAPAXI@Z		; CvDllRandom::operator new
	add	esp, 4
	mov	DWORD PTR $T229408[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T229408[ebp], 0
	je	SHORT $LN7@GetRandomN
	mov	ecx, DWORD PTR _it$223075[ebp]
	mov	DWORD PTR $T229476[ebp], ecx
	mov	edx, DWORD PTR $T229476[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR $T229408[ebp]
	call	??0CvDllRandom@@QAE@PAVCvRandom@@@Z	; CvDllRandom::CvDllRandom
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN8@GetRandomN
$LN7@GetRandomN:
	mov	DWORD PTR tv134[ebp], 0
$LN8@GetRandomN:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T229407[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T229407[ebp]
	jmp	SHORT $LN5@GetRandomN
$LN1@GetRandomN:

; 1228 : 	}

	jmp	$LN3@GetRandomN
$LN2@GetRandomN:

; 1229 : 
; 1230 : 	return NULL;

	xor	eax, eax
$LN5@GetRandomN:

; 1231 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z$0:
	mov	eax, DWORD PTR $T229408[ebp]
	push	eax
	call	??3CvDllRandom@@SAXPAX@Z		; CvDllRandom::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRandomNumberGenerator@CvDllGameContext@@UAGPAVICvRandom1@@I@Z ENDP ; CvDllGameContext::GetRandomNumberGenerator
PUBLIC	?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase
; Function compile flags: /Odtp
;	COMDAT ?DestroyRandomNumberGenerator@CvDllGameContext@@UAGXI@Z
_TEXT	SEGMENT
tv151 = -108						; size = 4
$T229575 = -48						; size = 4
$T229543 = -44						; size = 4
$T229519 = -40						; size = 4
$T229503 = -36						; size = 4
$T229493 = -32						; size = 4
$T229492 = -28						; size = 4
$T229489 = -24						; size = 4
$T229488 = -20						; size = 4
$T229487 = -16						; size = 4
$T229486 = -12						; size = 4
$T229485 = -8						; size = 4
_it$ = -4						; size = 4
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?DestroyRandomNumberGenerator@CvDllGameContext@@UAGXI@Z PROC ; CvDllGameContext::DestroyRandomNumberGenerator, COMDAT

; 1234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 1235 : 	std::vector<std::pair<uint, CvRandom*> >::iterator it = m_RandomNumberGenerators.end();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR $T229503[ebp], ecx
	mov	edx, DWORD PTR $T229503[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 1236 : 	for(it = m_RandomNumberGenerators.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T229519[ebp], ecx
	mov	edx, DWORD PTR $T229519[ebp]
	mov	DWORD PTR $T229485[ebp], edx
	mov	eax, DWORD PTR $T229485[ebp]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN5@DestroyRan
$LN4@DestroyRan:

; 1237 : 	        it != m_RandomNumberGenerators.end(); ++it)

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 8
	mov	DWORD PTR _it$[ebp], ecx
$LN5@DestroyRan:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR $T229543[ebp], eax
	mov	ecx, DWORD PTR $T229543[ebp]
	mov	DWORD PTR $T229486[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T229486[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@DestroyRan

; 1238 : 	{
; 1239 : 		if((*it).first == index)

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _index$[ebp]
	jne	SHORT $LN2@DestroyRan

; 1240 : 			break;

	jmp	SHORT $LN3@DestroyRan
$LN2@DestroyRan:

; 1241 : 	}

	jmp	SHORT $LN4@DestroyRan
$LN3@DestroyRan:

; 1242 : 
; 1243 : 	if(it != m_RandomNumberGenerators.end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR $T229575[ebp], eax
	mov	ecx, DWORD PTR $T229575[ebp]
	mov	DWORD PTR $T229487[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T229487[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@DestroyRan

; 1244 : 	{
; 1245 : 		delete(*it).second;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T229489[ebp], ecx
	mov	edx, DWORD PTR $T229489[ebp]
	mov	DWORD PTR $T229488[ebp], edx
	cmp	DWORD PTR $T229488[ebp], 0
	je	SHORT $LN8@DestroyRan
	push	1
	mov	eax, DWORD PTR $T229488[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T229488[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN9@DestroyRan
$LN8@DestroyRan:
	mov	DWORD PTR tv151[ebp], 0
$LN9@DestroyRan:

; 1246 : 		m_RandomNumberGenerators.erase(it);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T229492[ebp], ecx
	mov	edx, DWORD PTR $T229492[ebp]
	push	edx
	lea	eax, DWORD PTR $T229493[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase
$LN6@DestroyRan:

; 1247 : 	}
; 1248 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DestroyRandomNumberGenerator@CvDllGameContext@@UAGXI@Z ENDP ; CvDllGameContext::DestroyRandomNumberGenerator
_TEXT	ENDS
PUBLIC	?push_back@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::push_back
EXTRN	??0CvDllNetInitInfo@@QAE@XZ:PROC		; CvDllNetInitInfo::CvDllNetInitInfo
EXTRN	??2CvDllNetInitInfo@@SAPAXI@Z:PROC		; CvDllNetInitInfo::operator new
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ$0
__ehfuncinfo$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?CreateNetInitInfo@CvDllGameContext@@UAGIXZ
_TEXT	SEGMENT
tv77 = -96						; size = 4
$T229721 = -36						; size = 4
$T229720 = -32						; size = 4
$T229719 = -28						; size = 4
_entry$ = -24						; size = 8
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?CreateNetInitInfo@CvDllGameContext@@UAGIXZ PROC	; CvDllGameContext::CreateNetInitInfo, COMDAT

; 1251 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1252 : 	uint index = m_uiNetInitInfoCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1253 : 	std::pair<uint, CvDllNetInitInfo*> entry(index, new CvDllNetInitInfo());

	push	764					; 000002fcH
	call	??2CvDllNetInitInfo@@SAPAXI@Z		; CvDllNetInitInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T229721[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T229721[ebp], 0
	je	SHORT $LN3@CreateNetI
	mov	ecx, DWORD PTR $T229721[ebp]
	call	??0CvDllNetInitInfo@@QAE@XZ		; CvDllNetInitInfo::CvDllNetInitInfo
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@CreateNetI
$LN3@CreateNetI:
	mov	DWORD PTR tv77[ebp], 0
$LN4@CreateNetI:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T229720[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T229720[ebp]
	mov	DWORD PTR $T229719[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR _entry$[ebp], ecx
	mov	edx, DWORD PTR $T229719[ebp]
	mov	DWORD PTR _entry$[ebp+4], edx

; 1254 : 
; 1255 : 	m_NetInitInfos.push_back(entry);

	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::push_back

; 1256 : 	return index;

	mov	eax, DWORD PTR _index$[ebp]

; 1257 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ$0:
	mov	eax, DWORD PTR $T229721[ebp]
	push	eax
	call	??3CvDllNetInitInfo@@SAXPAX@Z		; CvDllNetInitInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateNetInitInfo@CvDllGameContext@@UAGIXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateNetInitInfo@CvDllGameContext@@UAGIXZ ENDP	; CvDllGameContext::CreateNetInitInfo
EXTRN	?IncrementReference@CvDllNetInitInfo@@QAEIXZ:PROC ; CvDllNetInitInfo::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?GetNetInitInfo@CvDllGameContext@@UAGPAVICvNetInitInfo1@@I@Z
_TEXT	SEGMENT
$T229886 = -16						; size = 4
$T229862 = -12						; size = 4
$T229852 = -8						; size = 4
_it$223132 = -4						; size = 4
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?GetNetInitInfo@CvDllGameContext@@UAGPAVICvNetInitInfo1@@I@Z PROC ; CvDllGameContext::GetNetInitInfo, COMDAT

; 1260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1261 : 	for(std::vector<std::pair<uint, CvDllNetInitInfo*> >::iterator it = m_NetInitInfos.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T229862[ebp], ecx
	mov	edx, DWORD PTR $T229862[ebp]
	mov	DWORD PTR _it$223132[ebp], edx

; 1262 : 	        it != m_NetInitInfos.end(); ++it)

	jmp	SHORT $LN4@GetNetInit
$LN3@GetNetInit:
	mov	eax, DWORD PTR _it$223132[ebp]
	add	eax, 8
	mov	DWORD PTR _it$223132[ebp], eax
$LN4@GetNetInit:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T229886[ebp], edx
	mov	eax, DWORD PTR $T229886[ebp]
	mov	DWORD PTR $T229852[ebp], eax
	mov	ecx, DWORD PTR _it$223132[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T229852[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetNetInit

; 1263 : 	{
; 1264 : 		if((*it).first == index)

	mov	edx, DWORD PTR _it$223132[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _index$[ebp]
	jne	SHORT $LN1@GetNetInit

; 1265 : 		{
; 1266 : 			(*it).second->IncrementReference();

	mov	ecx, DWORD PTR _it$223132[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?IncrementReference@CvDllNetInitInfo@@QAEIXZ ; CvDllNetInitInfo::IncrementReference

; 1267 : 			return (*it).second;

	mov	edx, DWORD PTR _it$223132[ebp]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN5@GetNetInit
$LN1@GetNetInit:

; 1268 : 		}
; 1269 : 	}

	jmp	SHORT $LN3@GetNetInit
$LN2@GetNetInit:

; 1270 : 
; 1271 : 	return NULL;

	xor	eax, eax
$LN5@GetNetInit:

; 1272 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetNetInitInfo@CvDllGameContext@@UAGPAVICvNetInitInfo1@@I@Z ENDP ; CvDllGameContext::GetNetInitInfo
_TEXT	ENDS
PUBLIC	?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase
; Function compile flags: /Odtp
;	COMDAT ?DestroyNetInitInfo@CvDllGameContext@@UAGXI@Z
_TEXT	SEGMENT
tv149 = -108						; size = 4
$T230017 = -48						; size = 4
$T229985 = -44						; size = 4
$T229961 = -40						; size = 4
$T229945 = -36						; size = 4
$T229935 = -32						; size = 4
$T229934 = -28						; size = 4
$T229931 = -24						; size = 4
$T229930 = -20						; size = 4
$T229929 = -16						; size = 4
$T229928 = -12						; size = 4
$T229927 = -8						; size = 4
_it$ = -4						; size = 4
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?DestroyNetInitInfo@CvDllGameContext@@UAGXI@Z PROC	; CvDllGameContext::DestroyNetInitInfo, COMDAT

; 1275 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 1276 : 	std::vector<std::pair<uint, CvDllNetInitInfo*> >::iterator it = m_NetInitInfos.end();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T229945[ebp], ecx
	mov	edx, DWORD PTR $T229945[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 1277 : 	for(it = m_NetInitInfos.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T229961[ebp], ecx
	mov	edx, DWORD PTR $T229961[ebp]
	mov	DWORD PTR $T229927[ebp], edx
	mov	eax, DWORD PTR $T229927[ebp]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN5@DestroyNet
$LN4@DestroyNet:

; 1278 : 	        it != m_NetInitInfos.end(); ++it)

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 8
	mov	DWORD PTR _it$[ebp], ecx
$LN5@DestroyNet:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T229985[ebp], eax
	mov	ecx, DWORD PTR $T229985[ebp]
	mov	DWORD PTR $T229928[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T229928[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@DestroyNet

; 1279 : 	{
; 1280 : 		if((*it).first == index)

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _index$[ebp]
	jne	SHORT $LN2@DestroyNet

; 1281 : 			break;

	jmp	SHORT $LN3@DestroyNet
$LN2@DestroyNet:

; 1282 : 	}

	jmp	SHORT $LN4@DestroyNet
$LN3@DestroyNet:

; 1283 : 
; 1284 : 	if(it != m_NetInitInfos.end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T230017[ebp], eax
	mov	ecx, DWORD PTR $T230017[ebp]
	mov	DWORD PTR $T229929[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T229929[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@DestroyNet

; 1285 : 	{
; 1286 : 		delete(*it).second;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T229931[ebp], ecx
	mov	edx, DWORD PTR $T229931[ebp]
	mov	DWORD PTR $T229930[ebp], edx
	cmp	DWORD PTR $T229930[ebp], 0
	je	SHORT $LN8@DestroyNet
	mov	ecx, DWORD PTR $T229930[ebp]
	call	??1CvDllNetInitInfo@@QAE@XZ		; CvDllNetInitInfo::~CvDllNetInitInfo
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN55@DestroyNet
	mov	ecx, DWORD PTR $T229930[ebp]
	push	ecx
	call	??3CvDllNetInitInfo@@SAXPAX@Z		; CvDllNetInitInfo::operator delete
	add	esp, 4
$LN55@DestroyNet:
	mov	edx, DWORD PTR $T229930[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN9@DestroyNet
$LN8@DestroyNet:
	mov	DWORD PTR tv149[ebp], 0
$LN9@DestroyNet:

; 1287 : 		m_NetInitInfos.erase(it);

	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T229934[ebp], eax
	mov	ecx, DWORD PTR $T229934[ebp]
	push	ecx
	lea	edx, DWORD PTR $T229935[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase
$LN6@DestroyNet:

; 1288 : 	}
; 1289 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DestroyNetInitInfo@CvDllGameContext@@UAGXI@Z ENDP	; CvDllGameContext::DestroyNetInitInfo
_TEXT	ENDS
PUBLIC	?push_back@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::push_back
EXTRN	??0CvDllNetLoadGameInfo@@QAE@XZ:PROC		; CvDllNetLoadGameInfo::CvDllNetLoadGameInfo
EXTRN	??2CvDllNetLoadGameInfo@@SAPAXI@Z:PROC		; CvDllNetLoadGameInfo::operator new
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ$0
__ehfuncinfo$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ
_TEXT	SEGMENT
tv77 = -96						; size = 4
$T230167 = -36						; size = 4
$T230166 = -32						; size = 4
$T230165 = -28						; size = 4
_entry$ = -24						; size = 8
_index$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ PROC	; CvDllGameContext::CreateNetLoadGameInfo, COMDAT

; 1292 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1293 : 	uint index = m_uiNetLoadGameInfoCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 1294 : 	std::pair<uint, CvDllNetLoadGameInfo*> entry(index, new CvDllNetLoadGameInfo());

	push	24					; 00000018H
	call	??2CvDllNetLoadGameInfo@@SAPAXI@Z	; CvDllNetLoadGameInfo::operator new
	add	esp, 4
	mov	DWORD PTR $T230167[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T230167[ebp], 0
	je	SHORT $LN3@CreateNetL
	mov	ecx, DWORD PTR $T230167[ebp]
	call	??0CvDllNetLoadGameInfo@@QAE@XZ		; CvDllNetLoadGameInfo::CvDllNetLoadGameInfo
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@CreateNetL
$LN3@CreateNetL:
	mov	DWORD PTR tv77[ebp], 0
$LN4@CreateNetL:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T230166[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T230166[ebp]
	mov	DWORD PTR $T230165[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR _entry$[ebp], ecx
	mov	edx, DWORD PTR $T230165[ebp]
	mov	DWORD PTR _entry$[ebp+4], edx

; 1295 : 
; 1296 : 	m_NetLoadGameInfos.push_back(entry);

	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?push_back@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::push_back

; 1297 : 	return index;

	mov	eax, DWORD PTR _index$[ebp]

; 1298 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ$0:
	mov	eax, DWORD PTR $T230167[ebp]
	push	eax
	call	??3CvDllNetLoadGameInfo@@SAXPAX@Z	; CvDllNetLoadGameInfo::operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateNetLoadGameInfo@CvDllGameContext@@UAGIXZ ENDP	; CvDllGameContext::CreateNetLoadGameInfo
EXTRN	?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ:PROC ; CvDllNetLoadGameInfo::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?GetNetLoadGameInfo@CvDllGameContext@@UAGPAVICvNetLoadGameInfo1@@I@Z
_TEXT	SEGMENT
$T230332 = -16						; size = 4
$T230308 = -12						; size = 4
$T230298 = -8						; size = 4
_it$223185 = -4						; size = 4
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?GetNetLoadGameInfo@CvDllGameContext@@UAGPAVICvNetLoadGameInfo1@@I@Z PROC ; CvDllGameContext::GetNetLoadGameInfo, COMDAT

; 1301 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1302 : 	for(std::vector<std::pair<uint, CvDllNetLoadGameInfo*> >::iterator it = m_NetLoadGameInfos.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T230308[ebp], ecx
	mov	edx, DWORD PTR $T230308[ebp]
	mov	DWORD PTR _it$223185[ebp], edx

; 1303 : 	        it != m_NetLoadGameInfos.end(); ++it)

	jmp	SHORT $LN4@GetNetLoad
$LN3@GetNetLoad:
	mov	eax, DWORD PTR _it$223185[ebp]
	add	eax, 8
	mov	DWORD PTR _it$223185[ebp], eax
$LN4@GetNetLoad:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T230332[ebp], edx
	mov	eax, DWORD PTR $T230332[ebp]
	mov	DWORD PTR $T230298[ebp], eax
	mov	ecx, DWORD PTR _it$223185[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T230298[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetNetLoad

; 1304 : 	{
; 1305 : 		if((*it).first == index)

	mov	edx, DWORD PTR _it$223185[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _index$[ebp]
	jne	SHORT $LN1@GetNetLoad

; 1306 : 		{
; 1307 : 			(*it).second->IncrementReference();

	mov	ecx, DWORD PTR _it$223185[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ ; CvDllNetLoadGameInfo::IncrementReference

; 1308 : 			return (*it).second;

	mov	edx, DWORD PTR _it$223185[ebp]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN5@GetNetLoad
$LN1@GetNetLoad:

; 1309 : 		}
; 1310 : 	}

	jmp	SHORT $LN3@GetNetLoad
$LN2@GetNetLoad:

; 1311 : 
; 1312 : 	return NULL;

	xor	eax, eax
$LN5@GetNetLoad:

; 1313 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetNetLoadGameInfo@CvDllGameContext@@UAGPAVICvNetLoadGameInfo1@@I@Z ENDP ; CvDllGameContext::GetNetLoadGameInfo
_TEXT	ENDS
PUBLIC	?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase
; Function compile flags: /Odtp
;	COMDAT ?DestroyNetLoadGameInfo@CvDllGameContext@@UAGXI@Z
_TEXT	SEGMENT
tv149 = -108						; size = 4
$T230463 = -48						; size = 4
$T230431 = -44						; size = 4
$T230407 = -40						; size = 4
$T230391 = -36						; size = 4
$T230381 = -32						; size = 4
$T230380 = -28						; size = 4
$T230377 = -24						; size = 4
$T230376 = -20						; size = 4
$T230375 = -16						; size = 4
$T230374 = -12						; size = 4
$T230373 = -8						; size = 4
_it$ = -4						; size = 4
_this$ = 8						; size = 4
_index$ = 12						; size = 4
?DestroyNetLoadGameInfo@CvDllGameContext@@UAGXI@Z PROC	; CvDllGameContext::DestroyNetLoadGameInfo, COMDAT

; 1316 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 1317 : 	std::vector<std::pair<uint, CvDllNetLoadGameInfo*> >::iterator it = m_NetLoadGameInfos.end();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR $T230391[ebp], ecx
	mov	edx, DWORD PTR $T230391[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 1318 : 	for(it = m_NetLoadGameInfos.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T230407[ebp], ecx
	mov	edx, DWORD PTR $T230407[ebp]
	mov	DWORD PTR $T230373[ebp], edx
	mov	eax, DWORD PTR $T230373[ebp]
	mov	DWORD PTR _it$[ebp], eax
	jmp	SHORT $LN5@DestroyNet@2
$LN4@DestroyNet@2:

; 1319 : 	        it != m_NetLoadGameInfos.end(); ++it)

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 8
	mov	DWORD PTR _it$[ebp], ecx
$LN5@DestroyNet@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T230431[ebp], eax
	mov	ecx, DWORD PTR $T230431[ebp]
	mov	DWORD PTR $T230374[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T230374[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@DestroyNet@2

; 1320 : 	{
; 1321 : 		if((*it).first == index)

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _index$[ebp]
	jne	SHORT $LN2@DestroyNet@2

; 1322 : 			break;

	jmp	SHORT $LN3@DestroyNet@2
$LN2@DestroyNet@2:

; 1323 : 	}

	jmp	SHORT $LN4@DestroyNet@2
$LN3@DestroyNet@2:

; 1324 : 
; 1325 : 	if(it != m_NetLoadGameInfos.end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR $T230463[ebp], eax
	mov	ecx, DWORD PTR $T230463[ebp]
	mov	DWORD PTR $T230375[ebp], ecx
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T230375[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN6@DestroyNet@2

; 1326 : 	{
; 1327 : 		delete(*it).second;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T230377[ebp], ecx
	mov	edx, DWORD PTR $T230377[ebp]
	mov	DWORD PTR $T230376[ebp], edx
	cmp	DWORD PTR $T230376[ebp], 0
	je	SHORT $LN8@DestroyNet@2
	mov	ecx, DWORD PTR $T230376[ebp]
	call	??1CvDllNetLoadGameInfo@@QAE@XZ		; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN55@DestroyNet@2
	mov	ecx, DWORD PTR $T230376[ebp]
	push	ecx
	call	??3CvDllNetLoadGameInfo@@SAXPAX@Z	; CvDllNetLoadGameInfo::operator delete
	add	esp, 4
$LN55@DestroyNet@2:
	mov	edx, DWORD PTR $T230376[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN9@DestroyNet@2
$LN8@DestroyNet@2:
	mov	DWORD PTR tv149[ebp], 0
$LN9@DestroyNet@2:

; 1328 : 		m_NetLoadGameInfos.erase(it);

	mov	eax, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T230380[ebp], eax
	mov	ecx, DWORD PTR $T230380[ebp]
	push	ecx
	lea	edx, DWORD PTR $T230381[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase
$LN6@DestroyNet@2:

; 1329 : 	}
; 1330 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?DestroyNetLoadGameInfo@CvDllGameContext@@UAGXI@Z ENDP	; CvDllGameContext::DestroyNetLoadGameInfo
_TEXT	ENDS
EXTRN	?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:PROC ; PathAdd
EXTRN	?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:PROC ; PathValid
EXTRN	?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z:PROC	; PathDestValid
EXTRN	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z:PROC	; CvAStar::GeneratePath
EXTRN	?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:PROC ; UIPathAdd
EXTRN	?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:PROC ; UIPathValid
EXTRN	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ:PROC ; CvGlobals::getInterfacePathFinder
EXTRN	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z:PROC ; CvGlobals::UnwrapUnitPointer
; Function compile flags: /Odtp
;	COMDAT ?TEMPOnHexUnitChanged@CvDllGameContext@@UAGXPAVICvUnit1@@@Z
_TEXT	SEGMENT
$T230641 = -20						; size = 4
$T230632 = -16						; size = 4
_pkUnit$ = -12						; size = 4
_thePathfinder$ = -8					; size = 4
_bCanFindPath$ = -1					; size = 1
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
?TEMPOnHexUnitChanged@CvDllGameContext@@UAGXPAVICvUnit1@@@Z PROC ; CvDllGameContext::TEMPOnHexUnitChanged, COMDAT

; 1333 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1334 : 	CvUnit* pkUnit = GC.UnwrapUnitPointer(pUnit);

	mov	eax, DWORD PTR _pUnit$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1335 : 	CvTwoLayerPathFinder& thePathfinder = GC.getInterfacePathFinder();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR _thePathfinder$[ebp], eax

; 1336 : 
; 1337 : 	// change the unit pathfinder to use these funcs instead
; 1338 : 	thePathfinder.SetDestValidFunc(NULL);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1339 : 	thePathfinder.SetValidFunc(UIPathValid);

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [edx+16], OFFSET ?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; UIPathValid

; 1340 : 	thePathfinder.SetNotifyChildFunc(UIPathAdd);

	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [eax+20], OFFSET ?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; UIPathAdd

; 1341 : 
; 1342 : 	// call the pathfinder
; 1343 : 	thePathfinder.SetData(pkUnit);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	test	edx, edx
	je	SHORT $LN9@TEMPOnHexU
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	ecx, DWORD PTR _pkUnit$[ebp]
	je	SHORT $LN9@TEMPOnHexU
	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [edx+78], 1
$LN9@TEMPOnHexU:
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 1344 : #ifdef AUI_WARNING_FIXES
; 1345 : 	thePathfinder.GeneratePath(pkUnit->getX(), pkUnit->getY(), -1, -1, MOVE_DECLARE_WAR, false);
; 1346 : #else
; 1347 : 	bool bCanFindPath = thePathfinder.GeneratePath(pkUnit->getX(), pkUnit->getY(), -1, -1, MOVE_DECLARE_WAR, false);

	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T230632[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T230641[ebp], edx
	push	0
	push	32					; 00000020H
	push	-1
	push	-1
	mov	eax, DWORD PTR $T230632[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230641[ebp]
	push	ecx
	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	mov	BYTE PTR _bCanFindPath$[ebp], al

; 1348 : #endif
; 1349 : 
; 1350 : 	// change the unit pathfinder back
; 1351 : 	thePathfinder.SetDestValidFunc(PathDestValid);

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z ; PathDestValid

; 1352 : 	thePathfinder.SetValidFunc(PathValid);

	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathValid

; 1353 : 	thePathfinder.SetNotifyChildFunc(PathAdd);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET ?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathAdd

; 1354 : 	thePathfinder.ForceReset();

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [edx+78], 1

; 1355 : 
; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?TEMPOnHexUnitChanged@CvDllGameContext@@UAGXPAVICvUnit1@@@Z ENDP ; CvDllGameContext::TEMPOnHexUnitChanged
_TEXT	ENDS
EXTRN	?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:PROC ; AttackPathAdd
; Function compile flags: /Odtp
;	COMDAT ?TEMPOnHexUnitChangedAttack@CvDllGameContext@@UAGXPAVICvUnit1@@@Z
_TEXT	SEGMENT
$T230686 = -20						; size = 4
$T230677 = -16						; size = 4
_pkUnit$ = -12						; size = 4
_thePathfinder$ = -8					; size = 4
_bCanFindPath$ = -1					; size = 1
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
?TEMPOnHexUnitChangedAttack@CvDllGameContext@@UAGXPAVICvUnit1@@@Z PROC ; CvDllGameContext::TEMPOnHexUnitChangedAttack, COMDAT

; 1359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1360 : 	CvUnit* pkUnit = GC.UnwrapUnitPointer(pUnit);

	mov	eax, DWORD PTR _pUnit$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1361 : 	CvTwoLayerPathFinder& thePathfinder = GC.getInterfacePathFinder();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR _thePathfinder$[ebp], eax

; 1362 : 
; 1363 : 	// change the unit pathfinder to use these funcs instead
; 1364 : 	thePathfinder.SetDestValidFunc(NULL);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1365 : 	thePathfinder.SetValidFunc(UIPathValid);

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [edx+16], OFFSET ?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; UIPathValid

; 1366 : 	thePathfinder.SetNotifyChildFunc(AttackPathAdd);

	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [eax+20], OFFSET ?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; AttackPathAdd

; 1367 : 
; 1368 : 	// call the pathfinder
; 1369 : 	thePathfinder.SetData(pkUnit);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	test	edx, edx
	je	SHORT $LN9@TEMPOnHexU@2
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	ecx, DWORD PTR _pkUnit$[ebp]
	je	SHORT $LN9@TEMPOnHexU@2
	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [edx+78], 1
$LN9@TEMPOnHexU@2:
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 1370 : #ifdef AUI_WARNING_FIXES
; 1371 : 	thePathfinder.GeneratePath(pkUnit->getX(), pkUnit->getY(), -1, -1, MOVE_DECLARE_WAR, false);
; 1372 : #else
; 1373 : 	bool bCanFindPath = thePathfinder.GeneratePath(pkUnit->getX(), pkUnit->getY(), -1, -1, MOVE_DECLARE_WAR, false);

	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T230677[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T230686[ebp], edx
	push	0
	push	32					; 00000020H
	push	-1
	push	-1
	mov	eax, DWORD PTR $T230677[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230686[ebp]
	push	ecx
	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	mov	BYTE PTR _bCanFindPath$[ebp], al

; 1374 : #endif
; 1375 : 
; 1376 : 	// change the unit pathfinder back
; 1377 : 	thePathfinder.SetDestValidFunc(PathDestValid);

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z ; PathDestValid

; 1378 : 	thePathfinder.SetValidFunc(PathValid);

	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathValid

; 1379 : 	thePathfinder.SetNotifyChildFunc(PathAdd);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET ?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathAdd

; 1380 : 	thePathfinder.ForceReset();

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [edx+78], 1

; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?TEMPOnHexUnitChangedAttack@CvDllGameContext@@UAGXPAVICvUnit1@@@Z ENDP ; CvDllGameContext::TEMPOnHexUnitChangedAttack
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
PUBLIC	?push_back@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::push_back
PUBLIC	?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::reserve
PUBLIC	??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
EXTRN	??3CvDllPathFinderUpdateList@@SAXPAX@Z:PROC	; CvDllPathFinderUpdateList::operator delete
EXTRN	??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z:PROC ; CvDllPathFinderUpdateList::CvDllPathFinderUpdateList
EXTRN	??2CvDllPathFinderUpdateList@@SAPAXI@Z:PROC	; CvDllPathFinderUpdateList::operator new
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$4
__ehfuncinfo$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllcontext.cpp
xdata$x	ENDS
;	COMDAT ?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z
_TEXT	SEGMENT
tv174 = -256						; size = 4
$T231030 = -220						; size = 4
$T231029 = -216						; size = 4
$T230993 = -209						; size = 1
$T230992 = -208						; size = 4
$T230991 = -204						; size = 4
$T230961 = -200						; size = 4
$T230960 = -196						; size = 4
$T230945 = -192						; size = 4
__Tmp$231023 = -188					; size = 12
$T230931 = -176						; size = 4
$T230996 = -169						; size = 1
$T230889 = -168						; size = 4
$T230873 = -164						; size = 4
$T230731 = -92						; size = 4
$T230722 = -88						; size = 4
$T230705 = -84						; size = 4
$T230704 = -80						; size = 4
$T230703 = -76						; size = 4
$T230702 = -72						; size = 4
$T230701 = -68						; size = 4
_update$223254 = -64					; size = 12
_pUpdateData$223249 = -52				; size = 16
_size$223241 = -36					; size = 4
_index$223250 = -32					; size = 4
_lastNode$223239 = -28					; size = 4
_pathNode$223240 = -24					; size = 4
_pkUnit$ = -20						; size = 4
_thePathfinder$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pHeadSelectedUnit$ = 12				; size = 4
_iMouseMapX$ = 16					; size = 4
_iMouseMapY$ = 20					; size = 4
?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z PROC ; CvDllGameContext::TEMPCalculatePathFinderUpdates, COMDAT

; 1384 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1385 : 	CvUnit* pkUnit = GC.UnwrapUnitPointer(pHeadSelectedUnit);

	mov	eax, DWORD PTR _pHeadSelectedUnit$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1386 : 	CvTwoLayerPathFinder& thePathfinder = GC.getInterfacePathFinder();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR _thePathfinder$[ebp], eax

; 1387 : 
; 1388 : 	thePathfinder.SetData(pkUnit);

	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	test	edx, edx
	je	SHORT $LN12@TEMPCalcul
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	ecx, DWORD PTR _pkUnit$[ebp]
	je	SHORT $LN12@TEMPCalcul
	mov	edx, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [edx+78], 1
$LN12@TEMPCalcul:
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 1389 : 	if(thePathfinder.GeneratePath(pkUnit->getX(), pkUnit->getY(), iMouseMapX, iMouseMapY, MOVE_DECLARE_WAR, false))

	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR $T230722[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T230731[ebp], edx
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _iMouseMapY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseMapX$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T230722[ebp]
	push	edx
	mov	eax, DWORD PTR $T230731[ebp]
	push	eax
	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@TEMPCalcul

; 1390 : 	{
; 1391 : 		// seed the pathfinder with a unit
; 1392 : 		thePathfinder.SetData(pkUnit);

	mov	edx, DWORD PTR _thePathfinder$[ebp]
	movzx	eax, BYTE PTR [edx+80]
	test	eax, eax
	je	SHORT $LN23@TEMPCalcul
	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	edx, DWORD PTR _pkUnit$[ebp]
	je	SHORT $LN23@TEMPCalcul
	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	BYTE PTR [eax+78], 1
$LN23@TEMPCalcul:
	mov	ecx, DWORD PTR _thePathfinder$[ebp]
	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	DWORD PTR [ecx+44], edx

; 1393 : 
; 1394 : 		//get the number of waypoints on the path
; 1395 : 		CvAStarNode* lastNode = thePathfinder.GetLastNode();

	mov	eax, DWORD PTR _thePathfinder$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _lastNode$223239[ebp], ecx

; 1396 : 		CvAStarNode* pathNode = lastNode;

	mov	edx, DWORD PTR _lastNode$223239[ebp]
	mov	DWORD PTR _pathNode$223240[ebp], edx

; 1397 : 
; 1398 : #ifndef AUI_WARNING_FIXES
; 1399 : 		pathNode = lastNode;

	mov	eax, DWORD PTR _lastNode$223239[ebp]
	mov	DWORD PTR _pathNode$223240[ebp], eax

; 1400 : #endif
; 1401 : 		int size = 0;

	mov	DWORD PTR _size$223241[ebp], 0
$LN4@TEMPCalcul:

; 1402 : 		while(pathNode != NULL)

	cmp	DWORD PTR _pathNode$223240[ebp], 0
	je	SHORT $LN3@TEMPCalcul

; 1403 : 		{
; 1404 : 			size++;

	mov	ecx, DWORD PTR _size$223241[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$223241[ebp], ecx

; 1405 : 			pathNode = pathNode->m_pParent;

	mov	edx, DWORD PTR _pathNode$223240[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _pathNode$223240[ebp], eax

; 1406 : 		}

	jmp	SHORT $LN4@TEMPCalcul
$LN3@TEMPCalcul:

; 1407 : 
; 1408 : 
; 1409 : 		std::vector<CvDllPathFinderUpdateListData> pUpdateData;

	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	call	??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1410 : 
; 1411 : 		pUpdateData.reserve(size);

	mov	ecx, DWORD PTR _size$223241[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	call	?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::reserve

; 1412 : 
; 1413 : 		// now fill out the event array in reverse order
; 1414 : 		pathNode = lastNode;

	mov	edx, DWORD PTR _lastNode$223239[ebp]
	mov	DWORD PTR _pathNode$223240[ebp], edx

; 1415 : 		int index = 0;

	mov	DWORD PTR _index$223250[ebp], 0
$LN2@TEMPCalcul:

; 1416 : 		while(pathNode != NULL)

	cmp	DWORD PTR _pathNode$223240[ebp], 0
	je	SHORT $LN1@TEMPCalcul

; 1417 : 		{
; 1418 : 			CvDllPathFinderUpdateListData update;
; 1419 : 			update.iX = pathNode->m_iX;

	mov	eax, DWORD PTR _pathNode$223240[ebp]
	movsx	ecx, WORD PTR [eax+80]
	mov	DWORD PTR _update$223254[ebp], ecx

; 1420 : 			update.iY = pathNode->m_iY;

	mov	edx, DWORD PTR _pathNode$223240[ebp]
	movsx	eax, WORD PTR [edx+82]
	mov	DWORD PTR _update$223254[ebp+4], eax

; 1421 : 			update.iTurnNumber = pathNode->m_iData2;

	mov	ecx, DWORD PTR _pathNode$223240[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _update$223254[ebp+8], edx

; 1422 : 
; 1423 : 			pUpdateData.push_back(update);

	lea	eax, DWORD PTR _update$223254[ebp]
	push	eax
	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	call	?push_back@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::push_back

; 1424 : 
; 1425 : 			index++;

	mov	ecx, DWORD PTR _index$223250[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$223250[ebp], ecx

; 1426 : 			pathNode = pathNode->m_pParent;

	mov	edx, DWORD PTR _pathNode$223240[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _pathNode$223240[ebp], eax

; 1427 : 		}

	jmp	SHORT $LN2@TEMPCalcul
$LN1@TEMPCalcul:

; 1428 : 
; 1429 : 		std::reverse(pUpdateData.begin(), pUpdateData.end());

	mov	ecx, DWORD PTR _pUpdateData$223249[ebp+8]
	mov	DWORD PTR $T230873[ebp], ecx
	mov	edx, DWORD PTR $T230873[ebp]
	mov	DWORD PTR $T230701[ebp], edx
	mov	eax, DWORD PTR _pUpdateData$223249[ebp+4]
	mov	DWORD PTR $T230889[ebp], eax
	mov	ecx, DWORD PTR $T230889[ebp]
	mov	DWORD PTR $T230702[ebp], ecx
	mov	edx, DWORD PTR $T230701[ebp]
	mov	DWORD PTR $T231030[ebp], edx
	mov	eax, DWORD PTR $T230702[ebp]
	mov	DWORD PTR $T231029[ebp], eax
	mov	cl, BYTE PTR $T230996[ebp]
	mov	BYTE PTR $T230993[ebp], cl
	mov	edx, DWORD PTR $T231030[ebp]
	mov	DWORD PTR $T230992[ebp], edx
	mov	eax, DWORD PTR $T231029[ebp]
	mov	DWORD PTR $T230991[ebp], eax
	jmp	SHORT $LN111@TEMPCalcul
$LN103@TEMPCalcul:
	mov	ecx, DWORD PTR $T230991[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T230991[ebp], ecx
$LN111@TEMPCalcul:
	mov	edx, DWORD PTR $T230991[ebp]
	cmp	edx, DWORD PTR $T230992[ebp]
	sbb	eax, eax
	neg	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN98@TEMPCalcul
	mov	edx, DWORD PTR $T230992[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR $T230992[ebp], edx
	mov	eax, DWORD PTR $T230992[ebp]
	mov	DWORD PTR $T230961[ebp], eax
	mov	ecx, DWORD PTR $T230991[ebp]
	mov	DWORD PTR $T230960[ebp], ecx
	mov	edx, DWORD PTR $T230961[ebp]
	mov	DWORD PTR $T230931[ebp], edx
	mov	eax, DWORD PTR $T230960[ebp]
	mov	DWORD PTR $T230945[ebp], eax
	mov	ecx, DWORD PTR $T230945[ebp]
	cmp	ecx, DWORD PTR $T230931[ebp]
	je	SHORT $LN117@TEMPCalcul
	mov	edx, DWORD PTR $T230945[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$231023[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$231023[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$231023[ebp+8], edx
	mov	eax, DWORD PTR $T230931[ebp]
	mov	ecx, DWORD PTR $T230945[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T230931[ebp]
	mov	edx, DWORD PTR __Tmp$231023[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$231023[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$231023[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN117@TEMPCalcul:
	jmp	$LN103@TEMPCalcul
$LN98@TEMPCalcul:

; 1430 : 		return new CvDllPathFinderUpdateList(pUpdateData);

	push	28					; 0000001cH
	call	??2CvDllPathFinderUpdateList@@SAPAXI@Z	; CvDllPathFinderUpdateList::operator new
	add	esp, 4
	mov	DWORD PTR $T230705[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T230705[ebp], 0
	je	SHORT $LN8@TEMPCalcul
	lea	eax, DWORD PTR _pUpdateData$223249[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230705[ebp]
	call	??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z ; CvDllPathFinderUpdateList::CvDllPathFinderUpdateList
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN9@TEMPCalcul
$LN8@TEMPCalcul:
	mov	DWORD PTR tv174[ebp], 0
$LN9@TEMPCalcul:
	mov	ecx, DWORD PTR tv174[ebp]
	mov	DWORD PTR $T230704[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T230704[ebp]
	mov	DWORD PTR $T230703[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	call	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T230703[ebp]
	jmp	SHORT $LN6@TEMPCalcul
$LN5@TEMPCalcul:

; 1431 : 	}
; 1432 : 
; 1433 : 	return NULL;

	xor	eax, eax
$LN6@TEMPCalcul:

; 1434 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$0:
	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	jmp	??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$1:
	mov	eax, DWORD PTR $T230705[ebp]
	push	eax
	call	??3CvDllPathFinderUpdateList@@SAXPAX@Z	; CvDllPathFinderUpdateList::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z$4:
	lea	ecx, DWORD PTR _pUpdateData$223249[ebp]
	jmp	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
__ehhandler$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TEMPCalculatePathFinderUpdates@CvDllGameContext@@UAGPAVICvEnumerator@@PAVICvUnit1@@HH@Z ENDP ; CvDllGameContext::TEMPCalculatePathFinderUpdates
; Function compile flags: /Odtp
;	COMDAT ?ResetPathFinder@CvDllGameContext@@UAGXXZ
_TEXT	SEGMENT
$T231127 = -4						; size = 4
_this$ = 8						; size = 4
?ResetPathFinder@CvDllGameContext@@UAGXXZ PROC		; CvDllGameContext::ResetPathFinder, COMDAT

; 1437 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1438 : 	GC.getInterfacePathFinder().ForceReset();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfacePathFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::getInterfacePathFinder
	mov	DWORD PTR $T231127[ebp], eax
	mov	eax, DWORD PTR $T231127[ebp]
	mov	BYTE PTR [eax+78], 1

; 1439 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ResetPathFinder@CvDllGameContext@@UAGXXZ ENDP		; CvDllGameContext::ResetPathFinder
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?SetEngineUserInterface@CvDllGameContext@@UAGXPAVICvUserInterface2@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pUI$ = 12						; size = 4
?SetEngineUserInterface@CvDllGameContext@@UAGXPAVICvUserInterface2@@@Z PROC ; CvDllGameContext::SetEngineUserInterface, COMDAT

; 1442 : {

	push	ebp
	mov	ebp, esp

; 1443 : 	GC.SetEngineUserInterface(pUI);

	mov	eax, DWORD PTR _pUI$[ebp]
	mov	DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568, eax

; 1444 : }

	pop	ebp
	ret	8
?SetEngineUserInterface@CvDllGameContext@@UAGXPAVICvUserInterface2@@@Z ENDP ; CvDllGameContext::SetEngineUserInterface
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
PUBLIC	?insert@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@ABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::insert
PUBLIC	??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvRandom@@@2@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T231270 = -32						; size = 4
$T231260 = -28						; size = 4
$T231250 = -24						; size = 4
__Cat$231258 = -19					; size = 1
$T231256 = -18						; size = 1
$T231255 = -17						; size = 1
$T231227 = -16						; size = 4
$T231223 = -12						; size = 4
$T231222 = -8						; size = 4
$T231221 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvRandom@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T231227[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back
$LN9@push_back:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back:
	mov	ecx, DWORD PTR $T231227[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231260[ebp], eax
	mov	ecx, DWORD PTR $T231260[ebp]
	mov	DWORD PTR $T231250[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T231255[ebp], dl
	mov	al, BYTE PTR __Cat$231258[ebp]
	mov	BYTE PTR $T231256[ebp], al
	movzx	ecx, BYTE PTR $T231255[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T231256[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T231250[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 3
	add	eax, DWORD PTR $T231260[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231270[ebp], eax
	mov	ecx, DWORD PTR $T231270[ebp]
	mov	DWORD PTR $T231222[ebp], ecx
	mov	edx, DWORD PTR $T231222[ebp]
	mov	DWORD PTR $T231221[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231221[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231223[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@ABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::insert
$LN3@push_back:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvRandom@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T231440 = -56						; size = 4
$T231439 = -52						; size = 4
$T231421 = -48						; size = 4
$T231420 = -44						; size = 4
$T231404 = -40						; size = 4
__Cat$231428 = -34					; size = 1
$T231426 = -33						; size = 1
$T231378 = -32						; size = 4
$T231377 = -28						; size = 4
$T231376 = -24						; size = 4
$T231359 = -18						; size = 1
$T231358 = -17						; size = 1
$T231357 = -16						; size = 4
$T231356 = -12						; size = 4
__Cat$231366 = -4					; size = 1
$T231364 = -3						; size = 1
$T231363 = -2						; size = 1
$T231362 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase, COMDAT
; _this$ = ecx

; 1017 : 		{	// erase element at where

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1018 : 		_STDEXT unchecked_copy(_VEC_ITER_BASE(_Where) + 1, _Mylast,
; 1019 : 			_VEC_ITER_BASE(_Where));

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T231378[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T231377[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 8
	mov	DWORD PTR $T231376[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T231362[ebp], cl
	mov	dl, BYTE PTR __Cat$231366[ebp]
	mov	BYTE PTR $T231363[ebp], dl
	mov	al, BYTE PTR $T231362[ebp]
	mov	BYTE PTR $T231359[ebp], al
	mov	cl, BYTE PTR $T231364[ebp]
	mov	BYTE PTR $T231358[ebp], cl
	mov	edx, DWORD PTR $T231378[ebp]
	mov	DWORD PTR $T231357[ebp], edx
	mov	eax, DWORD PTR $T231376[ebp]
	mov	DWORD PTR $T231356[ebp], eax
	jmp	SHORT $LN11@erase
$LN10@erase:
	mov	ecx, DWORD PTR $T231357[ebp]
	add	ecx, 8
	mov	DWORD PTR $T231357[ebp], ecx
	mov	edx, DWORD PTR $T231356[ebp]
	add	edx, 8
	mov	DWORD PTR $T231356[ebp], edx
$LN11@erase:
	mov	eax, DWORD PTR $T231356[ebp]
	cmp	eax, DWORD PTR $T231377[ebp]
	je	SHORT $LN3@erase
	mov	ecx, DWORD PTR $T231356[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T231357[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN10@erase
$LN3@erase:

; 1020 : 		_Destroy(_Mylast - 1, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231440[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 8
	mov	DWORD PTR $T231439[ebp], edx
	mov	eax, DWORD PTR $T231440[ebp]
	mov	DWORD PTR $T231421[ebp], eax
	mov	ecx, DWORD PTR $T231439[ebp]
	mov	DWORD PTR $T231420[ebp], ecx
	mov	dl, BYTE PTR __Cat$231428[ebp]
	mov	BYTE PTR $T231426[ebp], dl
	mov	eax, DWORD PTR $T231420[ebp]
	mov	DWORD PTR $T231404[ebp], eax
	jmp	SHORT $LN22@erase
$LN21@erase:
	mov	ecx, DWORD PTR $T231404[ebp]
	add	ecx, 8
	mov	DWORD PTR $T231404[ebp], ecx
$LN22@erase:
	mov	edx, DWORD PTR $T231404[ebp]
	cmp	edx, DWORD PTR $T231421[ebp]
	je	SHORT $LN14@erase
	jmp	SHORT $LN21@erase
$LN14@erase:

; 1021 : 		--_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1022 : 		return (_Make_iter(_Where));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1023 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
PUBLIC	?insert@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::insert
PUBLIC	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T231593 = -32						; size = 4
$T231583 = -28						; size = 4
$T231573 = -24						; size = 4
__Cat$231579 = -19					; size = 1
$T231577 = -18						; size = 1
$T231576 = -17						; size = 1
$T231550 = -16						; size = 4
$T231546 = -12						; size = 4
$T231545 = -8						; size = 4
$T231544 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T231550[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@2
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@2
$LN9@push_back@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@2:
	mov	ecx, DWORD PTR $T231550[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231583[ebp], eax
	mov	ecx, DWORD PTR $T231583[ebp]
	mov	DWORD PTR $T231573[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T231576[ebp], dl
	mov	al, BYTE PTR __Cat$231579[ebp]
	mov	BYTE PTR $T231577[ebp], al
	movzx	ecx, BYTE PTR $T231576[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T231577[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T231573[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 3
	add	eax, DWORD PTR $T231583[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@2
$LN2@push_back@2:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231593[ebp], eax
	mov	ecx, DWORD PTR $T231593[ebp]
	mov	DWORD PTR $T231545[ebp], ecx
	mov	edx, DWORD PTR $T231545[ebp]
	mov	DWORD PTR $T231544[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231544[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231546[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::insert
$LN3@push_back@2:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T231763 = -56						; size = 4
$T231762 = -52						; size = 4
$T231744 = -48						; size = 4
$T231743 = -44						; size = 4
$T231727 = -40						; size = 4
__Cat$231749 = -34					; size = 1
$T231747 = -33						; size = 1
$T231701 = -32						; size = 4
$T231700 = -28						; size = 4
$T231699 = -24						; size = 4
$T231682 = -18						; size = 1
$T231681 = -17						; size = 1
$T231680 = -16						; size = 4
$T231679 = -12						; size = 4
__Cat$231689 = -4					; size = 1
$T231687 = -3						; size = 1
$T231686 = -2						; size = 1
$T231685 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase, COMDAT
; _this$ = ecx

; 1017 : 		{	// erase element at where

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1018 : 		_STDEXT unchecked_copy(_VEC_ITER_BASE(_Where) + 1, _Mylast,
; 1019 : 			_VEC_ITER_BASE(_Where));

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T231701[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T231700[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 8
	mov	DWORD PTR $T231699[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T231685[ebp], cl
	mov	dl, BYTE PTR __Cat$231689[ebp]
	mov	BYTE PTR $T231686[ebp], dl
	mov	al, BYTE PTR $T231685[ebp]
	mov	BYTE PTR $T231682[ebp], al
	mov	cl, BYTE PTR $T231687[ebp]
	mov	BYTE PTR $T231681[ebp], cl
	mov	edx, DWORD PTR $T231701[ebp]
	mov	DWORD PTR $T231680[ebp], edx
	mov	eax, DWORD PTR $T231699[ebp]
	mov	DWORD PTR $T231679[ebp], eax
	jmp	SHORT $LN11@erase@2
$LN10@erase@2:
	mov	ecx, DWORD PTR $T231680[ebp]
	add	ecx, 8
	mov	DWORD PTR $T231680[ebp], ecx
	mov	edx, DWORD PTR $T231679[ebp]
	add	edx, 8
	mov	DWORD PTR $T231679[ebp], edx
$LN11@erase@2:
	mov	eax, DWORD PTR $T231679[ebp]
	cmp	eax, DWORD PTR $T231700[ebp]
	je	SHORT $LN3@erase@2
	mov	ecx, DWORD PTR $T231679[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T231680[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN10@erase@2
$LN3@erase@2:

; 1020 : 		_Destroy(_Mylast - 1, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231763[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 8
	mov	DWORD PTR $T231762[ebp], edx
	mov	eax, DWORD PTR $T231763[ebp]
	mov	DWORD PTR $T231744[ebp], eax
	mov	ecx, DWORD PTR $T231762[ebp]
	mov	DWORD PTR $T231743[ebp], ecx
	mov	dl, BYTE PTR __Cat$231749[ebp]
	mov	BYTE PTR $T231747[ebp], dl
	mov	eax, DWORD PTR $T231743[ebp]
	mov	DWORD PTR $T231727[ebp], eax
	jmp	SHORT $LN22@erase@2
$LN21@erase@2:
	mov	ecx, DWORD PTR $T231727[ebp]
	add	ecx, 8
	mov	DWORD PTR $T231727[ebp], ecx
$LN22@erase@2:
	mov	edx, DWORD PTR $T231727[ebp]
	cmp	edx, DWORD PTR $T231744[ebp]
	je	SHORT $LN14@erase@2
	jmp	SHORT $LN21@erase@2
$LN14@erase@2:

; 1021 : 		--_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1022 : 		return (_Make_iter(_Where));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1023 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
PUBLIC	?insert@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::insert
PUBLIC	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T231916 = -32						; size = 4
$T231906 = -28						; size = 4
$T231896 = -24						; size = 4
__Cat$231902 = -19					; size = 1
$T231900 = -18						; size = 1
$T231899 = -17						; size = 1
$T231873 = -16						; size = 4
$T231869 = -12						; size = 4
$T231868 = -8						; size = 4
$T231867 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR $T231873[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@3
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@3
$LN9@push_back@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@3:
	mov	ecx, DWORD PTR $T231873[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@3

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231906[ebp], eax
	mov	ecx, DWORD PTR $T231906[ebp]
	mov	DWORD PTR $T231896[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T231899[ebp], dl
	mov	al, BYTE PTR __Cat$231902[ebp]
	mov	BYTE PTR $T231900[ebp], al
	movzx	ecx, BYTE PTR $T231899[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T231900[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T231896[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 3
	add	eax, DWORD PTR $T231906[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@3
$LN2@push_back@3:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T231916[ebp], eax
	mov	ecx, DWORD PTR $T231916[ebp]
	mov	DWORD PTR $T231868[ebp], ecx
	mov	edx, DWORD PTR $T231868[ebp]
	mov	DWORD PTR $T231867[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231867[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231869[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::insert
$LN3@push_back@3:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAEXABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T232086 = -56						; size = 4
$T232085 = -52						; size = 4
$T232067 = -48						; size = 4
$T232066 = -44						; size = 4
$T232050 = -40						; size = 4
__Cat$232074 = -34					; size = 1
$T232072 = -33						; size = 1
$T232024 = -32						; size = 4
$T232023 = -28						; size = 4
$T232022 = -24						; size = 4
$T232005 = -18						; size = 1
$T232004 = -17						; size = 1
$T232003 = -16						; size = 4
$T232002 = -12						; size = 4
__Cat$232012 = -4					; size = 1
$T232010 = -3						; size = 1
$T232009 = -2						; size = 1
$T232008 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase, COMDAT
; _this$ = ecx

; 1017 : 		{	// erase element at where

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1018 : 		_STDEXT unchecked_copy(_VEC_ITER_BASE(_Where) + 1, _Mylast,
; 1019 : 			_VEC_ITER_BASE(_Where));

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T232024[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T232023[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 8
	mov	DWORD PTR $T232022[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T232008[ebp], cl
	mov	dl, BYTE PTR __Cat$232012[ebp]
	mov	BYTE PTR $T232009[ebp], dl
	mov	al, BYTE PTR $T232008[ebp]
	mov	BYTE PTR $T232005[ebp], al
	mov	cl, BYTE PTR $T232010[ebp]
	mov	BYTE PTR $T232004[ebp], cl
	mov	edx, DWORD PTR $T232024[ebp]
	mov	DWORD PTR $T232003[ebp], edx
	mov	eax, DWORD PTR $T232022[ebp]
	mov	DWORD PTR $T232002[ebp], eax
	jmp	SHORT $LN11@erase@3
$LN10@erase@3:
	mov	ecx, DWORD PTR $T232003[ebp]
	add	ecx, 8
	mov	DWORD PTR $T232003[ebp], ecx
	mov	edx, DWORD PTR $T232002[ebp]
	add	edx, 8
	mov	DWORD PTR $T232002[ebp], edx
$LN11@erase@3:
	mov	eax, DWORD PTR $T232002[ebp]
	cmp	eax, DWORD PTR $T232023[ebp]
	je	SHORT $LN3@erase@3
	mov	ecx, DWORD PTR $T232002[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T232003[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN10@erase@3
$LN3@erase@3:

; 1020 : 		_Destroy(_Mylast - 1, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T232086[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 8
	mov	DWORD PTR $T232085[ebp], edx
	mov	eax, DWORD PTR $T232086[ebp]
	mov	DWORD PTR $T232067[ebp], eax
	mov	ecx, DWORD PTR $T232085[ebp]
	mov	DWORD PTR $T232066[ebp], ecx
	mov	dl, BYTE PTR __Cat$232074[ebp]
	mov	BYTE PTR $T232072[ebp], dl
	mov	eax, DWORD PTR $T232066[ebp]
	mov	DWORD PTR $T232050[ebp], eax
	jmp	SHORT $LN22@erase@3
$LN21@erase@3:
	mov	ecx, DWORD PTR $T232050[ebp]
	add	ecx, 8
	mov	DWORD PTR $T232050[ebp], ecx
$LN22@erase@3:
	mov	edx, DWORD PTR $T232050[ebp]
	cmp	edx, DWORD PTR $T232067[ebp]
	je	SHORT $LN14@erase@3
	jmp	SHORT $LN21@erase@3
$LN14@erase@3:

; 1021 : 		--_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1022 : 		return (_Make_iter(_Where));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1023 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T232133 = -30						; size = 1
$T232120 = -29						; size = 1
$T232116 = -28						; size = 4
$T232109 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T232133[ebp]
	mov	DWORD PTR $T232109[ebp], eax
	lea	ecx, DWORD PTR $T232120[ebp]
	mov	DWORD PTR $T232116[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
PUBLIC	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z$4
__ehfuncinfo$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv170 = -204						; size = 4
tv168 = -200						; size = 4
_this$ = -196						; size = 4
$T232488 = -192						; size = 4
$T232487 = -188						; size = 4
$T232483 = -184						; size = 4
$T232482 = -180						; size = 4
$T232464 = -176						; size = 4
$T232463 = -172						; size = 4
$T232447 = -168						; size = 4
__Cat$232469 = -162					; size = 1
$T232467 = -161						; size = 1
$T232415 = -160						; size = 4
$T232414 = -156						; size = 4
$T232395 = -152						; size = 4
$T232378 = -145						; size = 1
$T232377 = -144						; size = 4
$T232367 = -140						; size = 4
$T232366 = -136						; size = 4
__Cat$232412 = -130					; size = 1
$T232410 = -129						; size = 1
$T232409 = -128						; size = 1
__Cat$232403 = -127					; size = 1
$T232401 = -126						; size = 1
$T232400 = -125						; size = 1
$T232336 = -124						; size = 4
$T232320 = -120						; size = 4
__Count$232290 = -36					; size = 4
$T232270 = -32						; size = 4
$T232269 = -28						; size = 4
__Size$223596 = -24					; size = 4
__Ptr$223587 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::reserve, COMDAT
; _this$ = ecx

; 602  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 		if (max_size() < _Count)

	mov	DWORD PTR __Count$232290[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$232290[ebp], 0
	jbe	SHORT $LN16@reserve
	mov	eax, DWORD PTR __Count$232290[ebp]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN12@reserve
$LN16@reserve:
	mov	DWORD PTR tv168[ebp], 1
$LN12@reserve:
	mov	ecx, DWORD PTR tv168[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 604  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 605  : 		else if (capacity() < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN26@reserve
	mov	DWORD PTR tv170[ebp], 0
	jmp	SHORT $LN24@reserve
$LN26@reserve:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv170[ebp], eax
$LN24@reserve:
	mov	edx, DWORD PTR tv170[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 606  : 			{	// not enough room, reallocate
; 607  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
	add	esp, 8
	mov	DWORD PTR __Ptr$223587[ebp], eax

; 608  : 
; 609  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 610  : 			_Umove(begin(), end(), _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T232320[ebp], edx
	mov	eax, DWORD PTR $T232320[ebp]
	mov	DWORD PTR $T232269[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T232336[ebp], edx
	mov	eax, DWORD PTR $T232336[ebp]
	mov	DWORD PTR $T232270[ebp], eax
	mov	ecx, DWORD PTR $T232269[ebp]
	mov	DWORD PTR $T232415[ebp], ecx
	mov	edx, DWORD PTR $T232270[ebp]
	mov	DWORD PTR $T232414[ebp], edx
	mov	eax, DWORD PTR __Ptr$223587[ebp]
	mov	DWORD PTR $T232395[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T232400[ebp], cl
	mov	dl, BYTE PTR __Cat$232403[ebp]
	mov	BYTE PTR $T232401[ebp], dl
	mov	al, BYTE PTR $T232400[ebp]
	mov	BYTE PTR $T232378[ebp], al
	mov	ecx, DWORD PTR $T232395[ebp]
	mov	DWORD PTR $T232377[ebp], ecx
	mov	edx, DWORD PTR $T232377[ebp]
	mov	DWORD PTR $T232367[ebp], edx
	mov	eax, DWORD PTR $T232414[ebp]
	mov	DWORD PTR $T232366[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T232409[ebp], cl
	mov	dl, BYTE PTR __Cat$232412[ebp]
	mov	BYTE PTR $T232410[ebp], dl
	movzx	eax, BYTE PTR $T232409[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T232410[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T232367[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232415[ebp]
	push	ecx
	mov	edx, DWORD PTR $T232366[ebp]
	push	edx
	call	??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z$0:

; 611  : 			_CATCH_ALL
; 612  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Ptr$223587[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 613  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 614  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@reserve
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 615  : 
; 616  : 			size_type _Size = size();

$LN61@reserve:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Size$223596[ebp], eax

; 617  : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN1@reserve

; 618  : 				{	// destroy and deallocate old array
; 619  : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T232483[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T232482[ebp], eax
	mov	ecx, DWORD PTR $T232483[ebp]
	mov	DWORD PTR $T232464[ebp], ecx
	mov	edx, DWORD PTR $T232482[ebp]
	mov	DWORD PTR $T232463[ebp], edx
	mov	al, BYTE PTR __Cat$232469[ebp]
	mov	BYTE PTR $T232467[ebp], al
	mov	ecx, DWORD PTR $T232463[ebp]
	mov	DWORD PTR $T232447[ebp], ecx
	jmp	SHORT $LN71@reserve
$LN70@reserve:
	mov	edx, DWORD PTR $T232447[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T232447[ebp], edx
$LN71@reserve:
	mov	eax, DWORD PTR $T232447[ebp]
	cmp	eax, DWORD PTR $T232464[ebp]
	je	SHORT $LN63@reserve
	jmp	SHORT $LN70@reserve
$LN63@reserve:

; 620  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T232488[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T232487[ebp], eax
	mov	ecx, DWORD PTR $T232487[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@reserve:

; 621  : 				}
; 622  : 
; 623  :  #if _HAS_ITERATOR_DEBUGGING
; 624  : 			this->_Orphan_all();
; 625  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 626  : 
; 627  : 			_Myend = _Ptr + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Ptr$223587[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 628  : 			_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$223596[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Ptr$223587[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 629  : 			_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$223587[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve:

; 630  : 			}
; 631  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::reserve
PUBLIC	?insert@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE?AV?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@ABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::insert
PUBLIC	??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXABUCvDllPathFinderUpdateListData@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T232549 = -32						; size = 4
$T232539 = -28						; size = 4
$T232529 = -24						; size = 4
__Cat$232536 = -19					; size = 1
$T232533 = -18						; size = 1
$T232532 = -17						; size = 1
$T232506 = -16						; size = 4
$T232502 = -12						; size = 4
$T232501 = -8						; size = 4
$T232500 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXABUCvDllPathFinderUpdateListData@@@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T232506[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@4
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@4
$LN9@push_back@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@4:
	mov	edx, DWORD PTR $T232506[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@4

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T232539[ebp], ecx
	mov	edx, DWORD PTR $T232539[ebp]
	mov	DWORD PTR $T232529[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T232532[ebp], al
	mov	cl, BYTE PTR __Cat$232536[ebp]
	mov	BYTE PTR $T232533[ebp], cl
	movzx	edx, BYTE PTR $T232532[ebp]
	push	edx
	movzx	eax, BYTE PTR $T232533[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T232529[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR $T232539[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@4
$LN2@push_back@4:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T232549[ebp], ecx
	mov	edx, DWORD PTR $T232549[ebp]
	mov	DWORD PTR $T232501[ebp], edx
	mov	eax, DWORD PTR $T232501[ebp]
	mov	DWORD PTR $T232500[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T232500[ebp]
	push	edx
	lea	eax, DWORD PTR $T232502[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE?AV?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@ABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::insert
$LN3@push_back@4:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXABUCvDllPathFinderUpdateListData@@@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::~_Vector_val<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::~_Vector_val<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@ABU?$pair@IPAVCvRandom@@@2@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$232698 = -24					; size = 4
$T232676 = -20						; size = 4
$T232657 = -16						; size = 4
$T232644 = -12						; size = 4
$T232641 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@ABU?$pair@IPAVCvRandom@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	test	edx, edx
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T232657[ebp], ecx
	mov	edx, DWORD PTR $T232657[ebp]
	mov	DWORD PTR $T232641[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T232641[ebp]
	sar	eax, 3
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T232676[ebp], edx
	mov	eax, DWORD PTR $T232676[ebp]
	mov	DWORD PTR $T232644[ebp], eax
	mov	ecx, DWORD PTR $T232644[ebp]
	mov	DWORD PTR __Tmp$232698[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$232698[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$232698[ebp], ecx
	mov	edx, DWORD PTR __Tmp$232698[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@ABU?$pair@IPAVCvRandom@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T232840 = -64						; size = 4
$T232822 = -60						; size = 4
$T232821 = -56						; size = 4
$T232805 = -52						; size = 4
__Cat$232827 = -46					; size = 1
$T232825 = -45						; size = 1
$T232779 = -44						; size = 4
$T232778 = -40						; size = 4
$T232777 = -36						; size = 4
$T232760 = -30						; size = 1
$T232759 = -29						; size = 1
$T232758 = -28						; size = 4
$T232757 = -24						; size = 4
__Cat$232767 = -16					; size = 1
$T232765 = -15						; size = 1
$T232764 = -14						; size = 1
$T232763 = -13						; size = 1
__Ptr$223712 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@0@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T232779[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T232778[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T232777[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T232763[ebp], cl
	mov	dl, BYTE PTR __Cat$232767[ebp]
	mov	BYTE PTR $T232764[ebp], dl
	mov	al, BYTE PTR $T232763[ebp]
	mov	BYTE PTR $T232760[ebp], al
	mov	cl, BYTE PTR $T232765[ebp]
	mov	BYTE PTR $T232759[ebp], cl
	mov	edx, DWORD PTR $T232779[ebp]
	mov	DWORD PTR $T232758[ebp], edx
	mov	eax, DWORD PTR $T232777[ebp]
	mov	DWORD PTR $T232757[ebp], eax
	jmp	SHORT $LN28@erase@4
$LN27@erase@4:
	mov	ecx, DWORD PTR $T232758[ebp]
	add	ecx, 8
	mov	DWORD PTR $T232758[ebp], ecx
	mov	edx, DWORD PTR $T232757[ebp]
	add	edx, 8
	mov	DWORD PTR $T232757[ebp], edx
$LN28@erase@4:
	mov	eax, DWORD PTR $T232757[ebp]
	cmp	eax, DWORD PTR $T232778[ebp]
	je	SHORT $LN20@erase@4
	mov	ecx, DWORD PTR $T232757[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T232758[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN27@erase@4
$LN20@erase@4:
	mov	edx, DWORD PTR $T232758[ebp]
	mov	DWORD PTR __Ptr$223712[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T232840[ebp], ecx
	mov	edx, DWORD PTR $T232840[ebp]
	mov	DWORD PTR $T232822[ebp], edx
	mov	eax, DWORD PTR __Ptr$223712[ebp]
	mov	DWORD PTR $T232821[ebp], eax
	mov	cl, BYTE PTR __Cat$232827[ebp]
	mov	BYTE PTR $T232825[ebp], cl
	mov	edx, DWORD PTR $T232821[ebp]
	mov	DWORD PTR $T232805[ebp], edx
	jmp	SHORT $LN39@erase@4
$LN38@erase@4:
	mov	eax, DWORD PTR $T232805[ebp]
	add	eax, 8
	mov	DWORD PTR $T232805[ebp], eax
$LN39@erase@4:
	mov	ecx, DWORD PTR $T232805[ebp]
	cmp	ecx, DWORD PTR $T232822[ebp]
	je	SHORT $LN31@erase@4
	jmp	SHORT $LN38@erase@4
$LN31@erase@4:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$223712[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@0@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvRandom *> >
PUBLIC	?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$232854 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$232854[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$232854[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$232854[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvRandom *> >
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T232951 = -32						; size = 4
$T232950 = -28						; size = 4
$T232946 = -24						; size = 4
$T232945 = -20						; size = 4
$T232927 = -16						; size = 4
$T232926 = -12						; size = 4
$T232910 = -8						; size = 4
__Cat$232933 = -2					; size = 1
$T232931 = -1						; size = 1
?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T232946[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T232945[ebp], ecx
	mov	edx, DWORD PTR $T232946[ebp]
	mov	DWORD PTR $T232927[ebp], edx
	mov	eax, DWORD PTR $T232945[ebp]
	mov	DWORD PTR $T232926[ebp], eax
	mov	cl, BYTE PTR __Cat$232933[ebp]
	mov	BYTE PTR $T232931[ebp], cl
	mov	edx, DWORD PTR $T232926[ebp]
	mov	DWORD PTR $T232910[ebp], edx
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	eax, DWORD PTR $T232910[ebp]
	add	eax, 8
	mov	DWORD PTR $T232910[ebp], eax
$LN12@Tidy:
	mov	ecx, DWORD PTR $T232910[ebp]
	cmp	ecx, DWORD PTR $T232927[ebp]
	je	SHORT $LN4@Tidy
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	mov	DWORD PTR $T232951[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T232950[ebp], eax
	mov	ecx, DWORD PTR $T232950[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$233011 = -24					; size = 4
$T232989 = -20						; size = 4
$T232970 = -16						; size = 4
$T232957 = -12						; size = 4
$T232954 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	test	edx, edx
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T232970[ebp], ecx
	mov	edx, DWORD PTR $T232970[ebp]
	mov	DWORD PTR $T232954[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T232954[ebp]
	sar	eax, 3
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@2:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T232989[ebp], edx
	mov	eax, DWORD PTR $T232989[ebp]
	mov	DWORD PTR $T232957[ebp], eax
	mov	ecx, DWORD PTR $T232957[ebp]
	mov	DWORD PTR __Tmp$233011[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$233011[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$233011[ebp], ecx
	mov	edx, DWORD PTR __Tmp$233011[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T233153 = -64						; size = 4
$T233135 = -60						; size = 4
$T233134 = -56						; size = 4
$T233118 = -52						; size = 4
__Cat$233142 = -46					; size = 1
$T233140 = -45						; size = 1
$T233092 = -44						; size = 4
$T233091 = -40						; size = 4
$T233090 = -36						; size = 4
$T233073 = -30						; size = 1
$T233072 = -29						; size = 1
$T233071 = -28						; size = 4
$T233070 = -24						; size = 4
__Cat$233080 = -16					; size = 1
$T233078 = -15						; size = 1
$T233077 = -14						; size = 1
$T233076 = -13						; size = 1
__Ptr$223774 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@0@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T233092[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233091[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T233090[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T233076[ebp], cl
	mov	dl, BYTE PTR __Cat$233080[ebp]
	mov	BYTE PTR $T233077[ebp], dl
	mov	al, BYTE PTR $T233076[ebp]
	mov	BYTE PTR $T233073[ebp], al
	mov	cl, BYTE PTR $T233078[ebp]
	mov	BYTE PTR $T233072[ebp], cl
	mov	edx, DWORD PTR $T233092[ebp]
	mov	DWORD PTR $T233071[ebp], edx
	mov	eax, DWORD PTR $T233090[ebp]
	mov	DWORD PTR $T233070[ebp], eax
	jmp	SHORT $LN28@erase@5
$LN27@erase@5:
	mov	ecx, DWORD PTR $T233071[ebp]
	add	ecx, 8
	mov	DWORD PTR $T233071[ebp], ecx
	mov	edx, DWORD PTR $T233070[ebp]
	add	edx, 8
	mov	DWORD PTR $T233070[ebp], edx
$LN28@erase@5:
	mov	eax, DWORD PTR $T233070[ebp]
	cmp	eax, DWORD PTR $T233091[ebp]
	je	SHORT $LN20@erase@5
	mov	ecx, DWORD PTR $T233070[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T233071[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN27@erase@5
$LN20@erase@5:
	mov	edx, DWORD PTR $T233071[ebp]
	mov	DWORD PTR __Ptr$223774[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T233153[ebp], ecx
	mov	edx, DWORD PTR $T233153[ebp]
	mov	DWORD PTR $T233135[ebp], edx
	mov	eax, DWORD PTR __Ptr$223774[ebp]
	mov	DWORD PTR $T233134[ebp], eax
	mov	cl, BYTE PTR __Cat$233142[ebp]
	mov	BYTE PTR $T233140[ebp], cl
	mov	edx, DWORD PTR $T233134[ebp]
	mov	DWORD PTR $T233118[ebp], edx
	jmp	SHORT $LN39@erase@5
$LN38@erase@5:
	mov	eax, DWORD PTR $T233118[ebp]
	add	eax, 8
	mov	DWORD PTR $T233118[ebp], eax
$LN39@erase@5:
	mov	ecx, DWORD PTR $T233118[ebp]
	cmp	ecx, DWORD PTR $T233135[ebp]
	je	SHORT $LN31@erase@5
	jmp	SHORT $LN38@erase@5
$LN31@erase@5:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$223774[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@0@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetInitInfo *> >
PUBLIC	?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$233167 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$233167[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$233167[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$233167[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetInitInfo *> >
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T233264 = -32						; size = 4
$T233263 = -28						; size = 4
$T233259 = -24						; size = 4
$T233258 = -20						; size = 4
$T233240 = -16						; size = 4
$T233239 = -12						; size = 4
$T233223 = -8						; size = 4
__Cat$233247 = -2					; size = 1
$T233245 = -1						; size = 1
?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233259[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233258[ebp], ecx
	mov	edx, DWORD PTR $T233259[ebp]
	mov	DWORD PTR $T233240[ebp], edx
	mov	eax, DWORD PTR $T233258[ebp]
	mov	DWORD PTR $T233239[ebp], eax
	mov	cl, BYTE PTR __Cat$233247[ebp]
	mov	BYTE PTR $T233245[ebp], cl
	mov	edx, DWORD PTR $T233239[ebp]
	mov	DWORD PTR $T233223[ebp], edx
	jmp	SHORT $LN12@Tidy@2
$LN11@Tidy@2:
	mov	eax, DWORD PTR $T233223[ebp]
	add	eax, 8
	mov	DWORD PTR $T233223[ebp], eax
$LN12@Tidy@2:
	mov	ecx, DWORD PTR $T233223[ebp]
	cmp	ecx, DWORD PTR $T233240[ebp]
	je	SHORT $LN4@Tidy@2
	jmp	SHORT $LN11@Tidy@2
$LN4@Tidy@2:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	mov	DWORD PTR $T233264[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233263[ebp], eax
	mov	ecx, DWORD PTR $T233263[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$233324 = -24					; size = 4
$T233302 = -20						; size = 4
$T233283 = -16						; size = 4
$T233270 = -12						; size = 4
$T233267 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	test	edx, edx
	jne	SHORT $LN3@insert@3
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@3
$LN3@insert@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233283[ebp], ecx
	mov	edx, DWORD PTR $T233283[ebp]
	mov	DWORD PTR $T233267[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T233267[ebp]
	sar	eax, 3
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@3:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T233302[ebp], edx
	mov	eax, DWORD PTR $T233302[ebp]
	mov	DWORD PTR $T233270[ebp], eax
	mov	ecx, DWORD PTR $T233270[ebp]
	mov	DWORD PTR __Tmp$233324[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$233324[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR __Tmp$233324[ebp], ecx
	mov	edx, DWORD PTR __Tmp$233324[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@ABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T233466 = -64						; size = 4
$T233448 = -60						; size = 4
$T233447 = -56						; size = 4
$T233431 = -52						; size = 4
__Cat$233455 = -46					; size = 1
$T233453 = -45						; size = 1
$T233405 = -44						; size = 4
$T233404 = -40						; size = 4
$T233403 = -36						; size = 4
$T233386 = -30						; size = 1
$T233385 = -29						; size = 1
$T233384 = -28						; size = 4
$T233383 = -24						; size = 4
__Cat$233393 = -16					; size = 1
$T233391 = -15						; size = 1
$T233390 = -14						; size = 1
$T233389 = -13						; size = 1
__Ptr$223836 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@0@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@6

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T233405[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233404[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T233403[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T233389[ebp], cl
	mov	dl, BYTE PTR __Cat$233393[ebp]
	mov	BYTE PTR $T233390[ebp], dl
	mov	al, BYTE PTR $T233389[ebp]
	mov	BYTE PTR $T233386[ebp], al
	mov	cl, BYTE PTR $T233391[ebp]
	mov	BYTE PTR $T233385[ebp], cl
	mov	edx, DWORD PTR $T233405[ebp]
	mov	DWORD PTR $T233384[ebp], edx
	mov	eax, DWORD PTR $T233403[ebp]
	mov	DWORD PTR $T233383[ebp], eax
	jmp	SHORT $LN28@erase@6
$LN27@erase@6:
	mov	ecx, DWORD PTR $T233384[ebp]
	add	ecx, 8
	mov	DWORD PTR $T233384[ebp], ecx
	mov	edx, DWORD PTR $T233383[ebp]
	add	edx, 8
	mov	DWORD PTR $T233383[ebp], edx
$LN28@erase@6:
	mov	eax, DWORD PTR $T233383[ebp]
	cmp	eax, DWORD PTR $T233404[ebp]
	je	SHORT $LN20@erase@6
	mov	ecx, DWORD PTR $T233383[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T233384[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN27@erase@6
$LN20@erase@6:
	mov	edx, DWORD PTR $T233384[ebp]
	mov	DWORD PTR __Ptr$223836[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T233466[ebp], ecx
	mov	edx, DWORD PTR $T233466[ebp]
	mov	DWORD PTR $T233448[ebp], edx
	mov	eax, DWORD PTR __Ptr$223836[ebp]
	mov	DWORD PTR $T233447[ebp], eax
	mov	cl, BYTE PTR __Cat$233455[ebp]
	mov	BYTE PTR $T233453[ebp], cl
	mov	edx, DWORD PTR $T233447[ebp]
	mov	DWORD PTR $T233431[ebp], edx
	jmp	SHORT $LN39@erase@6
$LN38@erase@6:
	mov	eax, DWORD PTR $T233431[ebp]
	add	eax, 8
	mov	DWORD PTR $T233431[ebp], eax
$LN39@erase@6:
	mov	ecx, DWORD PTR $T233431[ebp]
	cmp	ecx, DWORD PTR $T233448[ebp]
	je	SHORT $LN31@erase@6
	jmp	SHORT $LN38@erase@6
$LN31@erase@6:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$223836[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@6:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@0@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetLoadGameInfo *> >
PUBLIC	?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$233480 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$233480[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$233480[ebp], 0
	jbe	SHORT $LN11@Buy@3
	mov	eax, DWORD PTR __Count$233480[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@3
$LN11@Buy@3:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@3:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetLoadGameInfo *> >
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T233577 = -32						; size = 4
$T233576 = -28						; size = 4
$T233572 = -24						; size = 4
$T233571 = -20						; size = 4
$T233553 = -16						; size = 4
$T233552 = -12						; size = 4
$T233536 = -8						; size = 4
__Cat$233558 = -2					; size = 1
$T233556 = -1						; size = 1
?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233572[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233571[ebp], ecx
	mov	edx, DWORD PTR $T233572[ebp]
	mov	DWORD PTR $T233553[ebp], edx
	mov	eax, DWORD PTR $T233571[ebp]
	mov	DWORD PTR $T233552[ebp], eax
	mov	cl, BYTE PTR __Cat$233558[ebp]
	mov	BYTE PTR $T233556[ebp], cl
	mov	edx, DWORD PTR $T233552[ebp]
	mov	DWORD PTR $T233536[ebp], edx
	jmp	SHORT $LN12@Tidy@3
$LN11@Tidy@3:
	mov	eax, DWORD PTR $T233536[ebp]
	add	eax, 8
	mov	DWORD PTR $T233536[ebp], eax
$LN12@Tidy@3:
	mov	ecx, DWORD PTR $T233536[ebp]
	cmp	ecx, DWORD PTR $T233553[ebp]
	je	SHORT $LN4@Tidy@3
	jmp	SHORT $LN11@Tidy@3
$LN4@Tidy@3:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	mov	DWORD PTR $T233577[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233576[ebp], eax
	mov	ecx, DWORD PTR $T233576[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE?AV?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@ABUCvDllPathFinderUpdateListData@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$233632 = -24					; size = 4
$T233615 = -20						; size = 4
$T233596 = -16						; size = 4
$T233583 = -12						; size = 4
$T233580 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE?AV?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@ABUCvDllPathFinderUpdateListData@@@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@4
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@4
$LN3@insert@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233596[ebp], eax
	mov	ecx, DWORD PTR $T233596[ebp]
	mov	DWORD PTR $T233580[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T233580[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@4:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233615[ebp], eax
	mov	ecx, DWORD PTR $T233615[ebp]
	mov	DWORD PTR $T233583[ebp], ecx
	mov	edx, DWORD PTR $T233583[ebp]
	mov	DWORD PTR __Tmp$233632[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$233632[ebp]
	mov	DWORD PTR __Tmp$233632[ebp], eax
	mov	ecx, DWORD PTR __Tmp$233632[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE?AV?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@ABUCvDllPathFinderUpdateListData@@@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$233654 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$233654[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$233654[ebp], 0
	jbe	SHORT $LN11@Buy@4
	mov	eax, DWORD PTR __Count$233654[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@4
$LN11@Buy@4:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@4:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T233748 = -32						; size = 4
$T233747 = -28						; size = 4
$T233743 = -24						; size = 4
$T233742 = -20						; size = 4
$T233724 = -16						; size = 4
$T233723 = -12						; size = 4
$T233707 = -8						; size = 4
__Cat$233729 = -2					; size = 1
$T233727 = -1						; size = 1
?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233743[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T233742[ebp], ecx
	mov	edx, DWORD PTR $T233743[ebp]
	mov	DWORD PTR $T233724[ebp], edx
	mov	eax, DWORD PTR $T233742[ebp]
	mov	DWORD PTR $T233723[ebp], eax
	mov	cl, BYTE PTR __Cat$233729[ebp]
	mov	BYTE PTR $T233727[ebp], cl
	mov	edx, DWORD PTR $T233723[ebp]
	mov	DWORD PTR $T233707[ebp], edx
	jmp	SHORT $LN12@Tidy@4
$LN11@Tidy@4:
	mov	eax, DWORD PTR $T233707[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T233707[ebp], eax
$LN12@Tidy@4:
	mov	ecx, DWORD PTR $T233707[ebp]
	cmp	ecx, DWORD PTR $T233724[ebp]
	je	SHORT $LN4@Tidy@4
	jmp	SHORT $LN11@Tidy@4
$LN4@Tidy@4:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T233748[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233747[ebp], eax
	mov	ecx, DWORD PTR $T233747[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233752 = -80						; size = 28
$T233751 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233752[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T233751[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T233751[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T233752[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233751[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T233751[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233751[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T233752[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233752[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233751[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
PUBLIC	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$2
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$0
__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv304 = -428						; size = 4
tv290 = -424						; size = 4
tv282 = -420						; size = 4
_this$ = -416						; size = 4
$T234476 = -412						; size = 4
$T234468 = -408						; size = 4
$T234467 = -404						; size = 4
$T234444 = -398						; size = 1
$T234443 = -397						; size = 1
$T234442 = -396						; size = 4
$T234441 = -392						; size = 4
$T234429 = -385						; size = 1
$T234428 = -384						; size = 4
$T234427 = -380						; size = 4
$T234426 = -376						; size = 4
__Cat$234461 = -372					; size = 1
$T234459 = -371						; size = 1
$T234458 = -370						; size = 1
__Cat$234451 = -368					; size = 1
$T234449 = -367						; size = 1
$T234448 = -366						; size = 1
$T234447 = -365						; size = 1
$T234401 = -364						; size = 4
$T234382 = -360						; size = 4
$T234365 = -353						; size = 1
$T234364 = -352						; size = 4
$T234354 = -348						; size = 4
$T234353 = -344						; size = 4
__Cat$234399 = -338					; size = 1
$T234397 = -337						; size = 1
$T234396 = -336						; size = 1
__Cat$234390 = -335					; size = 1
$T234388 = -334						; size = 1
$T234387 = -333						; size = 1
$T234329 = -332						; size = 4
$T234321 = -328						; size = 4
$T234313 = -324						; size = 4
$T234295 = -320						; size = 4
$T234294 = -316						; size = 4
$T234278 = -312						; size = 4
__Cat$234302 = -306					; size = 1
$T234300 = -305						; size = 1
$T234252 = -304						; size = 4
$T234251 = -300						; size = 4
$T234241 = -296						; size = 4
__Cat$234249 = -291					; size = 1
$T234247 = -290						; size = 1
$T234246 = -289						; size = 1
$T234225 = -288						; size = 4
$T234206 = -284						; size = 4
$T234189 = -277						; size = 1
$T234188 = -276						; size = 4
$T234178 = -272						; size = 4
$T234177 = -268						; size = 4
__Cat$234223 = -262					; size = 1
$T234221 = -261						; size = 1
$T234220 = -260						; size = 1
__Cat$234214 = -259					; size = 1
$T234212 = -258						; size = 1
$T234211 = -257						; size = 1
$T234153 = -256						; size = 4
$T234152 = -252						; size = 4
$T234148 = -248						; size = 4
$T234147 = -244						; size = 4
$T234129 = -240						; size = 4
$T234128 = -236						; size = 4
$T234112 = -232						; size = 4
__Cat$234136 = -226					; size = 1
$T234134 = -225						; size = 1
$T234063 = -224						; size = 4
$T234062 = -220						; size = 4
$T234046 = -216						; size = 4
__Cat$234070 = -210					; size = 1
$T234068 = -209						; size = 1
$T234003 = -208						; size = 4
$T234002 = -204						; size = 4
$T233986 = -200						; size = 4
__Cat$234010 = -194					; size = 1
$T234008 = -193						; size = 1
$T233960 = -192						; size = 4
$T233948 = -188						; size = 4
$T233938 = -181						; size = 1
$T233937 = -180						; size = 4
__Cat$233955 = -175					; size = 1
$T233953 = -174						; size = 1
$T233952 = -173						; size = 1
$T233925 = -172						; size = 4
$T233913 = -168						; size = 4
$T233903 = -161						; size = 1
$T233902 = -160						; size = 4
__Cat$233920 = -155					; size = 1
$T233918 = -154						; size = 1
$T233917 = -153						; size = 1
$T233890 = -152						; size = 4
$T233880 = -148						; size = 4
__Cat$233886 = -143					; size = 1
$T233884 = -142						; size = 1
$T233883 = -141						; size = 1
__Count$233849 = -128					; size = 4
__Count$233823 = -56					; size = 4
__Tmp$224015 = -52					; size = 8
__Oldend$224016 = -44					; size = 4
__Tmp$223997 = -40					; size = 8
__Ncopied$223984 = -32					; size = 4
__Newvec$223982 = -28					; size = 4
__Whereoff$223983 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$233823[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$233823[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	edx, DWORD PTR __Count$233823[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$233849[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$233849[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	ecx, DWORD PTR __Count$233849[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvRandom *> >
	add	esp, 8
	mov	DWORD PTR __Newvec$223982[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR __Whereoff$223983[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$223984[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$223983[ebp]
	mov	ecx, DWORD PTR __Newvec$223982[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T233890[ebp], edx
	mov	eax, DWORD PTR $T233890[ebp]
	mov	DWORD PTR $T233880[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T233883[ebp], cl
	mov	dl, BYTE PTR __Cat$233886[ebp]
	mov	BYTE PTR $T233884[ebp], dl
	movzx	eax, BYTE PTR $T233883[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T233884[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233880[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223984[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223984[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T233925[ebp], edx
	mov	eax, DWORD PTR __Newvec$223982[ebp]
	mov	DWORD PTR $T233913[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T233917[ebp], cl
	mov	dl, BYTE PTR __Cat$233920[ebp]
	mov	BYTE PTR $T233918[ebp], dl
	mov	al, BYTE PTR $T233917[ebp]
	mov	BYTE PTR $T233903[ebp], al
	mov	ecx, DWORD PTR $T233913[ebp]
	mov	DWORD PTR $T233902[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T233902[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233925[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223984[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223984[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233960[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223983[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$223982[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T233948[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T233952[ebp], al
	mov	cl, BYTE PTR __Cat$233955[ebp]
	mov	BYTE PTR $T233953[ebp], cl
	mov	dl, BYTE PTR $T233952[ebp]
	mov	BYTE PTR $T233938[ebp], dl
	mov	eax, DWORD PTR $T233948[ebp]
	mov	DWORD PTR $T233937[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233937[ebp]
	push	edx
	mov	eax, DWORD PTR $T233960[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223984[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$223983[ebp]
	mov	eax, DWORD PTR __Newvec$223982[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T234003[ebp], ecx
	mov	edx, DWORD PTR __Newvec$223982[ebp]
	mov	DWORD PTR $T234002[ebp], edx
	mov	al, BYTE PTR __Cat$234010[ebp]
	mov	BYTE PTR $T234008[ebp], al
	mov	ecx, DWORD PTR $T234002[ebp]
	mov	DWORD PTR $T233986[ebp], ecx
	jmp	SHORT $LN91@Insert_n
$LN90@Insert_n:
	mov	edx, DWORD PTR $T233986[ebp]
	add	edx, 8
	mov	DWORD PTR $T233986[ebp], edx
$LN91@Insert_n:
	mov	eax, DWORD PTR $T233986[ebp]
	cmp	eax, DWORD PTR $T234003[ebp]
	je	SHORT $LN7@Insert_n
	jmp	SHORT $LN90@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223984[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$223983[ebp]
	mov	edx, DWORD PTR __Newvec$223982[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T234063[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223983[ebp]
	mov	ecx, DWORD PTR __Newvec$223982[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234062[ebp], edx
	mov	al, BYTE PTR __Cat$234070[ebp]
	mov	BYTE PTR $T234068[ebp], al
	mov	ecx, DWORD PTR $T234062[ebp]
	mov	DWORD PTR $T234046[ebp], ecx
	jmp	SHORT $LN106@Insert_n
$LN105@Insert_n:
	mov	edx, DWORD PTR $T234046[ebp]
	add	edx, 8
	mov	DWORD PTR $T234046[ebp], edx
$LN106@Insert_n:
	mov	eax, DWORD PTR $T234046[ebp]
	cmp	eax, DWORD PTR $T234063[ebp]
	je	SHORT $LN6@Insert_n
	jmp	SHORT $LN105@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$223982[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234148[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234147[ebp], eax
	mov	ecx, DWORD PTR $T234148[ebp]
	mov	DWORD PTR $T234129[ebp], ecx
	mov	edx, DWORD PTR $T234147[ebp]
	mov	DWORD PTR $T234128[ebp], edx
	mov	al, BYTE PTR __Cat$234136[ebp]
	mov	BYTE PTR $T234134[ebp], al
	mov	ecx, DWORD PTR $T234128[ebp]
	mov	DWORD PTR $T234112[ebp], ecx
	jmp	SHORT $LN125@Insert_n
$LN124@Insert_n:
	mov	edx, DWORD PTR $T234112[ebp]
	add	edx, 8
	mov	DWORD PTR $T234112[ebp], edx
$LN125@Insert_n:
	mov	eax, DWORD PTR $T234112[ebp]
	cmp	eax, DWORD PTR $T234129[ebp]
	je	SHORT $LN117@Insert_n
	jmp	SHORT $LN124@Insert_n
$LN117@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR $T234153[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234152[ebp], edx
	mov	eax, DWORD PTR $T234152[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$223982[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$223982[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$223982[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223997[ebp], edx
	mov	DWORD PTR __Tmp$223997[ebp+4], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234225[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234206[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234211[ebp], al
	mov	cl, BYTE PTR __Cat$234214[ebp]
	mov	BYTE PTR $T234212[ebp], cl
	mov	dl, BYTE PTR $T234211[ebp]
	mov	BYTE PTR $T234189[ebp], dl
	mov	eax, DWORD PTR $T234206[ebp]
	mov	DWORD PTR $T234188[ebp], eax
	mov	ecx, DWORD PTR $T234188[ebp]
	mov	DWORD PTR $T234178[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234177[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234220[ebp], al
	mov	cl, BYTE PTR __Cat$234223[ebp]
	mov	BYTE PTR $T234221[ebp], cl
	movzx	edx, BYTE PTR $T234220[ebp]
	push	edx
	movzx	eax, BYTE PTR $T234221[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234178[ebp]
	push	edx
	mov	eax, DWORD PTR $T234225[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234177[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T234252[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T234251[ebp], eax
	mov	ecx, DWORD PTR $T234251[ebp]
	mov	DWORD PTR $T234241[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T234246[ebp], dl
	mov	al, BYTE PTR __Cat$234249[ebp]
	mov	BYTE PTR $T234247[ebp], al
	movzx	ecx, BYTE PTR $T234246[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T234247[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$223997[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234252[ebp]
	push	edx
	mov	eax, DWORD PTR $T234241[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR $T234313[ebp], ecx
	mov	edx, DWORD PTR $T234313[ebp]
	mov	DWORD PTR $T234295[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234294[ebp], edx
	mov	al, BYTE PTR __Cat$234302[ebp]
	mov	BYTE PTR $T234300[ebp], al
	mov	ecx, DWORD PTR $T234294[ebp]
	mov	DWORD PTR $T234278[ebp], ecx
	jmp	SHORT $LN160@Insert_n
$LN159@Insert_n:
	mov	edx, DWORD PTR $T234278[ebp]
	add	edx, 8
	mov	DWORD PTR $T234278[ebp], edx
$LN160@Insert_n:
	mov	eax, DWORD PTR $T234278[ebp]
	cmp	eax, DWORD PTR $T234295[ebp]
	je	SHORT $LN152@Insert_n
	jmp	SHORT $LN159@Insert_n
$LN152@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T234329[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234321[ebp], eax
	jmp	SHORT $LN171@Insert_n
$LN170@Insert_n:
	mov	ecx, DWORD PTR $T234321[ebp]
	add	ecx, 8
	mov	DWORD PTR $T234321[ebp], ecx
$LN171@Insert_n:
	mov	edx, DWORD PTR $T234321[ebp]
	cmp	edx, DWORD PTR $T234329[ebp]
	je	SHORT $LN167@Insert_n
	mov	eax, DWORD PTR __Tmp$223997[ebp]
	mov	ecx, DWORD PTR __Tmp$223997[ebp+4]
	mov	edx, DWORD PTR $T234321[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN170@Insert_n
$LN167@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224015[ebp], ecx
	mov	DWORD PTR __Tmp$224015[ebp+4], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$224016[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T234401[ebp], eax
	mov	ecx, DWORD PTR $T234401[ebp]
	mov	DWORD PTR $T234382[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T234387[ebp], dl
	mov	al, BYTE PTR __Cat$234390[ebp]
	mov	BYTE PTR $T234388[ebp], al
	mov	cl, BYTE PTR $T234387[ebp]
	mov	BYTE PTR $T234365[ebp], cl
	mov	edx, DWORD PTR $T234382[ebp]
	mov	DWORD PTR $T234364[ebp], edx
	mov	eax, DWORD PTR $T234364[ebp]
	mov	DWORD PTR $T234354[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$224016[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T234353[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234396[ebp], al
	mov	cl, BYTE PTR __Cat$234399[ebp]
	mov	BYTE PTR $T234397[ebp], cl
	movzx	edx, BYTE PTR $T234396[ebp]
	push	edx
	movzx	eax, BYTE PTR $T234397[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234354[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$224016[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234353[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$224016[ebp]
	mov	DWORD PTR $T234468[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234467[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T234447[ebp], dl
	mov	al, BYTE PTR __Cat$234451[ebp]
	mov	BYTE PTR $T234448[ebp], al
	mov	cl, BYTE PTR $T234447[ebp]
	mov	BYTE PTR $T234444[ebp], cl
	mov	dl, BYTE PTR $T234449[ebp]
	mov	BYTE PTR $T234443[ebp], dl
	mov	eax, DWORD PTR $T234468[ebp]
	mov	DWORD PTR $T234442[ebp], eax
	mov	ecx, DWORD PTR $T234467[ebp]
	mov	DWORD PTR $T234441[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T234458[ebp], dl
	mov	al, BYTE PTR __Cat$234461[ebp]
	mov	BYTE PTR $T234459[ebp], al
	mov	cl, BYTE PTR $T234458[ebp]
	mov	BYTE PTR $T234429[ebp], cl
	mov	edx, DWORD PTR $T234442[ebp]
	mov	DWORD PTR $T234428[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$224016[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T234427[ebp], ecx
	mov	edx, DWORD PTR $T234441[ebp]
	mov	DWORD PTR $T234426[ebp], edx
$LN197@Insert_n:
	mov	eax, DWORD PTR $T234426[ebp]
	cmp	eax, DWORD PTR $T234427[ebp]
	je	SHORT $LN186@Insert_n
	mov	ecx, DWORD PTR $T234427[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T234427[ebp], ecx
	mov	edx, DWORD PTR $T234428[ebp]
	sub	edx, 8
	mov	DWORD PTR $T234428[ebp], edx
	mov	eax, DWORD PTR $T234427[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T234428[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN197@Insert_n
$LN186@Insert_n:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234476[ebp], ecx
	jmp	SHORT $LN204@Insert_n
$LN203@Insert_n:
	mov	edx, DWORD PTR $T234476[ebp]
	add	edx, 8
	mov	DWORD PTR $T234476[ebp], edx
$LN204@Insert_n:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR $T234476[ebp], edx
	je	SHORT $LN16@Insert_n
	mov	eax, DWORD PTR __Tmp$224015[ebp]
	mov	ecx, DWORD PTR __Tmp$224015[ebp+4]
	mov	edx, DWORD PTR $T234476[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN203@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@2@IABU?$pair@IPAVCvRandom@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T234498 = -80						; size = 28
$T234497 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ PROC ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T234498[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T234497[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T234497[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T234498[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234497[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T234497[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T234497[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T234498[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T234498[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T234497[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@U?$pair@IPAVCvRandom@@@std@@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@KAXXZ ENDP ; std::vector<std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >::_Xlen
PUBLIC	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
PUBLIC	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$2
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$0
__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv304 = -428						; size = 4
tv290 = -424						; size = 4
tv282 = -420						; size = 4
_this$ = -416						; size = 4
$T235200 = -412						; size = 4
$T235192 = -408						; size = 4
$T235191 = -404						; size = 4
$T235168 = -398						; size = 1
$T235167 = -397						; size = 1
$T235166 = -396						; size = 4
$T235165 = -392						; size = 4
$T235153 = -385						; size = 1
$T235152 = -384						; size = 4
$T235151 = -380						; size = 4
$T235150 = -376						; size = 4
__Cat$235184 = -372					; size = 1
$T235182 = -371						; size = 1
$T235181 = -370						; size = 1
__Cat$235174 = -368					; size = 1
$T235172 = -367						; size = 1
$T235171 = -366						; size = 1
$T235170 = -365						; size = 1
$T235125 = -364						; size = 4
$T235106 = -360						; size = 4
$T235089 = -353						; size = 1
$T235088 = -352						; size = 4
$T235078 = -348						; size = 4
$T235077 = -344						; size = 4
__Cat$235121 = -338					; size = 1
$T235119 = -337						; size = 1
$T235118 = -336						; size = 1
__Cat$235113 = -335					; size = 1
$T235111 = -334						; size = 1
$T235110 = -333						; size = 1
$T235053 = -332						; size = 4
$T235045 = -328						; size = 4
$T235037 = -324						; size = 4
$T235019 = -320						; size = 4
$T235018 = -316						; size = 4
$T235002 = -312						; size = 4
__Cat$235025 = -306					; size = 1
$T235023 = -305						; size = 1
$T234976 = -304						; size = 4
$T234975 = -300						; size = 4
$T234965 = -296						; size = 4
__Cat$234971 = -291					; size = 1
$T234969 = -290						; size = 1
$T234968 = -289						; size = 1
$T234949 = -288						; size = 4
$T234930 = -284						; size = 4
$T234913 = -277						; size = 1
$T234912 = -276						; size = 4
$T234902 = -272						; size = 4
$T234901 = -268						; size = 4
__Cat$234944 = -262					; size = 1
$T234942 = -261						; size = 1
$T234941 = -260						; size = 1
__Cat$234937 = -259					; size = 1
$T234935 = -258						; size = 1
$T234934 = -257						; size = 1
$T234877 = -256						; size = 4
$T234876 = -252						; size = 4
$T234872 = -248						; size = 4
$T234871 = -244						; size = 4
$T234853 = -240						; size = 4
$T234852 = -236						; size = 4
$T234836 = -232						; size = 4
__Cat$234858 = -226					; size = 1
$T234856 = -225						; size = 1
$T234787 = -224						; size = 4
$T234786 = -220						; size = 4
$T234770 = -216						; size = 4
__Cat$234792 = -210					; size = 1
$T234790 = -209						; size = 1
$T234727 = -208						; size = 4
$T234726 = -204						; size = 4
$T234710 = -200						; size = 4
__Cat$234732 = -194					; size = 1
$T234730 = -193						; size = 1
$T234684 = -192						; size = 4
$T234672 = -188						; size = 4
$T234662 = -181						; size = 1
$T234661 = -180						; size = 4
__Cat$234679 = -175					; size = 1
$T234676 = -174						; size = 1
$T234675 = -173						; size = 1
$T234649 = -172						; size = 4
$T234637 = -168						; size = 4
$T234627 = -161						; size = 1
$T234626 = -160						; size = 4
__Cat$234644 = -155					; size = 1
$T234641 = -154						; size = 1
$T234640 = -153						; size = 1
$T234614 = -152						; size = 4
$T234604 = -148						; size = 4
__Cat$234610 = -143					; size = 1
$T234608 = -142						; size = 1
$T234607 = -141						; size = 1
__Count$234573 = -128					; size = 4
__Count$234547 = -56					; size = 4
__Tmp$224086 = -52					; size = 8
__Oldend$224087 = -44					; size = 4
__Tmp$224068 = -40					; size = 8
__Ncopied$224055 = -32					; size = 4
__Newvec$224053 = -28					; size = 4
__Whereoff$224054 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@2
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@2
$LN29@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@2:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$234547[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$234547[ebp], 0
	jbe	SHORT $LN35@Insert_n@2
	mov	edx, DWORD PTR __Count$234547[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n@2
$LN35@Insert_n@2:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Xlen
	jmp	$LN16@Insert_n@2

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$234573[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$234573[ebp], 0
	jbe	SHORT $LN48@Insert_n@2
	mov	ecx, DWORD PTR __Count$234573[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n@2
$LN48@Insert_n@2:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@2:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetInitInfo *> >
	add	esp, 8
	mov	DWORD PTR __Newvec$224053[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR __Whereoff$224054[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$224055[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$224054[ebp]
	mov	ecx, DWORD PTR __Newvec$224053[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234614[ebp], edx
	mov	eax, DWORD PTR $T234614[ebp]
	mov	DWORD PTR $T234604[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T234607[ebp], cl
	mov	dl, BYTE PTR __Cat$234610[ebp]
	mov	BYTE PTR $T234608[ebp], dl
	movzx	eax, BYTE PTR $T234607[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T234608[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234604[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224055[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224055[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234649[ebp], edx
	mov	eax, DWORD PTR __Newvec$224053[ebp]
	mov	DWORD PTR $T234637[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T234640[ebp], cl
	mov	dl, BYTE PTR __Cat$234644[ebp]
	mov	BYTE PTR $T234641[ebp], dl
	mov	al, BYTE PTR $T234640[ebp]
	mov	BYTE PTR $T234627[ebp], al
	mov	ecx, DWORD PTR $T234637[ebp]
	mov	DWORD PTR $T234626[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T234626[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234649[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224055[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224055[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234684[ebp], edx
	mov	eax, DWORD PTR __Whereoff$224054[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$224053[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234672[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234675[ebp], al
	mov	cl, BYTE PTR __Cat$234679[ebp]
	mov	BYTE PTR $T234676[ebp], cl
	mov	dl, BYTE PTR $T234675[ebp]
	mov	BYTE PTR $T234662[ebp], dl
	mov	eax, DWORD PTR $T234672[ebp]
	mov	DWORD PTR $T234661[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234661[ebp]
	push	edx
	mov	eax, DWORD PTR $T234684[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@2
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224055[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$224054[ebp]
	mov	eax, DWORD PTR __Newvec$224053[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T234727[ebp], ecx
	mov	edx, DWORD PTR __Newvec$224053[ebp]
	mov	DWORD PTR $T234726[ebp], edx
	mov	al, BYTE PTR __Cat$234732[ebp]
	mov	BYTE PTR $T234730[ebp], al
	mov	ecx, DWORD PTR $T234726[ebp]
	mov	DWORD PTR $T234710[ebp], ecx
	jmp	SHORT $LN91@Insert_n@2
$LN90@Insert_n@2:
	mov	edx, DWORD PTR $T234710[ebp]
	add	edx, 8
	mov	DWORD PTR $T234710[ebp], edx
$LN91@Insert_n@2:
	mov	eax, DWORD PTR $T234710[ebp]
	cmp	eax, DWORD PTR $T234727[ebp]
	je	SHORT $LN7@Insert_n@2
	jmp	SHORT $LN90@Insert_n@2
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224055[ebp], 0
	jle	SHORT $LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$224054[ebp]
	mov	edx, DWORD PTR __Newvec$224053[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T234787[ebp], edx
	mov	eax, DWORD PTR __Whereoff$224054[ebp]
	mov	ecx, DWORD PTR __Newvec$224053[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234786[ebp], edx
	mov	al, BYTE PTR __Cat$234792[ebp]
	mov	BYTE PTR $T234790[ebp], al
	mov	ecx, DWORD PTR $T234786[ebp]
	mov	DWORD PTR $T234770[ebp], ecx
	jmp	SHORT $LN106@Insert_n@2
$LN105@Insert_n@2:
	mov	edx, DWORD PTR $T234770[ebp]
	add	edx, 8
	mov	DWORD PTR $T234770[ebp], edx
$LN106@Insert_n@2:
	mov	eax, DWORD PTR $T234770[ebp]
	cmp	eax, DWORD PTR $T234787[ebp]
	je	SHORT $LN6@Insert_n@2
	jmp	SHORT $LN105@Insert_n@2
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$224053[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@2
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T234872[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234871[ebp], eax
	mov	ecx, DWORD PTR $T234872[ebp]
	mov	DWORD PTR $T234853[ebp], ecx
	mov	edx, DWORD PTR $T234871[ebp]
	mov	DWORD PTR $T234852[ebp], edx
	mov	al, BYTE PTR __Cat$234858[ebp]
	mov	BYTE PTR $T234856[ebp], al
	mov	ecx, DWORD PTR $T234852[ebp]
	mov	DWORD PTR $T234836[ebp], ecx
	jmp	SHORT $LN125@Insert_n@2
$LN124@Insert_n@2:
	mov	edx, DWORD PTR $T234836[ebp]
	add	edx, 8
	mov	DWORD PTR $T234836[ebp], edx
$LN125@Insert_n@2:
	mov	eax, DWORD PTR $T234836[ebp]
	cmp	eax, DWORD PTR $T234853[ebp]
	je	SHORT $LN117@Insert_n@2
	jmp	SHORT $LN124@Insert_n@2
$LN117@Insert_n@2:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR $T234877[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234876[ebp], edx
	mov	eax, DWORD PTR $T234876[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$224053[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$224053[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$224053[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224068[ebp], edx
	mov	DWORD PTR __Tmp$224068[ebp+4], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T234949[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T234930[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234934[ebp], al
	mov	cl, BYTE PTR __Cat$234937[ebp]
	mov	BYTE PTR $T234935[ebp], cl
	mov	dl, BYTE PTR $T234934[ebp]
	mov	BYTE PTR $T234913[ebp], dl
	mov	eax, DWORD PTR $T234930[ebp]
	mov	DWORD PTR $T234912[ebp], eax
	mov	ecx, DWORD PTR $T234912[ebp]
	mov	DWORD PTR $T234902[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234901[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T234941[ebp], al
	mov	cl, BYTE PTR __Cat$234944[ebp]
	mov	BYTE PTR $T234942[ebp], cl
	movzx	edx, BYTE PTR $T234941[ebp]
	push	edx
	movzx	eax, BYTE PTR $T234942[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234902[ebp]
	push	edx
	mov	eax, DWORD PTR $T234949[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234901[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T234976[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T234975[ebp], eax
	mov	ecx, DWORD PTR $T234975[ebp]
	mov	DWORD PTR $T234965[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T234968[ebp], dl
	mov	al, BYTE PTR __Cat$234971[ebp]
	mov	BYTE PTR $T234969[ebp], al
	movzx	ecx, BYTE PTR $T234968[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T234969[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$224068[ebp]
	push	ecx
	mov	edx, DWORD PTR $T234976[ebp]
	push	edx
	mov	eax, DWORD PTR $T234965[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@2
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR $T235037[ebp], ecx
	mov	edx, DWORD PTR $T235037[ebp]
	mov	DWORD PTR $T235019[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235018[ebp], edx
	mov	al, BYTE PTR __Cat$235025[ebp]
	mov	BYTE PTR $T235023[ebp], al
	mov	ecx, DWORD PTR $T235018[ebp]
	mov	DWORD PTR $T235002[ebp], ecx
	jmp	SHORT $LN160@Insert_n@2
$LN159@Insert_n@2:
	mov	edx, DWORD PTR $T235002[ebp]
	add	edx, 8
	mov	DWORD PTR $T235002[ebp], edx
$LN160@Insert_n@2:
	mov	eax, DWORD PTR $T235002[ebp]
	cmp	eax, DWORD PTR $T235019[ebp]
	je	SHORT $LN152@Insert_n@2
	jmp	SHORT $LN159@Insert_n@2
$LN152@Insert_n@2:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T235053[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235045[ebp], eax
	jmp	SHORT $LN171@Insert_n@2
$LN170@Insert_n@2:
	mov	ecx, DWORD PTR $T235045[ebp]
	add	ecx, 8
	mov	DWORD PTR $T235045[ebp], ecx
$LN171@Insert_n@2:
	mov	edx, DWORD PTR $T235045[ebp]
	cmp	edx, DWORD PTR $T235053[ebp]
	je	SHORT $LN167@Insert_n@2
	mov	eax, DWORD PTR __Tmp$224068[ebp]
	mov	ecx, DWORD PTR __Tmp$224068[ebp+4]
	mov	edx, DWORD PTR $T235045[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN170@Insert_n@2
$LN167@Insert_n@2:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224086[ebp], ecx
	mov	DWORD PTR __Tmp$224086[ebp+4], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$224087[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235125[ebp], eax
	mov	ecx, DWORD PTR $T235125[ebp]
	mov	DWORD PTR $T235106[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235110[ebp], dl
	mov	al, BYTE PTR __Cat$235113[ebp]
	mov	BYTE PTR $T235111[ebp], al
	mov	cl, BYTE PTR $T235110[ebp]
	mov	BYTE PTR $T235089[ebp], cl
	mov	edx, DWORD PTR $T235106[ebp]
	mov	DWORD PTR $T235088[ebp], edx
	mov	eax, DWORD PTR $T235088[ebp]
	mov	DWORD PTR $T235078[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$224087[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T235077[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T235118[ebp], al
	mov	cl, BYTE PTR __Cat$235121[ebp]
	mov	BYTE PTR $T235119[ebp], cl
	movzx	edx, BYTE PTR $T235118[ebp]
	push	edx
	movzx	eax, BYTE PTR $T235119[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235078[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$224087[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235077[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$224087[ebp]
	mov	DWORD PTR $T235192[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235191[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235170[ebp], dl
	mov	al, BYTE PTR __Cat$235174[ebp]
	mov	BYTE PTR $T235171[ebp], al
	mov	cl, BYTE PTR $T235170[ebp]
	mov	BYTE PTR $T235168[ebp], cl
	mov	dl, BYTE PTR $T235172[ebp]
	mov	BYTE PTR $T235167[ebp], dl
	mov	eax, DWORD PTR $T235192[ebp]
	mov	DWORD PTR $T235166[ebp], eax
	mov	ecx, DWORD PTR $T235191[ebp]
	mov	DWORD PTR $T235165[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235181[ebp], dl
	mov	al, BYTE PTR __Cat$235184[ebp]
	mov	BYTE PTR $T235182[ebp], al
	mov	cl, BYTE PTR $T235181[ebp]
	mov	BYTE PTR $T235153[ebp], cl
	mov	edx, DWORD PTR $T235166[ebp]
	mov	DWORD PTR $T235152[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$224087[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T235151[ebp], ecx
	mov	edx, DWORD PTR $T235165[ebp]
	mov	DWORD PTR $T235150[ebp], edx
$LN197@Insert_n@2:
	mov	eax, DWORD PTR $T235150[ebp]
	cmp	eax, DWORD PTR $T235151[ebp]
	je	SHORT $LN186@Insert_n@2
	mov	ecx, DWORD PTR $T235151[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T235151[ebp], ecx
	mov	edx, DWORD PTR $T235152[ebp]
	sub	edx, 8
	mov	DWORD PTR $T235152[ebp], edx
	mov	eax, DWORD PTR $T235151[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T235152[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN197@Insert_n@2
$LN186@Insert_n@2:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235200[ebp], ecx
	jmp	SHORT $LN204@Insert_n@2
$LN203@Insert_n@2:
	mov	edx, DWORD PTR $T235200[ebp]
	add	edx, 8
	mov	DWORD PTR $T235200[ebp], edx
$LN204@Insert_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR $T235200[ebp], edx
	je	SHORT $LN16@Insert_n@2
	mov	eax, DWORD PTR __Tmp$224086[ebp]
	mov	ecx, DWORD PTR __Tmp$224086[ebp+4]
	mov	edx, DWORD PTR $T235200[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN203@Insert_n@2
$LN16@Insert_n@2:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetInitInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T235222 = -80						; size = 28
$T235221 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ PROC ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T235222[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T235221[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T235221[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T235222[ebp]
	push	eax
	lea	ecx, DWORD PTR $T235221[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T235221[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T235221[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T235222[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T235222[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T235221[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@U?$pair@IPAVCvDllNetInitInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@KAXXZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >::_Xlen
PUBLIC	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
PUBLIC	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$2
__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$0
__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv304 = -428						; size = 4
tv290 = -424						; size = 4
tv282 = -420						; size = 4
_this$ = -416						; size = 4
$T235924 = -412						; size = 4
$T235916 = -408						; size = 4
$T235915 = -404						; size = 4
$T235892 = -398						; size = 1
$T235891 = -397						; size = 1
$T235890 = -396						; size = 4
$T235889 = -392						; size = 4
$T235877 = -385						; size = 1
$T235876 = -384						; size = 4
$T235875 = -380						; size = 4
$T235874 = -376						; size = 4
__Cat$235908 = -372					; size = 1
$T235906 = -371						; size = 1
$T235905 = -370						; size = 1
__Cat$235898 = -368					; size = 1
$T235896 = -367						; size = 1
$T235895 = -366						; size = 1
$T235894 = -365						; size = 1
$T235849 = -364						; size = 4
$T235830 = -360						; size = 4
$T235813 = -353						; size = 1
$T235812 = -352						; size = 4
$T235802 = -348						; size = 4
$T235801 = -344						; size = 4
__Cat$235844 = -338					; size = 1
$T235842 = -337						; size = 1
$T235841 = -336						; size = 1
__Cat$235838 = -335					; size = 1
$T235835 = -334						; size = 1
$T235834 = -333						; size = 1
$T235777 = -332						; size = 4
$T235769 = -328						; size = 4
$T235761 = -324						; size = 4
$T235743 = -320						; size = 4
$T235742 = -316						; size = 4
$T235726 = -312						; size = 4
__Cat$235748 = -306					; size = 1
$T235746 = -305						; size = 1
$T235700 = -304						; size = 4
$T235699 = -300						; size = 4
$T235689 = -296						; size = 4
__Cat$235695 = -291					; size = 1
$T235693 = -290						; size = 1
$T235692 = -289						; size = 1
$T235673 = -288						; size = 4
$T235654 = -284						; size = 4
$T235637 = -277						; size = 1
$T235636 = -276						; size = 4
$T235626 = -272						; size = 4
$T235625 = -268						; size = 4
__Cat$235667 = -262					; size = 1
$T235665 = -261						; size = 1
$T235664 = -260						; size = 1
__Cat$235661 = -259					; size = 1
$T235658 = -258						; size = 1
$T235657 = -257						; size = 1
$T235601 = -256						; size = 4
$T235600 = -252						; size = 4
$T235596 = -248						; size = 4
$T235595 = -244						; size = 4
$T235577 = -240						; size = 4
$T235576 = -236						; size = 4
$T235560 = -232						; size = 4
__Cat$235583 = -226					; size = 1
$T235580 = -225						; size = 1
$T235511 = -224						; size = 4
$T235510 = -220						; size = 4
$T235494 = -216						; size = 4
__Cat$235518 = -210					; size = 1
$T235516 = -209						; size = 1
$T235451 = -208						; size = 4
$T235450 = -204						; size = 4
$T235434 = -200						; size = 4
__Cat$235458 = -194					; size = 1
$T235456 = -193						; size = 1
$T235408 = -192						; size = 4
$T235396 = -188						; size = 4
$T235386 = -181						; size = 1
$T235385 = -180						; size = 4
__Cat$235404 = -175					; size = 1
$T235402 = -174						; size = 1
$T235401 = -173						; size = 1
$T235373 = -172						; size = 4
$T235361 = -168						; size = 4
$T235351 = -161						; size = 1
$T235350 = -160						; size = 4
__Cat$235369 = -155					; size = 1
$T235367 = -154						; size = 1
$T235366 = -153						; size = 1
$T235338 = -152						; size = 4
$T235328 = -148						; size = 4
__Cat$235336 = -143					; size = 1
$T235334 = -142						; size = 1
$T235333 = -141						; size = 1
__Count$235297 = -128					; size = 4
__Count$235271 = -56					; size = 4
__Tmp$224157 = -52					; size = 8
__Oldend$224158 = -44					; size = 4
__Tmp$224139 = -40					; size = 8
__Ncopied$224126 = -32					; size = 4
__Newvec$224124 = -28					; size = 4
__Whereoff$224125 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@3
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@3
$LN29@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@3:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN16@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$235271[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$235271[ebp], 0
	jbe	SHORT $LN35@Insert_n@3
	mov	edx, DWORD PTR __Count$235271[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n@3
$LN35@Insert_n@3:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Xlen
	jmp	$LN16@Insert_n@3

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$235297[ebp], 536870911 ; 1fffffffH
	cmp	DWORD PTR __Count$235297[ebp], 0
	jbe	SHORT $LN48@Insert_n@3
	mov	ecx, DWORD PTR __Count$235297[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n@3
$LN48@Insert_n@3:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@3:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@3:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned int,CvDllNetLoadGameInfo *> >
	add	esp, 8
	mov	DWORD PTR __Newvec$224124[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	mov	DWORD PTR __Whereoff$224125[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$224126[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$224125[ebp]
	mov	ecx, DWORD PTR __Newvec$224124[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235338[ebp], edx
	mov	eax, DWORD PTR $T235338[ebp]
	mov	DWORD PTR $T235328[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T235333[ebp], cl
	mov	dl, BYTE PTR __Cat$235336[ebp]
	mov	BYTE PTR $T235334[ebp], dl
	movzx	eax, BYTE PTR $T235333[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T235334[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235328[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224126[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224126[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235373[ebp], edx
	mov	eax, DWORD PTR __Newvec$224124[ebp]
	mov	DWORD PTR $T235361[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T235366[ebp], cl
	mov	dl, BYTE PTR __Cat$235369[ebp]
	mov	BYTE PTR $T235367[ebp], dl
	mov	al, BYTE PTR $T235366[ebp]
	mov	BYTE PTR $T235351[ebp], al
	mov	ecx, DWORD PTR $T235361[ebp]
	mov	DWORD PTR $T235350[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T235350[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235373[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224126[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224126[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235408[ebp], edx
	mov	eax, DWORD PTR __Whereoff$224125[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$224124[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235396[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T235401[ebp], al
	mov	cl, BYTE PTR __Cat$235404[ebp]
	mov	BYTE PTR $T235402[ebp], cl
	mov	dl, BYTE PTR $T235401[ebp]
	mov	BYTE PTR $T235386[ebp], dl
	mov	eax, DWORD PTR $T235396[ebp]
	mov	DWORD PTR $T235385[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235385[ebp]
	push	edx
	mov	eax, DWORD PTR $T235408[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@3
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224126[ebp], 1
	jle	SHORT $LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$224125[ebp]
	mov	eax, DWORD PTR __Newvec$224124[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T235451[ebp], ecx
	mov	edx, DWORD PTR __Newvec$224124[ebp]
	mov	DWORD PTR $T235450[ebp], edx
	mov	al, BYTE PTR __Cat$235458[ebp]
	mov	BYTE PTR $T235456[ebp], al
	mov	ecx, DWORD PTR $T235450[ebp]
	mov	DWORD PTR $T235434[ebp], ecx
	jmp	SHORT $LN91@Insert_n@3
$LN90@Insert_n@3:
	mov	edx, DWORD PTR $T235434[ebp]
	add	edx, 8
	mov	DWORD PTR $T235434[ebp], edx
$LN91@Insert_n@3:
	mov	eax, DWORD PTR $T235434[ebp]
	cmp	eax, DWORD PTR $T235451[ebp]
	je	SHORT $LN7@Insert_n@3
	jmp	SHORT $LN90@Insert_n@3
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224126[ebp], 0
	jle	SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$224125[ebp]
	mov	edx, DWORD PTR __Newvec$224124[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T235511[ebp], edx
	mov	eax, DWORD PTR __Whereoff$224125[ebp]
	mov	ecx, DWORD PTR __Newvec$224124[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235510[ebp], edx
	mov	al, BYTE PTR __Cat$235518[ebp]
	mov	BYTE PTR $T235516[ebp], al
	mov	ecx, DWORD PTR $T235510[ebp]
	mov	DWORD PTR $T235494[ebp], ecx
	jmp	SHORT $LN106@Insert_n@3
$LN105@Insert_n@3:
	mov	edx, DWORD PTR $T235494[ebp]
	add	edx, 8
	mov	DWORD PTR $T235494[ebp], edx
$LN106@Insert_n@3:
	mov	eax, DWORD PTR $T235494[ebp]
	cmp	eax, DWORD PTR $T235511[ebp]
	je	SHORT $LN6@Insert_n@3
	jmp	SHORT $LN105@Insert_n@3
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$224124[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@3
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 3
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T235596[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T235595[ebp], eax
	mov	ecx, DWORD PTR $T235596[ebp]
	mov	DWORD PTR $T235577[ebp], ecx
	mov	edx, DWORD PTR $T235595[ebp]
	mov	DWORD PTR $T235576[ebp], edx
	mov	al, BYTE PTR __Cat$235583[ebp]
	mov	BYTE PTR $T235580[ebp], al
	mov	ecx, DWORD PTR $T235576[ebp]
	mov	DWORD PTR $T235560[ebp], ecx
	jmp	SHORT $LN125@Insert_n@3
$LN124@Insert_n@3:
	mov	edx, DWORD PTR $T235560[ebp]
	add	edx, 8
	mov	DWORD PTR $T235560[ebp], edx
$LN125@Insert_n@3:
	mov	eax, DWORD PTR $T235560[ebp]
	cmp	eax, DWORD PTR $T235577[ebp]
	je	SHORT $LN117@Insert_n@3
	jmp	SHORT $LN124@Insert_n@3
$LN117@Insert_n@3:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 3
	mov	DWORD PTR $T235601[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235600[ebp], edx
	mov	eax, DWORD PTR $T235600[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$224124[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$224124[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$224124[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224139[ebp], edx
	mov	DWORD PTR __Tmp$224139[ebp+4], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235673[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235654[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T235657[ebp], al
	mov	cl, BYTE PTR __Cat$235661[ebp]
	mov	BYTE PTR $T235658[ebp], cl
	mov	dl, BYTE PTR $T235657[ebp]
	mov	BYTE PTR $T235637[ebp], dl
	mov	eax, DWORD PTR $T235654[ebp]
	mov	DWORD PTR $T235636[ebp], eax
	mov	ecx, DWORD PTR $T235636[ebp]
	mov	DWORD PTR $T235626[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235625[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T235664[ebp], al
	mov	cl, BYTE PTR __Cat$235667[ebp]
	mov	BYTE PTR $T235665[ebp], cl
	movzx	edx, BYTE PTR $T235664[ebp]
	push	edx
	movzx	eax, BYTE PTR $T235665[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235626[ebp]
	push	edx
	mov	eax, DWORD PTR $T235673[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235625[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T235700[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235699[ebp], eax
	mov	ecx, DWORD PTR $T235699[ebp]
	mov	DWORD PTR $T235689[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235692[ebp], dl
	mov	al, BYTE PTR __Cat$235695[ebp]
	mov	BYTE PTR $T235693[ebp], al
	movzx	ecx, BYTE PTR $T235692[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T235693[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$224139[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235700[ebp]
	push	edx
	mov	eax, DWORD PTR $T235689[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@3
__catch$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR $T235761[ebp], ecx
	mov	edx, DWORD PTR $T235761[ebp]
	mov	DWORD PTR $T235743[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR $T235742[ebp], edx
	mov	al, BYTE PTR __Cat$235748[ebp]
	mov	BYTE PTR $T235746[ebp], al
	mov	ecx, DWORD PTR $T235742[ebp]
	mov	DWORD PTR $T235726[ebp], ecx
	jmp	SHORT $LN160@Insert_n@3
$LN159@Insert_n@3:
	mov	edx, DWORD PTR $T235726[ebp]
	add	edx, 8
	mov	DWORD PTR $T235726[ebp], edx
$LN160@Insert_n@3:
	mov	eax, DWORD PTR $T235726[ebp]
	cmp	eax, DWORD PTR $T235743[ebp]
	je	SHORT $LN152@Insert_n@3
	jmp	SHORT $LN159@Insert_n@3
$LN152@Insert_n@3:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, eax
	mov	DWORD PTR $T235777[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235769[ebp], eax
	jmp	SHORT $LN171@Insert_n@3
$LN170@Insert_n@3:
	mov	ecx, DWORD PTR $T235769[ebp]
	add	ecx, 8
	mov	DWORD PTR $T235769[ebp], ecx
$LN171@Insert_n@3:
	mov	edx, DWORD PTR $T235769[ebp]
	cmp	edx, DWORD PTR $T235777[ebp]
	je	SHORT $LN167@Insert_n@3
	mov	eax, DWORD PTR __Tmp$224139[ebp]
	mov	ecx, DWORD PTR __Tmp$224139[ebp+4]
	mov	edx, DWORD PTR $T235769[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN170@Insert_n@3
$LN167@Insert_n@3:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224157[ebp], ecx
	mov	DWORD PTR __Tmp$224157[ebp+4], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$224158[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T235849[ebp], eax
	mov	ecx, DWORD PTR $T235849[ebp]
	mov	DWORD PTR $T235830[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235834[ebp], dl
	mov	al, BYTE PTR __Cat$235838[ebp]
	mov	BYTE PTR $T235835[ebp], al
	mov	cl, BYTE PTR $T235834[ebp]
	mov	BYTE PTR $T235813[ebp], cl
	mov	edx, DWORD PTR $T235830[ebp]
	mov	DWORD PTR $T235812[ebp], edx
	mov	eax, DWORD PTR $T235812[ebp]
	mov	DWORD PTR $T235802[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Oldend$224158[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T235801[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T235841[ebp], al
	mov	cl, BYTE PTR __Cat$235844[ebp]
	mov	BYTE PTR $T235842[ebp], cl
	movzx	edx, BYTE PTR $T235841[ebp]
	push	edx
	movzx	eax, BYTE PTR $T235842[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T235802[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$224158[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235801[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$224158[ebp]
	mov	DWORD PTR $T235916[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235915[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235894[ebp], dl
	mov	al, BYTE PTR __Cat$235898[ebp]
	mov	BYTE PTR $T235895[ebp], al
	mov	cl, BYTE PTR $T235894[ebp]
	mov	BYTE PTR $T235892[ebp], cl
	mov	dl, BYTE PTR $T235896[ebp]
	mov	BYTE PTR $T235891[ebp], dl
	mov	eax, DWORD PTR $T235916[ebp]
	mov	DWORD PTR $T235890[ebp], eax
	mov	ecx, DWORD PTR $T235915[ebp]
	mov	DWORD PTR $T235889[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T235905[ebp], dl
	mov	al, BYTE PTR __Cat$235908[ebp]
	mov	BYTE PTR $T235906[ebp], al
	mov	cl, BYTE PTR $T235905[ebp]
	mov	BYTE PTR $T235877[ebp], cl
	mov	edx, DWORD PTR $T235890[ebp]
	mov	DWORD PTR $T235876[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Oldend$224158[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T235875[ebp], ecx
	mov	edx, DWORD PTR $T235889[ebp]
	mov	DWORD PTR $T235874[ebp], edx
$LN197@Insert_n@3:
	mov	eax, DWORD PTR $T235874[ebp]
	cmp	eax, DWORD PTR $T235875[ebp]
	je	SHORT $LN186@Insert_n@3
	mov	ecx, DWORD PTR $T235875[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T235875[ebp], ecx
	mov	edx, DWORD PTR $T235876[ebp]
	sub	edx, 8
	mov	DWORD PTR $T235876[ebp], edx
	mov	eax, DWORD PTR $T235875[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T235876[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN197@Insert_n@3
$LN186@Insert_n@3:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235924[ebp], ecx
	jmp	SHORT $LN204@Insert_n@3
$LN203@Insert_n@3:
	mov	edx, DWORD PTR $T235924[ebp]
	add	edx, 8
	mov	DWORD PTR $T235924[ebp], edx
$LN204@Insert_n@3:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	cmp	DWORD PTR $T235924[ebp], edx
	je	SHORT $LN16@Insert_n@3
	mov	eax, DWORD PTR __Tmp$224157[ebp]
	mov	ecx, DWORD PTR __Tmp$224157[ebp+4]
	mov	edx, DWORD PTR $T235924[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN203@Insert_n@3
$LN16@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@2@IABU?$pair@IPAVCvDllNetLoadGameInfo@@@2@@Z ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T235946 = -80						; size = 28
$T235945 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ PROC ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T235946[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T235945[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T235945[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T235946[ebp]
	push	eax
	lea	ecx, DWORD PTR $T235945[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T235945[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T235945[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T235946[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T235946[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T235945[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@KAXXZ ENDP ; std::vector<std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >::_Xlen
PUBLIC	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$2
__catchsym$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$0
__unwindtable$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z
_TEXT	SEGMENT
tv84 = -440						; size = 4
tv304 = -436						; size = 4
tv290 = -432						; size = 4
tv282 = -428						; size = 4
_this$ = -424						; size = 4
$T236648 = -420						; size = 4
$T236640 = -416						; size = 4
$T236639 = -412						; size = 4
$T236616 = -406						; size = 1
$T236615 = -405						; size = 1
$T236614 = -404						; size = 4
$T236613 = -400						; size = 4
$T236601 = -393						; size = 1
$T236600 = -392						; size = 4
$T236599 = -388						; size = 4
$T236598 = -384						; size = 4
__Cat$236632 = -380					; size = 1
$T236629 = -379						; size = 1
$T236628 = -378						; size = 1
__Cat$236623 = -376					; size = 1
$T236620 = -375						; size = 1
$T236619 = -374						; size = 1
$T236618 = -373						; size = 1
$T236573 = -372						; size = 4
$T236554 = -368						; size = 4
$T236537 = -361						; size = 1
$T236536 = -360						; size = 4
$T236526 = -356						; size = 4
$T236525 = -352						; size = 4
__Cat$236563 = -346					; size = 1
$T236561 = -345						; size = 1
$T236560 = -344						; size = 1
__Cat$236572 = -343					; size = 1
$T236570 = -342						; size = 1
$T236569 = -341						; size = 1
$T236501 = -340						; size = 4
$T236493 = -336						; size = 4
$T236485 = -332						; size = 4
$T236467 = -328						; size = 4
$T236466 = -324						; size = 4
$T236450 = -320						; size = 4
__Cat$236474 = -314					; size = 1
$T236472 = -313						; size = 1
$T236424 = -312						; size = 4
$T236423 = -308						; size = 4
$T236413 = -304						; size = 4
__Cat$236421 = -299					; size = 1
$T236419 = -298						; size = 1
$T236418 = -297						; size = 1
$T236397 = -296						; size = 4
$T236378 = -292						; size = 4
$T236361 = -285						; size = 1
$T236360 = -284						; size = 4
$T236350 = -280						; size = 4
$T236349 = -276						; size = 4
__Cat$236394 = -270					; size = 1
$T236392 = -269						; size = 1
$T236391 = -268						; size = 1
__Cat$236385 = -267					; size = 1
$T236383 = -266						; size = 1
$T236382 = -265						; size = 1
$T236325 = -264						; size = 4
$T236324 = -260						; size = 4
$T236320 = -256						; size = 4
$T236319 = -252						; size = 4
$T236301 = -248						; size = 4
$T236300 = -244						; size = 4
$T236284 = -240						; size = 4
__Cat$236308 = -234					; size = 1
$T236306 = -233						; size = 1
$T236235 = -232						; size = 4
$T236234 = -228						; size = 4
$T236218 = -224						; size = 4
__Cat$236242 = -218					; size = 1
$T236240 = -217						; size = 1
$T236175 = -216						; size = 4
$T236174 = -212						; size = 4
$T236158 = -208						; size = 4
__Cat$236181 = -202					; size = 1
$T236179 = -201						; size = 1
$T236132 = -200						; size = 4
$T236120 = -196						; size = 4
$T236110 = -189						; size = 1
$T236109 = -188						; size = 4
__Cat$236127 = -183					; size = 1
$T236125 = -182						; size = 1
$T236124 = -181						; size = 1
$T236097 = -180						; size = 4
$T236085 = -176						; size = 4
$T236075 = -169						; size = 1
$T236074 = -168						; size = 4
__Cat$236092 = -163					; size = 1
$T236090 = -162						; size = 1
$T236089 = -161						; size = 1
$T236062 = -160						; size = 4
$T236052 = -156						; size = 4
__Cat$236058 = -151					; size = 1
$T236056 = -150						; size = 1
$T236055 = -149						; size = 1
__Count$236024 = -136					; size = 4
__Count$235998 = -64					; size = 4
__Tmp$224218 = -60					; size = 12
__Oldend$224219 = -48					; size = 4
__Tmp$224208 = -44					; size = 12
__Ncopied$224195 = -32					; size = 4
__Newvec$224193 = -28					; size = 4
__Whereoff$224194 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@4
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@4
$LN29@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@4:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$235998[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$235998[ebp], 0
	jbe	SHORT $LN35@Insert_n@4
	mov	eax, DWORD PTR __Count$235998[ebp]
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN37@Insert_n@4
$LN35@Insert_n@4:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR tv290[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
	jmp	$LN16@Insert_n@4

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$236024[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$236024[ebp], 0
	jbe	SHORT $LN48@Insert_n@4
	mov	edx, DWORD PTR __Count$236024[ebp]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN44@Insert_n@4
$LN48@Insert_n@4:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@4:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv304[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@4:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN54@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
	add	esp, 8
	mov	DWORD PTR __Newvec$224193[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$224194[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$224195[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$224194[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236062[ebp], edx
	mov	eax, DWORD PTR $T236062[ebp]
	mov	DWORD PTR $T236052[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236055[ebp], cl
	mov	dl, BYTE PTR __Cat$236058[ebp]
	mov	BYTE PTR $T236056[ebp], dl
	movzx	eax, BYTE PTR $T236055[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T236056[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236052[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224195[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224195[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T236097[ebp], edx
	mov	eax, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236085[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236089[ebp], cl
	mov	dl, BYTE PTR __Cat$236092[ebp]
	mov	BYTE PTR $T236090[ebp], dl
	mov	al, BYTE PTR $T236089[ebp]
	mov	BYTE PTR $T236075[ebp], al
	mov	ecx, DWORD PTR $T236085[ebp]
	mov	DWORD PTR $T236074[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T236074[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236097[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$224195[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$224195[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T236132[ebp], edx
	mov	eax, DWORD PTR __Whereoff$224194[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236120[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236124[ebp], cl
	mov	dl, BYTE PTR __Cat$236127[ebp]
	mov	BYTE PTR $T236125[ebp], dl
	mov	al, BYTE PTR $T236124[ebp]
	mov	BYTE PTR $T236110[ebp], al
	mov	ecx, DWORD PTR $T236120[ebp]
	mov	DWORD PTR $T236109[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T236109[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236132[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@4
__catch$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224195[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$224194[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236175[ebp], eax
	mov	ecx, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236174[ebp], ecx
	mov	dl, BYTE PTR __Cat$236181[ebp]
	mov	BYTE PTR $T236179[ebp], dl
	mov	eax, DWORD PTR $T236174[ebp]
	mov	DWORD PTR $T236158[ebp], eax
	jmp	SHORT $LN91@Insert_n@4
$LN90@Insert_n@4:
	mov	ecx, DWORD PTR $T236158[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T236158[ebp], ecx
$LN91@Insert_n@4:
	mov	edx, DWORD PTR $T236158[ebp]
	cmp	edx, DWORD PTR $T236175[ebp]
	je	SHORT $LN7@Insert_n@4
	jmp	SHORT $LN90@Insert_n@4
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$224195[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR __Whereoff$224194[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$224193[ebp]
	add	ecx, eax
	mov	DWORD PTR $T236235[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$224194[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR $T236234[ebp], edx
	mov	al, BYTE PTR __Cat$236242[ebp]
	mov	BYTE PTR $T236240[ebp], al
	mov	ecx, DWORD PTR $T236234[ebp]
	mov	DWORD PTR $T236218[ebp], ecx
	jmp	SHORT $LN106@Insert_n@4
$LN105@Insert_n@4:
	mov	edx, DWORD PTR $T236218[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T236218[ebp], edx
$LN106@Insert_n@4:
	mov	eax, DWORD PTR $T236218[ebp]
	cmp	eax, DWORD PTR $T236235[ebp]
	je	SHORT $LN6@Insert_n@4
	jmp	SHORT $LN105@Insert_n@4
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$224193[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@4
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236320[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236319[ebp], eax
	mov	ecx, DWORD PTR $T236320[ebp]
	mov	DWORD PTR $T236301[ebp], ecx
	mov	edx, DWORD PTR $T236319[ebp]
	mov	DWORD PTR $T236300[ebp], edx
	mov	al, BYTE PTR __Cat$236308[ebp]
	mov	BYTE PTR $T236306[ebp], al
	mov	ecx, DWORD PTR $T236300[ebp]
	mov	DWORD PTR $T236284[ebp], ecx
	jmp	SHORT $LN125@Insert_n@4
$LN124@Insert_n@4:
	mov	edx, DWORD PTR $T236284[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T236284[ebp], edx
$LN125@Insert_n@4:
	mov	eax, DWORD PTR $T236284[ebp]
	cmp	eax, DWORD PTR $T236301[ebp]
	je	SHORT $LN117@Insert_n@4
	jmp	SHORT $LN124@Insert_n@4
$LN117@Insert_n@4:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T236325[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236324[ebp], eax
	mov	ecx, DWORD PTR $T236324[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$224193[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$224193[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$224193[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$224208[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$224208[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$224208[ebp+8], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236397[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236378[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T236382[ebp], al
	mov	cl, BYTE PTR __Cat$236385[ebp]
	mov	BYTE PTR $T236383[ebp], cl
	mov	dl, BYTE PTR $T236382[ebp]
	mov	BYTE PTR $T236361[ebp], dl
	mov	eax, DWORD PTR $T236378[ebp]
	mov	DWORD PTR $T236360[ebp], eax
	mov	ecx, DWORD PTR $T236360[ebp]
	mov	DWORD PTR $T236350[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236349[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T236391[ebp], al
	mov	cl, BYTE PTR __Cat$236394[ebp]
	mov	BYTE PTR $T236392[ebp], cl
	movzx	edx, BYTE PTR $T236391[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236392[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236350[ebp]
	push	edx
	mov	eax, DWORD PTR $T236397[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236349[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T236424[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236423[ebp], ecx
	mov	edx, DWORD PTR $T236423[ebp]
	mov	DWORD PTR $T236413[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T236418[ebp], al
	mov	cl, BYTE PTR __Cat$236421[ebp]
	mov	BYTE PTR $T236419[ebp], cl
	movzx	edx, BYTE PTR $T236418[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236419[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$224208[ebp]
	push	edx
	mov	eax, DWORD PTR $T236424[ebp]
	push	eax
	mov	ecx, DWORD PTR $T236413[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236485[ebp], edx
	mov	ecx, DWORD PTR $T236485[ebp]
	mov	DWORD PTR $T236467[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236466[ebp], edx
	mov	al, BYTE PTR __Cat$236474[ebp]
	mov	BYTE PTR $T236472[ebp], al
	mov	ecx, DWORD PTR $T236466[ebp]
	mov	DWORD PTR $T236450[ebp], ecx
	jmp	SHORT $LN160@Insert_n@4
$LN159@Insert_n@4:
	mov	edx, DWORD PTR $T236450[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T236450[ebp], edx
$LN160@Insert_n@4:
	mov	eax, DWORD PTR $T236450[ebp]
	cmp	eax, DWORD PTR $T236467[ebp]
	je	SHORT $LN152@Insert_n@4
	jmp	SHORT $LN159@Insert_n@4
$LN152@Insert_n@4:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T236501[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236493[ebp], ecx
	jmp	SHORT $LN171@Insert_n@4
$LN170@Insert_n@4:
	mov	edx, DWORD PTR $T236493[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T236493[ebp], edx
$LN171@Insert_n@4:
	mov	eax, DWORD PTR $T236493[ebp]
	cmp	eax, DWORD PTR $T236501[ebp]
	je	SHORT $LN167@Insert_n@4
	mov	ecx, DWORD PTR $T236493[ebp]
	mov	edx, DWORD PTR __Tmp$224208[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$224208[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$224208[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN170@Insert_n@4
$LN167@Insert_n@4:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$224218[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224218[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$224218[ebp+8], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$224219[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236573[ebp], ecx
	mov	edx, DWORD PTR $T236573[ebp]
	mov	DWORD PTR $T236554[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T236569[ebp], al
	mov	cl, BYTE PTR __Cat$236572[ebp]
	mov	BYTE PTR $T236570[ebp], cl
	mov	dl, BYTE PTR $T236569[ebp]
	mov	BYTE PTR $T236537[ebp], dl
	mov	eax, DWORD PTR $T236554[ebp]
	mov	DWORD PTR $T236536[ebp], eax
	mov	ecx, DWORD PTR $T236536[ebp]
	mov	DWORD PTR $T236526[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$224219[ebp]
	sub	eax, edx
	mov	DWORD PTR $T236525[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236560[ebp], cl
	mov	dl, BYTE PTR __Cat$236563[ebp]
	mov	BYTE PTR $T236561[ebp], dl
	movzx	eax, BYTE PTR $T236560[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T236561[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T236526[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$224219[ebp]
	push	ecx
	mov	edx, DWORD PTR $T236525[ebp]
	push	edx
	call	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$224219[ebp]
	mov	DWORD PTR $T236640[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236639[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236618[ebp], cl
	mov	dl, BYTE PTR __Cat$236623[ebp]
	mov	BYTE PTR $T236619[ebp], dl
	mov	al, BYTE PTR $T236618[ebp]
	mov	BYTE PTR $T236616[ebp], al
	mov	cl, BYTE PTR $T236620[ebp]
	mov	BYTE PTR $T236615[ebp], cl
	mov	edx, DWORD PTR $T236640[ebp]
	mov	DWORD PTR $T236614[ebp], edx
	mov	eax, DWORD PTR $T236639[ebp]
	mov	DWORD PTR $T236613[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T236628[ebp], cl
	mov	dl, BYTE PTR __Cat$236632[ebp]
	mov	BYTE PTR $T236629[ebp], dl
	mov	al, BYTE PTR $T236628[ebp]
	mov	BYTE PTR $T236601[ebp], al
	mov	ecx, DWORD PTR $T236614[ebp]
	mov	DWORD PTR $T236600[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$224219[ebp]
	sub	eax, edx
	mov	DWORD PTR $T236599[ebp], eax
	mov	ecx, DWORD PTR $T236613[ebp]
	mov	DWORD PTR $T236598[ebp], ecx
$LN197@Insert_n@4:
	mov	edx, DWORD PTR $T236598[ebp]
	cmp	edx, DWORD PTR $T236599[ebp]
	je	SHORT $LN186@Insert_n@4
	mov	eax, DWORD PTR $T236599[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR $T236599[ebp], eax
	mov	ecx, DWORD PTR $T236600[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T236600[ebp], ecx
	mov	edx, DWORD PTR $T236599[ebp]
	mov	eax, DWORD PTR $T236600[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN197@Insert_n@4
$LN186@Insert_n@4:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T236648[ebp], eax
	jmp	SHORT $LN204@Insert_n@4
$LN203@Insert_n@4:
	mov	ecx, DWORD PTR $T236648[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T236648[ebp], ecx
$LN204@Insert_n@4:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T236648[ebp], edx
	je	SHORT $LN16@Insert_n@4
	mov	eax, DWORD PTR $T236648[ebp]
	mov	ecx, DWORD PTR __Tmp$224218[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$224218[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$224218[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN203@Insert_n@4
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-444]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@2@IABUCvDllPathFinderUpdateListData@@@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert_n
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z
_TEXT	SEGMENT
$T236673 = -16						; size = 4
$T236669 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z PROC ; std::_Allocate<CvDllPathFinderUpdateListData>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236673[ebp], 0
	lea	eax, DWORD PTR $T236673[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236669[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236669[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236669[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ENDP ; std::_Allocate<CvDllPathFinderUpdateListData>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z
_TEXT	SEGMENT
$T236687 = -16						; size = 4
$T236683 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned int,CvRandom *> >, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236687[ebp], 0
	lea	eax, DWORD PTR $T236687[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236683[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236683[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236683[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$pair@IPAVCvRandom@@@std@@@std@@YAPAU?$pair@IPAVCvRandom@@@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned int,CvRandom *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z
_TEXT	SEGMENT
$T236694 = -16						; size = 4
$T236690 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned int,CvDllNetInitInfo *> >, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236694[ebp], 0
	lea	eax, DWORD PTR $T236694[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236690[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236690[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236690[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$pair@IPAVCvDllNetInitInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned int,CvDllNetInitInfo *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z
_TEXT	SEGMENT
$T236701 = -16						; size = 4
$T236697 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned int,CvDllNetLoadGameInfo *> >, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 8
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236701[ebp], 0
	lea	eax, DWORD PTR $T236701[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236697[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236697[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236697[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 3
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned int,CvDllNetLoadGameInfo *> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T236726 = -28						; size = 4
__Vptr$236732 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$236732[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236732[ebp]
	mov	DWORD PTR $T236726[ebp], ecx
	cmp	DWORD PTR $T236726[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T236726[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T236726[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil:
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAU?$pair@IPAVCvRandom@@@std@@IU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvRandom@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::pair<unsigned int,CvRandom *> *,unsigned int,std::pair<unsigned int,CvRandom *>,std::allocator<std::pair<unsigned int,CvRandom *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T236775 = -28						; size = 4
__Vptr$236781 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$236781[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236781[ebp]
	mov	DWORD PTR $T236775[ebp], ecx
	cmp	DWORD PTR $T236775[ebp], 0
	je	SHORT $LN18@Uninit_fil@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T236775[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T236775[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@2
$LN18@Uninit_fil@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@2:
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@2:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetInitInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetInitInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetInitInfo *>,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T236824 = -28						; size = 4
__Vptr$236830 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$236830[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236830[ebp]
	mov	DWORD PTR $T236824[ebp], ecx
	cmp	DWORD PTR $T236824[ebp], 0
	je	SHORT $LN18@Uninit_fil@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T236824[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T236824[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@3
$LN18@Uninit_fil@3:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@3:
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@IU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAXPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@IABU10@AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,unsigned int,std::pair<unsigned int,CvDllNetLoadGameInfo *>,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T236873 = -28						; size = 4
__Vptr$236879 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$236879[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236879[ebp]
	mov	DWORD PTR $T236873[ebp], ecx
	cmp	DWORD PTR $T236873[ebp], 0
	je	SHORT $LN18@Uninit_fil@4
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T236873[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T236873[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@4
$LN18@Uninit_fil@4:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@4:
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@4:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUCvDllPathFinderUpdateListData@@IU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAXPAUCvDllPathFinderUpdateListData@@IABU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvDllPathFinderUpdateListData *,unsigned int,CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z
_TEXT	SEGMENT
__Cat$236904 = -3					; size = 1
$T236901 = -2						; size = 1
$T236900 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T236900[ebp], al
	mov	cl, BYTE PTR __Cat$236904[ebp]
	mov	BYTE PTR $T236901[ebp], cl
	movzx	edx, BYTE PTR $T236900[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236901[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvRandom@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z
_TEXT	SEGMENT
__Cat$236912 = -3					; size = 1
$T236909 = -2						; size = 1
$T236908 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T236908[ebp], al
	mov	cl, BYTE PTR __Cat$236912[ebp]
	mov	BYTE PTR $T236909[ebp], cl
	movzx	edx, BYTE PTR $T236908[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236909[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z
_TEXT	SEGMENT
__Cat$236920 = -3					; size = 1
$T236917 = -2						; size = 1
$T236916 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T236916[ebp], al
	mov	cl, BYTE PTR __Cat$236920[ebp]
	mov	BYTE PTR $T236917[ebp], cl
	movzx	edx, BYTE PTR $T236916[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236917[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@stdext@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z
_TEXT	SEGMENT
__Cat$236928 = -3					; size = 1
$T236925 = -2						; size = 1
$T236924 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T236924[ebp], al
	mov	cl, BYTE PTR __Cat$236928[ebp]
	mov	BYTE PTR $T236925[ebp], cl
	movzx	edx, BYTE PTR $T236924[ebp]
	push	edx
	movzx	eax, BYTE PTR $T236925[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv144 = -36						; size = 4
$T236986 = -32						; size = 4
$T236979 = -28						; size = 4
__Vptr$236985 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN18@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN18@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T236986[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$236985[ebp], edx
	mov	eax, DWORD PTR __Vptr$236985[ebp]
	mov	DWORD PTR $T236979[ebp], eax
	cmp	DWORD PTR $T236979[ebp], 0
	je	SHORT $LN30@Uninit_cop
	mov	ecx, DWORD PTR $T236986[ebp]
	mov	edx, DWORD PTR $T236979[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T236979[ebp]
	mov	DWORD PTR tv144[ebp], edx
	jmp	SHORT $LN26@Uninit_cop
$LN30@Uninit_cop:
	mov	DWORD PTR tv144[ebp], 0
$LN26@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T237029 = -28						; size = 4
__Vptr$237035 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$237035[ebp], ecx
	mov	edx, DWORD PTR __Vptr$237035[ebp]
	mov	DWORD PTR $T237029[ebp], edx
	cmp	DWORD PTR $T237029[ebp], 0
	je	SHORT $LN18@Uninit_cop@2
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237029[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237029[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@2
$LN18@Uninit_cop@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@2:
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAU?$pair@IPAVCvRandom@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvRandom@@@std@@@2@@std@@YAPAU?$pair@IPAVCvRandom@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvRandom@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<unsigned int,CvRandom *> *,std::pair<unsigned int,CvRandom *> *,std::allocator<std::pair<unsigned int,CvRandom *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T237080 = -28						; size = 4
__Vptr$237078 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$237078[ebp], ecx
	mov	edx, DWORD PTR __Vptr$237078[ebp]
	mov	DWORD PTR $T237080[ebp], edx
	cmp	DWORD PTR $T237080[ebp], 0
	je	SHORT $LN18@Uninit_cop@3
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237080[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237080[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@3
$LN18@Uninit_cop@3:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@3:
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAU?$pair@IPAVCvDllNetInitInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetInitInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetInitInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetInitInfo *> *,std::pair<unsigned int,CvDllNetInitInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetInitInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T237129 = -28						; size = 4
__Vptr$237127 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 8
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$237127[ebp], ecx
	mov	edx, DWORD PTR __Vptr$237127[ebp]
	mov	DWORD PTR $T237129[ebp], edx
	cmp	DWORD PTR $T237129[ebp], 0
	je	SHORT $LN18@Uninit_cop@4
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237129[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237129[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@4
$LN18@Uninit_cop@4:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@4:
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAU?$pair@IPAVCvDllNetLoadGameInfo@@@std@@PAU12@V?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@2@@std@@YAPAU?$pair@IPAVCvDllNetLoadGameInfo@@@0@PAU10@00AAV?$allocator@U?$pair@IPAVCvDllNetLoadGameInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::pair<unsigned int,CvDllNetLoadGameInfo *> *,std::allocator<std::pair<unsigned int,CvDllNetLoadGameInfo *> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T237178 = -28						; size = 4
__Vptr$237176 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@5
$LN5@Uninit_cop@5:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@5:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@5

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$237176[ebp], ecx
	mov	edx, DWORD PTR __Vptr$237176[ebp]
	mov	DWORD PTR $T237178[ebp], edx
	cmp	DWORD PTR $T237178[ebp], 0
	je	SHORT $LN18@Uninit_cop@5
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T237178[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T237178[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@5
$LN18@Uninit_cop@5:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@5:
	jmp	SHORT $LN5@Uninit_cop@5
$LN4@Uninit_cop@5:
	jmp	SHORT $LN10@Uninit_cop@5
__catch$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@5
$LN2@Uninit_cop@5:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@5:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@5

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@5
$LN1@Uninit_cop@5:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@5:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
_TEXT	ENDS
;	COMDAT ??3ICvUnknown@@SGXPAX@Z
_TEXT	SEGMENT
_inst$97087 = -4					; size = 4
_p$ = 8							; size = 4
??3ICvUnknown@@SGXPAX@Z PROC				; ICvUnknown::operator delete, COMDAT

; 309  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx

; 310  : 		if (p)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator

; 311  : 		{
; 312  : 			ICvUnknown* inst = (ICvUnknown*)(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _inst$97087[ebp], eax

; 313  : 			inst->Destroy();

	mov	ecx, DWORD PTR _inst$97087[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inst$97087[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
$LN2@operator:

; 314  : 		}
; 315  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??3ICvUnknown@@SGXPAX@Z ENDP				; ICvUnknown::operator delete
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
