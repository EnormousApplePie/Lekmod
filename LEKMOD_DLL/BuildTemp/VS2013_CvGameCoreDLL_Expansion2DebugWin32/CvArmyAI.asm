; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvArmyAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>
PUBLIC	?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z	; CvArmyAI::Reset
PUBLIC	??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::FStaticVector<CvArmyFormationSlot,20,1,297,0>
PUBLIC	??_7CvArmyAI@@6B@				; CvArmyAI::`vftable'
PUBLIC	??0CvArmyAI@@QAE@XZ				; CvArmyAI::CvArmyAI
PUBLIC	?read@CvArmyAI@@UAEXAAVFDataStream@@@Z		; CvArmyAI::read
PUBLIC	?write@CvArmyAI@@UBEXAAVFDataStream@@@Z		; CvArmyAI::write
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_ECvArmyAI@@UAEPAXI@Z:PROC			; CvArmyAI::`vector deleting destructor'
;	COMDAT ??_7CvArmyAI@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_7CvArmyAI@@6B@ DD FLAT:??_ECvArmyAI@@UAEPAXI@Z	; CvArmyAI::`vftable'
	DD	FLAT:?read@CvArmyAI@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?write@CvArmyAI@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvArmyAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvArmyAI@@QAE@XZ$0
__ehfuncinfo$??0CvArmyAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvArmyAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ??0CvArmyAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
__$EHRec$ = -12						; size = 12
??0CvArmyAI@@QAE@XZ PROC				; CvArmyAI::CvArmyAI, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvArmyAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvArmyAI@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::FStaticVector<CvArmyFormationSlot,20,1,297,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 32   : #ifdef AUI_WARNING_FIXES
; 33   : 	Reset(0, NO_PLAYER, -1, true);
; 34   : #else
; 35   : 	Reset(0, NO_PLAYER, true);

	push	0
	push	1
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z ; CvArmyAI::Reset

; 36   : #endif
; 37   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvArmyAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>
__ehhandler$??0CvArmyAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvArmyAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvArmyAI@@QAE@XZ ENDP				; CvArmyAI::CvArmyAI
PUBLIC	??1CvArmyAI@@UAE@XZ				; CvArmyAI::~CvArmyAI
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvArmyAI@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvArmyAI@@UAEPAXI@Z PROC				; CvArmyAI::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvArmyAI@@UAE@XZ			; CvArmyAI::~CvArmyAI
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvArmyAI@@UAEPAXI@Z ENDP				; CvArmyAI::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Uninit@CvArmyAI@@QAEXXZ			; CvArmyAI::Uninit
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvArmyAI@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvArmyAI@@UAE@XZ$0
__ehfuncinfo$??1CvArmyAI@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvArmyAI@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ??1CvArmyAI@@UAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvArmyAI@@UAE@XZ PROC				; CvArmyAI::~CvArmyAI, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvArmyAI@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvArmyAI@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 42   : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvArmyAI@@QAEXXZ		; CvArmyAI::Uninit

; 43   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvArmyAI@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>
__ehhandler$??1CvArmyAI@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvArmyAI@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvArmyAI@@UAE@XZ ENDP				; CvArmyAI::~CvArmyAI
PUBLIC	?Init@CvArmyAI@@QAEXHW4PlayerTypes@@H@Z		; CvArmyAI::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvArmyAI@@QAEXHW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iID$ = 8						; size = 4
_eOwner$ = 12						; size = 4
_iOperationID$ = 16					; size = 4
?Init@CvArmyAI@@QAEXHW4PlayerTypes@@H@Z PROC		; CvArmyAI::Init, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	//--------------------------------
; 49   : 	// Init saved data
; 50   : 	Reset(iID, eOwner, iOperationID);

	push	0
	mov	eax, DWORD PTR _iOperationID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eOwner$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z ; CvArmyAI::Reset

; 51   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CvArmyAI@@QAEXHW4PlayerTypes@@H@Z ENDP		; CvArmyAI::Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Uninit@CvArmyAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T217947 = -8						; size = 4
_i$217942 = -4						; size = 4
?Uninit@CvArmyAI@@QAEXXZ PROC				; CvArmyAI::Uninit, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	m_FormationEntries.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T217947[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN9@Uninit
	mov	DWORD PTR _i$217942[ebp], 0
	jmp	SHORT $LN7@Uninit
$LN6@Uninit:
	mov	edx, DWORD PTR _i$217942[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217942[ebp], edx
$LN7@Uninit:
	mov	eax, DWORD PTR $T217947[ebp]
	mov	ecx, DWORD PTR _i$217942[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN9@Uninit
	jmp	SHORT $LN6@Uninit
$LN9@Uninit:
	mov	edx, DWORD PTR $T217947[ebp]
	mov	DWORD PTR [edx+4], 0

; 57   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvArmyAI@@QAEXXZ ENDP				; CvArmyAI::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T217968 = -8						; size = 4
_i$217963 = -4						; size = 4
_iID$ = 8						; size = 4
_eOwner$ = 12						; size = 4
_iOperationID$ = 16					; size = 4
___formal$ = 20						; size = 1
?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z PROC		; CvArmyAI::Reset, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	//--------------------------------
; 63   : 	// Uninit class
; 64   : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvArmyAI@@QAEXXZ		; CvArmyAI::Uninit

; 65   : 
; 66   : 	m_iID = iID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iID$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 67   : 	m_eOwner = eOwner;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eOwner$[ebp]
	mov	DWORD PTR [edx+8], eax

; 68   : 	m_iOperationID = iOperationID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iOperationID$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 69   : 	m_iCurrentX = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -1

; 70   : 	m_iCurrentY = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], -1

; 71   : 	m_iGoalX = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], -1

; 72   : 	m_iGoalY = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1

; 73   : 	m_eDomainType = DOMAIN_LAND;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 2

; 74   : 	m_iFormationIndex = NO_MUFORMATION;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], -1

; 75   : 	m_eAIState = NO_ARMYAISTATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], -1

; 76   : 
; 77   : 	m_FormationEntries.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T217968[ebp], ecx
	xor	edx, edx
	je	SHORT $LN9@Reset
	mov	DWORD PTR _i$217963[ebp], 0
	jmp	SHORT $LN7@Reset
$LN6@Reset:
	mov	eax, DWORD PTR _i$217963[ebp]
	add	eax, 1
	mov	DWORD PTR _i$217963[ebp], eax
$LN7@Reset:
	mov	ecx, DWORD PTR $T217968[ebp]
	mov	edx, DWORD PTR _i$217963[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN9@Reset
	jmp	SHORT $LN6@Reset
$LN9@Reset:
	mov	eax, DWORD PTR $T217968[ebp]
	mov	DWORD PTR [eax+4], 0

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z ENDP		; CvArmyAI::Reset
_TEXT	ENDS
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
PUBLIC	?GetNextUnitID@CvArmyAI@@QAEHXZ			; CvArmyAI::GetNextUnitID
PUBLIC	?GetFirstUnitID@CvArmyAI@@QAEHXZ		; CvArmyAI::GetFirstUnitID
PUBLIC	?Kill@CvArmyAI@@QAEXXZ				; CvArmyAI::Kill
EXTRN	?setArmyID@CvUnit@@QAEXH@Z:PROC			; CvUnit::setArmyID
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
EXTRN	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z:PROC	; CvPlayer::getUnit
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$?Kill@CvArmyAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Kill@CvArmyAI@@QAEXXZ$0
__ehfuncinfo$?Kill@CvArmyAI@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Kill@CvArmyAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?Kill@CvArmyAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T218023 = -44						; size = 4
_i$218018 = -40						; size = 4
$T217989 = -36						; size = 4
$T217979 = -32						; size = 4
$T217975 = -28						; size = 4
_pThisUnit$217123 = -24					; size = 8
_iUnitID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Kill@CvArmyAI@@QAEXXZ PROC				; CvArmyAI::Kill, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Kill@CvArmyAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	CvAssert(GetOwner() != NO_PLAYER);
; 84   : 	CvAssertMsg(GetID() != FFreeList::INVALID_INDEX, "GetID() is not expected to be equal with FFreeList::INVALID_INDEX");
; 85   : 
; 86   : 	int iUnitID;
; 87   : 	iUnitID = GetFirstUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitID@CvArmyAI@@QAEHXZ	; CvArmyAI::GetFirstUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax
$LN3@Kill:

; 88   : 
; 89   : 	while(iUnitID != ARMY_NO_UNIT)

	cmp	DWORD PTR _iUnitID$[ebp], -1
	je	$LN2@Kill

; 90   : 	{
; 91   : 		UnitHandle pThisUnit = GET_PLAYER(GetOwner()).getUnit(iUnitID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T217975[ebp], ecx
	mov	edx, DWORD PTR $T217975[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T217979[ebp], edx
	mov	eax, DWORD PTR _iUnitID$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T217979[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T217989[ebp], eax
	mov	ecx, DWORD PTR $T217989[ebp]
	mov	DWORD PTR _pThisUnit$217123[ebp], ecx
	mov	BYTE PTR _pThisUnit$217123[ebp+4], 0
	cmp	DWORD PTR _pThisUnit$217123[ebp], 0
	je	SHORT $LN12@Kill
	mov	ecx, DWORD PTR _pThisUnit$217123[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN12@Kill:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 92   : 		if(pThisUnit)

	xor	edx, edx
	cmp	DWORD PTR _pThisUnit$217123[ebp], 0
	setne	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Kill

; 93   : 		{
; 94   : 			pThisUnit->setArmyID(FFreeList::INVALID_INDEX);

	push	-1
	mov	ecx, DWORD PTR _pThisUnit$217123[ebp]
	call	?setArmyID@CvUnit@@QAEXH@Z		; CvUnit::setArmyID
$LN1@Kill:

; 95   : 		}
; 96   : 		iUnitID = GetNextUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnitID@CvArmyAI@@QAEHXZ		; CvArmyAI::GetNextUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax

; 97   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pThisUnit$217123[ebp], 0
	je	SHORT $LN21@Kill
	mov	ecx, DWORD PTR _pThisUnit$217123[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN21@Kill:
	jmp	$LN3@Kill
$LN2@Kill:

; 98   : 
; 99   : 	m_FormationEntries.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T218023[ebp], ecx
	xor	edx, edx
	je	SHORT $LN31@Kill
	mov	DWORD PTR _i$218018[ebp], 0
	jmp	SHORT $LN29@Kill
$LN28@Kill:
	mov	eax, DWORD PTR _i$218018[ebp]
	add	eax, 1
	mov	DWORD PTR _i$218018[ebp], eax
$LN29@Kill:
	mov	ecx, DWORD PTR $T218023[ebp]
	mov	edx, DWORD PTR _i$218018[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN31@Kill
	jmp	SHORT $LN28@Kill
$LN31@Kill:
	mov	eax, DWORD PTR $T218023[ebp]
	mov	DWORD PTR [eax+4], 0

; 100  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Kill@CvArmyAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _pThisUnit$217123[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?Kill@CvArmyAI@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Kill@CvArmyAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Kill@CvArmyAI@@QAEXXZ ENDP				; CvArmyAI::Kill
PUBLIC	?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::push_back
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvArmyFormationSlot@@@Z ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?read@CvArmyAI@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
_slot$217135 = -24					; size = 12
_iI$217131 = -12					; size = 4
_iEntriesToRead$ = -8					; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?read@CvArmyAI@@UAEXAAVFDataStream@@@Z PROC		; CvArmyAI::read, COMDAT
; _this$ = ecx

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 	// Init saved data
; 106  : 	Reset();

	push	0
	push	-1
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvArmyAI@@QAEXHW4PlayerTypes@@H_N@Z ; CvArmyAI::Reset

; 107  : 
; 108  : 	// Version number to maintain backwards compatibility
; 109  : 	uint uiVersion;
; 110  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 111  : 
; 112  : 	kStream >> m_iID;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 113  : 	kStream >> m_eOwner;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 114  : 	kStream >> m_iCurrentX;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 115  : 	kStream >> m_iCurrentY;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 116  : 	kStream >> m_iGoalX;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 117  : 	kStream >> m_iGoalY;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 118  : 	kStream >> m_eDomainType;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 119  : 	kStream >> m_iFormationIndex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 120  : 	kStream >> m_eAIState;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 121  : 	kStream >> m_iOperationID;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 122  : 
; 123  : 	int iEntriesToRead;
; 124  : 	kStream >> iEntriesToRead;

	lea	eax, DWORD PTR _iEntriesToRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 125  : 	for(int iI = 0; iI < iEntriesToRead; iI++)

	mov	DWORD PTR _iI$217131[ebp], 0
	jmp	SHORT $LN3@read
$LN2@read:
	mov	ecx, DWORD PTR _iI$217131[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217131[ebp], ecx
$LN3@read:
	mov	edx, DWORD PTR _iI$217131[ebp]
	cmp	edx, DWORD PTR _iEntriesToRead$[ebp]
	jge	SHORT $LN4@read

; 126  : 	{
; 127  : 		CvArmyFormationSlot slot;

	mov	DWORD PTR _slot$217135[ebp], -1
	mov	DWORD PTR _slot$217135[ebp+4], -1
	mov	DWORD PTR _slot$217135[ebp+8], 0

; 128  : 		kStream >> slot;

	lea	eax, DWORD PTR _slot$217135[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAVCvArmyFormationSlot@@@Z ; operator>>
	add	esp, 8

; 129  : 		m_FormationEntries.push_back(slot);

	lea	edx, DWORD PTR _slot$217135[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::push_back
	jmp	SHORT $LN2@read
$LN4@read:

; 130  : 	}
; 131  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?read@CvArmyAI@@UAEXAAVFDataStream@@@Z ENDP		; CvArmyAI::read
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvArmyFormationSlot@@@Z ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?write@CvArmyAI@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T218154 = -20						; size = 4
$T218147 = -16						; size = 4
$T218113 = -12						; size = 4
_ui$217146 = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?write@CvArmyAI@@UBEXAAVFDataStream@@@Z PROC		; CvArmyAI::write, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 	// Current version number
; 137  : 	uint uiVersion = 1;

	mov	DWORD PTR _uiVersion$[ebp], 1

; 138  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 139  : 
; 140  : 	kStream << m_iID;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 141  : 	kStream << m_eOwner;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<
	add	esp, 8

; 142  : 	kStream << m_iCurrentX;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 143  : 	kStream << m_iCurrentY;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 144  : 	kStream << m_iGoalX;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 145  : 	kStream << m_iGoalY;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 146  : 	kStream << m_eDomainType;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 147  : 	kStream << m_iFormationIndex;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 148  : 	kStream << m_eAIState;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 149  : 	kStream << m_iOperationID;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 150  : 
; 151  : 	kStream << (int)m_FormationEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T218147[ebp], ecx
	mov	edx, DWORD PTR $T218147[ebp]
	mov	DWORD PTR $T218113[ebp], edx
	lea	eax, DWORD PTR $T218113[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 152  : 	for(uint ui = 0; ui < m_FormationEntries.size(); ui++)

	mov	DWORD PTR _ui$217146[ebp], 0
	jmp	SHORT $LN3@write
$LN2@write:
	mov	ecx, DWORD PTR _ui$217146[ebp]
	add	ecx, 1
	mov	DWORD PTR _ui$217146[ebp], ecx
$LN3@write:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T218154[ebp], eax
	mov	ecx, DWORD PTR _ui$217146[ebp]
	cmp	ecx, DWORD PTR $T218154[ebp]
	jae	SHORT $LN4@write

; 153  : 	{
; 154  : 		kStream << m_FormationEntries[ui];

	mov	edx, DWORD PTR _ui$217146[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABVCvArmyFormationSlot@@@Z ; operator<<
	add	esp, 8
	jmp	SHORT $LN2@write
$LN4@write:

; 155  : 	}
; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?write@CvArmyAI@@UBEXAAVFDataStream@@@Z ENDP		; CvArmyAI::write
_TEXT	ENDS
PUBLIC	?GetID@CvArmyAI@@QAEHXZ				; CvArmyAI::GetID
; Function compile flags: /Odtp
;	COMDAT ?GetID@CvArmyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@CvArmyAI@@QAEHXZ PROC				; CvArmyAI::GetID, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 	return m_iID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 164  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@CvArmyAI@@QAEHXZ ENDP				; CvArmyAI::GetID
_TEXT	ENDS
PUBLIC	?SetID@CvArmyAI@@QAEXH@Z			; CvArmyAI::SetID
; Function compile flags: /Odtp
;	COMDAT ?SetID@CvArmyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iID$ = 8						; size = 4
?SetID@CvArmyAI@@QAEXH@Z PROC				; CvArmyAI::SetID, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	m_iID = iID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iID$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 170  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@CvArmyAI@@QAEXH@Z ENDP				; CvArmyAI::SetID
_TEXT	ENDS
PUBLIC	?GetTeam@CvArmyAI@@QBE?AW4TeamTypes@@XZ		; CvArmyAI::GetTeam
; Function compile flags: /Odtp
;	COMDAT ?GetTeam@CvArmyAI@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T218175 = -12						; size = 4
$T218171 = -8						; size = 4
$T218167 = -4						; size = 4
?GetTeam@CvArmyAI@@QBE?AW4TeamTypes@@XZ PROC		; CvArmyAI::GetTeam, COMDAT
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	if(GetOwner() != NO_PLAYER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T218167[ebp], ecx
	cmp	DWORD PTR $T218167[ebp], -1
	je	SHORT $LN1@GetTeam

; 176  : 	{
; 177  : 		return GET_PLAYER(GetOwner()).getTeam();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T218171[ebp], eax
	mov	ecx, DWORD PTR $T218171[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T218175[ebp], ecx
	mov	edx, DWORD PTR $T218175[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPreGame::teamType
	add	esp, 4
	jmp	SHORT $LN2@GetTeam
$LN1@GetTeam:

; 178  : 	}
; 179  : 
; 180  : 	return NO_TEAM;

	or	eax, -1
$LN2@GetTeam:

; 181  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CvArmyAI@@QBE?AW4TeamTypes@@XZ ENDP		; CvArmyAI::GetTeam
_TEXT	ENDS
PUBLIC	?GetArmyAIState@CvArmyAI@@QBE?AW4ArmyAIState@@XZ ; CvArmyAI::GetArmyAIState
; Function compile flags: /Odtp
;	COMDAT ?GetArmyAIState@CvArmyAI@@QBE?AW4ArmyAIState@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetArmyAIState@CvArmyAI@@QBE?AW4ArmyAIState@@XZ PROC	; CvArmyAI::GetArmyAIState, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	return (ArmyAIState) m_eAIState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]

; 187  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetArmyAIState@CvArmyAI@@QBE?AW4ArmyAIState@@XZ ENDP	; CvArmyAI::GetArmyAIState
_TEXT	ENDS
PUBLIC	?SetArmyAIState@CvArmyAI@@QAEXW4ArmyAIState@@@Z	; CvArmyAI::SetArmyAIState
; Function compile flags: /Odtp
;	COMDAT ?SetArmyAIState@CvArmyAI@@QAEXW4ArmyAIState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eNewArmyAIState$ = 8					; size = 4
?SetArmyAIState@CvArmyAI@@QAEXW4ArmyAIState@@@Z PROC	; CvArmyAI::SetArmyAIState, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	m_eAIState = (int) eNewArmyAIState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eNewArmyAIState$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 193  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetArmyAIState@CvArmyAI@@QAEXW4ArmyAIState@@@Z ENDP	; CvArmyAI::SetArmyAIState
_TEXT	ENDS
PUBLIC	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
PUBLIC	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
PUBLIC	?GetMovementRate@CvArmyAI@@QAEHXZ		; CvArmyAI::GetMovementRate
EXTRN	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z:PROC	; CvUnit::baseMoves
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetMovementRate@CvArmyAI@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$2
__ehfuncinfo$?GetMovementRate@CvArmyAI@@QAEHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetMovementRate@CvArmyAI@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetMovementRate@CvArmyAI@@QAEHXZ
_TEXT	SEGMENT
tv137 = -76						; size = 4
tv133 = -72						; size = 4
_this$ = -68						; size = 4
$T218248 = -64						; size = 4
$T218231 = -60						; size = 4
$T218215 = -56						; size = 4
$T218192 = -52						; size = 4
$T218191 = -48						; size = 8
$T218190 = -40						; size = 8
_pUnit$ = -32						; size = 8
_iNumUnits$ = -24					; size = 4
_iMovementAverage$ = -20				; size = 4
_iTotalMovementAllowance$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
?GetMovementRate@CvArmyAI@@QAEHXZ PROC			; CvArmyAI::GetMovementRate, COMDAT
; _this$ = ecx

; 197  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMovementRate@CvArmyAI@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 	int iMovementAverage = 2;   // A reasonable default

	mov	DWORD PTR _iMovementAverage$[ebp], 2

; 199  : 	int iNumUnits = 0;

	mov	DWORD PTR _iNumUnits$[ebp], 0

; 200  : 	int iTotalMovementAllowance = 0;

	mov	DWORD PTR _iTotalMovementAllowance$[ebp], 0

; 201  : 	UnitHandle pUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 202  : 
; 203  : 	pUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T218190[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T218215[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T218215[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN14@GetMovemen
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN12@GetMovemen
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN12@GetMovemen:
	mov	ecx, DWORD PTR $T218215[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN14@GetMovemen
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN14@GetMovemen:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218190[ebp], 0
	je	SHORT $LN25@GetMovemen
	mov	ecx, DWORD PTR $T218190[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 204  : 	while(pUnit)

$LN25@GetMovemen:
	xor	eax, eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetMovemen

; 205  : 	{
; 206  : 		iNumUnits++;

	mov	edx, DWORD PTR _iNumUnits$[ebp]
	add	edx, 1
	mov	DWORD PTR _iNumUnits$[ebp], edx

; 207  : 		iTotalMovementAllowance += pUnit->baseMoves();

	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T218231[ebp], eax
	push	-1
	mov	ecx, DWORD PTR $T218231[ebp]
	call	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::baseMoves
	add	eax, DWORD PTR _iTotalMovementAllowance$[ebp]
	mov	DWORD PTR _iTotalMovementAllowance$[ebp], eax

; 208  : 		pUnit = GetNextUnit();

	lea	ecx, DWORD PTR $T218191[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv137[ebp], eax
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T218248[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T218248[ebp]
	lea	ecx, DWORD PTR _pUnit$[ebp]
	cmp	eax, ecx
	je	SHORT $LN32@GetMovemen
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN30@GetMovemen
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN30@GetMovemen:
	mov	edx, DWORD PTR $T218248[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pUnit$[ebp], eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN32@GetMovemen
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN32@GetMovemen:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218191[ebp], 0
	je	SHORT $LN39@GetMovemen
	mov	ecx, DWORD PTR $T218191[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN39@GetMovemen:

; 209  : 	}

	jmp	$LN25@GetMovemen
$LN2@GetMovemen:

; 210  : 
; 211  : 	if(iNumUnits > 0)

	cmp	DWORD PTR _iNumUnits$[ebp], 0
	jle	SHORT $LN1@GetMovemen

; 212  : 	{
; 213  : 		iMovementAverage = (iTotalMovementAllowance + (iNumUnits / 2)) / iNumUnits;

	mov	eax, DWORD PTR _iNumUnits$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _iTotalMovementAllowance$[ebp]
	cdq
	idiv	DWORD PTR _iNumUnits$[ebp]
	mov	DWORD PTR _iMovementAverage$[ebp], eax
$LN1@GetMovemen:

; 214  : 	}
; 215  : 
; 216  : 	return iMovementAverage;

	mov	ecx, DWORD PTR _iMovementAverage$[ebp]
	mov	DWORD PTR $T218192[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN44@GetMovemen
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN44@GetMovemen:
	mov	eax, DWORD PTR $T218192[ebp]

; 217  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$1:
	lea	ecx, DWORD PTR $T218190[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetMovementRate@CvArmyAI@@QAEHXZ$2:
	lea	ecx, DWORD PTR $T218191[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?GetMovementRate@CvArmyAI@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMovementRate@CvArmyAI@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMovementRate@CvArmyAI@@QAEHXZ ENDP			; CvArmyAI::GetMovementRate
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
PUBLIC	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z	; plotXYWithRangeCheck
PUBLIC	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
PUBLIC	?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z ; CvArmyAI::GetCenterOfMass
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$3
__ehfuncinfo$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z
_TEXT	SEGMENT
tv356 = -396						; size = 4
tv331 = -392						; size = 4
tv340 = -388						; size = 4
tv415 = -384						; size = 4
tv256 = -380						; size = 4
_this$ = -376						; size = 4
$T218768 = -372						; size = 4
$T218755 = -368						; size = 4
$T218686 = -320						; size = 4
$T218682 = -316						; size = 4
$T218678 = -312						; size = 4
$T218674 = -308						; size = 4
$T218659 = -284						; size = 4
$T218655 = -280						; size = 4
$T218482 = -196						; size = 4
$T218478 = -192						; size = 4
$T218436 = -188						; size = 4
$T218423 = -184						; size = 4
$T218419 = -180						; size = 4
$T218412 = -176						; size = 4
$T218408 = -169						; size = 1
$T218404 = -168						; size = 4
$T218400 = -161						; size = 1
_iMapY$218468 = -160					; size = 4
_iMapX$218467 = -156					; size = 4
$T218393 = -152						; size = 4
$T218380 = -148						; size = 4
$T218363 = -144						; size = 4
$T218354 = -140						; size = 4
$T218342 = -136						; size = 4
$T218327 = -132						; size = 4
$T218311 = -128						; size = 4
$T218291 = -124						; size = 4
$T218280 = -120						; size = 4
$T218279 = -116						; size = 8
$T218278 = -108						; size = 4
$T218277 = -104						; size = 4
$T218276 = -100						; size = 8
$T218275 = -92						; size = 8
_pLoopPlot$217242 = -84					; size = 4
_iDY$217238 = -80					; size = 4
_iDX$217234 = -76					; size = 4
_pLoopPlot$217227 = -72					; size = 4
_iI$217223 = -68					; size = 4
_iAverageX$217216 = -64					; size = 4
_iAverageY$217218 = -60					; size = 4
_iDiff$217210 = -56					; size = 4
_iUnitX$217208 = -52					; size = 4
_bWorldWrapAdjust$217209 = -45				; size = 1
_pUnit$ = -44						; size = 8
_iNumUnits$ = -36					; size = 4
_iReferenceUnitX$ = -32					; size = 4
_iTotalX$ = -28						; size = 4
_iWorldWidth$ = -24					; size = 4
_pRtnValue$ = -20					; size = 4
_iTotalY$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_eDomainRequired$ = 8					; size = 4
?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z PROC ; CvArmyAI::GetCenterOfMass, COMDAT
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 384				; 00000180H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 222  : 	CvPlot* pRtnValue = NULL;

	mov	DWORD PTR _pRtnValue$[ebp], 0

; 223  : 	int iTotalX = 0;

	mov	DWORD PTR _iTotalX$[ebp], 0

; 224  : 	int iTotalY = 0;

	mov	DWORD PTR _iTotalY$[ebp], 0

; 225  : 	int iNumUnits = 0;

	mov	DWORD PTR _iNumUnits$[ebp], 0

; 226  : 	UnitHandle pUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 	int iReferenceUnitX = -1;

	mov	DWORD PTR _iReferenceUnitX$[ebp], -1

; 228  : 	int iWorldWidth = GC.getMap().getGridWidth();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T218291[ebp], eax
	mov	ecx, DWORD PTR $T218291[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR _iWorldWidth$[ebp], edx

; 229  : 
; 230  : 	pUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T218275[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv256[ebp], eax
	mov	ecx, DWORD PTR tv256[ebp]
	mov	DWORD PTR $T218311[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T218311[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN46@GetCenterO
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN44@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN44@GetCenterO:
	mov	ecx, DWORD PTR $T218311[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN46@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN46@GetCenterO:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218275[ebp], 0
	je	SHORT $LN57@GetCenterO
	mov	ecx, DWORD PTR $T218275[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 231  : 	if(pUnit)

$LN57@GetCenterO:
	xor	eax, eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN65@GetCenterO

; 232  : 	{
; 233  : 		iReferenceUnitX = pUnit->getX();

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T218327[ebp], edx
	mov	eax, DWORD PTR $T218327[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _iReferenceUnitX$[ebp], ecx

; 234  : 	}
; 235  : 
; 236  : 	while(pUnit)

$LN65@GetCenterO:
	xor	edx, edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN28@GetCenterO

; 237  : 	{
; 238  : 		int iUnitX = pUnit->getX();

	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T218342[ebp], ecx
	mov	edx, DWORD PTR $T218342[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _iUnitX$217208[ebp], eax

; 239  : 
; 240  : 		bool bWorldWrapAdjust = false;

	mov	BYTE PTR _bWorldWrapAdjust$217209[ebp], 0

; 241  : 		int iDiff = iUnitX - iReferenceUnitX;

	mov	ecx, DWORD PTR _iUnitX$217208[ebp]
	sub	ecx, DWORD PTR _iReferenceUnitX$[ebp]
	mov	DWORD PTR _iDiff$217210[ebp], ecx

; 242  : 		if(abs(iDiff) > (iWorldWidth / 2))

	mov	eax, DWORD PTR _iDiff$217210[ebp]
	cdq
	mov	ecx, eax
	xor	ecx, edx
	sub	ecx, edx
	mov	eax, DWORD PTR _iWorldWidth$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN27@GetCenterO

; 243  : 		{
; 244  : 			bWorldWrapAdjust = true;

	mov	BYTE PTR _bWorldWrapAdjust$217209[ebp], 1
$LN27@GetCenterO:

; 245  : 		}
; 246  : 
; 247  : 		if(bWorldWrapAdjust)

	movzx	edx, BYTE PTR _bWorldWrapAdjust$217209[ebp]
	test	edx, edx
	je	SHORT $LN26@GetCenterO

; 248  : 		{
; 249  : 			iTotalX += iUnitX + iWorldWidth;

	mov	eax, DWORD PTR _iUnitX$217208[ebp]
	add	eax, DWORD PTR _iWorldWidth$[ebp]
	add	eax, DWORD PTR _iTotalX$[ebp]
	mov	DWORD PTR _iTotalX$[ebp], eax

; 250  : 		}
; 251  : 		else

	jmp	SHORT $LN25@GetCenterO
$LN26@GetCenterO:

; 252  : 		{
; 253  : 			iTotalX += iUnitX;

	mov	ecx, DWORD PTR _iTotalX$[ebp]
	add	ecx, DWORD PTR _iUnitX$217208[ebp]
	mov	DWORD PTR _iTotalX$[ebp], ecx
$LN25@GetCenterO:

; 254  : 		}
; 255  : 		iTotalY += pUnit->getY();

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T218354[ebp], edx
	mov	eax, DWORD PTR $T218354[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T218363[ebp], ecx
	mov	edx, DWORD PTR _iTotalY$[ebp]
	add	edx, DWORD PTR $T218363[ebp]
	mov	DWORD PTR _iTotalY$[ebp], edx

; 256  : 		iNumUnits++;

	mov	eax, DWORD PTR _iNumUnits$[ebp]
	add	eax, 1
	mov	DWORD PTR _iNumUnits$[ebp], eax

; 257  : 		pUnit = GetNextUnit();

	lea	ecx, DWORD PTR $T218276[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv415[ebp], eax
	mov	edx, DWORD PTR tv415[ebp]
	mov	DWORD PTR $T218380[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T218380[ebp]
	lea	ecx, DWORD PTR _pUnit$[ebp]
	cmp	eax, ecx
	je	SHORT $LN82@GetCenterO
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN80@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN80@GetCenterO:
	mov	edx, DWORD PTR $T218380[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pUnit$[ebp], eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN82@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN82@GetCenterO:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218276[ebp], 0
	je	SHORT $LN89@GetCenterO
	mov	ecx, DWORD PTR $T218276[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN89@GetCenterO:

; 258  : 	}

	jmp	$LN65@GetCenterO
$LN28@GetCenterO:

; 259  : 
; 260  : 	if(iNumUnits > 0)

	cmp	DWORD PTR _iNumUnits$[ebp], 0
	jle	$LN24@GetCenterO

; 261  : 	{
; 262  : 		int iAverageX = (iTotalX + (iNumUnits / 2)) / iNumUnits;

	mov	eax, DWORD PTR _iNumUnits$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _iTotalX$[ebp]
	cdq
	idiv	DWORD PTR _iNumUnits$[ebp]
	mov	DWORD PTR _iAverageX$217216[ebp], eax

; 263  : 		if(iAverageX >= iWorldWidth)

	mov	ecx, DWORD PTR _iAverageX$217216[ebp]
	cmp	ecx, DWORD PTR _iWorldWidth$[ebp]
	jl	SHORT $LN23@GetCenterO

; 264  : 		{
; 265  : 			iAverageX = iAverageX - iWorldWidth;

	mov	edx, DWORD PTR _iAverageX$217216[ebp]
	sub	edx, DWORD PTR _iWorldWidth$[ebp]
	mov	DWORD PTR _iAverageX$217216[ebp], edx
$LN23@GetCenterO:

; 266  : 		}
; 267  : 		int iAverageY = (iTotalY + (iNumUnits / 2)) / iNumUnits;

	mov	eax, DWORD PTR _iNumUnits$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _iTotalY$[ebp]
	cdq
	idiv	DWORD PTR _iNumUnits$[ebp]
	mov	DWORD PTR _iAverageY$217218[ebp], eax

; 268  : 		pRtnValue = GC.getMap().plot(iAverageX, iAverageY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T218393[ebp], eax
	cmp	DWORD PTR _iAverageX$217216[ebp], -2147483647 ; 80000001H
	je	SHORT $LN95@GetCenterO
	cmp	DWORD PTR _iAverageY$217218[ebp], -2147483647 ; 80000001H
	jne	SHORT $LN96@GetCenterO
$LN95@GetCenterO:
	mov	DWORD PTR _pRtnValue$[ebp], 0
	jmp	$LN24@GetCenterO
$LN96@GetCenterO:
	mov	ecx, DWORD PTR $T218393[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T218400[ebp], dl
	mov	eax, DWORD PTR $T218393[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T218404[ebp], ecx
	movzx	edx, BYTE PTR $T218400[ebp]
	push	edx
	mov	eax, DWORD PTR $T218404[ebp]
	push	eax
	mov	ecx, DWORD PTR _iAverageX$217216[ebp]
	push	ecx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapX$218467[ebp], eax
	mov	edx, DWORD PTR $T218393[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T218408[ebp], al
	mov	ecx, DWORD PTR $T218393[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T218412[ebp], edx
	movzx	eax, BYTE PTR $T218408[ebp]
	push	eax
	mov	ecx, DWORD PTR $T218412[ebp]
	push	ecx
	mov	edx, DWORD PTR _iAverageY$217218[ebp]
	push	edx
	call	?coordRange@@YAHHH_N@Z			; coordRange
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMapY$218468[ebp], eax
	cmp	DWORD PTR _iMapX$218467[ebp], 0
	jl	SHORT $LN111@GetCenterO
	mov	eax, DWORD PTR $T218393[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T218419[ebp], ecx
	mov	edx, DWORD PTR _iMapX$218467[ebp]
	cmp	edx, DWORD PTR $T218419[ebp]
	jge	SHORT $LN111@GetCenterO
	cmp	DWORD PTR _iMapY$218468[ebp], 0
	jl	SHORT $LN111@GetCenterO
	mov	eax, DWORD PTR $T218393[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T218423[ebp], ecx
	mov	edx, DWORD PTR _iMapY$218468[ebp]
	cmp	edx, DWORD PTR $T218423[ebp]
	jge	SHORT $LN111@GetCenterO
	mov	DWORD PTR tv340[ebp], 1
	jmp	SHORT $LN109@GetCenterO
$LN111@GetCenterO:
	mov	DWORD PTR tv340[ebp], 0
$LN109@GetCenterO:
	cmp	DWORD PTR tv340[ebp], 0
	je	SHORT $LN99@GetCenterO
	mov	eax, DWORD PTR $T218393[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T218436[ebp], ecx
	mov	edx, DWORD PTR _iMapY$218468[ebp]
	imul	edx, DWORD PTR $T218436[ebp]
	add	edx, DWORD PTR _iMapX$218467[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T218393[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv331[ebp], edx
	jmp	SHORT $LN100@GetCenterO
$LN99@GetCenterO:
	mov	DWORD PTR tv331[ebp], 0
$LN100@GetCenterO:
	mov	ecx, DWORD PTR tv331[ebp]
	mov	DWORD PTR _pRtnValue$[ebp], ecx
$LN24@GetCenterO:

; 269  : 	}
; 270  : 
; 271  : 	// Domain check
; 272  : 	if (eDomainRequired != NO_DOMAIN && pRtnValue)

	cmp	DWORD PTR _eDomainRequired$[ebp], -1
	je	$LN22@GetCenterO
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	$LN22@GetCenterO

; 273  : 	{
; 274  : 		if (pRtnValue->isWater() && eDomainRequired == DOMAIN_LAND || !pRtnValue->isWater() && eDomainRequired == DOMAIN_SEA)

	mov	edx, DWORD PTR _pRtnValue$[ebp]
	movsx	eax, BYTE PTR [edx+5]
	xor	ecx, ecx
	cmp	eax, 3
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN123@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 2
	je	SHORT $LN20@GetCenterO
$LN123@GetCenterO:
	mov	eax, DWORD PTR _pRtnValue$[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	$LN22@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 0
	jne	$LN22@GetCenterO
$LN20@GetCenterO:

; 275  : 		{
; 276  : 			// Find an adjacent plot that works
; 277  : 			for (int iI = 0; iI < NUM_DIRECTION_TYPES; iI++)

	mov	DWORD PTR _iI$217223[ebp], 0
	jmp	SHORT $LN18@GetCenterO
$LN17@GetCenterO:
	mov	ecx, DWORD PTR _iI$217223[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$217223[ebp], ecx
$LN18@GetCenterO:
	cmp	DWORD PTR _iI$217223[ebp], 6
	jge	$LN16@GetCenterO

; 278  : 			{
; 279  : 				CvPlot *pLoopPlot = plotDirection(pRtnValue->getX(), pRtnValue->getY(), ((DirectionTypes)iI));

	mov	edx, DWORD PTR _pRtnValue$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T218478[ebp], eax
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T218482[ebp], edx
	mov	eax, DWORD PTR _iI$217223[ebp]
	push	eax
	mov	ecx, DWORD PTR $T218478[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218482[ebp]
	push	edx
	call	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLoopPlot$217227[ebp], eax

; 280  : 				if (pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$217227[ebp], 0
	je	SHORT $LN15@GetCenterO

; 281  : 				{
; 282  : 					if (pLoopPlot->isWater() && eDomainRequired == DOMAIN_SEA || !pLoopPlot->isWater() && eDomainRequired == DOMAIN_LAND)

	mov	eax, DWORD PTR _pLoopPlot$217227[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN195@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 0
	je	SHORT $LN13@GetCenterO
$LN195@GetCenterO:
	mov	ecx, DWORD PTR _pLoopPlot$217227[ebp]
	movsx	edx, BYTE PTR [ecx+5]
	xor	eax, eax
	cmp	edx, 3
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN15@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 2
	jne	SHORT $LN15@GetCenterO
$LN13@GetCenterO:

; 283  : 					{
; 284  : 						return pLoopPlot;

	mov	edx, DWORD PTR _pLoopPlot$217227[ebp]
	mov	DWORD PTR $T218277[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN198@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN198@GetCenterO:
	mov	eax, DWORD PTR $T218277[ebp]
	jmp	$LN31@GetCenterO
$LN15@GetCenterO:

; 285  : 					}
; 286  : 				}
; 287  : 			}

	jmp	$LN17@GetCenterO
$LN16@GetCenterO:

; 288  : 
; 289  : 			// Try two plots out if really having problems
; 290  : #ifdef AUI_HEXSPACE_DX_LOOPS
; 291  : 			int iMaxDX, iDX;
; 292  : 			CvPlot* pLoopPlot;
; 293  : 			for (int iDY = -2; iDY <= 2; iDY++)
; 294  : 			{
; 295  : 				iMaxDX = 2 - MAX(0, iDY);
; 296  : 				for (iDX = -2 - MIN(0, iDY); iDX <= iMaxDX; iDX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 297  : 				{
; 298  : 					// No need for range check because loops are set up properly
; 299  : 					pLoopPlot = plotXY(pRtnValue->getX(), pRtnValue->getY(), iDX, iDY);
; 300  : 					if (pLoopPlot)
; 301  : 					{
; 302  : 						if (hexDistance(iDX, iDY) == 2)
; 303  : #else
; 304  : 			for (int iDX = -2; iDX <= 2; iDX++)

	mov	DWORD PTR _iDX$217234[ebp], -2		; fffffffeH
	jmp	SHORT $LN11@GetCenterO
$LN10@GetCenterO:
	mov	eax, DWORD PTR _iDX$217234[ebp]
	add	eax, 1
	mov	DWORD PTR _iDX$217234[ebp], eax
$LN11@GetCenterO:
	cmp	DWORD PTR _iDX$217234[ebp], 2
	jg	$LN9@GetCenterO

; 305  : 			{
; 306  : 				for (int iDY = -2; iDY <= 2; iDY++)

	mov	DWORD PTR _iDY$217238[ebp], -2		; fffffffeH
	jmp	SHORT $LN8@GetCenterO
$LN7@GetCenterO:
	mov	ecx, DWORD PTR _iDY$217238[ebp]
	add	ecx, 1
	mov	DWORD PTR _iDY$217238[ebp], ecx
$LN8@GetCenterO:
	cmp	DWORD PTR _iDY$217238[ebp], 2
	jg	$LN6@GetCenterO

; 307  : 				{
; 308  : 					CvPlot *pLoopPlot = plotXYWithRangeCheck(pRtnValue->getX(), pRtnValue->getY(), iDX, iDY, 2);

	mov	edx, DWORD PTR _pRtnValue$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T218655[ebp], eax
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T218659[ebp], edx
	push	2
	mov	eax, DWORD PTR _iDY$217238[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDX$217234[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218655[ebp]
	push	edx
	mov	eax, DWORD PTR $T218659[ebp]
	push	eax
	call	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ; plotXYWithRangeCheck
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pLoopPlot$217242[ebp], eax

; 309  : 					if (pLoopPlot)

	cmp	DWORD PTR _pLoopPlot$217242[ebp], 0
	je	$LN5@GetCenterO

; 310  : 					{
; 311  : #ifdef AUI_FIX_HEX_DISTANCE_INSTEAD_OF_PLOT_DISTANCE
; 312  : 						if (hexDistance(iDX, iDY) == 2)
; 313  : #else
; 314  : 						if (plotDistance(pRtnValue->getX(), pRtnValue->getY(), pLoopPlot->getX(), pLoopPlot->getY()) == 2)

	mov	ecx, DWORD PTR _pLoopPlot$217242[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR $T218674[ebp], edx
	mov	eax, DWORD PTR _pLoopPlot$217242[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR $T218678[ebp], ecx
	mov	edx, DWORD PTR _pRtnValue$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T218682[ebp], eax
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T218686[ebp], edx
	mov	eax, DWORD PTR $T218674[ebp]
	push	eax
	mov	ecx, DWORD PTR $T218678[ebp]
	push	ecx
	mov	edx, DWORD PTR $T218682[ebp]
	push	edx
	mov	eax, DWORD PTR $T218686[ebp]
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	cmp	eax, 2
	jne	SHORT $LN5@GetCenterO

; 315  : #endif
; 316  : #endif
; 317  : 						{
; 318  : 							if (pLoopPlot->isWater() && eDomainRequired == DOMAIN_SEA || !pLoopPlot->isWater() && eDomainRequired == DOMAIN_LAND)

	mov	ecx, DWORD PTR _pLoopPlot$217242[ebp]
	movsx	edx, BYTE PTR [ecx+5]
	xor	eax, eax
	cmp	edx, 3
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN255@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 0
	je	SHORT $LN2@GetCenterO
$LN255@GetCenterO:
	mov	edx, DWORD PTR _pLoopPlot$217242[ebp]
	movsx	eax, BYTE PTR [edx+5]
	xor	ecx, ecx
	cmp	eax, 3
	sete	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN5@GetCenterO
	cmp	DWORD PTR _eDomainRequired$[ebp], 2
	jne	SHORT $LN5@GetCenterO
$LN2@GetCenterO:

; 319  : 							{
; 320  : 								return pLoopPlot;

	mov	eax, DWORD PTR _pLoopPlot$217242[ebp]
	mov	DWORD PTR $T218278[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN258@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN258@GetCenterO:
	mov	eax, DWORD PTR $T218278[ebp]
	jmp	$LN31@GetCenterO
$LN5@GetCenterO:

; 321  : 							}
; 322  : 						}
; 323  : 					}
; 324  : 				}

	jmp	$LN7@GetCenterO
$LN6@GetCenterO:

; 325  : 			}

	jmp	$LN10@GetCenterO
$LN9@GetCenterO:

; 326  : 
; 327  : 			// Give up - just use location of first unit
; 328  : 			pUnit = GetFirstUnit();

	lea	ecx, DWORD PTR $T218279[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv356[ebp], eax
	mov	edx, DWORD PTR tv356[ebp]
	mov	DWORD PTR $T218755[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T218755[ebp]
	lea	ecx, DWORD PTR _pUnit$[ebp]
	cmp	eax, ecx
	je	SHORT $LN265@GetCenterO
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN263@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN263@GetCenterO:
	mov	edx, DWORD PTR $T218755[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pUnit$[ebp], eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN265@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN265@GetCenterO:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T218279[ebp], 0
	je	SHORT $LN272@GetCenterO
	mov	ecx, DWORD PTR $T218279[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN272@GetCenterO:

; 329  : 			pRtnValue = pUnit->plot();

	mov	ecx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T218768[ebp], ecx
	mov	ecx, DWORD PTR $T218768[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR _pRtnValue$[ebp], eax
$LN22@GetCenterO:

; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return pRtnValue;

	mov	edx, DWORD PTR _pRtnValue$[ebp]
	mov	DWORD PTR $T218280[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN279@GetCenterO
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN279@GetCenterO:
	mov	eax, DWORD PTR $T218280[ebp]
$LN31@GetCenterO:

; 334  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$1:
	lea	ecx, DWORD PTR $T218275[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$2:
	lea	ecx, DWORD PTR $T218276[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z$3:
	lea	ecx, DWORD PTR $T218279[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-388]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCenterOfMass@CvArmyAI@@QAEPAVCvPlot@@W4DomainTypes@@@Z ENDP ; CvArmyAI::GetCenterOfMass
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
tv157 = -92						; size = 4
tv138 = -88						; size = 4
tv135 = -84						; size = 4
$T218867 = -80						; size = 4
$T218840 = -60						; size = 4
_iDY$ = -24						; size = 4
_iDX$ = -20						; size = 4
_iWrappedDX$ = -16					; size = 4
_iHX1$ = -12						; size = 4
_iHX2$ = -8						; size = 4
_iWrappedDY$ = -4					; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[ebp]
	sub	eax, DWORD PTR _iX1$[ebp]
	push	eax
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDX$[ebp], eax

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	ecx, DWORD PTR _iY2$[ebp]
	sub	ecx, DWORD PTR _iY1$[ebp]
	push	ecx
	call	?dyWrap@@YAHH@Z				; dyWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDY$[ebp], eax

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, DWORD PTR _iWrappedDY$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[ebp], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	cmp	DWORD PTR _iY1$[ebp], 0
	jl	SHORT $LN35@plotDistan
	mov	edx, DWORD PTR _iY1$[ebp]
	sar	edx, 1
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN33@plotDistan
$LN35@plotDistan:
	mov	eax, DWORD PTR _iY1$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv135[ebp], eax
$LN33@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	sub	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _iHX1$[ebp], eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	mov	ecx, DWORD PTR _iY1$[ebp]
	add	ecx, DWORD PTR _iWrappedDY$[ebp]
	mov	DWORD PTR $T218840[ebp], ecx
	js	SHORT $LN39@plotDistan
	mov	edx, DWORD PTR $T218840[ebp]
	sar	edx, 1
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN37@plotDistan
$LN39@plotDistan:
	mov	eax, DWORD PTR $T218840[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv138[ebp], eax
$LN37@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	add	eax, DWORD PTR _iWrappedDX$[ebp]
	sub	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _iHX2$[ebp], eax

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	ecx, DWORD PTR _iHX2$[ebp]
	sub	ecx, DWORD PTR _iHX1$[ebp]
	push	ecx
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDX$[ebp], eax

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	mov	edx, DWORD PTR _iHX2$[ebp]
	sub	edx, DWORD PTR _iHX1$[ebp]
	xor	eax, eax
	test	edx, edx
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iWrappedDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	jmp	SHORT $LN3@plotDistan

; 163  : 	}
; 164  : 	else

	jmp	SHORT $LN3@plotDistan
$LN2@plotDistan:

; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	mov	edx, DWORD PTR _iDX$[ebp]
	cmp	edx, DWORD PTR _iDY$[ebp]
	jge	SHORT $LN57@plotDistan
	lea	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN58@plotDistan
$LN57@plotDistan:
	lea	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN58@plotDistan:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T218867[ebp], edx
	mov	eax, DWORD PTR $T218867[ebp]
	mov	eax, DWORD PTR [eax]
$LN3@plotDistan:

; 170  : #endif
; 171  : 	}
; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
$T218890 = -16						; size = 4
$T218882 = -12						; size = 4
$T218878 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T218878[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T218882[ebp], ecx
	movzx	edx, BYTE PTR $T218878[ebp]
	test	edx, edx
	je	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR $T218882[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDX$[ebp], eax
	jle	SHORT $LN11@dxWrap
	mov	ecx, DWORD PTR _iDX$[ebp]
	sub	ecx, DWORD PTR $T218882[ebp]
	mov	DWORD PTR $T218890[ebp], ecx
	jmp	SHORT $LN13@dxWrap
	jmp	SHORT $LN12@dxWrap
$LN11@dxWrap:
	mov	edx, DWORD PTR $T218882[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDX$[ebp], edx
	jge	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR $T218882[ebp]
	mov	DWORD PTR $T218890[ebp], eax
	jmp	SHORT $LN13@dxWrap
$LN12@dxWrap:
	mov	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR $T218890[ebp], ecx
$LN13@dxWrap:
	mov	eax, DWORD PTR $T218890[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
$T218911 = -16						; size = 4
$T218903 = -12						; size = 4
$T218899 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T218899[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T218903[ebp], ecx
	movzx	edx, BYTE PTR $T218899[ebp]
	test	edx, edx
	je	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR $T218903[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDY$[ebp], eax
	jle	SHORT $LN11@dyWrap
	mov	ecx, DWORD PTR _iDY$[ebp]
	sub	ecx, DWORD PTR $T218903[ebp]
	mov	DWORD PTR $T218911[ebp], ecx
	jmp	SHORT $LN13@dyWrap
	jmp	SHORT $LN12@dyWrap
$LN11@dyWrap:
	mov	edx, DWORD PTR $T218903[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDY$[ebp], edx
	jge	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR _iDY$[ebp]
	add	eax, DWORD PTR $T218903[ebp]
	mov	DWORD PTR $T218911[ebp], eax
	jmp	SHORT $LN13@dyWrap
$LN12@dyWrap:
	mov	ecx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR $T218911[ebp], ecx
$LN13@dyWrap:
	mov	eax, DWORD PTR $T218911[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Odtp
;	COMDAT ?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z
_TEXT	SEGMENT
tv198 = -100						; size = 4
tv213 = -96						; size = 4
tv168 = -92						; size = 4
tv151 = -88						; size = 4
tv155 = -84						; size = 4
$T219118 = -80						; size = 4
$T219073 = -76						; size = 4
$T219060 = -72						; size = 4
$T219056 = -68						; size = 4
$T219042 = -64						; size = 4
$T219038 = -57						; size = 1
$T219027 = -56						; size = 4
$T219023 = -49						; size = 1
_iMapY$219082 = -48					; size = 4
_iMapX$219081 = -44					; size = 4
$T219016 = -40						; size = 4
$T218992 = -36						; size = 4
$T218955 = -32						; size = 4
$T218943 = -28						; size = 4
$T218939 = -21						; size = 1
$T218928 = -20						; size = 4
$T218924 = -13						; size = 1
_iMapY$218964 = -12					; size = 4
_iMapX$218963 = -8					; size = 4
$T218917 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_eDirection$ = 16					; size = 4
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z PROC ; plotDirection, COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 194  : 	if(eDirection == NO_DIRECTION)

	cmp	DWORD PTR _eDirection$[ebp], -1
	jne	$LN2@plotDirect

; 195  : 	{
; 196  : 		return GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T218917[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN7@plotDirect
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN8@plotDirect
$LN7@plotDirect:
	mov	DWORD PTR $T218992[ebp], 0
	jmp	$LN9@plotDirect
$LN8@plotDirect:
	mov	ecx, DWORD PTR $T218917[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T218924[ebp], dl
	mov	eax, DWORD PTR $T218917[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T218928[ebp], ecx
	movzx	edx, BYTE PTR $T218924[ebp]
	test	edx, edx
	je	SHORT $LN20@plotDirect
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN19@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T218928[ebp]
	add	edx, DWORD PTR $T218928[ebp]
	mov	DWORD PTR _iMapX$218963[ebp], edx
	jmp	SHORT $LN21@plotDirect
	jmp	SHORT $LN20@plotDirect
$LN19@plotDirect:
	mov	eax, DWORD PTR _iX$[ebp]
	cmp	eax, DWORD PTR $T218928[ebp]
	jl	SHORT $LN20@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T218928[ebp]
	mov	DWORD PTR _iMapX$218963[ebp], edx
	jmp	SHORT $LN21@plotDirect
$LN20@plotDirect:
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$218963[ebp], ecx
$LN21@plotDirect:
	mov	edx, DWORD PTR $T218917[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T218939[ebp], al
	mov	ecx, DWORD PTR $T218917[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T218943[ebp], edx
	movzx	eax, BYTE PTR $T218939[ebp]
	test	eax, eax
	je	SHORT $LN30@plotDirect
	cmp	DWORD PTR _iY$[ebp], 0
	jge	SHORT $LN29@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T218943[ebp]
	add	edx, DWORD PTR $T218943[ebp]
	mov	DWORD PTR _iMapY$218964[ebp], edx
	jmp	SHORT $LN31@plotDirect
	jmp	SHORT $LN30@plotDirect
$LN29@plotDirect:
	mov	ecx, DWORD PTR _iY$[ebp]
	cmp	ecx, DWORD PTR $T218943[ebp]
	jl	SHORT $LN30@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T218943[ebp]
	mov	DWORD PTR _iMapY$218964[ebp], edx
	jmp	SHORT $LN31@plotDirect
$LN30@plotDirect:
	mov	edx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _iMapY$218964[ebp], edx
$LN31@plotDirect:
	mov	eax, DWORD PTR _iMapY$218964[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMapX$218963[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T218917[ebp]
	call	?isPlot@CvMap@@QBEHHH@Z			; CvMap::isPlot
	test	eax, eax
	je	SHORT $LN11@plotDirect
	mov	edx, DWORD PTR $T218917[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T218955[ebp], eax
	mov	ecx, DWORD PTR _iMapY$218964[ebp]
	imul	ecx, DWORD PTR $T218955[ebp]
	add	ecx, DWORD PTR _iMapX$218963[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T218917[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR tv155[ebp], ecx
	jmp	SHORT $LN12@plotDirect
$LN11@plotDirect:
	mov	DWORD PTR tv155[ebp], 0
$LN12@plotDirect:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR $T218992[ebp], eax
$LN9@plotDirect:
	mov	eax, DWORD PTR $T218992[ebp]
	jmp	$LN3@plotDirect

; 197  : 	}
; 198  : 	else

	jmp	$LN3@plotDirect
$LN2@plotDirect:

; 199  : 	{
; 200  : 		// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 201  : 		iX = xToHexspaceX(iX , iY);

	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN39@plotDirect
	mov	ecx, DWORD PTR _iY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv151[ebp], ecx
	jmp	SHORT $LN37@plotDirect
$LN39@plotDirect:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv151[ebp], eax
$LN37@plotDirect:
	mov	edx, DWORD PTR _iX$[ebp]
	sub	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _iX$[ebp], edx

; 202  : 		iX += GC.getPlotDirectionX()[eDirection];

	mov	eax, DWORD PTR _eDirection$[ebp]
	mov	ecx, DWORD PTR _iX$[ebp]
	add	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A[eax*4+112]
	mov	DWORD PTR _iX$[ebp], ecx

; 203  : 		iY += GC.getPlotDirectionY()[eDirection];

	mov	edx, DWORD PTR _eDirection$[ebp]
	mov	eax, DWORD PTR _iY$[ebp]
	add	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A[edx*4+136]
	mov	DWORD PTR _iY$[ebp], eax

; 204  : 
; 205  : 		// convert from hex-space coordinates to the storage array
; 206  : 		iX = hexspaceXToX(iX, iY);

	js	SHORT $LN47@plotDirect
	mov	ecx, DWORD PTR _iY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv168[ebp], ecx
	jmp	SHORT $LN45@plotDirect
$LN47@plotDirect:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv168[ebp], eax
$LN45@plotDirect:
	mov	edx, DWORD PTR _iX$[ebp]
	add	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _iX$[ebp], edx

; 207  : 
; 208  : 		return GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T219016[ebp], eax
	cmp	DWORD PTR _iX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN51@plotDirect
	cmp	DWORD PTR _iY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN52@plotDirect
$LN51@plotDirect:
	mov	DWORD PTR $T219118[ebp], 0
	jmp	$LN53@plotDirect
$LN52@plotDirect:
	mov	ecx, DWORD PTR $T219016[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T219023[ebp], dl
	mov	eax, DWORD PTR $T219016[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219027[ebp], ecx
	movzx	edx, BYTE PTR $T219023[ebp]
	test	edx, edx
	je	SHORT $LN64@plotDirect
	cmp	DWORD PTR _iX$[ebp], 0
	jge	SHORT $LN63@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T219027[ebp]
	add	edx, DWORD PTR $T219027[ebp]
	mov	DWORD PTR _iMapX$219081[ebp], edx
	jmp	SHORT $LN65@plotDirect
	jmp	SHORT $LN64@plotDirect
$LN63@plotDirect:
	mov	eax, DWORD PTR _iX$[ebp]
	cmp	eax, DWORD PTR $T219027[ebp]
	jl	SHORT $LN64@plotDirect
	mov	eax, DWORD PTR _iX$[ebp]
	cdq
	idiv	DWORD PTR $T219027[ebp]
	mov	DWORD PTR _iMapX$219081[ebp], edx
	jmp	SHORT $LN65@plotDirect
$LN64@plotDirect:
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR _iMapX$219081[ebp], ecx
$LN65@plotDirect:
	mov	edx, DWORD PTR $T219016[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T219038[ebp], al
	mov	ecx, DWORD PTR $T219016[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T219042[ebp], edx
	movzx	eax, BYTE PTR $T219038[ebp]
	test	eax, eax
	je	SHORT $LN74@plotDirect
	cmp	DWORD PTR _iY$[ebp], 0
	jge	SHORT $LN73@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T219042[ebp]
	add	edx, DWORD PTR $T219042[ebp]
	mov	DWORD PTR _iMapY$219082[ebp], edx
	jmp	SHORT $LN75@plotDirect
	jmp	SHORT $LN74@plotDirect
$LN73@plotDirect:
	mov	ecx, DWORD PTR _iY$[ebp]
	cmp	ecx, DWORD PTR $T219042[ebp]
	jl	SHORT $LN74@plotDirect
	mov	eax, DWORD PTR _iY$[ebp]
	cdq
	idiv	DWORD PTR $T219042[ebp]
	mov	DWORD PTR _iMapY$219082[ebp], edx
	jmp	SHORT $LN75@plotDirect
$LN74@plotDirect:
	mov	edx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR _iMapY$219082[ebp], edx
$LN75@plotDirect:
	cmp	DWORD PTR _iMapX$219081[ebp], 0
	jl	SHORT $LN79@plotDirect
	mov	eax, DWORD PTR $T219016[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219056[ebp], ecx
	mov	edx, DWORD PTR _iMapX$219081[ebp]
	cmp	edx, DWORD PTR $T219056[ebp]
	jge	SHORT $LN79@plotDirect
	cmp	DWORD PTR _iMapY$219082[ebp], 0
	jl	SHORT $LN79@plotDirect
	mov	eax, DWORD PTR $T219016[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T219060[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219082[ebp]
	cmp	edx, DWORD PTR $T219060[ebp]
	jge	SHORT $LN79@plotDirect
	mov	DWORD PTR tv213[ebp], 1
	jmp	SHORT $LN77@plotDirect
$LN79@plotDirect:
	mov	DWORD PTR tv213[ebp], 0
$LN77@plotDirect:
	cmp	DWORD PTR tv213[ebp], 0
	je	SHORT $LN55@plotDirect
	mov	eax, DWORD PTR $T219016[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219073[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219082[ebp]
	imul	edx, DWORD PTR $T219073[ebp]
	add	edx, DWORD PTR _iMapX$219081[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T219016[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv198[ebp], edx
	jmp	SHORT $LN56@plotDirect
$LN55@plotDirect:
	mov	DWORD PTR tv198[ebp], 0
$LN56@plotDirect:
	mov	ecx, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T219118[ebp], ecx
$LN53@plotDirect:
	mov	eax, DWORD PTR $T219118[ebp]
$LN3@plotDirect:

; 209  : 	}
; 210  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ENDP ; plotDirection
_TEXT	ENDS
PUBLIC	?plotXY@@YAPAVCvPlot@@HHHH@Z			; plotXY
; Function compile flags: /Odtp
;	COMDAT ?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z
_TEXT	SEGMENT
tv83 = -96						; size = 4
tv81 = -92						; size = 4
tv78 = -88						; size = 4
tv74 = -84						; size = 4
tv71 = -80						; size = 4
_iAbsDY$216767 = -20					; size = 4
_iAbsDX$216766 = -16					; size = 4
_iAbsDY$216764 = -12					; size = 4
_iAbsDX$216763 = -8					; size = 4
_hexRange$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
_iRange$ = 24						; size = 4
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z PROC	; plotXYWithRangeCheck, COMDAT

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H

; 234  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 235  : 	// I'm assuming iDX and iDY are in hex-space
; 236  : 	if (hexDistance(iDX, iDY) > iRange)
; 237  : #else
; 238  : 	int hexRange;
; 239  : 
; 240  : 	// I'm assuming iDX and iDY are in hex-space
; 241  : 	if((iDX >= 0) == (iDY >= 0))  // the signs match

	xor	eax, eax
	cmp	DWORD PTR _iDX$[ebp], 0
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN3@plotXYWith

; 242  : 	{
; 243  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	cmp	DWORD PTR _iDX$[ebp], 0
	jl	SHORT $LN6@plotXYWith
	mov	edx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN7@plotXYWith
$LN6@plotXYWith:
	mov	eax, DWORD PTR _iDX$[ebp]
	neg	eax
	mov	DWORD PTR tv71[ebp], eax
$LN7@plotXYWith:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _iAbsDX$216763[ebp], ecx

; 244  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	cmp	DWORD PTR _iDY$[ebp], 0
	jl	SHORT $LN8@plotXYWith
	mov	edx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN9@plotXYWith
$LN8@plotXYWith:
	mov	eax, DWORD PTR _iDY$[ebp]
	neg	eax
	mov	DWORD PTR tv74[ebp], eax
$LN9@plotXYWith:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _iAbsDY$216764[ebp], ecx

; 245  : 		hexRange = iAbsDX + iAbsDY;

	mov	edx, DWORD PTR _iAbsDX$216763[ebp]
	add	edx, DWORD PTR _iAbsDY$216764[ebp]
	mov	DWORD PTR _hexRange$[ebp], edx

; 246  : 	}
; 247  : 	else

	jmp	SHORT $LN2@plotXYWith
$LN3@plotXYWith:

; 248  : 	{
; 249  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	cmp	DWORD PTR _iDX$[ebp], 0
	jl	SHORT $LN10@plotXYWith
	mov	eax, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN11@plotXYWith
$LN10@plotXYWith:
	mov	ecx, DWORD PTR _iDX$[ebp]
	neg	ecx
	mov	DWORD PTR tv78[ebp], ecx
$LN11@plotXYWith:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _iAbsDX$216766[ebp], edx

; 250  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	cmp	DWORD PTR _iDY$[ebp], 0
	jl	SHORT $LN12@plotXYWith
	mov	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN13@plotXYWith
$LN12@plotXYWith:
	mov	ecx, DWORD PTR _iDY$[ebp]
	neg	ecx
	mov	DWORD PTR tv81[ebp], ecx
$LN13@plotXYWith:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _iAbsDY$216767[ebp], edx

; 251  : 		hexRange = iAbsDX >= iAbsDY ? iAbsDX : iAbsDY;

	mov	eax, DWORD PTR _iAbsDX$216766[ebp]
	cmp	eax, DWORD PTR _iAbsDY$216767[ebp]
	jl	SHORT $LN14@plotXYWith
	mov	ecx, DWORD PTR _iAbsDX$216766[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	jmp	SHORT $LN15@plotXYWith
$LN14@plotXYWith:
	mov	edx, DWORD PTR _iAbsDY$216767[ebp]
	mov	DWORD PTR tv83[ebp], edx
$LN15@plotXYWith:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR _hexRange$[ebp], eax
$LN2@plotXYWith:

; 252  : 	}
; 253  : 
; 254  : 	if(hexRange > iRange)

	mov	ecx, DWORD PTR _hexRange$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jle	SHORT $LN1@plotXYWith

; 255  : #endif
; 256  : 	{
; 257  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@plotXYWith
$LN1@plotXYWith:

; 258  : 	}
; 259  : 
; 260  : 	return plotXY(iX, iY, iDX, iDY);

	mov	edx, DWORD PTR _iDY$[ebp]
	push	edx
	mov	eax, DWORD PTR _iDX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	call	?plotXY@@YAPAVCvPlot@@HHHH@Z		; plotXY
	add	esp, 16					; 00000010H
$LN4@plotXYWith:

; 261  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ENDP	; plotXYWithRangeCheck
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?plotXY@@YAPAVCvPlot@@HHHH@Z
_TEXT	SEGMENT
tv148 = -72						; size = 4
tv163 = -68						; size = 4
tv86 = -64						; size = 4
tv82 = -60						; size = 4
$T219373 = -56						; size = 4
$T219328 = -52						; size = 4
$T219315 = -48						; size = 4
$T219311 = -44						; size = 4
$T219297 = -40						; size = 4
$T219293 = -33						; size = 1
$T219282 = -32						; size = 4
$T219278 = -25						; size = 1
_iMapY$219372 = -24					; size = 4
_iMapX$219371 = -20					; size = 4
$T219271 = -16						; size = 4
_iPlotHexX$ = -12					; size = 4
_iPlotY$ = -8						; size = 4
_iStartHexX$ = -4					; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
?plotXY@@YAPAVCvPlot@@HHHH@Z PROC			; plotXY, COMDAT

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 214  : 	// convert the start coord to hex-space coordinates
; 215  : 	int iStartHexX = xToHexspaceX(iX, iY);

	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN5@plotXY
	mov	eax, DWORD PTR _iY$[ebp]
	sar	eax, 1
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN3@plotXY
$LN5@plotXY:
	mov	eax, DWORD PTR _iY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv82[ebp], eax
$LN3@plotXY:
	mov	ecx, DWORD PTR _iX$[ebp]
	sub	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _iStartHexX$[ebp], ecx

; 216  : 
; 217  : 	int iPlotHexX = iStartHexX + iDX;

	mov	edx, DWORD PTR _iStartHexX$[ebp]
	add	edx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR _iPlotHexX$[ebp], edx

; 218  : 	int iPlotY = iY + iDY; // Y is the same in both coordinate systems

	mov	eax, DWORD PTR _iY$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR _iPlotY$[ebp], eax

; 219  : 
; 220  : 	// convert from hex-space coordinates to the storage array
; 221  : 	iPlotHexX = hexspaceXToX(iPlotHexX, iPlotY);

	js	SHORT $LN9@plotXY
	mov	ecx, DWORD PTR _iPlotY$[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN7@plotXY
$LN9@plotXY:
	mov	eax, DWORD PTR _iPlotY$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv86[ebp], eax
$LN7@plotXY:
	mov	edx, DWORD PTR _iPlotHexX$[ebp]
	add	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _iPlotHexX$[ebp], edx

; 222  : 
; 223  : 	return GC.getMap().plot(iPlotHexX , iPlotY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T219271[ebp], eax
	cmp	DWORD PTR _iPlotHexX$[ebp], -2147483647	; 80000001H
	je	SHORT $LN13@plotXY
	cmp	DWORD PTR _iPlotY$[ebp], -2147483647	; 80000001H
	jne	SHORT $LN14@plotXY
$LN13@plotXY:
	mov	DWORD PTR $T219373[ebp], 0
	jmp	$LN15@plotXY
$LN14@plotXY:
	mov	ecx, DWORD PTR $T219271[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T219278[ebp], dl
	mov	eax, DWORD PTR $T219271[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219282[ebp], ecx
	movzx	edx, BYTE PTR $T219278[ebp]
	test	edx, edx
	je	SHORT $LN26@plotXY
	cmp	DWORD PTR _iPlotHexX$[ebp], 0
	jge	SHORT $LN25@plotXY
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cdq
	idiv	DWORD PTR $T219282[ebp]
	add	edx, DWORD PTR $T219282[ebp]
	mov	DWORD PTR _iMapX$219371[ebp], edx
	jmp	SHORT $LN27@plotXY
	jmp	SHORT $LN26@plotXY
$LN25@plotXY:
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cmp	eax, DWORD PTR $T219282[ebp]
	jl	SHORT $LN26@plotXY
	mov	eax, DWORD PTR _iPlotHexX$[ebp]
	cdq
	idiv	DWORD PTR $T219282[ebp]
	mov	DWORD PTR _iMapX$219371[ebp], edx
	jmp	SHORT $LN27@plotXY
$LN26@plotXY:
	mov	ecx, DWORD PTR _iPlotHexX$[ebp]
	mov	DWORD PTR _iMapX$219371[ebp], ecx
$LN27@plotXY:
	mov	edx, DWORD PTR $T219271[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T219293[ebp], al
	mov	ecx, DWORD PTR $T219271[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T219297[ebp], edx
	movzx	eax, BYTE PTR $T219293[ebp]
	test	eax, eax
	je	SHORT $LN36@plotXY
	cmp	DWORD PTR _iPlotY$[ebp], 0
	jge	SHORT $LN35@plotXY
	mov	eax, DWORD PTR _iPlotY$[ebp]
	cdq
	idiv	DWORD PTR $T219297[ebp]
	add	edx, DWORD PTR $T219297[ebp]
	mov	DWORD PTR _iMapY$219372[ebp], edx
	jmp	SHORT $LN37@plotXY
	jmp	SHORT $LN36@plotXY
$LN35@plotXY:
	mov	ecx, DWORD PTR _iPlotY$[ebp]
	cmp	ecx, DWORD PTR $T219297[ebp]
	jl	SHORT $LN36@plotXY
	mov	eax, DWORD PTR _iPlotY$[ebp]
	cdq
	idiv	DWORD PTR $T219297[ebp]
	mov	DWORD PTR _iMapY$219372[ebp], edx
	jmp	SHORT $LN37@plotXY
$LN36@plotXY:
	mov	edx, DWORD PTR _iPlotY$[ebp]
	mov	DWORD PTR _iMapY$219372[ebp], edx
$LN37@plotXY:
	cmp	DWORD PTR _iMapX$219371[ebp], 0
	jl	SHORT $LN41@plotXY
	mov	eax, DWORD PTR $T219271[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219311[ebp], ecx
	mov	edx, DWORD PTR _iMapX$219371[ebp]
	cmp	edx, DWORD PTR $T219311[ebp]
	jge	SHORT $LN41@plotXY
	cmp	DWORD PTR _iMapY$219372[ebp], 0
	jl	SHORT $LN41@plotXY
	mov	eax, DWORD PTR $T219271[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T219315[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219372[ebp]
	cmp	edx, DWORD PTR $T219315[ebp]
	jge	SHORT $LN41@plotXY
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN39@plotXY
$LN41@plotXY:
	mov	DWORD PTR tv163[ebp], 0
$LN39@plotXY:
	cmp	DWORD PTR tv163[ebp], 0
	je	SHORT $LN17@plotXY
	mov	eax, DWORD PTR $T219271[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219328[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219372[ebp]
	imul	edx, DWORD PTR $T219328[ebp]
	add	edx, DWORD PTR _iMapX$219371[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T219271[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv148[ebp], edx
	jmp	SHORT $LN18@plotXY
$LN17@plotXY:
	mov	DWORD PTR tv148[ebp], 0
$LN18@plotXY:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T219373[ebp], ecx
$LN15@plotXY:
	mov	eax, DWORD PTR $T219373[ebp]

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotXY@@YAPAVCvPlot@@HHHH@Z ENDP			; plotXY
_TEXT	ENDS
PUBLIC	?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z ; CvArmyAI::GetFurthestUnitDistance
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$2
__ehfuncinfo$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z
_TEXT	SEGMENT
tv174 = -160						; size = 4
tv140 = -156						; size = 4
_this$ = -152						; size = 4
$T219525 = -148						; size = 4
$T219447 = -76						; size = 4
$T219438 = -72						; size = 4
$T219434 = -68						; size = 4
$T219425 = -64						; size = 4
$T219421 = -60						; size = 4
$T219417 = -56						; size = 4
$T219401 = -52						; size = 4
$T219378 = -48						; size = 4
$T219377 = -44						; size = 8
$T219376 = -36						; size = 8
_pUnit$ = -28						; size = 8
_iLargestDistance$ = -20				; size = 4
_iNewDistance$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pPlot$ = 8						; size = 4
?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z PROC ; CvArmyAI::GetFurthestUnitDistance, COMDAT
; _this$ = ecx

; 338  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 339  : 	int iLargestDistance = 0;

	mov	DWORD PTR _iLargestDistance$[ebp], 0

; 340  : 	UnitHandle pUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 341  : 	int iNewDistance;
; 342  : 
; 343  : 	pUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T219376[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T219401[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T219401[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN14@GetFurthes
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN12@GetFurthes
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN12@GetFurthes:
	mov	ecx, DWORD PTR $T219401[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN14@GetFurthes
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN14@GetFurthes:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219376[ebp], 0
	je	SHORT $LN25@GetFurthes
	mov	ecx, DWORD PTR $T219376[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 344  : 	while(pUnit)

$LN25@GetFurthes:
	xor	eax, eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@GetFurthes

; 345  : 	{
; 346  : 		iNewDistance = plotDistance(pUnit->getX(), pUnit->getY(), pPlot->getX(), pPlot->getY());

	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T219417[ebp], eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T219421[ebp], edx
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T219425[ebp], eax
	mov	ecx, DWORD PTR $T219425[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T219434[ebp], edx
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T219438[ebp], eax
	mov	ecx, DWORD PTR $T219438[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T219447[ebp], edx
	mov	eax, DWORD PTR $T219417[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219421[ebp]
	push	ecx
	mov	edx, DWORD PTR $T219434[ebp]
	push	edx
	mov	eax, DWORD PTR $T219447[ebp]
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iNewDistance$[ebp], eax

; 347  : 		if(iNewDistance > iLargestDistance)

	mov	ecx, DWORD PTR _iNewDistance$[ebp]
	cmp	ecx, DWORD PTR _iLargestDistance$[ebp]
	jle	SHORT $LN1@GetFurthes

; 348  : 		{
; 349  : 			iLargestDistance = iNewDistance;

	mov	edx, DWORD PTR _iNewDistance$[ebp]
	mov	DWORD PTR _iLargestDistance$[ebp], edx
$LN1@GetFurthes:

; 350  : 		}
; 351  : 		pUnit = GetNextUnit();

	lea	eax, DWORD PTR $T219377[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv174[ebp], eax
	mov	ecx, DWORD PTR tv174[ebp]
	mov	DWORD PTR $T219525[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T219525[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN86@GetFurthes
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN84@GetFurthes
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN84@GetFurthes:
	mov	ecx, DWORD PTR $T219525[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN86@GetFurthes
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN86@GetFurthes:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219377[ebp], 0
	je	SHORT $LN93@GetFurthes
	mov	ecx, DWORD PTR $T219377[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN93@GetFurthes:

; 352  : 	}

	jmp	$LN25@GetFurthes
$LN2@GetFurthes:

; 353  : 	return iLargestDistance;

	mov	eax, DWORD PTR _iLargestDistance$[ebp]
	mov	DWORD PTR $T219378[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN98@GetFurthes
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN98@GetFurthes:
	mov	eax, DWORD PTR $T219378[ebp]

; 354  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$1:
	lea	ecx, DWORD PTR $T219376[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z$2:
	lea	ecx, DWORD PTR $T219377[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFurthestUnitDistance@CvArmyAI@@QAEHPAVCvPlot@@@Z ENDP ; CvArmyAI::GetFurthestUnitDistance
PUBLIC	?GetFormationIndex@CvArmyAI@@QBEHXZ		; CvArmyAI::GetFormationIndex
; Function compile flags: /Odtp
;	COMDAT ?GetFormationIndex@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFormationIndex@CvArmyAI@@QBEHXZ PROC		; CvArmyAI::GetFormationIndex, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	return m_iFormationIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFormationIndex@CvArmyAI@@QBEHXZ ENDP		; CvArmyAI::GetFormationIndex
_TEXT	ENDS
PUBLIC	?SetFormationIndex@CvArmyAI@@QAEXH@Z		; CvArmyAI::SetFormationIndex
EXTRN	?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ:PROC ; CvMultiUnitFormationInfo::getNumFormationSlotEntries
EXTRN	?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z:PROC ; CvGlobals::getMultiUnitFormationInfo
; Function compile flags: /Odtp
;	COMDAT ?SetFormationIndex@CvArmyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T219575 = -32						; size = 4
_i$219570 = -28						; size = 4
_iI$217277 = -24					; size = 4
_iNumSlots$217276 = -20					; size = 4
_thisFormation$217274 = -16				; size = 4
_slot$ = -12						; size = 12
_iFormationIndex$ = 8					; size = 4
?SetFormationIndex@CvArmyAI@@QAEXH@Z PROC		; CvArmyAI::SetFormationIndex, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	CvArmyFormationSlot slot;

	mov	DWORD PTR _slot$[ebp], -1
	mov	DWORD PTR _slot$[ebp+4], -1
	mov	DWORD PTR _slot$[ebp+8], 0

; 368  : 
; 369  : 	if(m_iFormationIndex != iFormationIndex)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	ecx, DWORD PTR _iFormationIndex$[ebp]
	je	$LN6@SetFormati

; 370  : 	{
; 371  : 		m_iFormationIndex = iFormationIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iFormationIndex$[ebp]
	mov	DWORD PTR [edx+36], eax

; 372  : 
; 373  : 		CvMultiUnitFormationInfo* thisFormation = GC.getMultiUnitFormationInfo(m_iFormationIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z ; CvGlobals::getMultiUnitFormationInfo
	mov	DWORD PTR _thisFormation$217274[ebp], eax

; 374  : 		if(thisFormation)

	cmp	DWORD PTR _thisFormation$217274[ebp], 0
	je	SHORT $LN6@SetFormati

; 375  : 		{
; 376  : 			int iNumSlots = thisFormation->getNumFormationSlotEntries();

	mov	ecx, DWORD PTR _thisFormation$217274[ebp]
	call	?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ ; CvMultiUnitFormationInfo::getNumFormationSlotEntries
	mov	DWORD PTR _iNumSlots$217276[ebp], eax

; 377  : 
; 378  : 			// Build all the formation entries
; 379  : 			m_FormationEntries.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T219575[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN16@SetFormati
	mov	DWORD PTR _i$219570[ebp], 0
	jmp	SHORT $LN14@SetFormati
$LN13@SetFormati:
	mov	edx, DWORD PTR _i$219570[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219570[ebp], edx
$LN14@SetFormati:
	mov	eax, DWORD PTR $T219575[ebp]
	mov	ecx, DWORD PTR _i$219570[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN16@SetFormati
	jmp	SHORT $LN13@SetFormati
$LN16@SetFormati:
	mov	edx, DWORD PTR $T219575[ebp]
	mov	DWORD PTR [edx+4], 0

; 380  : 			for(int iI = 0; iI < iNumSlots; iI++)

	mov	DWORD PTR _iI$217277[ebp], 0
	jmp	SHORT $LN3@SetFormati
$LN2@SetFormati:
	mov	eax, DWORD PTR _iI$217277[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217277[ebp], eax
$LN3@SetFormati:
	mov	ecx, DWORD PTR _iI$217277[ebp]
	cmp	ecx, DWORD PTR _iNumSlots$217276[ebp]
	jge	SHORT $LN6@SetFormati

; 381  : 			{
; 382  : 				slot.SetUnitID(ARMY_NO_UNIT);

	mov	DWORD PTR _slot$[ebp], -1

; 383  : 				slot.SetTurnAtCheckpoint(ARMYSLOT_UNKNOWN_TURN_AT_CHECKPOINT);

	mov	DWORD PTR _slot$[ebp+4], -1

; 384  : 				m_FormationEntries.push_back(slot);

	lea	edx, DWORD PTR _slot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::push_back

; 385  : 			}

	jmp	SHORT $LN2@SetFormati
$LN6@SetFormati:

; 386  : 		}
; 387  : 	}
; 388  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFormationIndex@CvArmyAI@@QAEXH@Z ENDP		; CvArmyAI::SetFormationIndex
_TEXT	ENDS
PUBLIC	?GetNumFormationEntries@CvArmyAI@@QBEHXZ	; CvArmyAI::GetNumFormationEntries
; Function compile flags: /Odtp
;	COMDAT ?GetNumFormationEntries@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T219630 = -4						; size = 4
?GetNumFormationEntries@CvArmyAI@@QBEHXZ PROC		; CvArmyAI::GetNumFormationEntries, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 	return m_FormationEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T219630[ebp], ecx
	mov	eax, DWORD PTR $T219630[ebp]

; 394  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumFormationEntries@CvArmyAI@@QBEHXZ ENDP		; CvArmyAI::GetNumFormationEntries
_TEXT	ENDS
PUBLIC	?GetNumSlotsFilled@CvArmyAI@@QBEHXZ		; CvArmyAI::GetNumSlotsFilled
; Function compile flags: /Odtp
;	COMDAT ?GetNumSlotsFilled@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T219636 = -12						; size = 4
_iI$217288 = -8						; size = 4
_iRtnValue$ = -4					; size = 4
?GetNumSlotsFilled@CvArmyAI@@QBEHXZ PROC		; CvArmyAI::GetNumSlotsFilled, COMDAT
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 399  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 400  : 
; 401  : 	for(unsigned int iI = 0; iI < m_FormationEntries.size(); iI++)

	mov	DWORD PTR _iI$217288[ebp], 0
	jmp	SHORT $LN4@GetNumSlot
$LN3@GetNumSlot:
	mov	eax, DWORD PTR _iI$217288[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217288[ebp], eax
$LN4@GetNumSlot:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T219636[ebp], edx
	mov	eax, DWORD PTR _iI$217288[ebp]
	cmp	eax, DWORD PTR $T219636[ebp]
	jae	SHORT $LN2@GetNumSlot

; 402  : 	{
; 403  : 		if(m_FormationEntries[iI].m_iUnitID != ARMY_NO_UNIT)

	mov	ecx, DWORD PTR _iI$217288[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [ecx+eax], -1
	je	SHORT $LN1@GetNumSlot

; 404  : 		{
; 405  : 			iRtnValue++;

	mov	ecx, DWORD PTR _iRtnValue$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iRtnValue$[ebp], ecx
$LN1@GetNumSlot:

; 406  : 		}
; 407  : 	}

	jmp	SHORT $LN3@GetNumSlot
$LN2@GetNumSlot:

; 408  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumSlotsFilled@CvArmyAI@@QBEHXZ ENDP		; CvArmyAI::GetNumSlotsFilled
_TEXT	ENDS
PUBLIC	?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z		; CvArmyAI::SetEstimatedTurn
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
; Function compile flags: /Odtp
;	COMDAT ?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T219652 = -12						; size = 4
$T219645 = -8						; size = 4
_iTurnAtCheckpoint$ = -4				; size = 4
_iSlotID$ = 8						; size = 4
_iTurns$ = 12						; size = 4
?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z PROC		; CvArmyAI::SetEstimatedTurn, COMDAT
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	int iTurnAtCheckpoint;
; 415  : 
; 416  : 	if(iTurns == ARMYSLOT_NOT_INCLUDING_IN_OPERATION || iTurns == ARMYSLOT_UNKNOWN_TURN_AT_CHECKPOINT)

	cmp	DWORD PTR _iTurns$[ebp], -2		; fffffffeH
	je	SHORT $LN2@SetEstimat
	cmp	DWORD PTR _iTurns$[ebp], -1
	jne	SHORT $LN3@SetEstimat
$LN2@SetEstimat:

; 417  : 	{
; 418  : 		iTurnAtCheckpoint = iTurns;

	mov	eax, DWORD PTR _iTurns$[ebp]
	mov	DWORD PTR _iTurnAtCheckpoint$[ebp], eax

; 419  : 	}
; 420  : 	else

	jmp	SHORT $LN8@SetEstimat
$LN3@SetEstimat:

; 421  : 	{
; 422  : 		iTurnAtCheckpoint = GC.getGame().getGameTurn() + iTurns;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T219645[ebp], ecx
	mov	ecx, DWORD PTR $T219645[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	add	eax, DWORD PTR _iTurns$[ebp]
	mov	DWORD PTR _iTurnAtCheckpoint$[ebp], eax

; 423  : 	}
; 424  : 
; 425  : 	m_FormationEntries[iSlotID].SetTurnAtCheckpoint(iTurnAtCheckpoint);

$LN8@SetEstimat:
	mov	edx, DWORD PTR _iSlotID$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	DWORD PTR $T219652[ebp], edx
	mov	ecx, DWORD PTR $T219652[ebp]
	mov	edx, DWORD PTR _iTurnAtCheckpoint$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 426  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z ENDP		; CvArmyAI::SetEstimatedTurn
_TEXT	ENDS
PUBLIC	?GetTurnAtNextCheckpoint@CvArmyAI@@QBEHXZ	; CvArmyAI::GetTurnAtNextCheckpoint
; Function compile flags: /Odtp
;	COMDAT ?GetTurnAtNextCheckpoint@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T219658 = -12						; size = 4
_iI$217306 = -8						; size = 4
_iRtnValue$ = -4					; size = 4
?GetTurnAtNextCheckpoint@CvArmyAI@@QBEHXZ PROC		; CvArmyAI::GetTurnAtNextCheckpoint, COMDAT
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 	int iRtnValue = ARMYSLOT_NOT_INCLUDING_IN_OPERATION;

	mov	DWORD PTR _iRtnValue$[ebp], -2		; fffffffeH

; 432  : 
; 433  : 	for(unsigned int iI = 0; iI < m_FormationEntries.size(); iI++)

	mov	DWORD PTR _iI$217306[ebp], 0
	jmp	SHORT $LN6@GetTurnAtN
$LN5@GetTurnAtN:
	mov	eax, DWORD PTR _iI$217306[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217306[ebp], eax
$LN6@GetTurnAtN:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T219658[ebp], edx
	mov	eax, DWORD PTR _iI$217306[ebp]
	cmp	eax, DWORD PTR $T219658[ebp]
	jae	SHORT $LN4@GetTurnAtN

; 434  : 	{
; 435  : 		if(m_FormationEntries[iI].m_iEstimatedTurnAtCheckpoint == ARMYSLOT_UNKNOWN_TURN_AT_CHECKPOINT)

	mov	ecx, DWORD PTR _iI$217306[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [eax+ecx+4], -1
	jne	SHORT $LN13@GetTurnAtN

; 436  : 		{
; 437  : 			return ARMYSLOT_UNKNOWN_TURN_AT_CHECKPOINT;

	or	eax, -1
	jmp	SHORT $LN7@GetTurnAtN
	jmp	SHORT $LN2@GetTurnAtN

; 438  : 		}
; 439  : 		else if(m_FormationEntries[iI].m_iEstimatedTurnAtCheckpoint > iRtnValue)

$LN13@GetTurnAtN:
	mov	ecx, DWORD PTR _iI$217306[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+ecx+4]
	cmp	ecx, DWORD PTR _iRtnValue$[ebp]
	jle	SHORT $LN2@GetTurnAtN

; 440  : 		{
; 441  : 			iRtnValue = m_FormationEntries[iI].m_iEstimatedTurnAtCheckpoint;

	mov	edx, DWORD PTR _iI$217306[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _iRtnValue$[ebp], edx
$LN2@GetTurnAtN:

; 442  : 		}
; 443  : 	}

	jmp	SHORT $LN5@GetTurnAtN
$LN4@GetTurnAtN:

; 444  : 
; 445  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
$LN7@GetTurnAtN:

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTurnAtNextCheckpoint@CvArmyAI@@QBEHXZ ENDP		; CvArmyAI::GetTurnAtNextCheckpoint
_TEXT	ENDS
PUBLIC	?GetX@CvArmyAI@@QBEHXZ				; CvArmyAI::GetX
PUBLIC	?GetY@CvArmyAI@@QBEHXZ				; CvArmyAI::GetY
PUBLIC	?UpdateCheckpointTurns@CvArmyAI@@QAEXXZ		; CvArmyAI::UpdateCheckpointTurns
EXTRN	?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z:PROC ; TurnsToReachTarget
; Function compile flags: /Odtp
;	COMDAT ?UpdateCheckpointTurns@CvArmyAI@@QAEXXZ
_TEXT	SEGMENT
tv177 = -116						; size = 4
tv176 = -112						; size = 4
tv207 = -108						; size = 4
tv222 = -104						; size = 4
_this$ = -100						; size = 4
$T219812 = -96						; size = 4
$T219802 = -92						; size = 4
$T219801 = -88						; size = 4
$T219756 = -84						; size = 4
$T219743 = -80						; size = 4
$T219739 = -76						; size = 4
$T219725 = -72						; size = 4
$T219721 = -65						; size = 1
$T219710 = -64						; size = 4
$T219706 = -57						; size = 1
_iMapY$219800 = -56					; size = 4
_iMapX$219799 = -52					; size = 4
$T219699 = -48						; size = 4
$T219695 = -44						; size = 4
$T219691 = -40						; size = 4
$T219687 = -36						; size = 4
$T219683 = -32						; size = 4
$T219679 = -28						; size = 4
$T219675 = -24						; size = 4
$T219670 = -20						; size = 4
_iTurnsToReachCheckpoint$217324 = -16			; size = 4
_pUnit$217321 = -12					; size = 4
_pMusterPlot$217322 = -8				; size = 4
_iI$217316 = -4						; size = 4
?UpdateCheckpointTurns@CvArmyAI@@QAEXXZ PROC		; CvArmyAI::UpdateCheckpointTurns, COMDAT
; _this$ = ecx

; 450  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 451  : 	for(unsigned int iI = 0; iI < m_FormationEntries.size(); iI++)

	mov	DWORD PTR _iI$217316[ebp], 0
	jmp	SHORT $LN6@UpdateChec
$LN5@UpdateChec:
	mov	eax, DWORD PTR _iI$217316[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217316[ebp], eax
$LN6@UpdateChec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T219675[ebp], edx
	mov	eax, DWORD PTR _iI$217316[ebp]
	cmp	eax, DWORD PTR $T219675[ebp]
	jae	$LN7@UpdateChec

; 452  : 	{
; 453  : 		// No reestimate for units being built
; 454  : 		if(m_FormationEntries[iI].GetUnitID() != ARMY_NO_UNIT)

	mov	ecx, DWORD PTR _iI$217316[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR $T219679[ebp], ecx
	mov	eax, DWORD PTR $T219679[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219683[ebp], ecx
	cmp	DWORD PTR $T219683[ebp], -1
	je	$LN3@UpdateChec

; 455  : 		{
; 456  : 			CvUnit* pUnit = GET_PLAYER(m_eOwner).getUnit(m_FormationEntries[iI].GetUnitID());

	mov	edx, DWORD PTR _iI$217316[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	DWORD PTR $T219687[ebp], edx
	mov	ecx, DWORD PTR $T219687[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219691[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T219695[ebp], ecx
	mov	edx, DWORD PTR $T219691[ebp]
	push	edx
	mov	ecx, DWORD PTR $T219695[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR _pUnit$217321[ebp], eax

; 457  : 			CvPlot* pMusterPlot = GC.getMap().plot(GetX(), GetY());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T219699[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@CvArmyAI@@QBEHXZ			; CvArmyAI::GetY
	mov	DWORD PTR $T219802[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@CvArmyAI@@QBEHXZ			; CvArmyAI::GetX
	mov	DWORD PTR $T219801[ebp], eax
	cmp	DWORD PTR $T219801[ebp], -2147483647	; 80000001H
	je	SHORT $LN24@UpdateChec
	cmp	DWORD PTR $T219802[ebp], -2147483647	; 80000001H
	jne	SHORT $LN25@UpdateChec
$LN24@UpdateChec:
	mov	DWORD PTR _pMusterPlot$217322[ebp], 0
	jmp	$LN26@UpdateChec
$LN25@UpdateChec:
	mov	ecx, DWORD PTR $T219699[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T219706[ebp], dl
	mov	eax, DWORD PTR $T219699[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219710[ebp], ecx
	movzx	edx, BYTE PTR $T219706[ebp]
	test	edx, edx
	je	SHORT $LN37@UpdateChec
	cmp	DWORD PTR $T219801[ebp], 0
	jge	SHORT $LN36@UpdateChec
	mov	eax, DWORD PTR $T219801[ebp]
	cdq
	idiv	DWORD PTR $T219710[ebp]
	add	edx, DWORD PTR $T219710[ebp]
	mov	DWORD PTR _iMapX$219799[ebp], edx
	jmp	SHORT $LN38@UpdateChec
	jmp	SHORT $LN37@UpdateChec
$LN36@UpdateChec:
	mov	eax, DWORD PTR $T219801[ebp]
	cmp	eax, DWORD PTR $T219710[ebp]
	jl	SHORT $LN37@UpdateChec
	mov	eax, DWORD PTR $T219801[ebp]
	cdq
	idiv	DWORD PTR $T219710[ebp]
	mov	DWORD PTR _iMapX$219799[ebp], edx
	jmp	SHORT $LN38@UpdateChec
$LN37@UpdateChec:
	mov	ecx, DWORD PTR $T219801[ebp]
	mov	DWORD PTR _iMapX$219799[ebp], ecx
$LN38@UpdateChec:
	mov	edx, DWORD PTR $T219699[ebp]
	mov	al, BYTE PTR [edx+4057]
	mov	BYTE PTR $T219721[ebp], al
	mov	ecx, DWORD PTR $T219699[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T219725[ebp], edx
	movzx	eax, BYTE PTR $T219721[ebp]
	test	eax, eax
	je	SHORT $LN47@UpdateChec
	cmp	DWORD PTR $T219802[ebp], 0
	jge	SHORT $LN46@UpdateChec
	mov	eax, DWORD PTR $T219802[ebp]
	cdq
	idiv	DWORD PTR $T219725[ebp]
	add	edx, DWORD PTR $T219725[ebp]
	mov	DWORD PTR _iMapY$219800[ebp], edx
	jmp	SHORT $LN48@UpdateChec
	jmp	SHORT $LN47@UpdateChec
$LN46@UpdateChec:
	mov	ecx, DWORD PTR $T219802[ebp]
	cmp	ecx, DWORD PTR $T219725[ebp]
	jl	SHORT $LN47@UpdateChec
	mov	eax, DWORD PTR $T219802[ebp]
	cdq
	idiv	DWORD PTR $T219725[ebp]
	mov	DWORD PTR _iMapY$219800[ebp], edx
	jmp	SHORT $LN48@UpdateChec
$LN47@UpdateChec:
	mov	edx, DWORD PTR $T219802[ebp]
	mov	DWORD PTR _iMapY$219800[ebp], edx
$LN48@UpdateChec:
	cmp	DWORD PTR _iMapX$219799[ebp], 0
	jl	SHORT $LN52@UpdateChec
	mov	eax, DWORD PTR $T219699[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219739[ebp], ecx
	mov	edx, DWORD PTR _iMapX$219799[ebp]
	cmp	edx, DWORD PTR $T219739[ebp]
	jge	SHORT $LN52@UpdateChec
	cmp	DWORD PTR _iMapY$219800[ebp], 0
	jl	SHORT $LN52@UpdateChec
	mov	eax, DWORD PTR $T219699[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T219743[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219800[ebp]
	cmp	edx, DWORD PTR $T219743[ebp]
	jge	SHORT $LN52@UpdateChec
	mov	DWORD PTR tv222[ebp], 1
	jmp	SHORT $LN50@UpdateChec
$LN52@UpdateChec:
	mov	DWORD PTR tv222[ebp], 0
$LN50@UpdateChec:
	cmp	DWORD PTR tv222[ebp], 0
	je	SHORT $LN28@UpdateChec
	mov	eax, DWORD PTR $T219699[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T219756[ebp], ecx
	mov	edx, DWORD PTR _iMapY$219800[ebp]
	imul	edx, DWORD PTR $T219756[ebp]
	add	edx, DWORD PTR _iMapX$219799[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T219699[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR tv207[ebp], edx
	jmp	SHORT $LN29@UpdateChec
$LN28@UpdateChec:
	mov	DWORD PTR tv207[ebp], 0
$LN29@UpdateChec:
	mov	ecx, DWORD PTR tv207[ebp]
	mov	DWORD PTR _pMusterPlot$217322[ebp], ecx
$LN26@UpdateChec:

; 458  : 			if(pUnit && pMusterPlot)

	cmp	DWORD PTR _pUnit$217321[ebp], 0
	je	SHORT $LN3@UpdateChec
	cmp	DWORD PTR _pMusterPlot$217322[ebp], 0
	je	SHORT $LN3@UpdateChec

; 459  : 			{
; 460  : 				int iTurnsToReachCheckpoint = TurnsToReachTarget(pUnit, pMusterPlot, true /*bReusePaths*/, true, true);

	push	1
	push	1
	push	1
	mov	edx, DWORD PTR _pMusterPlot$217322[ebp]
	push	edx
	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR $T219670[ebp], esp
	mov	DWORD PTR $T219812[ebp], eax
	mov	ecx, DWORD PTR $T219812[ebp]
	mov	edx, DWORD PTR _pUnit$217321[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T219812[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR $T219812[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN63@UpdateChec
	mov	edx, DWORD PTR $T219812[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN63@UpdateChec:
	mov	eax, DWORD PTR $T219812[ebp]
	mov	DWORD PTR tv176[ebp], eax
	call	?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z ; TurnsToReachTarget
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _iTurnsToReachCheckpoint$217324[ebp], ecx

; 461  : 				if(iTurnsToReachCheckpoint < MAX_INT)

	cmp	DWORD PTR _iTurnsToReachCheckpoint$217324[ebp], 2147483647 ; 7fffffffH
	jge	SHORT $LN3@UpdateChec

; 462  : 				{
; 463  : 					SetEstimatedTurn(iI, iTurnsToReachCheckpoint);

	mov	edx, DWORD PTR _iTurnsToReachCheckpoint$217324[ebp]
	push	edx
	mov	eax, DWORD PTR _iI$217316[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z	; CvArmyAI::SetEstimatedTurn
$LN3@UpdateChec:

; 464  : 				}
; 465  : 			}
; 466  : 		}

	jmp	$LN5@UpdateChec
$LN7@UpdateChec:

; 467  : 	}
; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateCheckpointTurns@CvArmyAI@@QAEXXZ ENDP		; CvArmyAI::UpdateCheckpointTurns
_TEXT	ENDS
PUBLIC	?GetUnitsOfType@CvArmyAI@@QBEHW4MultiunitPositionTypes@@@Z ; CvArmyAI::GetUnitsOfType
EXTRN	?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z:PROC ; CvMultiUnitFormationInfo::getFormationSlotEntry
EXTRN	?getMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::getMoves
; Function compile flags: /Odtp
;	COMDAT ?GetUnitsOfType@CvArmyAI@@QBEHW4MultiunitPositionTypes@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T219829 = -32						; size = 4
$T219825 = -28						; size = 4
$T219818 = -24						; size = 4
_thisSlotEntry$217341 = -20				; size = 4
_thisFormation$217339 = -16				; size = 4
_pUnit$217337 = -12					; size = 4
_iI$217332 = -8						; size = 4
_iRtnValue$ = -4					; size = 4
_ePosition$ = 8						; size = 4
?GetUnitsOfType@CvArmyAI@@QBEHW4MultiunitPositionTypes@@@Z PROC ; CvArmyAI::GetUnitsOfType, COMDAT
; _this$ = ecx

; 472  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 473  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 474  : 
; 475  : 	for(unsigned int iI = 0; iI < m_FormationEntries.size(); iI++)

	mov	DWORD PTR _iI$217332[ebp], 0
	jmp	SHORT $LN7@GetUnitsOf
$LN6@GetUnitsOf:
	mov	eax, DWORD PTR _iI$217332[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217332[ebp], eax
$LN7@GetUnitsOf:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T219818[ebp], edx
	mov	eax, DWORD PTR _iI$217332[ebp]
	cmp	eax, DWORD PTR $T219818[ebp]
	jae	$LN5@GetUnitsOf

; 476  : 	{
; 477  : 		if(m_FormationEntries[iI].m_iUnitID != ARMY_NO_UNIT)

	mov	ecx, DWORD PTR _iI$217332[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [ecx+eax], -1
	je	SHORT $LN4@GetUnitsOf

; 478  : 		{
; 479  : 			CvUnit* pUnit = GET_PLAYER(m_eOwner).getUnit(m_FormationEntries[iI].m_iUnitID);

	mov	ecx, DWORD PTR _iI$217332[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR $T219825[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T219829[ebp], ecx
	mov	edx, DWORD PTR $T219825[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR $T219829[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR _pUnit$217337[ebp], eax

; 480  : 			if(pUnit->getMoves() > 0)

	mov	ecx, DWORD PTR _pUnit$217337[ebp]
	call	?getMoves@CvUnit@@QBEHXZ		; CvUnit::getMoves
	test	eax, eax
	jle	SHORT $LN4@GetUnitsOf

; 481  : 			{
; 482  : 				CvMultiUnitFormationInfo* thisFormation = GC.getMultiUnitFormationInfo(m_iFormationIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMultiUnitFormationInfo@CvGlobals@@QAEPAVCvMultiUnitFormationInfo@@H@Z ; CvGlobals::getMultiUnitFormationInfo
	mov	DWORD PTR _thisFormation$217339[ebp], eax

; 483  : 				if(thisFormation)

	cmp	DWORD PTR _thisFormation$217339[ebp], 0
	je	SHORT $LN4@GetUnitsOf

; 484  : 				{
; 485  : 					const CvFormationSlotEntry& thisSlotEntry = thisFormation->getFormationSlotEntry(iI);

	mov	eax, DWORD PTR _iI$217332[ebp]
	push	eax
	mov	ecx, DWORD PTR _thisFormation$217339[ebp]
	call	?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z ; CvMultiUnitFormationInfo::getFormationSlotEntry
	mov	DWORD PTR _thisSlotEntry$217341[ebp], eax

; 486  : 					if(thisSlotEntry.m_ePositionType == ePosition)

	mov	ecx, DWORD PTR _thisSlotEntry$217341[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _ePosition$[ebp]
	jne	SHORT $LN4@GetUnitsOf

; 487  : 					{
; 488  : 						iRtnValue++;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN4@GetUnitsOf:

; 489  : 					}
; 490  : 				}
; 491  : 			}
; 492  : 		}
; 493  : 	}

	jmp	$LN6@GetUnitsOf
$LN5@GetUnitsOf:

; 494  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 495  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitsOfType@CvArmyAI@@QBEHW4MultiunitPositionTypes@@@Z ENDP ; CvArmyAI::GetUnitsOfType
_TEXT	ENDS
PUBLIC	??A?$FAutoVariable@V?$vector@HV?$allocator@H@std@@@std@@VCvUnit@@@@QBEABHI@Z ; FAutoVariable<std::vector<int,std::allocator<int> >,CvUnit>::operator[]
PUBLIC	?IsAllOceanGoing@CvArmyAI@@QAE_NXZ		; CvArmyAI::IsAllOceanGoing
EXTRN	?IsHasEmbarkAbility@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsHasEmbarkAbility
EXTRN	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::getDomainType
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$2
__ehfuncinfo$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?IsAllOceanGoing@CvArmyAI@@QAE_NXZ
_TEXT	SEGMENT
tv158 = -76						; size = 4
tv142 = -72						; size = 4
_this$ = -68						; size = 4
$T219921 = -64						; size = 4
$T219892 = -60						; size = 4
$T219879 = -56						; size = 4
$T219875 = -52						; size = 4
$T219859 = -48						; size = 4
$T219836 = -41						; size = 1
$T219835 = -40						; size = 8
$T219834 = -30						; size = 1
$T219833 = -29						; size = 1
$T219832 = -28						; size = 8
_pUnit$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
?IsAllOceanGoing@CvArmyAI@@QAE_NXZ PROC			; CvArmyAI::IsAllOceanGoing, COMDAT
; _this$ = ecx

; 499  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 500  : 	UnitHandle pUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 501  : 
; 502  : 	pUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T219832[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T219859[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T219859[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN15@IsAllOcean
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN13@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN13@IsAllOcean:
	mov	ecx, DWORD PTR $T219859[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN15@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN15@IsAllOcean:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219832[ebp], 0
	je	SHORT $LN26@IsAllOcean
	mov	ecx, DWORD PTR $T219832[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 503  : 	while(pUnit)

$LN26@IsAllOcean:
	xor	eax, eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsAllOcean

; 504  : 	{
; 505  : 		if(pUnit->getDomainType() != DOMAIN_SEA && !pUnit->IsHasEmbarkAbility())

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T219875[ebp], edx
	mov	ecx, DWORD PTR $T219875[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	test	eax, eax
	je	SHORT $LN2@IsAllOcean
	mov	eax, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T219879[ebp], eax
	mov	ecx, DWORD PTR $T219879[ebp]
	call	?IsHasEmbarkAbility@CvUnit@@QBE_NXZ	; CvUnit::IsHasEmbarkAbility
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@IsAllOcean

; 506  : 		{
; 507  : 			return false;

	mov	BYTE PTR $T219833[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN33@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN33@IsAllOcean:
	mov	al, BYTE PTR $T219833[ebp]
	jmp	$LN5@IsAllOcean
$LN2@IsAllOcean:

; 508  : 		}
; 509  : 
; 510  : 		// If can move over ocean, not a coastal vessel
; 511  : 		if(pUnit->isTerrainImpassable(TERRAIN_OCEAN))

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T219892[ebp], edx
	push	6
	mov	ecx, DWORD PTR $T219892[ebp]
	add	ecx, 1972				; 000007b4H
	call	??A?$FAutoVariable@V?$vector@HV?$allocator@H@std@@@std@@VCvUnit@@@@QBEABHI@Z ; FAutoVariable<std::vector<int,std::allocator<int> >,CvUnit>::operator[]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@IsAllOcean

; 512  : 		{
; 513  : 			return false;

	mov	BYTE PTR $T219834[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN42@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN42@IsAllOcean:
	mov	al, BYTE PTR $T219834[ebp]
	jmp	SHORT $LN5@IsAllOcean
$LN1@IsAllOcean:

; 514  : 		}
; 515  : 
; 516  : 		pUnit = GetNextUnit();

	lea	eax, DWORD PTR $T219835[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR tv158[ebp]
	mov	DWORD PTR $T219921[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T219921[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN49@IsAllOcean
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN47@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN47@IsAllOcean:
	mov	ecx, DWORD PTR $T219921[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN49@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN49@IsAllOcean:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219835[ebp], 0
	je	SHORT $LN56@IsAllOcean
	mov	ecx, DWORD PTR $T219835[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN56@IsAllOcean:

; 517  : 	}

	jmp	$LN26@IsAllOcean
$LN3@IsAllOcean:

; 518  : 
; 519  : 	return true;

	mov	BYTE PTR $T219836[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN61@IsAllOcean
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN61@IsAllOcean:
	mov	al, BYTE PTR $T219836[ebp]
$LN5@IsAllOcean:

; 520  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$1:
	lea	ecx, DWORD PTR $T219832[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ$2:
	lea	ecx, DWORD PTR $T219835[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsAllOceanGoing@CvArmyAI@@QAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsAllOceanGoing@CvArmyAI@@QAE_NXZ ENDP			; CvArmyAI::IsAllOceanGoing
PUBLIC	?GetTotalPower@CvArmyAI@@QAEHXZ			; CvArmyAI::GetTotalPower
EXTRN	?GetPower@CvUnit@@QBEHXZ:PROC			; CvUnit::GetPower
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetTotalPower@CvArmyAI@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTotalPower@CvArmyAI@@QAEHXZ$0
__ehfuncinfo$?GetTotalPower@CvArmyAI@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTotalPower@CvArmyAI@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetTotalPower@CvArmyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T219973 = -44						; size = 4
$T219966 = -40						; size = 4
$T219956 = -36						; size = 4
$T219952 = -32						; size = 4
_pThisUnit$217365 = -28					; size = 8
_iRtnValue$ = -20					; size = 4
_iUnitID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetTotalPower@CvArmyAI@@QAEHXZ PROC			; CvArmyAI::GetTotalPower, COMDAT
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTotalPower@CvArmyAI@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 527  : 	int iUnitID;
; 528  : 	iUnitID = GetFirstUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitID@CvArmyAI@@QAEHXZ	; CvArmyAI::GetFirstUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax
$LN3@GetTotalPo:

; 529  : 
; 530  : 	while(iUnitID != ARMY_NO_UNIT)

	cmp	DWORD PTR _iUnitID$[ebp], -1
	je	$LN2@GetTotalPo

; 531  : 	{
; 532  : 		UnitHandle pThisUnit = GET_PLAYER(GetOwner()).getUnit(iUnitID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T219952[ebp], ecx
	mov	edx, DWORD PTR $T219952[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T219956[ebp], edx
	mov	eax, DWORD PTR _iUnitID$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219956[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T219966[ebp], eax
	mov	ecx, DWORD PTR $T219966[ebp]
	mov	DWORD PTR _pThisUnit$217365[ebp], ecx
	mov	BYTE PTR _pThisUnit$217365[ebp+4], 0
	cmp	DWORD PTR _pThisUnit$217365[ebp], 0
	je	SHORT $LN12@GetTotalPo
	mov	ecx, DWORD PTR _pThisUnit$217365[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN12@GetTotalPo:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 533  : 		if(pThisUnit)

	xor	edx, edx
	cmp	DWORD PTR _pThisUnit$217365[ebp], 0
	setne	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@GetTotalPo

; 534  : 		{
; 535  : 			iRtnValue += pThisUnit->GetPower();

	mov	ecx, DWORD PTR _pThisUnit$217365[ebp]
	mov	DWORD PTR $T219973[ebp], ecx
	mov	ecx, DWORD PTR $T219973[ebp]
	call	?GetPower@CvUnit@@QBEHXZ		; CvUnit::GetPower
	add	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN1@GetTotalPo:

; 536  : 		}
; 537  : 		iUnitID = GetNextUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnitID@CvArmyAI@@QAEHXZ		; CvArmyAI::GetNextUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax

; 538  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pThisUnit$217365[ebp], 0
	je	SHORT $LN21@GetTotalPo
	mov	ecx, DWORD PTR _pThisUnit$217365[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN21@GetTotalPo:
	jmp	$LN3@GetTotalPo
$LN2@GetTotalPo:

; 539  : 
; 540  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 541  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTotalPower@CvArmyAI@@QAEHXZ$0:
	lea	ecx, DWORD PTR _pThisUnit$217365[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?GetTotalPower@CvArmyAI@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTotalPower@CvArmyAI@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTotalPower@CvArmyAI@@QAEHXZ ENDP			; CvArmyAI::GetTotalPower
; Function compile flags: /Odtp
;	COMDAT ?GetX@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetX@CvArmyAI@@QBEHXZ PROC				; CvArmyAI::GetX, COMDAT
; _this$ = ecx

; 547  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 548  : 	return m_iCurrentX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 549  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetX@CvArmyAI@@QBEHXZ ENDP				; CvArmyAI::GetX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetY@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetY@CvArmyAI@@QBEHXZ PROC				; CvArmyAI::GetY, COMDAT
; _this$ = ecx

; 553  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 554  : 	return m_iCurrentY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 555  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetY@CvArmyAI@@QBEHXZ ENDP				; CvArmyAI::GetY
_TEXT	ENDS
PUBLIC	?SetX@CvArmyAI@@QAEXH@Z				; CvArmyAI::SetX
; Function compile flags: /Odtp
;	COMDAT ?SetX@CvArmyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iX$ = 8						; size = 4
?SetX@CvArmyAI@@QAEXH@Z PROC				; CvArmyAI::SetX, COMDAT
; _this$ = ecx

; 559  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 	m_iCurrentX = iX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 561  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetX@CvArmyAI@@QAEXH@Z ENDP				; CvArmyAI::SetX
_TEXT	ENDS
PUBLIC	?SetY@CvArmyAI@@QAEXH@Z				; CvArmyAI::SetY
; Function compile flags: /Odtp
;	COMDAT ?SetY@CvArmyAI@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iY$ = 8						; size = 4
?SetY@CvArmyAI@@QAEXH@Z PROC				; CvArmyAI::SetY, COMDAT
; _this$ = ecx

; 565  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 	m_iCurrentY = iY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 567  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetY@CvArmyAI@@QAEXH@Z ENDP				; CvArmyAI::SetY
_TEXT	ENDS
PUBLIC	?SetXY@CvArmyAI@@QAEXHH@Z			; CvArmyAI::SetXY
; Function compile flags: /Odtp
;	COMDAT ?SetXY@CvArmyAI@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?SetXY@CvArmyAI@@QAEXHH@Z PROC				; CvArmyAI::SetXY, COMDAT
; _this$ = ecx

; 571  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 572  : 	m_iCurrentX = iX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 573  : 	m_iCurrentY = iY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iY$[ebp]
	mov	DWORD PTR [edx+20], eax

; 574  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetXY@CvArmyAI@@QAEXHH@Z ENDP				; CvArmyAI::SetXY
_TEXT	ENDS
PUBLIC	?Plot@CvArmyAI@@QBEPAVCvPlot@@XZ		; CvArmyAI::Plot
; Function compile flags: /Odtp
;	COMDAT ?Plot@CvArmyAI@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T220025 = -20						; size = 4
$T220024 = -16						; size = 4
$T220023 = -12						; size = 4
$T220010 = -8						; size = 4
$T220004 = -4						; size = 4
?Plot@CvArmyAI@@QBEPAVCvPlot@@XZ PROC			; CvArmyAI::Plot, COMDAT
; _this$ = ecx

; 578  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 579  : 	return GC.getMap().plotCheckInvalid(m_iCurrentX, m_iCurrentY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T220004[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T220024[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T220023[ebp], ecx
	cmp	DWORD PTR $T220023[ebp], -2147483647	; 80000001H
	je	SHORT $LN5@Plot
	cmp	DWORD PTR $T220024[ebp], -2147483647	; 80000001H
	jne	SHORT $LN6@Plot
$LN5@Plot:
	mov	DWORD PTR $T220025[ebp], 0
	jmp	SHORT $LN7@Plot
$LN6@Plot:
	mov	edx, DWORD PTR $T220004[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T220010[ebp], eax
	mov	ecx, DWORD PTR $T220024[ebp]
	imul	ecx, DWORD PTR $T220010[ebp]
	add	ecx, DWORD PTR $T220023[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T220004[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR $T220025[ebp], ecx
$LN7@Plot:
	mov	eax, DWORD PTR $T220025[ebp]

; 580  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Plot@CvArmyAI@@QBEPAVCvPlot@@XZ ENDP			; CvArmyAI::Plot
_TEXT	ENDS
PUBLIC	?GetArea@CvArmyAI@@QBEHXZ			; CvArmyAI::GetArea
; Function compile flags: /Odtp
;	COMDAT ?GetArea@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T220055 = -24						; size = 4
$T220051 = -20						; size = 4
$T220050 = -16						; size = 4
$T220037 = -12						; size = 4
$T220031 = -8						; size = 4
_pPlot$ = -4						; size = 4
?GetArea@CvArmyAI@@QBEHXZ PROC				; CvArmyAI::GetArea, COMDAT
; _this$ = ecx

; 584  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 585  : 	// try to find what plot we are in
; 586  : 	CvPlot* pPlot = GC.getMap().plotCheckInvalid(m_iCurrentX, m_iCurrentY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T220031[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T220051[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T220050[ebp], ecx
	cmp	DWORD PTR $T220050[ebp], -2147483647	; 80000001H
	je	SHORT $LN7@GetArea
	cmp	DWORD PTR $T220051[ebp], -2147483647	; 80000001H
	jne	SHORT $LN8@GetArea
$LN7@GetArea:
	mov	DWORD PTR _pPlot$[ebp], 0
	jmp	SHORT $LN9@GetArea
$LN8@GetArea:
	mov	edx, DWORD PTR $T220031[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T220037[ebp], eax
	mov	ecx, DWORD PTR $T220051[ebp]
	imul	ecx, DWORD PTR $T220037[ebp]
	add	ecx, DWORD PTR $T220050[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T220031[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR _pPlot$[ebp], ecx
$LN9@GetArea:

; 587  : 	if(pPlot != NULL)

	cmp	DWORD PTR _pPlot$[ebp], 0
	je	SHORT $LN2@GetArea

; 588  : 	{
; 589  : 		return pPlot->getArea();

	mov	eax, DWORD PTR _pPlot$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	DWORD PTR $T220055[ebp], ecx
	mov	eax, DWORD PTR $T220055[ebp]
	jmp	SHORT $LN3@GetArea

; 590  : 	}
; 591  : 	else

	jmp	SHORT $LN3@GetArea
$LN2@GetArea:

; 592  : 	{
; 593  : 		// since there is no plot return the invalid index
; 594  : 		return FFreeList::INVALID_INDEX;

	or	eax, -1
$LN3@GetArea:

; 595  : 	}
; 596  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetArea@CvArmyAI@@QBEHXZ ENDP				; CvArmyAI::GetArea
_TEXT	ENDS
PUBLIC	?GetDomainType@CvArmyAI@@QBE?AW4DomainTypes@@XZ	; CvArmyAI::GetDomainType
; Function compile flags: /Odtp
;	COMDAT ?GetDomainType@CvArmyAI@@QBE?AW4DomainTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomainType@CvArmyAI@@QBE?AW4DomainTypes@@XZ PROC	; CvArmyAI::GetDomainType, COMDAT
; _this$ = ecx

; 600  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 	return (DomainTypes) m_eDomainType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 602  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomainType@CvArmyAI@@QBE?AW4DomainTypes@@XZ ENDP	; CvArmyAI::GetDomainType
_TEXT	ENDS
PUBLIC	?SetDomainType@CvArmyAI@@QAEXW4DomainTypes@@@Z	; CvArmyAI::SetDomainType
; Function compile flags: /Odtp
;	COMDAT ?SetDomainType@CvArmyAI@@QAEXW4DomainTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_domainType$ = 8					; size = 4
?SetDomainType@CvArmyAI@@QAEXW4DomainTypes@@@Z PROC	; CvArmyAI::SetDomainType, COMDAT
; _this$ = ecx

; 606  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 	m_eDomainType = domainType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _domainType$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 608  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetDomainType@CvArmyAI@@QAEXW4DomainTypes@@@Z ENDP	; CvArmyAI::SetDomainType
_TEXT	ENDS
PUBLIC	?AreAllInWater@CvArmyAI@@QAE_NXZ		; CvArmyAI::AreAllInWater
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?AreAllInWater@CvArmyAI@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$2
__ehfuncinfo$?AreAllInWater@CvArmyAI@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?AreAllInWater@CvArmyAI@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?AreAllInWater@CvArmyAI@@QAE_NXZ
_TEXT	SEGMENT
tv147 = -72						; size = 4
tv131 = -68						; size = 4
_this$ = -64						; size = 4
$T220134 = -60						; size = 4
$T220108 = -56						; size = 4
$T220104 = -52						; size = 4
$T220088 = -48						; size = 4
$T220065 = -41						; size = 1
$T220064 = -40						; size = 8
$T220063 = -29						; size = 1
$T220062 = -28						; size = 8
_pUnit$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
?AreAllInWater@CvArmyAI@@QAE_NXZ PROC			; CvArmyAI::AreAllInWater, COMDAT
; _this$ = ecx

; 612  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AreAllInWater@CvArmyAI@@QAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 613  : 	UnitHandle pUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 614  : 
; 615  : 	pUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T220062[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR $T220088[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T220088[ebp]
	lea	eax, DWORD PTR _pUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN14@AreAllInWa
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN12@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN12@AreAllInWa:
	mov	ecx, DWORD PTR $T220088[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pUnit$[ebp], edx
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN14@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN14@AreAllInWa:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T220062[ebp], 0
	je	SHORT $LN25@AreAllInWa
	mov	ecx, DWORD PTR $T220062[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 616  : 	while(pUnit)

$LN25@AreAllInWa:
	xor	eax, eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@AreAllInWa

; 617  : 	{
; 618  : 		if(!pUnit->plot()->isWater())

	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR $T220104[ebp], edx
	mov	ecx, DWORD PTR $T220104[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T220108[ebp], eax
	mov	eax, DWORD PTR $T220108[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN1@AreAllInWa

; 619  : 		{
; 620  : 			return false;

	mov	BYTE PTR $T220063[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN32@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN32@AreAllInWa:
	mov	al, BYTE PTR $T220063[ebp]
	jmp	SHORT $LN4@AreAllInWa
$LN1@AreAllInWa:

; 621  : 		}
; 622  : 		pUnit = GetNextUnit();

	lea	ecx, DWORD PTR $T220064[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv147[ebp], eax
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T220134[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR $T220134[ebp]
	lea	ecx, DWORD PTR _pUnit$[ebp]
	cmp	eax, ecx
	je	SHORT $LN39@AreAllInWa
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN37@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN37@AreAllInWa:
	mov	edx, DWORD PTR $T220134[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pUnit$[ebp], eax
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN39@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN39@AreAllInWa:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T220064[ebp], 0
	je	SHORT $LN46@AreAllInWa
	mov	ecx, DWORD PTR $T220064[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN46@AreAllInWa:

; 623  : 	}

	jmp	$LN25@AreAllInWa
$LN2@AreAllInWa:

; 624  : 
; 625  : 	return true;

	mov	BYTE PTR $T220065[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN51@AreAllInWa
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN51@AreAllInWa:
	mov	al, BYTE PTR $T220065[ebp]
$LN4@AreAllInWa:

; 626  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$1:
	lea	ecx, DWORD PTR $T220062[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?AreAllInWater@CvArmyAI@@QAE_NXZ$2:
	lea	ecx, DWORD PTR $T220064[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?AreAllInWater@CvArmyAI@@QAE_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AreAllInWater@CvArmyAI@@QAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AreAllInWater@CvArmyAI@@QAE_NXZ ENDP			; CvArmyAI::AreAllInWater
PUBLIC	?GetGoalPlot@CvArmyAI@@QBEPAVCvPlot@@XZ		; CvArmyAI::GetGoalPlot
; Function compile flags: /Odtp
;	COMDAT ?GetGoalPlot@CvArmyAI@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T220185 = -20						; size = 4
$T220184 = -16						; size = 4
$T220183 = -12						; size = 4
$T220170 = -8						; size = 4
$T220164 = -4						; size = 4
?GetGoalPlot@CvArmyAI@@QBEPAVCvPlot@@XZ PROC		; CvArmyAI::GetGoalPlot, COMDAT
; _this$ = ecx

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 633  : 	return GC.getMap().plotCheckInvalid(m_iGoalX, m_iGoalY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T220164[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR $T220184[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T220183[ebp], ecx
	cmp	DWORD PTR $T220183[ebp], -2147483647	; 80000001H
	je	SHORT $LN5@GetGoalPlo
	cmp	DWORD PTR $T220184[ebp], -2147483647	; 80000001H
	jne	SHORT $LN6@GetGoalPlo
$LN5@GetGoalPlo:
	mov	DWORD PTR $T220185[ebp], 0
	jmp	SHORT $LN7@GetGoalPlo
$LN6@GetGoalPlo:
	mov	edx, DWORD PTR $T220164[ebp]
	mov	eax, DWORD PTR [edx+4020]
	mov	DWORD PTR $T220170[ebp], eax
	mov	ecx, DWORD PTR $T220184[ebp]
	imul	ecx, DWORD PTR $T220170[ebp]
	add	ecx, DWORD PTR $T220183[ebp]
	imul	ecx, 484				; 000001e4H
	mov	edx, DWORD PTR $T220164[ebp]
	add	ecx, DWORD PTR [edx+4068]
	mov	DWORD PTR $T220185[ebp], ecx
$LN7@GetGoalPlo:
	mov	eax, DWORD PTR $T220185[ebp]

; 634  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoalPlot@CvArmyAI@@QBEPAVCvPlot@@XZ ENDP		; CvArmyAI::GetGoalPlot
_TEXT	ENDS
PUBLIC	?SetGoalPlot@CvArmyAI@@QAEXPAVCvPlot@@@Z	; CvArmyAI::SetGoalPlot
; Function compile flags: /Odtp
;	COMDAT ?SetGoalPlot@CvArmyAI@@QAEXPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pGoalPlot$ = 8						; size = 4
?SetGoalPlot@CvArmyAI@@QAEXPAVCvPlot@@@Z PROC		; CvArmyAI::SetGoalPlot, COMDAT
; _this$ = ecx

; 638  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 639  : 	CvAssertMsg(pGoalPlot, "Setting army goal to a NULL plot - please show Ed and send save.");
; 640  : 
; 641  : 	if(pGoalPlot)

	cmp	DWORD PTR _pGoalPlot$[ebp], 0
	je	SHORT $LN2@SetGoalPlo

; 642  : 	{
; 643  : 		m_iGoalX = pGoalPlot->getX();

	mov	eax, DWORD PTR _pGoalPlot$[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 644  : 		m_iGoalY = pGoalPlot->getY();

	mov	eax, DWORD PTR _pGoalPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 645  : 	}
; 646  : 	else

	jmp	SHORT $LN3@SetGoalPlo
$LN2@SetGoalPlo:

; 647  : 	{
; 648  : 		m_iGoalX = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1

; 649  : 		m_iGoalY = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], -1
$LN3@SetGoalPlo:

; 650  : 	}
; 651  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetGoalPlot@CvArmyAI@@QAEXPAVCvPlot@@@Z ENDP		; CvArmyAI::SetGoalPlot
_TEXT	ENDS
PUBLIC	?GetGoalX@CvArmyAI@@QBEHXZ			; CvArmyAI::GetGoalX
; Function compile flags: /Odtp
;	COMDAT ?GetGoalX@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoalX@CvArmyAI@@QBEHXZ PROC				; CvArmyAI::GetGoalX, COMDAT
; _this$ = ecx

; 655  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 	return m_iGoalX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 657  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoalX@CvArmyAI@@QBEHXZ ENDP				; CvArmyAI::GetGoalX
_TEXT	ENDS
PUBLIC	?GetGoalY@CvArmyAI@@QBEHXZ			; CvArmyAI::GetGoalY
; Function compile flags: /Odtp
;	COMDAT ?GetGoalY@CvArmyAI@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoalY@CvArmyAI@@QBEHXZ PROC				; CvArmyAI::GetGoalY, COMDAT
; _this$ = ecx

; 661  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 	return m_iGoalY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 663  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoalY@CvArmyAI@@QBEHXZ ENDP				; CvArmyAI::GetGoalY
_TEXT	ENDS
PUBLIC	?SetGoalXY@CvArmyAI@@QAEXHH@Z			; CvArmyAI::SetGoalXY
; Function compile flags: /Odtp
;	COMDAT ?SetGoalXY@CvArmyAI@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?SetGoalXY@CvArmyAI@@QAEXHH@Z PROC			; CvArmyAI::SetGoalXY, COMDAT
; _this$ = ecx

; 667  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 668  : 	m_iGoalX = iX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 669  : 	m_iGoalY = iY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iY$[ebp]
	mov	DWORD PTR [edx+28], eax

; 670  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetGoalXY@CvArmyAI@@QAEXHH@Z ENDP			; CvArmyAI::SetGoalXY
_TEXT	ENDS
PUBLIC	?AddUnit@CvArmyAI@@QAEXHH@Z			; CvArmyAI::AddUnit
EXTRN	?removeFromArmy@CvPlayer@@QAE_NHH@Z:PROC	; CvPlayer::removeFromArmy
EXTRN	?getArmyID@CvUnit@@QBEHXZ:PROC			; CvUnit::getArmyID
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?AddUnit@CvArmyAI@@QAEXHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddUnit@CvArmyAI@@QAEXHH@Z$0
__ehfuncinfo$?AddUnit@CvArmyAI@@QAEXHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddUnit@CvArmyAI@@QAEXHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?AddUnit@CvArmyAI@@QAEXHH@Z
_TEXT	SEGMENT
tv176 = -124						; size = 4
tv175 = -120						; size = 4
tv205 = -116						; size = 4
tv220 = -112						; size = 4
_this$ = -108						; size = 4
$T220349 = -104						; size = 4
$T220339 = -100						; size = 4
$T220338 = -96						; size = 4
$T220293 = -92						; size = 4
$T220280 = -88						; size = 4
$T220276 = -84						; size = 4
$T220262 = -80						; size = 4
$T220258 = -73						; size = 1
$T220247 = -72						; size = 4
$T220243 = -65						; size = 1
_iMapY$220337 = -64					; size = 4
_iMapX$220336 = -60					; size = 4
$T220236 = -56						; size = 4
$T220232 = -52						; size = 4
$T220228 = -48						; size = 4
$T220221 = -44						; size = 4
$T220217 = -40						; size = 4
$T220202 = -36						; size = 4
_iTurnsToReachCheckpoint$217444 = -32			; size = 4
_pThisUnit$ = -28					; size = 8
_thisPlayer$ = -20					; size = 4
_pMusterPlot$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iUnitID$ = 8						; size = 4
_iSlotNum$ = 12						; size = 4
?AddUnit@CvArmyAI@@QAEXHH@Z PROC			; CvArmyAI::AddUnit, COMDAT
; _this$ = ecx

; 676  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddUnit@CvArmyAI@@QAEXHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 	CvAssertMsg(iUnitID != ARMY_NO_UNIT,"Expect unit to be non-NULL");
; 678  : 
; 679  : 	CvPlayer& thisPlayer = GET_PLAYER(m_eOwner);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _thisPlayer$[ebp], ecx

; 680  : 	UnitHandle pThisUnit = thisPlayer.getUnit(iUnitID);

	mov	edx, DWORD PTR _iUnitID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _thisPlayer$[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T220217[ebp], eax
	mov	eax, DWORD PTR $T220217[ebp]
	mov	DWORD PTR _pThisUnit$[ebp], eax
	mov	BYTE PTR _pThisUnit$[ebp+4], 0
	cmp	DWORD PTR _pThisUnit$[ebp], 0
	je	SHORT $LN10@AddUnit
	mov	ecx, DWORD PTR _pThisUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN10@AddUnit:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 681  : 
; 682  : 	// remove this unit from an army if it is already in one
; 683  : 	thisPlayer.removeFromArmy(pThisUnit->getArmyID(), GetID());

	mov	ecx, DWORD PTR _pThisUnit$[ebp]
	mov	DWORD PTR $T220221[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetID@CvArmyAI@@QAEHXZ			; CvArmyAI::GetID
	push	eax
	mov	ecx, DWORD PTR $T220221[ebp]
	call	?getArmyID@CvUnit@@QBEHXZ		; CvUnit::getArmyID
	push	eax
	mov	ecx, DWORD PTR _thisPlayer$[ebp]
	call	?removeFromArmy@CvPlayer@@QAE_NHH@Z	; CvPlayer::removeFromArmy

; 684  : 
; 685  : 	m_FormationEntries[iSlotNum].SetUnitID(iUnitID);

	mov	edx, DWORD PTR _iSlotNum$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	DWORD PTR $T220228[ebp], edx
	mov	ecx, DWORD PTR $T220228[ebp]
	mov	edx, DWORD PTR _iUnitID$[ebp]
	mov	DWORD PTR [ecx], edx

; 686  : 	pThisUnit->setArmyID(GetID());

	mov	eax, DWORD PTR _pThisUnit$[ebp]
	mov	DWORD PTR $T220232[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetID@CvArmyAI@@QAEHXZ			; CvArmyAI::GetID
	push	eax
	mov	ecx, DWORD PTR $T220232[ebp]
	call	?setArmyID@CvUnit@@QAEXH@Z		; CvUnit::setArmyID

; 687  : 
; 688  : 	// Finally, compute when we think this unit will arrive at the next checkpoint
; 689  : 	CvPlot* pMusterPlot = GC.getMap().plot(GetX(), GetY());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T220236[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetY@CvArmyAI@@QBEHXZ			; CvArmyAI::GetY
	mov	DWORD PTR $T220339[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetX@CvArmyAI@@QBEHXZ			; CvArmyAI::GetX
	mov	DWORD PTR $T220338[ebp], eax
	cmp	DWORD PTR $T220338[ebp], -2147483647	; 80000001H
	je	SHORT $LN24@AddUnit
	cmp	DWORD PTR $T220339[ebp], -2147483647	; 80000001H
	jne	SHORT $LN25@AddUnit
$LN24@AddUnit:
	mov	DWORD PTR _pMusterPlot$[ebp], 0
	jmp	$LN26@AddUnit
$LN25@AddUnit:
	mov	edx, DWORD PTR $T220236[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T220243[ebp], al
	mov	ecx, DWORD PTR $T220236[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T220247[ebp], edx
	movzx	eax, BYTE PTR $T220243[ebp]
	test	eax, eax
	je	SHORT $LN37@AddUnit
	cmp	DWORD PTR $T220338[ebp], 0
	jge	SHORT $LN36@AddUnit
	mov	eax, DWORD PTR $T220338[ebp]
	cdq
	idiv	DWORD PTR $T220247[ebp]
	add	edx, DWORD PTR $T220247[ebp]
	mov	DWORD PTR _iMapX$220336[ebp], edx
	jmp	SHORT $LN38@AddUnit
	jmp	SHORT $LN37@AddUnit
$LN36@AddUnit:
	mov	ecx, DWORD PTR $T220338[ebp]
	cmp	ecx, DWORD PTR $T220247[ebp]
	jl	SHORT $LN37@AddUnit
	mov	eax, DWORD PTR $T220338[ebp]
	cdq
	idiv	DWORD PTR $T220247[ebp]
	mov	DWORD PTR _iMapX$220336[ebp], edx
	jmp	SHORT $LN38@AddUnit
$LN37@AddUnit:
	mov	edx, DWORD PTR $T220338[ebp]
	mov	DWORD PTR _iMapX$220336[ebp], edx
$LN38@AddUnit:
	mov	eax, DWORD PTR $T220236[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T220258[ebp], cl
	mov	edx, DWORD PTR $T220236[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T220262[ebp], eax
	movzx	ecx, BYTE PTR $T220258[ebp]
	test	ecx, ecx
	je	SHORT $LN47@AddUnit
	cmp	DWORD PTR $T220339[ebp], 0
	jge	SHORT $LN46@AddUnit
	mov	eax, DWORD PTR $T220339[ebp]
	cdq
	idiv	DWORD PTR $T220262[ebp]
	add	edx, DWORD PTR $T220262[ebp]
	mov	DWORD PTR _iMapY$220337[ebp], edx
	jmp	SHORT $LN48@AddUnit
	jmp	SHORT $LN47@AddUnit
$LN46@AddUnit:
	mov	edx, DWORD PTR $T220339[ebp]
	cmp	edx, DWORD PTR $T220262[ebp]
	jl	SHORT $LN47@AddUnit
	mov	eax, DWORD PTR $T220339[ebp]
	cdq
	idiv	DWORD PTR $T220262[ebp]
	mov	DWORD PTR _iMapY$220337[ebp], edx
	jmp	SHORT $LN48@AddUnit
$LN47@AddUnit:
	mov	eax, DWORD PTR $T220339[ebp]
	mov	DWORD PTR _iMapY$220337[ebp], eax
$LN48@AddUnit:
	cmp	DWORD PTR _iMapX$220336[ebp], 0
	jl	SHORT $LN52@AddUnit
	mov	ecx, DWORD PTR $T220236[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T220276[ebp], edx
	mov	eax, DWORD PTR _iMapX$220336[ebp]
	cmp	eax, DWORD PTR $T220276[ebp]
	jge	SHORT $LN52@AddUnit
	cmp	DWORD PTR _iMapY$220337[ebp], 0
	jl	SHORT $LN52@AddUnit
	mov	ecx, DWORD PTR $T220236[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T220280[ebp], edx
	mov	eax, DWORD PTR _iMapY$220337[ebp]
	cmp	eax, DWORD PTR $T220280[ebp]
	jge	SHORT $LN52@AddUnit
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN50@AddUnit
$LN52@AddUnit:
	mov	DWORD PTR tv220[ebp], 0
$LN50@AddUnit:
	cmp	DWORD PTR tv220[ebp], 0
	je	SHORT $LN28@AddUnit
	mov	ecx, DWORD PTR $T220236[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T220293[ebp], edx
	mov	eax, DWORD PTR _iMapY$220337[ebp]
	imul	eax, DWORD PTR $T220293[ebp]
	add	eax, DWORD PTR _iMapX$220336[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T220236[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN29@AddUnit
$LN28@AddUnit:
	mov	DWORD PTR tv205[ebp], 0
$LN29@AddUnit:
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR _pMusterPlot$[ebp], edx
$LN26@AddUnit:

; 690  : 	if(pMusterPlot)

	cmp	DWORD PTR _pMusterPlot$[ebp], 0
	je	SHORT $LN2@AddUnit

; 691  : 	{
; 692  : 		int iTurnsToReachCheckpoint = TurnsToReachTarget(pThisUnit, pMusterPlot, true /*bReusePaths*/, true, true);

	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _pMusterPlot$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T220202[ebp], esp
	mov	DWORD PTR $T220349[ebp], ecx
	mov	edx, DWORD PTR $T220349[ebp]
	mov	eax, DWORD PTR _pThisUnit$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T220349[ebp]
	mov	dl, BYTE PTR _pThisUnit$[ebp+4]
	mov	BYTE PTR [ecx+4], dl
	mov	eax, DWORD PTR $T220349[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN63@AddUnit
	mov	ecx, DWORD PTR $T220349[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN63@AddUnit:
	mov	edx, DWORD PTR $T220349[ebp]
	mov	DWORD PTR tv175[ebp], edx
	call	?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z ; TurnsToReachTarget
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv176[ebp], eax
	mov	eax, DWORD PTR tv176[ebp]
	mov	DWORD PTR _iTurnsToReachCheckpoint$217444[ebp], eax

; 693  : 		if(iTurnsToReachCheckpoint < MAX_INT)

	cmp	DWORD PTR _iTurnsToReachCheckpoint$217444[ebp], 2147483647 ; 7fffffffH
	jge	SHORT $LN2@AddUnit

; 694  : 		{
; 695  : 			SetEstimatedTurn(iSlotNum, iTurnsToReachCheckpoint);

	mov	ecx, DWORD PTR _iTurnsToReachCheckpoint$217444[ebp]
	push	ecx
	mov	edx, DWORD PTR _iSlotNum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEstimatedTurn@CvArmyAI@@QAEXHH@Z	; CvArmyAI::SetEstimatedTurn
$LN2@AddUnit:

; 696  : 		}
; 697  : 	}
; 698  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pThisUnit$[ebp], 0
	je	SHORT $LN3@AddUnit
	mov	ecx, DWORD PTR _pThisUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN3@AddUnit:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddUnit@CvArmyAI@@QAEXHH@Z$0:
	lea	ecx, DWORD PTR _pThisUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?AddUnit@CvArmyAI@@QAEXHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddUnit@CvArmyAI@@QAEXHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddUnit@CvArmyAI@@QAEXHH@Z ENDP			; CvArmyAI::AddUnit
PUBLIC	?RemoveUnit@CvArmyAI@@QAE_NH@Z			; CvArmyAI::RemoveUnit
EXTRN	?getAIOperation@CvPlayer@@QAEPAVCvAIOperation@@H@Z:PROC ; CvPlayer::getAIOperation
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?RemoveUnit@CvArmyAI@@QAE_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveUnit@CvArmyAI@@QAE_NH@Z$0
__ehfuncinfo$?RemoveUnit@CvArmyAI@@QAE_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveUnit@CvArmyAI@@QAE_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?RemoveUnit@CvArmyAI@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T220419 = -72						; size = 4
$T220415 = -68						; size = 4
$T220411 = -64						; size = 4
$T220398 = -60						; size = 4
$T220388 = -56						; size = 4
$T220384 = -52						; size = 4
$T220374 = -48						; size = 4
_pThisOperation$217461 = -44				; size = 4
_pThisUnit$217459 = -40					; size = 8
_iI$217453 = -32					; size = 4
_slot$ = -28						; size = 12
_bWasOneOrMoreRemoved$ = -13				; size = 1
__$EHRec$ = -12						; size = 12
_iUnitToRemoveID$ = 8					; size = 4
?RemoveUnit@CvArmyAI@@QAE_NH@Z PROC			; CvArmyAI::RemoveUnit, COMDAT
; _this$ = ecx

; 702  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveUnit@CvArmyAI@@QAE_NH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 	bool bWasOneOrMoreRemoved = false;

	mov	BYTE PTR _bWasOneOrMoreRemoved$[ebp], 0

; 704  : 	CvArmyFormationSlot slot;

	mov	DWORD PTR _slot$[ebp], -1
	mov	DWORD PTR _slot$[ebp+4], -1
	mov	DWORD PTR _slot$[ebp+8], 0

; 705  : 
; 706  : 	for(int iI = 0; iI < (int)m_FormationEntries.size(); iI++)

	mov	DWORD PTR _iI$217453[ebp], 0
	jmp	SHORT $LN6@RemoveUnit
$LN5@RemoveUnit:
	mov	eax, DWORD PTR _iI$217453[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$217453[ebp], eax
$LN6@RemoveUnit:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T220374[ebp], edx
	mov	eax, DWORD PTR _iI$217453[ebp]
	cmp	eax, DWORD PTR $T220374[ebp]
	jge	$LN4@RemoveUnit

; 707  : 	{
; 708  : 		slot = m_FormationEntries[iI];

	mov	ecx, DWORD PTR _iI$217453[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _slot$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _slot$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _slot$[ebp+8], eax

; 709  : 		if(slot.GetUnitID() == iUnitToRemoveID)

	mov	ecx, DWORD PTR _slot$[ebp]
	cmp	ecx, DWORD PTR _iUnitToRemoveID$[ebp]
	jne	$LN3@RemoveUnit

; 710  : 		{
; 711  : 			UnitHandle pThisUnit = GET_PLAYER(GetOwner()).getUnit(iUnitToRemoveID);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T220384[ebp], eax
	mov	ecx, DWORD PTR $T220384[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220388[ebp], ecx
	mov	edx, DWORD PTR _iUnitToRemoveID$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T220388[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T220398[ebp], eax
	mov	eax, DWORD PTR $T220398[ebp]
	mov	DWORD PTR _pThisUnit$217459[ebp], eax
	mov	BYTE PTR _pThisUnit$217459[ebp+4], 0
	cmp	DWORD PTR _pThisUnit$217459[ebp], 0
	je	SHORT $LN23@RemoveUnit
	mov	ecx, DWORD PTR _pThisUnit$217459[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN23@RemoveUnit:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 712  : 			if(pThisUnit)

	xor	ecx, ecx
	cmp	DWORD PTR _pThisUnit$217459[ebp], 0
	setne	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@RemoveUnit

; 713  : 			{
; 714  : 				// Clears unit's army ID and erase from formation entries
; 715  : 				pThisUnit->setArmyID(FFreeList::INVALID_INDEX);

	push	-1
	mov	ecx, DWORD PTR _pThisUnit$217459[ebp]
	call	?setArmyID@CvUnit@@QAEXH@Z		; CvUnit::setArmyID

; 716  : 				m_FormationEntries[iI].SetUnitID(ARMY_NO_UNIT);

	mov	eax, DWORD PTR _iI$217453[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR $T220411[ebp], eax
	mov	edx, DWORD PTR $T220411[ebp]
	mov	DWORD PTR [edx], -1

; 717  : 				bWasOneOrMoreRemoved = true;

	mov	BYTE PTR _bWasOneOrMoreRemoved$[ebp], 1

; 718  : 
; 719  : 				// Tell the associate operation that a unit was lost
; 720  : 				CvAIOperation* pThisOperation = GET_PLAYER(GetOwner()).getAIOperation(m_iOperationID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220415[ebp], ecx
	mov	edx, DWORD PTR $T220415[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220419[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR $T220419[ebp]
	call	?getAIOperation@CvPlayer@@QAEPAVCvAIOperation@@H@Z ; CvPlayer::getAIOperation
	mov	DWORD PTR _pThisOperation$217461[ebp], eax

; 721  : 				if(pThisOperation)

	cmp	DWORD PTR _pThisOperation$217461[ebp], 0
	je	SHORT $LN2@RemoveUnit

; 722  : 				{
; 723  : 					pThisOperation->UnitWasRemoved(GetID(), iI);

	mov	edx, DWORD PTR _iI$217453[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetID@CvArmyAI@@QAEHXZ			; CvArmyAI::GetID
	push	eax
	mov	eax, DWORD PTR _pThisOperation$217461[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pThisOperation$217461[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
$LN2@RemoveUnit:

; 724  : 				}
; 725  : 			}
; 726  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pThisUnit$217459[ebp], 0
	je	SHORT $LN3@RemoveUnit
	mov	ecx, DWORD PTR _pThisUnit$217459[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN3@RemoveUnit:

; 727  : 	}

	jmp	$LN5@RemoveUnit
$LN4@RemoveUnit:

; 728  : 
; 729  : 	return bWasOneOrMoreRemoved;

	mov	al, BYTE PTR _bWasOneOrMoreRemoved$[ebp]

; 730  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveUnit@CvArmyAI@@QAE_NH@Z$0:
	lea	ecx, DWORD PTR _pThisUnit$217459[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?RemoveUnit@CvArmyAI@@QAE_NH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveUnit@CvArmyAI@@QAE_NH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveUnit@CvArmyAI@@QAE_NH@Z ENDP			; CvArmyAI::RemoveUnit
PUBLIC	?CanTacticalAIInterruptUnit@CvArmyAI@@QBE_NH@Z	; CvArmyAI::CanTacticalAIInterruptUnit
; Function compile flags: /Odtp
;	COMDAT ?CanTacticalAIInterruptUnit@CvArmyAI@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T220440 = -8						; size = 4
_op$217470 = -4						; size = 4
___formal$ = 8						; size = 4
?CanTacticalAIInterruptUnit@CvArmyAI@@QBE_NH@Z PROC	; CvArmyAI::CanTacticalAIInterruptUnit, COMDAT
; _this$ = ecx

; 734  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 	// If the operation is still assembling, by all means interrupt it
; 736  : 	if(m_eAIState == ARMYAISTATE_WAITING_FOR_UNITS_TO_REINFORCE ||
; 737  : 	        m_eAIState == ARMYAISTATE_WAITING_FOR_UNITS_TO_CATCH_UP)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN3@CanTactica
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jne	SHORT $LN4@CanTactica
$LN3@CanTactica:

; 738  : 	{
; 739  : 		return true;

	mov	al, 1
	jmp	SHORT $LN5@CanTactica
$LN4@CanTactica:

; 740  : 	}
; 741  : 
; 742  : 	if(m_eOwner >=0 && m_eOwner < MAX_PLAYERS)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jl	SHORT $LN2@CanTactica
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 64			; 00000040H
	jge	SHORT $LN2@CanTactica

; 743  : 	{
; 744  : 		CvAIOperation* op = GET_PLAYER(m_eOwner).getAIOperation(m_iOperationID);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220440[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR $T220440[ebp]
	call	?getAIOperation@CvPlayer@@QAEPAVCvAIOperation@@H@Z ; CvPlayer::getAIOperation
	mov	DWORD PTR _op$217470[ebp], eax

; 745  : 		if(op)

	cmp	DWORD PTR _op$217470[ebp], 0
	je	SHORT $LN2@CanTactica

; 746  : 		{
; 747  : 			return op->CanTacticalAIInterruptOperation();

	mov	edx, DWORD PTR _op$217470[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _op$217470[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	jmp	SHORT $LN5@CanTactica
$LN2@CanTactica:

; 748  : 		}
; 749  : 	}
; 750  : 	return false;

	xor	al, al
$LN5@CanTactica:

; 751  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CanTacticalAIInterruptUnit@CvArmyAI@@QBE_NH@Z ENDP	; CvArmyAI::CanTacticalAIInterruptUnit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetFirstUnitID@CvArmyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T220464 = -28						; size = 4
$T220463 = -24						; size = 4
$T220459 = -20						; size = 4
$T220458 = -16						; size = 4
$T220454 = -12						; size = 4
$T220450 = -8						; size = 4
$T220446 = -4						; size = 4
?GetFirstUnitID@CvArmyAI@@QAEHXZ PROC			; CvArmyAI::GetFirstUnitID, COMDAT
; _this$ = ecx

; 755  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 756  : 	m_CurUnitIter = m_FormationEntries.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T220446[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T220446[ebp]
	mov	DWORD PTR [edx+300], eax

; 757  : 
; 758  : 	if(m_CurUnitIter == m_FormationEntries.end())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T220450[ebp], ecx
	mov	edx, DWORD PTR $T220450[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR $T220450[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+300], eax
	jne	SHORT $LN3@GetFirstUn

; 759  : 	{
; 760  : 		return ARMY_NO_UNIT;

	or	eax, -1
	jmp	SHORT $LN6@GetFirstUn

; 761  : 	}
; 762  : 	else

	jmp	SHORT $LN6@GetFirstUn
$LN3@GetFirstUn:

; 763  : 	{
; 764  : 		// First entry could not be filled yet
; 765  : 		while(m_CurUnitIter != m_FormationEntries.end())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T220454[ebp], eax
	mov	ecx, DWORD PTR $T220454[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR $T220454[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], edx
	je	SHORT $LN2@GetFirstUn

; 766  : 		{
; 767  : 			if(m_CurUnitIter->GetUnitID() != ARMY_NO_UNIT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	mov	DWORD PTR $T220458[ebp], eax
	mov	ecx, DWORD PTR $T220458[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220459[ebp], edx
	cmp	DWORD PTR $T220459[ebp], -1
	je	SHORT $LN1@GetFirstUn

; 768  : 			{
; 769  : 				return m_CurUnitIter->GetUnitID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR $T220463[ebp], ecx
	mov	edx, DWORD PTR $T220463[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T220464[ebp], eax
	mov	eax, DWORD PTR $T220464[ebp]
	jmp	SHORT $LN6@GetFirstUn
$LN1@GetFirstUn:

; 770  : 			}
; 771  : 			++m_CurUnitIter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+300]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], edx

; 772  : 		}

	jmp	SHORT $LN3@GetFirstUn
$LN2@GetFirstUn:

; 773  : 
; 774  : 		return ARMY_NO_UNIT;

	or	eax, -1
$LN6@GetFirstUn:

; 775  : 	}
; 776  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstUnitID@CvArmyAI@@QAEHXZ ENDP			; CvArmyAI::GetFirstUnitID
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetNextUnitID@CvArmyAI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T220484 = -24						; size = 4
$T220483 = -20						; size = 4
$T220479 = -16						; size = 4
$T220478 = -12						; size = 4
$T220474 = -8						; size = 4
$T220470 = -4						; size = 4
?GetNextUnitID@CvArmyAI@@QAEHXZ PROC			; CvArmyAI::GetNextUnitID, COMDAT
; _this$ = ecx

; 780  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 781  : 	if(m_CurUnitIter != m_FormationEntries.end())

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T220470[ebp], eax
	mov	ecx, DWORD PTR $T220470[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR $T220470[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+300], edx
	je	$LN4@GetNextUni

; 782  : 	{
; 783  : 		++m_CurUnitIter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax
$LN3@GetNextUni:

; 784  : 
; 785  : 		while(m_CurUnitIter != m_FormationEntries.end())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR $T220474[ebp], edx
	mov	eax, DWORD PTR $T220474[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR $T220474[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+300], ecx
	je	SHORT $LN2@GetNextUni

; 786  : 		{
; 787  : 			if(m_CurUnitIter->GetUnitID() != ARMY_NO_UNIT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	DWORD PTR $T220478[ebp], edx
	mov	eax, DWORD PTR $T220478[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220479[ebp], ecx
	cmp	DWORD PTR $T220479[ebp], -1
	je	SHORT $LN1@GetNextUni

; 788  : 			{
; 789  : 				return m_CurUnitIter->GetUnitID();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+300]
	mov	DWORD PTR $T220483[ebp], eax
	mov	ecx, DWORD PTR $T220483[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T220484[ebp], edx
	mov	eax, DWORD PTR $T220484[ebp]
	jmp	SHORT $LN5@GetNextUni
$LN1@GetNextUni:

; 790  : 			}
; 791  : 			++m_CurUnitIter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], ecx

; 792  : 		}

	jmp	SHORT $LN3@GetNextUni
$LN2@GetNextUni:

; 793  : 
; 794  : 		return ARMY_NO_UNIT;

	or	eax, -1
	jmp	SHORT $LN5@GetNextUni
$LN4@GetNextUni:

; 795  : 	}
; 796  : 	return ARMY_NO_UNIT;

	or	eax, -1
$LN5@GetNextUni:

; 797  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextUnitID@CvArmyAI@@QAEHXZ ENDP			; CvArmyAI::GetNextUnitID
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$1
__ehfuncinfo$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T220526 = -48						; size = 4
$T220509 = -44						; size = 4
$T220499 = -40						; size = 4
$T220491 = -36						; size = 4
$T220487 = -32						; size = 8
_pRtnValue$ = -24					; size = 8
_iUnitID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ PROC ; CvArmyAI::GetFirstUnit, COMDAT
; _this$ = ecx

; 801  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220491[ebp], 0

; 802  : 	UnitHandle pRtnValue;

	mov	DWORD PTR _pRtnValue$[ebp], 0
	mov	BYTE PTR _pRtnValue$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 803  : 
; 804  : 	int iUnitID = GetFirstUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnitID@CvArmyAI@@QAEHXZ	; CvArmyAI::GetFirstUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax

; 805  : 	if(iUnitID != ARMY_NO_UNIT)

	cmp	DWORD PTR _iUnitID$[ebp], -1
	je	$LN1@GetFirstUn@2

; 806  : 	{
; 807  : 		pRtnValue = UnitHandle(GET_PLAYER(m_eOwner).getUnit(iUnitID));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220499[ebp], ecx
	mov	edx, DWORD PTR _iUnitID$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T220499[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T220509[ebp], eax
	mov	eax, DWORD PTR $T220509[ebp]
	mov	DWORD PTR $T220487[ebp], eax
	mov	BYTE PTR $T220487[ebp+4], 0
	cmp	DWORD PTR $T220487[ebp], 0
	je	SHORT $LN13@GetFirstUn@2
	mov	ecx, DWORD PTR $T220487[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN13@GetFirstUn@2:
	lea	ecx, DWORD PTR $T220487[ebp]
	mov	DWORD PTR $T220526[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T220526[ebp]
	lea	eax, DWORD PTR _pRtnValue$[ebp]
	cmp	edx, eax
	je	SHORT $LN20@GetFirstUn@2
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN18@GetFirstUn@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN18@GetFirstUn@2:
	mov	ecx, DWORD PTR $T220526[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pRtnValue$[ebp], edx
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN20@GetFirstUn@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN20@GetFirstUn@2:
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T220487[ebp], 0
	je	SHORT $LN1@GetFirstUn@2
	mov	ecx, DWORD PTR $T220487[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN1@GetFirstUn@2:

; 808  : 
; 809  : 		FAssertMsg(pRtnValue, "Bogus unit in army - tell Ed");
; 810  : 	}
; 811  : 
; 812  : 	return pRtnValue;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR _pRtnValue$[ebp+4]
	mov	BYTE PTR [edx+4], al
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN32@GetFirstUn@2
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN32@GetFirstUn@2:
	mov	eax, DWORD PTR $T220491[ebp]
	or	eax, 1
	mov	DWORD PTR $T220491[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN37@GetFirstUn@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN37@GetFirstUn@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 813  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$0:
	lea	ecx, DWORD PTR _pRtnValue$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$1:
	lea	ecx, DWORD PTR $T220487[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$2:
	mov	eax, DWORD PTR $T220491[ebp]
	and	eax, 1
	je	$LN7@GetFirstUn@2
	and	DWORD PTR $T220491[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
$LN7@GetFirstUn@2:
	ret	0
__ehhandler$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ENDP ; CvArmyAI::GetFirstUnit
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$1
__ehfuncinfo$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T220601 = -48						; size = 4
$T220584 = -44						; size = 4
$T220574 = -40						; size = 4
$T220566 = -36						; size = 4
$T220562 = -32						; size = 8
_pRtnValue$ = -24					; size = 8
_iUnitID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ PROC ; CvArmyAI::GetNextUnit, COMDAT
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220566[ebp], 0

; 818  : 	UnitHandle pRtnValue;

	mov	DWORD PTR _pRtnValue$[ebp], 0
	mov	BYTE PTR _pRtnValue$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 819  : 
; 820  : 	int iUnitID = GetNextUnitID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnitID@CvArmyAI@@QAEHXZ		; CvArmyAI::GetNextUnitID
	mov	DWORD PTR _iUnitID$[ebp], eax

; 821  : 	if(iUnitID != ARMY_NO_UNIT)

	cmp	DWORD PTR _iUnitID$[ebp], -1
	je	$LN1@GetNextUni@2

; 822  : 	{
; 823  : 		pRtnValue = UnitHandle(GET_PLAYER(m_eOwner).getUnit(iUnitID));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR $T220574[ebp], ecx
	mov	edx, DWORD PTR _iUnitID$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T220574[ebp]
	call	?getUnit@CvPlayer@@QAEPAVCvUnit@@H@Z	; CvPlayer::getUnit
	mov	DWORD PTR $T220584[ebp], eax
	mov	eax, DWORD PTR $T220584[ebp]
	mov	DWORD PTR $T220562[ebp], eax
	mov	BYTE PTR $T220562[ebp+4], 0
	cmp	DWORD PTR $T220562[ebp], 0
	je	SHORT $LN13@GetNextUni@2
	mov	ecx, DWORD PTR $T220562[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN13@GetNextUni@2:
	lea	ecx, DWORD PTR $T220562[ebp]
	mov	DWORD PTR $T220601[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T220601[ebp]
	lea	eax, DWORD PTR _pRtnValue$[ebp]
	cmp	edx, eax
	je	SHORT $LN20@GetNextUni@2
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN18@GetNextUni@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN18@GetNextUni@2:
	mov	ecx, DWORD PTR $T220601[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pRtnValue$[ebp], edx
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN20@GetNextUni@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN20@GetNextUni@2:
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T220562[ebp], 0
	je	SHORT $LN1@GetNextUni@2
	mov	ecx, DWORD PTR $T220562[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN1@GetNextUni@2:

; 824  : 
; 825  : 		FAssertMsg(pRtnValue, "Bogus unit in army - tell Ed");
; 826  : 	}
; 827  : 
; 828  : 	return pRtnValue;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR _pRtnValue$[ebp+4]
	mov	BYTE PTR [edx+4], al
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN32@GetNextUni@2
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN32@GetNextUni@2:
	mov	eax, DWORD PTR $T220566[ebp]
	or	eax, 1
	mov	DWORD PTR $T220566[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pRtnValue$[ebp], 0
	je	SHORT $LN37@GetNextUni@2
	mov	ecx, DWORD PTR _pRtnValue$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN37@GetNextUni@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 829  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$0:
	lea	ecx, DWORD PTR _pRtnValue$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$1:
	lea	ecx, DWORD PTR $T220562[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ$2:
	mov	eax, DWORD PTR $T220566[ebp]
	and	eax, 1
	je	$LN7@GetNextUni@2
	and	DWORD PTR $T220566[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
$LN7@GetNextUni@2:
	ret	0
__ehhandler$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ENDP ; CvArmyAI::GetNextUnit
PUBLIC	?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z ; CvArmyAI::GetFirstUnitInDomain
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__ehfuncinfo$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvarmyai.cpp
xdata$x	ENDS
;	COMDAT ?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z
_TEXT	SEGMENT
tv178 = -84						; size = 4
tv160 = -80						; size = 4
_this$ = -76						; size = 4
$T220740 = -72						; size = 4
$T220696 = -68						; size = 4
$T220692 = -64						; size = 4
$T220688 = -60						; size = 4
$T220684 = -56						; size = 4
$T220668 = -52						; size = 4
$T220643 = -48						; size = 4
$T220638 = -44						; size = 8
$T220637 = -36						; size = 8
_pUnit$ = -28						; size = 8
_pCurrentUnit$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_eDomain$ = 12						; size = 4
?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z PROC ; CvArmyAI::GetFirstUnitInDomain, COMDAT
; _this$ = ecx

; 833  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T220643[ebp], 0

; 834  : 	UnitHandle pUnit, pCurrentUnit;

	mov	DWORD PTR _pUnit$[ebp], 0
	mov	BYTE PTR _pUnit$[ebp+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR _pCurrentUnit$[ebp], 0
	mov	BYTE PTR _pCurrentUnit$[ebp+4], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 835  : 
; 836  : 	pCurrentUnit = GetFirstUnit();

	lea	eax, DWORD PTR $T220637[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetFirstUnit
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T220668[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T220668[ebp]
	lea	eax, DWORD PTR _pCurrentUnit$[ebp]
	cmp	edx, eax
	je	SHORT $LN21@GetFirstUn@3
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN19@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN19@GetFirstUn@3:
	mov	ecx, DWORD PTR $T220668[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pCurrentUnit$[ebp], edx
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN21@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN21@GetFirstUn@3:
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T220637[ebp], 0
	je	SHORT $LN32@GetFirstUn@3
	mov	ecx, DWORD PTR $T220637[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 837  : 	while(pCurrentUnit)

$LN32@GetFirstUn@3:
	xor	eax, eax
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	setne	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@GetFirstUn@3

; 838  : 	{
; 839  : 		if(pCurrentUnit->plot()->isWater() && eDomain == DOMAIN_SEA || !pCurrentUnit->plot()->isWater() && eDomain == DOMAIN_LAND)

	mov	edx, DWORD PTR _pCurrentUnit$[ebp]
	mov	DWORD PTR $T220684[ebp], edx
	mov	ecx, DWORD PTR $T220684[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T220688[ebp], eax
	mov	eax, DWORD PTR $T220688[ebp]
	movsx	ecx, BYTE PTR [eax+5]
	xor	edx, edx
	cmp	ecx, 3
	sete	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@GetFirstUn@3
	cmp	DWORD PTR _eDomain$[ebp], 0
	je	SHORT $LN2@GetFirstUn@3
$LN1@GetFirstUn@3:
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	mov	DWORD PTR $T220692[ebp], ecx
	mov	ecx, DWORD PTR $T220692[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR $T220696[ebp], eax
	mov	edx, DWORD PTR $T220696[ebp]
	movsx	eax, BYTE PTR [edx+5]
	xor	ecx, ecx
	cmp	eax, 3
	sete	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN3@GetFirstUn@3
	cmp	DWORD PTR _eDomain$[ebp], 2
	jne	SHORT $LN3@GetFirstUn@3
$LN2@GetFirstUn@3:

; 840  : 		{
; 841  : 			return pCurrentUnit;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR _pCurrentUnit$[ebp+4]
	mov	BYTE PTR [edx+4], al
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN43@GetFirstUn@3
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN43@GetFirstUn@3:
	mov	eax, DWORD PTR $T220643[ebp]
	or	eax, 1
	mov	DWORD PTR $T220643[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN48@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN48@GetFirstUn@3:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN53@GetFirstUn@3
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN53@GetFirstUn@3:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN6@GetFirstUn@3
$LN3@GetFirstUn@3:

; 842  : 		}
; 843  : 		pCurrentUnit = GetNextUnit();

	lea	ecx, DWORD PTR $T220638[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextUnit@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvArmyAI::GetNextUnit
	mov	DWORD PTR tv178[ebp], eax
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR $T220740[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T220740[ebp]
	lea	ecx, DWORD PTR _pCurrentUnit$[ebp]
	cmp	eax, ecx
	je	SHORT $LN60@GetFirstUn@3
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN58@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN58@GetFirstUn@3:
	mov	edx, DWORD PTR $T220740[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pCurrentUnit$[ebp], eax
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN60@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN60@GetFirstUn@3:
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T220638[ebp], 0
	je	SHORT $LN67@GetFirstUn@3
	mov	ecx, DWORD PTR $T220638[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN67@GetFirstUn@3:

; 844  : 	}

	jmp	$LN32@GetFirstUn@3
$LN4@GetFirstUn@3:

; 845  : 
; 846  : 	return pUnit;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR _pUnit$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR _pUnit$[ebp+4]
	mov	BYTE PTR [eax+4], cl
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN72@GetFirstUn@3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN72@GetFirstUn@3:
	mov	ecx, DWORD PTR $T220643[ebp]
	or	ecx, 1
	mov	DWORD PTR $T220643[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR _pCurrentUnit$[ebp], 0
	je	SHORT $LN77@GetFirstUn@3
	mov	ecx, DWORD PTR _pCurrentUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN77@GetFirstUn@3:
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR _pUnit$[ebp], 0
	je	SHORT $LN82@GetFirstUn@3
	mov	ecx, DWORD PTR _pUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN82@GetFirstUn@3:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@GetFirstUn@3:

; 847  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$0:
	lea	ecx, DWORD PTR _pUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$1:
	lea	ecx, DWORD PTR _pCurrentUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$2:
	lea	ecx, DWORD PTR $T220637[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$3:
	mov	eax, DWORD PTR $T220643[ebp]
	and	eax, 1
	je	$LN12@GetFirstUn@3
	and	DWORD PTR $T220643[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
$LN12@GetFirstUn@3:
	ret	0
__unwindfunclet$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z$4:
	lea	ecx, DWORD PTR $T220638[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFirstUnitInDomain@CvArmyAI@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4DomainTypes@@@Z ENDP ; CvArmyAI::GetFirstUnitInDomain
PUBLIC	?DoDelayedDeath@CvArmyAI@@QAE_NXZ		; CvArmyAI::DoDelayedDeath
PUBLIC	?DoTurn@CvArmyAI@@QAEXXZ			; CvArmyAI::DoTurn
; Function compile flags: /Odtp
;	COMDAT ?DoTurn@CvArmyAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoTurn@CvArmyAI@@QAEXXZ PROC				; CvArmyAI::DoTurn, COMDAT
; _this$ = ecx

; 853  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 854  : 	// do something with the army
; 855  : 	DoDelayedDeath();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoDelayedDeath@CvArmyAI@@QAE_NXZ	; CvArmyAI::DoDelayedDeath

; 856  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoTurn@CvArmyAI@@QAEXXZ ENDP				; CvArmyAI::DoTurn
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?DoDelayedDeath@CvArmyAI@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoDelayedDeath@CvArmyAI@@QAE_NXZ PROC			; CvArmyAI::DoDelayedDeath, COMDAT
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 861  : 	if(GetNumSlotsFilled() == 0 && m_eAIState != ARMYAISTATE_WAITING_FOR_UNITS_TO_REINFORCE)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumSlotsFilled@CvArmyAI@@QBEHXZ	; CvArmyAI::GetNumSlotsFilled
	test	eax, eax
	jne	SHORT $LN1@DoDelayedD
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN1@DoDelayedD

; 862  : 	{
; 863  : 		Kill();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Kill@CvArmyAI@@QAEXXZ			; CvArmyAI::Kill

; 864  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@DoDelayedD
$LN1@DoDelayedD:

; 865  : 	}
; 866  : 
; 867  : 	return false;

	xor	al, al
$LN2@DoDelayedD:

; 868  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoDelayedDeath@CvArmyAI@@QAE_NXZ ENDP			; CvArmyAI::DoDelayedDeath
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvArmyAI@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvArmyAI@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvArmyAI@@@Z PROC		; operator<<, COMDAT

; 871  : {

	push	ebp
	mov	ebp, esp

; 872  : 	readFrom.write(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 873  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 874  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvArmyAI@@@Z ENDP		; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvArmyAI@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvArmyAI@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvArmyAI@@@Z PROC		; operator>>, COMDAT

; 877  : {

	push	ebp
	mov	ebp, esp

; 878  : 	writeTo.read(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 879  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 880  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvArmyAI@@@Z ENDP		; operator>>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvArmyFormationSlot@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvArmyFormationSlot@@@Z PROC ; operator<<, COMDAT

; 883  : {

	push	ebp
	mov	ebp, esp

; 884  : 	saveTo << readFrom.m_iUnitID;

	mov	eax, DWORD PTR _readFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 885  : 	saveTo << readFrom.m_iEstimatedTurnAtCheckpoint;

	mov	ecx, DWORD PTR _readFrom$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 886  : 	saveTo << readFrom.m_bStartedOnOperation;

	mov	edx, DWORD PTR _readFrom$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 887  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 888  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvArmyFormationSlot@@@Z ENDP ; operator<<
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvArmyFormationSlot@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvArmyFormationSlot@@@Z PROC ; operator>>, COMDAT

; 891  : {

	push	ebp
	mov	ebp, esp

; 892  : 	loadFrom >> writeTo.m_iUnitID;

	mov	eax, DWORD PTR _writeTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 893  : 	loadFrom >> writeTo.m_iEstimatedTurnAtCheckpoint;

	mov	ecx, DWORD PTR _writeTo$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 894  : 	loadFrom >> writeTo.m_bStartedOnOperation;

	mov	edx, DWORD PTR _writeTo$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 895  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 896  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvArmyFormationSlot@@@Z ENDP ; operator>>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
_TEXT	ENDS
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if(m_target) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN2@FObjectHan:

; 150  : 		}
; 151  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ ; BaseVector<CvArmyFormationSlot,1>::~BaseVector<CvArmyFormationSlot,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T220830 = -20						; size = 4
_pRet$220826 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::FStaticVector<CvArmyFormationSlot,20,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 20			; 00000014H

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220830[ebp], edx
	cmp	DWORD PTR $T220830[ebp], 20		; 00000014H
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T220830[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$220826[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T220830[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$220826[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 20			; 00000014H
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$220826[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ ; BaseVector<CvArmyFormationSlot,1>::~BaseVector<CvArmyFormationSlot,1>
__ehhandler$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::FStaticVector<CvArmyFormationSlot,20,1,297,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T220861 = -24						; size = 4
$T220860 = -20						; size = 4
_i$220855 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220861[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T220860[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$220855[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$220855[ebp]
	add	eax, 1
	mov	DWORD PTR _i$220855[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$220855[ebp]
	cmp	ecx, DWORD PTR $T220861[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T220860[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T220860[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ ; BaseVector<CvArmyFormationSlot,1>::~BaseVector<CvArmyFormationSlot,1>
__ehhandler$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::~FStaticVector<CvArmyFormationSlot,20,1,297,0>
PUBLIC	?GrowSize@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z
_TEXT	SEGMENT
tv141 = -52						; size = 4
tv132 = -48						; size = 4
_this$ = -44						; size = 4
$T220873 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z PROC ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+252], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN35@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN35@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T220873[ebp], ecx
	je	SHORT $LN4@push_back
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR $T220873[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T220873[ebp]
	mov	DWORD PTR tv132[ebp], ecx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv132[ebp], 0
$LN5@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv141[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv141[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@QAEIABVCvArmyFormationSlot@@@Z ENDP ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::push_back
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
;	COMDAT ?GrowSize@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv179 = -44						; size = 4
_this$ = -40						; size = 4
$T220951 = -36						; size = 4
$T220950 = -32						; size = 4
_i$220945 = -28						; size = 4
$T220926 = -24						; size = 4
_pRet$220922 = -20					; size = 4
$T220917 = -16						; size = 4
_i$217604 = -12						; size = 4
_uiNewSize$217596 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$217596[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$217596[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$217596[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220926[ebp], ecx
	cmp	DWORD PTR $T220926[ebp], 20		; 00000014H
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T220926[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$220922[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T220926[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN16@GrowSize
$LN15@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$220922[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 20			; 00000014H
$LN16@GrowSize:
	mov	ecx, DWORD PTR _pRet$220922[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$217604[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$217604[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217604[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$217604[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$217604[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR $T220917[ebp], edx
	je	SHORT $LN12@GrowSize
	mov	eax, DWORD PTR _i$217604[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR $T220917[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T220917[ebp]
	mov	DWORD PTR tv179[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv179[ebp], 0
$LN13@GrowSize:
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220951[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220950[ebp], ecx
	xor	edx, edx
	je	SHORT $LN21@GrowSize
	xor	eax, eax
	je	SHORT $LN21@GrowSize
	mov	DWORD PTR _i$220945[ebp], 0
	jmp	SHORT $LN26@GrowSize
$LN25@GrowSize:
	mov	ecx, DWORD PTR _i$220945[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$220945[ebp], ecx
$LN26@GrowSize:
	mov	edx, DWORD PTR _i$220945[ebp]
	cmp	edx, DWORD PTR $T220951[ebp]
	jae	SHORT $LN21@GrowSize
	jmp	SHORT $LN25@GrowSize
$LN21@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	cmp	DWORD PTR $T220950[ebp], eax
	je	SHORT $LN22@GrowSize
	mov	ecx, DWORD PTR $T220950[ebp]
	push	ecx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN22@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [edx], eax

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+252], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@VCvArmyFormationSlot@@$0BE@$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvArmyFormationSlot,20,1,297,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ PROC	; BaseVector<CvArmyFormationSlot,1>::~BaseVector<CvArmyFormationSlot,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@VCvArmyFormationSlot@@$00@@QAE@XZ ENDP	; BaseVector<CvArmyFormationSlot,1>::~BaseVector<CvArmyFormationSlot,1>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	DWORD PTR _p$[ebp], 0
	jl	SHORT $LN1@teamType
	cmp	DWORD PTR _p$[ebp], 64			; 00000040H
	jge	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	eax, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN2@teamType
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1
$LN2@teamType:

; 302  : }

	pop	ebp
	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
_TEXT	ENDS
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp

; 88   : 	if(bWrap)

	movzx	eax, BYTE PTR _bWrap$[ebp]
	test	eax, eax
	je	SHORT $LN4@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)

	cmp	DWORD PTR _iCoord$[ebp], 0
	jge	SHORT $LN3@coordRange

; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	add	edx, DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
	jmp	SHORT $LN4@coordRange
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	mov	ecx, DWORD PTR _iCoord$[ebp]
	cmp	ecx, DWORD PTR _iRange$[ebp]
	jl	SHORT $LN4@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	mov	eax, DWORD PTR _iCoord$[ebp]
	cdq
	idiv	DWORD PTR _iRange$[ebp]
	mov	eax, edx
	jmp	SHORT $LN5@coordRange
$LN4@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;

	mov	eax, DWORD PTR _iCoord$[ebp]
$LN5@coordRange:

; 101  : }

	pop	ebp
	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
_this$ = -12						; size = 4
$T220973 = -8						; size = 4
$T220969 = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	cmp	DWORD PTR _iX$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T220969[ebp], ecx
	mov	edx, DWORD PTR _iX$[ebp]
	cmp	edx, DWORD PTR $T220969[ebp]
	jge	SHORT $LN3@isPlot
	cmp	DWORD PTR _iY$[ebp], 0
	jl	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T220973[ebp], ecx
	mov	edx, DWORD PTR _iY$[ebp]
	cmp	edx, DWORD PTR $T220973[ebp]
	jge	SHORT $LN3@isPlot
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@isPlot
$LN3@isPlot:
	mov	DWORD PTR tv72[ebp], 0
$LN4@isPlot:
	mov	eax, DWORD PTR tv72[ebp]

; 161  : #endif
; 162  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fautovector.h
_TEXT	ENDS
;	COMDAT ??A?$FAutoVariable@V?$vector@HV?$allocator@H@std@@@std@@VCvUnit@@@@QBEABHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$FAutoVariable@V?$vector@HV?$allocator@H@std@@@std@@VCvUnit@@@@QBEABHI@Z PROC ; FAutoVariable<std::vector<int,std::allocator<int> >,CvUnit>::operator[], COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	return m_value[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 330  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$FAutoVariable@V?$vector@HV?$allocator@H@std@@@std@@VCvUnit@@@@QBEABHI@Z ENDP ; FAutoVariable<std::vector<int,std::allocator<int> >,CvUnit>::operator[]
_TEXT	ENDS
END
