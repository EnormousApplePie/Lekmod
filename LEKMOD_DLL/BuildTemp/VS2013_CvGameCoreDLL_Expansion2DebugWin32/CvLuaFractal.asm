; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\Lua\CvLuaFractal.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?HasFlag@@YA_NPAUlua_State@@HPBD@Z		; HasFlag
EXTRN	_lua_type:PROC
EXTRN	_lua_getfield:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluafractal.cpp
;	COMDAT ?HasFlag@@YA_NPAUlua_State@@HPBD@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_flag$ = 16						; size = 4
?HasFlag@@YA_NPAUlua_State@@HPBD@Z PROC			; HasFlag, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp

; 32   : 	lua_getfield(L, idx, flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 33   : 	return !lua_isnil(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax

; 34   : }

	pop	ebp
	ret	0
?HasFlag@@YA_NPAUlua_State@@HPBD@Z ENDP			; HasFlag
_TEXT	ENDS
PUBLIC	??_C@_0BE@PGDBFBMA@FRAC_INVERT_HEIGHTS?$AA@	; `string'
PUBLIC	??_C@_0BB@IKHGDKIN@FRAC_CENTER_RIFT?$AA@	; `string'
PUBLIC	??_C@_0L@FCDIHIBF@FRAC_POLAR?$AA@		; `string'
PUBLIC	??_C@_0N@OHBKHFFL@FRAC_PERCENT?$AA@		; `string'
PUBLIC	??_C@_0M@GEPEHCFN@FRAC_WRAP_Y?$AA@		; `string'
PUBLIC	??_C@_0M@HNOPEDBM@FRAC_WRAP_X?$AA@		; `string'
PUBLIC	?GetFractalFlags@@YAHPAUlua_State@@H@Z		; GetFractalFlags
EXTRN	_lua_settop:PROC
EXTRN	_lua_gettop:PROC
EXTRN	_luaL_checktype:PROC
;	COMDAT ??_C@_0BE@PGDBFBMA@FRAC_INVERT_HEIGHTS?$AA@
CONST	SEGMENT
??_C@_0BE@PGDBFBMA@FRAC_INVERT_HEIGHTS?$AA@ DB 'FRAC_INVERT_HEIGHTS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IKHGDKIN@FRAC_CENTER_RIFT?$AA@
CONST	SEGMENT
??_C@_0BB@IKHGDKIN@FRAC_CENTER_RIFT?$AA@ DB 'FRAC_CENTER_RIFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCDIHIBF@FRAC_POLAR?$AA@
CONST	SEGMENT
??_C@_0L@FCDIHIBF@FRAC_POLAR?$AA@ DB 'FRAC_POLAR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OHBKHFFL@FRAC_PERCENT?$AA@
CONST	SEGMENT
??_C@_0N@OHBKHFFL@FRAC_PERCENT?$AA@ DB 'FRAC_PERCENT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GEPEHCFN@FRAC_WRAP_Y?$AA@
CONST	SEGMENT
??_C@_0M@GEPEHCFN@FRAC_WRAP_Y?$AA@ DB 'FRAC_WRAP_Y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HNOPEDBM@FRAC_WRAP_X?$AA@
CONST	SEGMENT
??_C@_0M@HNOPEDBM@FRAC_WRAP_X?$AA@ DB 'FRAC_WRAP_X', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?GetFractalFlags@@YAHPAUlua_State@@H@Z
_TEXT	SEGMENT
_top$ = -8						; size = 4
_flags$ = -4						; size = 4
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
?GetFractalFlags@@YAHPAUlua_State@@H@Z PROC		; GetFractalFlags, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 38   : 	int flags = 0;

	mov	DWORD PTR _flags$[ebp], 0

; 39   : 	luaL_checktype(L, idx, LUA_TTABLE);

	push	5
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_checktype
	add	esp, 12					; 0000000cH

; 40   : 
; 41   : 	const int top = lua_gettop(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _top$[ebp], eax

; 42   : 
; 43   : 	if(HasFlag(L, idx, "FRAC_WRAP_X"))

	push	OFFSET ??_C@_0M@HNOPEDBM@FRAC_WRAP_X?$AA@
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@GetFractal

; 44   : 		flags |= CvFractal::FRAC_WRAP_X;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _flags$[ebp], eax
$LN6@GetFractal:

; 45   : 
; 46   : 	if(HasFlag(L, idx, "FRAC_WRAP_Y"))

	push	OFFSET ??_C@_0M@GEPEHCFN@FRAC_WRAP_Y?$AA@
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@GetFractal

; 47   : 		flags |= CvFractal::FRAC_WRAP_Y;

	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 2
	mov	DWORD PTR _flags$[ebp], ecx
$LN5@GetFractal:

; 48   : 
; 49   : 	if(HasFlag(L, idx, "FRAC_PERCENT"))

	push	OFFSET ??_C@_0N@OHBKHFFL@FRAC_PERCENT?$AA@
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetFractal

; 50   : 		flags |= CvFractal::FRAC_PERCENT;

	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 4
	mov	DWORD PTR _flags$[ebp], edx
$LN4@GetFractal:

; 51   : 
; 52   : 	if(HasFlag(L, idx, "FRAC_POLAR"))

	push	OFFSET ??_C@_0L@FCDIHIBF@FRAC_POLAR?$AA@
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@GetFractal

; 53   : 		flags |= CvFractal::FRAC_POLAR;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 8
	mov	DWORD PTR _flags$[ebp], eax
$LN3@GetFractal:

; 54   : 
; 55   : 	if(HasFlag(L, idx, "FRAC_CENTER_RIFT"))

	push	OFFSET ??_C@_0BB@IKHGDKIN@FRAC_CENTER_RIFT?$AA@
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetFractal

; 56   : 		flags |= CvFractal::FRAC_CENTER_RIFT;

	mov	ecx, DWORD PTR _flags$[ebp]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR _flags$[ebp], ecx
$LN2@GetFractal:

; 57   : 
; 58   : 	if(HasFlag(L, idx, "FRAC_INVERT_HEIGHTS"))

	push	OFFSET ??_C@_0BE@PGDBFBMA@FRAC_INVERT_HEIGHTS?$AA@
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?HasFlag@@YA_NPAUlua_State@@HPBD@Z	; HasFlag
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetFractal

; 59   : 		flags |= CvFractal::FRAC_INVERT_HEIGHTS;

	mov	edx, DWORD PTR _flags$[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _flags$[ebp], edx
$LN1@GetFractal:

; 60   : 
; 61   : 	lua_settop(L, top);

	mov	eax, DWORD PTR _top$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_settop
	add	esp, 8

; 62   : 
; 63   : 	return flags;

	mov	eax, DWORD PTR _flags$[ebp]

; 64   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFractalFlags@@YAHPAUlua_State@@H@Z ENDP		; GetFractalFlags
_TEXT	ENDS
PUBLIC	?pRegister@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::pRegister
PUBLIC	?Register@CvLuaFractal@@SAXPAUlua_State@@@Z	; CvLuaFractal::Register
EXTRN	?CCallWithErrorHandling@Details@FLua@@YA_NPAUlua_State@@P6AH0@ZPAX@Z:PROC ; FLua::Details::CCallWithErrorHandling
; Function compile flags: /Odtp
;	COMDAT ?Register@CvLuaFractal@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?Register@CvLuaFractal@@SAXPAUlua_State@@@Z PROC	; CvLuaFractal::Register, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp

; 69   : 	FLua::Details::CCallWithErrorHandling(L, pRegister);

	push	0
	push	OFFSET ?pRegister@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::pRegister
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?CCallWithErrorHandling@Details@FLua@@YA_NPAUlua_State@@P6AH0@ZPAX@Z ; FLua::Details::CCallWithErrorHandling
	add	esp, 12					; 0000000cH

; 70   : }

	pop	ebp
	ret	0
?Register@CvLuaFractal@@SAXPAUlua_State@@@Z ENDP	; CvLuaFractal::Register
_TEXT	ENDS
PUBLIC	??_C@_0M@HEBIOPPP@CreateRifts?$AA@		; `string'
PUBLIC	?lCreateRifts@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::lCreateRifts
PUBLIC	??_C@_06MIKANEJK@Create?$AA@			; `string'
PUBLIC	?lCreate@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::lCreate
PUBLIC	??_C@_07HHOCEJOL@Fractal?$AA@			; `string'
EXTRN	_lua_pushcclosure:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_createtable:PROC
;	COMDAT ??_C@_0M@HEBIOPPP@CreateRifts?$AA@
CONST	SEGMENT
??_C@_0M@HEBIOPPP@CreateRifts?$AA@ DB 'CreateRifts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIKANEJK@Create?$AA@
CONST	SEGMENT
??_C@_06MIKANEJK@Create?$AA@ DB 'Create', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HHOCEJOL@Fractal?$AA@
CONST	SEGMENT
??_C@_07HHOCEJOL@Fractal?$AA@ DB 'Fractal', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?pRegister@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?pRegister@CvLuaFractal@@KAHPAUlua_State@@@Z PROC	; CvLuaFractal::pRegister, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   : 	lua_getglobal(L, "Fractal");

	push	OFFSET ??_C@_07HHOCEJOL@Fractal?$AA@
	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 75   : 	if(lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@pRegister

; 76   : 	{
; 77   : 		lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 78   : 		lua_createtable(L, 0, 3);

	push	3
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 79   : 		lua_pushvalue(L, -1);

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 80   : 		lua_setglobal(L, "Fractal");

	push	OFFSET ??_C@_07HHOCEJOL@Fractal?$AA@
	push	-10002					; ffffd8eeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH
$LN1@pRegister:

; 81   : 	}
; 82   : 
; 83   : 	lua_pushcclosure(L, lCreate, 0);

	push	0
	push	OFFSET ?lCreate@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::lCreate
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 84   : 	lua_setfield(L, -2, "Create");

	push	OFFSET ??_C@_06MIKANEJK@Create?$AA@
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 85   : 
; 86   : 	lua_pushcclosure(L, lCreateRifts, 0);

	push	0
	push	OFFSET ?lCreateRifts@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::lCreateRifts
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 87   : 	lua_setfield(L, -2, "CreateRifts");

	push	OFFSET ??_C@_0M@HEBIOPPP@CreateRifts?$AA@
	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 88   : 
; 89   : 	return 0;

	xor	eax, eax

; 90   : }

	pop	ebp
	ret	0
?pRegister@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP	; CvLuaFractal::pRegister
_TEXT	ENDS
PUBLIC	?lBuildRidges@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::lBuildRidges
EXTRN	?ridgeBuilder@CvFractal@@QAEXAAVCvRandom@@HHHH@Z:PROC ; CvFractal::ridgeBuilder
EXTRN	_lua_tointeger:PROC
EXTRN	?getMapRand@CvGame@@QAEAAVCvRandom@@XZ:PROC	; CvGame::getMapRand
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	_lua_touserdata:PROC
; Function compile flags: /Odtp
;	COMDAT ?lBuildRidges@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T216914 = -28						; size = 4
_iNumSeeds$ = -24					; size = 4
_pFractal$ = -20					; size = 4
_mapRand$ = -16						; size = 4
_iBlendFract$ = -12					; size = 4
_iBlendRidge$ = -8					; size = 4
_flags$ = -4						; size = 4
_L$ = 8							; size = 4
?lBuildRidges@CvLuaFractal@@KAHPAUlua_State@@@Z PROC	; CvLuaFractal::lBuildRidges, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 94   : 	//assume 'self' was pushed
; 95   : 	luaL_checktype(L, 1, LUA_TUSERDATA);

	push	7
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_checktype
	add	esp, 12					; 0000000cH

; 96   : 	CvFractal* pFractal = static_cast<CvFractal*>(lua_touserdata(L, 1));

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pFractal$[ebp], eax

; 97   : 	CvRandom& mapRand = GC.getGame().getMapRand();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T216914[ebp], edx
	mov	ecx, DWORD PTR $T216914[ebp]
	call	?getMapRand@CvGame@@QAEAAVCvRandom@@XZ	; CvGame::getMapRand
	mov	DWORD PTR _mapRand$[ebp], eax

; 98   : 
; 99   : 	const int iNumSeeds		= lua_tointeger(L, 2);

	push	2
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNumSeeds$[ebp], eax

; 100  : 	const int flags			= GetFractalFlags(L, 3);

	push	3
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetFractalFlags@@YAHPAUlua_State@@H@Z	; GetFractalFlags
	add	esp, 8
	mov	DWORD PTR _flags$[ebp], eax

; 101  : 	const int iBlendRidge	= lua_tointeger(L, 4);

	push	4
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iBlendRidge$[ebp], eax

; 102  : 	const int iBlendFract	= lua_tointeger(L, 5);

	push	5
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iBlendFract$[ebp], eax

; 103  : 
; 104  : 	pFractal->ridgeBuilder(mapRand, iNumSeeds, flags, iBlendRidge, iBlendFract);

	mov	ecx, DWORD PTR _iBlendFract$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iBlendRidge$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNumSeeds$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mapRand$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pFractal$[ebp]
	call	?ridgeBuilder@CvFractal@@QAEXAAVCvRandom@@HHHH@Z ; CvFractal::ridgeBuilder

; 105  : 	return 0;

	xor	eax, eax

; 106  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lBuildRidges@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP	; CvLuaFractal::lBuildRidges
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??_C@_04BDLIKKMN@__gc?$AA@			; `string'
PUBLIC	?lDestroy@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::lDestroy
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	??_C@_0M@PPPIGMA@BuildRidges?$AA@		; `string'
PUBLIC	??_C@_09EOGEIJMK@GetHeight?$AA@			; `string'
PUBLIC	?lGetHeight@CvLuaFractal@@KAHPAUlua_State@@@Z	; CvLuaFractal::lGetHeight
PUBLIC	?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z ; CvLuaFractal::CreateFractal
EXTRN	_lua_setmetatable:PROC
EXTRN	??0CvFractal@@QAE@XZ:PROC			; CvFractal::CvFractal
EXTRN	_lua_newuserdata:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_04BDLIKKMN@__gc?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
CONST	SEGMENT
??_C@_04BDLIKKMN@__gc?$AA@ DB '__gc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPPIGMA@BuildRidges?$AA@
CONST	SEGMENT
??_C@_0M@PPPIGMA@BuildRidges?$AA@ DB 'BuildRidges', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EOGEIJMK@GetHeight?$AA@
CONST	SEGMENT
??_C@_09EOGEIJMK@GetHeight?$AA@ DB 'GetHeight', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z$0
__ehfuncinfo$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluafractal.cpp
xdata$x	ENDS
;	COMDAT ?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T216918 = -28						; size = 4
$T216917 = -24						; size = 4
_pFractal$ = -20					; size = 4
_ptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z PROC ; CvLuaFractal::CreateFractal, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 110  : 	//This will use Lua's memory manager and Lua is responsible for destruction.
; 111  : 	void* ptr = lua_newuserdata(L, sizeof(CvFractal));

	push	262184					; 00040028H
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_newuserdata
	add	esp, 8
	mov	DWORD PTR _ptr$[ebp], eax

; 112  : 	CvFractal* pFractal = new(ptr) CvFractal();

	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR $T216918[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T216918[ebp], 0
	je	SHORT $LN3@CreateFrac
	mov	ecx, DWORD PTR $T216918[ebp]
	call	??0CvFractal@@QAE@XZ			; CvFractal::CvFractal
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@CreateFrac
$LN3@CreateFrac:
	mov	DWORD PTR tv76[ebp], 0
$LN4@CreateFrac:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T216917[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T216917[ebp]
	mov	DWORD PTR _pFractal$[ebp], eax

; 113  : 
; 114  : 	lua_newtable(L);

	push	0
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 115  : 
; 116  : 	//__index
; 117  : 	lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 118  : 
; 119  : 	lua_pushvalue(L, -3);				//push userdata as upvalue

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 120  : 	lua_pushcclosure(L, lGetHeight, 1);

	push	1
	push	OFFSET ?lGetHeight@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::lGetHeight
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 121  : 	lua_setfield(L, -2, "GetHeight");

	push	OFFSET ??_C@_09EOGEIJMK@GetHeight?$AA@
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 122  : 
; 123  : 	lua_pushvalue(L, -3);				//push userdata as upvalue

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 124  : 	lua_pushcclosure(L, lBuildRidges, 1);

	push	1
	push	OFFSET ?lBuildRidges@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::lBuildRidges
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 125  : 	lua_setfield(L, -2, "BuildRidges");

	push	OFFSET ??_C@_0M@PPPIGMA@BuildRidges?$AA@
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 126  : 
; 127  : 	lua_setfield(L, -2, "__index");

	push	OFFSET ??_C@_07NHABFFHN@__index?$AA@
	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 128  : 
; 129  : 	//__gc
; 130  : 	lua_pushcclosure(L, lDestroy, 0);

	push	0
	push	OFFSET ?lDestroy@CvLuaFractal@@KAHPAUlua_State@@@Z ; CvLuaFractal::lDestroy
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH

; 131  : 	lua_setfield(L, -2, "__gc");

	push	OFFSET ??_C@_04BDLIKKMN@__gc?$AA@
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 132  : 
; 133  : 	lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_setmetatable
	add	esp, 8

; 134  : 
; 135  : 	return pFractal;

	mov	eax, DWORD PTR _pFractal$[ebp]

; 136  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z$0:
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T216918[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z ENDP ; CvLuaFractal::CreateFractal
EXTRN	?fracInit@CvFractal@@QAEXHHHAAVCvRandom@@HPAV1@HH@Z:PROC ; CvFractal::fracInit
; Function compile flags: /Odtp
;	COMDAT ?lCreate@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv129 = -44						; size = 4
tv89 = -40						; size = 4
$T216945 = -36						; size = 4
_iGrain$ = -32						; size = 4
_rand$ = -28						; size = 4
_pFractal$ = -24					; size = 4
_iFracXExp$ = -20					; size = 4
_iNewXs$ = -16						; size = 4
_iFracYExp$ = -12					; size = 4
_iNewYs$ = -8						; size = 4
_flags$ = -4						; size = 4
_L$ = 8							; size = 4
?lCreate@CvLuaFractal@@KAHPAUlua_State@@@Z PROC		; CvLuaFractal::lCreate, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 140  : 	CvFractal* pFractal = CreateFractal(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z ; CvLuaFractal::CreateFractal
	add	esp, 4
	mov	DWORD PTR _pFractal$[ebp], eax

; 141  : 
; 142  : 	const int iNewXs = lua_tointeger(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewXs$[ebp], eax

; 143  : 	const int iNewYs = lua_tointeger(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewYs$[ebp], eax

; 144  : 	const int iGrain = lua_tointeger(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iGrain$[ebp], eax

; 145  : 	CvRandom& rand = GC.getGame().getMapRand();	//Temporary!!

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T216945[ebp], ecx
	mov	ecx, DWORD PTR $T216945[ebp]
	call	?getMapRand@CvGame@@QAEAAVCvRandom@@XZ	; CvGame::getMapRand
	mov	DWORD PTR _rand$[ebp], eax

; 146  : 
; 147  : 	//calculate flags
; 148  : 	const int flags = GetFractalFlags(L, 4);

	push	4
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetFractalFlags@@YAHPAUlua_State@@H@Z	; GetFractalFlags
	add	esp, 8
	mov	DWORD PTR _flags$[ebp], eax

; 149  : 
; 150  : 	const int iFracXExp = lua_isnil(L, 5)? CvFractal::DEFAULT_FRAC_X_EXP : lua_tointeger(L, 5);

	push	5
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@lCreate
	mov	DWORD PTR tv89[ebp], 7
	jmp	SHORT $LN4@lCreate
$LN3@lCreate:
	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR tv89[ebp], eax
$LN4@lCreate:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _iFracXExp$[ebp], edx

; 151  : 	const int iFracYExp = lua_isnil(L, 6)? CvFractal::DEFAULT_FRAC_Y_EXP : lua_tointeger(L, 6);

	push	6
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@lCreate
	mov	DWORD PTR tv129[ebp], 6
	jmp	SHORT $LN6@lCreate
$LN5@lCreate:
	push	6
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR tv129[ebp], eax
$LN6@lCreate:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _iFracYExp$[ebp], edx

; 152  : 
; 153  : 
; 154  : 	pFractal->fracInit(iNewXs, iNewYs, iGrain, rand, flags, NULL, iFracXExp, iFracYExp);

	mov	eax, DWORD PTR _iFracYExp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iFracXExp$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _rand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iGrain$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iNewYs$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNewXs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFractal$[ebp]
	call	?fracInit@CvFractal@@QAEXHHHAAVCvRandom@@HPAV1@HH@Z ; CvFractal::fracInit

; 155  : 
; 156  : 	return 1;

	mov	eax, 1

; 157  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCreate@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP		; CvLuaFractal::lCreate
_TEXT	ENDS
EXTRN	_luaL_optinteger:PROC
; Function compile flags: /Odtp
;	COMDAT ?lCreateRifts@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T216951 = -40						; size = 4
_iGrain$ = -36						; size = 4
_rand$ = -32						; size = 4
_pFractal$ = -28					; size = 4
_pRidgeFrac$ = -24					; size = 4
_iFracXExp$ = -20					; size = 4
_iNewXs$ = -16						; size = 4
_iFracYExp$ = -12					; size = 4
_iNewYs$ = -8						; size = 4
_flags$ = -4						; size = 4
_L$ = 8							; size = 4
?lCreateRifts@CvLuaFractal@@KAHPAUlua_State@@@Z PROC	; CvLuaFractal::lCreateRifts, COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 161  : 	CvFractal* pFractal = CreateFractal(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?CreateFractal@CvLuaFractal@@KAPAVCvFractal@@PAUlua_State@@@Z ; CvLuaFractal::CreateFractal
	add	esp, 4
	mov	DWORD PTR _pFractal$[ebp], eax

; 162  : 
; 163  : 	const int iNewXs = lua_tointeger(L, 1);

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewXs$[ebp], eax

; 164  : 	const int iNewYs = lua_tointeger(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewYs$[ebp], eax

; 165  : 	const int iGrain = lua_tointeger(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iGrain$[ebp], eax

; 166  : 	CvRandom& rand = GC.getGame().getMapRand();	//Temporary!!

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T216951[ebp], ecx
	mov	ecx, DWORD PTR $T216951[ebp]
	call	?getMapRand@CvGame@@QAEAAVCvRandom@@XZ	; CvGame::getMapRand
	mov	DWORD PTR _rand$[ebp], eax

; 167  : 
; 168  : 	//calculate flags
; 169  : 	const int flags = GetFractalFlags(L, 4);

	push	4
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetFractalFlags@@YAHPAUlua_State@@H@Z	; GetFractalFlags
	add	esp, 8
	mov	DWORD PTR _flags$[ebp], eax

; 170  : 
; 171  : 	CvFractal* pRidgeFrac = static_cast<CvFractal*>(lua_touserdata(L, 5));

	push	5
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pRidgeFrac$[ebp], eax

; 172  : 
; 173  : 	const int iFracXExp = luaL_optint(L, 6, CvFractal::DEFAULT_FRAC_X_EXP);

	push	7
	push	6
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iFracXExp$[ebp], eax

; 174  : 	const int iFracYExp = luaL_optint(L, 7, CvFractal::DEFAULT_FRAC_Y_EXP);

	push	6
	push	7
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iFracYExp$[ebp], eax

; 175  : 
; 176  : 	pFractal->fracInit(iNewXs, iNewYs, iGrain, rand, flags, pRidgeFrac, iFracXExp, iFracYExp);

	mov	eax, DWORD PTR _iFracYExp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iFracXExp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pRidgeFrac$[ebp]
	push	edx
	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rand$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iGrain$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNewYs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNewXs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pFractal$[ebp]
	call	?fracInit@CvFractal@@QAEXHHHAAVCvRandom@@HPAV1@HH@Z ; CvFractal::fracInit

; 177  : 	return 1;

	mov	eax, 1

; 178  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCreateRifts@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP	; CvLuaFractal::lCreateRifts
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lDestroy@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pFractal$ = -4						; size = 4
_L$ = 8							; size = 4
?lDestroy@CvLuaFractal@@KAHPAUlua_State@@@Z PROC	; CvLuaFractal::lDestroy, COMDAT

; 181  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 182  : 	luaL_checktype(L, 1, LUA_TUSERDATA);

	push	7
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_checktype
	add	esp, 12					; 0000000cH

; 183  : 	CvFractal* pFractal = static_cast<CvFractal*>(lua_touserdata(L, 1));

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pFractal$[ebp], eax

; 184  : 
; 185  : 	//explicitly call destructor since we used placement new
; 186  : 	pFractal->~CvFractal();

	push	0
	mov	edx, DWORD PTR _pFractal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pFractal$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx

; 187  : 
; 188  : 	return 0;

	xor	eax, eax

; 189  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lDestroy@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP	; CvLuaFractal::lDestroy
_TEXT	ENDS
PUBLIC	??_C@_0BN@NHMPFKEH@Invalid?5number?5of?5arguments?4?$AA@ ; `string'
EXTRN	_luaL_error:PROC
EXTRN	?getHeight@CvFractal@@QAEHHH@Z:PROC		; CvFractal::getHeight
EXTRN	_lua_pushinteger:PROC
EXTRN	?getHeightFromPercent@CvFractal@@QAEHH@Z:PROC	; CvFractal::getHeightFromPercent
;	COMDAT ??_C@_0BN@NHMPFKEH@Invalid?5number?5of?5arguments?4?$AA@
CONST	SEGMENT
??_C@_0BN@NHMPFKEH@Invalid?5number?5of?5arguments?4?$AA@ DB 'Invalid numb'
	DB	'er of arguments.', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?lGetHeight@CvLuaFractal@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv73 = -32						; size = 4
_height$216867 = -28					; size = 4
_x$216865 = -24						; size = 4
_y$216866 = -20						; size = 4
_height$216863 = -16					; size = 4
_percentage$216862 = -12				; size = 4
_pFractal$ = -8						; size = 4
_nargs$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetHeight@CvLuaFractal@@KAHPAUlua_State@@@Z PROC	; CvLuaFractal::lGetHeight, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 193  : 	//assume 'self' was pushed
; 194  : 	luaL_checktype(L, 1, LUA_TUSERDATA);

	push	7
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_checktype
	add	esp, 12					; 0000000cH

; 195  : 	CvFractal* pFractal = static_cast<CvFractal*>(lua_touserdata(L, 1));

	push	1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pFractal$[ebp], eax

; 196  : 
; 197  : 	int nargs = lua_gettop(L) - 1; //minus self

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _nargs$[ebp], eax

; 198  : 	switch(nargs)

	mov	eax, DWORD PTR _nargs$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 1
	je	SHORT $LN3@lGetHeight
	cmp	DWORD PTR tv73[ebp], 2
	je	SHORT $LN2@lGetHeight
	jmp	SHORT $LN1@lGetHeight
$LN3@lGetHeight:

; 199  : 	{
; 200  : 	case 1:
; 201  : 	{
; 202  : 		int percentage = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _percentage$216862[ebp], eax

; 203  : 		int height = pFractal->getHeightFromPercent(percentage);

	mov	edx, DWORD PTR _percentage$216862[ebp]
	push	edx
	mov	ecx, DWORD PTR _pFractal$[ebp]
	call	?getHeightFromPercent@CvFractal@@QAEHH@Z ; CvFractal::getHeightFromPercent
	mov	DWORD PTR _height$216863[ebp], eax

; 204  : 		lua_pushinteger(L, height);

	mov	eax, DWORD PTR _height$216863[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 205  : 	}
; 206  : 	break;

	jmp	SHORT $LN4@lGetHeight
$LN2@lGetHeight:

; 207  : 	case 2:
; 208  : 	{
; 209  : 		int x = lua_tointeger(L, 2);

	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$216865[ebp], eax

; 210  : 		int y = lua_tointeger(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$216866[ebp], eax

; 211  : 		int height = pFractal->getHeight(x, y);

	mov	ecx, DWORD PTR _y$216866[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$216865[ebp]
	push	edx
	mov	ecx, DWORD PTR _pFractal$[ebp]
	call	?getHeight@CvFractal@@QAEHHH@Z		; CvFractal::getHeight
	mov	DWORD PTR _height$216867[ebp], eax

; 212  : 		lua_pushinteger(L, height);

	mov	eax, DWORD PTR _height$216867[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 213  : 	}
; 214  : 	break;

	jmp	SHORT $LN4@lGetHeight
$LN1@lGetHeight:

; 215  : 	default:
; 216  : 		luaL_error(L, "Invalid number of arguments.");

	push	OFFSET ??_C@_0BN@NHMPFKEH@Invalid?5number?5of?5arguments?4?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_error
	add	esp, 8
$LN4@lGetHeight:

; 217  : 	}
; 218  : 
; 219  : 	return 1;

	mov	eax, 1

; 220  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetHeight@CvLuaFractal@@KAHPAUlua_State@@@Z ENDP	; CvLuaFractal::lGetHeight
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
END
