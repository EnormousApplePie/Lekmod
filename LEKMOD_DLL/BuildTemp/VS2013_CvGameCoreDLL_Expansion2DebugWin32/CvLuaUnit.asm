; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\Lua\CvLuaUnit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??_C@_0BL@FKIJHDNO@Instance?5no?5longer?5exists?4?$AA@ ; `string'
PUBLIC	?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z ; CvLuaUnit::HandleMissingInstance
EXTRN	_luaL_error:PROC
;	COMDAT ??_C@_0BL@FKIJHDNO@Instance?5no?5longer?5exists?4?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
CONST	SEGMENT
??_C@_0BL@FKIJHDNO@Instance?5no?5longer?5exists?4?$AA@ DB 'Instance no lo'
	DB	'nger exists.', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z PROC ; CvLuaUnit::HandleMissingInstance, COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp

; 26   : 	luaL_error(L, "Instance no longer exists.");

	push	OFFSET ??_C@_0BL@FKIJHDNO@Instance?5no?5longer?5exists?4?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_error
	add	esp, 8

; 27   : }

	pop	ebp
	ret	0
?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z ENDP ; CvLuaUnit::HandleMissingInstance
_TEXT	ENDS
PUBLIC	??_C@_0CA@GENACOON@IsPlunderBlockedByOpposingTrait?$AA@ ; `string'
PUBLIC	?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
PUBLIC	??_C@_0BE@HLBAIPJO@IsRangedSupportFire?$AA@	; `string'
PUBLIC	?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangedSupportFire
PUBLIC	??_C@_0BA@PCGBFCNG@IsLargerCivThan?$AA@		; `string'
PUBLIC	?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsLargerCivThan
PUBLIC	??_C@_0BB@DNHALCAP@IsHigherTechThan?$AA@	; `string'
PUBLIC	?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHigherTechThan
PUBLIC	??_C@_0BL@IFBCJAOO@SetDeployFromOperationTurn?$AA@ ; `string'
PUBLIC	?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDeployFromOperationTurn
PUBLIC	??_C@_0BK@OKCCHHON@ExecuteSpecialExploreMove?$AA@ ; `string'
PUBLIC	?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExecuteSpecialExploreMove
PUBLIC	??_C@_0BA@JEHNJEHH@CanStartMission?$AA@		; `string'
PUBLIC	?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanStartMission
PUBLIC	??_C@_0BA@BNAEAOBO@LastMissionPlot?$AA@		; `string'
PUBLIC	?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLastMissionPlot
PUBLIC	??_C@_0L@FNCAEGNI@PopMission?$AA@		; `string'
PUBLIC	?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPopMission
PUBLIC	??_C@_0M@KMEIMJMN@PushMission?$AA@		; `string'
PUBLIC	?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPushMission
PUBLIC	??_C@_0M@LBKNMOHC@RangeStrike?$AA@		; `string'
PUBLIC	?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lRangeStrike
PUBLIC	??_C@_0BF@BJPLHKJ@GetGreatWorkSlotType?$AA@	; `string'
PUBLIC	?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatWorkSlotType
PUBLIC	??_C@_0BI@GPAANOLE@GetTourismBlastStrength?$AA@	; `string'
PUBLIC	?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTourismBlastStrength
PUBLIC	??_C@_0BP@HBADFCCC@GetMajorityReligionAfterSpread?$AA@ ; `string'
PUBLIC	?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMajorityReligionAfterSpread
PUBLIC	??_C@_0BL@NDOCOGDO@GetNumFollowersAfterSpread?$AA@ ; `string'
PUBLIC	?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumFollowersAfterSpread
PUBLIC	??_C@_0P@CCJGDKMN@GetSpreadsLeft?$AA@		; `string'
PUBLIC	?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetSpreadsLeft
PUBLIC	??_C@_0BG@CMODHJMA@GetConversionStrength?$AA@	; `string'
PUBLIC	?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetConversionStrength
PUBLIC	??_C@_0M@GMHLBOLL@GetReligion?$AA@		; `string'
PUBLIC	?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetReligion
PUBLIC	??_C@_06OICOCAHF@IsBusy?$AA@			; `string'
PUBLIC	?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsBusy
PUBLIC	??_C@_0O@BOALNFPB@IsReadyToMove?$AA@		; `string'
PUBLIC	?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsReadyToMove
PUBLIC	??_C@_0BA@PBKPFNFP@GetActivityType?$AA@		; `string'
PUBLIC	?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetActivityType
PUBLIC	??_C@_0BA@MMNGCCEN@SetHasPromotion?$AA@		; `string'
PUBLIC	?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHasPromotion
PUBLIC	??_C@_0P@LONCCLND@IsHasPromotion?$AA@		; `string'
PUBLIC	?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsHasPromotion
PUBLIC	??_C@_0BB@LBEGEPDL@IsPromotionValid?$AA@	; `string'
PUBLIC	?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionValid
PUBLIC	??_C@_0BH@KEAILGDL@CanAcquirePromotionAny?$AA@	; `string'
PUBLIC	?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotionAny
PUBLIC	??_C@_0BE@NMKFIMAO@CanAcquirePromotion?$AA@	; `string'
PUBLIC	?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotion
PUBLIC	??_C@_0BF@IJFPHAOD@GetUnitClassModifier?$AA@	; `string'
PUBLIC	?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassModifier
PUBLIC	??_C@_0BL@FCNEPMJP@GetExtraUnitCombatModifier?$AA@ ; `string'
PUBLIC	?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraUnitCombatModifier
PUBLIC	??_C@_0BO@MOKLIMJL@GetExtraFeatureDefensePercent?$AA@ ; `string'
PUBLIC	?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureDefensePercent
PUBLIC	??_C@_0BN@CPBINKED@GetExtraFeatureAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureAttackPercent
PUBLIC	??_C@_0BO@EGLEMPGC@GetExtraTerrainDefensePercent?$AA@ ; `string'
PUBLIC	?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainDefensePercent
PUBLIC	??_C@_0BN@DIABMFJL@GetExtraTerrainAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainAttackPercent
PUBLIC	??_C@_0BA@DGJIKHMC@SetScenarioData?$AA@		; `string'
PUBLIC	?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScenarioData
PUBLIC	??_C@_0BA@EIONFNL@GetScenarioData?$AA@		; `string'
PUBLIC	?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScenarioData
PUBLIC	??_C@_0O@PGOPIEFE@SetScriptData?$AA@		; `string'
PUBLIC	?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetScriptData
PUBLIC	??_C@_0O@IJPBDHCD@GetScriptData?$AA@		; `string'
PUBLIC	?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetScriptData
PUBLIC	??_C@_0BE@DLKIIJFH@IsFeatureDoubleMove?$AA@	; `string'
PUBLIC	?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFeatureDoubleMove
PUBLIC	??_C@_0BE@KAIIOOFC@IsTerrainDoubleMove?$AA@	; `string'
PUBLIC	?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTerrainDoubleMove
PUBLIC	??_C@_07DEJFEJPJ@SetName?$AA@			; `string'
PUBLIC	?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetName
PUBLIC	??_C@_0L@PJBAHION@GetNameKey?$AA@		; `string'
PUBLIC	?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetNameKey
PUBLIC	??_C@_07PMAOHACP@HasName?$AA@			; `string'
PUBLIC	?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasName
PUBLIC	??_C@_0O@OFOGDJDK@GetNameNoDesc?$AA@		; `string'
PUBLIC	?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetNameNoDesc
PUBLIC	??_C@_07MMGEHGCI@GetName?$AA@			; `string'
PUBLIC	?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetName
PUBLIC	??_C@_0BH@LGDAMEMJ@GetExtraDomainModifier?$AA@	; `string'
PUBLIC	?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraDomainModifier
PUBLIC	??_C@_07DCNKNHAD@IsCargo?$AA@			; `string'
PUBLIC	?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCargo
PUBLIC	??_C@_0BB@PJKLKFOJ@GetTransportUnit?$AA@	; `string'
PUBLIC	?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTransportUnit
PUBLIC	??_C@_0BE@GIBMJJJB@IsEnemyCityAdjacent?$AA@	; `string'
PUBLIC	?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyCityAdjacent
PUBLIC	??_C@_0BJ@DJLNBBGK@GetNumEnemyUnitsAdjacent?$AA@ ; `string'
PUBLIC	?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
PUBLIC	??_C@_0BH@EHMHKIDN@IsFriendlyUnitAdjacent?$AA@	; `string'
PUBLIC	?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFriendlyUnitAdjacent
PUBLIC	??_C@_0BN@LIDKBFIB@GetNearbyImprovementModifier?$AA@ ; `string'
PUBLIC	?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNearbyImprovementModifier
PUBLIC	??_C@_0N@JPLHPCNE@IsNearSapper?$AA@		; `string'
PUBLIC	?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNearSapper
PUBLIC	??_C@_0BO@BNDFJFHP@GetGreatGeneralCombatModifier?$AA@ ; `string'
PUBLIC	?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatGeneralCombatModifier
PUBLIC	??_C@_0BP@NPLEODON@GetReverseGreatGeneralModifier?$AA@ ; `string'
PUBLIC	?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReverseGreatGeneralModifier
PUBLIC	??_C@_0BM@GGCJAMLP@IsIgnoreGreatGeneralBenefit?$AA@ ; `string'
PUBLIC	?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
PUBLIC	??_C@_0BG@EGFCIODH@IsStackedGreatGeneral?$AA@	; `string'
PUBLIC	?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsStackedGreatGeneral
PUBLIC	??_C@_0BD@FIBLLGCA@IsNearGreatGeneral?$AA@	; `string'
PUBLIC	?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearGreatGeneral
PUBLIC	??_C@_0BC@CCMIAMOE@SetLeaderUnitType?$AA@	; `string'
PUBLIC	?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLeaderUnitType
PUBLIC	??_C@_0BC@HMDIHPK@GetLeaderUnitType?$AA@	; `string'
PUBLIC	?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLeaderUnitType
PUBLIC	??_C@_0BB@DMDDFGBF@GetUnitClassType?$AA@	; `string'
PUBLIC	?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassType
PUBLIC	??_C@_0M@PKBGPJIJ@GetUnitType?$AA@		; `string'
PUBLIC	?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitType
PUBLIC	??_C@_0BG@PPJKPBMI@GetUnitPortraitOffset?$AA@	; `string'
PUBLIC	?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitPortraitOffset
PUBLIC	??_C@_0BG@GPHCCLK@GetUnitFlagIconOffset?$AA@	; `string'
PUBLIC	?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitFlagIconOffset
PUBLIC	??_C@_07KIJFBNDA@GetTeam?$AA@			; `string'
PUBLIC	?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetTeam
PUBLIC	??_C@_0BB@DFCAPMCK@SetOriginalOwner?$AA@	; `string'
PUBLIC	?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetOriginalOwner
PUBLIC	??_C@_0BB@FBHJECJI@GetOriginalOwner?$AA@	; `string'
PUBLIC	?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOriginalOwner
PUBLIC	??_C@_0P@OAMOBMMB@GetCombatOwner?$AA@		; `string'
PUBLIC	?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCombatOwner
PUBLIC	??_C@_0P@DJDHAACE@GetVisualOwner?$AA@		; `string'
PUBLIC	?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetVisualOwner
PUBLIC	??_C@_08BODJMJJB@GetOwner?$AA@			; `string'
PUBLIC	?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetOwner
PUBLIC	??_C@_0BC@EMJHOBEL@SetPromotionReady?$AA@	; `string'
PUBLIC	?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetPromotionReady
PUBLIC	??_C@_0BB@NKIJIMHP@IsPromotionReady?$AA@	; `string'
PUBLIC	?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionReady
PUBLIC	??_C@_0BE@CHMMLBFN@SetMadeInterception?$AA@	; `string'
PUBLIC	?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeInterception
PUBLIC	??_C@_0BF@CMPDBBFM@isOutOfInterceptions?$AA@	; `string'
PUBLIC	?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lisOutOfInterceptions
PUBLIC	??_C@_0O@MKFMNOAP@SetMadeAttack?$AA@		; `string'
PUBLIC	?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetMadeAttack
PUBLIC	??_C@_0P@IKHOEAOE@IsOutOfAttacks?$AA@		; `string'
PUBLIC	?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsOutOfAttacks
PUBLIC	??_C@_0BD@CFFKEBAO@GetKamikazePercent?$AA@	; `string'
PUBLIC	?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetKamikazePercent
PUBLIC	??_C@_0BF@MJPLLDMK@GetExperiencePercent?$AA@	; `string'
PUBLIC	?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperiencePercent
PUBLIC	??_C@_0BD@IEDPIMNK@GetUpgradeDiscount?$AA@	; `string'
PUBLIC	?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeDiscount
PUBLIC	??_C@_0BB@HINGJFFL@GetPillageChange?$AA@	; `string'
PUBLIC	?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPillageChange
PUBLIC	??_C@_0BL@FFFJPCKI@GetExtraOpenDefensePercent?$AA@ ; `string'
PUBLIC	?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenDefensePercent
PUBLIC	??_C@_0BJ@JEMHENOI@GetExtraAttackWoundedMod?$AA@ ; `string'
PUBLIC	?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackWoundedMod
PUBLIC	??_C@_0BL@PDPEFOMH@GetExtraAttackFortifiedMod?$AA@ ; `string'
PUBLIC	?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackFortifiedMod
PUBLIC	??_C@_0BN@JELKIHJI@GetExtraRoughRangedAttackMod?$AA@ ; `string'
PUBLIC	?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughRangedAttackMod
PUBLIC	??_C@_0BL@EFEMEKEJ@GetExtraRoughAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughAttackPercent
PUBLIC	??_C@_0BM@CBBBAFGK@GetExtraOpenRangedAttackMod?$AA@ ; `string'
PUBLIC	?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenRangedAttackMod
PUBLIC	??_C@_0BK@LJKEFJID@GetExtraOpenAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenAttackPercent
PUBLIC	??_C@_0BM@NLMNHENB@GetExtraHillsDefensePercent?$AA@ ; `string'
PUBLIC	?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsDefensePercent
PUBLIC	??_C@_0BL@JDMNNJBO@GetExtraHillsAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsAttackPercent
PUBLIC	??_C@_0BL@OIBJDCOP@GetExtraCityDefensePercent?$AA@ ; `string'
PUBLIC	?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityDefensePercent
PUBLIC	??_C@_0BK@EEJGACHD@GetExtraCityAttackPercent?$AA@ ; `string'
PUBLIC	?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityAttackPercent
PUBLIC	??_C@_0CD@PFMFCNHJ@GetCombatStrengthNearFriendlyMin@ ; `string'
PUBLIC	?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
PUBLIC	??_C@_0BP@BHKIBPGK@GetGoldenAgeForeignAttackBonus?$AA@ ; `string'
PUBLIC	?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
PUBLIC	??_C@_0CA@IJLJKKDJ@GetOutsideFriendlyLandsModifier?$AA@ ; `string'
PUBLIC	?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
PUBLIC	??_C@_0BP@KLDAEKDJ@GetFriendlyLandsAttackModifier?$AA@ ; `string'
PUBLIC	?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsAttackModifier
PUBLIC	??_C@_0BJ@ECEPCDCN@GetFriendlyLandsModifier?$AA@ ; `string'
PUBLIC	?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsModifier
PUBLIC	??_C@_0BG@KGCGLIBN@GetExtraCombatPercent?$AA@	; `string'
PUBLIC	?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCombatPercent
PUBLIC	??_C@_0BE@FOPILIOB@GetAdjacentTileHeal?$AA@	; `string'
PUBLIC	?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentTileHeal
PUBLIC	??_C@_0BA@PJJDJAFH@GetSameTileHeal?$AA@		; `string'
PUBLIC	?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSameTileHeal
PUBLIC	??_C@_0BF@FDAKDOOD@GetExtraFriendlyHeal?$AA@	; `string'
PUBLIC	?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFriendlyHeal
PUBLIC	??_C@_0BE@PPNDFFOE@GetExtraNeutralHeal?$AA@	; `string'
PUBLIC	?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraNeutralHeal
PUBLIC	??_C@_0BC@BKCEPOIK@GetExtraEnemyHeal?$AA@	; `string'
PUBLIC	?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEnemyHeal
PUBLIC	??_C@_0BD@IOALAFL@GetExtraWithdrawal?$AA@	; `string'
PUBLIC	?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraWithdrawal
PUBLIC	??_C@_0BL@ODNAIGPH@GetExtraChanceFirstStrikes?$AA@ ; `string'
PUBLIC	?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraChanceFirstStrikes
PUBLIC	??_C@_0BF@NHNKKCBF@GetExtraFirstStrikes?$AA@	; `string'
PUBLIC	?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFirstStrikes
PUBLIC	??_C@_0BA@FKMGFEFH@GetExtraEvasion?$AA@		; `string'
PUBLIC	?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEvasion
PUBLIC	??_C@_0BC@MAMPNOBO@GetExtraIntercept?$AA@	; `string'
PUBLIC	?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraIntercept
PUBLIC	??_C@_0O@HJCFAOBN@GetExtraRange?$AA@		; `string'
PUBLIC	?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExtraRange
PUBLIC	??_C@_0BF@OMEPGIG@GetExtraMoveDiscount?$AA@	; `string'
PUBLIC	?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoveDiscount
PUBLIC	??_C@_0O@LOCEBOPL@GetExtraMoves?$AA@		; `string'
PUBLIC	?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExtraMoves
PUBLIC	??_C@_0BI@LMONEFFA@GetExtraVisibilityRange?$AA@	; `string'
PUBLIC	?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraVisibilityRange
PUBLIC	??_C@_0BC@NDGFBOMB@GetGarrisonedCity?$AA@	; `string'
PUBLIC	?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGarrisonedCity
PUBLIC	??_C@_0N@HELPNODL@IsGarrisoned?$AA@		; `string'
PUBLIC	?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGarrisoned
PUBLIC	??_C@_0BC@BEKIIEEN@IsHillsDoubleMove?$AA@	; `string'
PUBLIC	?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHillsDoubleMove
PUBLIC	??_C@_0BG@FIHHHACK@IsHealOutsideFriendly?$AA@	; `string'
PUBLIC	?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHealOutsideFriendly
PUBLIC	??_C@_0N@NNLJCGEA@IsAlwaysHeal?$AA@		; `string'
PUBLIC	?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAlwaysHeal
PUBLIC	??_C@_0N@JICLFCIN@IsEnemyRoute?$AA@		; `string'
PUBLIC	?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsEnemyRoute
PUBLIC	??_C@_0BJ@CKMHLMJL@IsRiverCrossingNoPenalty?$AA@ ; `string'
PUBLIC	?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRiverCrossingNoPenalty
PUBLIC	??_C@_0BP@FJEFOKIO@GetRiverCrossingNoPenaltyCount?$AA@ ; `string'
PUBLIC	?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
PUBLIC	??_C@_08IIDGMJO@IsAmphib?$AA@			; `string'
PUBLIC	?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAmphib
PUBLIC	??_C@_0P@DOEJINNJ@GetAmphibCount?$AA@		; `string'
PUBLIC	?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetAmphibCount
PUBLIC	??_C@_07KPNLOLLE@IsBlitz?$AA@			; `string'
PUBLIC	?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsBlitz
PUBLIC	??_C@_0O@CMMIPJMH@GetBlitzCount?$AA@		; `string'
PUBLIC	?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetBlitzCount
PUBLIC	??_C@_0BA@OCAPIEKB@GetFortifyTurns?$AA@		; `string'
PUBLIC	?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFortifyTurns
PUBLIC	??_C@_08GAHMDLJN@GetCargo?$AA@			; `string'
PUBLIC	?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCargo
PUBLIC	??_C@_0CG@OOOIDGNO@RotateFacingDirectionCounterCloc@ ; `string'
PUBLIC	?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
PUBLIC	??_C@_0BP@JMEBNBEE@RotateFacingDirectionClockwise?$AA@ ; `string'
PUBLIC	?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionClockwise
PUBLIC	??_C@_0BD@FNLDHKMI@GetFacingDirection?$AA@	; `string'
PUBLIC	?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFacingDirection
PUBLIC	??_C@_0M@GAKMDEHP@ChangeLevel?$AA@		; `string'
PUBLIC	?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeLevel
PUBLIC	??_C@_08DCENCMAP@SetLevel?$AA@			; `string'
PUBLIC	?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetLevel
PUBLIC	??_C@_08MDGBDPHC@GetLevel?$AA@			; `string'
PUBLIC	?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetLevel
PUBLIC	??_C@_0BB@KLHJLBIL@ChangeExperience?$AA@	; `string'
PUBLIC	?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeExperience
PUBLIC	??_C@_0O@OHKLKLHF@SetExperience?$AA@		; `string'
PUBLIC	?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetExperience
PUBLIC	??_C@_0O@JILFBIAC@GetExperience?$AA@		; `string'
PUBLIC	?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExperience
PUBLIC	??_C@_0L@PCIEPGHM@IsImmobile?$AA@		; `string'
PUBLIC	?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsImmobile
PUBLIC	??_C@_0M@HJHLDBGA@FinishMoves?$AA@		; `string'
PUBLIC	?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFinishMoves
PUBLIC	??_C@_0M@CMBKPBOF@ChangeMoves?$AA@		; `string'
PUBLIC	?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeMoves
PUBLIC	??_C@_08HOPLOJJF@SetMoves?$AA@			; `string'
PUBLIC	?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetMoves
PUBLIC	??_C@_08IPNHPKOI@GetMoves?$AA@			; `string'
PUBLIC	?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetMoves
PUBLIC	??_C@_0N@OECJINCP@ChangeDamage?$AA@		; `string'
PUBLIC	?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeDamage
PUBLIC	??_C@_09LEHOBNAL@SetDamage?$AA@			; `string'
PUBLIC	?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetDamage
PUBLIC	??_C@_09JKDLDMJJ@GetDamage?$AA@			; `string'
PUBLIC	?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDamage
PUBLIC	??_C@_0BA@ICPFIKDJ@GetLastMoveTurn?$AA@		; `string'
PUBLIC	?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLastMoveTurn
PUBLIC	??_C@_0BD@GLLONDKJ@GetGameTurnCreated?$AA@	; `string'
PUBLIC	?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGameTurnCreated
PUBLIC	??_C@_0N@EBILAINE@SetReconPlot?$AA@		; `string'
PUBLIC	?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetReconPlot
PUBLIC	??_C@_0N@DFDFMEJI@GetReconPlot?$AA@		; `string'
PUBLIC	?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetReconPlot
PUBLIC	??_C@_07GGOHINDE@GetArea?$AA@			; `string'
PUBLIC	?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetArea
PUBLIC	??_C@_07LBIDHAGI@GetPlot?$AA@			; `string'
PUBLIC	?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetPlot
PUBLIC	??_C@_06FBGHKGAE@AtPlot?$AA@			; `string'
PUBLIC	?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lAtPlot
PUBLIC	??_C@_02DKLFHNOI@At?$AA@			; `string'
PUBLIC	?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lAt
PUBLIC	??_C@_05HIHOHCOG@SetXY?$AA@			; `string'
PUBLIC	?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lSetXY
PUBLIC	??_C@_04OHHHKNBL@GetY?$AA@			; `string'
PUBLIC	?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetY
PUBLIC	??_C@_04POGMJMFK@GetX?$AA@			; `string'
PUBLIC	?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetX
PUBLIC	??_C@_0BA@KMOOCBFO@SetHotKeyNumber?$AA@		; `string'
PUBLIC	?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHotKeyNumber
PUBLIC	??_C@_0BA@JOPIFDEH@GetHotKeyNumber?$AA@		; `string'
PUBLIC	?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHotKeyNumber
PUBLIC	??_C@_05CLBJHDA@GetID?$AA@			; `string'
PUBLIC	?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetID
PUBLIC	??_C@_0P@FKNDEEFE@GetUnitAICargo?$AA@		; `string'
PUBLIC	?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitAICargo
PUBLIC	??_C@_0BA@FAKJAOCC@CanCargoAllMove?$AA@		; `string'
PUBLIC	?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCargoAllMove
PUBLIC	??_C@_08POCIMEDI@HasCargo?$AA@			; `string'
PUBLIC	?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasCargo
PUBLIC	??_C@_0BE@MFHGGLIO@CargoSpaceAvailable?$AA@	; `string'
PUBLIC	?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpaceAvailable
PUBLIC	??_C@_06DNGBIEOM@IsFull?$AA@			; `string'
PUBLIC	?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsFull
PUBLIC	??_C@_0BB@KHCPCPHA@ChangeCargoSpace?$AA@	; `string'
PUBLIC	?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeCargoSpace
PUBLIC	??_C@_0L@DODLMACF@CargoSpace?$AA@		; `string'
PUBLIC	?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCargoSpace
PUBLIC	??_C@_0M@EMBKKFAL@DomainCargo?$AA@		; `string'
PUBLIC	?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDomainCargo
PUBLIC	??_C@_0N@JIBALDJB@SpecialCargo?$AA@		; `string'
PUBLIC	?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSpecialCargo
PUBLIC	??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@	; `string'
PUBLIC	?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseFalloff
PUBLIC	??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@	; `string'
PUBLIC	?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseModifier
PUBLIC	??_C@_0BC@IPOJCGCM@AirSweepCombatMod?$AA@	; `string'
PUBLIC	?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAirSweepCombatMod
PUBLIC	??_C@_0BM@KMIJFMOI@GetUnhappinessCombatPenalty?$AA@ ; `string'
PUBLIC	?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnhappinessCombatPenalty
PUBLIC	??_C@_0CC@OAGBAAPI@GetStrategicResourceCombatPenalt@ ; `string'
PUBLIC	?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetStrategicResourceCombatPenalty
PUBLIC	??_C@_0P@NJCAJHBI@DomainModifier?$AA@		; `string'
PUBLIC	?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDomainModifier
PUBLIC	??_C@_0BD@DFAJNMBC@UnitCombatModifier?$AA@	; `string'
PUBLIC	?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitCombatModifier
PUBLIC	??_C@_0BJ@OJACANJO@UnitClassDefenseModifier?$AA@ ; `string'
PUBLIC	?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassDefenseModifier
PUBLIC	??_C@_0BI@NFGAIELD@UnitClassAttackModifier?$AA@	; `string'
PUBLIC	?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassAttackModifier
PUBLIC	??_C@_0BH@BEGNCFMJ@FeatureDefenseModifier?$AA@	; `string'
PUBLIC	?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureDefenseModifier
PUBLIC	??_C@_0BG@NILBKJKJ@FeatureAttackModifier?$AA@	; `string'
PUBLIC	?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureAttackModifier
PUBLIC	??_C@_0BH@NAIEHADC@TerrainDefenseModifier?$AA@	; `string'
PUBLIC	?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainDefenseModifier
PUBLIC	??_C@_0BG@FAKOOKFA@TerrainAttackModifier?$AA@	; `string'
PUBLIC	?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainAttackModifier
PUBLIC	??_C@_0BF@GLPAPCOP@RoughDefenseModifier?$AA@	; `string'
PUBLIC	?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughDefenseModifier
PUBLIC	??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@	; `string'
PUBLIC	?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlankAttackModifier
PUBLIC	??_C@_0BG@FIKOLHBD@AttackWoundedModifier?$AA@	; `string'
PUBLIC	?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackWoundedModifier
PUBLIC	??_C@_0BI@JHKANDHP@AttackFortifiedModifier?$AA@	; `string'
PUBLIC	?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackFortifiedModifier
PUBLIC	??_C@_0BK@FJFHFKJE@RoughRangedAttackModifier?$AA@ ; `string'
PUBLIC	?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughRangedAttackModifier
PUBLIC	??_C@_0BE@PIHGPDLD@OpenDefenseModifier?$AA@	; `string'
PUBLIC	?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenDefenseModifier
PUBLIC	??_C@_0BJ@KDNMKBNA@OpenRangedAttackModifier?$AA@ ; `string'
PUBLIC	?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenRangedAttackModifier
PUBLIC	??_C@_0BD@KAJFPFGI@OpenAttackModifier?$AA@	; `string'
PUBLIC	?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenAttackModifier
PUBLIC	??_C@_0BE@CPGLDEOF@RoughAttackModifier?$AA@	; `string'
PUBLIC	?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughAttackModifier
PUBLIC	??_C@_0BF@PHAMCNAD@HillsDefenseModifier?$AA@	; `string'
PUBLIC	?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsDefenseModifier
PUBLIC	??_C@_0BM@HLDAPOIG@HeavyChargeDownhillModifier?$AA@ ; `string'
PUBLIC	?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHeavyChargeDownhillModifier
PUBLIC	??_C@_0BE@NKLCHBCB@HillsAttackModifier?$AA@	; `string'
PUBLIC	?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsAttackModifier
PUBLIC	??_C@_0BE@BAHDGHEA@CityDefenseModifier?$AA@	; `string'
PUBLIC	?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityDefenseModifier
PUBLIC	??_C@_0BD@BNNFDFCP@CityAttackModifier?$AA@	; `string'
PUBLIC	?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityAttackModifier
PUBLIC	??_C@_0BI@DOOFICGI@GetRangedAttackModifier?$AA@	; `string'
PUBLIC	?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedAttackModifier
PUBLIC	??_C@_0BD@DOEJPBBH@GetDefenseModifier?$AA@	; `string'
PUBLIC	?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDefenseModifier
PUBLIC	??_C@_0BC@JDEOODFC@GetAttackModifier?$AA@	; `string'
PUBLIC	?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAttackModifier
PUBLIC	??_C@_0BE@DLLGHCIO@GetAdjacentModifier?$AA@	; `string'
PUBLIC	?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentModifier
PUBLIC	??_C@_0BG@OIIHINBE@WithdrawalProbability?$AA@	; `string'
PUBLIC	?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWithdrawalProbability
PUBLIC	??_C@_0BD@NJKKJPLI@EvasionProbability?$AA@	; `string'
PUBLIC	?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEvasionProbability
PUBLIC	??_C@_0BM@EFLPCPDH@CurrInterceptionProbability?$AA@ ; `string'
PUBLIC	?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCurrInterceptionProbability
PUBLIC	??_C@_0BL@HEGDGCBF@MaxInterceptionProbability?$AA@ ; `string'
PUBLIC	?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxInterceptionProbability
PUBLIC	??_C@_0BB@PJIAODBJ@IsCityAttackOnly?$AA@	; `string'
PUBLIC	?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCityAttackOnly
PUBLIC	??_C@_0BK@DIBEDCBC@IsRangeAttackOnlyInDomain?$AA@ ; `string'
PUBLIC	?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackOnlyInDomain
PUBLIC	??_C@_0N@EJFNAKBN@IsNukeImmune?$AA@		; `string'
PUBLIC	?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNukeImmune
PUBLIC	??_C@_0M@BNMDJPAD@IsInvisible?$AA@		; `string'
PUBLIC	?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsInvisible
PUBLIC	??_C@_0BB@IMPFCGLP@IsNeverInvisible?$AA@	; `string'
PUBLIC	?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNeverInvisible
PUBLIC	??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@	; `string'
PUBLIC	?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreTerrainCost
PUBLIC	??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@	; `string'
PUBLIC	?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlatMovementCost
PUBLIC	??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@	; `string'
PUBLIC	?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveAllTerrain
PUBLIC	??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@	; `string'
PUBLIC	?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveImpassable
PUBLIC	??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@	; `string'
PUBLIC	?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreBuildingDefense
PUBLIC	??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@	; `string'
PUBLIC	?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNoDefensiveBonus
PUBLIC	??_C@_0BF@LOKEAEHO@ImmuneToFirstStrikes?$AA@	; `string'
PUBLIC	?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lImmuneToFirstStrikes
PUBLIC	??_C@_0BH@HMHIMLJG@IsSetUpForRangedAttack?$AA@	; `string'
PUBLIC	?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSetUpForRangedAttack
PUBLIC	??_C@_0BI@IKLKKCFA@CanSetUpForRangedAttack?$AA@	; `string'
PUBLIC	?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSetUpForRangedAttack
PUBLIC	??_C@_0BK@ODLOGFHD@IsMustSetUpToRangedAttack?$AA@ ; `string'
PUBLIC	?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsMustSetUpToRangedAttack
PUBLIC	??_C@_08PBIEENOB@IsRanged?$AA@			; `string'
PUBLIC	?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsRanged
PUBLIC	??_C@_0BA@BPAAIGPJ@MaxFirstStrikes?$AA@		; `string'
PUBLIC	?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxFirstStrikes
PUBLIC	??_C@_0BD@IEANKGHK@ChanceFirstStrikes?$AA@	; `string'
PUBLIC	?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChanceFirstStrikes
PUBLIC	??_C@_0N@PJAIAMPF@FirstStrikes?$AA@		; `string'
PUBLIC	?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFirstStrikes
PUBLIC	??_C@_0L@BMCJNNEJ@MaxXPValue?$AA@		; `string'
PUBLIC	?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMaxXPValue
PUBLIC	??_C@_0P@JHMJJDKG@DefenseXPValue?$AA@		; `string'
PUBLIC	?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDefenseXPValue
PUBLIC	??_C@_0O@DKJMBMOF@AttackXPValue?$AA@		; `string'
PUBLIC	?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lAttackXPValue
PUBLIC	??_C@_0BB@KHKCLNBJ@ExperienceNeeded?$AA@	; `string'
PUBLIC	?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExperienceNeeded
PUBLIC	??_C@_0BA@HLMKCAHI@FortifyModifier?$AA@		; `string'
PUBLIC	?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFortifyModifier
PUBLIC	??_C@_0BC@GLEHCFPG@IsEverFortifyable?$AA@	; `string'
PUBLIC	?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEverFortifyable
PUBLIC	??_C@_0O@OCMBHLME@IsFortifyable?$AA@		; `string'
PUBLIC	?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFortifyable
PUBLIC	??_C@_09MIKEECCD@IsWaiting?$AA@			; `string'
PUBLIC	?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsWaiting
PUBLIC	??_C@_0M@GLGABLLL@IsAutomated?$AA@		; `string'
PUBLIC	?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAutomated
PUBLIC	??_C@_0BB@OKDKFEAC@GetCaptureChance?$AA@	; `string'
PUBLIC	?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureChance
PUBLIC	??_C@_0BN@LPOGIFFC@GetBestSeaPillageInterceptor?$AA@ ; `string'
PUBLIC	?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestSeaPillageInterceptor
PUBLIC	??_C@_0BE@FILFEJIA@GetInterceptorCount?$AA@	; `string'
PUBLIC	?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInterceptorCount
PUBLIC	??_C@_0BD@LEJHGMC@GetBestInterceptor?$AA@	; `string'
PUBLIC	?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestInterceptor
PUBLIC	??_C@_0BK@LJEHDMDL@GetAirStrikeDefenseDamage?$AA@ ; `string'
PUBLIC	?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirStrikeDefenseDamage
PUBLIC	??_C@_0BF@KIPJJBIH@GetRangeCombatDamage?$AA@	; `string'
PUBLIC	?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangeCombatDamage
PUBLIC	??_C@_0BD@DKAALEFM@GetAirCombatDamage?$AA@	; `string'
PUBLIC	?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirCombatDamage
PUBLIC	??_C@_0N@JPHLBGBL@CanAirDefend?$AA@		; `string'
PUBLIC	?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirDefend
PUBLIC	??_C@_0N@BPMLDEKL@CanAirAttack?$AA@		; `string'
PUBLIC	?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirAttack
PUBLIC	??_C@_0BF@CKDOAPEN@GetRangedCombatLimit?$AA@	; `string'
PUBLIC	?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedCombatLimit
PUBLIC	??_C@_0P@PEHPLGIA@GetCombatLimit?$AA@		; `string'
PUBLIC	?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCombatLimit
PUBLIC	??_C@_0BL@DHDPDFCI@GetMaxRangedCombatStrength?$AA@ ; `string'
PUBLIC	?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxRangedCombatStrength
PUBLIC	??_C@_0BM@JJBLKOAN@GetBaseRangedCombatStrength?$AA@ ; `string'
PUBLIC	?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseRangedCombatStrength
PUBLIC	??_C@_07LBEMKGNA@IsTrade?$AA@			; `string'
PUBLIC	?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsTrade
PUBLIC	??_C@_0BH@CHHDBNLA@IsEnemyInMovementRange?$AA@	; `string'
PUBLIC	?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyInMovementRange
PUBLIC	??_C@_0BH@DAIJJIKL@IsCanAttackWithMoveNow?$AA@	; `string'
PUBLIC	?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMoveNow
PUBLIC	??_C@_0M@IEELDLKI@IsCanAttack?$AA@		; `string'
PUBLIC	?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCanAttack
PUBLIC	??_C@_0BC@DBALPDOL@IsCanAttackRanged?$AA@	; `string'
PUBLIC	?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackRanged
PUBLIC	??_C@_0BE@FMPCPPOB@IsCanAttackWithMove?$AA@	; `string'
PUBLIC	?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMove
PUBLIC	??_C@_08HOPDGJBN@CanSiege?$AA@			; `string'
PUBLIC	?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSiege
PUBLIC	??_C@_0M@EPLBJBI@IsCanDefend?$AA@		; `string'
PUBLIC	?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCanDefend
PUBLIC	??_C@_0N@FDMOBEEM@IsCombatUnit?$AA@		; `string'
PUBLIC	?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCombatUnit
PUBLIC	??_C@_0BH@NDNEFMFF@GetEmbarkedUnitDefense?$AA@	; `string'
PUBLIC	?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetEmbarkedUnitDefense
PUBLIC	??_C@_0BG@CEAGLNCO@GetMaxDefenseStrength?$AA@	; `string'
PUBLIC	?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxDefenseStrength
PUBLIC	??_C@_0BF@DAKJENBM@GetMaxAttackStrength?$AA@	; `string'
PUBLIC	?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxAttackStrength
PUBLIC	??_C@_0BG@ONCMJAK@GetBaseCombatStrength?$AA@	; `string'
PUBLIC	?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseCombatStrength
PUBLIC	??_C@_0BG@PLIEBAEL@SetBaseCombatStrength?$AA@	; `string'
PUBLIC	?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetBaseCombatStrength
PUBLIC	??_C@_0P@KICKDPKF@IsDelayedDeath?$AA@		; `string'
PUBLIC	?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsDelayedDeath
PUBLIC	??_C@_06NHLJJJEI@IsDead?$AA@			; `string'
PUBLIC	?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsDead
PUBLIC	??_C@_06BGPCCMKO@IsHurt?$AA@			; `string'
PUBLIC	?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsHurt
PUBLIC	??_C@_0BB@OHDBNFAL@GetCurrHitPoints?$AA@	; `string'
PUBLIC	?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCurrHitPoints
PUBLIC	??_C@_0BA@NIPPNLFL@GetMaxHitPoints?$AA@		; `string'
PUBLIC	?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxHitPoints
PUBLIC	??_C@_0L@ONNJBDMN@IsInCombat?$AA@		; `string'
PUBLIC	?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsInCombat
PUBLIC	??_C@_0M@HABIDFCI@IsDefending?$AA@		; `string'
PUBLIC	?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsDefending
PUBLIC	??_C@_0M@NJJFDOBE@IsAttacking?$AA@		; `string'
PUBLIC	?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAttacking
PUBLIC	??_C@_0L@MOBAIMGP@IsFighting?$AA@		; `string'
PUBLIC	?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFighting
PUBLIC	??_C@_0O@EJGNOPIA@IsGreatPerson?$AA@		; `string'
PUBLIC	?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGreatPerson
PUBLIC	??_C@_0BI@JLJEOEEL@CanCoexistWithEnemyUnit?$AA@	; `string'
PUBLIC	?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCoexistWithEnemyUnit
PUBLIC	??_C@_0BE@JOMPGGJE@IsNearFriendlyMinor?$AA@	; `string'
PUBLIC	?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearFriendlyMinor
PUBLIC	??_C@_0M@EBKACFHH@IsGoldenAge?$AA@		; `string'
PUBLIC	?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGoldenAge
PUBLIC	??_C@_06GLMJFJI@IsWork?$AA@			; `string'
PUBLIC	?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsWork
PUBLIC	??_C@_07KMNFCCCM@IsFound?$AA@			; `string'
PUBLIC	?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFound
PUBLIC	??_C@_0BB@NBBPHOPE@IsRivalTerritory?$AA@	; `string'
PUBLIC	?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRivalTerritory
PUBLIC	??_C@_0M@NDDEEDIG@IsNoCapture?$AA@		; `string'
PUBLIC	?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNoCapture
PUBLIC	??_C@_0BA@HAJEEKLO@IsOnlyDefensive?$AA@		; `string'
PUBLIC	?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOnlyDefensive
PUBLIC	??_C@_0P@GJBOHHLD@IsNoBadGoodies?$AA@		; `string'
PUBLIC	?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNoBadGoodies
PUBLIC	??_C@_08JFPBBIMB@WorkRate?$AA@			; `string'
PUBLIC	?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lWorkRate
PUBLIC	??_C@_0N@GJAMOEAC@GetBuildType?$AA@		; `string'
PUBLIC	?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetBuildType
PUBLIC	??_C@_0O@NKBEKKHA@CanBuildRoute?$AA@		; `string'
PUBLIC	?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanBuildRoute
PUBLIC	??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@		; `string'
PUBLIC	?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNukeDamageLevel
PUBLIC	??_C@_05CFMCGLCK@Range?$AA@			; `string'
PUBLIC	?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lRange
PUBLIC	??_C@_08BEAAIBNL@HasMoved?$AA@			; `string'
PUBLIC	?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasMoved
PUBLIC	??_C@_07KJCADMEO@CanMove?$AA@			; `string'
PUBLIC	?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanMove
PUBLIC	??_C@_09FMBOGIMP@MovesLeft?$AA@			; `string'
PUBLIC	?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMovesLeft
PUBLIC	??_C@_08FJBDBEPI@MaxMoves?$AA@			; `string'
PUBLIC	?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMaxMoves
PUBLIC	??_C@_0BA@ENFGLHEB@VisibilityRange?$AA@		; `string'
PUBLIC	?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lVisibilityRange
PUBLIC	??_C@_07NIJBBMLI@IsHuman?$AA@			; `string'
PUBLIC	?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsHuman
PUBLIC	??_C@_0M@NJNEDJLP@IsBarbarian?$AA@		; `string'
PUBLIC	?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsBarbarian
PUBLIC	??_C@_0M@ILNPEBIO@FlavorValue?$AA@		; `string'
PUBLIC	?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFlavorValue
PUBLIC	??_C@_0N@JCHAPCE@GetDropRange?$AA@		; `string'
PUBLIC	?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDropRange
PUBLIC	??_C@_0BE@JPOIAPEI@GetSeeInvisibleType?$AA@	; `string'
PUBLIC	?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSeeInvisibleType
PUBLIC	??_C@_0BB@IDGIMNCA@GetInvisibleType?$AA@	; `string'
PUBLIC	?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInvisibleType
PUBLIC	??_C@_0O@HCLPONDK@GetDomainType?$AA@		; `string'
PUBLIC	?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDomainType
PUBLIC	??_C@_0O@CFHACEO@SetUnitAIType?$AA@		; `string'
PUBLIC	?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetUnitAIType
PUBLIC	??_C@_0O@HNEJLBDJ@GetUnitAIType?$AA@		; `string'
PUBLIC	?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitAIType
PUBLIC	??_C@_0BC@GBCAHMII@GetUnitCombatType?$AA@	; `string'
PUBLIC	?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitCombatType
PUBLIC	??_C@_0BD@JDJCDLLA@GetCaptureUnitType?$AA@	; `string'
PUBLIC	?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureUnitType
PUBLIC	??_C@_0BD@GBFKJKHH@GetSpecialUnitType?$AA@	; `string'
PUBLIC	?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpecialUnitType
PUBLIC	??_C@_0BE@OGLFKPOE@GetCivilizationType?$AA@	; `string'
PUBLIC	?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCivilizationType
PUBLIC	??_C@_0BA@NDPGKNBO@GetHandicapType?$AA@		; `string'
PUBLIC	?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHandicapType
PUBLIC	??_C@_0BO@ODALBDFM@GetNumResourceNeededToUpgrade?$AA@ ; `string'
PUBLIC	?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumResourceNeededToUpgrade
PUBLIC	??_C@_0BD@HPPLIDDI@CanUpgradeRightNow?$AA@	; `string'
PUBLIC	?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUpgradeRightNow
PUBLIC	??_C@_0N@BGKJNLFL@UpgradePrice?$AA@		; `string'
PUBLIC	?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lUpgradePrice
PUBLIC	??_C@_0BD@DBHKLJBH@GetUpgradeUnitType?$AA@	; `string'
PUBLIC	?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeUnitType
PUBLIC	??_C@_07EDLKEBK@Promote?$AA@			; `string'
PUBLIC	?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPromote
PUBLIC	??_C@_0L@OPLAIAAJ@CanPromote?$AA@		; `string'
PUBLIC	?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanPromote
PUBLIC	??_C@_0P@FHKIFAJK@GiveExperience?$AA@		; `string'
PUBLIC	?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGiveExperience
PUBLIC	??_C@_0BC@FKOLNGFD@CanGiveExperience?$AA@	; `string'
PUBLIC	?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGiveExperience
PUBLIC	??_C@_04OAKCLFCP@Lead?$AA@			; `string'
PUBLIC	?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lLead
PUBLIC	??_C@_07PLIPHBCO@CanLead?$AA@			; `string'
PUBLIC	?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLead
PUBLIC	??_C@_08EMPBKDLI@CanBuild?$AA@			; `string'
PUBLIC	?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanBuild
PUBLIC	??_C@_0BA@CHPOAIEH@GetBlastTourism?$AA@		; `string'
PUBLIC	?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlastTourism
PUBLIC	??_C@_0BH@OOEAJGKD@GetGivePoliciesCulture?$AA@	; `string'
PUBLIC	?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGivePoliciesCulture
PUBLIC	??_C@_0BC@HOFBCHIL@GetGoldenAgeTurns?$AA@	; `string'
PUBLIC	?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeTurns
PUBLIC	??_C@_0N@EOBJHMDF@CanGoldenAge?$AA@		; `string'
PUBLIC	?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanGoldenAge
PUBLIC	??_C@_0BC@BJJCCDBA@CanBuildSpaceship?$AA@	; `string'
PUBLIC	?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildSpaceship
PUBLIC	??_C@_0P@GCNIAAJM@CanRepairFleet?$AA@		; `string'
PUBLIC	?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRepairFleet
PUBLIC	??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@		; `string'
PUBLIC	?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuyCityState
PUBLIC	??_C@_08PJOCNGDI@CanTrade?$AA@			; `string'
PUBLIC	?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanTrade
PUBLIC	??_C@_0BC@LGEOGBNA@GetTradeInfluence?$AA@	; `string'
PUBLIC	?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeInfluence
PUBLIC	??_C@_0N@FCJOHAFH@GetTradeGold?$AA@		; `string'
PUBLIC	?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetTradeGold
PUBLIC	??_C@_0BD@KJHAMHFH@GetHurryProduction?$AA@	; `string'
PUBLIC	?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHurryProduction
PUBLIC	??_C@_0BC@KNNAIDOL@GetDiscoverAmount?$AA@	; `string'
PUBLIC	?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDiscoverAmount
PUBLIC	??_C@_0M@IELKHCBB@CanDiscover?$AA@		; `string'
PUBLIC	?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDiscover
PUBLIC	??_C@_0N@OBKNDGPF@CanConstruct?$AA@		; `string'
PUBLIC	?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanConstruct
PUBLIC	??_C@_07OPIONNNI@CanJoin?$AA@			; `string'
PUBLIC	?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanJoin
PUBLIC	??_C@_08OEHLFCME@CanFound?$AA@			; `string'
PUBLIC	?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanFound
PUBLIC	??_C@_0L@JGLKKBMI@IsSelected?$AA@		; `string'
PUBLIC	?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsSelected
PUBLIC	??_C@_0L@MPCCHJDJ@CanPillage?$AA@		; `string'
PUBLIC	?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanPillage
PUBLIC	??_C@_0BH@DNENGFGL@GetExoticGoodsXPAmount?$AA@	; `string'
PUBLIC	?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsXPAmount
PUBLIC	??_C@_0BJ@IPBHFLKL@GetExoticGoodsGoldAmount?$AA@ ; `string'
PUBLIC	?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsGoldAmount
PUBLIC	??_C@_0BE@DBMFLENB@CanMakeTradeRouteAt?$AA@	; `string'
PUBLIC	?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRouteAt
PUBLIC	??_C@_0BC@OKNIIGFN@CanMakeTradeRoute?$AA@	; `string'
PUBLIC	?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRoute
PUBLIC	??_C@_0O@PGFAMOPK@CanParadropAt?$AA@		; `string'
PUBLIC	?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanParadropAt
PUBLIC	??_C@_0M@IKNPJBHE@CanParadrop?$AA@		; `string'
PUBLIC	?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanParadrop
PUBLIC	??_C@_0BB@HFDCOJOB@CanRangeStrikeAt?$AA@	; `string'
PUBLIC	?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrikeAt
PUBLIC	??_C@_0P@CDOKKCEP@CanRangeStrike?$AA@		; `string'
PUBLIC	?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRangeStrike
PUBLIC	??_C@_09HAELIEHK@CanNukeAt?$AA@			; `string'
PUBLIC	?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanNukeAt
PUBLIC	??_C@_07MFNKMBEG@CanNuke?$AA@			; `string'
PUBLIC	?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanNuke
PUBLIC	??_C@_0N@IJEAOBKF@IsNukeVictim?$AA@		; `string'
PUBLIC	?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNukeVictim
PUBLIC	??_C@_0N@IFJNICON@CanAirliftAt?$AA@		; `string'
PUBLIC	?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirliftAt
PUBLIC	??_C@_0L@NBEAEKKP@CanAirlift?$AA@		; `string'
PUBLIC	?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirlift
PUBLIC	??_C@_0BH@GAMNCMGE@IsRangeAttackIgnoreLOS?$AA@	; `string'
PUBLIC	?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackIgnoreLOS
PUBLIC	??_C@_06HBNONMMC@Embark?$AA@			; `string'
PUBLIC	?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lEmbark
PUBLIC	??_C@_0M@OAMKBJM@CanRebaseAt?$AA@		; `string'
PUBLIC	?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRebaseAt
PUBLIC	??_C@_0BB@EAECPAIA@CanDisembarkOnto?$AA@	; `string'
PUBLIC	?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembarkOnto
PUBLIC	??_C@_0O@EFELBNGC@CanEmbarkOnto?$AA@		; `string'
PUBLIC	?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanEmbarkOnto
PUBLIC	??_C@_0N@NICHBKMI@CanDisembark?$AA@		; `string'
PUBLIC	?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDisembark
PUBLIC	??_C@_09PEMMPAAH@CanEmbark?$AA@			; `string'
PUBLIC	?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanEmbark
PUBLIC	??_C@_09MGFCOBOB@CanSentry?$AA@			; `string'
PUBLIC	?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSentry
PUBLIC	??_C@_07MGNGFNOG@CanHeal?$AA@			; `string'
PUBLIC	?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanHeal
PUBLIC	??_C@_0M@DBDMLICA@SetEmbarked?$AA@		; `string'
PUBLIC	?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetEmbarked
PUBLIC	??_C@_0L@ENBEBDG@IsEmbarked?$AA@		; `string'
PUBLIC	?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsEmbarked
PUBLIC	??_C@_0N@IJIOKHCL@CanAirPatrol?$AA@		; `string'
PUBLIC	?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirPatrol
PUBLIC	??_C@_0L@FNGLNEIC@CanFortify?$AA@		; `string'
PUBLIC	?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanFortify
PUBLIC	??_C@_08ICCCNEBH@CanSleep?$AA@			; `string'
PUBLIC	?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSleep
PUBLIC	??_C@_07GJGKKENJ@CanHold?$AA@			; `string'
PUBLIC	?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanHold
PUBLIC	??_C@_0N@HEIIGDEG@CanUnloadAll?$AA@		; `string'
PUBLIC	?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanUnloadAll
PUBLIC	??_C@_09NDJBNGND@CanUnload?$AA@			; `string'
PUBLIC	?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanUnload
PUBLIC	??_C@_07JEDCJBEK@CanLoad?$AA@			; `string'
PUBLIC	?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLoad
PUBLIC	??_C@_0M@DFDFOFGE@CanLoadUnit?$AA@		; `string'
PUBLIC	?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLoadUnit
PUBLIC	??_C@_0BA@DPDGNGPL@CanDistanceGift?$AA@		; `string'
PUBLIC	?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDistanceGift
PUBLIC	??_C@_07IJAEPLFD@CanGift?$AA@			; `string'
PUBLIC	?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanGift
PUBLIC	??_C@_0N@PIOOLHFL@GetScrapGold?$AA@		; `string'
PUBLIC	?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetScrapGold
PUBLIC	??_C@_08MKLFIEDM@CanScrap?$AA@			; `string'
PUBLIC	?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanScrap
PUBLIC	??_C@_0M@PIDFJMFI@CanAutomate?$AA@		; `string'
PUBLIC	?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAutomate
PUBLIC	??_C@_0BD@GAJIECNL@GetFireSupportUnit?$AA@	; `string'
PUBLIC	?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFireSupportUnit
PUBLIC	??_C@_0BA@PBKOJKLI@GetCombatDamage?$AA@		; `string'
PUBLIC	?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatDamage
PUBLIC	??_C@_0BH@HCNCEPKK@JumpToNearestValidPlot?$AA@	; `string'
PUBLIC	?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lJumpToNearestValidPlot
PUBLIC	??_C@_0P@BOMOGPDF@CanMoveThrough?$AA@		; `string'
PUBLIC	?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanMoveThrough
PUBLIC	??_C@_0BE@BAHEKEJL@CanMoveOrAttackInto?$AA@	; `string'
PUBLIC	?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveOrAttackInto
PUBLIC	??_C@_0BJ@DGAEPIGI@GetDeclareWarRangeStrike?$AA@ ; `string'
PUBLIC	?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDeclareWarRangeStrike
PUBLIC	??_C@_0BC@CNEKLHMJ@CanEnterTerritory?$AA@	; `string'
PUBLIC	?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEnterTerritory
PUBLIC	??_C@_0N@HCLHBILF@GeneratePath?$AA@		; `string'
PUBLIC	?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGeneratePath
PUBLIC	??_C@_0BD@BDLBDMBH@GetPathEndTurnPlot?$AA@	; `string'
PUBLIC	?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPathEndTurnPlot
PUBLIC	??_C@_09MHJIPALD@DoCommand?$AA@			; `string'
PUBLIC	?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDoCommand
PUBLIC	??_C@_0N@JKHELOHL@CanDoCommand?$AA@		; `string'
PUBLIC	?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDoCommand
PUBLIC	??_C@_0BF@FAODCLBP@IsBetterDefenderThan?$AA@	; `string'
PUBLIC	?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBetterDefenderThan
PUBLIC	??_C@_0BE@OOKFIDHO@IsActionRecommended?$AA@	; `string'
PUBLIC	?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsActionRecommended
PUBLIC	??_C@_04NIFFMPNM@Kill?$AA@			; `string'
PUBLIC	?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lKill
PUBLIC	??_C@_07BEIDKFCM@Convert?$AA@			; `string'
PUBLIC	?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lConvert
PUBLIC	??_C@_06OAPDBHPB@IsNone?$AA@			; `string'
PUBLIC	?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsNone
PUBLIC	?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z	; CvLuaUnit::PushMethods
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushcclosure:PROC
;	COMDAT ??_C@_0CA@GENACOON@IsPlunderBlockedByOpposingTrait?$AA@
CONST	SEGMENT
??_C@_0CA@GENACOON@IsPlunderBlockedByOpposingTrait?$AA@ DB 'IsPlunderBloc'
	DB	'kedByOpposingTrait', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HLBAIPJO@IsRangedSupportFire?$AA@
CONST	SEGMENT
??_C@_0BE@HLBAIPJO@IsRangedSupportFire?$AA@ DB 'IsRangedSupportFire', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCGBFCNG@IsLargerCivThan?$AA@
CONST	SEGMENT
??_C@_0BA@PCGBFCNG@IsLargerCivThan?$AA@ DB 'IsLargerCivThan', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DNHALCAP@IsHigherTechThan?$AA@
CONST	SEGMENT
??_C@_0BB@DNHALCAP@IsHigherTechThan?$AA@ DB 'IsHigherTechThan', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IFBCJAOO@SetDeployFromOperationTurn?$AA@
CONST	SEGMENT
??_C@_0BL@IFBCJAOO@SetDeployFromOperationTurn?$AA@ DB 'SetDeployFromOpera'
	DB	'tionTurn', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OKCCHHON@ExecuteSpecialExploreMove?$AA@
CONST	SEGMENT
??_C@_0BK@OKCCHHON@ExecuteSpecialExploreMove?$AA@ DB 'ExecuteSpecialExplo'
	DB	'reMove', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JEHNJEHH@CanStartMission?$AA@
CONST	SEGMENT
??_C@_0BA@JEHNJEHH@CanStartMission?$AA@ DB 'CanStartMission', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BNAEAOBO@LastMissionPlot?$AA@
CONST	SEGMENT
??_C@_0BA@BNAEAOBO@LastMissionPlot?$AA@ DB 'LastMissionPlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNCAEGNI@PopMission?$AA@
CONST	SEGMENT
??_C@_0L@FNCAEGNI@PopMission?$AA@ DB 'PopMission', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KMEIMJMN@PushMission?$AA@
CONST	SEGMENT
??_C@_0M@KMEIMJMN@PushMission?$AA@ DB 'PushMission', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LBKNMOHC@RangeStrike?$AA@
CONST	SEGMENT
??_C@_0M@LBKNMOHC@RangeStrike?$AA@ DB 'RangeStrike', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJPLHKJ@GetGreatWorkSlotType?$AA@
CONST	SEGMENT
??_C@_0BF@BJPLHKJ@GetGreatWorkSlotType?$AA@ DB 'GetGreatWorkSlotType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GPAANOLE@GetTourismBlastStrength?$AA@
CONST	SEGMENT
??_C@_0BI@GPAANOLE@GetTourismBlastStrength?$AA@ DB 'GetTourismBlastStreng'
	DB	'th', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HBADFCCC@GetMajorityReligionAfterSpread?$AA@
CONST	SEGMENT
??_C@_0BP@HBADFCCC@GetMajorityReligionAfterSpread?$AA@ DB 'GetMajorityRel'
	DB	'igionAfterSpread', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NDOCOGDO@GetNumFollowersAfterSpread?$AA@
CONST	SEGMENT
??_C@_0BL@NDOCOGDO@GetNumFollowersAfterSpread?$AA@ DB 'GetNumFollowersAft'
	DB	'erSpread', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CCJGDKMN@GetSpreadsLeft?$AA@
CONST	SEGMENT
??_C@_0P@CCJGDKMN@GetSpreadsLeft?$AA@ DB 'GetSpreadsLeft', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CMODHJMA@GetConversionStrength?$AA@
CONST	SEGMENT
??_C@_0BG@CMODHJMA@GetConversionStrength?$AA@ DB 'GetConversionStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMHLBOLL@GetReligion?$AA@
CONST	SEGMENT
??_C@_0M@GMHLBOLL@GetReligion?$AA@ DB 'GetReligion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OICOCAHF@IsBusy?$AA@
CONST	SEGMENT
??_C@_06OICOCAHF@IsBusy?$AA@ DB 'IsBusy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BOALNFPB@IsReadyToMove?$AA@
CONST	SEGMENT
??_C@_0O@BOALNFPB@IsReadyToMove?$AA@ DB 'IsReadyToMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PBKPFNFP@GetActivityType?$AA@
CONST	SEGMENT
??_C@_0BA@PBKPFNFP@GetActivityType?$AA@ DB 'GetActivityType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MMNGCCEN@SetHasPromotion?$AA@
CONST	SEGMENT
??_C@_0BA@MMNGCCEN@SetHasPromotion?$AA@ DB 'SetHasPromotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LONCCLND@IsHasPromotion?$AA@
CONST	SEGMENT
??_C@_0P@LONCCLND@IsHasPromotion?$AA@ DB 'IsHasPromotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBEGEPDL@IsPromotionValid?$AA@
CONST	SEGMENT
??_C@_0BB@LBEGEPDL@IsPromotionValid?$AA@ DB 'IsPromotionValid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KEAILGDL@CanAcquirePromotionAny?$AA@
CONST	SEGMENT
??_C@_0BH@KEAILGDL@CanAcquirePromotionAny?$AA@ DB 'CanAcquirePromotionAny'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NMKFIMAO@CanAcquirePromotion?$AA@
CONST	SEGMENT
??_C@_0BE@NMKFIMAO@CanAcquirePromotion?$AA@ DB 'CanAcquirePromotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IJFPHAOD@GetUnitClassModifier?$AA@
CONST	SEGMENT
??_C@_0BF@IJFPHAOD@GetUnitClassModifier?$AA@ DB 'GetUnitClassModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FCNEPMJP@GetExtraUnitCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BL@FCNEPMJP@GetExtraUnitCombatModifier?$AA@ DB 'GetExtraUnitCombat'
	DB	'Modifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MOKLIMJL@GetExtraFeatureDefensePercent?$AA@
CONST	SEGMENT
??_C@_0BO@MOKLIMJL@GetExtraFeatureDefensePercent?$AA@ DB 'GetExtraFeature'
	DB	'DefensePercent', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CPBINKED@GetExtraFeatureAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BN@CPBINKED@GetExtraFeatureAttackPercent?$AA@ DB 'GetExtraFeatureA'
	DB	'ttackPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EGLEMPGC@GetExtraTerrainDefensePercent?$AA@
CONST	SEGMENT
??_C@_0BO@EGLEMPGC@GetExtraTerrainDefensePercent?$AA@ DB 'GetExtraTerrain'
	DB	'DefensePercent', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DIABMFJL@GetExtraTerrainAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BN@DIABMFJL@GetExtraTerrainAttackPercent?$AA@ DB 'GetExtraTerrainA'
	DB	'ttackPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DGJIKHMC@SetScenarioData?$AA@
CONST	SEGMENT
??_C@_0BA@DGJIKHMC@SetScenarioData?$AA@ DB 'SetScenarioData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIONFNL@GetScenarioData?$AA@
CONST	SEGMENT
??_C@_0BA@EIONFNL@GetScenarioData?$AA@ DB 'GetScenarioData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PGOPIEFE@SetScriptData?$AA@
CONST	SEGMENT
??_C@_0O@PGOPIEFE@SetScriptData?$AA@ DB 'SetScriptData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IJPBDHCD@GetScriptData?$AA@
CONST	SEGMENT
??_C@_0O@IJPBDHCD@GetScriptData?$AA@ DB 'GetScriptData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLKIIJFH@IsFeatureDoubleMove?$AA@
CONST	SEGMENT
??_C@_0BE@DLKIIJFH@IsFeatureDoubleMove?$AA@ DB 'IsFeatureDoubleMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KAIIOOFC@IsTerrainDoubleMove?$AA@
CONST	SEGMENT
??_C@_0BE@KAIIOOFC@IsTerrainDoubleMove?$AA@ DB 'IsTerrainDoubleMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DEJFEJPJ@SetName?$AA@
CONST	SEGMENT
??_C@_07DEJFEJPJ@SetName?$AA@ DB 'SetName', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJBAHION@GetNameKey?$AA@
CONST	SEGMENT
??_C@_0L@PJBAHION@GetNameKey?$AA@ DB 'GetNameKey', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMAOHACP@HasName?$AA@
CONST	SEGMENT
??_C@_07PMAOHACP@HasName?$AA@ DB 'HasName', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFOGDJDK@GetNameNoDesc?$AA@
CONST	SEGMENT
??_C@_0O@OFOGDJDK@GetNameNoDesc?$AA@ DB 'GetNameNoDesc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMGEHGCI@GetName?$AA@
CONST	SEGMENT
??_C@_07MMGEHGCI@GetName?$AA@ DB 'GetName', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LGDAMEMJ@GetExtraDomainModifier?$AA@
CONST	SEGMENT
??_C@_0BH@LGDAMEMJ@GetExtraDomainModifier?$AA@ DB 'GetExtraDomainModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCNKNHAD@IsCargo?$AA@
CONST	SEGMENT
??_C@_07DCNKNHAD@IsCargo?$AA@ DB 'IsCargo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PJKLKFOJ@GetTransportUnit?$AA@
CONST	SEGMENT
??_C@_0BB@PJKLKFOJ@GetTransportUnit?$AA@ DB 'GetTransportUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GIBMJJJB@IsEnemyCityAdjacent?$AA@
CONST	SEGMENT
??_C@_0BE@GIBMJJJB@IsEnemyCityAdjacent?$AA@ DB 'IsEnemyCityAdjacent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJLNBBGK@GetNumEnemyUnitsAdjacent?$AA@
CONST	SEGMENT
??_C@_0BJ@DJLNBBGK@GetNumEnemyUnitsAdjacent?$AA@ DB 'GetNumEnemyUnitsAdja'
	DB	'cent', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EHMHKIDN@IsFriendlyUnitAdjacent?$AA@
CONST	SEGMENT
??_C@_0BH@EHMHKIDN@IsFriendlyUnitAdjacent?$AA@ DB 'IsFriendlyUnitAdjacent'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LIDKBFIB@GetNearbyImprovementModifier?$AA@
CONST	SEGMENT
??_C@_0BN@LIDKBFIB@GetNearbyImprovementModifier?$AA@ DB 'GetNearbyImprove'
	DB	'mentModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JPLHPCNE@IsNearSapper?$AA@
CONST	SEGMENT
??_C@_0N@JPLHPCNE@IsNearSapper?$AA@ DB 'IsNearSapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BNDFJFHP@GetGreatGeneralCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BO@BNDFJFHP@GetGreatGeneralCombatModifier?$AA@ DB 'GetGreatGeneral'
	DB	'CombatModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NPLEODON@GetReverseGreatGeneralModifier?$AA@
CONST	SEGMENT
??_C@_0BP@NPLEODON@GetReverseGreatGeneralModifier?$AA@ DB 'GetReverseGrea'
	DB	'tGeneralModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GGCJAMLP@IsIgnoreGreatGeneralBenefit?$AA@
CONST	SEGMENT
??_C@_0BM@GGCJAMLP@IsIgnoreGreatGeneralBenefit?$AA@ DB 'IsIgnoreGreatGene'
	DB	'ralBenefit', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGFCIODH@IsStackedGreatGeneral?$AA@
CONST	SEGMENT
??_C@_0BG@EGFCIODH@IsStackedGreatGeneral?$AA@ DB 'IsStackedGreatGeneral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FIBLLGCA@IsNearGreatGeneral?$AA@
CONST	SEGMENT
??_C@_0BD@FIBLLGCA@IsNearGreatGeneral?$AA@ DB 'IsNearGreatGeneral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CCMIAMOE@SetLeaderUnitType?$AA@
CONST	SEGMENT
??_C@_0BC@CCMIAMOE@SetLeaderUnitType?$AA@ DB 'SetLeaderUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMDIHPK@GetLeaderUnitType?$AA@
CONST	SEGMENT
??_C@_0BC@HMDIHPK@GetLeaderUnitType?$AA@ DB 'GetLeaderUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMDDFGBF@GetUnitClassType?$AA@
CONST	SEGMENT
??_C@_0BB@DMDDFGBF@GetUnitClassType?$AA@ DB 'GetUnitClassType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PKBGPJIJ@GetUnitType?$AA@
CONST	SEGMENT
??_C@_0M@PKBGPJIJ@GetUnitType?$AA@ DB 'GetUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PPJKPBMI@GetUnitPortraitOffset?$AA@
CONST	SEGMENT
??_C@_0BG@PPJKPBMI@GetUnitPortraitOffset?$AA@ DB 'GetUnitPortraitOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPHCCLK@GetUnitFlagIconOffset?$AA@
CONST	SEGMENT
??_C@_0BG@GPHCCLK@GetUnitFlagIconOffset?$AA@ DB 'GetUnitFlagIconOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KIJFBNDA@GetTeam?$AA@
CONST	SEGMENT
??_C@_07KIJFBNDA@GetTeam?$AA@ DB 'GetTeam', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DFCAPMCK@SetOriginalOwner?$AA@
CONST	SEGMENT
??_C@_0BB@DFCAPMCK@SetOriginalOwner?$AA@ DB 'SetOriginalOwner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBHJECJI@GetOriginalOwner?$AA@
CONST	SEGMENT
??_C@_0BB@FBHJECJI@GetOriginalOwner?$AA@ DB 'GetOriginalOwner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OAMOBMMB@GetCombatOwner?$AA@
CONST	SEGMENT
??_C@_0P@OAMOBMMB@GetCombatOwner?$AA@ DB 'GetCombatOwner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJDHAACE@GetVisualOwner?$AA@
CONST	SEGMENT
??_C@_0P@DJDHAACE@GetVisualOwner?$AA@ DB 'GetVisualOwner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BODJMJJB@GetOwner?$AA@
CONST	SEGMENT
??_C@_08BODJMJJB@GetOwner?$AA@ DB 'GetOwner', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EMJHOBEL@SetPromotionReady?$AA@
CONST	SEGMENT
??_C@_0BC@EMJHOBEL@SetPromotionReady?$AA@ DB 'SetPromotionReady', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKIJIMHP@IsPromotionReady?$AA@
CONST	SEGMENT
??_C@_0BB@NKIJIMHP@IsPromotionReady?$AA@ DB 'IsPromotionReady', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHMMLBFN@SetMadeInterception?$AA@
CONST	SEGMENT
??_C@_0BE@CHMMLBFN@SetMadeInterception?$AA@ DB 'SetMadeInterception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CMPDBBFM@isOutOfInterceptions?$AA@
CONST	SEGMENT
??_C@_0BF@CMPDBBFM@isOutOfInterceptions?$AA@ DB 'isOutOfInterceptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKFMNOAP@SetMadeAttack?$AA@
CONST	SEGMENT
??_C@_0O@MKFMNOAP@SetMadeAttack?$AA@ DB 'SetMadeAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IKHOEAOE@IsOutOfAttacks?$AA@
CONST	SEGMENT
??_C@_0P@IKHOEAOE@IsOutOfAttacks?$AA@ DB 'IsOutOfAttacks', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CFFKEBAO@GetKamikazePercent?$AA@
CONST	SEGMENT
??_C@_0BD@CFFKEBAO@GetKamikazePercent?$AA@ DB 'GetKamikazePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MJPLLDMK@GetExperiencePercent?$AA@
CONST	SEGMENT
??_C@_0BF@MJPLLDMK@GetExperiencePercent?$AA@ DB 'GetExperiencePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEDPIMNK@GetUpgradeDiscount?$AA@
CONST	SEGMENT
??_C@_0BD@IEDPIMNK@GetUpgradeDiscount?$AA@ DB 'GetUpgradeDiscount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HINGJFFL@GetPillageChange?$AA@
CONST	SEGMENT
??_C@_0BB@HINGJFFL@GetPillageChange?$AA@ DB 'GetPillageChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FFFJPCKI@GetExtraOpenDefensePercent?$AA@
CONST	SEGMENT
??_C@_0BL@FFFJPCKI@GetExtraOpenDefensePercent?$AA@ DB 'GetExtraOpenDefens'
	DB	'ePercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JEMHENOI@GetExtraAttackWoundedMod?$AA@
CONST	SEGMENT
??_C@_0BJ@JEMHENOI@GetExtraAttackWoundedMod?$AA@ DB 'GetExtraAttackWounde'
	DB	'dMod', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PDPEFOMH@GetExtraAttackFortifiedMod?$AA@
CONST	SEGMENT
??_C@_0BL@PDPEFOMH@GetExtraAttackFortifiedMod?$AA@ DB 'GetExtraAttackFort'
	DB	'ifiedMod', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JELKIHJI@GetExtraRoughRangedAttackMod?$AA@
CONST	SEGMENT
??_C@_0BN@JELKIHJI@GetExtraRoughRangedAttackMod?$AA@ DB 'GetExtraRoughRan'
	DB	'gedAttackMod', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EFEMEKEJ@GetExtraRoughAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BL@EFEMEKEJ@GetExtraRoughAttackPercent?$AA@ DB 'GetExtraRoughAttac'
	DB	'kPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CBBBAFGK@GetExtraOpenRangedAttackMod?$AA@
CONST	SEGMENT
??_C@_0BM@CBBBAFGK@GetExtraOpenRangedAttackMod?$AA@ DB 'GetExtraOpenRange'
	DB	'dAttackMod', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LJKEFJID@GetExtraOpenAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BK@LJKEFJID@GetExtraOpenAttackPercent?$AA@ DB 'GetExtraOpenAttackP'
	DB	'ercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NLMNHENB@GetExtraHillsDefensePercent?$AA@
CONST	SEGMENT
??_C@_0BM@NLMNHENB@GetExtraHillsDefensePercent?$AA@ DB 'GetExtraHillsDefe'
	DB	'nsePercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JDMNNJBO@GetExtraHillsAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BL@JDMNNJBO@GetExtraHillsAttackPercent?$AA@ DB 'GetExtraHillsAttac'
	DB	'kPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OIBJDCOP@GetExtraCityDefensePercent?$AA@
CONST	SEGMENT
??_C@_0BL@OIBJDCOP@GetExtraCityDefensePercent?$AA@ DB 'GetExtraCityDefens'
	DB	'ePercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EEJGACHD@GetExtraCityAttackPercent?$AA@
CONST	SEGMENT
??_C@_0BK@EEJGACHD@GetExtraCityAttackPercent?$AA@ DB 'GetExtraCityAttackP'
	DB	'ercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PFMFCNHJ@GetCombatStrengthNearFriendlyMin@
CONST	SEGMENT
??_C@_0CD@PFMFCNHJ@GetCombatStrengthNearFriendlyMin@ DB 'GetCombatStrengt'
	DB	'hNearFriendlyMinor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BHKIBPGK@GetGoldenAgeForeignAttackBonus?$AA@
CONST	SEGMENT
??_C@_0BP@BHKIBPGK@GetGoldenAgeForeignAttackBonus?$AA@ DB 'GetGoldenAgeFo'
	DB	'reignAttackBonus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IJLJKKDJ@GetOutsideFriendlyLandsModifier?$AA@
CONST	SEGMENT
??_C@_0CA@IJLJKKDJ@GetOutsideFriendlyLandsModifier?$AA@ DB 'GetOutsideFri'
	DB	'endlyLandsModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KLDAEKDJ@GetFriendlyLandsAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BP@KLDAEKDJ@GetFriendlyLandsAttackModifier?$AA@ DB 'GetFriendlyLan'
	DB	'dsAttackModifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ECEPCDCN@GetFriendlyLandsModifier?$AA@
CONST	SEGMENT
??_C@_0BJ@ECEPCDCN@GetFriendlyLandsModifier?$AA@ DB 'GetFriendlyLandsModi'
	DB	'fier', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KGCGLIBN@GetExtraCombatPercent?$AA@
CONST	SEGMENT
??_C@_0BG@KGCGLIBN@GetExtraCombatPercent?$AA@ DB 'GetExtraCombatPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOPILIOB@GetAdjacentTileHeal?$AA@
CONST	SEGMENT
??_C@_0BE@FOPILIOB@GetAdjacentTileHeal?$AA@ DB 'GetAdjacentTileHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJJDJAFH@GetSameTileHeal?$AA@
CONST	SEGMENT
??_C@_0BA@PJJDJAFH@GetSameTileHeal?$AA@ DB 'GetSameTileHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FDAKDOOD@GetExtraFriendlyHeal?$AA@
CONST	SEGMENT
??_C@_0BF@FDAKDOOD@GetExtraFriendlyHeal?$AA@ DB 'GetExtraFriendlyHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PPNDFFOE@GetExtraNeutralHeal?$AA@
CONST	SEGMENT
??_C@_0BE@PPNDFFOE@GetExtraNeutralHeal?$AA@ DB 'GetExtraNeutralHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKCEPOIK@GetExtraEnemyHeal?$AA@
CONST	SEGMENT
??_C@_0BC@BKCEPOIK@GetExtraEnemyHeal?$AA@ DB 'GetExtraEnemyHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOALAFL@GetExtraWithdrawal?$AA@
CONST	SEGMENT
??_C@_0BD@IOALAFL@GetExtraWithdrawal?$AA@ DB 'GetExtraWithdrawal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ODNAIGPH@GetExtraChanceFirstStrikes?$AA@
CONST	SEGMENT
??_C@_0BL@ODNAIGPH@GetExtraChanceFirstStrikes?$AA@ DB 'GetExtraChanceFirs'
	DB	'tStrikes', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NHNKKCBF@GetExtraFirstStrikes?$AA@
CONST	SEGMENT
??_C@_0BF@NHNKKCBF@GetExtraFirstStrikes?$AA@ DB 'GetExtraFirstStrikes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FKMGFEFH@GetExtraEvasion?$AA@
CONST	SEGMENT
??_C@_0BA@FKMGFEFH@GetExtraEvasion?$AA@ DB 'GetExtraEvasion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MAMPNOBO@GetExtraIntercept?$AA@
CONST	SEGMENT
??_C@_0BC@MAMPNOBO@GetExtraIntercept?$AA@ DB 'GetExtraIntercept', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HJCFAOBN@GetExtraRange?$AA@
CONST	SEGMENT
??_C@_0O@HJCFAOBN@GetExtraRange?$AA@ DB 'GetExtraRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OMEPGIG@GetExtraMoveDiscount?$AA@
CONST	SEGMENT
??_C@_0BF@OMEPGIG@GetExtraMoveDiscount?$AA@ DB 'GetExtraMoveDiscount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LOCEBOPL@GetExtraMoves?$AA@
CONST	SEGMENT
??_C@_0O@LOCEBOPL@GetExtraMoves?$AA@ DB 'GetExtraMoves', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LMONEFFA@GetExtraVisibilityRange?$AA@
CONST	SEGMENT
??_C@_0BI@LMONEFFA@GetExtraVisibilityRange?$AA@ DB 'GetExtraVisibilityRan'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NDGFBOMB@GetGarrisonedCity?$AA@
CONST	SEGMENT
??_C@_0BC@NDGFBOMB@GetGarrisonedCity?$AA@ DB 'GetGarrisonedCity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HELPNODL@IsGarrisoned?$AA@
CONST	SEGMENT
??_C@_0N@HELPNODL@IsGarrisoned?$AA@ DB 'IsGarrisoned', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BEKIIEEN@IsHillsDoubleMove?$AA@
CONST	SEGMENT
??_C@_0BC@BEKIIEEN@IsHillsDoubleMove?$AA@ DB 'IsHillsDoubleMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FIHHHACK@IsHealOutsideFriendly?$AA@
CONST	SEGMENT
??_C@_0BG@FIHHHACK@IsHealOutsideFriendly?$AA@ DB 'IsHealOutsideFriendly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NNLJCGEA@IsAlwaysHeal?$AA@
CONST	SEGMENT
??_C@_0N@NNLJCGEA@IsAlwaysHeal?$AA@ DB 'IsAlwaysHeal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JICLFCIN@IsEnemyRoute?$AA@
CONST	SEGMENT
??_C@_0N@JICLFCIN@IsEnemyRoute?$AA@ DB 'IsEnemyRoute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CKMHLMJL@IsRiverCrossingNoPenalty?$AA@
CONST	SEGMENT
??_C@_0BJ@CKMHLMJL@IsRiverCrossingNoPenalty?$AA@ DB 'IsRiverCrossingNoPen'
	DB	'alty', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FJEFOKIO@GetRiverCrossingNoPenaltyCount?$AA@
CONST	SEGMENT
??_C@_0BP@FJEFOKIO@GetRiverCrossingNoPenaltyCount?$AA@ DB 'GetRiverCrossi'
	DB	'ngNoPenaltyCount', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IIDGMJO@IsAmphib?$AA@
CONST	SEGMENT
??_C@_08IIDGMJO@IsAmphib?$AA@ DB 'IsAmphib', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DOEJINNJ@GetAmphibCount?$AA@
CONST	SEGMENT
??_C@_0P@DOEJINNJ@GetAmphibCount?$AA@ DB 'GetAmphibCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KPNLOLLE@IsBlitz?$AA@
CONST	SEGMENT
??_C@_07KPNLOLLE@IsBlitz?$AA@ DB 'IsBlitz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMMIPJMH@GetBlitzCount?$AA@
CONST	SEGMENT
??_C@_0O@CMMIPJMH@GetBlitzCount?$AA@ DB 'GetBlitzCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OCAPIEKB@GetFortifyTurns?$AA@
CONST	SEGMENT
??_C@_0BA@OCAPIEKB@GetFortifyTurns?$AA@ DB 'GetFortifyTurns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAHMDLJN@GetCargo?$AA@
CONST	SEGMENT
??_C@_08GAHMDLJN@GetCargo?$AA@ DB 'GetCargo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OOOIDGNO@RotateFacingDirectionCounterCloc@
CONST	SEGMENT
??_C@_0CG@OOOIDGNO@RotateFacingDirectionCounterCloc@ DB 'RotateFacingDire'
	DB	'ctionCounterClockwise', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JMEBNBEE@RotateFacingDirectionClockwise?$AA@
CONST	SEGMENT
??_C@_0BP@JMEBNBEE@RotateFacingDirectionClockwise?$AA@ DB 'RotateFacingDi'
	DB	'rectionClockwise', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNLDHKMI@GetFacingDirection?$AA@
CONST	SEGMENT
??_C@_0BD@FNLDHKMI@GetFacingDirection?$AA@ DB 'GetFacingDirection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAKMDEHP@ChangeLevel?$AA@
CONST	SEGMENT
??_C@_0M@GAKMDEHP@ChangeLevel?$AA@ DB 'ChangeLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCENCMAP@SetLevel?$AA@
CONST	SEGMENT
??_C@_08DCENCMAP@SetLevel?$AA@ DB 'SetLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MDGBDPHC@GetLevel?$AA@
CONST	SEGMENT
??_C@_08MDGBDPHC@GetLevel?$AA@ DB 'GetLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLHJLBIL@ChangeExperience?$AA@
CONST	SEGMENT
??_C@_0BB@KLHJLBIL@ChangeExperience?$AA@ DB 'ChangeExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OHKLKLHF@SetExperience?$AA@
CONST	SEGMENT
??_C@_0O@OHKLKLHF@SetExperience?$AA@ DB 'SetExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JILFBIAC@GetExperience?$AA@
CONST	SEGMENT
??_C@_0O@JILFBIAC@GetExperience?$AA@ DB 'GetExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PCIEPGHM@IsImmobile?$AA@
CONST	SEGMENT
??_C@_0L@PCIEPGHM@IsImmobile?$AA@ DB 'IsImmobile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HJHLDBGA@FinishMoves?$AA@
CONST	SEGMENT
??_C@_0M@HJHLDBGA@FinishMoves?$AA@ DB 'FinishMoves', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMBKPBOF@ChangeMoves?$AA@
CONST	SEGMENT
??_C@_0M@CMBKPBOF@ChangeMoves?$AA@ DB 'ChangeMoves', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOPLOJJF@SetMoves?$AA@
CONST	SEGMENT
??_C@_08HOPLOJJF@SetMoves?$AA@ DB 'SetMoves', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPNHPKOI@GetMoves?$AA@
CONST	SEGMENT
??_C@_08IPNHPKOI@GetMoves?$AA@ DB 'GetMoves', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OECJINCP@ChangeDamage?$AA@
CONST	SEGMENT
??_C@_0N@OECJINCP@ChangeDamage?$AA@ DB 'ChangeDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LEHOBNAL@SetDamage?$AA@
CONST	SEGMENT
??_C@_09LEHOBNAL@SetDamage?$AA@ DB 'SetDamage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKDLDMJJ@GetDamage?$AA@
CONST	SEGMENT
??_C@_09JKDLDMJJ@GetDamage?$AA@ DB 'GetDamage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICPFIKDJ@GetLastMoveTurn?$AA@
CONST	SEGMENT
??_C@_0BA@ICPFIKDJ@GetLastMoveTurn?$AA@ DB 'GetLastMoveTurn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GLLONDKJ@GetGameTurnCreated?$AA@
CONST	SEGMENT
??_C@_0BD@GLLONDKJ@GetGameTurnCreated?$AA@ DB 'GetGameTurnCreated', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBILAINE@SetReconPlot?$AA@
CONST	SEGMENT
??_C@_0N@EBILAINE@SetReconPlot?$AA@ DB 'SetReconPlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFDFMEJI@GetReconPlot?$AA@
CONST	SEGMENT
??_C@_0N@DFDFMEJI@GetReconPlot?$AA@ DB 'GetReconPlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGOHINDE@GetArea?$AA@
CONST	SEGMENT
??_C@_07GGOHINDE@GetArea?$AA@ DB 'GetArea', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBIDHAGI@GetPlot?$AA@
CONST	SEGMENT
??_C@_07LBIDHAGI@GetPlot?$AA@ DB 'GetPlot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBGHKGAE@AtPlot?$AA@
CONST	SEGMENT
??_C@_06FBGHKGAE@AtPlot?$AA@ DB 'AtPlot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKLFHNOI@At?$AA@
CONST	SEGMENT
??_C@_02DKLFHNOI@At?$AA@ DB 'At', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIHOHCOG@SetXY?$AA@
CONST	SEGMENT
??_C@_05HIHOHCOG@SetXY?$AA@ DB 'SetXY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHHHKNBL@GetY?$AA@
CONST	SEGMENT
??_C@_04OHHHKNBL@GetY?$AA@ DB 'GetY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POGMJMFK@GetX?$AA@
CONST	SEGMENT
??_C@_04POGMJMFK@GetX?$AA@ DB 'GetX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KMOOCBFO@SetHotKeyNumber?$AA@
CONST	SEGMENT
??_C@_0BA@KMOOCBFO@SetHotKeyNumber?$AA@ DB 'SetHotKeyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JOPIFDEH@GetHotKeyNumber?$AA@
CONST	SEGMENT
??_C@_0BA@JOPIFDEH@GetHotKeyNumber?$AA@ DB 'GetHotKeyNumber', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CLBJHDA@GetID?$AA@
CONST	SEGMENT
??_C@_05CLBJHDA@GetID?$AA@ DB 'GetID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FKNDEEFE@GetUnitAICargo?$AA@
CONST	SEGMENT
??_C@_0P@FKNDEEFE@GetUnitAICargo?$AA@ DB 'GetUnitAICargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FAKJAOCC@CanCargoAllMove?$AA@
CONST	SEGMENT
??_C@_0BA@FAKJAOCC@CanCargoAllMove?$AA@ DB 'CanCargoAllMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08POCIMEDI@HasCargo?$AA@
CONST	SEGMENT
??_C@_08POCIMEDI@HasCargo?$AA@ DB 'HasCargo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MFHGGLIO@CargoSpaceAvailable?$AA@
CONST	SEGMENT
??_C@_0BE@MFHGGLIO@CargoSpaceAvailable?$AA@ DB 'CargoSpaceAvailable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNGBIEOM@IsFull?$AA@
CONST	SEGMENT
??_C@_06DNGBIEOM@IsFull?$AA@ DB 'IsFull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHCPCPHA@ChangeCargoSpace?$AA@
CONST	SEGMENT
??_C@_0BB@KHCPCPHA@ChangeCargoSpace?$AA@ DB 'ChangeCargoSpace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DODLMACF@CargoSpace?$AA@
CONST	SEGMENT
??_C@_0L@DODLMACF@CargoSpace?$AA@ DB 'CargoSpace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMBKKFAL@DomainCargo?$AA@
CONST	SEGMENT
??_C@_0M@EMBKKFAL@DomainCargo?$AA@ DB 'DomainCargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JIBALDJB@SpecialCargo?$AA@
CONST	SEGMENT
??_C@_0N@JIBALDJB@SpecialCargo?$AA@ DB 'SpecialCargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@
CONST	SEGMENT
??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@ DB 'CapitalDefenseFalloff', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@ DB 'CapitalDefenseModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IPOJCGCM@AirSweepCombatMod?$AA@
CONST	SEGMENT
??_C@_0BC@IPOJCGCM@AirSweepCombatMod?$AA@ DB 'AirSweepCombatMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KMIJFMOI@GetUnhappinessCombatPenalty?$AA@
CONST	SEGMENT
??_C@_0BM@KMIJFMOI@GetUnhappinessCombatPenalty?$AA@ DB 'GetUnhappinessCom'
	DB	'batPenalty', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OAGBAAPI@GetStrategicResourceCombatPenalt@
CONST	SEGMENT
??_C@_0CC@OAGBAAPI@GetStrategicResourceCombatPenalt@ DB 'GetStrategicReso'
	DB	'urceCombatPenalty', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NJCAJHBI@DomainModifier?$AA@
CONST	SEGMENT
??_C@_0P@NJCAJHBI@DomainModifier?$AA@ DB 'DomainModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DFAJNMBC@UnitCombatModifier?$AA@
CONST	SEGMENT
??_C@_0BD@DFAJNMBC@UnitCombatModifier?$AA@ DB 'UnitCombatModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OJACANJO@UnitClassDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BJ@OJACANJO@UnitClassDefenseModifier?$AA@ DB 'UnitClassDefenseModi'
	DB	'fier', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NFGAIELD@UnitClassAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BI@NFGAIELD@UnitClassAttackModifier?$AA@ DB 'UnitClassAttackModifi'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BEGNCFMJ@FeatureDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BH@BEGNCFMJ@FeatureDefenseModifier?$AA@ DB 'FeatureDefenseModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NILBKJKJ@FeatureAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BG@NILBKJKJ@FeatureAttackModifier?$AA@ DB 'FeatureAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NAIEHADC@TerrainDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BH@NAIEHADC@TerrainDefenseModifier?$AA@ DB 'TerrainDefenseModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FAKOOKFA@TerrainAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BG@FAKOOKFA@TerrainAttackModifier?$AA@ DB 'TerrainAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GLPAPCOP@RoughDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BF@GLPAPCOP@RoughDefenseModifier?$AA@ DB 'RoughDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@ DB 'FlankAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FIKOLHBD@AttackWoundedModifier?$AA@
CONST	SEGMENT
??_C@_0BG@FIKOLHBD@AttackWoundedModifier?$AA@ DB 'AttackWoundedModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JHKANDHP@AttackFortifiedModifier?$AA@
CONST	SEGMENT
??_C@_0BI@JHKANDHP@AttackFortifiedModifier?$AA@ DB 'AttackFortifiedModifi'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FJFHFKJE@RoughRangedAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BK@FJFHFKJE@RoughRangedAttackModifier?$AA@ DB 'RoughRangedAttackMo'
	DB	'difier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PIHGPDLD@OpenDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BE@PIHGPDLD@OpenDefenseModifier?$AA@ DB 'OpenDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KDNMKBNA@OpenRangedAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BJ@KDNMKBNA@OpenRangedAttackModifier?$AA@ DB 'OpenRangedAttackModi'
	DB	'fier', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KAJFPFGI@OpenAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BD@KAJFPFGI@OpenAttackModifier?$AA@ DB 'OpenAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPGLDEOF@RoughAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BE@CPGLDEOF@RoughAttackModifier?$AA@ DB 'RoughAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHAMCNAD@HillsDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BF@PHAMCNAD@HillsDefenseModifier?$AA@ DB 'HillsDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HLDAPOIG@HeavyChargeDownhillModifier?$AA@
CONST	SEGMENT
??_C@_0BM@HLDAPOIG@HeavyChargeDownhillModifier?$AA@ DB 'HeavyChargeDownhi'
	DB	'llModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NKLCHBCB@HillsAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BE@NKLCHBCB@HillsAttackModifier?$AA@ DB 'HillsAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BAHDGHEA@CityDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BE@BAHDGHEA@CityDefenseModifier?$AA@ DB 'CityDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BNNFDFCP@CityAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BD@BNNFDFCP@CityAttackModifier?$AA@ DB 'CityAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DOOFICGI@GetRangedAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BI@DOOFICGI@GetRangedAttackModifier?$AA@ DB 'GetRangedAttackModifi'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DOEJPBBH@GetDefenseModifier?$AA@
CONST	SEGMENT
??_C@_0BD@DOEJPBBH@GetDefenseModifier?$AA@ DB 'GetDefenseModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JDEOODFC@GetAttackModifier?$AA@
CONST	SEGMENT
??_C@_0BC@JDEOODFC@GetAttackModifier?$AA@ DB 'GetAttackModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLLGHCIO@GetAdjacentModifier?$AA@
CONST	SEGMENT
??_C@_0BE@DLLGHCIO@GetAdjacentModifier?$AA@ DB 'GetAdjacentModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OIIHINBE@WithdrawalProbability?$AA@
CONST	SEGMENT
??_C@_0BG@OIIHINBE@WithdrawalProbability?$AA@ DB 'WithdrawalProbability', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NJKKJPLI@EvasionProbability?$AA@
CONST	SEGMENT
??_C@_0BD@NJKKJPLI@EvasionProbability?$AA@ DB 'EvasionProbability', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EFLPCPDH@CurrInterceptionProbability?$AA@
CONST	SEGMENT
??_C@_0BM@EFLPCPDH@CurrInterceptionProbability?$AA@ DB 'CurrInterceptionP'
	DB	'robability', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HEGDGCBF@MaxInterceptionProbability?$AA@
CONST	SEGMENT
??_C@_0BL@HEGDGCBF@MaxInterceptionProbability?$AA@ DB 'MaxInterceptionPro'
	DB	'bability', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PJIAODBJ@IsCityAttackOnly?$AA@
CONST	SEGMENT
??_C@_0BB@PJIAODBJ@IsCityAttackOnly?$AA@ DB 'IsCityAttackOnly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DIBEDCBC@IsRangeAttackOnlyInDomain?$AA@
CONST	SEGMENT
??_C@_0BK@DIBEDCBC@IsRangeAttackOnlyInDomain?$AA@ DB 'IsRangeAttackOnlyIn'
	DB	'Domain', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJFNAKBN@IsNukeImmune?$AA@
CONST	SEGMENT
??_C@_0N@EJFNAKBN@IsNukeImmune?$AA@ DB 'IsNukeImmune', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BNMDJPAD@IsInvisible?$AA@
CONST	SEGMENT
??_C@_0M@BNMDJPAD@IsInvisible?$AA@ DB 'IsInvisible', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IMPFCGLP@IsNeverInvisible?$AA@
CONST	SEGMENT
??_C@_0BB@IMPFCGLP@IsNeverInvisible?$AA@ DB 'IsNeverInvisible', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@
CONST	SEGMENT
??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@ DB 'IgnoreTerrainCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@
CONST	SEGMENT
??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@ DB 'FlatMovementCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@
CONST	SEGMENT
??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@ DB 'CanMoveAllTerrain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@
CONST	SEGMENT
??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@ DB 'CanMoveImpassable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@
CONST	SEGMENT
??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@ DB 'IgnoreBuildingDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@
CONST	SEGMENT
??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@ DB 'NoDefensiveBonus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LOKEAEHO@ImmuneToFirstStrikes?$AA@
CONST	SEGMENT
??_C@_0BF@LOKEAEHO@ImmuneToFirstStrikes?$AA@ DB 'ImmuneToFirstStrikes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HMHIMLJG@IsSetUpForRangedAttack?$AA@
CONST	SEGMENT
??_C@_0BH@HMHIMLJG@IsSetUpForRangedAttack?$AA@ DB 'IsSetUpForRangedAttack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IKLKKCFA@CanSetUpForRangedAttack?$AA@
CONST	SEGMENT
??_C@_0BI@IKLKKCFA@CanSetUpForRangedAttack?$AA@ DB 'CanSetUpForRangedAtta'
	DB	'ck', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ODLOGFHD@IsMustSetUpToRangedAttack?$AA@
CONST	SEGMENT
??_C@_0BK@ODLOGFHD@IsMustSetUpToRangedAttack?$AA@ DB 'IsMustSetUpToRanged'
	DB	'Attack', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08PBIEENOB@IsRanged?$AA@
CONST	SEGMENT
??_C@_08PBIEENOB@IsRanged?$AA@ DB 'IsRanged', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPAAIGPJ@MaxFirstStrikes?$AA@
CONST	SEGMENT
??_C@_0BA@BPAAIGPJ@MaxFirstStrikes?$AA@ DB 'MaxFirstStrikes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEANKGHK@ChanceFirstStrikes?$AA@
CONST	SEGMENT
??_C@_0BD@IEANKGHK@ChanceFirstStrikes?$AA@ DB 'ChanceFirstStrikes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJAIAMPF@FirstStrikes?$AA@
CONST	SEGMENT
??_C@_0N@PJAIAMPF@FirstStrikes?$AA@ DB 'FirstStrikes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BMCJNNEJ@MaxXPValue?$AA@
CONST	SEGMENT
??_C@_0L@BMCJNNEJ@MaxXPValue?$AA@ DB 'MaxXPValue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JHMJJDKG@DefenseXPValue?$AA@
CONST	SEGMENT
??_C@_0P@JHMJJDKG@DefenseXPValue?$AA@ DB 'DefenseXPValue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DKJMBMOF@AttackXPValue?$AA@
CONST	SEGMENT
??_C@_0O@DKJMBMOF@AttackXPValue?$AA@ DB 'AttackXPValue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHKCLNBJ@ExperienceNeeded?$AA@
CONST	SEGMENT
??_C@_0BB@KHKCLNBJ@ExperienceNeeded?$AA@ DB 'ExperienceNeeded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HLMKCAHI@FortifyModifier?$AA@
CONST	SEGMENT
??_C@_0BA@HLMKCAHI@FortifyModifier?$AA@ DB 'FortifyModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GLEHCFPG@IsEverFortifyable?$AA@
CONST	SEGMENT
??_C@_0BC@GLEHCFPG@IsEverFortifyable?$AA@ DB 'IsEverFortifyable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OCMBHLME@IsFortifyable?$AA@
CONST	SEGMENT
??_C@_0O@OCMBHLME@IsFortifyable?$AA@ DB 'IsFortifyable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MIKEECCD@IsWaiting?$AA@
CONST	SEGMENT
??_C@_09MIKEECCD@IsWaiting?$AA@ DB 'IsWaiting', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLGABLLL@IsAutomated?$AA@
CONST	SEGMENT
??_C@_0M@GLGABLLL@IsAutomated?$AA@ DB 'IsAutomated', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKDKFEAC@GetCaptureChance?$AA@
CONST	SEGMENT
??_C@_0BB@OKDKFEAC@GetCaptureChance?$AA@ DB 'GetCaptureChance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LPOGIFFC@GetBestSeaPillageInterceptor?$AA@
CONST	SEGMENT
??_C@_0BN@LPOGIFFC@GetBestSeaPillageInterceptor?$AA@ DB 'GetBestSeaPillag'
	DB	'eInterceptor', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FILFEJIA@GetInterceptorCount?$AA@
CONST	SEGMENT
??_C@_0BE@FILFEJIA@GetInterceptorCount?$AA@ DB 'GetInterceptorCount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LEJHGMC@GetBestInterceptor?$AA@
CONST	SEGMENT
??_C@_0BD@LEJHGMC@GetBestInterceptor?$AA@ DB 'GetBestInterceptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LJEHDMDL@GetAirStrikeDefenseDamage?$AA@
CONST	SEGMENT
??_C@_0BK@LJEHDMDL@GetAirStrikeDefenseDamage?$AA@ DB 'GetAirStrikeDefense'
	DB	'Damage', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KIPJJBIH@GetRangeCombatDamage?$AA@
CONST	SEGMENT
??_C@_0BF@KIPJJBIH@GetRangeCombatDamage?$AA@ DB 'GetRangeCombatDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKAALEFM@GetAirCombatDamage?$AA@
CONST	SEGMENT
??_C@_0BD@DKAALEFM@GetAirCombatDamage?$AA@ DB 'GetAirCombatDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JPHLBGBL@CanAirDefend?$AA@
CONST	SEGMENT
??_C@_0N@JPHLBGBL@CanAirDefend?$AA@ DB 'CanAirDefend', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPMLDEKL@CanAirAttack?$AA@
CONST	SEGMENT
??_C@_0N@BPMLDEKL@CanAirAttack?$AA@ DB 'CanAirAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CKDOAPEN@GetRangedCombatLimit?$AA@
CONST	SEGMENT
??_C@_0BF@CKDOAPEN@GetRangedCombatLimit?$AA@ DB 'GetRangedCombatLimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEHPLGIA@GetCombatLimit?$AA@
CONST	SEGMENT
??_C@_0P@PEHPLGIA@GetCombatLimit?$AA@ DB 'GetCombatLimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DHDPDFCI@GetMaxRangedCombatStrength?$AA@
CONST	SEGMENT
??_C@_0BL@DHDPDFCI@GetMaxRangedCombatStrength?$AA@ DB 'GetMaxRangedCombat'
	DB	'Strength', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JJBLKOAN@GetBaseRangedCombatStrength?$AA@
CONST	SEGMENT
??_C@_0BM@JJBLKOAN@GetBaseRangedCombatStrength?$AA@ DB 'GetBaseRangedComb'
	DB	'atStrength', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07LBEMKGNA@IsTrade?$AA@
CONST	SEGMENT
??_C@_07LBEMKGNA@IsTrade?$AA@ DB 'IsTrade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CHHDBNLA@IsEnemyInMovementRange?$AA@
CONST	SEGMENT
??_C@_0BH@CHHDBNLA@IsEnemyInMovementRange?$AA@ DB 'IsEnemyInMovementRange'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DAIJJIKL@IsCanAttackWithMoveNow?$AA@
CONST	SEGMENT
??_C@_0BH@DAIJJIKL@IsCanAttackWithMoveNow?$AA@ DB 'IsCanAttackWithMoveNow'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IEELDLKI@IsCanAttack?$AA@
CONST	SEGMENT
??_C@_0M@IEELDLKI@IsCanAttack?$AA@ DB 'IsCanAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBALPDOL@IsCanAttackRanged?$AA@
CONST	SEGMENT
??_C@_0BC@DBALPDOL@IsCanAttackRanged?$AA@ DB 'IsCanAttackRanged', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FMPCPPOB@IsCanAttackWithMove?$AA@
CONST	SEGMENT
??_C@_0BE@FMPCPPOB@IsCanAttackWithMove?$AA@ DB 'IsCanAttackWithMove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOPDGJBN@CanSiege?$AA@
CONST	SEGMENT
??_C@_08HOPDGJBN@CanSiege?$AA@ DB 'CanSiege', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPLBJBI@IsCanDefend?$AA@
CONST	SEGMENT
??_C@_0M@EPLBJBI@IsCanDefend?$AA@ DB 'IsCanDefend', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDMOBEEM@IsCombatUnit?$AA@
CONST	SEGMENT
??_C@_0N@FDMOBEEM@IsCombatUnit?$AA@ DB 'IsCombatUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NDNEFMFF@GetEmbarkedUnitDefense?$AA@
CONST	SEGMENT
??_C@_0BH@NDNEFMFF@GetEmbarkedUnitDefense?$AA@ DB 'GetEmbarkedUnitDefense'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CEAGLNCO@GetMaxDefenseStrength?$AA@
CONST	SEGMENT
??_C@_0BG@CEAGLNCO@GetMaxDefenseStrength?$AA@ DB 'GetMaxDefenseStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DAKJENBM@GetMaxAttackStrength?$AA@
CONST	SEGMENT
??_C@_0BF@DAKJENBM@GetMaxAttackStrength?$AA@ DB 'GetMaxAttackStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ONCMJAK@GetBaseCombatStrength?$AA@
CONST	SEGMENT
??_C@_0BG@ONCMJAK@GetBaseCombatStrength?$AA@ DB 'GetBaseCombatStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PLIEBAEL@SetBaseCombatStrength?$AA@
CONST	SEGMENT
??_C@_0BG@PLIEBAEL@SetBaseCombatStrength?$AA@ DB 'SetBaseCombatStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KICKDPKF@IsDelayedDeath?$AA@
CONST	SEGMENT
??_C@_0P@KICKDPKF@IsDelayedDeath?$AA@ DB 'IsDelayedDeath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHLJJJEI@IsDead?$AA@
CONST	SEGMENT
??_C@_06NHLJJJEI@IsDead?$AA@ DB 'IsDead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGPCCMKO@IsHurt?$AA@
CONST	SEGMENT
??_C@_06BGPCCMKO@IsHurt?$AA@ DB 'IsHurt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OHDBNFAL@GetCurrHitPoints?$AA@
CONST	SEGMENT
??_C@_0BB@OHDBNFAL@GetCurrHitPoints?$AA@ DB 'GetCurrHitPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NIPPNLFL@GetMaxHitPoints?$AA@
CONST	SEGMENT
??_C@_0BA@NIPPNLFL@GetMaxHitPoints?$AA@ DB 'GetMaxHitPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ONNJBDMN@IsInCombat?$AA@
CONST	SEGMENT
??_C@_0L@ONNJBDMN@IsInCombat?$AA@ DB 'IsInCombat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HABIDFCI@IsDefending?$AA@
CONST	SEGMENT
??_C@_0M@HABIDFCI@IsDefending?$AA@ DB 'IsDefending', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJJFDOBE@IsAttacking?$AA@
CONST	SEGMENT
??_C@_0M@NJJFDOBE@IsAttacking?$AA@ DB 'IsAttacking', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MOBAIMGP@IsFighting?$AA@
CONST	SEGMENT
??_C@_0L@MOBAIMGP@IsFighting?$AA@ DB 'IsFighting', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EJGNOPIA@IsGreatPerson?$AA@
CONST	SEGMENT
??_C@_0O@EJGNOPIA@IsGreatPerson?$AA@ DB 'IsGreatPerson', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLJEOEEL@CanCoexistWithEnemyUnit?$AA@
CONST	SEGMENT
??_C@_0BI@JLJEOEEL@CanCoexistWithEnemyUnit?$AA@ DB 'CanCoexistWithEnemyUn'
	DB	'it', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JOMPGGJE@IsNearFriendlyMinor?$AA@
CONST	SEGMENT
??_C@_0BE@JOMPGGJE@IsNearFriendlyMinor?$AA@ DB 'IsNearFriendlyMinor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EBKACFHH@IsGoldenAge?$AA@
CONST	SEGMENT
??_C@_0M@EBKACFHH@IsGoldenAge?$AA@ DB 'IsGoldenAge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GLMJFJI@IsWork?$AA@
CONST	SEGMENT
??_C@_06GLMJFJI@IsWork?$AA@ DB 'IsWork', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMNFCCCM@IsFound?$AA@
CONST	SEGMENT
??_C@_07KMNFCCCM@IsFound?$AA@ DB 'IsFound', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NBBPHOPE@IsRivalTerritory?$AA@
CONST	SEGMENT
??_C@_0BB@NBBPHOPE@IsRivalTerritory?$AA@ DB 'IsRivalTerritory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDDEEDIG@IsNoCapture?$AA@
CONST	SEGMENT
??_C@_0M@NDDEEDIG@IsNoCapture?$AA@ DB 'IsNoCapture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HAJEEKLO@IsOnlyDefensive?$AA@
CONST	SEGMENT
??_C@_0BA@HAJEEKLO@IsOnlyDefensive?$AA@ DB 'IsOnlyDefensive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GJBOHHLD@IsNoBadGoodies?$AA@
CONST	SEGMENT
??_C@_0P@GJBOHHLD@IsNoBadGoodies?$AA@ DB 'IsNoBadGoodies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFPBBIMB@WorkRate?$AA@
CONST	SEGMENT
??_C@_08JFPBBIMB@WorkRate?$AA@ DB 'WorkRate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJAMOEAC@GetBuildType?$AA@
CONST	SEGMENT
??_C@_0N@GJAMOEAC@GetBuildType?$AA@ DB 'GetBuildType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKBEKKHA@CanBuildRoute?$AA@
CONST	SEGMENT
??_C@_0O@NKBEKKHA@CanBuildRoute?$AA@ DB 'CanBuildRoute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@
CONST	SEGMENT
??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@ DB 'NukeDamageLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMCGLCK@Range?$AA@
CONST	SEGMENT
??_C@_05CFMCGLCK@Range?$AA@ DB 'Range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BEAAIBNL@HasMoved?$AA@
CONST	SEGMENT
??_C@_08BEAAIBNL@HasMoved?$AA@ DB 'HasMoved', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJCADMEO@CanMove?$AA@
CONST	SEGMENT
??_C@_07KJCADMEO@CanMove?$AA@ DB 'CanMove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FMBOGIMP@MovesLeft?$AA@
CONST	SEGMENT
??_C@_09FMBOGIMP@MovesLeft?$AA@ DB 'MovesLeft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJBDBEPI@MaxMoves?$AA@
CONST	SEGMENT
??_C@_08FJBDBEPI@MaxMoves?$AA@ DB 'MaxMoves', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ENFGLHEB@VisibilityRange?$AA@
CONST	SEGMENT
??_C@_0BA@ENFGLHEB@VisibilityRange?$AA@ DB 'VisibilityRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NIJBBMLI@IsHuman?$AA@
CONST	SEGMENT
??_C@_07NIJBBMLI@IsHuman?$AA@ DB 'IsHuman', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJNEDJLP@IsBarbarian?$AA@
CONST	SEGMENT
??_C@_0M@NJNEDJLP@IsBarbarian?$AA@ DB 'IsBarbarian', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILNPEBIO@FlavorValue?$AA@
CONST	SEGMENT
??_C@_0M@ILNPEBIO@FlavorValue?$AA@ DB 'FlavorValue', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JCHAPCE@GetDropRange?$AA@
CONST	SEGMENT
??_C@_0N@JCHAPCE@GetDropRange?$AA@ DB 'GetDropRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JPOIAPEI@GetSeeInvisibleType?$AA@
CONST	SEGMENT
??_C@_0BE@JPOIAPEI@GetSeeInvisibleType?$AA@ DB 'GetSeeInvisibleType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IDGIMNCA@GetInvisibleType?$AA@
CONST	SEGMENT
??_C@_0BB@IDGIMNCA@GetInvisibleType?$AA@ DB 'GetInvisibleType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCLPONDK@GetDomainType?$AA@
CONST	SEGMENT
??_C@_0O@HCLPONDK@GetDomainType?$AA@ DB 'GetDomainType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CFHACEO@SetUnitAIType?$AA@
CONST	SEGMENT
??_C@_0O@CFHACEO@SetUnitAIType?$AA@ DB 'SetUnitAIType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HNEJLBDJ@GetUnitAIType?$AA@
CONST	SEGMENT
??_C@_0O@HNEJLBDJ@GetUnitAIType?$AA@ DB 'GetUnitAIType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GBCAHMII@GetUnitCombatType?$AA@
CONST	SEGMENT
??_C@_0BC@GBCAHMII@GetUnitCombatType?$AA@ DB 'GetUnitCombatType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDJCDLLA@GetCaptureUnitType?$AA@
CONST	SEGMENT
??_C@_0BD@JDJCDLLA@GetCaptureUnitType?$AA@ DB 'GetCaptureUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBFKJKHH@GetSpecialUnitType?$AA@
CONST	SEGMENT
??_C@_0BD@GBFKJKHH@GetSpecialUnitType?$AA@ DB 'GetSpecialUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OGLFKPOE@GetCivilizationType?$AA@
CONST	SEGMENT
??_C@_0BE@OGLFKPOE@GetCivilizationType?$AA@ DB 'GetCivilizationType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NDPGKNBO@GetHandicapType?$AA@
CONST	SEGMENT
??_C@_0BA@NDPGKNBO@GetHandicapType?$AA@ DB 'GetHandicapType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODALBDFM@GetNumResourceNeededToUpgrade?$AA@
CONST	SEGMENT
??_C@_0BO@ODALBDFM@GetNumResourceNeededToUpgrade?$AA@ DB 'GetNumResourceN'
	DB	'eededToUpgrade', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HPPLIDDI@CanUpgradeRightNow?$AA@
CONST	SEGMENT
??_C@_0BD@HPPLIDDI@CanUpgradeRightNow?$AA@ DB 'CanUpgradeRightNow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BGKJNLFL@UpgradePrice?$AA@
CONST	SEGMENT
??_C@_0N@BGKJNLFL@UpgradePrice?$AA@ DB 'UpgradePrice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBHKLJBH@GetUpgradeUnitType?$AA@
CONST	SEGMENT
??_C@_0BD@DBHKLJBH@GetUpgradeUnitType?$AA@ DB 'GetUpgradeUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDLKEBK@Promote?$AA@
CONST	SEGMENT
??_C@_07EDLKEBK@Promote?$AA@ DB 'Promote', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPLAIAAJ@CanPromote?$AA@
CONST	SEGMENT
??_C@_0L@OPLAIAAJ@CanPromote?$AA@ DB 'CanPromote', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHKIFAJK@GiveExperience?$AA@
CONST	SEGMENT
??_C@_0P@FHKIFAJK@GiveExperience?$AA@ DB 'GiveExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FKOLNGFD@CanGiveExperience?$AA@
CONST	SEGMENT
??_C@_0BC@FKOLNGFD@CanGiveExperience?$AA@ DB 'CanGiveExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OAKCLFCP@Lead?$AA@
CONST	SEGMENT
??_C@_04OAKCLFCP@Lead?$AA@ DB 'Lead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PLIPHBCO@CanLead?$AA@
CONST	SEGMENT
??_C@_07PLIPHBCO@CanLead?$AA@ DB 'CanLead', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMPBKDLI@CanBuild?$AA@
CONST	SEGMENT
??_C@_08EMPBKDLI@CanBuild?$AA@ DB 'CanBuild', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHPOAIEH@GetBlastTourism?$AA@
CONST	SEGMENT
??_C@_0BA@CHPOAIEH@GetBlastTourism?$AA@ DB 'GetBlastTourism', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OOEAJGKD@GetGivePoliciesCulture?$AA@
CONST	SEGMENT
??_C@_0BH@OOEAJGKD@GetGivePoliciesCulture?$AA@ DB 'GetGivePoliciesCulture'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOFBCHIL@GetGoldenAgeTurns?$AA@
CONST	SEGMENT
??_C@_0BC@HOFBCHIL@GetGoldenAgeTurns?$AA@ DB 'GetGoldenAgeTurns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOBJHMDF@CanGoldenAge?$AA@
CONST	SEGMENT
??_C@_0N@EOBJHMDF@CanGoldenAge?$AA@ DB 'CanGoldenAge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJJCCDBA@CanBuildSpaceship?$AA@
CONST	SEGMENT
??_C@_0BC@BJJCCDBA@CanBuildSpaceship?$AA@ DB 'CanBuildSpaceship', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GCNIAAJM@CanRepairFleet?$AA@
CONST	SEGMENT
??_C@_0P@GCNIAAJM@CanRepairFleet?$AA@ DB 'CanRepairFleet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@
CONST	SEGMENT
??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@ DB 'CanBuyCityState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PJOCNGDI@CanTrade?$AA@
CONST	SEGMENT
??_C@_08PJOCNGDI@CanTrade?$AA@ DB 'CanTrade', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LGEOGBNA@GetTradeInfluence?$AA@
CONST	SEGMENT
??_C@_0BC@LGEOGBNA@GetTradeInfluence?$AA@ DB 'GetTradeInfluence', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FCJOHAFH@GetTradeGold?$AA@
CONST	SEGMENT
??_C@_0N@FCJOHAFH@GetTradeGold?$AA@ DB 'GetTradeGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJHAMHFH@GetHurryProduction?$AA@
CONST	SEGMENT
??_C@_0BD@KJHAMHFH@GetHurryProduction?$AA@ DB 'GetHurryProduction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KNNAIDOL@GetDiscoverAmount?$AA@
CONST	SEGMENT
??_C@_0BC@KNNAIDOL@GetDiscoverAmount?$AA@ DB 'GetDiscoverAmount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IELKHCBB@CanDiscover?$AA@
CONST	SEGMENT
??_C@_0M@IELKHCBB@CanDiscover?$AA@ DB 'CanDiscover', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBKNDGPF@CanConstruct?$AA@
CONST	SEGMENT
??_C@_0N@OBKNDGPF@CanConstruct?$AA@ DB 'CanConstruct', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPIONNNI@CanJoin?$AA@
CONST	SEGMENT
??_C@_07OPIONNNI@CanJoin?$AA@ DB 'CanJoin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OEHLFCME@CanFound?$AA@
CONST	SEGMENT
??_C@_08OEHLFCME@CanFound?$AA@ DB 'CanFound', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGLKKBMI@IsSelected?$AA@
CONST	SEGMENT
??_C@_0L@JGLKKBMI@IsSelected?$AA@ DB 'IsSelected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MPCCHJDJ@CanPillage?$AA@
CONST	SEGMENT
??_C@_0L@MPCCHJDJ@CanPillage?$AA@ DB 'CanPillage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DNENGFGL@GetExoticGoodsXPAmount?$AA@
CONST	SEGMENT
??_C@_0BH@DNENGFGL@GetExoticGoodsXPAmount?$AA@ DB 'GetExoticGoodsXPAmount'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IPBHFLKL@GetExoticGoodsGoldAmount?$AA@
CONST	SEGMENT
??_C@_0BJ@IPBHFLKL@GetExoticGoodsGoldAmount?$AA@ DB 'GetExoticGoodsGoldAm'
	DB	'ount', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DBMFLENB@CanMakeTradeRouteAt?$AA@
CONST	SEGMENT
??_C@_0BE@DBMFLENB@CanMakeTradeRouteAt?$AA@ DB 'CanMakeTradeRouteAt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OKNIIGFN@CanMakeTradeRoute?$AA@
CONST	SEGMENT
??_C@_0BC@OKNIIGFN@CanMakeTradeRoute?$AA@ DB 'CanMakeTradeRoute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PGFAMOPK@CanParadropAt?$AA@
CONST	SEGMENT
??_C@_0O@PGFAMOPK@CanParadropAt?$AA@ DB 'CanParadropAt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IKNPJBHE@CanParadrop?$AA@
CONST	SEGMENT
??_C@_0M@IKNPJBHE@CanParadrop?$AA@ DB 'CanParadrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HFDCOJOB@CanRangeStrikeAt?$AA@
CONST	SEGMENT
??_C@_0BB@HFDCOJOB@CanRangeStrikeAt?$AA@ DB 'CanRangeStrikeAt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CDOKKCEP@CanRangeStrike?$AA@
CONST	SEGMENT
??_C@_0P@CDOKKCEP@CanRangeStrike?$AA@ DB 'CanRangeStrike', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HAELIEHK@CanNukeAt?$AA@
CONST	SEGMENT
??_C@_09HAELIEHK@CanNukeAt?$AA@ DB 'CanNukeAt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MFNKMBEG@CanNuke?$AA@
CONST	SEGMENT
??_C@_07MFNKMBEG@CanNuke?$AA@ DB 'CanNuke', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJEAOBKF@IsNukeVictim?$AA@
CONST	SEGMENT
??_C@_0N@IJEAOBKF@IsNukeVictim?$AA@ DB 'IsNukeVictim', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IFJNICON@CanAirliftAt?$AA@
CONST	SEGMENT
??_C@_0N@IFJNICON@CanAirliftAt?$AA@ DB 'CanAirliftAt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NBEAEKKP@CanAirlift?$AA@
CONST	SEGMENT
??_C@_0L@NBEAEKKP@CanAirlift?$AA@ DB 'CanAirlift', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GAMNCMGE@IsRangeAttackIgnoreLOS?$AA@
CONST	SEGMENT
??_C@_0BH@GAMNCMGE@IsRangeAttackIgnoreLOS?$AA@ DB 'IsRangeAttackIgnoreLOS'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBNONMMC@Embark?$AA@
CONST	SEGMENT
??_C@_06HBNONMMC@Embark?$AA@ DB 'Embark', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OAMKBJM@CanRebaseAt?$AA@
CONST	SEGMENT
??_C@_0M@OAMKBJM@CanRebaseAt?$AA@ DB 'CanRebaseAt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAECPAIA@CanDisembarkOnto?$AA@
CONST	SEGMENT
??_C@_0BB@EAECPAIA@CanDisembarkOnto?$AA@ DB 'CanDisembarkOnto', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EFELBNGC@CanEmbarkOnto?$AA@
CONST	SEGMENT
??_C@_0O@EFELBNGC@CanEmbarkOnto?$AA@ DB 'CanEmbarkOnto', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NICHBKMI@CanDisembark?$AA@
CONST	SEGMENT
??_C@_0N@NICHBKMI@CanDisembark?$AA@ DB 'CanDisembark', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEMMPAAH@CanEmbark?$AA@
CONST	SEGMENT
??_C@_09PEMMPAAH@CanEmbark?$AA@ DB 'CanEmbark', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGFCOBOB@CanSentry?$AA@
CONST	SEGMENT
??_C@_09MGFCOBOB@CanSentry?$AA@ DB 'CanSentry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGNGFNOG@CanHeal?$AA@
CONST	SEGMENT
??_C@_07MGNGFNOG@CanHeal?$AA@ DB 'CanHeal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBDMLICA@SetEmbarked?$AA@
CONST	SEGMENT
??_C@_0M@DBDMLICA@SetEmbarked?$AA@ DB 'SetEmbarked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENBEBDG@IsEmbarked?$AA@
CONST	SEGMENT
??_C@_0L@ENBEBDG@IsEmbarked?$AA@ DB 'IsEmbarked', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJIOKHCL@CanAirPatrol?$AA@
CONST	SEGMENT
??_C@_0N@IJIOKHCL@CanAirPatrol?$AA@ DB 'CanAirPatrol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNGLNEIC@CanFortify?$AA@
CONST	SEGMENT
??_C@_0L@FNGLNEIC@CanFortify?$AA@ DB 'CanFortify', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICCCNEBH@CanSleep?$AA@
CONST	SEGMENT
??_C@_08ICCCNEBH@CanSleep?$AA@ DB 'CanSleep', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJGKKENJ@CanHold?$AA@
CONST	SEGMENT
??_C@_07GJGKKENJ@CanHold?$AA@ DB 'CanHold', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HEIIGDEG@CanUnloadAll?$AA@
CONST	SEGMENT
??_C@_0N@HEIIGDEG@CanUnloadAll?$AA@ DB 'CanUnloadAll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NDJBNGND@CanUnload?$AA@
CONST	SEGMENT
??_C@_09NDJBNGND@CanUnload?$AA@ DB 'CanUnload', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JEDCJBEK@CanLoad?$AA@
CONST	SEGMENT
??_C@_07JEDCJBEK@CanLoad?$AA@ DB 'CanLoad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DFDFOFGE@CanLoadUnit?$AA@
CONST	SEGMENT
??_C@_0M@DFDFOFGE@CanLoadUnit?$AA@ DB 'CanLoadUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPDGNGPL@CanDistanceGift?$AA@
CONST	SEGMENT
??_C@_0BA@DPDGNGPL@CanDistanceGift?$AA@ DB 'CanDistanceGift', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJAEPLFD@CanGift?$AA@
CONST	SEGMENT
??_C@_07IJAEPLFD@CanGift?$AA@ DB 'CanGift', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PIOOLHFL@GetScrapGold?$AA@
CONST	SEGMENT
??_C@_0N@PIOOLHFL@GetScrapGold?$AA@ DB 'GetScrapGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MKLFIEDM@CanScrap?$AA@
CONST	SEGMENT
??_C@_08MKLFIEDM@CanScrap?$AA@ DB 'CanScrap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PIDFJMFI@CanAutomate?$AA@
CONST	SEGMENT
??_C@_0M@PIDFJMFI@CanAutomate?$AA@ DB 'CanAutomate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GAJIECNL@GetFireSupportUnit?$AA@
CONST	SEGMENT
??_C@_0BD@GAJIECNL@GetFireSupportUnit?$AA@ DB 'GetFireSupportUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PBKOJKLI@GetCombatDamage?$AA@
CONST	SEGMENT
??_C@_0BA@PBKOJKLI@GetCombatDamage?$AA@ DB 'GetCombatDamage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCNCEPKK@JumpToNearestValidPlot?$AA@
CONST	SEGMENT
??_C@_0BH@HCNCEPKK@JumpToNearestValidPlot?$AA@ DB 'JumpToNearestValidPlot'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BOMOGPDF@CanMoveThrough?$AA@
CONST	SEGMENT
??_C@_0P@BOMOGPDF@CanMoveThrough?$AA@ DB 'CanMoveThrough', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BAHEKEJL@CanMoveOrAttackInto?$AA@
CONST	SEGMENT
??_C@_0BE@BAHEKEJL@CanMoveOrAttackInto?$AA@ DB 'CanMoveOrAttackInto', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DGAEPIGI@GetDeclareWarRangeStrike?$AA@
CONST	SEGMENT
??_C@_0BJ@DGAEPIGI@GetDeclareWarRangeStrike?$AA@ DB 'GetDeclareWarRangeSt'
	DB	'rike', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CNEKLHMJ@CanEnterTerritory?$AA@
CONST	SEGMENT
??_C@_0BC@CNEKLHMJ@CanEnterTerritory?$AA@ DB 'CanEnterTerritory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HCLHBILF@GeneratePath?$AA@
CONST	SEGMENT
??_C@_0N@HCLHBILF@GeneratePath?$AA@ DB 'GeneratePath', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDLBDMBH@GetPathEndTurnPlot?$AA@
CONST	SEGMENT
??_C@_0BD@BDLBDMBH@GetPathEndTurnPlot?$AA@ DB 'GetPathEndTurnPlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MHJIPALD@DoCommand?$AA@
CONST	SEGMENT
??_C@_09MHJIPALD@DoCommand?$AA@ DB 'DoCommand', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKHELOHL@CanDoCommand?$AA@
CONST	SEGMENT
??_C@_0N@JKHELOHL@CanDoCommand?$AA@ DB 'CanDoCommand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FAODCLBP@IsBetterDefenderThan?$AA@
CONST	SEGMENT
??_C@_0BF@FAODCLBP@IsBetterDefenderThan?$AA@ DB 'IsBetterDefenderThan', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OOKFIDHO@IsActionRecommended?$AA@
CONST	SEGMENT
??_C@_0BE@OOKFIDHO@IsActionRecommended?$AA@ DB 'IsActionRecommended', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIFFMPNM@Kill?$AA@
CONST	SEGMENT
??_C@_04NIFFMPNM@Kill?$AA@ DB 'Kill', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BEIDKFCM@Convert?$AA@
CONST	SEGMENT
??_C@_07BEIDKFCM@Convert?$AA@ DB 'Convert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAPDBHPB@IsNone?$AA@
CONST	SEGMENT
??_C@_06OAPDBHPB@IsNone?$AA@ DB 'IsNone', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z PROC	; CvLuaUnit::PushMethods, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp

; 31   : 	Method(IsNone);

	push	0
	push	OFFSET ?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNone
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06OAPDBHPB@IsNone?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 32   : 	Method(Convert);

	push	0
	push	OFFSET ?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lConvert
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07BEIDKFCM@Convert?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 33   : 	Method(Kill);

	push	0
	push	OFFSET ?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lKill
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_04NIFFMPNM@Kill?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 34   : 
; 35   : 	Method(IsActionRecommended);

	push	0
	push	OFFSET ?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsActionRecommended
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@OOKFIDHO@IsActionRecommended?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 36   : 	Method(IsBetterDefenderThan);

	push	0
	push	OFFSET ?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBetterDefenderThan
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@FAODCLBP@IsBetterDefenderThan?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 37   : 
; 38   : 	Method(CanDoCommand);

	push	0
	push	OFFSET ?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDoCommand
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JKHELOHL@CanDoCommand?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 39   : 	Method(DoCommand);

	push	0
	push	OFFSET ?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDoCommand
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09MHJIPALD@DoCommand?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 40   : 
; 41   : 	Method(GetPathEndTurnPlot);

	push	0
	push	OFFSET ?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPathEndTurnPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@BDLBDMBH@GetPathEndTurnPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 42   : 	Method(GeneratePath);

	push	0
	push	OFFSET ?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGeneratePath
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@HCLHBILF@GeneratePath?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 43   : 
; 44   : 	Method(CanEnterTerritory);

	push	0
	push	OFFSET ?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEnterTerritory
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@CNEKLHMJ@CanEnterTerritory?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 45   : 	Method(GetDeclareWarRangeStrike);

	push	0
	push	OFFSET ?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDeclareWarRangeStrike
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@DGAEPIGI@GetDeclareWarRangeStrike?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 46   : 	Method(CanMoveOrAttackInto);

	push	0
	push	OFFSET ?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveOrAttackInto
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@BAHEKEJL@CanMoveOrAttackInto?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 47   : 	Method(CanMoveThrough);

	push	0
	push	OFFSET ?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveThrough
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@BOMOGPDF@CanMoveThrough?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 48   : 	Method(JumpToNearestValidPlot);

	push	0
	push	OFFSET ?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lJumpToNearestValidPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@HCNCEPKK@JumpToNearestValidPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 49   : 
; 50   : 	Method(GetCombatDamage);

	push	0
	push	OFFSET ?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@PBKOJKLI@GetCombatDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 51   : 	Method(GetFireSupportUnit);

	push	0
	push	OFFSET ?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFireSupportUnit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@GAJIECNL@GetFireSupportUnit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 52   : 
; 53   : 	Method(CanAutomate);

	push	0
	push	OFFSET ?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAutomate
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@PIDFJMFI@CanAutomate?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 54   : 	Method(CanScrap);

	push	0
	push	OFFSET ?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanScrap
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08MKLFIEDM@CanScrap?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 55   : 	Method(GetScrapGold);

	push	0
	push	OFFSET ?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScrapGold
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@PIOOLHFL@GetScrapGold?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 56   : 	Method(CanGift);

	push	0
	push	OFFSET ?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGift
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07IJAEPLFD@CanGift?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 57   : 	Method(CanDistanceGift);

	push	0
	push	OFFSET ?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDistanceGift
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@DPDGNGPL@CanDistanceGift?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 58   : 	Method(CanLoadUnit);

	push	0
	push	OFFSET ?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLoadUnit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@DFDFOFGE@CanLoadUnit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 59   : 	Method(CanLoad);

	push	0
	push	OFFSET ?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLoad
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07JEDCJBEK@CanLoad?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 60   : 	Method(CanUnload);

	push	0
	push	OFFSET ?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUnload
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09NDJBNGND@CanUnload?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 61   : 	Method(CanUnloadAll);

	push	0
	push	OFFSET ?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUnloadAll
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@HEIIGDEG@CanUnloadAll?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 62   : 	Method(CanHold);

	push	0
	push	OFFSET ?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanHold
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07GJGKKENJ@CanHold?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 63   : 	Method(CanSleep);

	push	0
	push	OFFSET ?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSleep
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08ICCCNEBH@CanSleep?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 64   : 	Method(CanFortify);

	push	0
	push	OFFSET ?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanFortify
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@FNGLNEIC@CanFortify?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 65   : 	Method(CanAirPatrol);

	push	0
	push	OFFSET ?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirPatrol
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@IJIOKHCL@CanAirPatrol?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 66   : 	Method(IsEmbarked);

	push	0
	push	OFFSET ?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEmbarked
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@ENBEBDG@IsEmbarked?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 67   : 	Method(SetEmbarked);

	push	0
	push	OFFSET ?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetEmbarked
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@DBDMLICA@SetEmbarked?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 68   : 	Method(CanHeal);

	push	0
	push	OFFSET ?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07MGNGFNOG@CanHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 69   : 	Method(CanSentry);

	push	0
	push	OFFSET ?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSentry
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09MGFCOBOB@CanSentry?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 70   : 	Method(CanEmbark);

	push	0
	push	OFFSET ?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEmbark
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09PEMMPAAH@CanEmbark?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 71   : 	Method(CanDisembark);

	push	0
	push	OFFSET ?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembark
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@NICHBKMI@CanDisembark?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 72   : 	Method(CanEmbarkOnto);

	push	0
	push	OFFSET ?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEmbarkOnto
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@EFELBNGC@CanEmbarkOnto?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 73   : 	Method(CanDisembarkOnto);

	push	0
	push	OFFSET ?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembarkOnto
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@EAECPAIA@CanDisembarkOnto?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 74   : 	Method(CanRebaseAt);

	push	0
	push	OFFSET ?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRebaseAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@OAMKBJM@CanRebaseAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 75   : 	Method(Embark);

	push	0
	push	OFFSET ?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEmbark
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06HBNONMMC@Embark?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 76   : 
; 77   : 	Method(IsRangeAttackIgnoreLOS);

	push	0
	push	OFFSET ?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackIgnoreLOS
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@GAMNCMGE@IsRangeAttackIgnoreLOS?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 78   : 
; 79   : 	Method(CanAirlift);

	push	0
	push	OFFSET ?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirlift
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@NBEAEKKP@CanAirlift?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 80   : 	Method(CanAirliftAt);

	push	0
	push	OFFSET ?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirliftAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@IFJNICON@CanAirliftAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 81   : 
; 82   : 	Method(IsNukeVictim);

	push	0
	push	OFFSET ?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNukeVictim
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@IJEAOBKF@IsNukeVictim?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 83   : 	Method(CanNuke);

	push	0
	push	OFFSET ?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanNuke
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07MFNKMBEG@CanNuke?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 84   : 	Method(CanNukeAt);

	push	0
	push	OFFSET ?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanNukeAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09HAELIEHK@CanNukeAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 85   : 
; 86   : 	Method(CanRangeStrike);

	push	0
	push	OFFSET ?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrike
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@CDOKKCEP@CanRangeStrike?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 87   : 	Method(CanRangeStrikeAt);

	push	0
	push	OFFSET ?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrikeAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@HFDCOJOB@CanRangeStrikeAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 88   : #ifdef DEL_RANGED_COUNTERATTACKS
; 89   : 	Method(CanEverRangeStrikeAt);
; 90   : 	Method(PlotValid);
; 91   : #endif
; 92   : 
; 93   : 	Method(CanParadrop);

	push	0
	push	OFFSET ?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanParadrop
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@IKNPJBHE@CanParadrop?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 94   : 	Method(CanParadropAt);

	push	0
	push	OFFSET ?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanParadropAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@PGFAMOPK@CanParadropAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 95   : 
; 96   : 	Method(CanMakeTradeRoute);

	push	0
	push	OFFSET ?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRoute
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@OKNIIGFN@CanMakeTradeRoute?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 97   : 	Method(CanMakeTradeRouteAt);

	push	0
	push	OFFSET ?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRouteAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@DBMFLENB@CanMakeTradeRouteAt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 98   : 
; 99   : 	Method(GetExoticGoodsGoldAmount);

	push	0
	push	OFFSET ?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsGoldAmount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@IPBHFLKL@GetExoticGoodsGoldAmount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 100  : 	Method(GetExoticGoodsXPAmount);

	push	0
	push	OFFSET ?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsXPAmount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@DNENGFGL@GetExoticGoodsXPAmount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 101  : 
; 102  : 	Method(CanPillage);

	push	0
	push	OFFSET ?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanPillage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@MPCCHJDJ@CanPillage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 103  : 
; 104  : 	Method(IsSelected);

	push	0
	push	OFFSET ?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSelected
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@JGLKKBMI@IsSelected?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 105  : 
; 106  : 	Method(CanFound);

	push	0
	push	OFFSET ?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanFound
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08OEHLFCME@CanFound?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 107  : 	Method(CanJoin);

	push	0
	push	OFFSET ?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanJoin
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07OPIONNNI@CanJoin?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 108  : 	Method(CanConstruct);

	push	0
	push	OFFSET ?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanConstruct
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@OBKNDGPF@CanConstruct?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 109  : 
; 110  : 	Method(CanDiscover);

	push	0
	push	OFFSET ?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDiscover
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@IELKHCBB@CanDiscover?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 111  : 	Method(GetDiscoverAmount);

	push	0
	push	OFFSET ?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDiscoverAmount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@KNNAIDOL@GetDiscoverAmount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 112  : 	Method(GetHurryProduction);

	push	0
	push	OFFSET ?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHurryProduction
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@KJHAMHFH@GetHurryProduction?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 113  : 	Method(GetTradeGold);

	push	0
	push	OFFSET ?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeGold
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@FCJOHAFH@GetTradeGold?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 114  : 	Method(GetTradeInfluence);

	push	0
	push	OFFSET ?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeInfluence
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@LGEOGBNA@GetTradeInfluence?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 115  : 	Method(CanTrade);

	push	0
	push	OFFSET ?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanTrade
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08PJOCNGDI@CanTrade?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 116  : 	Method(CanBuyCityState);

	push	0
	push	OFFSET ?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuyCityState
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 117  : 	Method(CanRepairFleet);

	push	0
	push	OFFSET ?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRepairFleet
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@GCNIAAJM@CanRepairFleet?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 118  : 	Method(CanBuildSpaceship);

	push	0
	push	OFFSET ?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildSpaceship
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@BJJCCDBA@CanBuildSpaceship?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 119  : 
; 120  : 	Method(CanGoldenAge);

	push	0
	push	OFFSET ?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGoldenAge
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@EOBJHMDF@CanGoldenAge?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 121  : 	Method(GetGoldenAgeTurns);

	push	0
	push	OFFSET ?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeTurns
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@HOFBCHIL@GetGoldenAgeTurns?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 122  : 	Method(GetGivePoliciesCulture);

	push	0
	push	OFFSET ?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGivePoliciesCulture
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@OOEAJGKD@GetGivePoliciesCulture?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 123  : 	Method(GetBlastTourism);

	push	0
	push	OFFSET ?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlastTourism
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@CHPOAIEH@GetBlastTourism?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 124  : 	Method(CanBuild);

	push	0
	push	OFFSET ?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuild
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08EMPBKDLI@CanBuild?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 125  : 	Method(CanLead);

	push	0
	push	OFFSET ?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLead
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07PLIPHBCO@CanLead?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 126  : 	Method(Lead);

	push	0
	push	OFFSET ?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLead
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_04OAKCLFCP@Lead?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 127  : 	Method(CanGiveExperience);

	push	0
	push	OFFSET ?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGiveExperience
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@FKOLNGFD@CanGiveExperience?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 128  : 	Method(GiveExperience);

	push	0
	push	OFFSET ?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGiveExperience
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@FHKIFAJK@GiveExperience?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 129  : 
; 130  : 	Method(CanPromote);

	push	0
	push	OFFSET ?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanPromote
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@OPLAIAAJ@CanPromote?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 131  : 	Method(Promote);

	push	0
	push	OFFSET ?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPromote
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07EDLKEBK@Promote?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 132  : 
; 133  : 	Method(GetUpgradeUnitType);

	push	0
	push	OFFSET ?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@DBHKLJBH@GetUpgradeUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 134  : 	Method(UpgradePrice);

	push	0
	push	OFFSET ?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUpgradePrice
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@BGKJNLFL@UpgradePrice?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 135  : 	Method(CanUpgradeRightNow);

	push	0
	push	OFFSET ?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUpgradeRightNow
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@HPPLIDDI@CanUpgradeRightNow?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 136  : 	Method(GetNumResourceNeededToUpgrade);

	push	0
	push	OFFSET ?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumResourceNeededToUpgrade
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BO@ODALBDFM@GetNumResourceNeededToUpgrade?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 137  : 
; 138  : 	Method(GetHandicapType);

	push	0
	push	OFFSET ?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHandicapType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@NDPGKNBO@GetHandicapType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 139  : 	Method(GetCivilizationType);

	push	0
	push	OFFSET ?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCivilizationType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@OGLFKPOE@GetCivilizationType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 140  : 	Method(GetSpecialUnitType);

	push	0
	push	OFFSET ?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpecialUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@GBFKJKHH@GetSpecialUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 141  : 	Method(GetCaptureUnitType);

	push	0
	push	OFFSET ?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@JDJCDLLA@GetCaptureUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 142  : 	Method(GetUnitCombatType);

	push	0
	push	OFFSET ?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitCombatType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@GBCAHMII@GetUnitCombatType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 143  : 	Method(GetUnitAIType);

	push	0
	push	OFFSET ?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitAIType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@HNEJLBDJ@GetUnitAIType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 144  : 	Method(SetUnitAIType);

	push	0
	push	OFFSET ?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetUnitAIType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@CFHACEO@SetUnitAIType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 145  : 	Method(GetDomainType);

	push	0
	push	OFFSET ?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDomainType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@HCLPONDK@GetDomainType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 146  : 	Method(GetInvisibleType);

	push	0
	push	OFFSET ?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInvisibleType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@IDGIMNCA@GetInvisibleType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 147  : 	Method(GetSeeInvisibleType);

	push	0
	push	OFFSET ?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSeeInvisibleType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@JPOIAPEI@GetSeeInvisibleType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 148  : 	Method(GetDropRange);

	push	0
	push	OFFSET ?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDropRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JCHAPCE@GetDropRange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 149  : 
; 150  : 	Method(FlavorValue);

	push	0
	push	OFFSET ?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlavorValue
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@ILNPEBIO@FlavorValue?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 151  : 	Method(IsBarbarian);

	push	0
	push	OFFSET ?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBarbarian
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@NJNEDJLP@IsBarbarian?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 152  : 
; 153  : 	Method(IsHuman);

	push	0
	push	OFFSET ?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHuman
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07NIJBBMLI@IsHuman?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 154  : 	Method(VisibilityRange);

	push	0
	push	OFFSET ?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lVisibilityRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@ENFGLHEB@VisibilityRange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 155  : 
; 156  : 	Method(MaxMoves);

	push	0
	push	OFFSET ?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08FJBDBEPI@MaxMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 157  : 	Method(MovesLeft);

	push	0
	push	OFFSET ?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMovesLeft
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09FMBOGIMP@MovesLeft?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 158  : 
; 159  : 	Method(CanMove);

	push	0
	push	OFFSET ?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07KJCADMEO@CanMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 160  : 	Method(HasMoved);

	push	0
	push	OFFSET ?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasMoved
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08BEAAIBNL@HasMoved?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 161  : 	Method(Range);

	push	0
	push	OFFSET ?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_05CFMCGLCK@Range?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 162  : 	Method(NukeDamageLevel);

	push	0
	push	OFFSET ?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNukeDamageLevel
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 163  : 
; 164  : 	Method(CanBuildRoute);

	push	0
	push	OFFSET ?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildRoute
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@NKBEKKHA@CanBuildRoute?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 165  : 	Method(GetBuildType);

	push	0
	push	OFFSET ?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBuildType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@GJAMOEAC@GetBuildType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 166  : 	Method(WorkRate);

	push	0
	push	OFFSET ?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWorkRate
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08JFPBBIMB@WorkRate?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 167  : 
; 168  : 	Method(IsNoBadGoodies);

	push	0
	push	OFFSET ?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNoBadGoodies
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@GJBOHHLD@IsNoBadGoodies?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 169  : 	Method(IsOnlyDefensive);

	push	0
	push	OFFSET ?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOnlyDefensive
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@HAJEEKLO@IsOnlyDefensive?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 170  : 
; 171  : 	Method(IsNoCapture);

	push	0
	push	OFFSET ?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNoCapture
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@NDDEEDIG@IsNoCapture?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 172  : 	Method(IsRivalTerritory);

	push	0
	push	OFFSET ?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRivalTerritory
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@NBBPHOPE@IsRivalTerritory?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 173  : 	Method(IsFound);

	push	0
	push	OFFSET ?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFound
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07KMNFCCCM@IsFound?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 174  : 	Method(IsWork);

	push	0
	push	OFFSET ?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsWork
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06GLMJFJI@IsWork?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 175  : 	Method(IsGoldenAge);

	push	0
	push	OFFSET ?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGoldenAge
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@EBKACFHH@IsGoldenAge?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 176  : #ifdef NQ_COMBAT_STRENGTH_NEAR_FRIENDLY_MINOR
; 177  : 	Method(IsNearFriendlyMinor);

	push	0
	push	OFFSET ?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearFriendlyMinor
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@JOMPGGJE@IsNearFriendlyMinor?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 178  : #endif
; 179  : 	Method(CanCoexistWithEnemyUnit);

	push	0
	push	OFFSET ?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCoexistWithEnemyUnit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@JLJEOEEL@CanCoexistWithEnemyUnit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 180  : 
; 181  : 	Method(IsGreatPerson);

	push	0
	push	OFFSET ?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGreatPerson
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@EJGNOPIA@IsGreatPerson?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 182  : 
; 183  : 	Method(IsFighting);

	push	0
	push	OFFSET ?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFighting
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@MOBAIMGP@IsFighting?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 184  : 	Method(IsAttacking);

	push	0
	push	OFFSET ?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAttacking
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@NJJFDOBE@IsAttacking?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 185  : 	Method(IsDefending);

	push	0
	push	OFFSET ?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDefending
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@HABIDFCI@IsDefending?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 186  : 	Method(IsInCombat);

	push	0
	push	OFFSET ?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsInCombat
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@ONNJBDMN@IsInCombat?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 187  : 
; 188  : 	Method(GetMaxHitPoints);

	push	0
	push	OFFSET ?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxHitPoints
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@NIPPNLFL@GetMaxHitPoints?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 189  : 	Method(GetCurrHitPoints);

	push	0
	push	OFFSET ?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCurrHitPoints
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@OHDBNFAL@GetCurrHitPoints?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 190  : 	Method(IsHurt);

	push	0
	push	OFFSET ?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHurt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06BGPCCMKO@IsHurt?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 191  : 	Method(IsDead);

	push	0
	push	OFFSET ?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDead
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06NHLJJJEI@IsDead?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 192  : 	Method(IsDelayedDeath);

	push	0
	push	OFFSET ?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDelayedDeath
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@KICKDPKF@IsDelayedDeath?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 193  : 	Method(SetBaseCombatStrength);

	push	0
	push	OFFSET ?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetBaseCombatStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@PLIEBAEL@SetBaseCombatStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 194  : 	Method(GetBaseCombatStrength);

	push	0
	push	OFFSET ?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseCombatStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@ONCMJAK@GetBaseCombatStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 195  : 
; 196  : 	Method(GetMaxAttackStrength);

	push	0
	push	OFFSET ?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxAttackStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@DAKJENBM@GetMaxAttackStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 197  : 	Method(GetMaxDefenseStrength);

	push	0
	push	OFFSET ?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxDefenseStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@CEAGLNCO@GetMaxDefenseStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 198  : 	Method(GetEmbarkedUnitDefense);

	push	0
	push	OFFSET ?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetEmbarkedUnitDefense
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@NDNEFMFF@GetEmbarkedUnitDefense?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 199  : 
; 200  : 	Method(IsCombatUnit);

	push	0
	push	OFFSET ?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCombatUnit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@FDMOBEEM@IsCombatUnit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 201  : 	Method(IsCanDefend);

	push	0
	push	OFFSET ?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanDefend
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@EPLBJBI@IsCanDefend?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 202  : 	Method(CanSiege);

	push	0
	push	OFFSET ?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSiege
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08HOPDGJBN@CanSiege?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 203  : 	Method(IsCanAttackWithMove);

	push	0
	push	OFFSET ?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@FMPCPPOB@IsCanAttackWithMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 204  : 	Method(IsCanAttackRanged);

	push	0
	push	OFFSET ?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackRanged
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@DBALPDOL@IsCanAttackRanged?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 205  : 	Method(IsCanAttack);

	push	0
	push	OFFSET ?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@IEELDLKI@IsCanAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 206  : 	Method(IsCanAttackWithMoveNow);

	push	0
	push	OFFSET ?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMoveNow
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@DAIJJIKL@IsCanAttackWithMoveNow?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 207  : 	Method(IsEnemyInMovementRange);

	push	0
	push	OFFSET ?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyInMovementRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@CHHDBNLA@IsEnemyInMovementRange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 208  : 
; 209  : 	Method(IsTrade);

	push	0
	push	OFFSET ?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTrade
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07LBEMKGNA@IsTrade?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 210  : 
; 211  : 	Method(GetBaseRangedCombatStrength);

	push	0
	push	OFFSET ?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseRangedCombatStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@JJBLKOAN@GetBaseRangedCombatStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 212  : 	Method(GetMaxRangedCombatStrength);

	push	0
	push	OFFSET ?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxRangedCombatStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@DHDPDFCI@GetMaxRangedCombatStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 213  : 	Method(GetCombatLimit);

	push	0
	push	OFFSET ?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatLimit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@PEHPLGIA@GetCombatLimit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 214  : 	Method(GetRangedCombatLimit);

	push	0
	push	OFFSET ?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedCombatLimit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@CKDOAPEN@GetRangedCombatLimit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 215  : 	Method(CanAirAttack);

	push	0
	push	OFFSET ?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@BPMLDEKL@CanAirAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 216  : 	Method(CanAirDefend);

	push	0
	push	OFFSET ?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirDefend
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JPHLBGBL@CanAirDefend?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 217  : 	Method(GetAirCombatDamage);

	push	0
	push	OFFSET ?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirCombatDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@DKAALEFM@GetAirCombatDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 218  : 	Method(GetRangeCombatDamage);

	push	0
	push	OFFSET ?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangeCombatDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@KIPJJBIH@GetRangeCombatDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 219  : 	Method(GetAirStrikeDefenseDamage);

	push	0
	push	OFFSET ?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirStrikeDefenseDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@LJEHDMDL@GetAirStrikeDefenseDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 220  : 	Method(GetBestInterceptor);

	push	0
	push	OFFSET ?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestInterceptor
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@LEJHGMC@GetBestInterceptor?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 221  : 	Method(GetInterceptorCount);

	push	0
	push	OFFSET ?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInterceptorCount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@FILFEJIA@GetInterceptorCount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 222  : 	Method(GetBestSeaPillageInterceptor);

	push	0
	push	OFFSET ?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestSeaPillageInterceptor
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BN@LPOGIFFC@GetBestSeaPillageInterceptor?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 223  : 	Method(GetCaptureChance);

	push	0
	push	OFFSET ?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureChance
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@OKDKFEAC@GetCaptureChance?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 224  : 
; 225  : 	Method(IsAutomated);

	push	0
	push	OFFSET ?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAutomated
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@GLGABLLL@IsAutomated?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 226  : 	Method(IsWaiting);

	push	0
	push	OFFSET ?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsWaiting
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09MIKEECCD@IsWaiting?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 227  : 	Method(IsFortifyable);

	push	0
	push	OFFSET ?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFortifyable
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@OCMBHLME@IsFortifyable?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 228  : 	Method(IsEverFortifyable);

	push	0
	push	OFFSET ?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEverFortifyable
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@GLEHCFPG@IsEverFortifyable?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 229  : 	Method(FortifyModifier);

	push	0
	push	OFFSET ?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFortifyModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@HLMKCAHI@FortifyModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 230  : 	Method(ExperienceNeeded);

	push	0
	push	OFFSET ?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExperienceNeeded
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@KHKCLNBJ@ExperienceNeeded?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 231  : 	Method(AttackXPValue);

	push	0
	push	OFFSET ?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackXPValue
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@DKJMBMOF@AttackXPValue?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 232  : 	Method(DefenseXPValue);

	push	0
	push	OFFSET ?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDefenseXPValue
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@JHMJJDKG@DefenseXPValue?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 233  : 	Method(MaxXPValue);

	push	0
	push	OFFSET ?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxXPValue
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@BMCJNNEJ@MaxXPValue?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 234  : 	Method(FirstStrikes);

	push	0
	push	OFFSET ?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@PJAIAMPF@FirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 235  : 	Method(ChanceFirstStrikes);

	push	0
	push	OFFSET ?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChanceFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@IEANKGHK@ChanceFirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 236  : 	Method(MaxFirstStrikes);

	push	0
	push	OFFSET ?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@BPAAIGPJ@MaxFirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 237  : 	Method(IsRanged);

	push	0
	push	OFFSET ?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRanged
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08PBIEENOB@IsRanged?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 238  : 	Method(IsMustSetUpToRangedAttack);

	push	0
	push	OFFSET ?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsMustSetUpToRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@ODLOGFHD@IsMustSetUpToRangedAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 239  : 	Method(CanSetUpForRangedAttack);

	push	0
	push	OFFSET ?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSetUpForRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@IKLKKCFA@CanSetUpForRangedAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 240  : 	Method(IsSetUpForRangedAttack);

	push	0
	push	OFFSET ?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSetUpForRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@HMHIMLJG@IsSetUpForRangedAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 241  : 	Method(ImmuneToFirstStrikes);

	push	0
	push	OFFSET ?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lImmuneToFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@LOKEAEHO@ImmuneToFirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 242  : 	Method(NoDefensiveBonus);

	push	0
	push	OFFSET ?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNoDefensiveBonus
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@EDEJJMBG@NoDefensiveBonus?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 243  : 	Method(IgnoreBuildingDefense);

	push	0
	push	OFFSET ?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreBuildingDefense
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 244  : 	Method(CanMoveImpassable);

	push	0
	push	OFFSET ?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveImpassable
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@DKMBECGO@CanMoveImpassable?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 245  : 	Method(CanMoveAllTerrain);

	push	0
	push	OFFSET ?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveAllTerrain
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@PHIBAHKE@CanMoveAllTerrain?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 246  : 	Method(FlatMovementCost);

	push	0
	push	OFFSET ?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlatMovementCost
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@MENGGKPI@FlatMovementCost?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 247  : 	Method(IgnoreTerrainCost);

	push	0
	push	OFFSET ?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreTerrainCost
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@PNMBBNHM@IgnoreTerrainCost?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 248  : 	Method(IsNeverInvisible);

	push	0
	push	OFFSET ?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNeverInvisible
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@IMPFCGLP@IsNeverInvisible?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 249  : 	Method(IsInvisible);

	push	0
	push	OFFSET ?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsInvisible
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@BNMDJPAD@IsInvisible?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 250  : 	Method(IsNukeImmune);

	push	0
	push	OFFSET ?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNukeImmune
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@EJFNAKBN@IsNukeImmune?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 251  : 	Method(IsRangeAttackOnlyInDomain);

	push	0
	push	OFFSET ?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackOnlyInDomain
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@DIBEDCBC@IsRangeAttackOnlyInDomain?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 252  : 	Method(IsCityAttackOnly);

	push	0
	push	OFFSET ?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCityAttackOnly
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@PJIAODBJ@IsCityAttackOnly?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 253  : 
; 254  : 	Method(MaxInterceptionProbability);

	push	0
	push	OFFSET ?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxInterceptionProbability
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@HEGDGCBF@MaxInterceptionProbability?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 255  : 	Method(CurrInterceptionProbability);

	push	0
	push	OFFSET ?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCurrInterceptionProbability
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@EFLPCPDH@CurrInterceptionProbability?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 256  : 	Method(EvasionProbability);

	push	0
	push	OFFSET ?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEvasionProbability
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@NJKKJPLI@EvasionProbability?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 257  : 	Method(WithdrawalProbability);

	push	0
	push	OFFSET ?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWithdrawalProbability
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@OIIHINBE@WithdrawalProbability?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 258  : 
; 259  : 	Method(GetAdjacentModifier);

	push	0
	push	OFFSET ?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@DLLGHCIO@GetAdjacentModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 260  : 	Method(GetAttackModifier);

	push	0
	push	OFFSET ?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@JDEOODFC@GetAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 261  : 	Method(GetDefenseModifier);

	push	0
	push	OFFSET ?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@DOEJPBBH@GetDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 262  : 	Method(GetRangedAttackModifier);

	push	0
	push	OFFSET ?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@DOOFICGI@GetRangedAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 263  : 	Method(CityAttackModifier);

	push	0
	push	OFFSET ?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@BNNFDFCP@CityAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 264  : 	Method(CityDefenseModifier);

	push	0
	push	OFFSET ?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@BAHDGHEA@CityDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 265  : 	Method(HillsAttackModifier);

	push	0
	push	OFFSET ?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@NKLCHBCB@HillsAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 266  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 267  : 	Method(HeavyChargeDownhillModifier);

	push	0
	push	OFFSET ?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHeavyChargeDownhillModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@HLDAPOIG@HeavyChargeDownhillModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 268  : #endif
; 269  : 	Method(HillsDefenseModifier);

	push	0
	push	OFFSET ?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@PHAMCNAD@HillsDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 270  : 	Method(RoughAttackModifier);

	push	0
	push	OFFSET ?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@CPGLDEOF@RoughAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 271  : 	Method(OpenAttackModifier);

	push	0
	push	OFFSET ?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@KAJFPFGI@OpenAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 272  : 	Method(OpenRangedAttackModifier);

	push	0
	push	OFFSET ?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenRangedAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@KDNMKBNA@OpenRangedAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 273  : 	Method(OpenDefenseModifier);

	push	0
	push	OFFSET ?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@PIHGPDLD@OpenDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 274  : 	Method(RoughRangedAttackModifier);

	push	0
	push	OFFSET ?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughRangedAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@FJFHFKJE@RoughRangedAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 275  : 	Method(AttackFortifiedModifier);

	push	0
	push	OFFSET ?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackFortifiedModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@JHKANDHP@AttackFortifiedModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 276  : 	Method(AttackWoundedModifier);

	push	0
	push	OFFSET ?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackWoundedModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@FIKOLHBD@AttackWoundedModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 277  : 	Method(FlankAttackModifier);

	push	0
	push	OFFSET ?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlankAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@EPGDEJAB@FlankAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 278  : 	Method(RoughDefenseModifier);

	push	0
	push	OFFSET ?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@GLPAPCOP@RoughDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 279  : 	Method(TerrainAttackModifier);

	push	0
	push	OFFSET ?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@FAKOOKFA@TerrainAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 280  : 	Method(TerrainDefenseModifier);

	push	0
	push	OFFSET ?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@NAIEHADC@TerrainDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 281  : 	Method(FeatureAttackModifier);

	push	0
	push	OFFSET ?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@NILBKJKJ@FeatureAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 282  : 	Method(FeatureDefenseModifier);

	push	0
	push	OFFSET ?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@BEGNCFMJ@FeatureDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 283  : 	Method(UnitClassAttackModifier);

	push	0
	push	OFFSET ?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@NFGAIELD@UnitClassAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 284  : 	Method(UnitClassDefenseModifier);

	push	0
	push	OFFSET ?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@OJACANJO@UnitClassDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 285  : 	Method(UnitCombatModifier);

	push	0
	push	OFFSET ?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitCombatModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@DFAJNMBC@UnitCombatModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 286  : 	Method(DomainModifier);

	push	0
	push	OFFSET ?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDomainModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@NJCAJHBI@DomainModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 287  : 	Method(GetStrategicResourceCombatPenalty);

	push	0
	push	OFFSET ?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetStrategicResourceCombatPenalty
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0CC@OAGBAAPI@GetStrategicResourceCombatPenalt@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 288  : 	Method(GetUnhappinessCombatPenalty);

	push	0
	push	OFFSET ?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnhappinessCombatPenalty
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@KMIJFMOI@GetUnhappinessCombatPenalty?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 289  : 	Method(AirSweepCombatMod);

	push	0
	push	OFFSET ?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAirSweepCombatMod
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@IPOJCGCM@AirSweepCombatMod?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 290  : 	Method(CapitalDefenseModifier);

	push	0
	push	OFFSET ?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@CDDLEEIL@CapitalDefenseModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 291  : 	Method(CapitalDefenseFalloff);

	push	0
	push	OFFSET ?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseFalloff
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@CILHBFIF@CapitalDefenseFalloff?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 292  : 
; 293  : 	Method(SpecialCargo);

	push	0
	push	OFFSET ?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSpecialCargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JIBALDJB@SpecialCargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 294  : 	Method(DomainCargo);

	push	0
	push	OFFSET ?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDomainCargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@EMBKKFAL@DomainCargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 295  : 	Method(CargoSpace);

	push	0
	push	OFFSET ?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpace
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@DODLMACF@CargoSpace?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 296  : 	Method(ChangeCargoSpace);

	push	0
	push	OFFSET ?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeCargoSpace
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@KHCPCPHA@ChangeCargoSpace?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 297  : 	Method(IsFull);

	push	0
	push	OFFSET ?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFull
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06DNGBIEOM@IsFull?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 298  : 	Method(CargoSpaceAvailable);

	push	0
	push	OFFSET ?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpaceAvailable
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@MFHGGLIO@CargoSpaceAvailable?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 299  : 	Method(HasCargo);

	push	0
	push	OFFSET ?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasCargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08POCIMEDI@HasCargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 300  : 	Method(CanCargoAllMove);

	push	0
	push	OFFSET ?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCargoAllMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@FAKJAOCC@CanCargoAllMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 301  : 	Method(GetUnitAICargo);

	push	0
	push	OFFSET ?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitAICargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@FKNDEEFE@GetUnitAICargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 302  : 	Method(GetID);

	push	0
	push	OFFSET ?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetID
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_05CLBJHDA@GetID?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 303  : 
; 304  : 	Method(GetHotKeyNumber);

	push	0
	push	OFFSET ?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHotKeyNumber
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@JOPIFDEH@GetHotKeyNumber?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 305  : 	Method(SetHotKeyNumber);

	push	0
	push	OFFSET ?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHotKeyNumber
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@KMOOCBFO@SetHotKeyNumber?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 306  : 
; 307  : 	Method(GetX);

	push	0
	push	OFFSET ?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetX
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_04POGMJMFK@GetX?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 308  : 	Method(GetY);

	push	0
	push	OFFSET ?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetY
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_04OHHHKNBL@GetY?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 309  : 	Method(SetXY);

	push	0
	push	OFFSET ?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetXY
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_05HIHOHCOG@SetXY?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 310  : 	Method(At);

	push	0
	push	OFFSET ?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAt
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_02DKLFHNOI@At?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 311  : 	Method(AtPlot);

	push	0
	push	OFFSET ?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAtPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06FBGHKGAE@AtPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 312  : 	Method(GetPlot);

	push	0
	push	OFFSET ?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07LBIDHAGI@GetPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 313  : 	Method(GetArea);

	push	0
	push	OFFSET ?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetArea
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07GGOHINDE@GetArea?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 314  : 	Method(GetReconPlot);

	push	0
	push	OFFSET ?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReconPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@DFDFMEJI@GetReconPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 315  : 	Method(SetReconPlot);

	push	0
	push	OFFSET ?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetReconPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@EBILAINE@SetReconPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 316  : 
; 317  : 	Method(GetGameTurnCreated);

	push	0
	push	OFFSET ?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGameTurnCreated
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@GLLONDKJ@GetGameTurnCreated?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 318  : 	Method(GetLastMoveTurn);

	push	0
	push	OFFSET ?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLastMoveTurn
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@ICPFIKDJ@GetLastMoveTurn?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 319  : 
; 320  : 	Method(GetDamage);

	push	0
	push	OFFSET ?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09JKDLDMJJ@GetDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 321  : 	Method(SetDamage);

	push	0
	push	OFFSET ?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_09LEHOBNAL@SetDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 322  : 	Method(ChangeDamage);

	push	0
	push	OFFSET ?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeDamage
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@OECJINCP@ChangeDamage?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 323  : 	Method(GetMoves);

	push	0
	push	OFFSET ?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08IPNHPKOI@GetMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 324  : 	Method(SetMoves);

	push	0
	push	OFFSET ?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08HOPLOJJF@SetMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 325  : 	Method(ChangeMoves);

	push	0
	push	OFFSET ?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@CMBKPBOF@ChangeMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 326  : 	Method(FinishMoves);

	push	0
	push	OFFSET ?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFinishMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@HJHLDBGA@FinishMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 327  : 	Method(IsImmobile);

	push	0
	push	OFFSET ?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsImmobile
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@PCIEPGHM@IsImmobile?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 328  : 
; 329  : 	Method(GetExperience);

	push	0
	push	OFFSET ?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperience
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@JILFBIAC@GetExperience?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 330  : 	Method(SetExperience);

	push	0
	push	OFFSET ?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetExperience
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@OHKLKLHF@SetExperience?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 331  : 	Method(ChangeExperience);

	push	0
	push	OFFSET ?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeExperience
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@KLHJLBIL@ChangeExperience?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 332  : 	Method(GetLevel);

	push	0
	push	OFFSET ?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLevel
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08MDGBDPHC@GetLevel?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 333  : 	Method(SetLevel);

	push	0
	push	OFFSET ?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLevel
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08DCENCMAP@SetLevel?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 334  : 	Method(ChangeLevel);

	push	0
	push	OFFSET ?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeLevel
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@GAKMDEHP@ChangeLevel?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 335  : 	Method(GetFacingDirection);

	push	0
	push	OFFSET ?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFacingDirection
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@FNLDHKMI@GetFacingDirection?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 336  : 	Method(RotateFacingDirectionClockwise);

	push	0
	push	OFFSET ?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionClockwise
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@JMEBNBEE@RotateFacingDirectionClockwise?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 337  : 	Method(RotateFacingDirectionCounterClockwise);

	push	0
	push	OFFSET ?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0CG@OOOIDGNO@RotateFacingDirectionCounterCloc@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 338  : 	Method(GetCargo);

	push	0
	push	OFFSET ?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08GAHMDLJN@GetCargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 339  : 	Method(GetFortifyTurns);

	push	0
	push	OFFSET ?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFortifyTurns
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@OCAPIEKB@GetFortifyTurns?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 340  : 	Method(GetBlitzCount);

	push	0
	push	OFFSET ?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlitzCount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@CMMIPJMH@GetBlitzCount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 341  : 	Method(IsBlitz);

	push	0
	push	OFFSET ?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBlitz
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07KPNLOLLE@IsBlitz?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 342  : 	Method(GetAmphibCount);

	push	0
	push	OFFSET ?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAmphibCount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@DOEJINNJ@GetAmphibCount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 343  : 	Method(IsAmphib);

	push	0
	push	OFFSET ?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAmphib
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08IIDGMJO@IsAmphib?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 344  : 	Method(GetRiverCrossingNoPenaltyCount);

	push	0
	push	OFFSET ?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@FJEFOKIO@GetRiverCrossingNoPenaltyCount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 345  : 	Method(IsRiverCrossingNoPenalty);

	push	0
	push	OFFSET ?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRiverCrossingNoPenalty
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@CKMHLMJL@IsRiverCrossingNoPenalty?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 346  : 	Method(IsEnemyRoute);

	push	0
	push	OFFSET ?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyRoute
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JICLFCIN@IsEnemyRoute?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 347  : 	Method(IsAlwaysHeal);

	push	0
	push	OFFSET ?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAlwaysHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@NNLJCGEA@IsAlwaysHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 348  : 	Method(IsHealOutsideFriendly);

	push	0
	push	OFFSET ?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHealOutsideFriendly
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@FIHHHACK@IsHealOutsideFriendly?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 349  : 	Method(IsHillsDoubleMove);

	push	0
	push	OFFSET ?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHillsDoubleMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@BEKIIEEN@IsHillsDoubleMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 350  : 	Method(IsGarrisoned);

	push	0
	push	OFFSET ?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGarrisoned
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@HELPNODL@IsGarrisoned?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 351  : 	Method(GetGarrisonedCity);

	push	0
	push	OFFSET ?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGarrisonedCity
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@NDGFBOMB@GetGarrisonedCity?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 352  : 
; 353  : 	Method(GetExtraVisibilityRange);

	push	0
	push	OFFSET ?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraVisibilityRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@LMONEFFA@GetExtraVisibilityRange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 354  : 	Method(GetExtraMoves);

	push	0
	push	OFFSET ?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoves
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@LOCEBOPL@GetExtraMoves?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 355  : 	Method(GetExtraMoveDiscount);

	push	0
	push	OFFSET ?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoveDiscount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@OMEPGIG@GetExtraMoveDiscount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 356  : 	Method(GetExtraRange);

	push	0
	push	OFFSET ?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@HJCFAOBN@GetExtraRange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 357  : 	Method(GetExtraIntercept);

	push	0
	push	OFFSET ?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraIntercept
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@MAMPNOBO@GetExtraIntercept?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 358  : 	Method(GetExtraEvasion);

	push	0
	push	OFFSET ?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEvasion
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@FKMGFEFH@GetExtraEvasion?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 359  : 	Method(GetExtraFirstStrikes);

	push	0
	push	OFFSET ?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@NHNKKCBF@GetExtraFirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 360  : 	Method(GetExtraChanceFirstStrikes);

	push	0
	push	OFFSET ?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraChanceFirstStrikes
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@ODNAIGPH@GetExtraChanceFirstStrikes?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 361  : 	Method(GetExtraWithdrawal);

	push	0
	push	OFFSET ?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraWithdrawal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@IOALAFL@GetExtraWithdrawal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 362  : 	Method(GetExtraEnemyHeal);

	push	0
	push	OFFSET ?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEnemyHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@BKCEPOIK@GetExtraEnemyHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 363  : 	Method(GetExtraNeutralHeal);

	push	0
	push	OFFSET ?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraNeutralHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@PPNDFFOE@GetExtraNeutralHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 364  : 	Method(GetExtraFriendlyHeal);

	push	0
	push	OFFSET ?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFriendlyHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@FDAKDOOD@GetExtraFriendlyHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 365  : 
; 366  : 	Method(GetSameTileHeal);

	push	0
	push	OFFSET ?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSameTileHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@PJJDJAFH@GetSameTileHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 367  : 	Method(GetAdjacentTileHeal);

	push	0
	push	OFFSET ?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentTileHeal
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@FOPILIOB@GetAdjacentTileHeal?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 368  : 
; 369  : 	Method(GetExtraCombatPercent);

	push	0
	push	OFFSET ?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCombatPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@KGCGLIBN@GetExtraCombatPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 370  : 	Method(GetFriendlyLandsModifier);

	push	0
	push	OFFSET ?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@ECEPCDCN@GetFriendlyLandsModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 371  : 	Method(GetFriendlyLandsAttackModifier);

	push	0
	push	OFFSET ?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsAttackModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@KLDAEKDJ@GetFriendlyLandsAttackModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 372  : 	Method(GetOutsideFriendlyLandsModifier);

	push	0
	push	OFFSET ?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0CA@IJLJKKDJ@GetOutsideFriendlyLandsModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 373  : #ifdef NQ_GOLDEN_AGE_FOREIGN_ATTACK_BONUS
; 374  : 	Method(GetGoldenAgeForeignAttackBonus);

	push	0
	push	OFFSET ?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@BHKIBPGK@GetGoldenAgeForeignAttackBonus?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 375  : #endif
; 376  : #ifdef NQ_COMBAT_STRENGTH_NEAR_FRIENDLY_MINOR
; 377  : 	Method(GetCombatStrengthNearFriendlyMinor);

	push	0
	push	OFFSET ?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0CD@PFMFCNHJ@GetCombatStrengthNearFriendlyMin@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 378  : #endif
; 379  : 	Method(GetExtraCityAttackPercent);

	push	0
	push	OFFSET ?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@EEJGACHD@GetExtraCityAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 380  : 	Method(GetExtraCityDefensePercent);

	push	0
	push	OFFSET ?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityDefensePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@OIBJDCOP@GetExtraCityDefensePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 381  : 	Method(GetExtraHillsAttackPercent);

	push	0
	push	OFFSET ?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@JDMNNJBO@GetExtraHillsAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 382  : 	Method(GetExtraHillsDefensePercent);

	push	0
	push	OFFSET ?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsDefensePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@NLMNHENB@GetExtraHillsDefensePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 383  : 
; 384  : 	Method(GetExtraOpenAttackPercent);

	push	0
	push	OFFSET ?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@LJKEFJID@GetExtraOpenAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 385  : 	Method(GetExtraOpenRangedAttackMod);

	push	0
	push	OFFSET ?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenRangedAttackMod
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@CBBBAFGK@GetExtraOpenRangedAttackMod?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 386  : 	Method(GetExtraRoughAttackPercent);

	push	0
	push	OFFSET ?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@EFEMEKEJ@GetExtraRoughAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 387  : 	Method(GetExtraRoughRangedAttackMod);

	push	0
	push	OFFSET ?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughRangedAttackMod
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BN@JELKIHJI@GetExtraRoughRangedAttackMod?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 388  : 	Method(GetExtraAttackFortifiedMod);

	push	0
	push	OFFSET ?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackFortifiedMod
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@PDPEFOMH@GetExtraAttackFortifiedMod?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 389  : 	Method(GetExtraAttackWoundedMod);

	push	0
	push	OFFSET ?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackWoundedMod
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@JEMHENOI@GetExtraAttackWoundedMod?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 390  : 	Method(GetExtraOpenDefensePercent);

	push	0
	push	OFFSET ?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenDefensePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@FFFJPCKI@GetExtraOpenDefensePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 391  : 
; 392  : 	Method(GetPillageChange);

	push	0
	push	OFFSET ?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPillageChange
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@HINGJFFL@GetPillageChange?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 393  : 	Method(GetUpgradeDiscount);

	push	0
	push	OFFSET ?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeDiscount
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@IEDPIMNK@GetUpgradeDiscount?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 394  : 	Method(GetExperiencePercent);

	push	0
	push	OFFSET ?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperiencePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@MJPLLDMK@GetExperiencePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 395  : 	Method(GetKamikazePercent);

	push	0
	push	OFFSET ?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetKamikazePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@CFFKEBAO@GetKamikazePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 396  : 
; 397  : 
; 398  : 	Method(IsOutOfAttacks);

	push	0
	push	OFFSET ?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOutOfAttacks
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@IKHOEAOE@IsOutOfAttacks?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 399  : 	Method(SetMadeAttack);

	push	0
	push	OFFSET ?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@MKFMNOAP@SetMadeAttack?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 400  : 	Method(isOutOfInterceptions);

	push	0
	push	OFFSET ?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lisOutOfInterceptions
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@CMPDBBFM@isOutOfInterceptions?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 401  : 	Method(SetMadeInterception);

	push	0
	push	OFFSET ?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeInterception
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@CHMMLBFN@SetMadeInterception?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 402  : 
; 403  : 	Method(IsPromotionReady);

	push	0
	push	OFFSET ?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionReady
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@NKIJIMHP@IsPromotionReady?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 404  : 	Method(SetPromotionReady);

	push	0
	push	OFFSET ?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetPromotionReady
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@EMJHOBEL@SetPromotionReady?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 405  : 	Method(GetOwner);

	push	0
	push	OFFSET ?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_08BODJMJJB@GetOwner?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 406  : 	Method(GetVisualOwner);

	push	0
	push	OFFSET ?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetVisualOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@DJDHAACE@GetVisualOwner?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 407  : 	Method(GetCombatOwner);

	push	0
	push	OFFSET ?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@OAMOBMMB@GetCombatOwner?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 408  : 	Method(GetOriginalOwner);

	push	0
	push	OFFSET ?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOriginalOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@FBHJECJI@GetOriginalOwner?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 409  : 	Method(SetOriginalOwner);

	push	0
	push	OFFSET ?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetOriginalOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@DFCAPMCK@SetOriginalOwner?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 410  : 	Method(GetTeam);

	push	0
	push	OFFSET ?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTeam
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07KIJFBNDA@GetTeam?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 411  : 	Method(GetUnitFlagIconOffset);

	push	0
	push	OFFSET ?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitFlagIconOffset
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@GPHCCLK@GetUnitFlagIconOffset?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 412  : 	Method(GetUnitPortraitOffset);

	push	0
	push	OFFSET ?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitPortraitOffset
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@PPJKPBMI@GetUnitPortraitOffset?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 413  : 
; 414  : 	Method(GetUnitType);

	push	0
	push	OFFSET ?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@PKBGPJIJ@GetUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 415  : 	Method(GetUnitClassType);

	push	0
	push	OFFSET ?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@DMDDFGBF@GetUnitClassType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 416  : 	Method(GetLeaderUnitType);

	push	0
	push	OFFSET ?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLeaderUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@HMDIHPK@GetLeaderUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 417  : 	Method(SetLeaderUnitType);

	push	0
	push	OFFSET ?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLeaderUnitType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BC@CCMIAMOE@SetLeaderUnitType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 418  : 	Method(IsNearGreatGeneral);

	push	0
	push	OFFSET ?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearGreatGeneral
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BD@FIBLLGCA@IsNearGreatGeneral?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 419  : 	Method(IsStackedGreatGeneral);

	push	0
	push	OFFSET ?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsStackedGreatGeneral
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@EGFCIODH@IsStackedGreatGeneral?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 420  : 	Method(IsIgnoreGreatGeneralBenefit);

	push	0
	push	OFFSET ?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BM@GGCJAMLP@IsIgnoreGreatGeneralBenefit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 421  : 	Method(GetReverseGreatGeneralModifier);

	push	0
	push	OFFSET ?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReverseGreatGeneralModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@NPLEODON@GetReverseGreatGeneralModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 422  : 	Method(GetGreatGeneralCombatModifier);

	push	0
	push	OFFSET ?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatGeneralCombatModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BO@BNDFJFHP@GetGreatGeneralCombatModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 423  : 	Method(IsNearSapper);

	push	0
	push	OFFSET ?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearSapper
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0N@JPLHPCNE@IsNearSapper?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 424  : 	Method(GetNearbyImprovementModifier);

	push	0
	push	OFFSET ?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNearbyImprovementModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BN@LIDKBFIB@GetNearbyImprovementModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 425  : 	Method(IsFriendlyUnitAdjacent);

	push	0
	push	OFFSET ?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFriendlyUnitAdjacent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@EHMHKIDN@IsFriendlyUnitAdjacent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 426  : 	Method(GetNumEnemyUnitsAdjacent);

	push	0
	push	OFFSET ?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BJ@DJLNBBGK@GetNumEnemyUnitsAdjacent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 427  : 	Method(IsEnemyCityAdjacent);

	push	0
	push	OFFSET ?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyCityAdjacent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@GIBMJJJB@IsEnemyCityAdjacent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 428  : 
; 429  : 	Method(GetTransportUnit);

	push	0
	push	OFFSET ?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTransportUnit
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@PJKLKFOJ@GetTransportUnit?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 430  : 	Method(IsCargo);

	push	0
	push	OFFSET ?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCargo
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07DCNKNHAD@IsCargo?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 431  : 
; 432  : 	Method(GetExtraDomainModifier);

	push	0
	push	OFFSET ?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraDomainModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@LGDAMEMJ@GetExtraDomainModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 433  : 
; 434  : 	Method(GetName);

	push	0
	push	OFFSET ?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetName
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07MMGEHGCI@GetName?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 435  : 	Method(GetNameNoDesc);

	push	0
	push	OFFSET ?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNameNoDesc
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@OFOGDJDK@GetNameNoDesc?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 436  : 	Method(HasName);

	push	0
	push	OFFSET ?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasName
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07PMAOHACP@HasName?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 437  : 	Method(GetNameKey);

	push	0
	push	OFFSET ?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNameKey
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@PJBAHION@GetNameKey?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 438  : 	Method(SetName);

	push	0
	push	OFFSET ?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetName
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_07DEJFEJPJ@SetName?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 439  : 	Method(IsTerrainDoubleMove);

	push	0
	push	OFFSET ?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTerrainDoubleMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@KAIIOOFC@IsTerrainDoubleMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 440  : 	Method(IsFeatureDoubleMove);

	push	0
	push	OFFSET ?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFeatureDoubleMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@DLKIIJFH@IsFeatureDoubleMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 441  : 
; 442  : 	Method(GetScriptData);

	push	0
	push	OFFSET ?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScriptData
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@IJPBDHCD@GetScriptData?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 443  : 	Method(SetScriptData);

	push	0
	push	OFFSET ?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScriptData
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@PGOPIEFE@SetScriptData?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 444  : 	Method(GetScenarioData);

	push	0
	push	OFFSET ?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScenarioData
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@EIONFNL@GetScenarioData?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 445  : 	Method(SetScenarioData);

	push	0
	push	OFFSET ?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScenarioData
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@DGJIKHMC@SetScenarioData?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 446  : 
; 447  : 	Method(GetExtraTerrainAttackPercent);

	push	0
	push	OFFSET ?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BN@DIABMFJL@GetExtraTerrainAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 448  : 	Method(GetExtraTerrainDefensePercent);

	push	0
	push	OFFSET ?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainDefensePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BO@EGLEMPGC@GetExtraTerrainDefensePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 449  : 	Method(GetExtraFeatureAttackPercent);

	push	0
	push	OFFSET ?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureAttackPercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BN@CPBINKED@GetExtraFeatureAttackPercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 450  : 	Method(GetExtraFeatureDefensePercent);

	push	0
	push	OFFSET ?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureDefensePercent
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BO@MOKLIMJL@GetExtraFeatureDefensePercent?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 451  : 	Method(GetExtraUnitCombatModifier);

	push	0
	push	OFFSET ?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraUnitCombatModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@FCNEPMJP@GetExtraUnitCombatModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 452  : 	Method(GetUnitClassModifier);

	push	0
	push	OFFSET ?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@IJFPHAOD@GetUnitClassModifier?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 453  : 
; 454  : 	Method(CanAcquirePromotion);

	push	0
	push	OFFSET ?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotion
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@NMKFIMAO@CanAcquirePromotion?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 455  : 	Method(CanAcquirePromotionAny);

	push	0
	push	OFFSET ?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotionAny
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BH@KEAILGDL@CanAcquirePromotionAny?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 456  : 	Method(IsPromotionValid);

	push	0
	push	OFFSET ?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionValid
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@LBEGEPDL@IsPromotionValid?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 457  : 	Method(IsHasPromotion);

	push	0
	push	OFFSET ?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHasPromotion
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@LONCCLND@IsHasPromotion?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 458  : 	Method(SetHasPromotion);

	push	0
	push	OFFSET ?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHasPromotion
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@MMNGCCEN@SetHasPromotion?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 459  : 
; 460  : 	Method(GetActivityType);

	push	0
	push	OFFSET ?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetActivityType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@PBKPFNFP@GetActivityType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 461  : 	Method(IsReadyToMove);

	push	0
	push	OFFSET ?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsReadyToMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0O@BOALNFPB@IsReadyToMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 462  : 	Method(IsBusy);

	push	0
	push	OFFSET ?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBusy
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_06OICOCAHF@IsBusy?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 463  : 
; 464  : 	Method(GetReligion);

	push	0
	push	OFFSET ?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReligion
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@GMHLBOLL@GetReligion?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 465  : 	Method(GetConversionStrength);

	push	0
	push	OFFSET ?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetConversionStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BG@CMODHJMA@GetConversionStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 466  : 	Method(GetSpreadsLeft);

	push	0
	push	OFFSET ?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpreadsLeft
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0P@CCJGDKMN@GetSpreadsLeft?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 467  : 	Method(GetNumFollowersAfterSpread);

	push	0
	push	OFFSET ?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumFollowersAfterSpread
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@NDOCOGDO@GetNumFollowersAfterSpread?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 468  : 	Method(GetMajorityReligionAfterSpread);

	push	0
	push	OFFSET ?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMajorityReligionAfterSpread
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BP@HBADFCCC@GetMajorityReligionAfterSpread?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 469  : 
; 470  : 	Method(GetTourismBlastStrength);

	push	0
	push	OFFSET ?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTourismBlastStrength
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BI@GPAANOLE@GetTourismBlastStrength?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 471  : 
; 472  : 	Method(GetGreatWorkSlotType);

	push	0
	push	OFFSET ?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatWorkSlotType
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BF@BJPLHKJ@GetGreatWorkSlotType?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 473  : 
; 474  : 	// Helper Functions
; 475  : 	Method(RangeStrike);

	push	0
	push	OFFSET ?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRangeStrike
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@LBKNMOHC@RangeStrike?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 476  : 
; 477  : 	Method(PushMission);

	push	0
	push	OFFSET ?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPushMission
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0M@KMEIMJMN@PushMission?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 478  : 	Method(PopMission);

	push	0
	push	OFFSET ?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPopMission
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0L@FNCAEGNI@PopMission?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 479  : 	Method(LastMissionPlot);

	push	0
	push	OFFSET ?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLastMissionPlot
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@BNAEAOBO@LastMissionPlot?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 480  : 	Method(CanStartMission);

	push	0
	push	OFFSET ?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanStartMission
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@JEHNJEHH@CanStartMission?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 481  : 
; 482  : 	Method(ExecuteSpecialExploreMove);

	push	0
	push	OFFSET ?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExecuteSpecialExploreMove
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BK@OKCCHHON@ExecuteSpecialExploreMove?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 483  : 
; 484  : 	Method(SetDeployFromOperationTurn);

	push	0
	push	OFFSET ?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDeployFromOperationTurn
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BL@IFBCJAOO@SetDeployFromOperationTurn?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 485  : 	Method(IsHigherTechThan);

	push	0
	push	OFFSET ?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHigherTechThan
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BB@DNHALCAP@IsHigherTechThan?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 486  : 	Method(IsLargerCivThan);

	push	0
	push	OFFSET ?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsLargerCivThan
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BA@PCGBFCNG@IsLargerCivThan?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 487  : 
; 488  : 	Method(IsRangedSupportFire);

	push	0
	push	OFFSET ?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangedSupportFire
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0BE@HLBAIPJO@IsRangedSupportFire?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 489  : #ifdef NQ_UNIT_IMMUNE_TO_PLUNDER_FROM_TRAIT
; 490  : 	Method(IsPlunderBlockedByOpposingTrait);

	push	0
	push	OFFSET ?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushcclosure
	add	esp, 12					; 0000000cH
	push	OFFSET ??_C@_0CA@GENACOON@IsPlunderBlockedByOpposingTrait?$AA@
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 491  : #endif
; 492  : }

	pop	ebp
	ret	0
?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z ENDP	; CvLuaUnit::PushMethods
_TEXT	ENDS
PUBLIC	??_C@_04BOICIEDE@Unit?$AA@			; `string'
PUBLIC	?GetTypeName@CvLuaUnit@@SAPBDXZ			; CvLuaUnit::GetTypeName
;	COMDAT ??_C@_04BOICIEDE@Unit?$AA@
CONST	SEGMENT
??_C@_04BOICIEDE@Unit?$AA@ DB 'Unit', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?GetTypeName@CvLuaUnit@@SAPBDXZ
_TEXT	SEGMENT
?GetTypeName@CvLuaUnit@@SAPBDXZ PROC			; CvLuaUnit::GetTypeName, COMDAT

; 495  : {

	push	ebp
	mov	ebp, esp

; 496  : 	return "Unit";

	mov	eax, OFFSET ??_C@_04BOICIEDE@Unit?$AA@

; 497  : }

	pop	ebp
	ret	0
?GetTypeName@CvLuaUnit@@SAPBDXZ ENDP			; CvLuaUnit::GetTypeName
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
EXTRN	_lua_pushboolean:PROC
; Function compile flags: /Odtp
;	COMDAT ?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bDoesNotExist$ = -1					; size = 1
_L$ = 8							; size = 4
?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsNone, COMDAT

; 504  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 505  : #ifdef AUI_WARNING_FIXES
; 506  : 	const bool bDoesNotExist = (GetInstance(L, 1, false) == NULL);
; 507  : 	lua_pushboolean(L, bDoesNotExist ? 1 : 0);
; 508  : #else
; 509  : 	const bool bDoesNotExist = (GetInstance(L, false) == NULL);

	push	1
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	test	eax, eax
	sete	cl
	mov	BYTE PTR _bDoesNotExist$[ebp], cl

; 510  : 	lua_pushboolean(L, bDoesNotExist);

	movzx	edx, BYTE PTR _bDoesNotExist$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 511  : #endif
; 512  : 
; 513  : 	return 1;

	mov	eax, 1

; 514  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsNone
_TEXT	ENDS
EXTRN	?convert@CvUnit@@QAEXPAV1@_N@Z:PROC		; CvUnit::convert
EXTRN	_lua_toboolean:PROC
; Function compile flags: /Odtp
;	COMDAT ?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bIsUpgrade$ = -5					; size = 1
_pkUnitToConvert$ = -4					; size = 4
_L$ = 8							; size = 4
?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lConvert, COMDAT

; 518  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 519  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 520  : 	CvUnit* pkUnitToConvert = GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnitToConvert$[ebp], eax

; 521  : 	bool bIsUpgrade = lua_toboolean(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIsUpgrade$[ebp], al

; 522  : 
; 523  : 	pkUnit->convert(pkUnitToConvert, bIsUpgrade);

	movzx	ecx, BYTE PTR _bIsUpgrade$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkUnitToConvert$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?convert@CvUnit@@QAEXPAV1@_N@Z		; CvUnit::convert

; 524  : 	return 0;

	xor	eax, eax

; 525  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lConvert
_TEXT	ENDS
EXTRN	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z:PROC	; CvUnit::kill
EXTRN	_lua_tointeger:PROC
EXTRN	_lua_type:PROC
; Function compile flags: /Odtp
;	COMDAT ?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv80 = -16						; size = 4
_pkUnit$ = -12						; size = 4
_ePlayer$ = -8						; size = 4
_bDelay$ = -1						; size = 1
_L$ = 8							; size = 4
?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lKill, COMDAT

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 530  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 531  : 	const bool bDelay = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bDelay$[ebp], dl

; 532  : 	const PlayerTypes ePlayer
; 533  : 	    = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@lKill
	mov	DWORD PTR tv80[ebp], -1
	jmp	SHORT $LN4@lKill
$LN3@lKill:
	push	3
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR tv80[ebp], eax
$LN4@lKill:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _ePlayer$[ebp], edx

; 534  : 
; 535  : 	pkUnit->kill(bDelay, ePlayer);

	mov	eax, DWORD PTR _ePlayer$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bDelay$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill

; 536  : 	return 0;

	xor	eax, eax

; 537  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lKill
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
EXTRN	?isActionRecommended@CvUnit@@QAE_NH@Z:PROC	; CvUnit::isActionRecommended
; Function compile flags: /Odtp
;	COMDAT ?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsActionRecommended, COMDAT

; 541  : {

	push	ebp
	mov	ebp, esp

; 542  : 	return BasicLuaMethod(L, &CvUnit::isActionRecommended);

	push	OFFSET ?isActionRecommended@CvUnit@@QAE_NH@Z ; CvUnit::isActionRecommended
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
	add	esp, 8

; 543  : }

	pop	ebp
	ret	0
?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsActionRecommended
_TEXT	ENDS
EXTRN	?isBetterDefenderThan@CvUnit@@QBE_NPBV1@0@Z:PROC ; CvUnit::isBetterDefenderThan
; Function compile flags: /Odtp
;	COMDAT ?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_pkDefender$ = -12					; size = 4
_bResult$ = -5						; size = 1
_pkAttacker$ = -4					; size = 4
_L$ = 8							; size = 4
?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsBetterDefenderThan, COMDAT

; 547  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 548  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 549  : 	CvUnit* pkDefender = GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 550  : 	CvUnit* pkAttacker = GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 551  : 	const bool bResult = pkUnit->isBetterDefenderThan(pkDefender, pkAttacker);

	mov	eax, DWORD PTR _pkAttacker$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isBetterDefenderThan@CvUnit@@QBE_NPBV1@0@Z ; CvUnit::isBetterDefenderThan
	mov	BYTE PTR _bResult$[ebp], al

; 552  : 
; 553  : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 554  : 	return 1;

	mov	eax, 1

; 555  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsBetterDefenderThan
_TEXT	ENDS
EXTRN	?canDoCommand@CvUnit@@QBE_NW4CommandTypes@@HH_N1@Z:PROC ; CvUnit::canDoCommand
EXTRN	_luaL_optinteger:PROC
; Function compile flags: /Odtp
;	COMDAT ?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -24						; size = 4
_bResult$ = -17						; size = 1
_iData1$ = -16						; size = 4
_eCommand$ = -12					; size = 4
_bTestVisible$ = -6					; size = 1
_bTestBusy$ = -5					; size = 1
_iData2$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDoCommand, COMDAT

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 560  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 561  : 	const CommandTypes eCommand = (CommandTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eCommand$[ebp], eax

; 562  : 	const int iData1		= lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iData1$[ebp], eax

; 563  : 	const int iData2		= lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iData2$[ebp], eax

; 564  : 	const bool bTestVisible = luaL_optint(L, 5, 0);		//defaults to false

	push	0
	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bTestVisible$[ebp], dl

; 565  : 	const bool bTestBusy	= luaL_optint(L, 6, 1);		//defaults to true

	push	1
	push	6
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bTestBusy$[ebp], cl

; 566  : 
; 567  : 	const bool bResult = pkUnit->canDoCommand(eCommand, iData1, iData2, bTestVisible, bTestBusy);

	movzx	edx, BYTE PTR _bTestBusy$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bTestVisible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iData2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iData1$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCommand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canDoCommand@CvUnit@@QBE_NW4CommandTypes@@HH_N1@Z ; CvUnit::canDoCommand
	mov	BYTE PTR _bResult$[ebp], al

; 568  : 
; 569  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 570  : 	return 1;

	mov	eax, 1

; 571  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDoCommand
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
EXTRN	?doCommand@CvUnit@@QAEXW4CommandTypes@@HH@Z:PROC ; CvUnit::doCommand
; Function compile flags: /Odtp
;	COMDAT ?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lDoCommand, COMDAT

; 575  : {

	push	ebp
	mov	ebp, esp

; 576  : 	return BasicLuaMethod(L, &CvUnit::doCommand);

	push	OFFSET ?doCommand@CvUnit@@QAEXW4CommandTypes@@HH@Z ; CvUnit::doCommand
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
	add	esp, 8

; 577  : }

	pop	ebp
	ret	0
?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lDoCommand
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
EXTRN	?GetPathEndTurnPlot@CvUnit@@QBEPAVCvPlot@@XZ:PROC ; CvUnit::GetPathEndTurnPlot
; Function compile flags: /Odtp
;	COMDAT ?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetPathEndTurnPlot, COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 582  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 583  : 
; 584  : 	CvPlot* pkPlot = pkUnit->GetPathEndTurnPlot();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetPathEndTurnPlot@CvUnit@@QBEPAVCvPlot@@XZ ; CvUnit::GetPathEndTurnPlot
	mov	DWORD PTR _pkPlot$[ebp], eax

; 585  : 	CvLuaPlot::Push(L, pkPlot);

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8

; 586  : 
; 587  : 	return 1;

	mov	eax, 1

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetPathEndTurnPlot
_TEXT	ENDS
PUBLIC	??_C@_03OHKGOOJO@NYI?$AA@			; `string'
;	COMDAT ??_C@_03OHKGOOJO@NYI?$AA@
CONST	SEGMENT
??_C@_03OHKGOOJO@NYI?$AA@ DB 'NYI', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGeneratePath, COMDAT

; 592  : {

	push	ebp
	mov	ebp, esp

; 593  : 	luaL_error(L, "NYI");

	push	OFFSET ??_C@_03OHKGOOJO@NYI?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_error
	add	esp, 8

; 594  : 	/*CvUnit* pkUnit = GetInstance(L);
; 595  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);
; 596  : 	const int iFlags = 0;
; 597  : 	const bool bReuse = luaL_optint(L, 4, 0);	//defeaults to false
; 598  : 	const bool bResult = pkUnit->generatePath();
; 599  : 
; 600  : 	lua_pushboolean(L, bResult);
; 601  : 	return 1;*/
; 602  : 	return 0;

	xor	eax, eax

; 603  : }

	pop	ebp
	ret	0
?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGeneratePath
_TEXT	ENDS
EXTRN	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z:PROC ; CvUnit::canEnterTerritory
; Function compile flags: /Odtp
;	COMDAT ?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bIgnoreRightOfPassage$ = -7				; size = 1
_bResult$ = -6						; size = 1
_bIsCity$ = -5						; size = 1
_eTeam$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanEnterTerritory, COMDAT

; 607  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 608  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 609  : 	const TeamTypes eTeam				= (TeamTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTeam$[ebp], eax

; 610  : 	const bool bIgnoreRightOfPassage	= luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIgnoreRightOfPassage$[ebp], al

; 611  : 	const bool bIsCity					= luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bIsCity$[ebp], dl

; 612  : 
; 613  : 	const bool bResult = pkUnit->canEnterTerritory(eTeam, bIgnoreRightOfPassage, bIsCity);

	push	0
	movzx	eax, BYTE PTR _bIsCity$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bIgnoreRightOfPassage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z ; CvUnit::canEnterTerritory
	mov	BYTE PTR _bResult$[ebp], al

; 614  : 
; 615  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 616  : 	return 1;

	mov	eax, 1

; 617  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanEnterTerritory
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
EXTRN	_lua_pushinteger:PROC
EXTRN	?GetDeclareWarRangeStrike@CvUnit@@QBE?AW4TeamTypes@@ABVCvPlot@@@Z:PROC ; CvUnit::GetDeclareWarRangeStrike
; Function compile flags: /Odtp
;	COMDAT ?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eResult$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetDeclareWarRangeStrike, COMDAT

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 622  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 623  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 624  : 
; 625  : 	TeamTypes eResult = NO_TEAM;

	mov	DWORD PTR _eResult$[ebp], -1

; 626  : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lGetDeclar

; 627  : 	{
; 628  : 		eResult = pkUnit->GetDeclareWarRangeStrike(*pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetDeclareWarRangeStrike@CvUnit@@QBE?AW4TeamTypes@@ABVCvPlot@@@Z ; CvUnit::GetDeclareWarRangeStrike
	mov	DWORD PTR _eResult$[ebp], eax
$LN1@lGetDeclar:

; 629  : 	}
; 630  : 	lua_pushinteger(L, eResult);

	mov	eax, DWORD PTR _eResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 631  : 	return 1;

	mov	eax, 1

; 632  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetDeclareWarRangeStrike
_TEXT	ENDS
EXTRN	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveOrAttackInto
; Function compile flags: /Odtp
;	COMDAT ?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -8						; size = 1
_bDestination$ = -7					; size = 1
_bMoveFlags$ = -6					; size = 1
_bDeclareWar$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanMoveOrAttackInto, COMDAT

; 636  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 637  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 638  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 639  : 	const bool bDeclareWar = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bDeclareWar$[ebp], al

; 640  : 	const bool bDestination = luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bDestination$[ebp], dl

; 641  : 
; 642  : 	byte bMoveFlags = 0;

	mov	BYTE PTR _bMoveFlags$[ebp], 0

; 643  : 	if(bDeclareWar)

	movzx	eax, BYTE PTR _bDeclareWar$[ebp]
	test	eax, eax
	je	SHORT $LN3@lCanMoveOr

; 644  : 	{
; 645  : 		bMoveFlags |= CvUnit::MOVEFLAG_DECLARE_WAR;

	movzx	ecx, BYTE PTR _bMoveFlags$[ebp]
	or	ecx, 2
	mov	BYTE PTR _bMoveFlags$[ebp], cl
$LN3@lCanMoveOr:

; 646  : 	}
; 647  : 	if(bDestination)

	movzx	edx, BYTE PTR _bDestination$[ebp]
	test	edx, edx
	je	SHORT $LN2@lCanMoveOr

; 648  : 	{
; 649  : 		bMoveFlags |= CvUnit::MOVEFLAG_DESTINATION;

	movzx	eax, BYTE PTR _bMoveFlags$[ebp]
	or	eax, 4
	mov	BYTE PTR _bMoveFlags$[ebp], al
$LN2@lCanMoveOr:

; 650  : 	}
; 651  : 
; 652  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 653  : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lCanMoveOr

; 654  : 	{
; 655  : 		pkUnit->canMoveOrAttackInto(*pkPlot, bMoveFlags);

	movzx	ecx, BYTE PTR _bMoveFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveOrAttackInto
$LN1@lCanMoveOr:

; 656  : 	}
; 657  : 
; 658  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 659  : 	return 1;

	mov	eax, 1

; 660  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanMoveOrAttackInto
_TEXT	ENDS
EXTRN	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveThrough
; Function compile flags: /Odtp
;	COMDAT ?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveThrough, COMDAT

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 665  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 666  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 667  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 668  : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lCanMoveTh

; 669  : 	{
; 670  : 		bResult = pkUnit->canMoveThrough(*pkPlot);

	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveThrough
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lCanMoveTh:

; 671  : 	}
; 672  : 
; 673  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 674  : 	return 1;

	mov	eax, 1

; 675  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveThrough
_TEXT	ENDS
EXTRN	?jumpToNearestValidPlot@CvUnit@@QAE_NXZ:PROC	; CvUnit::jumpToNearestValidPlot
; Function compile flags: /Odtp
;	COMDAT ?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lJumpToNearestValidPlot, COMDAT

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 680  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 681  : 
; 682  : 	bool bResult = pkUnit->jumpToNearestValidPlot();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?jumpToNearestValidPlot@CvUnit@@QAE_NXZ	; CvUnit::jumpToNearestValidPlot
	mov	BYTE PTR _bResult$[ebp], al

; 683  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 684  : 	return 1;

	mov	eax, 1

; 685  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lJumpToNearestValidPlot
_TEXT	ENDS
EXTRN	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z:PROC	; CvUnit::getCombatDamage
; Function compile flags: /Odtp
;	COMDAT ?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -28						; size = 4
_bAttackerIsCity$ = -22					; size = 1
_bDefenderIsCity$ = -21					; size = 1
_iStrength$ = -20					; size = 4
_iCurrentDamage$ = -16					; size = 4
_bIncludeRand$ = -9					; size = 1
_iResult$ = -8						; size = 4
_iOpponentStrength$ = -4				; size = 4
_L$ = 8							; size = 4
?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatDamage, COMDAT

; 689  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 690  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 691  : 	const int iStrength = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iStrength$[ebp], eax

; 692  : 	const int iOpponentStrength = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iOpponentStrength$[ebp], eax

; 693  : 	const int iCurrentDamage = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iCurrentDamage$[ebp], eax

; 694  : 	const bool bIncludeRand = lua_toboolean(L, 5);

	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bIncludeRand$[ebp], dl

; 695  : 	const bool bAttackerIsCity = lua_toboolean(L, 6);

	push	6
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bAttackerIsCity$[ebp], cl

; 696  : 	const bool bDefenderIsCity = lua_toboolean(L, 7);

	push	7
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bDefenderIsCity$[ebp], al

; 697  : 
; 698  : 	const int iResult = pkUnit->getCombatDamage(iStrength, iOpponentStrength, iCurrentDamage, bIncludeRand, bAttackerIsCity, bDefenderIsCity);

	movzx	ecx, BYTE PTR _bDefenderIsCity$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bAttackerIsCity$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bIncludeRand$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iCurrentDamage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iOpponentStrength$[ebp]
	push	edx
	mov	eax, DWORD PTR _iStrength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage
	mov	DWORD PTR _iResult$[ebp], eax

; 699  : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 700  : 
; 701  : 	return 1;

	mov	eax, 1

; 702  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatDamage
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
EXTRN	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z:PROC ; CvUnitCombat::GetFireSupportUnit
; Function compile flags: /Odtp
;	COMDAT ?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T224809 = -28						; size = 4
$T224800 = -24						; size = 4
_pkUnit$ = -20						; size = 4
_eDefender$ = -16					; size = 4
_pkUnitToReturn$ = -12					; size = 4
_iX$ = -8						; size = 4
_iY$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFireSupportUnit, COMDAT

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 707  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 708  : 	const PlayerTypes eDefender = (PlayerTypes) lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eDefender$[ebp], eax

; 709  : 	const int iX = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iX$[ebp], eax

; 710  : 	const int iY = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iY$[ebp], eax

; 711  : 
; 712  : 	CvUnit* pkUnitToReturn = CvUnitCombat::GetFireSupportUnit(eDefender, iX, iY, pkUnit->getX(), pkUnit->getY());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T224800[ebp], edx
	mov	eax, DWORD PTR _pkUnit$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T224809[ebp], ecx
	mov	edx, DWORD PTR $T224800[ebp]
	push	edx
	mov	eax, DWORD PTR $T224809[ebp]
	push	eax
	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	mov	eax, DWORD PTR _eDefender$[ebp]
	push	eax
	call	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ; CvUnitCombat::GetFireSupportUnit
	add	esp, 20					; 00000014H
	mov	DWORD PTR _pkUnitToReturn$[ebp], eax

; 713  : 	CvLuaUnit::Push(L, pkUnitToReturn);

	mov	ecx, DWORD PTR _pkUnitToReturn$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8

; 714  : 
; 715  : 	return 1;

	mov	eax, 1

; 716  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFireSupportUnit
_TEXT	ENDS
EXTRN	?CanAutomate@CvUnit@@QBE_NW4AutomateTypes@@_N@Z:PROC ; CvUnit::CanAutomate
; Function compile flags: /Odtp
;	COMDAT ?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eAutomate$ = -4					; size = 4
_L$ = 8							; size = 4
?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAutomate, COMDAT

; 720  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 721  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 722  : 	const AutomateTypes eAutomate = (AutomateTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eAutomate$[ebp], eax

; 723  : 	const bool bResult = pkUnit->CanAutomate(eAutomate);

	push	0
	mov	edx, DWORD PTR _eAutomate$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?CanAutomate@CvUnit@@QBE_NW4AutomateTypes@@_N@Z ; CvUnit::CanAutomate
	mov	BYTE PTR _bResult$[ebp], al

; 724  : 
; 725  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 726  : 	return 1;

	mov	eax, 1

; 727  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAutomate
_TEXT	ENDS
EXTRN	?canRebaseAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canRebaseAt
; Function compile flags: /Odtp
;	COMDAT ?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bResult$ = -13						; size = 1
_iX$ = -12						; size = 4
_iY$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRebaseAt, COMDAT

; 731  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 732  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 733  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 734  : 	const int iX = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iX$[ebp], eax

; 735  : 	const int iY = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iY$[ebp], eax

; 736  : 	const bool bResult = pkUnit->canRebaseAt(pkPlot,iX,iY);

	mov	ecx, DWORD PTR _iY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iX$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canRebaseAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canRebaseAt
	mov	BYTE PTR _bResult$[ebp], al

; 737  : 
; 738  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 739  : 	return 1;

	mov	eax, 1

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRebaseAt
_TEXT	ENDS
EXTRN	?canScrap@CvUnit@@QBE_N_N@Z:PROC		; CvUnit::canScrap
; Function compile flags: /Odtp
;	COMDAT ?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanScrap, COMDAT

; 744  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 745  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 746  : 	const bool bResult = pkUnit->canScrap();

	push	0
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canScrap@CvUnit@@QBE_N_N@Z		; CvUnit::canScrap
	mov	BYTE PTR _bResult$[ebp], al

; 747  : 
; 748  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 749  : 	return 1;

	mov	eax, 1

; 750  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanScrap
_TEXT	ENDS
EXTRN	?GetScrapGold@CvUnit@@QBEHXZ:PROC		; CvUnit::GetScrapGold
; Function compile flags: /Odtp
;	COMDAT ?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScrapGold, COMDAT

; 754  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 755  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 756  : 	const int iResult = pkUnit->GetScrapGold();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetScrapGold@CvUnit@@QBEHXZ		; CvUnit::GetScrapGold
	mov	DWORD PTR _iResult$[ebp], eax

; 757  : 
; 758  : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 759  : 	return 1;

	mov	eax, 1

; 760  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScrapGold
_TEXT	ENDS
EXTRN	?canGift@CvUnit@@QBE_N_N0@Z:PROC		; CvUnit::canGift
; Function compile flags: /Odtp
;	COMDAT ?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -3						; size = 1
_bTestTransport$ = -2					; size = 1
_bTestVisible$ = -1					; size = 1
_L$ = 8							; size = 4
?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanGift, COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 765  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 766  : 	const bool bTestVisible = luaL_optint(L, 2, 0);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bTestVisible$[ebp], dl

; 767  : 	const bool bTestTransport = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bTestTransport$[ebp], cl

; 768  : 	const bool bResult = pkUnit->canGift(bTestVisible, bTestTransport);

	movzx	edx, BYTE PTR _bTestTransport$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bTestVisible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canGift@CvUnit@@QBE_N_N0@Z		; CvUnit::canGift
	mov	BYTE PTR _bResult$[ebp], al

; 769  : 
; 770  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 771  : 	return 1;

	mov	eax, 1

; 772  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanGift
_TEXT	ENDS
EXTRN	?CanDistanceGift@CvUnit@@QBE_NW4PlayerTypes@@@Z:PROC ; CvUnit::CanDistanceGift
; Function compile flags: /Odtp
;	COMDAT ?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eToPlayer$ = -4					; size = 4
_L$ = 8							; size = 4
?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDistanceGift, COMDAT

; 776  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 777  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 778  : 	const PlayerTypes eToPlayer = (PlayerTypes) lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eToPlayer$[ebp], eax

; 779  : 	const bool bResult = pkUnit->CanDistanceGift(eToPlayer);

	mov	edx, DWORD PTR _eToPlayer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?CanDistanceGift@CvUnit@@QBE_NW4PlayerTypes@@@Z ; CvUnit::CanDistanceGift
	mov	BYTE PTR _bResult$[ebp], al

; 780  : 
; 781  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 782  : 	return 1;

	mov	eax, 1

; 783  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDistanceGift
_TEXT	ENDS
EXTRN	?canLoadUnit@CvUnit@@QBE_NABV1@ABVCvPlot@@@Z:PROC ; CvUnit::canLoadUnit
; Function compile flags: /Odtp
;	COMDAT ?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_pkLoadUnit$ = -8					; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanLoadUnit, COMDAT

; 787  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 788  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 789  : 	CvUnit* pkLoadUnit = GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkLoadUnit$[ebp], eax

; 790  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 3);

	push	1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 791  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 792  : 	if(pkPlot && pkUnit)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lCanLoadUn
	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	SHORT $LN1@lCanLoadUn

; 793  : 	{
; 794  : 		bResult = pkUnit->canLoadUnit(*pkLoadUnit, *pkPlot);

	mov	eax, DWORD PTR _pkPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkLoadUnit$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canLoadUnit@CvUnit@@QBE_NABV1@ABVCvPlot@@@Z ; CvUnit::canLoadUnit
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lCanLoadUn:

; 795  : 	}
; 796  : 
; 797  : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 798  : 	return 1;

	mov	eax, 1

; 799  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanLoadUnit
_TEXT	ENDS
EXTRN	?canLoad@CvUnit@@QBE_NABVCvPlot@@@Z:PROC	; CvUnit::canLoad
; Function compile flags: /Odtp
;	COMDAT ?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanLoad, COMDAT

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 804  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 805  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 806  : 
; 807  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 808  : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lCanLoad

; 809  : 	{
; 810  : 		bResult = pkUnit->canLoad(*pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canLoad@CvUnit@@QBE_NABVCvPlot@@@Z	; CvUnit::canLoad
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lCanLoad:

; 811  : 	}
; 812  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 813  : 	return 1;

	mov	eax, 1

; 814  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanLoad
_TEXT	ENDS
EXTRN	?canUnload@CvUnit@@QBE_NXZ:PROC			; CvUnit::canUnload
; Function compile flags: /Odtp
;	COMDAT ?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanUnload, COMDAT

; 818  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 819  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 820  : 	const bool bResult = pkUnit->canUnload();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canUnload@CvUnit@@QBE_NXZ		; CvUnit::canUnload
	mov	BYTE PTR _bResult$[ebp], al

; 821  : 
; 822  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 823  : 	return 1;

	mov	eax, 1

; 824  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanUnload
_TEXT	ENDS
EXTRN	?canUnloadAll@CvUnit@@QBE_NXZ:PROC		; CvUnit::canUnloadAll
; Function compile flags: /Odtp
;	COMDAT ?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanUnloadAll, COMDAT

; 828  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 829  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 830  : 	const bool bResult = pkUnit->canUnloadAll();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canUnloadAll@CvUnit@@QBE_NXZ		; CvUnit::canUnloadAll
	mov	BYTE PTR _bResult$[ebp], al

; 831  : 
; 832  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 833  : 	return 1;

	mov	eax, 1

; 834  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanUnloadAll
_TEXT	ENDS
EXTRN	?canHold@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canHold
; Function compile flags: /Odtp
;	COMDAT ?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanHold, COMDAT

; 838  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 839  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 840  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 841  : 	const bool bResult = pkUnit->canHold(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canHold@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canHold
	mov	BYTE PTR _bResult$[ebp], al

; 842  : 
; 843  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 844  : 	return 1;

	mov	eax, 1

; 845  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanHold
_TEXT	ENDS
EXTRN	?canSleep@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canSleep
; Function compile flags: /Odtp
;	COMDAT ?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSleep, COMDAT

; 849  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 850  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 851  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 852  : 	const bool bResult = pkUnit->canSleep(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canSleep@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canSleep
	mov	BYTE PTR _bResult$[ebp], al

; 853  : 
; 854  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 855  : 	return 1;

	mov	eax, 1

; 856  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSleep
_TEXT	ENDS
EXTRN	?canFortify@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canFortify
; Function compile flags: /Odtp
;	COMDAT ?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanFortify, COMDAT

; 860  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 861  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 862  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 863  : 	const bool bResult = pkUnit->canFortify(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canFortify@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canFortify
	mov	BYTE PTR _bResult$[ebp], al

; 864  : 
; 865  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 866  : 	return 1;

	mov	eax, 1

; 867  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanFortify
_TEXT	ENDS
EXTRN	?canAirPatrol@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirPatrol
; Function compile flags: /Odtp
;	COMDAT ?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirPatrol, COMDAT

; 871  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 872  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 873  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 874  : 	const bool bResult = pkUnit->canAirPatrol(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAirPatrol@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canAirPatrol
	mov	BYTE PTR _bResult$[ebp], al

; 875  : 
; 876  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 877  : 	return 1;

	mov	eax, 1

; 878  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirPatrol
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEmbarked, COMDAT

; 882  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 883  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 884  : 	const bool bResult = pkUnit->isEmbarked();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	dl, BYTE PTR [ecx+1652]
	mov	BYTE PTR _bResult$[ebp], dl

; 885  : 
; 886  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 887  : 	return 1;

	mov	eax, 1

; 888  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEmbarked
_TEXT	ENDS
EXTRN	?setEmbarked@CvUnit@@QAEX_N@Z:PROC		; CvUnit::setEmbarked
; Function compile flags: /Odtp
;	COMDAT ?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bNewValue$ = -1					; size = 1
_L$ = 8							; size = 4
?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetEmbarked, COMDAT

; 892  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 893  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 894  : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bNewValue$[ebp], dl

; 895  : 
; 896  : 	pkUnit->setEmbarked(bNewValue);

	movzx	eax, BYTE PTR _bNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setEmbarked@CvUnit@@QAEX_N@Z		; CvUnit::setEmbarked

; 897  : 	return 0;

	xor	eax, eax

; 898  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetEmbarked
_TEXT	ENDS
EXTRN	?canHeal@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canHeal
; Function compile flags: /Odtp
;	COMDAT ?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanHeal, COMDAT

; 902  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 903  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 904  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 905  : 	const bool bResult = pkUnit->canHeal(pkPlot);

	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canHeal@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canHeal
	mov	BYTE PTR _bResult$[ebp], al

; 906  : 
; 907  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 908  : 	return 1;

	mov	eax, 1

; 909  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanHeal
_TEXT	ENDS
EXTRN	?canSentry@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canSentry
; Function compile flags: /Odtp
;	COMDAT ?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSentry, COMDAT

; 913  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 914  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 915  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 916  : 	const bool bResult = pkUnit->canSentry(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canSentry@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canSentry
	mov	BYTE PTR _bResult$[ebp], al

; 917  : 
; 918  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 919  : 	return 1;

	mov	eax, 1

; 920  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSentry
_TEXT	ENDS
EXTRN	?canEmbark@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canEmbark
; Function compile flags: /Odtp
;	COMDAT ?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanEmbark, COMDAT

; 924  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 925  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 926  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 927  : 	const bool bResult = pkUnit->canEmbark(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canEmbark@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canEmbark
	mov	BYTE PTR _bResult$[ebp], al

; 928  : 
; 929  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 930  : 	return 1;

	mov	eax, 1

; 931  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanEmbark
_TEXT	ENDS
EXTRN	?canDisembark@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canDisembark
; Function compile flags: /Odtp
;	COMDAT ?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDisembark, COMDAT

; 935  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 936  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 937  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 938  : 	const bool bResult = pkUnit->canDisembark(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canDisembark@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canDisembark
	mov	BYTE PTR _bResult$[ebp], al

; 939  : 
; 940  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 941  : 	return 1;

	mov	eax, 1

; 942  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDisembark
_TEXT	ENDS
EXTRN	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z:PROC ; CvUnit::canEmbarkOnto
EXTRN	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z:PROC	; luaL_optbool
; Function compile flags: /Odtp
;	COMDAT ?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bIsDestination$ = -13					; size = 1
_pkTargetPlot$ = -12					; size = 4
_pkOriginPlot$ = -8					; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanEmbarkOnto, COMDAT

; 946  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 947  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 948  : 	CvPlot* pkOriginPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkOriginPlot$[ebp], eax

; 949  : 	CvPlot* pkTargetPlot = CvLuaPlot::GetInstance(L, 3);

	push	1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 950  : 	bool bIsDestination = luaL_optbool(L, 4, true);		// Assume Lua is querying for a destination of the embark.  This will cause the test to fail if there is are stacking issues.

	push	1
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bIsDestination$[ebp], al

; 951  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 952  : 	if(pkOriginPlot && pkTargetPlot)

	cmp	DWORD PTR _pkOriginPlot$[ebp], 0
	je	SHORT $LN1@lCanEmbark
	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	SHORT $LN1@lCanEmbark

; 953  : 	{
; 954  : 		bResult = pkUnit->canEmbarkOnto(*pkOriginPlot, *pkTargetPlot, false, bIsDestination);

	movzx	ecx, BYTE PTR _bIsDestination$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pkTargetPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkOriginPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lCanEmbark:

; 955  : 	}
; 956  : 
; 957  : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 958  : 	return 1;

	mov	eax, 1

; 959  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanEmbarkOnto
_TEXT	ENDS
EXTRN	?canDisembarkOnto@CvUnit@@QBE_NABVCvPlot@@_N@Z:PROC ; CvUnit::canDisembarkOnto
; Function compile flags: /Odtp
;	COMDAT ?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bIsDestination$ = -9					; size = 1
_pkTargetPlot$ = -8					; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDisembarkOnto, COMDAT

; 963  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 964  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 965  : 	CvPlot* pkTargetPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkTargetPlot$[ebp], eax

; 966  : 	bool bIsDestination = luaL_optbool(L, 3, true);		// Assume Lua is querying for a destination of the dis-embark.  This will cause the test to fail if there is are stacking issues.

	push	1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bIsDestination$[ebp], al

; 967  : 
; 968  : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 969  : 	if(pkTargetPlot)

	cmp	DWORD PTR _pkTargetPlot$[ebp], 0
	je	SHORT $LN1@lCanDisemb

; 970  : 	{
; 971  : 		bResult = pkUnit->canDisembarkOnto(*pkTargetPlot, bIsDestination);	

	movzx	eax, BYTE PTR _bIsDestination$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkTargetPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canDisembarkOnto@CvUnit@@QBE_NABVCvPlot@@_N@Z ; CvUnit::canDisembarkOnto
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lCanDisemb:

; 972  : 	}
; 973  : 
; 974  : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 975  : 	return 1;

	mov	eax, 1

; 976  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDisembarkOnto
_TEXT	ENDS
EXTRN	?embark@CvUnit@@QAEXPAVCvPlot@@@Z:PROC		; CvUnit::embark
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	_lua_gettop:PROC
; Function compile flags: /Odtp
;	COMDAT ?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv158 = -68						; size = 4
tv173 = -64						; size = 4
$T224942 = -60						; size = 4
$T224929 = -56						; size = 4
$T224925 = -52						; size = 4
$T224911 = -48						; size = 4
$T224907 = -41						; size = 1
$T224896 = -40						; size = 4
$T224892 = -33						; size = 1
_iMapY$224986 = -32					; size = 4
_iMapX$224985 = -28					; size = 4
$T224885 = -24						; size = 4
$T224881 = -20						; size = 4
$T224872 = -16						; size = 4
_pkTargetPlot$221530 = -12				; size = 4
_pkUnit$ = -8						; size = 4
_bSuccess$ = -1						; size = 1
_L$ = 8							; size = 4
?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lEmbark, COMDAT

; 980  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 981  : 	bool bSuccess = false;

	mov	BYTE PTR _bSuccess$[ebp], 0

; 982  : 
; 983  : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 984  : 	if(pkUnit != NULL)

	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	$LN4@lEmbark

; 985  : 	{
; 986  : 		CvPlot* pkTargetPlot = NULL;

	mov	DWORD PTR _pkTargetPlot$221530[ebp], 0

; 987  : 		if(lua_gettop(L) > 1)

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	cmp	eax, 1
	jle	SHORT $LN9@lEmbark

; 988  : 			pkTargetPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkTargetPlot$221530[ebp], eax

; 989  : 		else

	jmp	$LN2@lEmbark

; 990  : 			pkTargetPlot = GC.getMap().plot(pkUnit->getX(), pkUnit->getY());

$LN9@lEmbark:
	mov	eax, DWORD PTR _pkUnit$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR $T224872[ebp], ecx
	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR $T224881[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T224885[ebp], ecx
	cmp	DWORD PTR $T224881[ebp], -2147483647	; 80000001H
	je	SHORT $LN17@lEmbark
	cmp	DWORD PTR $T224872[ebp], -2147483647	; 80000001H
	jne	SHORT $LN18@lEmbark
$LN17@lEmbark:
	mov	DWORD PTR _pkTargetPlot$221530[ebp], 0
	jmp	$LN2@lEmbark
$LN18@lEmbark:
	mov	edx, DWORD PTR $T224885[ebp]
	mov	al, BYTE PTR [edx+4056]
	mov	BYTE PTR $T224892[ebp], al
	mov	ecx, DWORD PTR $T224885[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224896[ebp], edx
	movzx	eax, BYTE PTR $T224892[ebp]
	test	eax, eax
	je	SHORT $LN30@lEmbark
	cmp	DWORD PTR $T224881[ebp], 0
	jge	SHORT $LN29@lEmbark
	mov	eax, DWORD PTR $T224881[ebp]
	cdq
	idiv	DWORD PTR $T224896[ebp]
	add	edx, DWORD PTR $T224896[ebp]
	mov	DWORD PTR _iMapX$224985[ebp], edx
	jmp	SHORT $LN31@lEmbark
	jmp	SHORT $LN30@lEmbark
$LN29@lEmbark:
	mov	ecx, DWORD PTR $T224881[ebp]
	cmp	ecx, DWORD PTR $T224896[ebp]
	jl	SHORT $LN30@lEmbark
	mov	eax, DWORD PTR $T224881[ebp]
	cdq
	idiv	DWORD PTR $T224896[ebp]
	mov	DWORD PTR _iMapX$224985[ebp], edx
	jmp	SHORT $LN31@lEmbark
$LN30@lEmbark:
	mov	edx, DWORD PTR $T224881[ebp]
	mov	DWORD PTR _iMapX$224985[ebp], edx
$LN31@lEmbark:
	mov	eax, DWORD PTR $T224885[ebp]
	mov	cl, BYTE PTR [eax+4057]
	mov	BYTE PTR $T224907[ebp], cl
	mov	edx, DWORD PTR $T224885[ebp]
	mov	eax, DWORD PTR [edx+4024]
	mov	DWORD PTR $T224911[ebp], eax
	movzx	ecx, BYTE PTR $T224907[ebp]
	test	ecx, ecx
	je	SHORT $LN40@lEmbark
	cmp	DWORD PTR $T224872[ebp], 0
	jge	SHORT $LN39@lEmbark
	mov	eax, DWORD PTR $T224872[ebp]
	cdq
	idiv	DWORD PTR $T224911[ebp]
	add	edx, DWORD PTR $T224911[ebp]
	mov	DWORD PTR _iMapY$224986[ebp], edx
	jmp	SHORT $LN41@lEmbark
	jmp	SHORT $LN40@lEmbark
$LN39@lEmbark:
	mov	edx, DWORD PTR $T224872[ebp]
	cmp	edx, DWORD PTR $T224911[ebp]
	jl	SHORT $LN40@lEmbark
	mov	eax, DWORD PTR $T224872[ebp]
	cdq
	idiv	DWORD PTR $T224911[ebp]
	mov	DWORD PTR _iMapY$224986[ebp], edx
	jmp	SHORT $LN41@lEmbark
$LN40@lEmbark:
	mov	eax, DWORD PTR $T224872[ebp]
	mov	DWORD PTR _iMapY$224986[ebp], eax
$LN41@lEmbark:
	cmp	DWORD PTR _iMapX$224985[ebp], 0
	jl	SHORT $LN45@lEmbark
	mov	ecx, DWORD PTR $T224885[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224925[ebp], edx
	mov	eax, DWORD PTR _iMapX$224985[ebp]
	cmp	eax, DWORD PTR $T224925[ebp]
	jge	SHORT $LN45@lEmbark
	cmp	DWORD PTR _iMapY$224986[ebp], 0
	jl	SHORT $LN45@lEmbark
	mov	ecx, DWORD PTR $T224885[ebp]
	mov	edx, DWORD PTR [ecx+4024]
	mov	DWORD PTR $T224929[ebp], edx
	mov	eax, DWORD PTR _iMapY$224986[ebp]
	cmp	eax, DWORD PTR $T224929[ebp]
	jge	SHORT $LN45@lEmbark
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN43@lEmbark
$LN45@lEmbark:
	mov	DWORD PTR tv173[ebp], 0
$LN43@lEmbark:
	cmp	DWORD PTR tv173[ebp], 0
	je	SHORT $LN21@lEmbark
	mov	ecx, DWORD PTR $T224885[ebp]
	mov	edx, DWORD PTR [ecx+4020]
	mov	DWORD PTR $T224942[ebp], edx
	mov	eax, DWORD PTR _iMapY$224986[ebp]
	imul	eax, DWORD PTR $T224942[ebp]
	add	eax, DWORD PTR _iMapX$224985[ebp]
	imul	eax, 484				; 000001e4H
	mov	ecx, DWORD PTR $T224885[ebp]
	add	eax, DWORD PTR [ecx+4068]
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN22@lEmbark
$LN21@lEmbark:
	mov	DWORD PTR tv158[ebp], 0
$LN22@lEmbark:
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR _pkTargetPlot$221530[ebp], edx
$LN2@lEmbark:

; 991  : 
; 992  : 		if(pkTargetPlot != NULL)

	cmp	DWORD PTR _pkTargetPlot$221530[ebp], 0
	je	SHORT $LN4@lEmbark

; 993  : 		{
; 994  : 			pkUnit->embark(pkTargetPlot);

	mov	eax, DWORD PTR _pkTargetPlot$221530[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?embark@CvUnit@@QAEXPAVCvPlot@@@Z	; CvUnit::embark

; 995  : 			bSuccess = true;

	mov	BYTE PTR _bSuccess$[ebp], 1
$LN4@lEmbark:

; 996  : 		}
; 997  : 	}
; 998  : 
; 999  : 	lua_pushboolean(L, bSuccess);

	movzx	ecx, BYTE PTR _bSuccess$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1000 : 
; 1001 : 	return 1;

	mov	eax, 1

; 1002 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lEmbark
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
EXTRN	?IsRangeAttackIgnoreLOS@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsRangeAttackIgnoreLOS
; Function compile flags: /Odtp
;	COMDAT ?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangeAttackIgnoreLOS, COMDAT

; 1006 : {

	push	ebp
	mov	ebp, esp

; 1007 : 	return BasicLuaMethod(L, &CvUnit::IsRangeAttackIgnoreLOS);

	push	OFFSET ?IsRangeAttackIgnoreLOS@CvUnit@@QBE_NXZ ; CvUnit::IsRangeAttackIgnoreLOS
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 1008 : }

	pop	ebp
	ret	0
?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangeAttackIgnoreLOS
_TEXT	ENDS
EXTRN	?canAirlift@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirlift
; Function compile flags: /Odtp
;	COMDAT ?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirlift, COMDAT

; 1012 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1013 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1014 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1015 : 	const bool bResult = pkUnit->canAirlift(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAirlift@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canAirlift
	mov	BYTE PTR _bResult$[ebp], al

; 1016 : 
; 1017 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1018 : 	return 1;

	mov	eax, 1

; 1019 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirlift
_TEXT	ENDS
EXTRN	?canAirliftAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canAirliftAt
; Function compile flags: /Odtp
;	COMDAT ?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bResult$ = -13						; size = 1
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirliftAt, COMDAT

; 1023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1024 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1025 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1026 : 	const int x = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 1027 : 	const int y = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 1028 : 	const bool bResult = pkUnit->canAirliftAt(pkPlot, x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAirliftAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canAirliftAt
	mov	BYTE PTR _bResult$[ebp], al

; 1029 : 
; 1030 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1031 : 	return 1;

	mov	eax, 1

; 1032 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirliftAt
_TEXT	ENDS
EXTRN	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z:PROC ; CvUnit::isNukeVictim
; Function compile flags: /Odtp
;	COMDAT ?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_eTeam$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNukeVictim, COMDAT

; 1036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1037 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1038 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1039 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTeam$[ebp], eax

; 1040 : 	const bool bResult = pkUnit->isNukeVictim(pkPlot, eTeam);

	mov	eax, DWORD PTR _eTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z ; CvUnit::isNukeVictim
	mov	BYTE PTR _bResult$[ebp], al

; 1041 : 
; 1042 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1043 : 	return 1;

	mov	eax, 1

; 1044 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNukeVictim
_TEXT	ENDS
EXTRN	?canNuke@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canNuke
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
; Function compile flags: /Odtp
;	COMDAT ?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanNuke, COMDAT

; 1048 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1049 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1050 : 	const bool bResult = pkUnit->canNuke(pkUnit->plot());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canNuke@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canNuke
	mov	BYTE PTR _bResult$[ebp], al

; 1051 : 
; 1052 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1053 : 	return 1;

	mov	eax, 1

; 1054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanNuke
_TEXT	ENDS
EXTRN	?canNukeAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canNukeAt
; Function compile flags: /Odtp
;	COMDAT ?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanNukeAt, COMDAT

; 1058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1059 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1060 : 	const int x = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 1061 : 	const int y = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 1062 : 	const bool bResult = pkUnit->canNukeAt(pkUnit->plot(), x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canNukeAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z	; CvUnit::canNukeAt
	mov	BYTE PTR _bResult$[ebp], al

; 1063 : 
; 1064 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1065 : 	return 1;

	mov	eax, 1

; 1066 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanNukeAt
_TEXT	ENDS
EXTRN	?canRangeStrike@CvUnit@@QBE_NXZ:PROC		; CvUnit::canRangeStrike
; Function compile flags: /Odtp
;	COMDAT ?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRangeStrike, COMDAT

; 1070 : {

	push	ebp
	mov	ebp, esp

; 1071 : 	return BasicLuaMethod(L, &CvUnit::canRangeStrike);

	push	OFFSET ?canRangeStrike@CvUnit@@QBE_NXZ	; CvUnit::canRangeStrike
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 1072 : }

	pop	ebp
	ret	0
?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRangeStrike
_TEXT	ENDS
EXTRN	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z:PROC	; CvUnit::canRangeStrikeAt
; Function compile flags: /Odtp
;	COMDAT ?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -11						; size = 1
_bNeedsWar$ = -10					; size = 1
_bNoncombatAllowed$ = -9				; size = 1
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRangeStrikeAt, COMDAT

; 1076 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1077 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1078 : 	const int x = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 1079 : 	const int y = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 1080 : 	const bool bNeedsWar = luaL_optbool(L, 4, true);

	push	1
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bNeedsWar$[ebp], al

; 1081 : 	const bool bNoncombatAllowed = luaL_optbool(L, 5, true);

	push	1
	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bNoncombatAllowed$[ebp], al

; 1082 : 
; 1083 : 	const bool bResult = pkUnit->canRangeStrikeAt(x, y, bNeedsWar, bNoncombatAllowed);

	movzx	edx, BYTE PTR _bNoncombatAllowed$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bNeedsWar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z	; CvUnit::canRangeStrikeAt
	mov	BYTE PTR _bResult$[ebp], al

; 1084 : 
; 1085 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1086 : 	return 1;

	mov	eax, 1

; 1087 : 
; 1088 : 	//return BasicLuaMethod(L, &CvUnit::canRangeStrikeAt);
; 1089 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRangeStrikeAt
_TEXT	ENDS
EXTRN	?canParadrop@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canParadrop
; Function compile flags: /Odtp
;	COMDAT ?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisibility$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanParadrop, COMDAT

; 1121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1122 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1123 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1124 : 	bool bTestVisibility = lua_toboolean(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisibility$[ebp], al

; 1125 : 	const bool bResult = pkUnit->canParadrop(pkPlot, bTestVisibility);

	movzx	ecx, BYTE PTR _bTestVisibility$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canParadrop@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canParadrop
	mov	BYTE PTR _bResult$[ebp], al

; 1126 : 
; 1127 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1128 : 	return 1;

	mov	eax, 1

; 1129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanParadrop
_TEXT	ENDS
EXTRN	?canParadropAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC ; CvUnit::canParadropAt
; Function compile flags: /Odtp
;	COMDAT ?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bResult$ = -13						; size = 1
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanParadropAt, COMDAT

; 1133 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1134 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1135 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1136 : 	const int x = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 1137 : 	const int y = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 1138 : 	const bool bResult = pkUnit->canParadropAt(pkPlot, x, y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canParadropAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canParadropAt
	mov	BYTE PTR _bResult$[ebp], al

; 1139 : 
; 1140 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1141 : 	return 1;

	mov	eax, 1

; 1142 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanParadropAt
_TEXT	ENDS
EXTRN	?canMakeTradeRoute@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC ; CvUnit::canMakeTradeRoute
; Function compile flags: /Odtp
;	COMDAT ?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMakeTradeRoute, COMDAT

; 1146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1147 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1148 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1149 : 	const bool bResult = pkUnit->canMakeTradeRoute(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMakeTradeRoute@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canMakeTradeRoute
	mov	BYTE PTR _bResult$[ebp], al

; 1150 : 
; 1151 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1152 : 	return 1;

	mov	eax, 1

; 1153 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMakeTradeRoute
_TEXT	ENDS
EXTRN	?canMakeTradeRouteAt@CvUnit@@QBE_NPBVCvPlot@@HHW4TradeConnectionType@@@Z:PROC ; CvUnit::canMakeTradeRouteAt
; Function compile flags: /Odtp
;	COMDAT ?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -24						; size = 4
_eConnection$ = -20					; size = 4
_bResult$ = -13						; size = 1
_x$ = -12						; size = 4
_y$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanMakeTradeRouteAt, COMDAT

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 1158 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1159 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1160 : 	const int x = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 1161 : 	const int y = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 1162 : 	TradeConnectionType eConnection = (TradeConnectionType)lua_tointeger(L, 5);

	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eConnection$[ebp], eax

; 1163 : 	const bool bResult = pkUnit->canMakeTradeRouteAt(pkPlot, x, y, eConnection);

	mov	edx, DWORD PTR _eConnection$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMakeTradeRouteAt@CvUnit@@QBE_NPBVCvPlot@@HHW4TradeConnectionType@@@Z ; CvUnit::canMakeTradeRouteAt
	mov	BYTE PTR _bResult$[ebp], al

; 1164 : 
; 1165 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1166 : 	return 1;

	mov	eax, 1

; 1167 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanMakeTradeRouteAt
_TEXT	ENDS
EXTRN	?getExoticGoodsGoldAmount@CvUnit@@QAEHXZ:PROC	; CvUnit::getExoticGoodsGoldAmount
; Function compile flags: /Odtp
;	COMDAT ?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iValue$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExoticGoodsGoldAmount, COMDAT

; 1171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1172 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1173 : 
; 1174 : 	const int iValue = pkUnit->getExoticGoodsGoldAmount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExoticGoodsGoldAmount@CvUnit@@QAEHXZ ; CvUnit::getExoticGoodsGoldAmount
	mov	DWORD PTR _iValue$[ebp], eax

; 1175 : 	lua_pushinteger(L, iValue);

	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1176 : 	return 1;

	mov	eax, 1

; 1177 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExoticGoodsGoldAmount
_TEXT	ENDS
EXTRN	?getExoticGoodsXPAmount@CvUnit@@QAEHXZ:PROC	; CvUnit::getExoticGoodsXPAmount
; Function compile flags: /Odtp
;	COMDAT ?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iValue$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExoticGoodsXPAmount, COMDAT

; 1181 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1182 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1183 : 
; 1184 : 	const int iValue = pkUnit->getExoticGoodsXPAmount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExoticGoodsXPAmount@CvUnit@@QAEHXZ	; CvUnit::getExoticGoodsXPAmount
	mov	DWORD PTR _iValue$[ebp], eax

; 1185 : 	lua_pushinteger(L, iValue);

	mov	ecx, DWORD PTR _iValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1186 : 	return 1;

	mov	eax, 1

; 1187 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExoticGoodsXPAmount
_TEXT	ENDS
EXTRN	?canPillage@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canPillage
; Function compile flags: /Odtp
;	COMDAT ?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanPillage, COMDAT

; 1191 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1192 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1193 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1194 : 	const bool bResult = pkUnit->canPillage(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canPillage@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canPillage
	mov	BYTE PTR _bResult$[ebp], al

; 1195 : 
; 1196 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1197 : 	return 1;

	mov	eax, 1

; 1198 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanPillage
_TEXT	ENDS
EXTRN	?IsSelected@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsSelected
; Function compile flags: /Odtp
;	COMDAT ?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsSelected, COMDAT

; 1202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1203 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1204 : 	const bool bResult = pkUnit->IsSelected();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsSelected@CvUnit@@QBE_NXZ		; CvUnit::IsSelected
	mov	BYTE PTR _bResult$[ebp], al

; 1205 : 
; 1206 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1207 : 	return 1;

	mov	eax, 1

; 1208 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsSelected
_TEXT	ENDS
EXTRN	?canFound@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canFound
; Function compile flags: /Odtp
;	COMDAT ?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanFound, COMDAT

; 1212 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1213 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1214 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1215 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 1216 : 	const bool bResult = pkUnit->canFound(pkPlot, bTestVisible);

	movzx	ecx, BYTE PTR _bTestVisible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canFound@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canFound
	mov	BYTE PTR _bResult$[ebp], al

; 1217 : 
; 1218 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1219 : 	return 1;

	mov	eax, 1

; 1220 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanFound
_TEXT	ENDS
EXTRN	?canJoin@CvUnit@@QBE_NPBVCvPlot@@W4SpecialistTypes@@@Z:PROC ; CvUnit::canJoin
; Function compile flags: /Odtp
;	COMDAT ?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_eSpecialist$ = -12					; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanJoin, COMDAT

; 1224 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1225 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1226 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1227 : 	const SpecialistTypes eSpecialist = (SpecialistTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eSpecialist$[ebp], eax

; 1228 : 	const bool bResult = pkUnit->canJoin(pkPlot, eSpecialist);

	mov	eax, DWORD PTR _eSpecialist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canJoin@CvUnit@@QBE_NPBVCvPlot@@W4SpecialistTypes@@@Z ; CvUnit::canJoin
	mov	BYTE PTR _bResult$[ebp], al

; 1229 : 
; 1230 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1231 : 	return 1;

	mov	eax, 1

; 1232 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanJoin
_TEXT	ENDS
EXTRN	?canConstruct@CvUnit@@QBE_NPBVCvPlot@@W4BuildingTypes@@@Z:PROC ; CvUnit::canConstruct
; Function compile flags: /Odtp
;	COMDAT ?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_eBuilding$ = -12					; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanConstruct, COMDAT

; 1236 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1237 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1238 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1239 : 	const BuildingTypes eBuilding = (BuildingTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eBuilding$[ebp], eax

; 1240 : 	const bool bResult = pkUnit->canConstruct(pkPlot, eBuilding);

	mov	eax, DWORD PTR _eBuilding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canConstruct@CvUnit@@QBE_NPBVCvPlot@@W4BuildingTypes@@@Z ; CvUnit::canConstruct
	mov	BYTE PTR _bResult$[ebp], al

; 1241 : 
; 1242 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1243 : 	return 1;

	mov	eax, 1

; 1244 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanConstruct
_TEXT	ENDS
PUBLIC	??_C@_0CI@JLJBNLNJ@Could?5not?5find?5unit?5info?5?$CI?$CFd?$CJ?5fo@ ; `string'
EXTRN	?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ:PROC ; CvUnitEntry::IsRangeAttackOnlyInDomain
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ:PROC	; CvUnit::getUnitType
;	COMDAT ??_C@_0CI@JLJBNLNJ@Could?5not?5find?5unit?5info?5?$CI?$CFd?$CJ?5fo@
CONST	SEGMENT
??_C@_0CI@JLJBNLNJ@Could?5not?5find?5unit?5info?5?$CI?$CFd?$CJ?5fo@ DB 'C'
	DB	'ould not find unit info (%d) for unit.', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkUnitInfo$ = -4					; size = 4
_L$ = 8							; size = 4
?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangeAttackOnlyInDomain, COMDAT

; 1247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1248 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1249 : 	CvUnitEntry* pkUnitInfo = GC.getUnitInfo(pkUnit->getUnitType());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkUnitInfo$[ebp], eax

; 1250 : 
; 1251 : 	if(pkUnitInfo == NULL)

	cmp	DWORD PTR _pkUnitInfo$[ebp], 0
	jne	SHORT $LN1@lIsRangeAt

; 1252 : 	{
; 1253 : 		luaL_error(L, "Could not find unit info (%d) for unit.", pkUnit->getUnitType());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	push	OFFSET ??_C@_0CI@JLJBNLNJ@Could?5not?5find?5unit?5info?5?$CI?$CFd?$CJ?5fo@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_error
	add	esp, 12					; 0000000cH

; 1254 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@lIsRangeAt
$LN1@lIsRangeAt:

; 1255 : 	}
; 1256 : 
; 1257 : 	const bool bResult = pkUnitInfo->IsRangeAttackOnlyInDomain();

	mov	ecx, DWORD PTR _pkUnitInfo$[ebp]
	call	?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ ; CvUnitEntry::IsRangeAttackOnlyInDomain
	mov	BYTE PTR _bResult$[ebp], al

; 1258 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1259 : 	return 1;

	mov	eax, 1
$LN2@lIsRangeAt:

; 1260 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangeAttackOnlyInDomain
_TEXT	ENDS
EXTRN	?IsCityAttackOnly@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCityAttackOnly
; Function compile flags: /Odtp
;	COMDAT ?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCityAttackOnly, COMDAT

; 1263 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1264 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1265 : 	const bool bResult = pkUnit->IsCityAttackOnly();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCityAttackOnly@CvUnit@@QBE_NXZ	; CvUnit::IsCityAttackOnly
	mov	BYTE PTR _bResult$[ebp], al

; 1266 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1267 : 	return 1;

	mov	eax, 1

; 1268 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCityAttackOnly
_TEXT	ENDS
EXTRN	?canDiscover@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canDiscover
; Function compile flags: /Odtp
;	COMDAT ?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDiscover, COMDAT

; 1293 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1294 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1295 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1296 : 	const bool bResult = pkUnit->canDiscover(pkPlot);

	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canDiscover@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canDiscover
	mov	BYTE PTR _bResult$[ebp], al

; 1297 : 
; 1298 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1299 : 	return 1;

	mov	eax, 1

; 1300 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDiscover
_TEXT	ENDS
EXTRN	?getDiscoverAmount@CvUnit@@QAEHXZ:PROC		; CvUnit::getDiscoverAmount
; Function compile flags: /Odtp
;	COMDAT ?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDiscoverAmount, COMDAT

; 1304 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1305 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1306 : 
; 1307 : 	const int iResult = pkUnit->getDiscoverAmount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getDiscoverAmount@CvUnit@@QAEHXZ	; CvUnit::getDiscoverAmount
	mov	DWORD PTR _iResult$[ebp], eax

; 1308 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1309 : 	return 1;

	mov	eax, 1

; 1310 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDiscoverAmount
_TEXT	ENDS
EXTRN	?getHurryProduction@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::getHurryProduction
; Function compile flags: /Odtp
;	COMDAT ?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetHurryProduction, COMDAT

; 1314 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1315 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1316 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1317 : 
; 1318 : 	const int iResult = pkUnit->getHurryProduction(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getHurryProduction@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::getHurryProduction
	mov	DWORD PTR _iResult$[ebp], eax

; 1319 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1320 : 	return 1;

	mov	eax, 1

; 1321 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetHurryProduction
_TEXT	ENDS
EXTRN	?getTradeGold@CvUnit@@QBEHPBVCvPlot@@@Z:PROC	; CvUnit::getTradeGold
; Function compile flags: /Odtp
;	COMDAT ?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTradeGold, COMDAT

; 1325 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1326 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1327 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1328 : 
; 1329 : 	const int iResult = pkUnit->getTradeGold(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getTradeGold@CvUnit@@QBEHPBVCvPlot@@@Z	; CvUnit::getTradeGold
	mov	DWORD PTR _iResult$[ebp], eax

; 1330 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1331 : 	return 1;

	mov	eax, 1

; 1332 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTradeGold
_TEXT	ENDS
EXTRN	?getTradeInfluence@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::getTradeInfluence
; Function compile flags: /Odtp
;	COMDAT ?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTradeInfluence, COMDAT

; 1336 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1337 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1338 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1339 : 
; 1340 : 	const int iResult = pkUnit->getTradeInfluence(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getTradeInfluence@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::getTradeInfluence
	mov	DWORD PTR _iResult$[ebp], eax

; 1341 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1342 : 	return 1;

	mov	eax, 1

; 1343 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTradeInfluence
_TEXT	ENDS
EXTRN	?canBuyCityState@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::canBuyCityState
; Function compile flags: /Odtp
;	COMDAT ?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuyCityState, COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1348 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1349 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1350 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 1351 : 	const bool bResult = pkUnit->canBuyCityState(pkPlot, bTestVisible);

	movzx	ecx, BYTE PTR _bTestVisible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canBuyCityState@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canBuyCityState
	mov	BYTE PTR _bResult$[ebp], al

; 1352 : 
; 1353 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1354 : 	return 1;

	mov	eax, 1

; 1355 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuyCityState
_TEXT	ENDS
EXTRN	?canTrade@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canTrade
; Function compile flags: /Odtp
;	COMDAT ?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanTrade, COMDAT

; 1359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1360 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1361 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1362 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 1363 : 	const bool bResult = pkUnit->canTrade(pkPlot, bTestVisible);

	movzx	ecx, BYTE PTR _bTestVisible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canTrade@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canTrade
	mov	BYTE PTR _bResult$[ebp], al

; 1364 : 
; 1365 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1366 : 	return 1;

	mov	eax, 1

; 1367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanTrade
_TEXT	ENDS
EXTRN	?canRepairFleet@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::canRepairFleet
; Function compile flags: /Odtp
;	COMDAT ?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRepairFleet, COMDAT

; 1371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1372 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1373 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1374 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 1375 : 	const bool bResult = pkUnit->canRepairFleet(pkPlot, bTestVisible);

	movzx	ecx, BYTE PTR _bTestVisible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canRepairFleet@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canRepairFleet
	mov	BYTE PTR _bResult$[ebp], al

; 1376 : 
; 1377 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1378 : 	return 1;

	mov	eax, 1

; 1379 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRepairFleet
_TEXT	ENDS
EXTRN	?CanBuildSpaceship@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::CanBuildSpaceship
; Function compile flags: /Odtp
;	COMDAT ?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -6						; size = 1
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuildSpaceship, COMDAT

; 1383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1384 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1385 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1386 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 1387 : 	const bool bResult = pkUnit->CanBuildSpaceship(pkPlot, bTestVisible);

	movzx	ecx, BYTE PTR _bTestVisible$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?CanBuildSpaceship@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::CanBuildSpaceship
	mov	BYTE PTR _bResult$[ebp], al

; 1388 : 
; 1389 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1390 : 	return 1;

	mov	eax, 1

; 1391 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuildSpaceship
_TEXT	ENDS
EXTRN	?canGoldenAge@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canGoldenAge
; Function compile flags: /Odtp
;	COMDAT ?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanGoldenAge, COMDAT

; 1395 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1396 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1397 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1398 : 	const bool bResult = pkUnit->canGoldenAge(pkPlot);

	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canGoldenAge@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canGoldenAge
	mov	BYTE PTR _bResult$[ebp], al

; 1399 : 
; 1400 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1401 : 	return 1;

	mov	eax, 1

; 1402 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanGoldenAge
_TEXT	ENDS
EXTRN	?GetGoldenAgeTurns@CvUnit@@QBEHXZ:PROC		; CvUnit::GetGoldenAgeTurns
; Function compile flags: /Odtp
;	COMDAT ?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetGoldenAgeTurns, COMDAT

; 1406 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1407 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1408 : 	const int iResult = pkUnit->GetGoldenAgeTurns();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetGoldenAgeTurns@CvUnit@@QBEHXZ	; CvUnit::GetGoldenAgeTurns
	mov	DWORD PTR _iResult$[ebp], eax

; 1409 : 
; 1410 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1411 : 	return 1;

	mov	eax, 1

; 1412 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetGoldenAgeTurns
_TEXT	ENDS
EXTRN	?getGivePoliciesCulture@CvUnit@@QAEHXZ:PROC	; CvUnit::getGivePoliciesCulture
; Function compile flags: /Odtp
;	COMDAT ?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGivePoliciesCulture, COMDAT

; 1416 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1417 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1418 : 
; 1419 : 	const int iResult = pkUnit->getGivePoliciesCulture();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getGivePoliciesCulture@CvUnit@@QAEHXZ	; CvUnit::getGivePoliciesCulture
	mov	DWORD PTR _iResult$[ebp], eax

; 1420 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1421 : 	return 1;

	mov	eax, 1

; 1422 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGivePoliciesCulture
_TEXT	ENDS
EXTRN	?getBlastTourism@CvUnit@@QAEHXZ:PROC		; CvUnit::getBlastTourism
; Function compile flags: /Odtp
;	COMDAT ?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBlastTourism, COMDAT

; 1426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1427 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1428 : 
; 1429 : 	const int iResult = pkUnit->getBlastTourism();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getBlastTourism@CvUnit@@QAEHXZ		; CvUnit::getBlastTourism
	mov	DWORD PTR _iResult$[ebp], eax

; 1430 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1431 : 	return 1;

	mov	eax, 1

; 1432 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBlastTourism
_TEXT	ENDS
EXTRN	?canBuild@CvUnit@@QBE_NPBVCvPlot@@W4BuildTypes@@_N2@Z:PROC ; CvUnit::canBuild
; Function compile flags: /Odtp
;	COMDAT ?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bTestGold$ = -14					; size = 1
_bResult$ = -13						; size = 1
_eBuild$ = -12						; size = 4
_bTestVisible$ = -5					; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanBuild, COMDAT

; 1436 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1437 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1438 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1439 : 	const BuildTypes eBuild = (BuildTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eBuild$[ebp], eax

; 1440 : 	const bool bTestVisible = luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bTestVisible$[ebp], cl

; 1441 : 	const bool bTestGold = luaL_optint(L, 5, 1);

	push	1
	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestGold$[ebp], al

; 1442 : 	const bool bResult = pkUnit->canBuild(pkPlot, eBuild, bTestVisible, bTestGold);

	movzx	ecx, BYTE PTR _bTestGold$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bTestVisible$[ebp]
	push	edx
	mov	eax, DWORD PTR _eBuild$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canBuild@CvUnit@@QBE_NPBVCvPlot@@W4BuildTypes@@_N2@Z ; CvUnit::canBuild
	mov	BYTE PTR _bResult$[ebp], al

; 1443 : 
; 1444 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1445 : 	return 1;

	mov	eax, 1

; 1446 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanBuild
_TEXT	ENDS
EXTRN	?canLead@CvUnit@@QBEHPBVCvPlot@@H@Z:PROC	; CvUnit::canLead
; Function compile flags: /Odtp
;	COMDAT ?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_iUnitId$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanLead, COMDAT

; 1450 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1451 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1452 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1453 : 	const int iUnitId = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iUnitId$[ebp], eax

; 1454 : 
; 1455 : 	const bool bResult = pkUnit->canLead(pkPlot, iUnitId);

	mov	eax, DWORD PTR _iUnitId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canLead@CvUnit@@QBEHPBVCvPlot@@H@Z	; CvUnit::canLead
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bResult$[ebp], dl

; 1456 : 
; 1457 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1458 : 	return 1;

	mov	eax, 1

; 1459 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanLead
_TEXT	ENDS
EXTRN	?lead@CvUnit@@QAE_NH@Z:PROC			; CvUnit::lead
; Function compile flags: /Odtp
;	COMDAT ?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_iUnitId$ = -4						; size = 4
_L$ = 8							; size = 4
?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lLead, COMDAT

; 1463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1464 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1465 : 	const int iUnitId = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iUnitId$[ebp], eax

; 1466 : 	const bool bResult = pkUnit->lead(iUnitId);

	mov	edx, DWORD PTR _iUnitId$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?lead@CvUnit@@QAE_NH@Z			; CvUnit::lead
	mov	BYTE PTR _bResult$[ebp], al

; 1467 : 
; 1468 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1469 : 	return 1;

	mov	eax, 1

; 1470 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lLead
_TEXT	ENDS
EXTRN	?canGiveExperience@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::canGiveExperience
; Function compile flags: /Odtp
;	COMDAT ?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanGiveExperience, COMDAT

; 1474 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1475 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1476 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 1477 : 
; 1478 : 	const int iResult = pkUnit->canGiveExperience(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canGiveExperience@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::canGiveExperience
	mov	DWORD PTR _iResult$[ebp], eax

; 1479 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1480 : 	return 1;

	mov	eax, 1

; 1481 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanGiveExperience
_TEXT	ENDS
EXTRN	?giveExperience@CvUnit@@QAE_NXZ:PROC		; CvUnit::giveExperience
; Function compile flags: /Odtp
;	COMDAT ?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGiveExperience, COMDAT

; 1485 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1486 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1487 : 	const bool bResult = pkUnit->giveExperience();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?giveExperience@CvUnit@@QAE_NXZ		; CvUnit::giveExperience
	mov	BYTE PTR _bResult$[ebp], al

; 1488 : 
; 1489 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1490 : 	return 1;

	mov	eax, 1

; 1491 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGiveExperience
_TEXT	ENDS
EXTRN	?canPromote@CvUnit@@QBE_NW4PromotionTypes@@H@Z:PROC ; CvUnit::canPromote
; Function compile flags: /Odtp
;	COMDAT ?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_ePromotion$ = -12					; size = 4
_bResult$ = -5						; size = 1
_iLeaderUnitId$ = -4					; size = 4
_L$ = 8							; size = 4
?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanPromote, COMDAT

; 1495 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1496 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1497 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePromotion$[ebp], eax

; 1498 : 	const int iLeaderUnitId = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iLeaderUnitId$[ebp], eax

; 1499 : 	const bool bResult = pkUnit->canPromote(ePromotion, iLeaderUnitId);

	mov	eax, DWORD PTR _iLeaderUnitId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePromotion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canPromote@CvUnit@@QBE_NW4PromotionTypes@@H@Z ; CvUnit::canPromote
	mov	BYTE PTR _bResult$[ebp], al

; 1500 : 
; 1501 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 1502 : 	return 1;

	mov	eax, 1

; 1503 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanPromote
_TEXT	ENDS
EXTRN	?promote@CvUnit@@QAEXW4PromotionTypes@@H@Z:PROC	; CvUnit::promote
; Function compile flags: /Odtp
;	COMDAT ?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_ePromotion$ = -8					; size = 4
_iLeaderUnitId$ = -4					; size = 4
_L$ = 8							; size = 4
?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lPromote, COMDAT

; 1507 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1508 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1509 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePromotion$[ebp], eax

; 1510 : 	const int iLeaderUnitId = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iLeaderUnitId$[ebp], eax

; 1511 : 
; 1512 : 	pkUnit->promote(ePromotion, iLeaderUnitId);

	mov	eax, DWORD PTR _iLeaderUnitId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ePromotion$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?promote@CvUnit@@QAEXW4PromotionTypes@@H@Z ; CvUnit::promote

; 1513 : 	return 0;

	xor	eax, eax

; 1514 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lPromote
_TEXT	ENDS
EXTRN	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ:PROC ; CvUnit::GetUpgradeUnitType
; Function compile flags: /Odtp
;	COMDAT ?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUpgradeUnitType, COMDAT

; 1518 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1519 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1520 : 
; 1521 : 	const int iResult = pkUnit->GetUpgradeUnitType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ ; CvUnit::GetUpgradeUnitType
	mov	DWORD PTR _iResult$[ebp], eax

; 1522 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1523 : 	return 1;

	mov	eax, 1

; 1524 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUpgradeUnitType
_TEXT	ENDS
EXTRN	?upgradePrice@CvUnit@@QBEHW4UnitTypes@@@Z:PROC	; CvUnit::upgradePrice
; Function compile flags: /Odtp
;	COMDAT ?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lUpgradePrice, COMDAT

; 1528 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1529 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1530 : 	const UnitTypes eUnit = (UnitTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnit$[ebp], eax

; 1531 : 
; 1532 : 	const int iResult = pkUnit->upgradePrice(eUnit);

	mov	edx, DWORD PTR _eUnit$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?upgradePrice@CvUnit@@QBEHW4UnitTypes@@@Z ; CvUnit::upgradePrice
	mov	DWORD PTR _iResult$[ebp], eax

; 1533 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1534 : 	return 1;

	mov	eax, 1

; 1535 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lUpgradePrice
_TEXT	ENDS
EXTRN	?CanUpgradeRightNow@CvUnit@@QBE_N_N@Z:PROC	; CvUnit::CanUpgradeRightNow
; Function compile flags: /Odtp
;	COMDAT ?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -2						; size = 1
_bTestVisible$ = -1					; size = 1
_L$ = 8							; size = 4
?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanUpgradeRightNow, COMDAT

; 1538 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1539 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1540 : 	const bool bTestVisible = luaL_optint(L, 2, 0);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bTestVisible$[ebp], dl

; 1541 : 	const bool bResult = pkUnit->CanUpgradeRightNow(bTestVisible);

	movzx	eax, BYTE PTR _bTestVisible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?CanUpgradeRightNow@CvUnit@@QBE_N_N@Z	; CvUnit::CanUpgradeRightNow
	mov	BYTE PTR _bResult$[ebp], al

; 1542 : 
; 1543 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1544 : 	return 1;

	mov	eax, 1

; 1545 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanUpgradeRightNow
_TEXT	ENDS
PUBLIC	??_C@_0CF@JAMMECPF@Cannot?5find?5unit?5info?5?$CI?$CFd?$CJ?5for?5u@ ; `string'
EXTRN	?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z:PROC ; CvUnitEntry::GetResourceQuantityRequirement
;	COMDAT ??_C@_0CF@JAMMECPF@Cannot?5find?5unit?5info?5?$CI?$CFd?$CJ?5for?5u@
CONST	SEGMENT
??_C@_0CF@JAMMECPF@Cannot?5find?5unit?5info?5?$CI?$CFd?$CJ?5for?5u@ DB 'C'
	DB	'annot find unit info (%d) for unit.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_eUpgradeUnitType$ = -16				; size = 4
_iResult$ = -12						; size = 4
_pkUnitInfo$ = -8					; size = 4
_eResource$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumResourceNeededToUpgrade, COMDAT

; 1548 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1549 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1550 : 	const ResourceTypes eResource = (ResourceTypes) lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eResource$[ebp], eax

; 1551 : 
; 1552 : 	const UnitTypes eUpgradeUnitType = pkUnit->GetUpgradeUnitType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ ; CvUnit::GetUpgradeUnitType
	mov	DWORD PTR _eUpgradeUnitType$[ebp], eax

; 1553 : 
; 1554 : 	CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eUpgradeUnitType);

	mov	edx, DWORD PTR _eUpgradeUnitType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkUnitInfo$[ebp], eax

; 1555 : 	if(pkUnitInfo == NULL)

	cmp	DWORD PTR _pkUnitInfo$[ebp], 0
	jne	SHORT $LN1@lGetNumRes

; 1556 : 	{
; 1557 : 		luaL_error(L, "Cannot find unit info (%d) for unit.", eUpgradeUnitType);

	mov	eax, DWORD PTR _eUpgradeUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@JAMMECPF@Cannot?5find?5unit?5info?5?$CI?$CFd?$CJ?5for?5u@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_error
	add	esp, 12					; 0000000cH

; 1558 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@lGetNumRes
$LN1@lGetNumRes:

; 1559 : 	}
; 1560 : 
; 1561 : 	const int iResult = pkUnitInfo->GetResourceQuantityRequirement(eResource);

	mov	edx, DWORD PTR _eResource$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnitInfo$[ebp]
	call	?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z ; CvUnitEntry::GetResourceQuantityRequirement
	mov	DWORD PTR _iResult$[ebp], eax

; 1562 : 
; 1563 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1564 : 	return 1;

	mov	eax, 1
$LN2@lGetNumRes:

; 1565 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumResourceNeededToUpgrade
_TEXT	ENDS
EXTRN	?getHandicapType@CvUnit@@QBE?AW4HandicapTypes@@XZ:PROC ; CvUnit::getHandicapType
; Function compile flags: /Odtp
;	COMDAT ?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetHandicapType, COMDAT

; 1569 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1570 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1571 : 
; 1572 : 	const HandicapTypes eResult = pkUnit->getHandicapType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getHandicapType@CvUnit@@QBE?AW4HandicapTypes@@XZ ; CvUnit::getHandicapType
	mov	DWORD PTR _eResult$[ebp], eax

; 1573 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1574 : 	return 1;

	mov	eax, 1

; 1575 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetHandicapType
_TEXT	ENDS
EXTRN	?getCivilizationType@CvUnit@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvUnit::getCivilizationType
; Function compile flags: /Odtp
;	COMDAT ?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCivilizationType, COMDAT

; 1579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1580 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1581 : 
; 1582 : 	const CivilizationTypes eResult = pkUnit->getCivilizationType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCivilizationType@CvUnit@@QBE?AW4CivilizationTypes@@XZ ; CvUnit::getCivilizationType
	mov	DWORD PTR _eResult$[ebp], eax

; 1583 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1584 : 	return 1;

	mov	eax, 1

; 1585 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCivilizationType
_TEXT	ENDS
EXTRN	?getSpecialUnitType@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ:PROC ; CvUnit::getSpecialUnitType
; Function compile flags: /Odtp
;	COMDAT ?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetSpecialUnitType, COMDAT

; 1589 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1590 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1591 : 
; 1592 : 	const SpecialUnitTypes eResult = pkUnit->getSpecialUnitType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getSpecialUnitType@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ ; CvUnit::getSpecialUnitType
	mov	DWORD PTR _eResult$[ebp], eax

; 1593 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1594 : 	return 1;

	mov	eax, 1

; 1595 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetSpecialUnitType
_TEXT	ENDS
EXTRN	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z:PROC ; CvUnit::getCaptureUnitType
; Function compile flags: /Odtp
;	COMDAT ?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eCivilization$ = -8					; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCaptureUnitType, COMDAT

; 1599 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1600 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1601 : 	const CivilizationTypes eCivilization = (CivilizationTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eCivilization$[ebp], eax

; 1602 : 
; 1603 : 	const UnitTypes eResult = pkUnit->getCaptureUnitType(eCivilization);

	mov	edx, DWORD PTR _eCivilization$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z ; CvUnit::getCaptureUnitType
	mov	DWORD PTR _eResult$[ebp], eax

; 1604 : 	lua_pushinteger(L, eResult);

	mov	eax, DWORD PTR _eResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1605 : 	return 1;

	mov	eax, 1

; 1606 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCaptureUnitType
_TEXT	ENDS
EXTRN	?getUnitCombatType@CvUnit@@QBE?AW4UnitCombatTypes@@XZ:PROC ; CvUnit::getUnitCombatType
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitCombatType, COMDAT

; 1610 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1611 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1612 : 
; 1613 : 	const UnitCombatTypes eResult = pkUnit->getUnitCombatType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitCombatType@CvUnit@@QBE?AW4UnitCombatTypes@@XZ ; CvUnit::getUnitCombatType
	mov	DWORD PTR _eResult$[ebp], eax

; 1614 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1615 : 	return 1;

	mov	eax, 1

; 1616 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitCombatType
_TEXT	ENDS
EXTRN	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ:PROC ; CvUnit::AI_getUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitAIType, COMDAT

; 1620 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1621 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1622 : 
; 1623 : 	const UnitAITypes eResult = pkUnit->AI_getUnitAIType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ ; CvUnit::AI_getUnitAIType
	mov	DWORD PTR _eResult$[ebp], eax

; 1624 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1625 : 	return 1;

	mov	eax, 1

; 1626 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitAIType
_TEXT	ENDS
EXTRN	?AI_setUnitAIType@CvUnit@@QAEXW4UnitAITypes@@@Z:PROC ; CvUnit::AI_setUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eUnitAI$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetUnitAIType, COMDAT

; 1630 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1631 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1632 : 	const UnitAITypes eUnitAI = (UnitAITypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnitAI$[ebp], eax

; 1633 : 	pkUnit->AI_setUnitAIType(eUnitAI);

	mov	edx, DWORD PTR _eUnitAI$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?AI_setUnitAIType@CvUnit@@QAEXW4UnitAITypes@@@Z ; CvUnit::AI_setUnitAIType

; 1634 : 	return 1;

	mov	eax, 1

; 1635 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetUnitAIType
_TEXT	ENDS
EXTRN	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::getDomainType
; Function compile flags: /Odtp
;	COMDAT ?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDomainType, COMDAT

; 1639 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1640 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1641 : 
; 1642 : 	const DomainTypes eResult = pkUnit->getDomainType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	mov	DWORD PTR _eResult$[ebp], eax

; 1643 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1644 : 	return 1;

	mov	eax, 1

; 1645 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDomainType
_TEXT	ENDS
EXTRN	?getInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ:PROC ; CvUnit::getInvisibleType
; Function compile flags: /Odtp
;	COMDAT ?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetInvisibleType, COMDAT

; 1649 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1650 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1651 : 
; 1652 : 	const InvisibleTypes eResult = pkUnit->getInvisibleType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ ; CvUnit::getInvisibleType
	mov	DWORD PTR _eResult$[ebp], eax

; 1653 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1654 : 	return 1;

	mov	eax, 1

; 1655 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetInvisibleType
_TEXT	ENDS
EXTRN	?getSeeInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ:PROC ; CvUnit::getSeeInvisibleType
; Function compile flags: /Odtp
;	COMDAT ?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetSeeInvisibleType, COMDAT

; 1659 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1660 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1661 : 
; 1662 : 	const InvisibleTypes eResult = pkUnit->getSeeInvisibleType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getSeeInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ ; CvUnit::getSeeInvisibleType
	mov	DWORD PTR _eResult$[ebp], eax

; 1663 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1664 : 	return 1;

	mov	eax, 1

; 1665 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetSeeInvisibleType
_TEXT	ENDS
EXTRN	?getDropRange@CvUnit@@QBEHXZ:PROC		; CvUnit::getDropRange
; Function compile flags: /Odtp
;	COMDAT ?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDropRange, COMDAT

; 1669 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1670 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1671 : 
; 1672 : 	const int eResult = pkUnit->getDropRange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getDropRange@CvUnit@@QBEHXZ		; CvUnit::getDropRange
	mov	DWORD PTR _eResult$[ebp], eax

; 1673 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1674 : 	return 1;

	mov	eax, 1

; 1675 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDropRange
_TEXT	ENDS
EXTRN	?flavorValue@CvUnit@@QBEHW4FlavorTypes@@@Z:PROC	; CvUnit::flavorValue
; Function compile flags: /Odtp
;	COMDAT ?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eFlavor$ = -4						; size = 4
_L$ = 8							; size = 4
?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFlavorValue, COMDAT

; 1679 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1680 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1681 : 	const FlavorTypes eFlavor = (FlavorTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eFlavor$[ebp], eax

; 1682 : 
; 1683 : 	const int iResult = pkUnit->flavorValue(eFlavor);

	mov	edx, DWORD PTR _eFlavor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?flavorValue@CvUnit@@QBEHW4FlavorTypes@@@Z ; CvUnit::flavorValue
	mov	DWORD PTR _iResult$[ebp], eax

; 1684 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 1685 : 	return 1;

	mov	eax, 1

; 1686 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFlavorValue
_TEXT	ENDS
EXTRN	?isBarbarian@CvUnit@@QBE_NXZ:PROC		; CvUnit::isBarbarian
; Function compile flags: /Odtp
;	COMDAT ?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsBarbarian, COMDAT

; 1690 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1691 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1692 : 	const bool bResult = pkUnit->isBarbarian();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	mov	BYTE PTR _bResult$[ebp], al

; 1693 : 
; 1694 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1695 : 	return 1;

	mov	eax, 1

; 1696 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsBarbarian
_TEXT	ENDS
EXTRN	?isHuman@CvUnit@@QBE_NXZ:PROC			; CvUnit::isHuman
; Function compile flags: /Odtp
;	COMDAT ?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsHuman, COMDAT

; 1701 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1702 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1703 : 	const bool bResult = pkUnit->isHuman();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman
	mov	BYTE PTR _bResult$[ebp], al

; 1704 : 
; 1705 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1706 : 	return 1;

	mov	eax, 1

; 1707 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsHuman
_TEXT	ENDS
EXTRN	?visibilityRange@CvUnit@@QBEHXZ:PROC		; CvUnit::visibilityRange
; Function compile flags: /Odtp
;	COMDAT ?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lVisibilityRange, COMDAT

; 1711 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1712 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1713 : 
; 1714 : 	const int iResult = pkUnit->visibilityRange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?visibilityRange@CvUnit@@QBEHXZ		; CvUnit::visibilityRange
	mov	DWORD PTR _iResult$[ebp], eax

; 1715 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1716 : 	return 1;

	mov	eax, 1

; 1717 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lVisibilityRange
_TEXT	ENDS
EXTRN	?maxMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::maxMoves
; Function compile flags: /Odtp
;	COMDAT ?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lMaxMoves, COMDAT

; 1721 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1722 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1723 : 
; 1724 : 	const int iResult = pkUnit->maxMoves();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?maxMoves@CvUnit@@QBEHXZ		; CvUnit::maxMoves
	mov	DWORD PTR _iResult$[ebp], eax

; 1725 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1726 : 	return 1;

	mov	eax, 1

; 1727 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lMaxMoves
_TEXT	ENDS
EXTRN	?movesLeft@CvUnit@@QBEHXZ:PROC			; CvUnit::movesLeft
; Function compile flags: /Odtp
;	COMDAT ?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lMovesLeft, COMDAT

; 1731 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1732 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1733 : 
; 1734 : 	const int iResult = pkUnit->movesLeft();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?movesLeft@CvUnit@@QBEHXZ		; CvUnit::movesLeft
	mov	DWORD PTR _iResult$[ebp], eax

; 1735 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1736 : 	return 1;

	mov	eax, 1

; 1737 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lMovesLeft
_TEXT	ENDS
EXTRN	?canMove@CvUnit@@QBE_NXZ:PROC			; CvUnit::canMove
; Function compile flags: /Odtp
;	COMDAT ?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanMove, COMDAT

; 1741 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1742 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1743 : 	const bool bResult = pkUnit->canMove();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMove@CvUnit@@QBE_NXZ		; CvUnit::canMove
	mov	BYTE PTR _bResult$[ebp], al

; 1744 : 
; 1745 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1746 : 	return 1;

	mov	eax, 1

; 1747 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanMove
_TEXT	ENDS
EXTRN	?hasMoved@CvUnit@@QBE_NXZ:PROC			; CvUnit::hasMoved
; Function compile flags: /Odtp
;	COMDAT ?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasMoved, COMDAT

; 1751 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1752 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1753 : 	const bool bResult = pkUnit->hasMoved();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?hasMoved@CvUnit@@QBE_NXZ		; CvUnit::hasMoved
	mov	BYTE PTR _bResult$[ebp], al

; 1754 : 
; 1755 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1756 : 	return 1;

	mov	eax, 1

; 1757 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasMoved
_TEXT	ENDS
EXTRN	?GetRange@CvUnit@@QBEHXZ:PROC			; CvUnit::GetRange
; Function compile flags: /Odtp
;	COMDAT ?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lRange, COMDAT

; 1761 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1762 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1763 : 
; 1764 : 	const int iResult = pkUnit->GetRange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetRange@CvUnit@@QBEHXZ		; CvUnit::GetRange
	mov	DWORD PTR _iResult$[ebp], eax

; 1765 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1766 : 	return 1;

	mov	eax, 1

; 1767 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lRange
_TEXT	ENDS
EXTRN	?GetNukeDamageLevel@CvUnit@@QBEHXZ:PROC		; CvUnit::GetNukeDamageLevel
; Function compile flags: /Odtp
;	COMDAT ?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lNukeDamageLevel, COMDAT

; 1771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1772 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1773 : 
; 1774 : 	const int iResult = pkUnit->GetNukeDamageLevel();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetNukeDamageLevel@CvUnit@@QBEHXZ	; CvUnit::GetNukeDamageLevel
	mov	DWORD PTR _iResult$[ebp], eax

; 1775 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1776 : 	return 1;

	mov	eax, 1

; 1777 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lNukeDamageLevel
_TEXT	ENDS
EXTRN	?canBuildRoute@CvUnit@@QBE_NXZ:PROC		; CvUnit::canBuildRoute
; Function compile flags: /Odtp
;	COMDAT ?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuildRoute, COMDAT

; 1781 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1782 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1783 : 	const bool bResult = pkUnit->canBuildRoute();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canBuildRoute@CvUnit@@QBE_NXZ		; CvUnit::canBuildRoute
	mov	BYTE PTR _bResult$[ebp], al

; 1784 : 
; 1785 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1786 : 	return 1;

	mov	eax, 1

; 1787 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuildRoute
_TEXT	ENDS
EXTRN	?getBuildType@CvUnit@@QBE?AW4BuildTypes@@XZ:PROC ; CvUnit::getBuildType
; Function compile flags: /Odtp
;	COMDAT ?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBuildType, COMDAT

; 1791 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1792 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1793 : 
; 1794 : 	const BuildTypes eResult = pkUnit->getBuildType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getBuildType@CvUnit@@QBE?AW4BuildTypes@@XZ ; CvUnit::getBuildType
	mov	DWORD PTR _eResult$[ebp], eax

; 1795 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1796 : 	return 1;

	mov	eax, 1

; 1797 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBuildType
_TEXT	ENDS
EXTRN	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z:PROC	; CvUnit::workRate
; Function compile flags: /Odtp
;	COMDAT ?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_bMax$ = -1						; size = 1
_L$ = 8							; size = 4
?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lWorkRate, COMDAT

; 1801 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1802 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1803 : 	const bool bMax = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bMax$[ebp], dl

; 1804 : 
; 1805 : 	const int iResult = pkUnit->workRate(bMax);

	push	-1
	movzx	eax, BYTE PTR _bMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z ; CvUnit::workRate
	mov	DWORD PTR _iResult$[ebp], eax

; 1806 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1807 : 	return 1;

	mov	eax, 1

; 1808 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lWorkRate
_TEXT	ENDS
EXTRN	?isNoBadGoodies@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoBadGoodies
; Function compile flags: /Odtp
;	COMDAT ?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNoBadGoodies, COMDAT

; 1812 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1813 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1814 : 	const bool bResult = pkUnit->isNoBadGoodies();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isNoBadGoodies@CvUnit@@QBE_NXZ		; CvUnit::isNoBadGoodies
	mov	BYTE PTR _bResult$[ebp], al

; 1815 : 
; 1816 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1817 : 	return 1;

	mov	eax, 1

; 1818 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNoBadGoodies
_TEXT	ENDS
EXTRN	?isOnlyDefensive@CvUnit@@QBE_NXZ:PROC		; CvUnit::isOnlyDefensive
; Function compile flags: /Odtp
;	COMDAT ?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsOnlyDefensive, COMDAT

; 1822 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1823 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1824 : 	const bool bResult = pkUnit->isOnlyDefensive();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isOnlyDefensive@CvUnit@@QBE_NXZ	; CvUnit::isOnlyDefensive
	mov	BYTE PTR _bResult$[ebp], al

; 1825 : 
; 1826 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1827 : 	return 1;

	mov	eax, 1

; 1828 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsOnlyDefensive
_TEXT	ENDS
EXTRN	?isNoCapture@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoCapture
; Function compile flags: /Odtp
;	COMDAT ?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNoCapture, COMDAT

; 1832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1833 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1834 : 	const bool bResult = pkUnit->isNoCapture();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isNoCapture@CvUnit@@QBE_NXZ		; CvUnit::isNoCapture
	mov	BYTE PTR _bResult$[ebp], al

; 1835 : 
; 1836 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1837 : 	return 1;

	mov	eax, 1

; 1838 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNoCapture
_TEXT	ENDS
EXTRN	?isRivalTerritory@CvUnit@@QBE_NXZ:PROC		; CvUnit::isRivalTerritory
; Function compile flags: /Odtp
;	COMDAT ?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsRivalTerritory, COMDAT

; 1842 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1843 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1844 : 	const bool bResult = pkUnit->isRivalTerritory();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isRivalTerritory@CvUnit@@QBE_NXZ	; CvUnit::isRivalTerritory
	mov	BYTE PTR _bResult$[ebp], al

; 1845 : 
; 1846 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1847 : 	return 1;

	mov	eax, 1

; 1848 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsRivalTerritory
_TEXT	ENDS
EXTRN	?isFound@CvUnit@@QBE_NXZ:PROC			; CvUnit::isFound
; Function compile flags: /Odtp
;	COMDAT ?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsFound, COMDAT

; 1852 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1853 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1854 : 	const bool bResult = pkUnit->isFound();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isFound@CvUnit@@QBE_NXZ		; CvUnit::isFound
	mov	BYTE PTR _bResult$[ebp], al

; 1855 : 
; 1856 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1857 : 	return 1;

	mov	eax, 1

; 1858 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsFound
_TEXT	ENDS
EXTRN	?IsWork@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsWork
; Function compile flags: /Odtp
;	COMDAT ?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsWork, COMDAT

; 1862 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1863 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1864 : 	const bool bResult = pkUnit->IsWork();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsWork@CvUnit@@QBE_NXZ			; CvUnit::IsWork
	mov	BYTE PTR _bResult$[ebp], al

; 1865 : 
; 1866 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1867 : 	return 1;

	mov	eax, 1

; 1868 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsWork
_TEXT	ENDS
EXTRN	?isGoldenAge@CvUnit@@QBE_NXZ:PROC		; CvUnit::isGoldenAge
; Function compile flags: /Odtp
;	COMDAT ?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGoldenAge, COMDAT

; 1872 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1873 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1874 : 	const bool bResult = pkUnit->isGoldenAge();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isGoldenAge@CvUnit@@QBE_NXZ		; CvUnit::isGoldenAge
	mov	BYTE PTR _bResult$[ebp], al

; 1875 : 	
; 1876 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1877 : 	return 1;

	mov	eax, 1

; 1878 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGoldenAge
_TEXT	ENDS
EXTRN	?IsNearFriendlyMinor@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsNearFriendlyMinor
; Function compile flags: /Odtp
;	COMDAT ?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsNearFriendlyMinor, COMDAT

; 1883 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1884 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1885 : 	const bool bResult = pkUnit->IsNearFriendlyMinor();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsNearFriendlyMinor@CvUnit@@QBE_NXZ	; CvUnit::IsNearFriendlyMinor
	mov	BYTE PTR _bResult$[ebp], al

; 1886 : 
; 1887 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1888 : 	return 1;

	mov	eax, 1

; 1889 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsNearFriendlyMinor
_TEXT	ENDS
EXTRN	?canCoexistWithEnemyUnit@CvUnit@@QBE_NW4TeamTypes@@@Z:PROC ; CvUnit::canCoexistWithEnemyUnit
; Function compile flags: /Odtp
;	COMDAT ?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eTeam$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanCoexistWithEnemyUnit, COMDAT

; 1894 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1895 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1896 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTeam$[ebp], eax

; 1897 : 	const bool bResult = pkUnit->canCoexistWithEnemyUnit(eTeam);

	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canCoexistWithEnemyUnit@CvUnit@@QBE_NW4TeamTypes@@@Z ; CvUnit::canCoexistWithEnemyUnit
	mov	BYTE PTR _bResult$[ebp], al

; 1898 : 
; 1899 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 1900 : 	return 1;

	mov	eax, 1

; 1901 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanCoexistWithEnemyUnit
_TEXT	ENDS
EXTRN	?IsGreatPerson@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsGreatPerson
; Function compile flags: /Odtp
;	COMDAT ?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGreatPerson, COMDAT

; 1905 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1906 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1907 : 	const bool bResult = pkUnit->IsGreatPerson();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsGreatPerson@CvUnit@@QBE_NXZ		; CvUnit::IsGreatPerson
	mov	BYTE PTR _bResult$[ebp], al

; 1908 : 
; 1909 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1910 : 	return 1;

	mov	eax, 1

; 1911 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGreatPerson
_TEXT	ENDS
EXTRN	?isFighting@CvUnit@@QBE_NXZ:PROC		; CvUnit::isFighting
; Function compile flags: /Odtp
;	COMDAT ?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsFighting, COMDAT

; 1915 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1916 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1917 : 	const bool bResult = pkUnit->isFighting();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isFighting@CvUnit@@QBE_NXZ		; CvUnit::isFighting
	mov	BYTE PTR _bResult$[ebp], al

; 1918 : 
; 1919 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1920 : 	return 1;

	mov	eax, 1

; 1921 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsFighting
_TEXT	ENDS
EXTRN	?isAttacking@CvUnit@@QBE_NXZ:PROC		; CvUnit::isAttacking
; Function compile flags: /Odtp
;	COMDAT ?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAttacking, COMDAT

; 1925 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1926 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1927 : 	const bool bResult = pkUnit->isAttacking();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isAttacking@CvUnit@@QBE_NXZ		; CvUnit::isAttacking
	mov	BYTE PTR _bResult$[ebp], al

; 1928 : 
; 1929 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1930 : 	return 1;

	mov	eax, 1

; 1931 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAttacking
_TEXT	ENDS
EXTRN	?isDefending@CvUnit@@QBE_NXZ:PROC		; CvUnit::isDefending
; Function compile flags: /Odtp
;	COMDAT ?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsDefending, COMDAT

; 1935 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1936 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1937 : 	const bool bResult = pkUnit->isDefending();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isDefending@CvUnit@@QBE_NXZ		; CvUnit::isDefending
	mov	BYTE PTR _bResult$[ebp], al

; 1938 : 
; 1939 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1940 : 	return 1;

	mov	eax, 1

; 1941 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsDefending
_TEXT	ENDS
EXTRN	?isInCombat@CvUnit@@QBE_NXZ:PROC		; CvUnit::isInCombat
; Function compile flags: /Odtp
;	COMDAT ?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsInCombat, COMDAT

; 1945 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1946 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1947 : 	const bool bResult = pkUnit->isInCombat();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isInCombat@CvUnit@@QBE_NXZ		; CvUnit::isInCombat
	mov	BYTE PTR _bResult$[ebp], al

; 1948 : 
; 1949 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1950 : 	return 1;

	mov	eax, 1

; 1951 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsInCombat
_TEXT	ENDS
EXTRN	?GetMaxHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetMaxHitPoints
; Function compile flags: /Odtp
;	COMDAT ?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetMaxHitPoints, COMDAT

; 1955 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1956 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1957 : 
; 1958 : 	const int iResult = pkUnit->GetMaxHitPoints();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetMaxHitPoints@CvUnit@@QBEHXZ		; CvUnit::GetMaxHitPoints
	mov	DWORD PTR _iResult$[ebp], eax

; 1959 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1960 : 	return 1;

	mov	eax, 1

; 1961 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetMaxHitPoints
_TEXT	ENDS
EXTRN	?GetCurrHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCurrHitPoints
; Function compile flags: /Odtp
;	COMDAT ?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCurrHitPoints, COMDAT

; 1965 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1966 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1967 : 
; 1968 : 	const int iResult = pkUnit->GetCurrHitPoints();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints
	mov	DWORD PTR _iResult$[ebp], eax

; 1969 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 1970 : 	return 1;

	mov	eax, 1

; 1971 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCurrHitPoints
_TEXT	ENDS
EXTRN	?IsHurt@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsHurt
; Function compile flags: /Odtp
;	COMDAT ?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsHurt, COMDAT

; 1975 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1976 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1977 : 	const bool bResult = pkUnit->IsHurt();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsHurt@CvUnit@@QBE_NXZ			; CvUnit::IsHurt
	mov	BYTE PTR _bResult$[ebp], al

; 1978 : 
; 1979 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1980 : 	return 1;

	mov	eax, 1

; 1981 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsHurt
_TEXT	ENDS
EXTRN	?IsDead@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsDead
; Function compile flags: /Odtp
;	COMDAT ?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsDead, COMDAT

; 1985 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1986 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1987 : 	const bool bResult = pkUnit->IsDead();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead
	mov	BYTE PTR _bResult$[ebp], al

; 1988 : 
; 1989 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 1990 : 	return 1;

	mov	eax, 1

; 1991 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsDead
_TEXT	ENDS
EXTRN	?isDelayedDeath@CvUnit@@QBE_NXZ:PROC		; CvUnit::isDelayedDeath
; Function compile flags: /Odtp
;	COMDAT ?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsDelayedDeath, COMDAT

; 1995 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1996 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 1997 : 	const bool bResult = pkUnit->isDelayedDeath();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath
	mov	BYTE PTR _bResult$[ebp], al

; 1998 : 
; 1999 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2000 : 	return 1;

	mov	eax, 1

; 2001 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsDelayedDeath
_TEXT	ENDS
EXTRN	?SetBaseCombatStrength@CvUnit@@QAEXH@Z:PROC	; CvUnit::SetBaseCombatStrength
; Function compile flags: /Odtp
;	COMDAT ?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iCombat$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetBaseCombatStrength, COMDAT

; 2005 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2006 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2007 : 	const int iCombat = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iCombat$[ebp], eax

; 2008 : 
; 2009 : 	pkUnit->SetBaseCombatStrength(iCombat);

	mov	edx, DWORD PTR _iCombat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?SetBaseCombatStrength@CvUnit@@QAEXH@Z	; CvUnit::SetBaseCombatStrength

; 2010 : 	return 0;

	xor	eax, eax

; 2011 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetBaseCombatStrength
_TEXT	ENDS
EXTRN	?GetBaseCombatStrength@CvUnit@@QBEH_N@Z:PROC	; CvUnit::GetBaseCombatStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBaseCombatStrength, COMDAT

; 2015 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2016 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2017 : 
; 2018 : 	const int iResult = pkUnit->GetBaseCombatStrength();

	push	0
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetBaseCombatStrength@CvUnit@@QBEH_N@Z	; CvUnit::GetBaseCombatStrength
	mov	DWORD PTR _iResult$[ebp], eax

; 2019 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2020 : 	return 1;

	mov	eax, 1

; 2021 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBaseCombatStrength
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCombatUnit, COMDAT

; 2025 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2026 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2027 : 	const bool bResult = pkUnit->IsCombatUnit();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+1044], 0
	setg	dl
	mov	BYTE PTR _bResult$[ebp], dl

; 2028 : 
; 2029 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 2030 : 	return 1;

	mov	eax, 1

; 2031 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCombatUnit
_TEXT	ENDS
EXTRN	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::IsCanDefend
; Function compile flags: /Odtp
;	COMDAT ?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanDefend, COMDAT

; 2035 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2036 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2037 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 2038 : 	const bool bResult = pkUnit->IsCanDefend(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend
	mov	BYTE PTR _bResult$[ebp], al

; 2039 : 
; 2040 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 2041 : 	return 1;

	mov	eax, 1

; 2042 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanDefend
_TEXT	ENDS
EXTRN	?IsCanAttackWithMove@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsCanAttackWithMove
; Function compile flags: /Odtp
;	COMDAT ?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsCanAttackWithMove, COMDAT

; 2046 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2047 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2048 : 	const bool bResult = pkUnit->IsCanAttackWithMove();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCanAttackWithMove@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackWithMove
	mov	BYTE PTR _bResult$[ebp], al

; 2049 : 
; 2050 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2051 : 	return 1;

	mov	eax, 1

; 2052 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsCanAttackWithMove
_TEXT	ENDS
EXTRN	?IsCanAttackRanged@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttackRanged
; Function compile flags: /Odtp
;	COMDAT ?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanAttackRanged, COMDAT

; 2056 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2057 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2058 : 	const bool bResult = pkUnit->IsCanAttackRanged();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCanAttackRanged@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackRanged
	mov	BYTE PTR _bResult$[ebp], al

; 2059 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2060 : 	return 1;

	mov	eax, 1

; 2061 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanAttackRanged
_TEXT	ENDS
EXTRN	?IsCanAttack@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttack
; Function compile flags: /Odtp
;	COMDAT ?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanAttack, COMDAT

; 2066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2067 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2068 : 	const bool bResult = pkUnit->IsCanAttack();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCanAttack@CvUnit@@QBE_NXZ		; CvUnit::IsCanAttack
	mov	BYTE PTR _bResult$[ebp], al

; 2069 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2070 : 	return 1;

	mov	eax, 1

; 2071 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanAttack
_TEXT	ENDS
EXTRN	?IsCanAttackWithMoveNow@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsCanAttackWithMoveNow
; Function compile flags: /Odtp
;	COMDAT ?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsCanAttackWithMoveNow, COMDAT

; 2076 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2077 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2078 : 	const bool bResult = pkUnit->IsCanAttackWithMoveNow();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsCanAttackWithMoveNow@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackWithMoveNow
	mov	BYTE PTR _bResult$[ebp], al

; 2079 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2080 : 	return 1;

	mov	eax, 1

; 2081 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsCanAttackWithMoveNow
_TEXT	ENDS
EXTRN	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z:PROC ; CvUnit::GetMaxAttackStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_pkDefender$ = -16					; size = 4
_pkFromPlot$ = -12					; size = 4
_iResult$ = -8						; size = 4
_pToPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxAttackStrength, COMDAT

; 2086 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2087 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2088 : 	CvPlot* pkFromPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkFromPlot$[ebp], eax

; 2089 : 	CvPlot* pToPlot = CvLuaPlot::GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pToPlot$[ebp], eax

; 2090 : 	CvUnit* pkDefender = GetInstance(L, 4, false);

	push	0
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2091 : 
; 2092 : 	const int iResult = pkUnit->GetMaxAttackStrength(pkFromPlot, pToPlot, pkDefender);

	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pToPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkFromPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z ; CvUnit::GetMaxAttackStrength
	mov	DWORD PTR _iResult$[ebp], eax

; 2093 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2094 : 	return 1;

	mov	eax, 1

; 2095 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxAttackStrength
_TEXT	ENDS
EXTRN	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z:PROC ; CvUnit::GetMaxDefenseStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bFromRangedAttack$ = -13				; size = 1
_iResult$ = -12						; size = 4
_pInPlot$ = -8						; size = 4
_pkAttacker$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxDefenseStrength, COMDAT

; 2100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2101 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2102 : 	CvPlot* pInPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pInPlot$[ebp], eax

; 2103 : 	CvUnit* pkAttacker = GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 2104 : 	bool bFromRangedAttack = luaL_optbool(L, 4, false);

	push	0
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 12					; 0000000cH
	mov	BYTE PTR _bFromRangedAttack$[ebp], al

; 2105 : 
; 2106 : 	const int iResult = pkUnit->GetMaxDefenseStrength(pInPlot, pkAttacker, bFromRangedAttack);

	movzx	ecx, BYTE PTR _bFromRangedAttack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	eax, DWORD PTR _pInPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z ; CvUnit::GetMaxDefenseStrength
	mov	DWORD PTR _iResult$[ebp], eax

; 2107 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2108 : 	return 1;

	mov	eax, 1

; 2109 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxDefenseStrength
_TEXT	ENDS
EXTRN	?GetEmbarkedUnitDefense@CvUnit@@QBEHXZ:PROC	; CvUnit::GetEmbarkedUnitDefense
; Function compile flags: /Odtp
;	COMDAT ?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetEmbarkedUnitDefense, COMDAT

; 2114 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2115 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2116 : 	const int iResult = pkUnit->GetEmbarkedUnitDefense();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetEmbarkedUnitDefense@CvUnit@@QBEHXZ	; CvUnit::GetEmbarkedUnitDefense
	mov	DWORD PTR _iResult$[ebp], eax

; 2117 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2118 : 	return 1;

	mov	eax, 1

; 2119 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetEmbarkedUnitDefense
_TEXT	ENDS
EXTRN	?canSiege@CvUnit@@QBE_NW4TeamTypes@@@Z:PROC	; CvUnit::canSiege
; Function compile flags: /Odtp
;	COMDAT ?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eTeam$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSiege, COMDAT

; 2124 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2125 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2126 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTeam$[ebp], eax

; 2127 : 	const bool bResult = pkUnit->canSiege(eTeam);

	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canSiege@CvUnit@@QBE_NW4TeamTypes@@@Z	; CvUnit::canSiege
	mov	BYTE PTR _bResult$[ebp], al

; 2128 : 
; 2129 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 2130 : 	return 1;

	mov	eax, 1

; 2131 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSiege
_TEXT	ENDS
EXTRN	?IsEnemyInMovementRange@CvUnit@@QAE_N_N0@Z:PROC	; CvUnit::IsEnemyInMovementRange
; Function compile flags: /Odtp
;	COMDAT ?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bOnlyFortified$ = -2					; size = 1
_bOnlyCities$ = -1					; size = 1
_L$ = 8							; size = 4
?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsEnemyInMovementRange, COMDAT

; 2135 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2136 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2137 : 	const bool bOnlyFortified = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bOnlyFortified$[ebp], dl

; 2138 : 	const bool bOnlyCities = lua_toboolean(L, 3);

	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bOnlyCities$[ebp], cl

; 2139 : 
; 2140 : 	lua_pushboolean(L, pkUnit->IsEnemyInMovementRange(bOnlyFortified, bOnlyCities));

	movzx	edx, BYTE PTR _bOnlyCities$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bOnlyFortified$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsEnemyInMovementRange@CvUnit@@QAE_N_N0@Z ; CvUnit::IsEnemyInMovementRange
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2141 : 	return 1;

	mov	eax, 1

; 2142 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsEnemyInMovementRange
_TEXT	ENDS
EXTRN	?isTrade@CvUnit@@QBE_NXZ:PROC			; CvUnit::isTrade
; Function compile flags: /Odtp
;	COMDAT ?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsTrade, COMDAT

; 2146 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 2147 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2148 : 	lua_pushboolean(L, pkUnit->isTrade());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isTrade@CvUnit@@QBE_NXZ		; CvUnit::isTrade
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2149 : 	return 1;

	mov	eax, 1

; 2150 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsTrade
_TEXT	ENDS
EXTRN	?GetBaseRangedCombatStrength@CvUnit@@QBEHXZ:PROC ; CvUnit::GetBaseRangedCombatStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBaseRangedCombatStrength, COMDAT

; 2155 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2156 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2157 : 
; 2158 : 	const int iResult = pkUnit->GetBaseRangedCombatStrength();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetBaseRangedCombatStrength@CvUnit@@QBEHXZ ; CvUnit::GetBaseRangedCombatStrength
	mov	DWORD PTR _iResult$[ebp], eax

; 2159 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2160 : 	return 1;

	mov	eax, 1

; 2161 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBaseRangedCombatStrength
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
EXTRN	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z:PROC ; CvUnit::GetMaxRangedCombatStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -24						; size = 4
_pkOther$ = -20						; size = 4
_bForRangedAttack$ = -13				; size = 1
_iResult$ = -12						; size = 4
_bAttacking$ = -5					; size = 1
_pkCity$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxRangedCombatStrength, COMDAT

; 2165 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2166 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2167 : 	CvUnit* pkOther = GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkOther$[ebp], eax

; 2168 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkCity$[ebp], eax

; 2169 : 	const bool bAttacking = lua_toboolean(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bAttacking$[ebp], cl

; 2170 : 	const bool bForRangedAttack = lua_toboolean(L, 5);

	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bForRangedAttack$[ebp], al

; 2171 : 
; 2172 : 	const int iResult = pkUnit->GetMaxRangedCombatStrength(pkOther, pkCity, bAttacking, bForRangedAttack);

	movzx	ecx, BYTE PTR _bForRangedAttack$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bAttacking$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkOther$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength
	mov	DWORD PTR _iResult$[ebp], eax

; 2173 : 	lua_pushinteger(L, iResult);

	mov	edx, DWORD PTR _iResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 2174 : 	return 1;

	mov	eax, 1

; 2175 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxRangedCombatStrength
_TEXT	ENDS
EXTRN	?GetCombatLimit@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCombatLimit
; Function compile flags: /Odtp
;	COMDAT ?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatLimit, COMDAT

; 2179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2180 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2181 : 
; 2182 : 	const int iResult = pkUnit->GetCombatLimit();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetCombatLimit@CvUnit@@QBEHXZ		; CvUnit::GetCombatLimit
	mov	DWORD PTR _iResult$[ebp], eax

; 2183 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2184 : 	return 1;

	mov	eax, 1

; 2185 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatLimit
_TEXT	ENDS
EXTRN	?GetRangedCombatLimit@CvUnit@@QBEHXZ:PROC	; CvUnit::GetRangedCombatLimit
; Function compile flags: /Odtp
;	COMDAT ?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangedCombatLimit, COMDAT

; 2189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2190 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2191 : 
; 2192 : 	const int iResult = pkUnit->GetRangedCombatLimit();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetRangedCombatLimit@CvUnit@@QBEHXZ	; CvUnit::GetRangedCombatLimit
	mov	DWORD PTR _iResult$[ebp], eax

; 2193 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2194 : 	return 1;

	mov	eax, 1

; 2195 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangedCombatLimit
_TEXT	ENDS
EXTRN	?canAirAttack@CvUnit@@QBE_NXZ:PROC		; CvUnit::canAirAttack
; Function compile flags: /Odtp
;	COMDAT ?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirAttack, COMDAT

; 2199 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2200 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2201 : 	const bool bResult = pkUnit->canAirAttack();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAirAttack@CvUnit@@QBE_NXZ		; CvUnit::canAirAttack
	mov	BYTE PTR _bResult$[ebp], al

; 2202 : 
; 2203 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2204 : 	return 1;

	mov	eax, 1

; 2205 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirAttack
_TEXT	ENDS
EXTRN	?canAirDefend@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirDefend
; Function compile flags: /Odtp
;	COMDAT ?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirDefend, COMDAT

; 2209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2210 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2211 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 2212 : 	const bool bResult = pkUnit->canAirDefend(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAirDefend@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canAirDefend
	mov	BYTE PTR _bResult$[ebp], al

; 2213 : 
; 2214 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 2215 : 	return 1;

	mov	eax, 1

; 2216 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirDefend
_TEXT	ENDS
EXTRN	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetAirCombatDamage
; Function compile flags: /Odtp
;	COMDAT ?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_pkDefender$ = -16					; size = 4
_bIncludeRand$ = -9					; size = 1
_iResult$ = -8						; size = 4
_pkCity$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAirCombatDamage, COMDAT

; 2220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2221 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2222 : 	CvUnit* pkDefender = GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2223 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3);

	push	1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkCity$[ebp], eax

; 2224 : 	const bool bIncludeRand = lua_toboolean(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bIncludeRand$[ebp], cl

; 2225 : 
; 2226 : 	const int iResult = pkUnit->GetAirCombatDamage(pkDefender, pkCity, bIncludeRand);

	push	0
	movzx	edx, BYTE PTR _bIncludeRand$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetAirCombatDamage
	mov	DWORD PTR _iResult$[ebp], eax

; 2227 : 	lua_pushinteger(L, iResult);

	mov	edx, DWORD PTR _iResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 2228 : 	return 1;

	mov	eax, 1

; 2229 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAirCombatDamage
_TEXT	ENDS
EXTRN	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetRangeCombatDamage
; Function compile flags: /Odtp
;	COMDAT ?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_pkDefender$ = -16					; size = 4
_bIncludeRand$ = -9					; size = 1
_iResult$ = -8						; size = 4
_pkCity$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangeCombatDamage, COMDAT

; 2233 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2234 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2235 : 	CvUnit* pkDefender = GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2236 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkCity$[ebp], eax

; 2237 : 	const bool bIncludeRand = lua_toboolean(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bIncludeRand$[ebp], cl

; 2238 : 
; 2239 : 	const int iResult = pkUnit->GetRangeCombatDamage(pkDefender, pkCity, bIncludeRand);

	push	0
	movzx	edx, BYTE PTR _bIncludeRand$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkDefender$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetRangeCombatDamage
	mov	DWORD PTR _iResult$[ebp], eax

; 2240 : 	lua_pushinteger(L, iResult);

	mov	edx, DWORD PTR _iResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 2241 : 	return 1;

	mov	eax, 1

; 2242 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangeCombatDamage
_TEXT	ENDS
EXTRN	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z:PROC ; CvUnit::GetAirStrikeDefenseDamage
; Function compile flags: /Odtp
;	COMDAT ?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bIncludeRand$ = -9					; size = 1
_iResult$ = -8						; size = 4
_pkAttacker$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAirStrikeDefenseDamage, COMDAT

; 2246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2247 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2248 : 	CvUnit* pkAttacker = GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkAttacker$[ebp], eax

; 2249 : 	const bool bIncludeRand = lua_toboolean(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIncludeRand$[ebp], al

; 2250 : 
; 2251 : 	const int iResult = pkUnit->GetAirStrikeDefenseDamage(pkAttacker, bIncludeRand);

	movzx	ecx, BYTE PTR _bIncludeRand$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkAttacker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z ; CvUnit::GetAirStrikeDefenseDamage
	mov	DWORD PTR _iResult$[ebp], eax

; 2252 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2253 : 	return 1;

	mov	eax, 1

; 2254 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAirStrikeDefenseDamage
_TEXT	ENDS
EXTRN	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z:PROC ; CvUnit::GetBestInterceptor
; Function compile flags: /Odtp
;	COMDAT ?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_pkDefender$ = -16					; size = 4
_bLandInterceptorsOnly$ = -10				; size = 1
_bVisibleInterceptorsOnly$ = -9				; size = 1
_pkBestUnit$ = -8					; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBestInterceptor, COMDAT

; 2258 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2259 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2260 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 2261 : 	CvUnit* pkDefender = GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2262 : 	const bool bLandInterceptorsOnly = lua_toboolean(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bLandInterceptorsOnly$[ebp], cl

; 2263 : 	const bool bVisibleInterceptorsOnly = lua_toboolean(L, 5);

	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bVisibleInterceptorsOnly$[ebp], al

; 2264 : 
; 2265 : 	CvUnit* pkBestUnit = 0;

	mov	DWORD PTR _pkBestUnit$[ebp], 0

; 2266 : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lGetBestIn

; 2267 : 	{
; 2268 : 		pkBestUnit = pkUnit->GetBestInterceptor(*pkPlot, pkDefender, bLandInterceptorsOnly, bVisibleInterceptorsOnly);

	movzx	ecx, BYTE PTR _bVisibleInterceptorsOnly$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bLandInterceptorsOnly$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
	mov	DWORD PTR _pkBestUnit$[ebp], eax
$LN1@lGetBestIn:

; 2269 : 	}
; 2270 : 
; 2271 : 	CvLuaUnit::Push(L, pkBestUnit);

	mov	edx, DWORD PTR _pkBestUnit$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8

; 2272 : 	return 1;

	mov	eax, 1

; 2273 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBestInterceptor
_TEXT	ENDS
EXTRN	?GetInterceptorCount@CvUnit@@QBEHABVCvPlot@@PAV1@_N2@Z:PROC ; CvUnit::GetInterceptorCount
; Function compile flags: /Odtp
;	COMDAT ?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_iCount$ = -16						; size = 4
_pkDefender$ = -12					; size = 4
_bLandInterceptorsOnly$ = -6				; size = 1
_bVisibleInterceptorsOnly$ = -5				; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetInterceptorCount, COMDAT

; 2277 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 2278 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2279 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 2280 : 	CvUnit* pkDefender = GetInstance(L, 3, false);

	push	0
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkDefender$[ebp], eax

; 2281 : 	const bool bLandInterceptorsOnly = lua_toboolean(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bLandInterceptorsOnly$[ebp], cl

; 2282 : 	const bool bVisibleInterceptorsOnly = lua_toboolean(L, 5);

	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bVisibleInterceptorsOnly$[ebp], al

; 2283 : 
; 2284 : 	int iCount  = 0;

	mov	DWORD PTR _iCount$[ebp], 0

; 2285 : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lGetInterc

; 2286 : 	{
; 2287 : 		iCount = pkUnit->GetInterceptorCount(*pkPlot, pkDefender, bLandInterceptorsOnly, bVisibleInterceptorsOnly);

	movzx	ecx, BYTE PTR _bVisibleInterceptorsOnly$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bLandInterceptorsOnly$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkDefender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetInterceptorCount@CvUnit@@QBEHABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetInterceptorCount
	mov	DWORD PTR _iCount$[ebp], eax
$LN1@lGetInterc:

; 2288 : 	}
; 2289 : 
; 2290 : 	lua_pushinteger(L, iCount);

	mov	edx, DWORD PTR _iCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 2291 : 	return 1;

	mov	eax, 1

; 2292 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetInterceptorCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_pkBestUnit$ = -8					; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBestSeaPillageInterceptor, COMDAT

; 2296 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2297 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2298 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 2299 : 
; 2300 : 	CvUnit* pkBestUnit = 0;

	mov	DWORD PTR _pkBestUnit$[ebp], 0

; 2301 : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lGetBestSe

; 2302 : 	{
; 2303 : 		pkBestUnit = pkUnit->GetBestInterceptor(*pkPlot);

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
	mov	DWORD PTR _pkBestUnit$[ebp], eax
$LN1@lGetBestSe:

; 2304 : 	}
; 2305 : 
; 2306 : 	CvLuaUnit::Push(L, pkBestUnit);

	mov	eax, DWORD PTR _pkBestUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8

; 2307 : 	return 1;

	mov	eax, 1

; 2308 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBestSeaPillageInterceptor
_TEXT	ENDS
EXTRN	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z:PROC	; CvUnit::GetCaptureChance
; Function compile flags: /Odtp
;	COMDAT ?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_pkEnemy$ = -8						; size = 4
_iChance$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCaptureChance, COMDAT

; 2312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2313 : 	int iChance = 0;

	mov	DWORD PTR _iChance$[ebp], 0

; 2314 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2315 : 	CvUnit* pkEnemy = CvLuaUnit::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkEnemy$[ebp], eax

; 2316 : 
; 2317 : 	if(pkEnemy)

	cmp	DWORD PTR _pkEnemy$[ebp], 0
	je	SHORT $LN1@lGetCaptur

; 2318 : 	{
; 2319 : 		iChance = pkUnit->GetCaptureChance(pkEnemy);

	mov	edx, DWORD PTR _pkEnemy$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z	; CvUnit::GetCaptureChance
	mov	DWORD PTR _iChance$[ebp], eax
$LN1@lGetCaptur:

; 2320 : 	}
; 2321 : 
; 2322 : 	lua_pushinteger(L, iChance);

	mov	eax, DWORD PTR _iChance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2323 : 
; 2324 : 	return 1;

	mov	eax, 1

; 2325 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCaptureChance
_TEXT	ENDS
EXTRN	?IsAutomated@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsAutomated
; Function compile flags: /Odtp
;	COMDAT ?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAutomated, COMDAT

; 2329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2330 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2331 : 	const bool bResult = pkUnit->IsAutomated();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated
	mov	BYTE PTR _bResult$[ebp], al

; 2332 : 
; 2333 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2334 : 	return 1;

	mov	eax, 1

; 2335 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAutomated
_TEXT	ENDS
EXTRN	?isWaiting@CvUnit@@QBE_NXZ:PROC			; CvUnit::isWaiting
; Function compile flags: /Odtp
;	COMDAT ?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsWaiting, COMDAT

; 2339 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2340 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2341 : 	const bool bResult = pkUnit->isWaiting();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isWaiting@CvUnit@@QBE_NXZ		; CvUnit::isWaiting
	mov	BYTE PTR _bResult$[ebp], al

; 2342 : 
; 2343 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2344 : 	return 1;

	mov	eax, 1

; 2345 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsWaiting
_TEXT	ENDS
EXTRN	?isFortifyable@CvUnit@@QBE_N_N@Z:PROC		; CvUnit::isFortifyable
; Function compile flags: /Odtp
;	COMDAT ?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsFortifyable, COMDAT

; 2349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2350 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2351 : 	const bool bResult = pkUnit->isFortifyable();

	push	0
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isFortifyable@CvUnit@@QBE_N_N@Z	; CvUnit::isFortifyable
	mov	BYTE PTR _bResult$[ebp], al

; 2352 : 
; 2353 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2354 : 	return 1;

	mov	eax, 1

; 2355 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsFortifyable
_TEXT	ENDS
EXTRN	?IsEverFortifyable@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsEverFortifyable
; Function compile flags: /Odtp
;	COMDAT ?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEverFortifyable, COMDAT

; 2358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2359 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2360 : 	const bool bResult = pkUnit->IsEverFortifyable();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsEverFortifyable@CvUnit@@QBE_NXZ	; CvUnit::IsEverFortifyable
	mov	BYTE PTR _bResult$[ebp], al

; 2361 : 
; 2362 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2363 : 	return 1;

	mov	eax, 1

; 2364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEverFortifyable
_TEXT	ENDS
EXTRN	?fortifyModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::fortifyModifier
; Function compile flags: /Odtp
;	COMDAT ?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFortifyModifier, COMDAT

; 2368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2369 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2370 : 
; 2371 : 	const int iResult = pkUnit->fortifyModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?fortifyModifier@CvUnit@@QBEHXZ		; CvUnit::fortifyModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2372 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2373 : 	return 1;

	mov	eax, 1

; 2374 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFortifyModifier
_TEXT	ENDS
EXTRN	?experienceNeeded@CvUnit@@QBEHXZ:PROC		; CvUnit::experienceNeeded
; Function compile flags: /Odtp
;	COMDAT ?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lExperienceNeeded, COMDAT

; 2378 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2379 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2380 : 
; 2381 : 	const int iResult = pkUnit->experienceNeeded();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?experienceNeeded@CvUnit@@QBEHXZ	; CvUnit::experienceNeeded
	mov	DWORD PTR _iResult$[ebp], eax

; 2382 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2383 : 	return 1;

	mov	eax, 1

; 2384 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lExperienceNeeded
_TEXT	ENDS
EXTRN	?attackXPValue@CvUnit@@QBEHXZ:PROC		; CvUnit::attackXPValue
; Function compile flags: /Odtp
;	COMDAT ?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lAttackXPValue, COMDAT

; 2388 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2389 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2390 : 
; 2391 : 	const int iResult = pkUnit->attackXPValue();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?attackXPValue@CvUnit@@QBEHXZ		; CvUnit::attackXPValue
	mov	DWORD PTR _iResult$[ebp], eax

; 2392 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2393 : 	return 1;

	mov	eax, 1

; 2394 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lAttackXPValue
_TEXT	ENDS
EXTRN	?defenseXPValue@CvUnit@@QBEHXZ:PROC		; CvUnit::defenseXPValue
; Function compile flags: /Odtp
;	COMDAT ?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDefenseXPValue, COMDAT

; 2398 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2399 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2400 : 
; 2401 : 	const int iResult = pkUnit->defenseXPValue();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?defenseXPValue@CvUnit@@QBEHXZ		; CvUnit::defenseXPValue
	mov	DWORD PTR _iResult$[ebp], eax

; 2402 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2403 : 	return 1;

	mov	eax, 1

; 2404 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDefenseXPValue
_TEXT	ENDS
EXTRN	?maxXPValue@CvUnit@@QBEHXZ:PROC			; CvUnit::maxXPValue
; Function compile flags: /Odtp
;	COMDAT ?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lMaxXPValue, COMDAT

; 2408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2409 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2410 : 
; 2411 : 	const int iResult = pkUnit->maxXPValue();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue
	mov	DWORD PTR _iResult$[ebp], eax

; 2412 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2413 : 	return 1;

	mov	eax, 1

; 2414 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lMaxXPValue
_TEXT	ENDS
EXTRN	?firstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::firstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFirstStrikes, COMDAT

; 2418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2419 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2420 : 
; 2421 : 	const int iResult = pkUnit->firstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?firstStrikes@CvUnit@@QBEHXZ		; CvUnit::firstStrikes
	mov	DWORD PTR _iResult$[ebp], eax

; 2422 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2423 : 	return 1;

	mov	eax, 1

; 2424 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFirstStrikes
_TEXT	ENDS
EXTRN	?chanceFirstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::chanceFirstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lChanceFirstStrikes, COMDAT

; 2428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2429 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2430 : 
; 2431 : 	const int iResult = pkUnit->chanceFirstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?chanceFirstStrikes@CvUnit@@QBEHXZ	; CvUnit::chanceFirstStrikes
	mov	DWORD PTR _iResult$[ebp], eax

; 2432 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2433 : 	return 1;

	mov	eax, 1

; 2434 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lChanceFirstStrikes
_TEXT	ENDS
EXTRN	?maxFirstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::maxFirstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lMaxFirstStrikes, COMDAT

; 2438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2439 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2440 : 
; 2441 : 	const int iResult = pkUnit->maxFirstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?maxFirstStrikes@CvUnit@@QBEHXZ		; CvUnit::maxFirstStrikes
	mov	DWORD PTR _iResult$[ebp], eax

; 2442 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2443 : 	return 1;

	mov	eax, 1

; 2444 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lMaxFirstStrikes
_TEXT	ENDS
EXTRN	?isRanged@CvUnit@@QBE_NXZ:PROC			; CvUnit::isRanged
; Function compile flags: /Odtp
;	COMDAT ?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsRanged, COMDAT

; 2448 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2449 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2450 : 	const bool bResult = pkUnit->isRanged();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isRanged@CvUnit@@QBE_NXZ		; CvUnit::isRanged
	mov	BYTE PTR _bResult$[ebp], al

; 2451 : 
; 2452 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2453 : 	return 1;

	mov	eax, 1

; 2454 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsRanged
_TEXT	ENDS
EXTRN	?isMustSetUpToRangedAttack@CvUnit@@QBE_NXZ:PROC	; CvUnit::isMustSetUpToRangedAttack
; Function compile flags: /Odtp
;	COMDAT ?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsMustSetUpToRangedAttack, COMDAT

; 2457 : {

	push	ebp
	mov	ebp, esp

; 2458 : 	return BasicLuaMethod(L, &CvUnit::isMustSetUpToRangedAttack);

	push	OFFSET ?isMustSetUpToRangedAttack@CvUnit@@QBE_NXZ ; CvUnit::isMustSetUpToRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 2459 : }

	pop	ebp
	ret	0
?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsMustSetUpToRangedAttack
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
EXTRN	?canSetUpForRangedAttack@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC ; CvUnit::canSetUpForRangedAttack
; Function compile flags: /Odtp
;	COMDAT ?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanSetUpForRangedAttack, COMDAT

; 2462 : {

	push	ebp
	mov	ebp, esp

; 2463 : 	return BasicLuaMethod(L, &CvUnit::canSetUpForRangedAttack);

	push	OFFSET ?canSetUpForRangedAttack@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canSetUpForRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
	add	esp, 8

; 2464 : }

	pop	ebp
	ret	0
?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanSetUpForRangedAttack
_TEXT	ENDS
EXTRN	?isSetUpForRangedAttack@CvUnit@@QBE_NXZ:PROC	; CvUnit::isSetUpForRangedAttack
; Function compile flags: /Odtp
;	COMDAT ?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsSetUpForRangedAttack, COMDAT

; 2467 : {

	push	ebp
	mov	ebp, esp

; 2468 : 	return BasicLuaMethod(L, &CvUnit::isSetUpForRangedAttack);

	push	OFFSET ?isSetUpForRangedAttack@CvUnit@@QBE_NXZ ; CvUnit::isSetUpForRangedAttack
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 2469 : }

	pop	ebp
	ret	0
?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsSetUpForRangedAttack
_TEXT	ENDS
EXTRN	?immuneToFirstStrikes@CvUnit@@QBE_NXZ:PROC	; CvUnit::immuneToFirstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lImmuneToFirstStrikes, COMDAT

; 2473 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2474 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2475 : 	const bool bResult = pkUnit->immuneToFirstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?immuneToFirstStrikes@CvUnit@@QBE_NXZ	; CvUnit::immuneToFirstStrikes
	mov	BYTE PTR _bResult$[ebp], al

; 2476 : 
; 2477 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2478 : 	return 1;

	mov	eax, 1

; 2479 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lImmuneToFirstStrikes
_TEXT	ENDS
EXTRN	?noDefensiveBonus@CvUnit@@QBE_NXZ:PROC		; CvUnit::noDefensiveBonus
; Function compile flags: /Odtp
;	COMDAT ?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lNoDefensiveBonus, COMDAT

; 2483 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2484 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2485 : 	const bool bResult = pkUnit->noDefensiveBonus();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus
	mov	BYTE PTR _bResult$[ebp], al

; 2486 : 
; 2487 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2488 : 	return 1;

	mov	eax, 1

; 2489 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lNoDefensiveBonus
_TEXT	ENDS
EXTRN	?ignoreBuildingDefense@CvUnit@@QBE_NXZ:PROC	; CvUnit::ignoreBuildingDefense
; Function compile flags: /Odtp
;	COMDAT ?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIgnoreBuildingDefense, COMDAT

; 2493 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2494 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2495 : 	const bool bResult = pkUnit->ignoreBuildingDefense();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?ignoreBuildingDefense@CvUnit@@QBE_NXZ	; CvUnit::ignoreBuildingDefense
	mov	BYTE PTR _bResult$[ebp], al

; 2496 : 
; 2497 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2498 : 	return 1;

	mov	eax, 1

; 2499 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIgnoreBuildingDefense
_TEXT	ENDS
EXTRN	?canMoveImpassable@CvUnit@@QBE_NXZ:PROC		; CvUnit::canMoveImpassable
; Function compile flags: /Odtp
;	COMDAT ?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveImpassable, COMDAT

; 2503 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2504 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2505 : 	const bool bResult = pkUnit->canMoveImpassable();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMoveImpassable@CvUnit@@QBE_NXZ	; CvUnit::canMoveImpassable
	mov	BYTE PTR _bResult$[ebp], al

; 2506 : 
; 2507 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2508 : 	return 1;

	mov	eax, 1

; 2509 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveImpassable
_TEXT	ENDS
EXTRN	?canMoveAllTerrain@CvUnit@@QBE_NXZ:PROC		; CvUnit::canMoveAllTerrain
; Function compile flags: /Odtp
;	COMDAT ?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveAllTerrain, COMDAT

; 2513 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2514 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2515 : 	const bool bResult = pkUnit->canMoveAllTerrain();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canMoveAllTerrain@CvUnit@@QBE_NXZ	; CvUnit::canMoveAllTerrain
	mov	BYTE PTR _bResult$[ebp], al

; 2516 : 
; 2517 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2518 : 	return 1;

	mov	eax, 1

; 2519 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveAllTerrain
_TEXT	ENDS
EXTRN	?flatMovementCost@CvUnit@@QBE_NXZ:PROC		; CvUnit::flatMovementCost
; Function compile flags: /Odtp
;	COMDAT ?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFlatMovementCost, COMDAT

; 2523 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2524 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2525 : 	const bool bResult = pkUnit->flatMovementCost();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?flatMovementCost@CvUnit@@QBE_NXZ	; CvUnit::flatMovementCost
	mov	BYTE PTR _bResult$[ebp], al

; 2526 : 
; 2527 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2528 : 	return 1;

	mov	eax, 1

; 2529 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFlatMovementCost
_TEXT	ENDS
EXTRN	?ignoreTerrainCost@CvUnit@@QBE_NXZ:PROC		; CvUnit::ignoreTerrainCost
; Function compile flags: /Odtp
;	COMDAT ?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIgnoreTerrainCost, COMDAT

; 2533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2534 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2535 : 	const bool bResult = pkUnit->ignoreTerrainCost();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?ignoreTerrainCost@CvUnit@@QBE_NXZ	; CvUnit::ignoreTerrainCost
	mov	BYTE PTR _bResult$[ebp], al

; 2536 : 
; 2537 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2538 : 	return 1;

	mov	eax, 1

; 2539 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIgnoreTerrainCost
_TEXT	ENDS
EXTRN	?isNeverInvisible@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNeverInvisible
; Function compile flags: /Odtp
;	COMDAT ?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNeverInvisible, COMDAT

; 2543 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2544 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2545 : 	const bool bResult = pkUnit->isNeverInvisible();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isNeverInvisible@CvUnit@@QBE_NXZ	; CvUnit::isNeverInvisible
	mov	BYTE PTR _bResult$[ebp], al

; 2546 : 
; 2547 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2548 : 	return 1;

	mov	eax, 1

; 2549 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNeverInvisible
_TEXT	ENDS
EXTRN	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z:PROC ; CvUnit::isInvisible
; Function compile flags: /Odtp
;	COMDAT ?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bDebug$ = -10						; size = 1
_bResult$ = -9						; size = 1
_eTeam$ = -8						; size = 4
_iCheckCargo$ = -4					; size = 4
_L$ = 8							; size = 4
?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsInvisible, COMDAT

; 2553 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2554 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2555 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTeam$[ebp], eax

; 2556 : 	const bool bDebug = lua_toboolean(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bDebug$[ebp], al

; 2557 : 	const int iCheckCargo = luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iCheckCargo$[ebp], eax

; 2558 : 	const bool bResult = pkUnit->isInvisible(eTeam, bDebug, iCheckCargo != 0);

	cmp	DWORD PTR _iCheckCargo$[ebp], 0
	setne	dl
	movzx	eax, dl
	push	eax
	movzx	ecx, BYTE PTR _bDebug$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z ; CvUnit::isInvisible
	mov	BYTE PTR _bResult$[ebp], al

; 2559 : 
; 2560 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 2561 : 	return 1;

	mov	eax, 1

; 2562 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsInvisible
_TEXT	ENDS
EXTRN	?IsEnemyCityAdjacent@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsEnemyCityAdjacent
; Function compile flags: /Odtp
;	COMDAT ?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsEnemyCityAdjacent, COMDAT

; 2566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2567 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2568 : 	bool bResult = pkUnit->IsEnemyCityAdjacent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsEnemyCityAdjacent@CvUnit@@QBE_NXZ	; CvUnit::IsEnemyCityAdjacent
	mov	BYTE PTR _bResult$[ebp], al

; 2569 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2570 : 	return 1;

	mov	eax, 1

; 2571 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsEnemyCityAdjacent
_TEXT	ENDS
EXTRN	?isNukeImmune@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNukeImmune
; Function compile flags: /Odtp
;	COMDAT ?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNukeImmune, COMDAT

; 2576 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2577 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2578 : 	const bool bResult = pkUnit->isNukeImmune();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isNukeImmune@CvUnit@@QBE_NXZ		; CvUnit::isNukeImmune
	mov	BYTE PTR _bResult$[ebp], al

; 2579 : 
; 2580 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2581 : 	return 1;

	mov	eax, 1

; 2582 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNukeImmune
_TEXT	ENDS
EXTRN	?maxInterceptionProbability@CvUnit@@QBEHXZ:PROC	; CvUnit::maxInterceptionProbability
; Function compile flags: /Odtp
;	COMDAT ?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lMaxInterceptionProbability, COMDAT

; 2586 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2587 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2588 : 
; 2589 : 	const int iResult = pkUnit->maxInterceptionProbability();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?maxInterceptionProbability@CvUnit@@QBEHXZ ; CvUnit::maxInterceptionProbability
	mov	DWORD PTR _iResult$[ebp], eax

; 2590 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2591 : 	return 1;

	mov	eax, 1

; 2592 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lMaxInterceptionProbability
_TEXT	ENDS
EXTRN	?currInterceptionProbability@CvUnit@@QBEHXZ:PROC ; CvUnit::currInterceptionProbability
; Function compile flags: /Odtp
;	COMDAT ?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCurrInterceptionProbability, COMDAT

; 2596 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2597 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2598 : 
; 2599 : 	const int iResult = pkUnit->currInterceptionProbability();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?currInterceptionProbability@CvUnit@@QBEHXZ ; CvUnit::currInterceptionProbability
	mov	DWORD PTR _iResult$[ebp], eax

; 2600 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2601 : 	return 1;

	mov	eax, 1

; 2602 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCurrInterceptionProbability
_TEXT	ENDS
EXTRN	?evasionProbability@CvUnit@@QBEHXZ:PROC		; CvUnit::evasionProbability
; Function compile flags: /Odtp
;	COMDAT ?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lEvasionProbability, COMDAT

; 2606 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2607 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2608 : 
; 2609 : 	const int iResult = pkUnit->evasionProbability();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?evasionProbability@CvUnit@@QBEHXZ	; CvUnit::evasionProbability
	mov	DWORD PTR _iResult$[ebp], eax

; 2610 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2611 : 	return 1;

	mov	eax, 1

; 2612 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lEvasionProbability
_TEXT	ENDS
EXTRN	?withdrawalProbability@CvUnit@@QBEHXZ:PROC	; CvUnit::withdrawalProbability
; Function compile flags: /Odtp
;	COMDAT ?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lWithdrawalProbability, COMDAT

; 2616 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2617 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2618 : 
; 2619 : 	const int iResult = pkUnit->withdrawalProbability();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?withdrawalProbability@CvUnit@@QBEHXZ	; CvUnit::withdrawalProbability
	mov	DWORD PTR _iResult$[ebp], eax

; 2620 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2621 : 	return 1;

	mov	eax, 1

; 2622 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lWithdrawalProbability
_TEXT	ENDS
EXTRN	?GetAdjacentModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetAdjacentModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAdjacentModifier, COMDAT

; 2626 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2627 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2628 : 
; 2629 : 	const int iResult = pkUnit->GetAdjacentModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetAdjacentModifier@CvUnit@@QBEHXZ	; CvUnit::GetAdjacentModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2630 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2631 : 	return 1;

	mov	eax, 1

; 2632 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAdjacentModifier
_TEXT	ENDS
EXTRN	?getAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::getAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetAttackModifier, COMDAT

; 2636 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2637 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2638 : 
; 2639 : 	const int iResult = pkUnit->getAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getAttackModifier@CvUnit@@QBEHXZ	; CvUnit::getAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2640 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2641 : 	return 1;

	mov	eax, 1

; 2642 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetAttackModifier
_TEXT	ENDS
EXTRN	?getDefenseModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::getDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetDefenseModifier, COMDAT

; 2646 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2647 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2648 : 
; 2649 : 	const int iResult = pkUnit->getDefenseModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::getDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2650 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2651 : 	return 1;

	mov	eax, 1

; 2652 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetDefenseModifier
_TEXT	ENDS
EXTRN	?GetRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetRangedAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangedAttackModifier, COMDAT

; 2656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2657 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2658 : 
; 2659 : 	const int iResult = pkUnit->GetRangedAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetRangedAttackModifier@CvUnit@@QBEHXZ	; CvUnit::GetRangedAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2660 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2661 : 	return 1;

	mov	eax, 1

; 2662 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangedAttackModifier
_TEXT	ENDS
EXTRN	?cityAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::cityAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCityAttackModifier, COMDAT

; 2666 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2667 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2668 : 
; 2669 : 	const int iResult = pkUnit->cityAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?cityAttackModifier@CvUnit@@QBEHXZ	; CvUnit::cityAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2670 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2671 : 	return 1;

	mov	eax, 1

; 2672 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCityAttackModifier
_TEXT	ENDS
EXTRN	?cityDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::cityDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCityDefenseModifier, COMDAT

; 2676 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2677 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2678 : 
; 2679 : 	const int iResult = pkUnit->cityDefenseModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?cityDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::cityDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2680 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2681 : 	return 1;

	mov	eax, 1

; 2682 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCityDefenseModifier
_TEXT	ENDS
EXTRN	?hillsAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::hillsAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHillsAttackModifier, COMDAT

; 2686 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2687 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2688 : 
; 2689 : 	const int iResult = pkUnit->hillsAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?hillsAttackModifier@CvUnit@@QBEHXZ	; CvUnit::hillsAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2690 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2691 : 	return 1;

	mov	eax, 1

; 2692 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHillsAttackModifier
_TEXT	ENDS
EXTRN	?heavyChargeDownhillModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::heavyChargeDownhillModifier
; Function compile flags: /Odtp
;	COMDAT ?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHeavyChargeDownhillModifier, COMDAT

; 2697 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2698 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2699 : 
; 2700 : 	const int iResult = pkUnit->heavyChargeDownhillModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?heavyChargeDownhillModifier@CvUnit@@QBEHXZ ; CvUnit::heavyChargeDownhillModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2701 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2702 : 	return 1;

	mov	eax, 1

; 2703 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHeavyChargeDownhillModifier
_TEXT	ENDS
EXTRN	?hillsDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::hillsDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHillsDefenseModifier, COMDAT

; 2708 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2709 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2710 : 
; 2711 : 	const int iResult = pkUnit->hillsDefenseModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?hillsDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::hillsDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2712 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2713 : 	return 1;

	mov	eax, 1

; 2714 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHillsDefenseModifier
_TEXT	ENDS
EXTRN	?openAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::openAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenAttackModifier, COMDAT

; 2718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2719 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2720 : 
; 2721 : 	const int iResult = pkUnit->openAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?openAttackModifier@CvUnit@@QBEHXZ	; CvUnit::openAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2722 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2723 : 	return 1;

	mov	eax, 1

; 2724 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenAttackModifier
_TEXT	ENDS
EXTRN	?openRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::openRangedAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenRangedAttackModifier, COMDAT

; 2728 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2729 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2730 : 
; 2731 : 	const int iResult = pkUnit->openRangedAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?openRangedAttackModifier@CvUnit@@QBEHXZ ; CvUnit::openRangedAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2732 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2733 : 	return 1;

	mov	eax, 1

; 2734 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenRangedAttackModifier
_TEXT	ENDS
EXTRN	?roughAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughAttackModifier, COMDAT

; 2738 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2739 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2740 : 
; 2741 : 	const int iResult = pkUnit->roughAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?roughAttackModifier@CvUnit@@QBEHXZ	; CvUnit::roughAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2742 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2743 : 	return 1;

	mov	eax, 1

; 2744 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughAttackModifier
_TEXT	ENDS
EXTRN	?roughRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughRangedAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughRangedAttackModifier, COMDAT

; 2748 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2749 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2750 : 
; 2751 : 	const int iResult = pkUnit->roughRangedAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?roughRangedAttackModifier@CvUnit@@QBEHXZ ; CvUnit::roughRangedAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2752 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2753 : 	return 1;

	mov	eax, 1

; 2754 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughRangedAttackModifier
_TEXT	ENDS
EXTRN	?attackFortifiedModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::attackFortifiedModifier
; Function compile flags: /Odtp
;	COMDAT ?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lAttackFortifiedModifier, COMDAT

; 2758 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2759 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2760 : 
; 2761 : 	const int iResult = pkUnit->attackFortifiedModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?attackFortifiedModifier@CvUnit@@QBEHXZ	; CvUnit::attackFortifiedModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2762 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2763 : 	return 1;

	mov	eax, 1

; 2764 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lAttackFortifiedModifier
_TEXT	ENDS
EXTRN	?attackWoundedModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::attackWoundedModifier
; Function compile flags: /Odtp
;	COMDAT ?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lAttackWoundedModifier, COMDAT

; 2768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2769 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2770 : 
; 2771 : 	const int iResult = pkUnit->attackWoundedModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?attackWoundedModifier@CvUnit@@QBEHXZ	; CvUnit::attackWoundedModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2772 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2773 : 	return 1;

	mov	eax, 1

; 2774 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lAttackWoundedModifier
_TEXT	ENDS
EXTRN	?GetFlankAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetFlankAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFlankAttackModifier, COMDAT

; 2778 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2779 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2780 : 
; 2781 : 	const int iResult = pkUnit->GetFlankAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetFlankAttackModifier@CvUnit@@QBEHXZ	; CvUnit::GetFlankAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2782 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2783 : 	return 1;

	mov	eax, 1

; 2784 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFlankAttackModifier
_TEXT	ENDS
EXTRN	?openDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::openDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenDefenseModifier, COMDAT

; 2788 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2789 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2790 : 
; 2791 : 	const int iResult = pkUnit->openDefenseModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?openDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::openDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2792 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2793 : 	return 1;

	mov	eax, 1

; 2794 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenDefenseModifier
_TEXT	ENDS
EXTRN	?roughDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughDefenseModifier, COMDAT

; 2798 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2799 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2800 : 
; 2801 : 	const int iResult = pkUnit->roughDefenseModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?roughDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::roughDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2802 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2803 : 	return 1;

	mov	eax, 1

; 2804 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughDefenseModifier
_TEXT	ENDS
EXTRN	?terrainAttackModifier@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::terrainAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eTerrain$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lTerrainAttackModifier, COMDAT

; 2808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2809 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2810 : 	const TerrainTypes eTerrain = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTerrain$[ebp], eax

; 2811 : 
; 2812 : 	const int iResult = pkUnit->terrainAttackModifier(eTerrain);

	mov	edx, DWORD PTR _eTerrain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?terrainAttackModifier@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::terrainAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2813 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2814 : 	return 1;

	mov	eax, 1

; 2815 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lTerrainAttackModifier
_TEXT	ENDS
EXTRN	?terrainDefenseModifier@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::terrainDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eTerrain$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lTerrainDefenseModifier, COMDAT

; 2819 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2820 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2821 : 	const TerrainTypes eTerrain = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eTerrain$[ebp], eax

; 2822 : 
; 2823 : 	const int iResult = pkUnit->terrainDefenseModifier(eTerrain);

	mov	edx, DWORD PTR _eTerrain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?terrainDefenseModifier@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::terrainDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2824 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2825 : 	return 1;

	mov	eax, 1

; 2826 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lTerrainDefenseModifier
_TEXT	ENDS
EXTRN	?featureAttackModifier@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::featureAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eFeature$ = -4						; size = 4
_L$ = 8							; size = 4
?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFeatureAttackModifier, COMDAT

; 2830 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2831 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2832 : 	const FeatureTypes eFeature = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eFeature$[ebp], eax

; 2833 : 
; 2834 : 	const int iResult = pkUnit->featureAttackModifier(eFeature);

	mov	edx, DWORD PTR _eFeature$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?featureAttackModifier@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::featureAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2835 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2836 : 	return 1;

	mov	eax, 1

; 2837 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFeatureAttackModifier
_TEXT	ENDS
EXTRN	?featureDefenseModifier@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::featureDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eFeature$ = -4						; size = 4
_L$ = 8							; size = 4
?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFeatureDefenseModifier, COMDAT

; 2841 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2842 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2843 : 	const FeatureTypes eFeature = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eFeature$[ebp], eax

; 2844 : 
; 2845 : 	const int iResult = pkUnit->featureDefenseModifier(eFeature);

	mov	edx, DWORD PTR _eFeature$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?featureDefenseModifier@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::featureDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2846 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2847 : 	return 1;

	mov	eax, 1

; 2848 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFeatureDefenseModifier
_TEXT	ENDS
EXTRN	?unitClassAttackModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::unitClassAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eUnitClass$ = -4					; size = 4
_L$ = 8							; size = 4
?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitClassAttackModifier, COMDAT

; 2852 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2853 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2854 : 	const UnitClassTypes eUnitClass = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnitClass$[ebp], eax

; 2855 : 
; 2856 : 	const int iResult = pkUnit->unitClassAttackModifier(eUnitClass);

	mov	edx, DWORD PTR _eUnitClass$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?unitClassAttackModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::unitClassAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2857 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2858 : 	return 1;

	mov	eax, 1

; 2859 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitClassAttackModifier
_TEXT	ENDS
EXTRN	?unitClassDefenseModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::unitClassDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eUnitClass$ = -4					; size = 4
_L$ = 8							; size = 4
?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitClassDefenseModifier, COMDAT

; 2863 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2864 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2865 : 	const UnitClassTypes eUnitClass = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnitClass$[ebp], eax

; 2866 : 
; 2867 : 	const int iResult = pkUnit->unitClassDefenseModifier(eUnitClass);

	mov	edx, DWORD PTR _eUnitClass$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?unitClassDefenseModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::unitClassDefenseModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2868 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2869 : 	return 1;

	mov	eax, 1

; 2870 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitClassDefenseModifier
_TEXT	ENDS
EXTRN	?unitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z:PROC ; CvUnit::unitCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eUnitCombat$ = -8					; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitCombatModifier, COMDAT

; 2874 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2875 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2876 : 	const UnitCombatTypes eUnitCombat = (UnitCombatTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnitCombat$[ebp], eax

; 2877 : 
; 2878 : 	const int iResult = pkUnit->unitCombatModifier(eUnitCombat);

	mov	edx, DWORD PTR _eUnitCombat$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?unitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z ; CvUnit::unitCombatModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2879 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2880 : 	return 1;

	mov	eax, 1

; 2881 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitCombatModifier
_TEXT	ENDS
EXTRN	?domainModifier@CvUnit@@QBEHW4DomainTypes@@@Z:PROC ; CvUnit::domainModifier
; Function compile flags: /Odtp
;	COMDAT ?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eDomain$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDomainModifier, COMDAT

; 2885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 2886 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2887 : 	const DomainTypes eDomain = (DomainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eDomain$[ebp], eax

; 2888 : 
; 2889 : 	const int iResult = pkUnit->domainModifier(eDomain);

	mov	edx, DWORD PTR _eDomain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?domainModifier@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::domainModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 2890 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 2891 : 	return 1;

	mov	eax, 1

; 2892 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDomainModifier
_TEXT	ENDS
EXTRN	?GetStrategicResourceCombatPenalty@CvUnit@@QBEHXZ:PROC ; CvUnit::GetStrategicResourceCombatPenalty
; Function compile flags: /Odtp
;	COMDAT ?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetStrategicResourceCombatPenalty, COMDAT

; 2895 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2896 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2897 : 
; 2898 : 	const int iResult = pkUnit->GetStrategicResourceCombatPenalty();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetStrategicResourceCombatPenalty@CvUnit@@QBEHXZ ; CvUnit::GetStrategicResourceCombatPenalty
	mov	DWORD PTR _iResult$[ebp], eax

; 2899 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2900 : 	return 1;

	mov	eax, 1

; 2901 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetStrategicResourceCombatPenalty
_TEXT	ENDS
EXTRN	?GetUnhappinessCombatPenalty@CvUnit@@QBEHXZ:PROC ; CvUnit::GetUnhappinessCombatPenalty
; Function compile flags: /Odtp
;	COMDAT ?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnhappinessCombatPenalty, COMDAT

; 2904 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2905 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2906 : 
; 2907 : 	const int iResult = pkUnit->GetUnhappinessCombatPenalty();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetUnhappinessCombatPenalty@CvUnit@@QBEHXZ ; CvUnit::GetUnhappinessCombatPenalty
	mov	DWORD PTR _iResult$[ebp], eax

; 2908 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2909 : 	return 1;

	mov	eax, 1

; 2910 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnhappinessCombatPenalty
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
EXTRN	?GetAirSweepCombatModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetAirSweepCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lAirSweepCombatMod, COMDAT

; 2914 : {

	push	ebp
	mov	ebp, esp

; 2915 : 	return BasicLuaMethod(L, &CvUnit::GetAirSweepCombatModifier);

	push	OFFSET ?GetAirSweepCombatModifier@CvUnit@@QBEHXZ ; CvUnit::GetAirSweepCombatModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2916 : }

	pop	ebp
	ret	0
?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lAirSweepCombatMod
_TEXT	ENDS
EXTRN	?GetCapitalDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetCapitalDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCapitalDefenseModifier, COMDAT

; 2920 : {

	push	ebp
	mov	ebp, esp

; 2921 : 	return BasicLuaMethod(L, &CvUnit::GetCapitalDefenseModifier);

	push	OFFSET ?GetCapitalDefenseModifier@CvUnit@@QBEHXZ ; CvUnit::GetCapitalDefenseModifier
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2922 : }

	pop	ebp
	ret	0
?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCapitalDefenseModifier
_TEXT	ENDS
EXTRN	?GetCapitalDefenseFalloff@CvUnit@@QBEHXZ:PROC	; CvUnit::GetCapitalDefenseFalloff
; Function compile flags: /Odtp
;	COMDAT ?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCapitalDefenseFalloff, COMDAT

; 2926 : {

	push	ebp
	mov	ebp, esp

; 2927 : 	return BasicLuaMethod(L, &CvUnit::GetCapitalDefenseFalloff);

	push	OFFSET ?GetCapitalDefenseFalloff@CvUnit@@QBEHXZ ; CvUnit::GetCapitalDefenseFalloff
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2928 : }

	pop	ebp
	ret	0
?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCapitalDefenseFalloff
_TEXT	ENDS
EXTRN	?specialCargo@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ:PROC ; CvUnit::specialCargo
; Function compile flags: /Odtp
;	COMDAT ?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSpecialCargo, COMDAT

; 2932 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2933 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2934 : 
; 2935 : 	const SpecialUnitTypes eResult = pkUnit->specialCargo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?specialCargo@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ ; CvUnit::specialCargo
	mov	DWORD PTR _eResult$[ebp], eax

; 2936 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2937 : 	return 1;

	mov	eax, 1

; 2938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSpecialCargo
_TEXT	ENDS
EXTRN	?domainCargo@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::domainCargo
; Function compile flags: /Odtp
;	COMDAT ?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDomainCargo, COMDAT

; 2942 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2943 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2944 : 
; 2945 : 	const DomainTypes eResult = pkUnit->domainCargo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?domainCargo@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::domainCargo
	mov	DWORD PTR _eResult$[ebp], eax

; 2946 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2947 : 	return 1;

	mov	eax, 1

; 2948 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDomainCargo
_TEXT	ENDS
EXTRN	?cargoSpace@CvUnit@@QBEHXZ:PROC			; CvUnit::cargoSpace
; Function compile flags: /Odtp
;	COMDAT ?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCargoSpace, COMDAT

; 2952 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2953 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2954 : 
; 2955 : 	const int iResult = pkUnit->cargoSpace();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?cargoSpace@CvUnit@@QBEHXZ		; CvUnit::cargoSpace
	mov	DWORD PTR _iResult$[ebp], eax

; 2956 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2957 : 	return 1;

	mov	eax, 1

; 2958 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCargoSpace
_TEXT	ENDS
EXTRN	?changeCargoSpace@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeCargoSpace
; Function compile flags: /Odtp
;	COMDAT ?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iChange$ = -4						; size = 4
_L$ = 8							; size = 4
?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeCargoSpace, COMDAT

; 2962 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2963 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2964 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iChange$[ebp], eax

; 2965 : 
; 2966 : 	pkUnit->changeCargoSpace(iChange);

	mov	edx, DWORD PTR _iChange$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?changeCargoSpace@CvUnit@@QAEXH@Z	; CvUnit::changeCargoSpace

; 2967 : 	return 0;

	xor	eax, eax

; 2968 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeCargoSpace
_TEXT	ENDS
EXTRN	?isFull@CvUnit@@QBE_NXZ:PROC			; CvUnit::isFull
; Function compile flags: /Odtp
;	COMDAT ?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsFull, COMDAT

; 2972 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2973 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2974 : 	const bool bResult = pkUnit->isFull();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isFull@CvUnit@@QBE_NXZ			; CvUnit::isFull
	mov	BYTE PTR _bResult$[ebp], al

; 2975 : 
; 2976 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2977 : 	return 1;

	mov	eax, 1

; 2978 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsFull
_TEXT	ENDS
EXTRN	?cargoSpaceAvailable@CvUnit@@QBEHW4SpecialUnitTypes@@W4DomainTypes@@@Z:PROC ; CvUnit::cargoSpaceAvailable
; Function compile flags: /Odtp
;	COMDAT ?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCargoSpaceAvailable, COMDAT

; 2982 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2983 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2984 : 
; 2985 : 	const int iResult = pkUnit->cargoSpaceAvailable();

	push	-1
	push	-1
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?cargoSpaceAvailable@CvUnit@@QBEHW4SpecialUnitTypes@@W4DomainTypes@@@Z ; CvUnit::cargoSpaceAvailable
	mov	DWORD PTR _iResult$[ebp], eax

; 2986 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 2987 : 	return 1;

	mov	eax, 1

; 2988 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCargoSpaceAvailable
_TEXT	ENDS
EXTRN	?hasCargo@CvUnit@@QBE_NXZ:PROC			; CvUnit::hasCargo
; Function compile flags: /Odtp
;	COMDAT ?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasCargo, COMDAT

; 2992 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2993 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 2994 : 	const bool bResult = pkUnit->hasCargo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?hasCargo@CvUnit@@QBE_NXZ		; CvUnit::hasCargo
	mov	BYTE PTR _bResult$[ebp], al

; 2995 : 
; 2996 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 2997 : 	return 1;

	mov	eax, 1

; 2998 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasCargo
_TEXT	ENDS
EXTRN	?canCargoAllMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::canCargoAllMove
; Function compile flags: /Odtp
;	COMDAT ?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanCargoAllMove, COMDAT

; 3002 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3003 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3004 : 	const bool bResult = pkUnit->canCargoAllMove();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canCargoAllMove@CvUnit@@QBE_NXZ	; CvUnit::canCargoAllMove
	mov	BYTE PTR _bResult$[ebp], al

; 3005 : 
; 3006 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3007 : 	return 1;

	mov	eax, 1

; 3008 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanCargoAllMove
_TEXT	ENDS
EXTRN	?getUnitAICargo@CvUnit@@QBEHW4UnitAITypes@@@Z:PROC ; CvUnit::getUnitAICargo
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_eUnitAI$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitAICargo, COMDAT

; 3012 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3013 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3014 : 	const UnitAITypes eUnitAI = (UnitAITypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eUnitAI$[ebp], eax

; 3015 : 
; 3016 : 	const int iResult = pkUnit->getUnitAICargo(eUnitAI);

	mov	edx, DWORD PTR _eUnitAI$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitAICargo@CvUnit@@QBEHW4UnitAITypes@@@Z ; CvUnit::getUnitAICargo
	mov	DWORD PTR _iResult$[ebp], eax

; 3017 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3018 : 	return 1;

	mov	eax, 1

; 3019 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitAICargo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetID, COMDAT

; 3023 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3024 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3025 : 
; 3026 : 	const int iResult = pkUnit->GetID();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _iResult$[ebp], edx

; 3027 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3028 : 	return 1;

	mov	eax, 1

; 3029 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetID
_TEXT	ENDS
EXTRN	?getHotKeyNumber@CvUnit@@QAEHXZ:PROC		; CvUnit::getHotKeyNumber
; Function compile flags: /Odtp
;	COMDAT ?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetHotKeyNumber, COMDAT

; 3033 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3034 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3035 : 
; 3036 : 	const int iResult = pkUnit->getHotKeyNumber();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getHotKeyNumber@CvUnit@@QAEHXZ		; CvUnit::getHotKeyNumber
	mov	DWORD PTR _iResult$[ebp], eax

; 3037 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3038 : 	return 1;

	mov	eax, 1

; 3039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetHotKeyNumber
_TEXT	ENDS
EXTRN	?setHotKeyNumber@CvUnit@@QAEXH@Z:PROC		; CvUnit::setHotKeyNumber
; Function compile flags: /Odtp
;	COMDAT ?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iNewValue$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetHotKeyNumber, COMDAT

; 3043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3044 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3045 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewValue$[ebp], eax

; 3046 : 
; 3047 : 	pkUnit->setHotKeyNumber(iNewValue);

	mov	edx, DWORD PTR _iNewValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setHotKeyNumber@CvUnit@@QAEXH@Z	; CvUnit::setHotKeyNumber

; 3048 : 	return 0;

	xor	eax, eax

; 3049 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetHotKeyNumber
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetX, COMDAT

; 3053 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3054 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3055 : 
; 3056 : 	const int iResult = pkUnit->getX();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _iResult$[ebp], edx

; 3057 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3058 : 	return 1;

	mov	eax, 1

; 3059 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetY, COMDAT

; 3063 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3064 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3065 : 
; 3066 : 	const int iResult = pkUnit->getY();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR _iResult$[ebp], edx

; 3067 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3068 : 	return 1;

	mov	eax, 1

; 3069 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetY
_TEXT	ENDS
EXTRN	?setXY@CvUnit@@QAEXHH_N0000@Z:PROC		; CvUnit::setXY
; Function compile flags: /Odtp
;	COMDAT ?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bUpdate$ = -12						; size = 1
_bShow$ = -11						; size = 1
_bGroup$ = -10						; size = 1
_bCheckPlotVisible$ = -9				; size = 1
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetXY, COMDAT

; 3073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 3074 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3075 : 	const int x = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 3076 : 	const int y = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 3077 : 	const bool bGroup = luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bGroup$[ebp], cl

; 3078 : 	const bool bUpdate = luaL_optint(L, 5, 1);

	push	1
	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bUpdate$[ebp], al

; 3079 : 	const bool bShow = luaL_optint(L, 6, 0);

	push	0
	push	6
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bShow$[ebp], dl

; 3080 : 	const bool bCheckPlotVisible = luaL_optint(L, 7, 0);

	push	0
	push	7
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bCheckPlotVisible$[ebp], cl

; 3081 : 
; 3082 : 	pkUnit->setXY(x, y, bGroup, bUpdate, bShow, bCheckPlotVisible);

	push	0
	movzx	edx, BYTE PTR _bCheckPlotVisible$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bShow$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bUpdate$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bGroup$[ebp]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setXY@CvUnit@@QAEXHH_N0000@Z		; CvUnit::setXY

; 3083 : 	return 0;

	xor	eax, eax

; 3084 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetXY
_TEXT	ENDS
EXTRN	?at@CvUnit@@QBE_NHH@Z:PROC			; CvUnit::at
; Function compile flags: /Odtp
;	COMDAT ?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_L$ = 8							; size = 4
?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lAt, COMDAT

; 3088 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 3089 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3090 : 	const int x = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 3091 : 	const int y = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 3092 : 
; 3093 : 	const bool bResult = pkUnit->at(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?at@CvUnit@@QBE_NHH@Z			; CvUnit::at
	mov	BYTE PTR _bResult$[ebp], al

; 3094 : 
; 3095 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 3096 : 	return 1;

	mov	eax, 1

; 3097 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lAt
_TEXT	ENDS
EXTRN	?atPlot@CvUnit@@QBE_NABVCvPlot@@@Z:PROC		; CvUnit::atPlot
; Function compile flags: /Odtp
;	COMDAT ?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lAtPlot, COMDAT

; 3101 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3102 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3103 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 3104 : 
; 3105 : 	bool bResult = false;

	mov	BYTE PTR _bResult$[ebp], 0

; 3106 : 	if(pkPlot)

	cmp	DWORD PTR _pkPlot$[ebp], 0
	je	SHORT $LN1@lAtPlot

; 3107 : 	{
; 3108 : 		bResult = pkUnit->atPlot(*pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?atPlot@CvUnit@@QBE_NABVCvPlot@@@Z	; CvUnit::atPlot
	mov	BYTE PTR _bResult$[ebp], al
$LN1@lAtPlot:

; 3109 : 	}
; 3110 : 
; 3111 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 3112 : 	return 1;

	mov	eax, 1

; 3113 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lAtPlot
_TEXT	ENDS
EXTRN	_lua_pushnil:PROC
; Function compile flags: /Odtp
;	COMDAT ?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv128 = -28						; size = 4
$T225441 = -24						; size = 4
$T225437 = -20						; size = 4
$T225430 = -16						; size = 4
$T225426 = -12						; size = 4
$T225417 = -8						; size = 4
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetPlot, COMDAT

; 3117 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3118 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3119 : 	if(!GC.getMap().isPlot(pkUnit->getX(), pkUnit->getY()))

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T225417[ebp], edx
	mov	eax, DWORD PTR _pkUnit$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR $T225426[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T225430[ebp], edx
	cmp	DWORD PTR $T225426[ebp], 0
	jl	SHORT $LN16@lGetPlot
	mov	eax, DWORD PTR $T225430[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T225437[ebp], ecx
	mov	edx, DWORD PTR $T225426[ebp]
	cmp	edx, DWORD PTR $T225437[ebp]
	jge	SHORT $LN16@lGetPlot
	cmp	DWORD PTR $T225417[ebp], 0
	jl	SHORT $LN16@lGetPlot
	mov	eax, DWORD PTR $T225430[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T225441[ebp], ecx
	mov	edx, DWORD PTR $T225417[ebp]
	cmp	edx, DWORD PTR $T225441[ebp]
	jge	SHORT $LN16@lGetPlot
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN14@lGetPlot
$LN16@lGetPlot:
	mov	DWORD PTR tv128[ebp], 0
$LN14@lGetPlot:
	cmp	DWORD PTR tv128[ebp], 0
	jne	SHORT $LN1@lGetPlot

; 3120 : 	{
; 3121 : 		CvAssertMsg(false, "pUnit plot is not valid. Pushing nil!")
; 3122 : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushnil
	add	esp, 4

; 3123 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN2@lGetPlot
$LN1@lGetPlot:

; 3124 : 	}
; 3125 : 
; 3126 : 	CvLuaPlot::Push(L, pkUnit->plot());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8

; 3127 : 	return 1;

	mov	eax, 1
$LN2@lGetPlot:

; 3128 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetPlot
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
EXTRN	?area@CvUnit@@QBEPAVCvArea@@XZ:PROC		; CvUnit::area
; Function compile flags: /Odtp
;	COMDAT ?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetArea, COMDAT

; 3132 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 3133 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3134 : 
; 3135 : 	CvLuaArea::Push(L, pkUnit->area());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?area@CvUnit@@QBEPAVCvArea@@XZ		; CvUnit::area
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
	add	esp, 8

; 3136 : 	return 1;

	mov	eax, 1

; 3137 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetArea
_TEXT	ENDS
EXTRN	?getReconPlot@CvUnit@@QBEPAVCvPlot@@XZ:PROC	; CvUnit::getReconPlot
; Function compile flags: /Odtp
;	COMDAT ?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetReconPlot, COMDAT

; 3141 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3142 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3143 : 
; 3144 : 	CvPlot* pkPlot = pkUnit->getReconPlot();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getReconPlot@CvUnit@@QBEPAVCvPlot@@XZ	; CvUnit::getReconPlot
	mov	DWORD PTR _pkPlot$[ebp], eax

; 3145 : 	CvLuaPlot::Push(L, pkPlot);

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8

; 3146 : 
; 3147 : 	return 1;

	mov	eax, 1

; 3148 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetReconPlot
_TEXT	ENDS
EXTRN	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z:PROC	; CvUnit::setReconPlot
; Function compile flags: /Odtp
;	COMDAT ?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetReconPlot, COMDAT

; 3152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3153 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3154 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 3155 : 
; 3156 : 	pkUnit->setReconPlot(pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z	; CvUnit::setReconPlot

; 3157 : 	return 0;

	xor	eax, eax

; 3158 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetReconPlot
_TEXT	ENDS
EXTRN	?getGameTurnCreated@CvUnit@@QBEHXZ:PROC		; CvUnit::getGameTurnCreated
; Function compile flags: /Odtp
;	COMDAT ?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGameTurnCreated, COMDAT

; 3162 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3163 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3164 : 
; 3165 : 	const int iResult = pkUnit->getGameTurnCreated();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getGameTurnCreated@CvUnit@@QBEHXZ	; CvUnit::getGameTurnCreated
	mov	DWORD PTR _iResult$[ebp], eax

; 3166 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3167 : 	return 1;

	mov	eax, 1

; 3168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGameTurnCreated
_TEXT	ENDS
EXTRN	?getLastMoveTurn@CvUnit@@QBEHXZ:PROC		; CvUnit::getLastMoveTurn
; Function compile flags: /Odtp
;	COMDAT ?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetLastMoveTurn, COMDAT

; 3172 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3173 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3174 : 
; 3175 : 	const int iResult = pkUnit->getLastMoveTurn();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getLastMoveTurn@CvUnit@@QBEHXZ		; CvUnit::getLastMoveTurn
	mov	DWORD PTR _iResult$[ebp], eax

; 3176 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3177 : 	return 1;

	mov	eax, 1

; 3178 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetLastMoveTurn
_TEXT	ENDS
EXTRN	?getDamage@CvUnit@@QBEHXZ:PROC			; CvUnit::getDamage
; Function compile flags: /Odtp
;	COMDAT ?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetDamage, COMDAT

; 3182 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3183 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3184 : 
; 3185 : 	const int iResult = pkUnit->getDamage();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage
	mov	DWORD PTR _iResult$[ebp], eax

; 3186 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3187 : 	return 1;

	mov	eax, 1

; 3188 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetDamage
_TEXT	ENDS
EXTRN	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::setDamage
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv78 = -20						; size = 4
_pkUnit$ = -16						; size = 4
_ePlayer$ = -12						; size = 4
_bNotifyEntity$ = -5					; size = 1
_iNewValue$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetDamage, COMDAT

; 3192 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 3193 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3194 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewValue$[ebp], eax

; 3195 : 	const PlayerTypes ePlayer = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@lSetDamage
	mov	DWORD PTR tv78[ebp], -1
	jmp	SHORT $LN4@lSetDamage
$LN3@lSetDamage:
	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR tv78[ebp], eax
$LN4@lSetDamage:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _ePlayer$[ebp], ecx

; 3196 : 	const bool bNotifyEntity = luaL_optint(L, 4, 1);

	push	1
	push	4
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNotifyEntity$[ebp], al

; 3197 : 
; 3198 : 	pkUnit->setDamage(iNewValue, ePlayer, bNotifyEntity);

	push	0
	movzx	ecx, BYTE PTR _bNotifyEntity$[ebp]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::setDamage

; 3199 : 	return 0;

	xor	eax, eax

; 3200 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetDamage
_TEXT	ENDS
PUBLIC	__real@00000000
EXTRN	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::changeDamage
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv78 = -16						; size = 4
_pkUnit$ = -12						; size = 4
_ePlayer$ = -8						; size = 4
_iChange$ = -4						; size = 4
_L$ = 8							; size = 4
?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeDamage, COMDAT

; 3204 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 3205 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3206 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iChange$[ebp], eax

; 3207 : 	const PlayerTypes ePlayer = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@lChangeDam
	mov	DWORD PTR tv78[ebp], -1
	jmp	SHORT $LN4@lChangeDam
$LN3@lChangeDam:
	push	3
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR tv78[ebp], eax
$LN4@lChangeDam:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _ePlayer$[ebp], ecx

; 3208 : 
; 3209 : 	pkUnit->changeDamage(iChange, ePlayer);

	push	0
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _ePlayer$[ebp]
	push	edx
	mov	eax, DWORD PTR _iChange$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage

; 3210 : 	return 0;

	xor	eax, eax

; 3211 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeDamage
_TEXT	ENDS
EXTRN	?getMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::getMoves
; Function compile flags: /Odtp
;	COMDAT ?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetMoves, COMDAT

; 3215 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3216 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3217 : 
; 3218 : 	const int iResult = pkUnit->getMoves();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getMoves@CvUnit@@QBEHXZ		; CvUnit::getMoves
	mov	DWORD PTR _iResult$[ebp], eax

; 3219 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3220 : 	return 1;

	mov	eax, 1

; 3221 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetMoves
_TEXT	ENDS
EXTRN	?setMoves@CvUnit@@QAEXH@Z:PROC			; CvUnit::setMoves
; Function compile flags: /Odtp
;	COMDAT ?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iNewValue$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetMoves, COMDAT

; 3225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3226 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3227 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewValue$[ebp], eax

; 3228 : 
; 3229 : 	pkUnit->setMoves(iNewValue);

	mov	edx, DWORD PTR _iNewValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setMoves@CvUnit@@QAEXH@Z		; CvUnit::setMoves

; 3230 : 	return 0;

	xor	eax, eax

; 3231 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetMoves
_TEXT	ENDS
EXTRN	?changeMoves@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeMoves
; Function compile flags: /Odtp
;	COMDAT ?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iChange$ = -4						; size = 4
_L$ = 8							; size = 4
?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeMoves, COMDAT

; 3235 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3236 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3237 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iChange$[ebp], eax

; 3238 : 
; 3239 : 	pkUnit->changeMoves(iChange);

	mov	edx, DWORD PTR _iChange$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves

; 3240 : 	return 0;

	xor	eax, eax

; 3241 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeMoves
_TEXT	ENDS
EXTRN	?finishMoves@CvUnit@@QAEXXZ:PROC		; CvUnit::finishMoves
; Function compile flags: /Odtp
;	COMDAT ?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFinishMoves, COMDAT

; 3245 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 3246 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3247 : 
; 3248 : 	pkUnit->finishMoves();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves

; 3249 : 	return 0;

	xor	eax, eax

; 3250 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFinishMoves
_TEXT	ENDS
EXTRN	?IsImmobile@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsImmobile
; Function compile flags: /Odtp
;	COMDAT ?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsImmobile, COMDAT

; 3254 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3255 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3256 : 
; 3257 : 	const bool bResult = pkUnit->IsImmobile();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsImmobile@CvUnit@@QBE_NXZ		; CvUnit::IsImmobile
	mov	BYTE PTR _bResult$[ebp], al

; 3258 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3259 : 	return 1;

	mov	eax, 1

; 3260 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsImmobile
_TEXT	ENDS
EXTRN	?getExperience@CvUnit@@QBEHXZ:PROC		; CvUnit::getExperience
; Function compile flags: /Odtp
;	COMDAT ?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExperience, COMDAT

; 3264 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3265 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3266 : 
; 3267 : 	const int iResult = pkUnit->getExperience();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExperience@CvUnit@@QBEHXZ		; CvUnit::getExperience
	mov	DWORD PTR _iResult$[ebp], eax

; 3268 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3269 : 	return 1;

	mov	eax, 1

; 3270 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExperience
_TEXT	ENDS
EXTRN	?setExperience@CvUnit@@QAEXHH@Z:PROC		; CvUnit::setExperience
; Function compile flags: /Odtp
;	COMDAT ?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iMax$ = -8						; size = 4
_iNewValue$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetExperience, COMDAT

; 3274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3275 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3276 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewValue$[ebp], eax

; 3277 : 	const int iMax = luaL_optint(L, 3, -1);

	push	-1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMax$[ebp], eax

; 3278 : 
; 3279 : 	pkUnit->setExperience(iNewValue, iMax);

	mov	eax, DWORD PTR _iMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNewValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setExperience@CvUnit@@QAEXHH@Z		; CvUnit::setExperience

; 3280 : 	return 0;

	xor	eax, eax

; 3281 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetExperience
_TEXT	ENDS
EXTRN	?changeExperience@CvUnit@@QAEXHH_N00@Z:PROC	; CvUnit::changeExperience
; Function compile flags: /Odtp
;	COMDAT ?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -20						; size = 4
_bUpdateGlobal$ = -14					; size = 1
_bInBorders$ = -13					; size = 1
_iMax$ = -12						; size = 4
_iChange$ = -8						; size = 4
_bFromCombat$ = -1					; size = 1
_L$ = 8							; size = 4
?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeExperience, COMDAT

; 3285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 3286 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3287 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iChange$[ebp], eax

; 3288 : 	const int iMax = luaL_optint(L, 3, -1);

	push	-1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMax$[ebp], eax

; 3289 : 	const bool bFromCombat = luaL_optint(L, 4, 0);

	push	0
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	cl
	mov	BYTE PTR _bFromCombat$[ebp], cl

; 3290 : 	const bool bInBorders = luaL_optint(L, 5, 0);

	push	0
	push	5
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bInBorders$[ebp], al

; 3291 : 	const bool bUpdateGlobal = luaL_optint(L, 6, 0);

	push	0
	push	6
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bUpdateGlobal$[ebp], dl

; 3292 : 
; 3293 : 	pkUnit->changeExperience(iChange, iMax, bFromCombat, bInBorders, bUpdateGlobal);

	movzx	eax, BYTE PTR _bUpdateGlobal$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bInBorders$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bFromCombat$[ebp]
	push	edx
	mov	eax, DWORD PTR _iMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iChange$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience

; 3294 : 	return 0;

	xor	eax, eax

; 3295 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeExperience
_TEXT	ENDS
EXTRN	?getLevel@CvUnit@@QBEHXZ:PROC			; CvUnit::getLevel
; Function compile flags: /Odtp
;	COMDAT ?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetLevel, COMDAT

; 3299 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3300 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3301 : 
; 3302 : 	const int iResult = pkUnit->getLevel();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getLevel@CvUnit@@QBEHXZ		; CvUnit::getLevel
	mov	DWORD PTR _iResult$[ebp], eax

; 3303 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3304 : 	return 1;

	mov	eax, 1

; 3305 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetLevel
_TEXT	ENDS
EXTRN	?setLevel@CvUnit@@QAEXH@Z:PROC			; CvUnit::setLevel
; Function compile flags: /Odtp
;	COMDAT ?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iNewLevel$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetLevel, COMDAT

; 3309 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3310 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3311 : 	const int iNewLevel = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewLevel$[ebp], eax

; 3312 : 
; 3313 : 	pkUnit->setLevel(iNewLevel);

	mov	edx, DWORD PTR _iNewLevel$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setLevel@CvUnit@@QAEXH@Z		; CvUnit::setLevel

; 3314 : 	return 0;

	xor	eax, eax

; 3315 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetLevel
_TEXT	ENDS
EXTRN	?changeLevel@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeLevel
; Function compile flags: /Odtp
;	COMDAT ?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iChange$ = -4						; size = 4
_L$ = 8							; size = 4
?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeLevel, COMDAT

; 3319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3320 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3321 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iChange$[ebp], eax

; 3322 : 
; 3323 : 	pkUnit->changeLevel(iChange);

	mov	edx, DWORD PTR _iChange$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?changeLevel@CvUnit@@QAEXH@Z		; CvUnit::changeLevel

; 3324 : 	return 0;

	xor	eax, eax

; 3325 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeLevel
_TEXT	ENDS
EXTRN	?getFacingDirection@CvUnit@@QBE?AW4DirectionTypes@@_N@Z:PROC ; CvUnit::getFacingDirection
; Function compile flags: /Odtp
;	COMDAT ?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bCheckLineOfSightProperty$ = -5			; size = 1
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFacingDirection, COMDAT

; 3329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3330 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3331 : 	const bool bCheckLineOfSightProperty = luaL_optint(L, 2, 0);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bCheckLineOfSightProperty$[ebp], dl

; 3332 : 
; 3333 : 	const int iResult = pkUnit->getFacingDirection(bCheckLineOfSightProperty);

	movzx	eax, BYTE PTR _bCheckLineOfSightProperty$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getFacingDirection@CvUnit@@QBE?AW4DirectionTypes@@_N@Z ; CvUnit::getFacingDirection
	mov	DWORD PTR _iResult$[ebp], eax

; 3334 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3335 : 	return 1;

	mov	eax, 1

; 3336 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFacingDirection
_TEXT	ENDS
EXTRN	?rotateFacingDirectionClockwise@CvUnit@@QAEXXZ:PROC ; CvUnit::rotateFacingDirectionClockwise
; Function compile flags: /Odtp
;	COMDAT ?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRotateFacingDirectionClockwise, COMDAT

; 3340 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 3341 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3342 : 
; 3343 : 	pkUnit->rotateFacingDirectionClockwise();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?rotateFacingDirectionClockwise@CvUnit@@QAEXXZ ; CvUnit::rotateFacingDirectionClockwise

; 3344 : 	return 0;

	xor	eax, eax

; 3345 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRotateFacingDirectionClockwise
_TEXT	ENDS
EXTRN	?rotateFacingDirectionCounterClockwise@CvUnit@@QAEXXZ:PROC ; CvUnit::rotateFacingDirectionCounterClockwise
; Function compile flags: /Odtp
;	COMDAT ?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRotateFacingDirectionCounterClockwise, COMDAT

; 3349 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 3350 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3351 : 
; 3352 : 	pkUnit->rotateFacingDirectionCounterClockwise();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?rotateFacingDirectionCounterClockwise@CvUnit@@QAEXXZ ; CvUnit::rotateFacingDirectionCounterClockwise

; 3353 : 	return 0;

	xor	eax, eax

; 3354 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
_TEXT	ENDS
EXTRN	?getCargo@CvUnit@@QBEHXZ:PROC			; CvUnit::getCargo
; Function compile flags: /Odtp
;	COMDAT ?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetCargo, COMDAT

; 3358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3359 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3360 : 
; 3361 : 	const int iResult = pkUnit->getCargo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCargo@CvUnit@@QBEHXZ		; CvUnit::getCargo
	mov	DWORD PTR _iResult$[ebp], eax

; 3362 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3363 : 	return 1;

	mov	eax, 1

; 3364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetCargo
_TEXT	ENDS
EXTRN	?getFortifyTurns@CvUnit@@QBEHXZ:PROC		; CvUnit::getFortifyTurns
; Function compile flags: /Odtp
;	COMDAT ?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetFortifyTurns, COMDAT

; 3368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3369 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3370 : 
; 3371 : 	const int iResult = pkUnit->getFortifyTurns();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getFortifyTurns@CvUnit@@QBEHXZ		; CvUnit::getFortifyTurns
	mov	DWORD PTR _iResult$[ebp], eax

; 3372 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3373 : 	return 1;

	mov	eax, 1

; 3374 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetFortifyTurns
_TEXT	ENDS
EXTRN	?getBlitzCount@CvUnit@@QBEHXZ:PROC		; CvUnit::getBlitzCount
; Function compile flags: /Odtp
;	COMDAT ?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBlitzCount, COMDAT

; 3378 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3379 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3380 : 
; 3381 : 	const int iResult = pkUnit->getBlitzCount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getBlitzCount@CvUnit@@QBEHXZ		; CvUnit::getBlitzCount
	mov	DWORD PTR _iResult$[ebp], eax

; 3382 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3383 : 	return 1;

	mov	eax, 1

; 3384 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBlitzCount
_TEXT	ENDS
EXTRN	?isBlitz@CvUnit@@QBE_NXZ:PROC			; CvUnit::isBlitz
; Function compile flags: /Odtp
;	COMDAT ?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsBlitz, COMDAT

; 3388 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3389 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3390 : 	const bool bResult = pkUnit->isBlitz();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isBlitz@CvUnit@@QBE_NXZ		; CvUnit::isBlitz
	mov	BYTE PTR _bResult$[ebp], al

; 3391 : 
; 3392 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3393 : 	return 1;

	mov	eax, 1

; 3394 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsBlitz
_TEXT	ENDS
EXTRN	?getAmphibCount@CvUnit@@QBEHXZ:PROC		; CvUnit::getAmphibCount
; Function compile flags: /Odtp
;	COMDAT ?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetAmphibCount, COMDAT

; 3398 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3399 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3400 : 
; 3401 : 	const int iResult = pkUnit->getAmphibCount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getAmphibCount@CvUnit@@QBEHXZ		; CvUnit::getAmphibCount
	mov	DWORD PTR _iResult$[ebp], eax

; 3402 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3403 : 	return 1;

	mov	eax, 1

; 3404 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetAmphibCount
_TEXT	ENDS
EXTRN	?isAmphib@CvUnit@@QBE_NXZ:PROC			; CvUnit::isAmphib
; Function compile flags: /Odtp
;	COMDAT ?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsAmphib, COMDAT

; 3408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3409 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3410 : 	const bool bResult = pkUnit->isAmphib();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isAmphib@CvUnit@@QBE_NXZ		; CvUnit::isAmphib
	mov	BYTE PTR _bResult$[ebp], al

; 3411 : 
; 3412 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3413 : 	return 1;

	mov	eax, 1

; 3414 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsAmphib
_TEXT	ENDS
EXTRN	?getRiverCrossingNoPenaltyCount@CvUnit@@QBEHXZ:PROC ; CvUnit::getRiverCrossingNoPenaltyCount
; Function compile flags: /Odtp
;	COMDAT ?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount, COMDAT

; 3418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3419 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3420 : 
; 3421 : 	const int iResult = pkUnit->getRiverCrossingNoPenaltyCount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getRiverCrossingNoPenaltyCount@CvUnit@@QBEHXZ ; CvUnit::getRiverCrossingNoPenaltyCount
	mov	DWORD PTR _iResult$[ebp], eax

; 3422 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3423 : 	return 1;

	mov	eax, 1

; 3424 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
_TEXT	ENDS
EXTRN	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRiverCrossingNoPenalty
; Function compile flags: /Odtp
;	COMDAT ?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRiverCrossingNoPenalty, COMDAT

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3429 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3430 : 	const bool bResult = pkUnit->isRiverCrossingNoPenalty();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ ; CvUnit::isRiverCrossingNoPenalty
	mov	BYTE PTR _bResult$[ebp], al

; 3431 : 
; 3432 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3433 : 	return 1;

	mov	eax, 1

; 3434 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRiverCrossingNoPenalty
_TEXT	ENDS
EXTRN	?isEnemyRoute@CvUnit@@QBE_NXZ:PROC		; CvUnit::isEnemyRoute
; Function compile flags: /Odtp
;	COMDAT ?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEnemyRoute, COMDAT

; 3438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3439 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3440 : 	const bool bResult = pkUnit->isEnemyRoute();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isEnemyRoute@CvUnit@@QBE_NXZ		; CvUnit::isEnemyRoute
	mov	BYTE PTR _bResult$[ebp], al

; 3441 : 
; 3442 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3443 : 	return 1;

	mov	eax, 1

; 3444 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEnemyRoute
_TEXT	ENDS
EXTRN	?isAlwaysHeal@CvUnit@@QBE_NXZ:PROC		; CvUnit::isAlwaysHeal
; Function compile flags: /Odtp
;	COMDAT ?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAlwaysHeal, COMDAT

; 3448 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3449 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3450 : 	const bool bResult = pkUnit->isAlwaysHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isAlwaysHeal@CvUnit@@QBE_NXZ		; CvUnit::isAlwaysHeal
	mov	BYTE PTR _bResult$[ebp], al

; 3451 : 
; 3452 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3453 : 	return 1;

	mov	eax, 1

; 3454 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAlwaysHeal
_TEXT	ENDS
EXTRN	?isHealOutsideFriendly@CvUnit@@QBE_NXZ:PROC	; CvUnit::isHealOutsideFriendly
; Function compile flags: /Odtp
;	COMDAT ?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsHealOutsideFriendly, COMDAT

; 3458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3459 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3460 : 	const bool bResult = pkUnit->isHealOutsideFriendly();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isHealOutsideFriendly@CvUnit@@QBE_NXZ	; CvUnit::isHealOutsideFriendly
	mov	BYTE PTR _bResult$[ebp], al

; 3461 : 
; 3462 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3463 : 	return 1;

	mov	eax, 1

; 3464 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsHealOutsideFriendly
_TEXT	ENDS
EXTRN	?isHillsDoubleMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::isHillsDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHillsDoubleMove, COMDAT

; 3468 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3469 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3470 : 	const bool bResult = pkUnit->isHillsDoubleMove();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isHillsDoubleMove@CvUnit@@QBE_NXZ	; CvUnit::isHillsDoubleMove
	mov	BYTE PTR _bResult$[ebp], al

; 3471 : 
; 3472 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3473 : 	return 1;

	mov	eax, 1

; 3474 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHillsDoubleMove
_TEXT	ENDS
EXTRN	?IsGarrisoned@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsGarrisoned
; Function compile flags: /Odtp
;	COMDAT ?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGarrisoned, COMDAT

; 3478 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3479 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3480 : 	const bool bResult = pkUnit->IsGarrisoned();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsGarrisoned@CvUnit@@QBE_NXZ		; CvUnit::IsGarrisoned
	mov	BYTE PTR _bResult$[ebp], al

; 3481 : 
; 3482 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3483 : 	return 1;

	mov	eax, 1

; 3484 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGarrisoned
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
EXTRN	?GetGarrisonedCity@CvUnit@@QAEPAVCvCity@@XZ:PROC ; CvUnit::GetGarrisonedCity
; Function compile flags: /Odtp
;	COMDAT ?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetGarrisonedCity, COMDAT

; 3488 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 3489 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3490 : 	CvLuaCity::Push(L, pkUnit->GetGarrisonedCity());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetGarrisonedCity@CvUnit@@QAEPAVCvCity@@XZ ; CvUnit::GetGarrisonedCity
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
	add	esp, 8

; 3491 : 
; 3492 : 	return 1;

	mov	eax, 1

; 3493 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetGarrisonedCity
_TEXT	ENDS
EXTRN	?getExtraVisibilityRange@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraVisibilityRange
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraVisibilityRange, COMDAT

; 3497 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3498 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3499 : 
; 3500 : 	const int iResult = pkUnit->getExtraVisibilityRange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraVisibilityRange@CvUnit@@QBEHXZ	; CvUnit::getExtraVisibilityRange
	mov	DWORD PTR _iResult$[ebp], eax

; 3501 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3502 : 	return 1;

	mov	eax, 1

; 3503 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraVisibilityRange
_TEXT	ENDS
EXTRN	?getExtraMoves@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraMoves
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraMoves, COMDAT

; 3507 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3508 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3509 : 
; 3510 : 	const int iResult = pkUnit->getExtraMoves();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraMoves@CvUnit@@QBEHXZ		; CvUnit::getExtraMoves
	mov	DWORD PTR _iResult$[ebp], eax

; 3511 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3512 : 	return 1;

	mov	eax, 1

; 3513 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraMoves
_TEXT	ENDS
EXTRN	?getExtraMoveDiscount@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraMoveDiscount
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraMoveDiscount, COMDAT

; 3517 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3518 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3519 : 
; 3520 : 	const int iResult = pkUnit->getExtraMoveDiscount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraMoveDiscount@CvUnit@@QBEHXZ	; CvUnit::getExtraMoveDiscount
	mov	DWORD PTR _iResult$[ebp], eax

; 3521 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3522 : 	return 1;

	mov	eax, 1

; 3523 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraMoveDiscount
_TEXT	ENDS
EXTRN	?getExtraRange@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraRange
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraRange, COMDAT

; 3527 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3528 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3529 : 
; 3530 : 	const int iResult = pkUnit->getExtraRange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraRange@CvUnit@@QBEHXZ		; CvUnit::getExtraRange
	mov	DWORD PTR _iResult$[ebp], eax

; 3531 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3532 : 	return 1;

	mov	eax, 1

; 3533 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraRange
_TEXT	ENDS
EXTRN	?getExtraIntercept@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraIntercept
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraIntercept, COMDAT

; 3537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3538 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3539 : 
; 3540 : 	const int iResult = pkUnit->getExtraIntercept();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraIntercept@CvUnit@@QBEHXZ	; CvUnit::getExtraIntercept
	mov	DWORD PTR _iResult$[ebp], eax

; 3541 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3542 : 	return 1;

	mov	eax, 1

; 3543 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraIntercept
_TEXT	ENDS
EXTRN	?getExtraEvasion@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraEvasion
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraEvasion, COMDAT

; 3547 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3548 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3549 : 
; 3550 : 	const int iResult = pkUnit->getExtraEvasion();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraEvasion@CvUnit@@QBEHXZ		; CvUnit::getExtraEvasion
	mov	DWORD PTR _iResult$[ebp], eax

; 3551 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3552 : 	return 1;

	mov	eax, 1

; 3553 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraEvasion
_TEXT	ENDS
EXTRN	?getExtraFirstStrikes@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraFirstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFirstStrikes, COMDAT

; 3557 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3558 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3559 : 
; 3560 : 	const int iResult = pkUnit->getExtraFirstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraFirstStrikes@CvUnit@@QBEHXZ	; CvUnit::getExtraFirstStrikes
	mov	DWORD PTR _iResult$[ebp], eax

; 3561 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3562 : 	return 1;

	mov	eax, 1

; 3563 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFirstStrikes
_TEXT	ENDS
EXTRN	?getExtraChanceFirstStrikes@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraChanceFirstStrikes
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraChanceFirstStrikes, COMDAT

; 3567 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3568 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3569 : 
; 3570 : 	const int iResult = pkUnit->getExtraChanceFirstStrikes();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraChanceFirstStrikes@CvUnit@@QBEHXZ ; CvUnit::getExtraChanceFirstStrikes
	mov	DWORD PTR _iResult$[ebp], eax

; 3571 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3572 : 	return 1;

	mov	eax, 1

; 3573 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraChanceFirstStrikes
_TEXT	ENDS
EXTRN	?getExtraWithdrawal@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraWithdrawal
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraWithdrawal, COMDAT

; 3577 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3578 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3579 : 
; 3580 : 	const int iResult = pkUnit->getExtraWithdrawal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraWithdrawal@CvUnit@@QBEHXZ	; CvUnit::getExtraWithdrawal
	mov	DWORD PTR _iResult$[ebp], eax

; 3581 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3582 : 	return 1;

	mov	eax, 1

; 3583 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraWithdrawal
_TEXT	ENDS
EXTRN	?getExtraEnemyHeal@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraEnemyHeal
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraEnemyHeal, COMDAT

; 3587 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3588 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3589 : 
; 3590 : 	const int iResult = pkUnit->getExtraEnemyHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraEnemyHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraEnemyHeal
	mov	DWORD PTR _iResult$[ebp], eax

; 3591 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3592 : 	return 1;

	mov	eax, 1

; 3593 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraEnemyHeal
_TEXT	ENDS
EXTRN	?getExtraNeutralHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraNeutralHeal
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraNeutralHeal, COMDAT

; 3597 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3598 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3599 : 
; 3600 : 	const int iResult = pkUnit->getExtraNeutralHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraNeutralHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraNeutralHeal
	mov	DWORD PTR _iResult$[ebp], eax

; 3601 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3602 : 	return 1;

	mov	eax, 1

; 3603 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraNeutralHeal
_TEXT	ENDS
EXTRN	?getExtraFriendlyHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraFriendlyHeal
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFriendlyHeal, COMDAT

; 3607 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3608 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3609 : 
; 3610 : 	const int iResult = pkUnit->getExtraFriendlyHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraFriendlyHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraFriendlyHeal
	mov	DWORD PTR _iResult$[ebp], eax

; 3611 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3612 : 	return 1;

	mov	eax, 1

; 3613 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFriendlyHeal
_TEXT	ENDS
EXTRN	?getSameTileHeal@CvUnit@@QBEHXZ:PROC		; CvUnit::getSameTileHeal
; Function compile flags: /Odtp
;	COMDAT ?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetSameTileHeal, COMDAT

; 3617 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3618 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3619 : 
; 3620 : 	const int iResult = pkUnit->getSameTileHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getSameTileHeal@CvUnit@@QBEHXZ		; CvUnit::getSameTileHeal
	mov	DWORD PTR _iResult$[ebp], eax

; 3621 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3622 : 	return 1;

	mov	eax, 1

; 3623 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetSameTileHeal
_TEXT	ENDS
EXTRN	?getAdjacentTileHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getAdjacentTileHeal
; Function compile flags: /Odtp
;	COMDAT ?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAdjacentTileHeal, COMDAT

; 3627 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3628 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3629 : 
; 3630 : 	const int iResult = pkUnit->getAdjacentTileHeal();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getAdjacentTileHeal@CvUnit@@QBEHXZ	; CvUnit::getAdjacentTileHeal
	mov	DWORD PTR _iResult$[ebp], eax

; 3631 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3632 : 	return 1;

	mov	eax, 1

; 3633 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAdjacentTileHeal
_TEXT	ENDS
EXTRN	?getExtraCombatPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCombatPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCombatPercent, COMDAT

; 3637 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3638 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3639 : 
; 3640 : 	const int iResult = pkUnit->getExtraCombatPercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraCombatPercent@CvUnit@@QBEHXZ	; CvUnit::getExtraCombatPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3641 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3642 : 	return 1;

	mov	eax, 1

; 3643 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCombatPercent
_TEXT	ENDS
EXTRN	?getFriendlyLandsModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::getFriendlyLandsModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFriendlyLandsModifier, COMDAT

; 3647 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3648 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3649 : 
; 3650 : 	const int iResult = pkUnit->getFriendlyLandsModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getFriendlyLandsModifier@CvUnit@@QBEHXZ ; CvUnit::getFriendlyLandsModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 3651 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3652 : 	return 1;

	mov	eax, 1

; 3653 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFriendlyLandsModifier
_TEXT	ENDS
EXTRN	?getFriendlyLandsAttackModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::getFriendlyLandsAttackModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFriendlyLandsAttackModifier, COMDAT

; 3657 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3658 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3659 : 
; 3660 : 	const int iResult = pkUnit->getFriendlyLandsAttackModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getFriendlyLandsAttackModifier@CvUnit@@QBEHXZ ; CvUnit::getFriendlyLandsAttackModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 3661 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3662 : 	return 1;

	mov	eax, 1

; 3663 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFriendlyLandsAttackModifier
_TEXT	ENDS
EXTRN	?getOutsideFriendlyLandsModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::getOutsideFriendlyLandsModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetOutsideFriendlyLandsModifier, COMDAT

; 3667 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3668 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3669 : 
; 3670 : 	const int iResult = pkUnit->getOutsideFriendlyLandsModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getOutsideFriendlyLandsModifier@CvUnit@@QBEHXZ ; CvUnit::getOutsideFriendlyLandsModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 3671 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3672 : 	return 1;

	mov	eax, 1

; 3673 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
_TEXT	ENDS
EXTRN	?getGoldenAgeForeignAttackBonus@CvUnit@@QBEHXZ:PROC ; CvUnit::getGoldenAgeForeignAttackBonus
; Function compile flags: /Odtp
;	COMDAT ?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus, COMDAT

; 3678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3679 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3680 : 
; 3681 : 	const int iResult = pkUnit->getGoldenAgeForeignAttackBonus();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getGoldenAgeForeignAttackBonus@CvUnit@@QBEHXZ ; CvUnit::getGoldenAgeForeignAttackBonus
	mov	DWORD PTR _iResult$[ebp], eax

; 3682 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3683 : 	return 1;

	mov	eax, 1

; 3684 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
_TEXT	ENDS
EXTRN	?getCombatStrengthNearFriendlyMinor@CvUnit@@QBEHXZ:PROC ; CvUnit::getCombatStrengthNearFriendlyMinor
; Function compile flags: /Odtp
;	COMDAT ?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor, COMDAT

; 3690 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3691 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3692 : 
; 3693 : 	const int iResult = pkUnit->getCombatStrengthNearFriendlyMinor();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCombatStrengthNearFriendlyMinor@CvUnit@@QBEHXZ ; CvUnit::getCombatStrengthNearFriendlyMinor
	mov	DWORD PTR _iResult$[ebp], eax

; 3694 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3695 : 	return 1;

	mov	eax, 1

; 3696 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
_TEXT	ENDS
EXTRN	?getExtraCityAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCityAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCityAttackPercent, COMDAT

; 3701 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3702 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3703 : 
; 3704 : 	const int iResult = pkUnit->getExtraCityAttackPercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraCityAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraCityAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3705 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3706 : 	return 1;

	mov	eax, 1

; 3707 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCityAttackPercent
_TEXT	ENDS
EXTRN	?getExtraCityDefensePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCityDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCityDefensePercent, COMDAT

; 3711 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3712 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3713 : 
; 3714 : 	const int iResult = pkUnit->getExtraCityDefensePercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraCityDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraCityDefensePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3715 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3716 : 	return 1;

	mov	eax, 1

; 3717 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCityDefensePercent
_TEXT	ENDS
EXTRN	?getExtraHillsAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraHillsAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraHillsAttackPercent, COMDAT

; 3721 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3722 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3723 : 
; 3724 : 	const int iResult = pkUnit->getExtraHillsAttackPercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraHillsAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraHillsAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3725 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3726 : 	return 1;

	mov	eax, 1

; 3727 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraHillsAttackPercent
_TEXT	ENDS
EXTRN	?getExtraHillsDefensePercent@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraHillsDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraHillsDefensePercent, COMDAT

; 3731 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3732 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3733 : 
; 3734 : 	const int iResult = pkUnit->getExtraHillsDefensePercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraHillsDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraHillsDefensePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3735 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3736 : 	return 1;

	mov	eax, 1

; 3737 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraHillsDefensePercent
_TEXT	ENDS
EXTRN	?getExtraOpenAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraOpenAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenAttackPercent, COMDAT

; 3741 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3742 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3743 : 
; 3744 : 	const int iResult = pkUnit->getExtraOpenAttackPercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraOpenAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3745 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3746 : 	return 1;

	mov	eax, 1

; 3747 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenAttackPercent
_TEXT	ENDS
EXTRN	?getExtraOpenRangedAttackMod@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraOpenRangedAttackMod
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenRangedAttackMod, COMDAT

; 3751 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3752 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3753 : 
; 3754 : 	const int iResult = pkUnit->getExtraOpenRangedAttackMod();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraOpenRangedAttackMod@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenRangedAttackMod
	mov	DWORD PTR _iResult$[ebp], eax

; 3755 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3756 : 	return 1;

	mov	eax, 1

; 3757 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenRangedAttackMod
_TEXT	ENDS
EXTRN	?getExtraRoughAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraRoughAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraRoughAttackPercent, COMDAT

; 3761 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3762 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3763 : 
; 3764 : 	const int iResult = pkUnit->getExtraRoughAttackPercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraRoughAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraRoughAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3765 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3766 : 	return 1;

	mov	eax, 1

; 3767 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraRoughAttackPercent
_TEXT	ENDS
EXTRN	?getExtraRoughRangedAttackMod@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraRoughRangedAttackMod
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraRoughRangedAttackMod, COMDAT

; 3771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3772 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3773 : 
; 3774 : 	const int iResult = pkUnit->getExtraRoughRangedAttackMod();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraRoughRangedAttackMod@CvUnit@@QBEHXZ ; CvUnit::getExtraRoughRangedAttackMod
	mov	DWORD PTR _iResult$[ebp], eax

; 3775 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3776 : 	return 1;

	mov	eax, 1

; 3777 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraRoughRangedAttackMod
_TEXT	ENDS
EXTRN	?getExtraAttackFortifiedMod@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraAttackFortifiedMod
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraAttackFortifiedMod, COMDAT

; 3781 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3782 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3783 : 
; 3784 : 	const int iResult = pkUnit->getExtraAttackFortifiedMod();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraAttackFortifiedMod@CvUnit@@QBEHXZ ; CvUnit::getExtraAttackFortifiedMod
	mov	DWORD PTR _iResult$[ebp], eax

; 3785 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3786 : 	return 1;

	mov	eax, 1

; 3787 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraAttackFortifiedMod
_TEXT	ENDS
EXTRN	?getExtraAttackWoundedMod@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraAttackWoundedMod
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraAttackWoundedMod, COMDAT

; 3791 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3792 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3793 : 
; 3794 : 	const int iResult = pkUnit->getExtraAttackWoundedMod();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraAttackWoundedMod@CvUnit@@QBEHXZ ; CvUnit::getExtraAttackWoundedMod
	mov	DWORD PTR _iResult$[ebp], eax

; 3795 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3796 : 	return 1;

	mov	eax, 1

; 3797 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraAttackWoundedMod
_TEXT	ENDS
EXTRN	?getExtraOpenDefensePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraOpenDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenDefensePercent, COMDAT

; 3801 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3802 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3803 : 
; 3804 : 	const int iResult = pkUnit->getExtraOpenDefensePercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraOpenDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenDefensePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3805 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3806 : 	return 1;

	mov	eax, 1

; 3807 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenDefensePercent
_TEXT	ENDS
EXTRN	?getPillageChange@CvUnit@@QBEHXZ:PROC		; CvUnit::getPillageChange
; Function compile flags: /Odtp
;	COMDAT ?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetPillageChange, COMDAT

; 3811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3812 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3813 : 	const int iResult = pkUnit->getPillageChange();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getPillageChange@CvUnit@@QBEHXZ	; CvUnit::getPillageChange
	mov	DWORD PTR _iResult$[ebp], eax

; 3814 : 
; 3815 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3816 : 	return 1;

	mov	eax, 1

; 3817 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetPillageChange
_TEXT	ENDS
EXTRN	?getUpgradeDiscount@CvUnit@@QBEHXZ:PROC		; CvUnit::getUpgradeDiscount
; Function compile flags: /Odtp
;	COMDAT ?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUpgradeDiscount, COMDAT

; 3821 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3822 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3823 : 	const int iResult = pkUnit->getUpgradeDiscount();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUpgradeDiscount@CvUnit@@QBEHXZ	; CvUnit::getUpgradeDiscount
	mov	DWORD PTR _iResult$[ebp], eax

; 3824 : 
; 3825 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3826 : 	return 1;

	mov	eax, 1

; 3827 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUpgradeDiscount
_TEXT	ENDS
EXTRN	?getExperiencePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExperiencePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExperiencePercent, COMDAT

; 3831 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3832 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3833 : 	const int iResult = pkUnit->getExperiencePercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExperiencePercent@CvUnit@@QBEHXZ	; CvUnit::getExperiencePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3834 : 
; 3835 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3836 : 	return 1;

	mov	eax, 1

; 3837 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExperiencePercent
_TEXT	ENDS
EXTRN	?getKamikazePercent@CvUnit@@QBEHXZ:PROC		; CvUnit::getKamikazePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetKamikazePercent, COMDAT

; 3841 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3842 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3843 : 	const int iResult = pkUnit->getKamikazePercent();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getKamikazePercent@CvUnit@@QBEHXZ	; CvUnit::getKamikazePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 3844 : 
; 3845 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3846 : 	return 1;

	mov	eax, 1

; 3847 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetKamikazePercent
_TEXT	ENDS
EXTRN	?isOutOfAttacks@CvUnit@@QBE_NXZ:PROC		; CvUnit::isOutOfAttacks
; Function compile flags: /Odtp
;	COMDAT ?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsOutOfAttacks, COMDAT

; 3851 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3852 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3853 : 	const bool bResult = pkUnit->isOutOfAttacks();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks
	mov	BYTE PTR _bResult$[ebp], al

; 3854 : 
; 3855 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3856 : 	return 1;

	mov	eax, 1

; 3857 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsOutOfAttacks
_TEXT	ENDS
EXTRN	?setMadeAttack@CvUnit@@QAEX_N@Z:PROC		; CvUnit::setMadeAttack
; Function compile flags: /Odtp
;	COMDAT ?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bNewValue$ = -1					; size = 1
_L$ = 8							; size = 4
?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetMadeAttack, COMDAT

; 3861 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3862 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3863 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bNewValue$[ebp], dl

; 3864 : 
; 3865 : 	pkUnit->setMadeAttack(bNewValue);

	movzx	eax, BYTE PTR _bNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack

; 3866 : 	return 0;

	xor	eax, eax

; 3867 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetMadeAttack
_TEXT	ENDS
EXTRN	?isOutOfInterceptions@CvUnit@@QBE_NXZ:PROC	; CvUnit::isOutOfInterceptions
; Function compile flags: /Odtp
;	COMDAT ?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lisOutOfInterceptions, COMDAT

; 3871 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3872 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3873 : 	const bool bResult = pkUnit->isOutOfInterceptions();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isOutOfInterceptions@CvUnit@@QBE_NXZ	; CvUnit::isOutOfInterceptions
	mov	BYTE PTR _bResult$[ebp], al

; 3874 : 
; 3875 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3876 : 	return 1;

	mov	eax, 1

; 3877 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lisOutOfInterceptions
_TEXT	ENDS
EXTRN	?setMadeInterception@CvUnit@@QAEX_N@Z:PROC	; CvUnit::setMadeInterception
; Function compile flags: /Odtp
;	COMDAT ?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bNewValue$ = -1					; size = 1
_L$ = 8							; size = 4
?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetMadeInterception, COMDAT

; 3881 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3882 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3883 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bNewValue$[ebp], dl

; 3884 : 
; 3885 : 	pkUnit->setMadeInterception(bNewValue);

	movzx	eax, BYTE PTR _bNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setMadeInterception@CvUnit@@QAEX_N@Z	; CvUnit::setMadeInterception

; 3886 : 	return 0;

	xor	eax, eax

; 3887 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetMadeInterception
_TEXT	ENDS
EXTRN	?isPromotionReady@CvUnit@@QBE_NXZ:PROC		; CvUnit::isPromotionReady
; Function compile flags: /Odtp
;	COMDAT ?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsPromotionReady, COMDAT

; 3891 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3892 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3893 : 	const bool bResult = pkUnit->isPromotionReady();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isPromotionReady@CvUnit@@QBE_NXZ	; CvUnit::isPromotionReady
	mov	BYTE PTR _bResult$[ebp], al

; 3894 : 
; 3895 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 3896 : 	return 1;

	mov	eax, 1

; 3897 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsPromotionReady
_TEXT	ENDS
EXTRN	?setPromotionReady@CvUnit@@QAEX_N@Z:PROC	; CvUnit::setPromotionReady
; Function compile flags: /Odtp
;	COMDAT ?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bNewValue$ = -1					; size = 1
_L$ = 8							; size = 4
?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetPromotionReady, COMDAT

; 3901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3902 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3903 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bNewValue$[ebp], dl

; 3904 : 
; 3905 : 	pkUnit->setPromotionReady(bNewValue);

	movzx	eax, BYTE PTR _bNewValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setPromotionReady@CvUnit@@QAEX_N@Z	; CvUnit::setPromotionReady

; 3906 : 	return 0;

	xor	eax, eax

; 3907 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetPromotionReady
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetOwner, COMDAT

; 3911 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3912 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3913 : 
; 3914 : 	const int iResult = pkUnit->getOwner();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _iResult$[ebp], edx

; 3915 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3916 : 	return 1;

	mov	eax, 1

; 3917 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetOwner
_TEXT	ENDS
EXTRN	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z:PROC ; CvUnit::getVisualOwner
; Function compile flags: /Odtp
;	COMDAT ?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetVisualOwner, COMDAT

; 3921 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3922 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3923 : 
; 3924 : 	const int iResult = pkUnit->getVisualOwner();

	push	-1
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z ; CvUnit::getVisualOwner
	mov	DWORD PTR _iResult$[ebp], eax

; 3925 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3926 : 	return 1;

	mov	eax, 1

; 3927 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetVisualOwner
_TEXT	ENDS
EXTRN	?getCombatOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@ABVCvPlot@@@Z:PROC ; CvUnit::getCombatOwner
; Function compile flags: /Odtp
;	COMDAT ?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eForTeam$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatOwner, COMDAT

; 3931 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 3932 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3933 : 	const TeamTypes eForTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eForTeam$[ebp], eax

; 3934 : 
; 3935 : 	const int iResult = pkUnit->getCombatOwner(eForTeam, *(pkUnit->plot()));

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	edx, DWORD PTR _eForTeam$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getCombatOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@ABVCvPlot@@@Z ; CvUnit::getCombatOwner
	mov	DWORD PTR _iResult$[ebp], eax

; 3936 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 3937 : 	return 1;

	mov	eax, 1

; 3938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatOwner
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
EXTRN	?GetOriginalOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ:PROC ; CvUnit::GetOriginalOwner
; Function compile flags: /Odtp
;	COMDAT ?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetOriginalOwner, COMDAT

; 3942 : {

	push	ebp
	mov	ebp, esp

; 3943 : 	return BasicLuaMethod(L, &CvUnit::GetOriginalOwner);

	push	OFFSET ?GetOriginalOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ ; CvUnit::GetOriginalOwner
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
	add	esp, 8

; 3944 : }

	pop	ebp
	ret	0
?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetOriginalOwner
_TEXT	ENDS
EXTRN	?SetOriginalOwner@CvUnit@@QAEXW4PlayerTypes@@@Z:PROC ; CvUnit::SetOriginalOwner
; Function compile flags: /Odtp
;	COMDAT ?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_ePlayerType$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetOriginalOwner, COMDAT

; 3948 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3949 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3950 : 	const PlayerTypes ePlayerType = (PlayerTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePlayerType$[ebp], eax

; 3951 : 
; 3952 : 	pkUnit->SetOriginalOwner(ePlayerType);

	mov	edx, DWORD PTR _ePlayerType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?SetOriginalOwner@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::SetOriginalOwner

; 3953 : 	return 0;

	xor	eax, eax

; 3954 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetOriginalOwner
_TEXT	ENDS
EXTRN	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ:PROC	; CvUnit::getTeam
; Function compile flags: /Odtp
;	COMDAT ?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetTeam, COMDAT

; 3958 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3959 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3960 : 
; 3961 : 	const int iResult = pkUnit->getTeam();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	DWORD PTR _iResult$[ebp], eax

; 3962 : 	lua_pushinteger(L, iResult);

	mov	ecx, DWORD PTR _iResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3963 : 	return 1;

	mov	eax, 1

; 3964 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetTeam
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitType, COMDAT

; 3968 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3969 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3970 : 
; 3971 : 	const UnitTypes eResult = pkUnit->getUnitType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	mov	DWORD PTR _eResult$[ebp], eax

; 3972 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3973 : 	return 1;

	mov	eax, 1

; 3974 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitType
_TEXT	ENDS
EXTRN	?getUnitClassType@CvUnit@@QBE?AW4UnitClassTypes@@XZ:PROC ; CvUnit::getUnitClassType
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitClassType, COMDAT

; 3978 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3979 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3980 : 
; 3981 : 	const UnitClassTypes eResult = pkUnit->getUnitClassType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitClassType@CvUnit@@QBE?AW4UnitClassTypes@@XZ ; CvUnit::getUnitClassType
	mov	DWORD PTR _eResult$[ebp], eax

; 3982 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3983 : 	return 1;

	mov	eax, 1

; 3984 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitClassType
_TEXT	ENDS
EXTRN	?getLeaderUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ:PROC ; CvUnit::getLeaderUnitType
; Function compile flags: /Odtp
;	COMDAT ?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetLeaderUnitType, COMDAT

; 3988 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3989 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 3990 : 
; 3991 : 	const UnitTypes eResult = pkUnit->getLeaderUnitType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getLeaderUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getLeaderUnitType
	mov	DWORD PTR _eResult$[ebp], eax

; 3992 : 	lua_pushinteger(L, eResult);

	mov	ecx, DWORD PTR _eResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 3993 : 	return 1;

	mov	eax, 1

; 3994 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetLeaderUnitType
_TEXT	ENDS
EXTRN	?setLeaderUnitType@CvUnit@@QAEXW4UnitTypes@@@Z:PROC ; CvUnit::setLeaderUnitType
; Function compile flags: /Odtp
;	COMDAT ?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_eLeaderUnitType$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetLeaderUnitType, COMDAT

; 3998 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3999 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4000 : 	const UnitTypes eLeaderUnitType = (UnitTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eLeaderUnitType$[ebp], eax

; 4001 : 
; 4002 : 	pkUnit->setLeaderUnitType(eLeaderUnitType);

	mov	edx, DWORD PTR _eLeaderUnitType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setLeaderUnitType@CvUnit@@QAEXW4UnitTypes@@@Z ; CvUnit::setLeaderUnitType

; 4003 : 	return 0;

	xor	eax, eax

; 4004 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetLeaderUnitType
_TEXT	ENDS
EXTRN	?IsNearGreatGeneral@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsNearGreatGeneral
; Function compile flags: /Odtp
;	COMDAT ?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsNearGreatGeneral, COMDAT

; 4008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4009 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4010 : 
; 4011 : 	const bool bResult = pkUnit->IsNearGreatGeneral();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsNearGreatGeneral@CvUnit@@QBE_NXZ	; CvUnit::IsNearGreatGeneral
	mov	BYTE PTR _bResult$[ebp], al

; 4012 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4013 : 	return 1;

	mov	eax, 1

; 4014 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsNearGreatGeneral
_TEXT	ENDS
EXTRN	?IsStackedGreatGeneral@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsStackedGreatGeneral
; Function compile flags: /Odtp
;	COMDAT ?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsStackedGreatGeneral, COMDAT

; 4018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4019 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4020 : 
; 4021 : 	const bool bResult = pkUnit->IsStackedGreatGeneral();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsStackedGreatGeneral@CvUnit@@QBE_NXZ	; CvUnit::IsStackedGreatGeneral
	mov	BYTE PTR _bResult$[ebp], al

; 4022 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4023 : 	return 1;

	mov	eax, 1

; 4024 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsStackedGreatGeneral
_TEXT	ENDS
EXTRN	?IsIgnoreGreatGeneralBenefit@CvUnit@@QBE_NXZ:PROC ; CvUnit::IsIgnoreGreatGeneralBenefit
; Function compile flags: /Odtp
;	COMDAT ?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit, COMDAT

; 4028 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4029 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4030 : 
; 4031 : 	const bool bResult = pkUnit->IsIgnoreGreatGeneralBenefit();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsIgnoreGreatGeneralBenefit@CvUnit@@QBE_NXZ ; CvUnit::IsIgnoreGreatGeneralBenefit
	mov	BYTE PTR _bResult$[ebp], al

; 4032 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4033 : 	return 1;

	mov	eax, 1

; 4034 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
_TEXT	ENDS
EXTRN	?GetReverseGreatGeneralModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetReverseGreatGeneralModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetReverseGreatGeneralModifier, COMDAT

; 4038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4039 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4040 : 
; 4041 : 	const int bResult = pkUnit->GetReverseGreatGeneralModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetReverseGreatGeneralModifier@CvUnit@@QBEHXZ ; CvUnit::GetReverseGreatGeneralModifier
	mov	DWORD PTR _bResult$[ebp], eax

; 4042 : 	lua_pushinteger(L, bResult);

	mov	ecx, DWORD PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4043 : 	return 1;

	mov	eax, 1

; 4044 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetReverseGreatGeneralModifier
_TEXT	ENDS
EXTRN	?GetGreatGeneralCombatModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetGreatGeneralCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGreatGeneralCombatModifier, COMDAT

; 4048 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4049 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4050 : 
; 4051 : 	const int bResult = pkUnit->GetGreatGeneralCombatModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetGreatGeneralCombatModifier@CvUnit@@QBEHXZ ; CvUnit::GetGreatGeneralCombatModifier
	mov	DWORD PTR _bResult$[ebp], eax

; 4052 : 	lua_pushinteger(L, bResult);

	mov	ecx, DWORD PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4053 : 	return 1;

	mov	eax, 1

; 4054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGreatGeneralCombatModifier
_TEXT	ENDS
EXTRN	?IsNearSapper@CvUnit@@QBE_NPBVCvCity@@@Z:PROC	; CvUnit::IsNearSapper
; Function compile flags: /Odtp
;	COMDAT ?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkCity$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNearSapper, COMDAT

; 4058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4059 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4060 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkCity$[ebp], eax

; 4061 : 
; 4062 : 	const bool bResult = pkUnit->IsNearSapper(pkCity);

	mov	edx, DWORD PTR _pkCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsNearSapper@CvUnit@@QBE_NPBVCvCity@@@Z ; CvUnit::IsNearSapper
	mov	BYTE PTR _bResult$[ebp], al

; 4063 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4064 : 	return 1;

	mov	eax, 1

; 4065 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNearSapper
_TEXT	ENDS
EXTRN	?GetNearbyImprovementModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetNearbyImprovementModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNearbyImprovementModifier, COMDAT

; 4069 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4070 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4071 : 
; 4072 : 	const int bResult = pkUnit->GetNearbyImprovementModifier();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetNearbyImprovementModifier@CvUnit@@QBEHXZ ; CvUnit::GetNearbyImprovementModifier
	mov	DWORD PTR _bResult$[ebp], eax

; 4073 : 	lua_pushinteger(L, bResult);

	mov	ecx, DWORD PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4074 : 	return 1;

	mov	eax, 1

; 4075 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNearbyImprovementModifier
_TEXT	ENDS
EXTRN	?IsFriendlyUnitAdjacent@CvUnit@@QBE_N_N@Z:PROC	; CvUnit::IsFriendlyUnitAdjacent
; Function compile flags: /Odtp
;	COMDAT ?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bCombatUnit$ = -2					; size = 1
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsFriendlyUnitAdjacent, COMDAT

; 4079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4080 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4081 : 	const bool bCombatUnit = lua_toboolean(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bCombatUnit$[ebp], dl

; 4082 : 
; 4083 : 	const bool bResult = pkUnit->IsFriendlyUnitAdjacent(bCombatUnit);

	movzx	eax, BYTE PTR _bCombatUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsFriendlyUnitAdjacent@CvUnit@@QBE_N_N@Z ; CvUnit::IsFriendlyUnitAdjacent
	mov	BYTE PTR _bResult$[ebp], al

; 4084 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4085 : 	return 1;

	mov	eax, 1

; 4086 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsFriendlyUnitAdjacent
_TEXT	ENDS
EXTRN	?GetNumEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@@Z:PROC ; CvUnit::GetNumEnemyUnitsAdjacent
; Function compile flags: /Odtp
;	COMDAT ?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_iResult$ = -8						; size = 4
_pkOtherUnit$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumEnemyUnitsAdjacent, COMDAT

; 4090 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4091 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4092 : 	CvUnit* pkOtherUnit = CvLuaUnit::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkOtherUnit$[ebp], eax

; 4093 : 
; 4094 : 	const int iResult = pkUnit->GetNumEnemyUnitsAdjacent(pkOtherUnit);

	mov	edx, DWORD PTR _pkOtherUnit$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetNumEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@@Z ; CvUnit::GetNumEnemyUnitsAdjacent
	mov	DWORD PTR _iResult$[ebp], eax

; 4095 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4096 : 	return 1;

	mov	eax, 1

; 4097 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
_TEXT	ENDS
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
EXTRN	?getTransportUnit@CvUnit@@QAEPAV1@XZ:PROC	; CvUnit::getTransportUnit
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$2
__ehfuncinfo$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv91 = -52						; size = 4
$T225706 = -48						; size = 8
$T225682 = -40						; size = 4
$T225672 = -36						; size = 4
$T225660 = -32						; size = 4
_pkUnit$ = -24						; size = 4
_pkTransportUnit$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTransportUnit, COMDAT

; 4101 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4102 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4103 : 	UnitHandle pkTransportUnit = pkUnit->getTransportUnit();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getTransportUnit@CvUnit@@QAEPAV1@XZ	; CvUnit::getTransportUnit
	mov	DWORD PTR $T225672[ebp], eax
	mov	ecx, DWORD PTR $T225672[ebp]
	mov	DWORD PTR _pkTransportUnit$[ebp], ecx
	mov	BYTE PTR _pkTransportUnit$[ebp+4], 0
	cmp	DWORD PTR _pkTransportUnit$[ebp], 0
	je	SHORT $LN6@lGetTransp
	mov	ecx, DWORD PTR _pkTransportUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN6@lGetTransp:
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4104 : 
; 4105 : 	CvLuaUnit::Push(L, pkTransportUnit);

	lea	edx, DWORD PTR $T225706[ebp]
	mov	DWORD PTR $T225682[ebp], edx
	mov	eax, DWORD PTR $T225682[ebp]
	mov	ecx, DWORD PTR _pkTransportUnit$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T225682[ebp]
	mov	al, BYTE PTR _pkTransportUnit$[ebp+4]
	mov	BYTE PTR [edx+4], al
	mov	ecx, DWORD PTR $T225682[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN11@lGetTransp
	mov	edx, DWORD PTR $T225682[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN11@lGetTransp:
	mov	eax, DWORD PTR $T225682[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T225706[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T225706[ebp], 0
	je	SHORT $LN15@lGetTransp
	mov	ecx, DWORD PTR $T225706[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN15@lGetTransp:

; 4106 : 	return 1;

	mov	DWORD PTR $T225660[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR _pkTransportUnit$[ebp], 0
	je	SHORT $LN26@lGetTransp
	mov	ecx, DWORD PTR _pkTransportUnit$[ebp]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN26@lGetTransp:
	mov	eax, DWORD PTR $T225660[ebp]

; 4107 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _pkTransportUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$2:
	lea	ecx, DWORD PTR $T225706[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTransportUnit
EXTRN	?isCargo@CvUnit@@QBE_NXZ:PROC			; CvUnit::isCargo
; Function compile flags: /Odtp
;	COMDAT ?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsCargo, COMDAT

; 4111 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4112 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4113 : 	const bool bResult = pkUnit->isCargo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isCargo@CvUnit@@QBE_NXZ		; CvUnit::isCargo
	mov	BYTE PTR _bResult$[ebp], al

; 4114 : 
; 4115 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4116 : 	return 1;

	mov	eax, 1

; 4117 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsCargo
_TEXT	ENDS
EXTRN	?getExtraDomainModifier@CvUnit@@QBEHW4DomainTypes@@@Z:PROC ; CvUnit::getExtraDomainModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraDomainModifier, COMDAT

; 4121 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4122 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4123 : 	const DomainTypes eIndex = (DomainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4124 : 
; 4125 : 	const int iResult = pkUnit->getExtraDomainModifier(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraDomainModifier@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::getExtraDomainModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 4126 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4127 : 	return 1;

	mov	eax, 1

; 4128 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraDomainModifier
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getName@CvUnit@@QBE?BVCvString@@XZ:PROC	; CvUnit::getName
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv71 = -52						; size = 4
$T225738 = -48						; size = 4
$T225733 = -44						; size = 28
_pkUnit$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetName, COMDAT

; 4132 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4133 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4134 : 
; 4135 : 	lua_pushstring(L, pkUnit->getName());

	lea	ecx, DWORD PTR $T225733[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getName@CvUnit@@QBE?BVCvString@@XZ	; CvUnit::getName
	mov	DWORD PTR tv71[ebp], eax
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T225738[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T225738[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T225733[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4136 : 	return 1;

	mov	eax, 1

; 4137 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR $T225733[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetName
PUBLIC	__$ArrayPad$
EXTRN	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ:PROC	; CvUnit::getNameNoDesc
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T225752 = -52						; size = 4
_pkUnit$ = -48						; size = 4
_name$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetNameNoDesc, COMDAT

; 4140 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4141 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4142 : 	CvString name = pkUnit->getNameNoDesc();

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ ; CvUnit::getNameNoDesc
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4143 : 	lua_pushstring(L, name.c_str());

	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 4144 : 	return 1;

	mov	DWORD PTR $T225752[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T225752[ebp]

; 4145 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetNameNoDesc
PUBLIC	__$ArrayPad$
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv92 = -56						; size = 4
$T225767 = -52						; size = 4
_pkUnit$ = -48						; size = 4
_name$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasName, COMDAT

; 4148 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4149 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4150 : 	CvString name = pkUnit->getNameNoDesc();

	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ ; CvUnit::getNameNoDesc
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4151 : 	lua_pushboolean(L, !name.IsEmpty());

	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN6@lHasName
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	je	SHORT $LN6@lHasName
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN4@lHasName
$LN6@lHasName:
	mov	DWORD PTR tv92[ebp], 1
$LN4@lHasName:
	movzx	eax, BYTE PTR tv92[ebp]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4152 : 	return 1;

	mov	DWORD PTR $T225767[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T225767[ebp]

; 4153 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasName
EXTRN	?getNameKey@CvUnit@@QBEPBDXZ:PROC		; CvUnit::getNameKey
; Function compile flags: /Odtp
;	COMDAT ?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetNameKey, COMDAT

; 4157 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 4158 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4159 : 
; 4160 : 	lua_pushstring(L, pkUnit->getNameKey());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 4161 : 	return 1;

	mov	eax, 1

; 4162 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetNameKey
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	?setName@CvUnit@@QAEXVCvString@@@Z:PROC		; CvUnit::setName
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	_lua_tolstring:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv93 = -72						; size = 4
tv134 = -68						; size = 4
$T225813 = -64						; size = 4
$T225808 = -60						; size = 4
$T225797 = -56						; size = 4
$T225796 = -52						; size = 4
_pkUnit$ = -48						; size = 4
_strName$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetName, COMDAT

; 4166 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4167 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4168 : 	CvString strName = lua_tostring(L, 2);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tolstring
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T225808[ebp], eax
	cmp	DWORD PTR $T225808[ebp], 0
	je	SHORT $LN7@lSetName
	mov	edx, DWORD PTR $T225808[ebp]
	mov	DWORD PTR tv134[ebp], edx
	jmp	SHORT $LN8@lSetName
$LN7@lSetName:
	mov	DWORD PTR tv134[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN8@lSetName:
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	lea	ecx, DWORD PTR _strName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4169 : 
; 4170 : 	pkUnit->setName(strName);

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T225796[ebp], esp
	mov	DWORD PTR $T225813[ebp], ecx
	lea	edx, DWORD PTR _strName$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T225813[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T225813[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setName@CvUnit@@QAEXVCvString@@@Z	; CvUnit::setName

; 4171 : 	return 0;

	mov	DWORD PTR $T225797[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR $T225797[ebp]

; 4172 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _strName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetName
EXTRN	?isTerrainDoubleMove@CvUnit@@QBE_NW4TerrainTypes@@@Z:PROC ; CvUnit::isTerrainDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eIndex$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsTerrainDoubleMove, COMDAT

; 4176 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4177 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4178 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4179 : 	const bool bResult = pkUnit->isTerrainDoubleMove(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isTerrainDoubleMove@CvUnit@@QBE_NW4TerrainTypes@@@Z ; CvUnit::isTerrainDoubleMove
	mov	BYTE PTR _bResult$[ebp], al

; 4180 : 
; 4181 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4182 : 	return 1;

	mov	eax, 1

; 4183 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsTerrainDoubleMove
_TEXT	ENDS
EXTRN	?isFeatureDoubleMove@CvUnit@@QBE_NW4FeatureTypes@@@Z:PROC ; CvUnit::isFeatureDoubleMove
; Function compile flags: /Odtp
;	COMDAT ?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eIndex$ = -4						; size = 4
_L$ = 8							; size = 4
?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsFeatureDoubleMove, COMDAT

; 4187 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4188 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4189 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4190 : 	const bool bResult = pkUnit->isFeatureDoubleMove(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isFeatureDoubleMove@CvUnit@@QBE_NW4FeatureTypes@@@Z ; CvUnit::isFeatureDoubleMove
	mov	BYTE PTR _bResult$[ebp], al

; 4191 : 
; 4192 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4193 : 	return 1;

	mov	eax, 1

; 4194 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsFeatureDoubleMove
_TEXT	ENDS
EXTRN	?getScriptData@CvUnit@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CvUnit::getScriptData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv78 = -56						; size = 4
tv79 = -52						; size = 4
$T225830 = -48						; size = 28
_pkUnit$ = -20						; size = 4
_szScriptData$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScriptData, COMDAT

; 4198 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 4199 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4200 : 	const char* szScriptData = pkUnit->getScriptData().c_str();

	lea	ecx, DWORD PTR $T225830[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getScriptData@CvUnit@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CvUnit::getScriptData
	mov	DWORD PTR tv79[ebp], eax
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv78[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv78[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szScriptData$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T225830[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4201 : 
; 4202 : 	lua_pushstring(L, szScriptData);

	mov	eax, DWORD PTR _szScriptData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 4203 : 	return 1;

	mov	eax, 1

; 4204 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR $T225830[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScriptData
EXTRN	?setScriptData@CvUnit@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvUnit::setScriptData
; Function compile flags: /Odtp
;	COMDAT ?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv88 = -16						; size = 4
$T225840 = -12						; size = 4
_pkUnit$ = -8						; size = 4
_strNewValue$ = -4					; size = 4
_L$ = 8							; size = 4
?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetScriptData, COMDAT

; 4208 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 4209 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4210 : 	const char* strNewValue = lua_tostring(L, 2);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tolstring
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _strNewValue$[ebp], eax

; 4211 : 
; 4212 : 	pkUnit->setScriptData(strNewValue);

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T225840[ebp], esp
	mov	edx, DWORD PTR _strNewValue$[ebp]
	push	edx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setScriptData@CvUnit@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvUnit::setScriptData

; 4213 : 	return 0;

	xor	eax, eax

; 4214 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetScriptData
_TEXT	ENDS
EXTRN	?getScenarioData@CvUnit@@QBEHXZ:PROC		; CvUnit::getScenarioData
; Function compile flags: /Odtp
;	COMDAT ?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iData$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScenarioData, COMDAT

; 4218 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4219 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4220 : 	const int iData = pkUnit->getScenarioData();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getScenarioData@CvUnit@@QBEHXZ		; CvUnit::getScenarioData
	mov	DWORD PTR _iData$[ebp], eax

; 4221 : 
; 4222 : 	lua_pushinteger(L, iData);

	mov	ecx, DWORD PTR _iData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4223 : 	return 1;

	mov	eax, 1

; 4224 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScenarioData
_TEXT	ENDS
EXTRN	?setScenarioData@CvUnit@@QAEXH@Z:PROC		; CvUnit::setScenarioData
; Function compile flags: /Odtp
;	COMDAT ?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iNewData$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetScenarioData, COMDAT

; 4228 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4229 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4230 : 	const int iNewData = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iNewData$[ebp], eax

; 4231 : 
; 4232 : 	pkUnit->setScenarioData(iNewData);

	mov	edx, DWORD PTR _iNewData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setScenarioData@CvUnit@@QAEXH@Z	; CvUnit::setScenarioData

; 4233 : 	return 0;

	xor	eax, eax

; 4234 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetScenarioData
_TEXT	ENDS
EXTRN	?getExtraTerrainAttackPercent@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::getExtraTerrainAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraTerrainAttackPercent, COMDAT

; 4238 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4239 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4240 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4241 : 
; 4242 : 	const int iResult = pkUnit->getExtraTerrainAttackPercent(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraTerrainAttackPercent@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::getExtraTerrainAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 4243 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4244 : 	return 1;

	mov	eax, 1

; 4245 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraTerrainAttackPercent
_TEXT	ENDS
EXTRN	?getExtraTerrainDefensePercent@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::getExtraTerrainDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraTerrainDefensePercent, COMDAT

; 4249 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4250 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4251 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4252 : 
; 4253 : 	const int iResult = pkUnit->getExtraTerrainDefensePercent(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraTerrainDefensePercent@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::getExtraTerrainDefensePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 4254 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4255 : 	return 1;

	mov	eax, 1

; 4256 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraTerrainDefensePercent
_TEXT	ENDS
EXTRN	?getExtraFeatureAttackPercent@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::getExtraFeatureAttackPercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFeatureAttackPercent, COMDAT

; 4260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4261 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4262 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4263 : 
; 4264 : 	const int iResult = pkUnit->getExtraFeatureAttackPercent(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraFeatureAttackPercent@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::getExtraFeatureAttackPercent
	mov	DWORD PTR _iResult$[ebp], eax

; 4265 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4266 : 	return 1;

	mov	eax, 1

; 4267 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFeatureAttackPercent
_TEXT	ENDS
EXTRN	?getExtraFeatureDefensePercent@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::getExtraFeatureDefensePercent
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFeatureDefensePercent, COMDAT

; 4271 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4272 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4273 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4274 : 
; 4275 : 	const int iResult = pkUnit->getExtraFeatureDefensePercent(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraFeatureDefensePercent@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::getExtraFeatureDefensePercent
	mov	DWORD PTR _iResult$[ebp], eax

; 4276 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4277 : 	return 1;

	mov	eax, 1

; 4278 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFeatureDefensePercent
_TEXT	ENDS
EXTRN	?getExtraUnitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z:PROC ; CvUnit::getExtraUnitCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraUnitCombatModifier, COMDAT

; 4282 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4283 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4284 : 	const UnitCombatTypes eIndex = (UnitCombatTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4285 : 
; 4286 : 	const int iResult = pkUnit->getExtraUnitCombatModifier(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getExtraUnitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z ; CvUnit::getExtraUnitCombatModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 4287 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4288 : 	return 1;

	mov	eax, 1

; 4289 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraUnitCombatModifier
_TEXT	ENDS
EXTRN	?getUnitClassModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::getUnitClassModifier
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_eIndex$ = -8						; size = 4
_iResult$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitClassModifier, COMDAT

; 4293 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4294 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4295 : 	const UnitClassTypes eIndex = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4296 : 
; 4297 : 	const int iResult = pkUnit->getUnitClassModifier(eIndex);

	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitClassModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::getUnitClassModifier
	mov	DWORD PTR _iResult$[ebp], eax

; 4298 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR _iResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4299 : 	return 1;

	mov	eax, 1

; 4300 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitClassModifier
_TEXT	ENDS
EXTRN	?canAcquirePromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::canAcquirePromotion
; Function compile flags: /Odtp
;	COMDAT ?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_ePromotion$ = -8					; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanAcquirePromotion, COMDAT

; 4304 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4305 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4306 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePromotion$[ebp], eax

; 4307 : 	const bool bResult = pkUnit->canAcquirePromotion(ePromotion);

	mov	edx, DWORD PTR _ePromotion$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAcquirePromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::canAcquirePromotion
	mov	BYTE PTR _bResult$[ebp], al

; 4308 : 
; 4309 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4310 : 	return 1;

	mov	eax, 1

; 4311 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanAcquirePromotion
_TEXT	ENDS
EXTRN	?canAcquirePromotionAny@CvUnit@@QBE_NXZ:PROC	; CvUnit::canAcquirePromotionAny
; Function compile flags: /Odtp
;	COMDAT ?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanAcquirePromotionAny, COMDAT

; 4315 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4316 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4317 : 	const bool bResult = pkUnit->canAcquirePromotionAny();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?canAcquirePromotionAny@CvUnit@@QBE_NXZ	; CvUnit::canAcquirePromotionAny
	mov	BYTE PTR _bResult$[ebp], al

; 4318 : 
; 4319 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4320 : 	return 1;

	mov	eax, 1

; 4321 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanAcquirePromotionAny
_TEXT	ENDS
EXTRN	?isPromotionValid@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isPromotionValid
; Function compile flags: /Odtp
;	COMDAT ?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_ePromotion$ = -8					; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsPromotionValid, COMDAT

; 4325 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4326 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4327 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePromotion$[ebp], eax

; 4328 : 	const bool bResult = pkUnit->isPromotionValid(ePromotion);

	mov	edx, DWORD PTR _ePromotion$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isPromotionValid@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isPromotionValid
	mov	BYTE PTR _bResult$[ebp], al

; 4329 : 
; 4330 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4331 : 	return 1;

	mov	eax, 1

; 4332 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsPromotionValid
_TEXT	ENDS
EXTRN	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isHasPromotion
; Function compile flags: /Odtp
;	COMDAT ?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_ePromotion$ = -8					; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHasPromotion, COMDAT

; 4336 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4337 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4338 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _ePromotion$[ebp], eax

; 4339 : 	const bool bResult = pkUnit->isHasPromotion(ePromotion);

	mov	edx, DWORD PTR _ePromotion$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isHasPromotion
	mov	BYTE PTR _bResult$[ebp], al

; 4340 : 
; 4341 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4342 : 	return 1;

	mov	eax, 1

; 4343 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHasPromotion
_TEXT	ENDS
EXTRN	?setHasPromotion@CvUnit@@QAEXW4PromotionTypes@@_N@Z:PROC ; CvUnit::setHasPromotion
; Function compile flags: /Odtp
;	COMDAT ?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bNewValue$ = -5					; size = 1
_eIndex$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetHasPromotion, COMDAT

; 4347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4348 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4349 : 	const PromotionTypes eIndex = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eIndex$[ebp], eax

; 4350 : 	const bool bNewValue = lua_toboolean(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[ebp], al

; 4351 : 
; 4352 : 	pkUnit->setHasPromotion(eIndex, bNewValue);

	movzx	ecx, BYTE PTR _bNewValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?setHasPromotion@CvUnit@@QAEXW4PromotionTypes@@_N@Z ; CvUnit::setHasPromotion

; 4353 : 	return 0;

	xor	eax, eax

; 4354 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetHasPromotion
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T225873 = -12						; size = 4
_pkUnit$ = -8						; size = 4
_eReligion$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetReligion, COMDAT

; 4358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4359 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4360 : 	ReligionTypes eReligion = pkUnit->GetReligionData()->GetReligion();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+1888]
	mov	DWORD PTR $T225873[ebp], edx
	mov	eax, DWORD PTR $T225873[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _eReligion$[ebp], ecx

; 4361 : 	lua_pushinteger(L, (int)eReligion);

	mov	edx, DWORD PTR _eReligion$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 4362 : 
; 4363 : 	return 1;

	mov	eax, 1

; 4364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetReligion
_TEXT	ENDS
EXTRN	?GetConversionStrength@CvUnit@@QBEHXZ:PROC	; CvUnit::GetConversionStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iReligiousStrength$ = -4				; size = 4
_L$ = 8							; size = 4
?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetConversionStrength, COMDAT

; 4368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4369 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4370 : 	int iReligiousStrength = pkUnit->GetConversionStrength();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetConversionStrength@CvUnit@@QBEHXZ	; CvUnit::GetConversionStrength
	mov	DWORD PTR _iReligiousStrength$[ebp], eax

; 4371 : 
; 4372 : 	lua_pushinteger(L, iReligiousStrength);

	mov	ecx, DWORD PTR _iReligiousStrength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4373 : 
; 4374 : 	return 1;

	mov	eax, 1

; 4375 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetConversionStrength
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T225884 = -12						; size = 4
_pkUnit$ = -8						; size = 4
_iReligiousStrength$ = -4				; size = 4
_L$ = 8							; size = 4
?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetSpreadsLeft, COMDAT

; 4379 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4380 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4381 : 	int iReligiousStrength = pkUnit->GetReligionData()->GetSpreadsLeft();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	mov	edx, DWORD PTR [ecx+1888]
	mov	DWORD PTR $T225884[ebp], edx
	mov	eax, DWORD PTR $T225884[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _iReligiousStrength$[ebp], ecx

; 4382 : 	lua_pushinteger(L, iReligiousStrength);

	mov	edx, DWORD PTR _iReligiousStrength$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushinteger
	add	esp, 8

; 4383 : 
; 4384 : 	return 1;

	mov	eax, 1

; 4385 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetSpreadsLeft
_TEXT	ENDS
EXTRN	?GetNumFollowersAfterSpread@CvUnit@@QBEHXZ:PROC	; CvUnit::GetNumFollowersAfterSpread
; Function compile flags: /Odtp
;	COMDAT ?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iData$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumFollowersAfterSpread, COMDAT

; 4389 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4390 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4391 : 	const int iData = pkUnit->GetNumFollowersAfterSpread();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetNumFollowersAfterSpread@CvUnit@@QBEHXZ ; CvUnit::GetNumFollowersAfterSpread
	mov	DWORD PTR _iData$[ebp], eax

; 4392 : 
; 4393 : 	lua_pushinteger(L, iData);

	mov	ecx, DWORD PTR _iData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4394 : 	return 1;

	mov	eax, 1

; 4395 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumFollowersAfterSpread
_TEXT	ENDS
EXTRN	?GetMajorityReligionAfterSpread@CvUnit@@QBE?AW4ReligionTypes@@XZ:PROC ; CvUnit::GetMajorityReligionAfterSpread
; Function compile flags: /Odtp
;	COMDAT ?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iData$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMajorityReligionAfterSpread, COMDAT

; 4399 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4400 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4401 : 	const int iData = pkUnit->GetMajorityReligionAfterSpread();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetMajorityReligionAfterSpread@CvUnit@@QBE?AW4ReligionTypes@@XZ ; CvUnit::GetMajorityReligionAfterSpread
	mov	DWORD PTR _iData$[ebp], eax

; 4402 : 
; 4403 : 	lua_pushinteger(L, iData);

	mov	ecx, DWORD PTR _iData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4404 : 	return 1;

	mov	eax, 1

; 4405 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMajorityReligionAfterSpread
_TEXT	ENDS
EXTRN	?GetTourismBlastStrength@CvUnit@@QBEHXZ:PROC	; CvUnit::GetTourismBlastStrength
; Function compile flags: /Odtp
;	COMDAT ?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iStrength$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetTourismBlastStrength, COMDAT

; 4409 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4410 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4411 : 	int iStrength = pkUnit->GetTourismBlastStrength();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetTourismBlastStrength@CvUnit@@QBEHXZ	; CvUnit::GetTourismBlastStrength
	mov	DWORD PTR _iStrength$[ebp], eax

; 4412 : 
; 4413 : 	lua_pushinteger(L, iStrength);

	mov	ecx, DWORD PTR _iStrength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4414 : 
; 4415 : 	return 1;

	mov	eax, 1

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetTourismBlastStrength
_TEXT	ENDS
EXTRN	?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z:PROC ; CultureHelpers::GetGreatWorkSlot
EXTRN	?GetGreatWork@CvUnit@@QBE?AW4GreatWorkType@@XZ:PROC ; CvUnit::GetGreatWork
; Function compile flags: /Odtp
;	COMDAT ?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iData$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGreatWorkSlotType, COMDAT

; 4420 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4421 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4422 : 	const int iData = (int)CultureHelpers::GetGreatWorkSlot(pkUnit->GetGreatWork());

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetGreatWork@CvUnit@@QBE?AW4GreatWorkType@@XZ ; CvUnit::GetGreatWork
	push	eax
	call	?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkSlot
	add	esp, 4
	mov	DWORD PTR _iData$[ebp], eax

; 4423 : 
; 4424 : 	lua_pushinteger(L, iData);

	mov	ecx, DWORD PTR _iData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4425 : 	return 1;

	mov	eax, 1

; 4426 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGreatWorkSlotType
_TEXT	ENDS
EXTRN	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z:PROC ; CvUnitCombat::AttackRanged
; Function compile flags: /Odtp
;	COMDAT ?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_x$ = -8						; size = 4
_y$ = -4						; size = 4
_L$ = 8							; size = 4
?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lRangeStrike, COMDAT

; 4430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4431 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4432 : 	const int x = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 4433 : 	const int y = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _y$[ebp], eax

; 4434 : 
; 4435 : 	if(pkUnit)

	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	SHORT $LN1@lRangeStri

; 4436 : 		CvUnitCombat::AttackRanged(*pkUnit, x, y, CvUnitCombat::ATTACK_OPTION_NONE);

	push	0
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pkUnit$[ebp]
	push	edx
	call	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
	add	esp, 16					; 00000010H
$LN1@lRangeStri:

; 4437 : 	return 0;

	xor	eax, eax

; 4438 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lRangeStrike
_TEXT	ENDS
EXTRN	?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetUnitFlagIconOffset
EXTRN	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ:PROC	; CvUnit::getUnitInfo
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_unitInfo$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitFlagIconOffset, COMDAT

; 4442 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4443 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4444 : 	CvUnitEntry& unitInfo = pkUnit->getUnitInfo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	DWORD PTR _unitInfo$[ebp], eax

; 4445 : 	lua_pushinteger(L, unitInfo.GetUnitFlagIconOffset());

	mov	ecx, DWORD PTR _unitInfo$[ebp]
	call	?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetUnitFlagIconOffset
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4446 : 
; 4447 : 	return 1;

	mov	eax, 1

; 4448 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitFlagIconOffset
_TEXT	ENDS
EXTRN	?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetUnitPortraitOffset
; Function compile flags: /Odtp
;	COMDAT ?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_unitInfo$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitPortraitOffset, COMDAT

; 4452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4453 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4454 : 	CvUnitEntry& unitInfo = pkUnit->getUnitInfo();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo
	mov	DWORD PTR _unitInfo$[ebp], eax

; 4455 : 	lua_pushinteger(L, unitInfo.GetUnitPortraitOffset());

	mov	ecx, DWORD PTR _unitInfo$[ebp]
	call	?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetUnitPortraitOffset
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 4456 : 
; 4457 : 	return 1;

	mov	eax, 1

; 4458 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitPortraitOffset
_TEXT	ENDS
EXTRN	?GetActivityType@CvUnit@@QBE?AW4ActivityTypes@@XZ:PROC ; CvUnit::GetActivityType
; Function compile flags: /Odtp
;	COMDAT ?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iActivityType$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetActivityType, COMDAT

; 4463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4464 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4465 : 
; 4466 : 	int iActivityType = NO_ACTIVITY;

	mov	DWORD PTR _iActivityType$[ebp], -1

; 4467 : 	if(pkUnit)

	cmp	DWORD PTR _pkUnit$[ebp], 0
	je	SHORT $LN1@lGetActivi

; 4468 : 	{
; 4469 : 		iActivityType = pkUnit->GetActivityType();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?GetActivityType@CvUnit@@QBE?AW4ActivityTypes@@XZ ; CvUnit::GetActivityType
	mov	DWORD PTR _iActivityType$[ebp], eax
$LN1@lGetActivi:

; 4470 : 	}
; 4471 : 	lua_pushinteger(L, iActivityType);

	mov	ecx, DWORD PTR _iActivityType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushinteger
	add	esp, 8

; 4472 : 
; 4473 : 	return 1;

	mov	eax, 1

; 4474 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetActivityType
_TEXT	ENDS
EXTRN	?ReadyToMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::ReadyToMove
; Function compile flags: /Odtp
;	COMDAT ?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsReadyToMove, COMDAT

; 4479 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4480 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4481 : 	bool bResult = pkUnit->ReadyToMove();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?ReadyToMove@CvUnit@@QBE_NXZ		; CvUnit::ReadyToMove
	mov	BYTE PTR _bResult$[ebp], al

; 4482 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4483 : 
; 4484 : 	return 1;

	mov	eax, 1

; 4485 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsReadyToMove
_TEXT	ENDS
EXTRN	?IsBusy@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsBusy
; Function compile flags: /Odtp
;	COMDAT ?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsBusy, COMDAT

; 4489 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4490 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4491 : 	bool bResult = pkUnit->IsBusy();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsBusy@CvUnit@@QBE_NXZ			; CvUnit::IsBusy
	mov	BYTE PTR _bResult$[ebp], al

; 4492 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4493 : 
; 4494 : 	return 1;

	mov	eax, 1

; 4495 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsBusy
_TEXT	ENDS
EXTRN	?PushMission@CvUnit@@QAEXW4MissionTypes@@HHH_N1W4MissionAITypes@@PAVCvPlot@@PAV1@@Z:PROC ; CvUnit::PushMission
; Function compile flags: /Odtp
;	COMDAT ?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -40						; size = 4
_bManual$ = -33						; size = 1
_eMissionAI$ = -32					; size = 4
_pkMissionAIUnit$ = -28					; size = 4
_pkMissionAIPlot$ = -24					; size = 4
_eMission$ = -20					; size = 4
_bAppend$ = -13						; size = 1
_iFlags$ = -12						; size = 4
_iData1$ = -8						; size = 4
_iData2$ = -4						; size = 4
_L$ = 8							; size = 4
?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lPushMission, COMDAT

; 4500 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 4501 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4502 : 	const MissionTypes eMission = (MissionTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eMission$[ebp], eax

; 4503 : 	const int iData1 = luaL_optint(L, 3, -1);

	push	-1
	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iData1$[ebp], eax

; 4504 : 	const int iData2 = luaL_optint(L, 4, -1);

	push	-1
	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iData2$[ebp], eax

; 4505 : 	const int iFlags = luaL_optint(L, 5, 0);

	push	0
	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iFlags$[ebp], eax

; 4506 : 	const bool bAppend = luaL_optint(L, 6, 0);

	push	0
	push	6
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bAppend$[ebp], al

; 4507 : 	const bool bManual = luaL_optint(L, 7, 0);

	push	0
	push	7
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bManual$[ebp], dl

; 4508 : 	const MissionAITypes eMissionAI = (MissionAITypes)luaL_optint(L, 8, NO_MISSIONAI);

	push	-1
	push	8
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _eMissionAI$[ebp], eax

; 4509 : 	CvPlot* pkMissionAIPlot = CvLuaPlot::GetInstance(L, 9, false);

	push	0
	push	9
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkMissionAIPlot$[ebp], eax

; 4510 : 	CvUnit* pkMissionAIUnit = CvLuaUnit::GetInstance(L, 10, false);

	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkMissionAIUnit$[ebp], eax

; 4511 : 
; 4512 : 	pkUnit->PushMission(eMission, iData1, iData2, iFlags, bAppend, bManual, eMissionAI, pkMissionAIPlot, pkMissionAIUnit);

	mov	eax, DWORD PTR _pkMissionAIUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkMissionAIPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eMissionAI$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bManual$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bAppend$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _iData2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iData1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eMission$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?PushMission@CvUnit@@QAEXW4MissionTypes@@HHH_N1W4MissionAITypes@@PAVCvPlot@@PAV1@@Z ; CvUnit::PushMission

; 4513 : 
; 4514 : 	return 0;

	xor	eax, eax

; 4515 : };

	mov	esp, ebp
	pop	ebp
	ret	0
?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lPushMission
_TEXT	ENDS
EXTRN	?PopMission@CvUnit@@QAEXXZ:PROC			; CvUnit::PopMission
; Function compile flags: /Odtp
;	COMDAT ?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -4						; size = 4
_L$ = 8							; size = 4
?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lPopMission, COMDAT

; 4519 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 4520 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4521 : 	pkUnit->PopMission();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?PopMission@CvUnit@@QAEXXZ		; CvUnit::PopMission

; 4522 : 
; 4523 : 	return 0;

	xor	eax, eax

; 4524 : };

	mov	esp, ebp
	pop	ebp
	ret	0
?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lPopMission
_TEXT	ENDS
EXTRN	?LastMissionPlot@CvUnit@@QAEPAVCvPlot@@XZ:PROC	; CvUnit::LastMissionPlot
; Function compile flags: /Odtp
;	COMDAT ?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lLastMissionPlot, COMDAT

; 4528 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4529 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4530 : 	CvPlot* pkPlot = pkUnit->LastMissionPlot();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?LastMissionPlot@CvUnit@@QAEPAVCvPlot@@XZ ; CvUnit::LastMissionPlot
	mov	DWORD PTR _pkPlot$[ebp], eax

; 4531 : 	CvLuaPlot::Push(L, pkPlot);

	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8

; 4532 : 
; 4533 : 	return 1;

	mov	eax, 1

; 4534 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lLastMissionPlot
_TEXT	ENDS
EXTRN	?CanStartMission@CvUnit@@QAE_NHHHPAVCvPlot@@_N@Z:PROC ; CvUnit::CanStartMission
; Function compile flags: /Odtp
;	COMDAT ?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -28						; size = 4
_iMission$ = -24					; size = 4
_bUseCache$ = -18					; size = 1
_bResult$ = -17						; size = 1
_iData1$ = -16						; size = 4
_bTestVisible$ = -9					; size = 1
_iData2$ = -8						; size = 4
_pkPlot$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanStartMission, COMDAT

; 4538 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 4539 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4540 : 	const int iMission = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iMission$[ebp], eax

; 4541 : 	const int iData1 = lua_tointeger(L, 3);

	push	3
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iData1$[ebp], eax

; 4542 : 	const int iData2 = lua_tointeger(L, 4);

	push	4
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iData2$[ebp], eax

; 4543 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 5, false);

	push	0
	push	5
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 4544 : 	const bool bTestVisible = luaL_optint(L, 6, 0);

	push	0
	push	6
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[ebp], al

; 4545 : #ifndef AUI_WARNING_FIXES
; 4546 : 	const bool bUseCache = luaL_optint(L, 7, 0);

	push	0
	push	7
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bUseCache$[ebp], dl

; 4547 : #endif
; 4548 : 
; 4549 : 	const bool bResult = pkUnit->CanStartMission(iMission, iData1, iData2, pkPlot, bTestVisible);

	movzx	eax, BYTE PTR _bTestVisible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pkPlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iData2$[ebp]
	push	edx
	mov	eax, DWORD PTR _iData1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMission$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?CanStartMission@CvUnit@@QAE_NHHHPAVCvPlot@@_N@Z ; CvUnit::CanStartMission
	mov	BYTE PTR _bResult$[ebp], al

; 4550 : 	lua_pushboolean(L, bResult);

	movzx	edx, BYTE PTR _bResult$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushboolean
	add	esp, 8

; 4551 : 	return 1;

	mov	eax, 1

; 4552 : };

	mov	esp, ebp
	pop	ebp
	ret	0
?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanStartMission
_TEXT	ENDS
EXTRN	?ExecuteSpecialExploreMove@CvHomelandAI@@QAE_NPAVCvUnit@@PAVCvPlot@@@Z:PROC ; CvHomelandAI::ExecuteSpecialExploreMove
EXTRN	?GetHomelandAI@CvPlayer@@QBEPAVCvHomelandAI@@XZ:PROC ; CvPlayer::GetHomelandAI
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Odtp
;	COMDAT ?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T225926 = -20						; size = 4
_pkUnit$ = -16						; size = 4
_bResult$ = -9						; size = 1
_pkPlot$ = -8						; size = 4
_kPlayer$ = -4						; size = 4
_L$ = 8							; size = 4
?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lExecuteSpecialExploreMove, COMDAT

; 4556 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 4557 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4558 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	0
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkPlot$[ebp], eax

; 4559 : 
; 4560 : 	CvPlayerAI& kPlayer = GET_PLAYER(pkUnit->getOwner());

	mov	edx, DWORD PTR _pkUnit$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR $T225926[ebp], eax
	mov	ecx, DWORD PTR $T225926[ebp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$[ebp], ecx

; 4561 : 
; 4562 : 	const bool bResult = kPlayer.GetHomelandAI()->ExecuteSpecialExploreMove(pkUnit, pkPlot);

	mov	edx, DWORD PTR _pkPlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pkUnit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPlayer$[ebp]
	call	?GetHomelandAI@CvPlayer@@QBEPAVCvHomelandAI@@XZ ; CvPlayer::GetHomelandAI
	mov	ecx, eax
	call	?ExecuteSpecialExploreMove@CvHomelandAI@@QAE_NPAVCvUnit@@PAVCvPlot@@@Z ; CvHomelandAI::ExecuteSpecialExploreMove
	mov	BYTE PTR _bResult$[ebp], al

; 4563 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4564 : 	return 1;

	mov	eax, 1

; 4565 : };

	mov	esp, ebp
	pop	ebp
	ret	0
?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lExecuteSpecialExploreMove
_TEXT	ENDS
PUBLIC	?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z	; CvUnit::SetDeployFromOperationTurn
; Function compile flags: /Odtp
;	COMDAT ?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_iTurn$ = -4						; size = 4
_L$ = 8							; size = 4
?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetDeployFromOperationTurn, COMDAT

; 4569 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 4570 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4571 : 	int iTurn = lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _iTurn$[ebp], eax

; 4572 : 
; 4573 : 	pkUnit->SetDeployFromOperationTurn(iTurn);

	mov	edx, DWORD PTR _iTurn$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z ; CvUnit::SetDeployFromOperationTurn

; 4574 : 	return 0;

	xor	eax, eax

; 4575 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetDeployFromOperationTurn
_TEXT	ENDS
EXTRN	?IsHigherTechThan@CvUnit@@QBE_NW4UnitTypes@@@Z:PROC ; CvUnit::IsHigherTechThan
; Function compile flags: /Odtp
;	COMDAT ?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_eOtherUnit$ = -4					; size = 4
_L$ = 8							; size = 4
?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHigherTechThan, COMDAT

; 4579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4580 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4581 : 	UnitTypes eOtherUnit = (UnitTypes)lua_tointeger(L, 2);

	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8
	mov	DWORD PTR _eOtherUnit$[ebp], eax

; 4582 : 	const bool bResult = pkUnit->IsHigherTechThan(eOtherUnit);

	mov	edx, DWORD PTR _eOtherUnit$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsHigherTechThan@CvUnit@@QBE_NW4UnitTypes@@@Z ; CvUnit::IsHigherTechThan
	mov	BYTE PTR _bResult$[ebp], al

; 4583 : 
; 4584 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4585 : 	return 1;

	mov	eax, 1

; 4586 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHigherTechThan
_TEXT	ENDS
EXTRN	?IsLargerCivThan@CvUnit@@QBE_NPBV1@@Z:PROC	; CvUnit::IsLargerCivThan
; Function compile flags: /Odtp
;	COMDAT ?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -12						; size = 4
_bResult$ = -5						; size = 1
_pkOtherUnit$ = -4					; size = 4
_L$ = 8							; size = 4
?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsLargerCivThan, COMDAT

; 4590 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 4591 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4592 : 	CvUnit* pkOtherUnit = CvLuaUnit::GetInstance(L, 2);

	push	1
	push	2
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkOtherUnit$[ebp], eax

; 4593 : 	const bool bResult = pkUnit->IsLargerCivThan(pkOtherUnit);

	mov	edx, DWORD PTR _pkOtherUnit$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsLargerCivThan@CvUnit@@QBE_NPBV1@@Z	; CvUnit::IsLargerCivThan
	mov	BYTE PTR _bResult$[ebp], al

; 4594 : 
; 4595 : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR _bResult$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 4596 : 	return 1;

	mov	eax, 1

; 4597 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsLargerCivThan
_TEXT	ENDS
EXTRN	?isRangedSupportFire@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRangedSupportFire
; Function compile flags: /Odtp
;	COMDAT ?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangedSupportFire, COMDAT

; 4601 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4602 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4603 : 	const bool bResult = pkUnit->isRangedSupportFire();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire
	mov	BYTE PTR _bResult$[ebp], al

; 4604 : 
; 4605 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4606 : 	return 1;

	mov	eax, 1

; 4607 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangedSupportFire
_TEXT	ENDS
EXTRN	?IsPlunderBlockedByOpposingTrait@CvUnit@@QBE_NXZ:PROC ; CvUnit::IsPlunderBlockedByOpposingTrait
; Function compile flags: /Odtp
;	COMDAT ?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkUnit$ = -8						; size = 4
_bResult$ = -1						; size = 1
_L$ = 8							; size = 4
?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait, COMDAT

; 4612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 4613 : 	CvUnit* pkUnit = GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkUnit$[ebp], eax

; 4614 : 	const bool bResult = pkUnit->IsPlunderBlockedByOpposingTrait();

	mov	ecx, DWORD PTR _pkUnit$[ebp]
	call	?IsPlunderBlockedByOpposingTrait@CvUnit@@QBE_NXZ ; CvUnit::IsPlunderBlockedByOpposingTrait
	mov	BYTE PTR _bResult$[ebp], al

; 4615 : 
; 4616 : 	lua_pushboolean(L, bResult);

	movzx	ecx, BYTE PTR _bResult$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushboolean
	add	esp, 8

; 4617 : 	return 1;

	mov	eax, 1

; 4618 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
_TEXT	ENDS
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 146  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		if(m_target) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN2@FObjectHan:

; 150  : 		}
; 151  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??_C@_07NHABFFHN@__index?$AA@			; `string'
PUBLIC	??_C@_0L@GCADIOHF@__instance?$AA@		; `string'
PUBLIC	??_C@_01MHEDDDHA@v?$AA@				; `string'
PUBLIC	??_C@_06BPGFKLEK@__mode?$AA@			; `string'
PUBLIC	??_C@_0M@CEBPKMAI@__instances?$AA@		; `string'
EXTRN	_lua_remove:PROC
EXTRN	_lua_pushlightuserdata:PROC
EXTRN	_lua_rawget:PROC
EXTRN	?PushMethods@CvLuaArea@@SAXPAUlua_State@@H@Z:PROC ; CvLuaArea::PushMethods
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_getfield:PROC
EXTRN	?GetTypeName@CvLuaArea@@SAPBDXZ:PROC		; CvLuaArea::GetTypeName
;	COMDAT ??_C@_07NHABFFHN@__index?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
CONST	SEGMENT
??_C@_07NHABFFHN@__index?$AA@ DB '__index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCADIOHF@__instance?$AA@
CONST	SEGMENT
??_C@_0L@GCADIOHF@__instance?$AA@ DB '__instance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01MHEDDDHA@v?$AA@
CONST	SEGMENT
??_C@_01MHEDDDHA@v?$AA@ DB 'v', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPGFKLEK@__mode?$AA@
CONST	SEGMENT
??_C@_06BPGFKLEK@__mode?$AA@ DB '__mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEBPKMAI@__instances?$AA@
CONST	SEGMENT
??_C@_0M@CEBPKMAI@__instances?$AA@ DB '__instances', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z
_TEXT	SEGMENT
_instances_index$223625 = -8				; size = 4
_type_index$223624 = -4					; size = 4
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z PROC ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	cmp	DWORD PTR _pkType$[ebp], 0
	je	$LN4@Push

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaArea@@SAPBDXZ		; CvLuaArea::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN3@Push

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 59   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 63   : 			lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET ??_C@_06BPGFKLEK@__mode?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET ??_C@_01MHEDDDHA@v?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaArea@@SAPBDXZ		; CvLuaArea::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?PushMethods@CvLuaArea@@SAXPAUlua_State@@H@Z ; CvLuaArea::PushMethods
	add	esp, 8
$LN3@Push:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _type_index$223624[ebp], eax

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _instances_index$223625[ebp], eax

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN2@Push

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 97   : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET ??_C@_07NHABFFHN@__index?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 102  : 			lua_pushvalue(L, type_index);

	mov	ecx, DWORD PTR _type_index$223624[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	mov	edx, DWORD PTR _instances_index$223625[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8
$LN2@Push:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	mov	ecx, DWORD PTR _instances_index$223625[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8

; 114  : 		lua_remove(L, type_index);

	mov	eax, DWORD PTR _type_index$223624[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_remove
	add	esp, 8

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else

	jmp	SHORT $LN5@Push
$LN4@Push:

; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4
$LN5@Push:

; 122  : 	}
; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ENDP ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
_TEXT	ENDS
EXTRN	?PushMethods@CvLuaCity@@SAXPAUlua_State@@H@Z:PROC ; CvLuaCity::PushMethods
EXTRN	?GetTypeName@CvLuaCity@@SAPBDXZ:PROC		; CvLuaCity::GetTypeName
; Function compile flags: /Odtp
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z
_TEXT	SEGMENT
_instances_index$223641 = -8				; size = 4
_type_index$223640 = -4					; size = 4
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z PROC ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	cmp	DWORD PTR _pkType$[ebp], 0
	je	$LN4@Push@2

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaCity@@SAPBDXZ		; CvLuaCity::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN3@Push@2

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 59   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 63   : 			lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET ??_C@_06BPGFKLEK@__mode?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET ??_C@_01MHEDDDHA@v?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaCity@@SAPBDXZ		; CvLuaCity::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?PushMethods@CvLuaCity@@SAXPAUlua_State@@H@Z ; CvLuaCity::PushMethods
	add	esp, 8
$LN3@Push@2:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _type_index$223640[ebp], eax

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _instances_index$223641[ebp], eax

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN2@Push@2

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 97   : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET ??_C@_07NHABFFHN@__index?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 102  : 			lua_pushvalue(L, type_index);

	mov	ecx, DWORD PTR _type_index$223640[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	mov	edx, DWORD PTR _instances_index$223641[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8
$LN2@Push@2:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	mov	ecx, DWORD PTR _instances_index$223641[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8

; 114  : 		lua_remove(L, type_index);

	mov	eax, DWORD PTR _type_index$223640[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_remove
	add	esp, 8

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else

	jmp	SHORT $LN5@Push@2
$LN4@Push@2:

; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4
$LN5@Push@2:

; 122  : 	}
; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ENDP ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
_TEXT	ENDS
PUBLIC	??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@ ; `string'
EXTRN	?HandleMissingInstance@CvLuaCity@@SAXPAUlua_State@@@Z:PROC ; CvLuaCity::HandleMissingInstance
EXTRN	_lua_touserdata:PROC
;	COMDAT ??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@
CONST	SEGMENT
??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@ DB 'Not a val'
	DB	'id instance.  Either the instance is NULL or you used ''.'' i'
	DB	'nstead of '':''.', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_stack_size$ = -12					; size = 4
_pkInstance$ = -8					; size = 4
_bFail$ = -1						; size = 1
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 128  : 	const int stack_size = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _stack_size$[ebp], eax

; 129  : 	bool bFail = true;

	mov	BYTE PTR _bFail$[ebp], 1

; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;

	mov	DWORD PTR _pkInstance$[ebp], 0

; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 5
	jne	SHORT $LN5@GetInstanc

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 2
	jne	SHORT $LN5@GetInstanc

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$[ebp], eax

; 138  : 			if(pkInstance)

	cmp	DWORD PTR _pkInstance$[ebp], 0
	je	SHORT $LN5@GetInstanc

; 139  : 			{
; 140  : 				bFail = false;

	mov	BYTE PTR _bFail$[ebp], 0
$LN5@GetInstanc:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	mov	ecx, DWORD PTR _stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	movzx	eax, BYTE PTR _bFail$[ebp]
	test	eax, eax
	je	SHORT $LN2@GetInstanc
	movzx	ecx, BYTE PTR _bErrorOnFail$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@GetInstanc

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[ebp], 1
	jne	SHORT $LN1@GetInstanc

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET ??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc:

; 151  : 		Derived::HandleMissingInstance(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?HandleMissingInstance@CvLuaCity@@SAXPAUlua_State@@@Z ; CvLuaCity::HandleMissingInstance
	add	esp, 4
$LN2@GetInstanc:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, DWORD PTR _pkInstance$[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
_TEXT	ENDS
EXTRN	?PushMethods@CvLuaPlot@@SAXPAUlua_State@@H@Z:PROC ; CvLuaPlot::PushMethods
EXTRN	?GetTypeName@CvLuaPlot@@SAPBDXZ:PROC		; CvLuaPlot::GetTypeName
; Function compile flags: /Odtp
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z
_TEXT	SEGMENT
_instances_index$223674 = -8				; size = 4
_type_index$223673 = -4					; size = 4
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z PROC ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	cmp	DWORD PTR _pkType$[ebp], 0
	je	$LN4@Push@3

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaPlot@@SAPBDXZ		; CvLuaPlot::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN3@Push@3

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 59   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 63   : 			lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET ??_C@_06BPGFKLEK@__mode?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET ??_C@_01MHEDDDHA@v?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaPlot@@SAPBDXZ		; CvLuaPlot::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?PushMethods@CvLuaPlot@@SAXPAUlua_State@@H@Z ; CvLuaPlot::PushMethods
	add	esp, 8
$LN3@Push@3:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _type_index$223673[ebp], eax

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _instances_index$223674[ebp], eax

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN2@Push@3

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 97   : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET ??_C@_07NHABFFHN@__index?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 102  : 			lua_pushvalue(L, type_index);

	mov	ecx, DWORD PTR _type_index$223673[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	mov	edx, DWORD PTR _instances_index$223674[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8
$LN2@Push@3:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	mov	ecx, DWORD PTR _instances_index$223674[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8

; 114  : 		lua_remove(L, type_index);

	mov	eax, DWORD PTR _type_index$223673[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_remove
	add	esp, 8

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else

	jmp	SHORT $LN5@Push@3
$LN4@Push@3:

; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4
$LN5@Push@3:

; 122  : 	}
; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ENDP ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
_TEXT	ENDS
EXTRN	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z:PROC ; CvLuaPlot::HandleMissingInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_stack_size$ = -12					; size = 4
_pkInstance$ = -8					; size = 4
_bFail$ = -1						; size = 1
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 128  : 	const int stack_size = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _stack_size$[ebp], eax

; 129  : 	bool bFail = true;

	mov	BYTE PTR _bFail$[ebp], 1

; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;

	mov	DWORD PTR _pkInstance$[ebp], 0

; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 5
	jne	SHORT $LN5@GetInstanc@2

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 2
	jne	SHORT $LN5@GetInstanc@2

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$[ebp], eax

; 138  : 			if(pkInstance)

	cmp	DWORD PTR _pkInstance$[ebp], 0
	je	SHORT $LN5@GetInstanc@2

; 139  : 			{
; 140  : 				bFail = false;

	mov	BYTE PTR _bFail$[ebp], 0
$LN5@GetInstanc@2:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	mov	ecx, DWORD PTR _stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	movzx	eax, BYTE PTR _bFail$[ebp]
	test	eax, eax
	je	SHORT $LN2@GetInstanc@2
	movzx	ecx, BYTE PTR _bErrorOnFail$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@GetInstanc@2

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[ebp], 1
	jne	SHORT $LN1@GetInstanc@2

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET ??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc@2:

; 151  : 		Derived::HandleMissingInstance(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN2@GetInstanc@2:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, DWORD PTR _pkInstance$[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z
_TEXT	SEGMENT
_instances_index$223706 = -8				; size = 4
_type_index$223705 = -4					; size = 4
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	cmp	DWORD PTR _pkType$[ebp], 0
	je	$LN4@Push@4

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaUnit@@SAPBDXZ		; CvLuaUnit::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN3@Push@4

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 59   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 63   : 			lua_newtable(L);

	push	0
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET ??_C@_06BPGFKLEK@__mode?$AA@
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushstring
	add	esp, 8

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET ??_C@_01MHEDDDHA@v?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_rawset
	add	esp, 8

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushvalue
	add	esp, 8

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaUnit@@SAPBDXZ		; CvLuaUnit::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_gettop
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z ; CvLuaUnit::PushMethods
	add	esp, 8
$LN3@Push@4:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _type_index$223705[ebp], eax

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET ??_C@_0M@CEBPKMAI@__instances?$AA@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushstring
	add	esp, 8

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawget
	add	esp, 8

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _instances_index$223706[ebp], eax

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_rawget
	add	esp, 8

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	test	eax, eax
	jne	$LN2@Push@4

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_settop
	add	esp, 8

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 97   : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setfield
	add	esp, 12					; 0000000cH

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_createtable
	add	esp, 12					; 0000000cH

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET ??_C@_07NHABFFHN@__index?$AA@
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushstring
	add	esp, 8

; 102  : 			lua_pushvalue(L, type_index);

	mov	ecx, DWORD PTR _type_index$223705[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushvalue
	add	esp, 8

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_setmetatable
	add	esp, 8

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	mov	edx, DWORD PTR _pkType$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_pushlightuserdata
	add	esp, 8

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushvalue
	add	esp, 8

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	mov	edx, DWORD PTR _instances_index$223706[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_rawset
	add	esp, 8
$LN2@Push@4:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	mov	ecx, DWORD PTR _instances_index$223706[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_remove
	add	esp, 8

; 114  : 		lua_remove(L, type_index);

	mov	eax, DWORD PTR _type_index$223705[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_remove
	add	esp, 8

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else

	jmp	SHORT $LN5@Push@4
$LN4@Push@4:

; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_pushnil
	add	esp, 4
$LN5@Push@4:

; 122  : 	}
; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_stack_size$ = -12					; size = 4
_pkInstance$ = -8					; size = 4
_bFail$ = -1						; size = 1
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 128  : 	const int stack_size = lua_gettop(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_gettop
	add	esp, 4
	mov	DWORD PTR _stack_size$[ebp], eax

; 129  : 	bool bFail = true;

	mov	BYTE PTR _bFail$[ebp], 1

; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;

	mov	DWORD PTR _pkInstance$[ebp], 0

; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 5
	jne	SHORT $LN5@GetInstanc@3

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	push	OFFSET ??_C@_0L@GCADIOHF@__instance?$AA@
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_getfield
	add	esp, 12					; 0000000cH

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_type
	add	esp, 8
	cmp	eax, 2
	jne	SHORT $LN5@GetInstanc@3

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$[ebp], eax

; 138  : 			if(pkInstance)

	cmp	DWORD PTR _pkInstance$[ebp], 0
	je	SHORT $LN5@GetInstanc@3

; 139  : 			{
; 140  : 				bFail = false;

	mov	BYTE PTR _bFail$[ebp], 0
$LN5@GetInstanc@3:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	mov	ecx, DWORD PTR _stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	movzx	eax, BYTE PTR _bFail$[ebp]
	test	eax, eax
	je	SHORT $LN2@GetInstanc@3
	movzx	ecx, BYTE PTR _bErrorOnFail$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@GetInstanc@3

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[ebp], 1
	jne	SHORT $LN1@GetInstanc@3

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET ??_C@_0FD@PKCLFCLD@Not?5a?5valid?5instance?4?5?5Either?5th@
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc@3:

; 151  : 		Derived::HandleMissingInstance(L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z ; CvLuaUnit::HandleMissingInstance
	add	esp, 4
$LN2@GetInstanc@3:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, DWORD PTR _pkInstance$[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
_TEXT	ENDS
PUBLIC	?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluamethodwrapper.h
;	COMDAT ??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 131  : 	const int idx = Derived::GetStartingArgIndex();

	call	?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
	mov	DWORD PTR _idx$[ebp], eax

; 132  : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 133  : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx)));

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z ; CvLuaArgs::toValue<int>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z ; CvLuaArgs::pushValue<bool>
	add	esp, 8

; 134  : 
; 135  : 	return 1;

	mov	eax, 1

; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluaargtemplates.h
_TEXT	ENDS
;	COMDAT ??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z PROC	; CvLuaArgs::toValue<int>, COMDAT

; 18   : 	{

	push	ebp
	mov	ebp, esp

; 19   : 		return lua_tointeger(L, idx);

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 20   : 	}

	pop	ebp
	ret	0
??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z ENDP	; CvLuaArgs::toValue<int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 1
??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z PROC	; CvLuaArgs::pushValue<bool>, COMDAT

; 44   : 	{

	push	ebp
	mov	ebp, esp

; 45   : 		lua_pushboolean(L, t);

	movzx	eax, BYTE PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 46   : 	}

	pop	ebp
	ret	0
??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z ENDP	; CvLuaArgs::pushValue<bool>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluamethodwrapper.h
_TEXT	ENDS
;	COMDAT ??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>, COMDAT

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 250  : 	const int idx = Derived::GetStartingArgIndex();

	call	?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
	mov	DWORD PTR _idx$[ebp], eax

; 251  : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 252  : 	(pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx), CvLuaArgs::toValue<arg2>(L, idx + 1), CvLuaArgs::toValue<arg3>(L, idx + 2));

	mov	ecx, DWORD PTR _idx$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z ; CvLuaArgs::toValue<int>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _idx$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z ; CvLuaArgs::toValue<int>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _idx$[ebp]
	push	edx
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z ; CvLuaArgs::toValue<enum CommandTypes>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]

; 253  : 	return 0;

	xor	eax, eax

; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z
_TEXT	SEGMENT
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>, COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z ; CvLuaArgs::pushValue<bool>
	add	esp, 8

; 72   : 
; 73   : 	return 1;

	mov	eax, 1

; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z
_TEXT	SEGMENT
_idx$ = -8						; size = 4
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>, COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 79   : 	const int idx = Derived::GetStartingArgIndex();

	call	?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
	mov	DWORD PTR _idx$[ebp], eax

; 80   : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 81   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx)));

	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _L$[ebp]
	push	edx
	call	??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z ; CvLuaArgs::toValue<CvPlot const *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z ; CvLuaArgs::pushValue<bool>
	add	esp, 8

; 82   : 
; 83   : 	return 1;

	mov	eax, 1

; 84   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z
_TEXT	SEGMENT
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>, COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z ; CvLuaArgs::pushValue<int>
	add	esp, 8

; 72   : 
; 73   : 	return 1;

	mov	eax, 1

; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluaargtemplates.h
_TEXT	ENDS
;	COMDAT ??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z PROC	; CvLuaArgs::pushValue<int>, COMDAT

; 38   : 	{

	push	ebp
	mov	ebp, esp

; 39   : 		lua_pushinteger(L, t);

	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 40   : 	}

	pop	ebp
	ret	0
??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z ENDP	; CvLuaArgs::pushValue<int>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluamethodwrapper.h
_TEXT	ENDS
;	COMDAT ??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z
_TEXT	SEGMENT
_pkType$ = -4						; size = 4
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>, COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	push	1
	push	1
	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pkType$[ebp], eax

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, DWORD PTR _pkType$[ebp]
	call	DWORD PTR _func$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z ; CvLuaArgs::pushValue<enum PlayerTypes>
	add	esp, 8

; 72   : 
; 73   : 	return 1;

	mov	eax, 1

; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
_TEXT	ENDS
;	COMDAT ?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ
_TEXT	SEGMENT
?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex, COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp

; 159  : 	return 2;

	mov	eax, 2

; 160  : }

	pop	ebp
	ret	0
?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvluaargtemplates.h
_TEXT	ENDS
;	COMDAT ??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z PROC ; CvLuaArgs::toValue<enum CommandTypes>, COMDAT

; 11   : 	{

	push	ebp
	mov	ebp, esp

; 12   : 		//This is pretty unsafe, but common.
; 13   : 		//Assume T is a poorly designed enum =(
; 14   : 		return (T)lua_tointeger(L, idx);

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 15   : 	}

	pop	ebp
	ret	0
??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z ENDP ; CvLuaArgs::toValue<enum CommandTypes>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z PROC ; CvLuaArgs::toValue<CvPlot const *>, COMDAT

; 11   : 	{

	push	ebp
	mov	ebp, esp

; 12   : 		//This is pretty unsafe, but common.
; 13   : 		//Assume T is a poorly designed enum =(
; 14   : 		return (T)lua_tointeger(L, idx);

	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 15   : 	}

	pop	ebp
	ret	0
??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z ENDP ; CvLuaArgs::toValue<CvPlot const *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z PROC ; CvLuaArgs::pushValue<enum PlayerTypes>, COMDAT

; 30   : 	{

	push	ebp
	mov	ebp, esp

; 31   : 		//This is pretty unsafe, but common.
; 32   : 		//Assume T is a poorly designed enum =(
; 33   : 		lua_pushinteger(L, t);

	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _L$[ebp]
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 34   : 	}

	pop	ebp
	ret	0
??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z ENDP ; CvLuaArgs::pushValue<enum PlayerTypes>
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunit.h
;	COMDAT ?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -96						; size = 4
$T226312 = -92						; size = 4
$T226294 = -88						; size = 4
$T226311 = -12						; size = 8
$T226310 = -4						; size = 4
_iTurn$ = 8						; size = 4
?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z PROC	; CvUnit::SetDeployFromOperationTurn, COMDAT
; _this$ = ecx

; 700  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 701  : 		m_iDeployFromOperationTurn = iTurn;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T226312[ebp], eax
	mov	ecx, DWORD PTR $T226312[ebp]
	mov	edx, DWORD PTR _iTurn$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN1@SetDeployF
	mov	eax, DWORD PTR $T226312[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _iTurn$[ebp]
	je	SHORT $LN1@SetDeployF
	mov	edx, DWORD PTR $T226312[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T226294[ebp], eax
	mov	ecx, DWORD PTR $T226312[ebp]
	mov	DWORD PTR $T226310[ebp], ecx
	lea	edx, DWORD PTR $T226310[ebp]
	push	edx
	lea	eax, DWORD PTR $T226311[ebp]
	push	eax
	mov	ecx, DWORD PTR $T226294[ebp]
	add	ecx, 20					; 00000014H
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
	mov	ecx, DWORD PTR $T226312[ebp]
	mov	edx, DWORD PTR _iTurn$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@SetDeployF:

; 702  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z ENDP	; CvUnit::SetDeployFromOperationTurn
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec
PUBLIC	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
EXTRN	__CxxThrowException@8:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z
_TEXT	SEGMENT
tv90 = -156						; size = 4
_this$ = -152						; size = 4
$T226448 = -148						; size = 4
$T226428 = -144						; size = 4
$T226413 = -140						; size = 4
$T226396 = -136						; size = 4
$T226383 = -132						; size = 4
$T226369 = -128						; size = 4
$T226324 = -45						; size = 1
$T226323 = -44						; size = 4
$T226322 = -37						; size = 1
$T226321 = -36						; size = 4
$T226320 = -29						; size = 1
$T226319 = -28						; size = 4
$T226318 = -24						; size = 4
$T226317 = -17						; size = 1
__Where$198767 = -16					; size = 4
__Trynode$ = -12					; size = 4
__Wherenode$ = -8					; size = 4
__Addleft$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 		_Nodeptr _Trynode = _Root();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Trynode$[ebp], edx

; 632  : 		_Nodeptr _Wherenode = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 633  : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$[ebp], 1

; 634  : 		while (!_Isnil(_Trynode))

$LN19@insert:
	mov	edx, DWORD PTR __Trynode$[ebp]
	movsx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN9@insert

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;

	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR __Addleft$[ebp], dl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

	movzx	eax, BYTE PTR __Addleft$[ebp]
	test	eax, eax
	je	SHORT $LN33@insert
	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN14@insert
$LN33@insert:
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv90[ebp], ecx
$LN14@insert:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx

; 640  : 			}

	jmp	SHORT $LN19@insert
$LN9@insert:

; 641  : 
; 642  : 		if (this->_Multi)

	xor	eax, eax
	je	SHORT $LN8@insert

; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T226317[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226318[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
	mov	DWORD PTR $T226369[ebp], eax
	mov	edx, DWORD PTR $T226369[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T226317[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert

; 644  : 		else

	jmp	$LN11@insert
$LN8@insert:

; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR __Where$198767[ebp], ecx

; 647  : 			if (!_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	jne	SHORT $LN6@insert
	jmp	$LN79@insert
$LN6@insert:

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226383[ebp], ecx
	mov	edx, DWORD PTR $T226383[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T226396[ebp], eax
	mov	ecx, DWORD PTR $T226396[ebp]
	mov	DWORD PTR $T226319[ebp], ecx
	mov	edx, DWORD PTR __Where$198767[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T226319[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@insert

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

	mov	BYTE PTR $T226320[ebp], 1
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR $T226321[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
	mov	DWORD PTR $T226413[ebp], eax
	mov	edx, DWORD PTR $T226413[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T226320[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert

; 651  : 			else

	jmp	SHORT $LN79@insert
$LN4@insert:

; 652  : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$198767[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

$LN79@insert:
	mov	ecx, DWORD PTR __Where$198767[ebp]
	mov	DWORD PTR $T226428[ebp], ecx
	mov	edx, DWORD PTR $T226428[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax]
	sbb	edx, edx
	neg	edx
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@insert

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T226322[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226323[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
	mov	DWORD PTR $T226448[ebp], eax
	mov	edx, DWORD PTR $T226448[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T226322[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@insert

; 657  : 			else

	jmp	SHORT $LN11@insert
$LN2@insert:

; 658  : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T226324[ebp], 0
	mov	ecx, DWORD PTR __Where$198767[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR $T226324[ebp]
	mov	BYTE PTR [eax+4], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@insert:

; 659  : 			}
; 660  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
PUBLIC	?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
_TEXT	SEGMENT
tv277 = -196						; size = 4
_this$ = -192						; size = 4
$T226988 = -188						; size = 4
$T226900 = -172						; size = 4
$T226815 = -160						; size = 4
$T226799 = -156						; size = 4
$T226780 = -152						; size = 4
$T226776 = -148						; size = 4
$T226691 = -136						; size = 4
$T226590 = -120						; size = 4
$T226568 = -116						; size = 4
$T226561 = -112						; size = 4
$T226557 = -108						; size = 4
$T226518 = -104						; size = 4
$T226509 = -100						; size = 4
$T226489 = -96						; size = 4
__Count$226471 = -92					; size = 4
$T226455 = -88						; size = 28
$T226454 = -60						; size = 40
__Pnode$201484 = -20					; size = 4
__Newnode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

	mov	DWORD PTR __Count$226471[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$226471[ebp], 0
	jbe	SHORT $LN25@Insert
	mov	eax, DWORD PTR __Count$226471[ebp]
	mov	DWORD PTR tv277[ebp], eax
	jmp	SHORT $LN21@Insert
$LN25@Insert:
	mov	DWORD PTR tv277[ebp], 1
$LN21@Insert:
	mov	ecx, DWORD PTR tv277[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	ja	SHORT $LN17@Insert

; 1189 : 			_THROW(length_error, "map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T226455[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T226455[ebp]
	push	eax
	lea	ecx, DWORD PTR $T226454[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR $T226454[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T226454[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T226455[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@Insert:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

	push	0
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 1192 : 
; 1193 : 		++_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1194 : 		if (_Wherenode == _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN16@Insert

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T226489[ebp], edx
	mov	eax, DWORD PTR $T226489[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN15@Insert
$LN16@Insert:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN52@Insert

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1202 : 			if (_Wherenode == _Lmost())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T226509[ebp], eax
	mov	ecx, DWORD PTR $T226509[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN13@Insert

; 1203 : 				_Lmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T226518[ebp], ecx
	mov	edx, DWORD PTR $T226518[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax
$LN13@Insert:

; 1204 : 			}
; 1205 : 		else

	jmp	SHORT $LN15@Insert

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

$LN52@Insert:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1208 : 			if (_Wherenode == _Rmost())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN15@Insert

; 1209 : 				_Rmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN15@Insert:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$201484[ebp], eax
$LN64@Insert:
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+16]
	test	eax, eax
	jne	$LN360@Insert

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T226557[ebp], edx
	mov	eax, DWORD PTR $T226557[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226561[ebp], ecx
	mov	edx, DWORD PTR __Pnode$201484[ebp]
	mov	eax, DWORD PTR $T226561[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN216@Insert

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$201484[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T226568[ebp], eax
	mov	ecx, DWORD PTR $T226568[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1216 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	jne	SHORT $LN100@Insert

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+16], 1

; 1219 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+16], 1

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T226590[ebp], ecx
	mov	edx, DWORD PTR $T226590[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+16], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$201484[ebp], eax

; 1222 : 					}
; 1223 : 				else

	jmp	SHORT $LN6@Insert

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

$LN100@Insert:
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$201484[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN155@Insert

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$201484[ebp], edx

; 1228 : 						_Lrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN155@Insert:
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+16], 1

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T226691[ebp], ecx
	mov	edx, DWORD PTR $T226691[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+16], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
$LN6@Insert:

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

	jmp	$LN4@Insert

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

$LN216@Insert:
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T226776[ebp], edx
	mov	eax, DWORD PTR $T226776[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T226780[ebp], ecx
	mov	edx, DWORD PTR $T226780[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1238 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	jne	SHORT $LN240@Insert

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+16], 1

; 1241 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+16], 1

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$201484[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T226799[ebp], ecx
	mov	edx, DWORD PTR $T226799[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+16], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$201484[ebp], eax

; 1244 : 					}
; 1245 : 				else

	jmp	SHORT $LN4@Insert

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

$LN240@Insert:
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T226815[ebp], edx
	mov	eax, DWORD PTR $T226815[ebp]
	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN297@Insert

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$201484[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$201484[ebp], eax

; 1250 : 						_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN297@Insert:
	mov	edx, DWORD PTR __Pnode$201484[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+16], 1

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$201484[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T226900[ebp], edx
	mov	eax, DWORD PTR $T226900[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+16], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$201484[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
$LN4@Insert:

; 1255 : 					}
; 1256 : 				}

	jmp	$LN64@Insert

; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

$LN360@Insert:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T226988[ebp], eax
	mov	ecx, DWORD PTR $T226988[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+16], 1

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert:

; 1260 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$0:
	lea	ecx, DWORD PTR $T226455[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T227120 = -12						; size = 4
$T227113 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1285 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN24@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Lrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN34@Lrotate

; 1294 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Lrotate

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

$LN34@Lrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T227113[ebp], eax
	mov	ecx, DWORD PTR $T227113[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN44@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T227120[ebp], ecx
	mov	edx, DWORD PTR $T227120[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx], eax

; 1297 : 		else

	jmp	SHORT $LN46@Lrotate

; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

$LN44@Lrotate:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

$LN46@Lrotate:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1302 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T227196 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1329 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN24@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Rrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN36@Rrotate

; 1338 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Rrotate

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

$LN36@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN42@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1341 : 		else

	jmp	SHORT $LN46@Rrotate

; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

$LN42@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T227196[ebp], eax
	mov	ecx, DWORD PTR $T227196[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

$LN46@Rrotate:
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$0
__unwindtable$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$3
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
_TEXT	SEGMENT
tv86 = -52						; size = 4
_this$ = -48						; size = 4
$T227206 = -28						; size = 4
$T227205 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1408 : 		{	// allocate a node with pointers, value, and color

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	0
	push	1
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
	add	esp, 8
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1410 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR $T227206[ebp], eax
	cmp	DWORD PTR $T227206[ebp], 0
	je	SHORT $LN4@Buynode
	mov	ecx, DWORD PTR $T227206[ebp]
	mov	edx, DWORD PTR __Larg$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T227206[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR $T227206[ebp]
	mov	eax, DWORD PTR __Rarg$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T227206[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T227206[ebp]
	mov	dl, BYTE PTR __Carg$[ebp]
	mov	BYTE PTR [ecx+16], dl
	mov	eax, DWORD PTR $T227206[ebp]
	mov	BYTE PTR [eax+17], 0
	mov	ecx, DWORD PTR $T227206[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN5@Buynode
$LN4@Buynode:
	mov	DWORD PTR tv86[ebp], 0
$LN5@Buynode:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T227205[ebp], edx
	jmp	SHORT $LN6@Buynode
__catch$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$0:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1414 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1415 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$1
	ret	0
$LN6@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z$1:

; 1416 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN3@Buynode:

; 1417 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T227283 = -16						; size = 4
$T227262 = -12						; size = 4
$T227255 = -8						; size = 4
__Pnode$202260 = -4					; size = 4
?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	je	SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax

; 336  :    				if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+17]
	test	eax, eax
	je	SHORT $LN8@Dec

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;
; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move

	jmp	$LN10@Dec
$LN8@Dec:

; 348  : #endif
; 349  : 			}

	jmp	$LN10@Dec
$LN9@Dec:

; 350  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T227255[ebp], edx
	mov	eax, DWORD PTR $T227255[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	jne	SHORT $LN34@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T227262[ebp], ecx
	mov	edx, DWORD PTR $T227262[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T227283[ebp], eax
$LN30@Dec:
	mov	ecx, DWORD PTR $T227283[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN26@Dec
	mov	ecx, DWORD PTR $T227283[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T227283[ebp], edx
	jmp	SHORT $LN30@Dec
$LN26@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T227283[ebp]
	mov	DWORD PTR [eax], ecx

; 352  : 			else

	jmp	SHORT $LN10@Dec

; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

$LN34@Dec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$202260[ebp], ecx
	mov	edx, DWORD PTR __Pnode$202260[ebp]
	movsx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN40@Dec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$202260[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN40@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$202260[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN34@Dec

; 358  : 				if (_Isnil(_Ptr))

$LN40@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	je	SHORT $LN2@Dec

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;
; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move

	jmp	SHORT $LN10@Dec

; 370  :  #endif
; 371  : 				else

	jmp	SHORT $LN10@Dec
$LN2@Dec:

; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$202260[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@Dec:

; 373  : 				}
; 374  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T227302 = -16						; size = 4
$T227298 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 20					; 00000014H
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T227302[ebp], 0
	lea	eax, DWORD PTR $T227302[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227298[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T227298[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T227298[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 20					; 00000014H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
