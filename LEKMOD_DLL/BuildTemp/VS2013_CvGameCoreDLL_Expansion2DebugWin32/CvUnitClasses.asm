; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvUnitClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	??_7CvUnitEntry@@6B@				; CvUnitEntry::`vftable'
PUBLIC	??0CvUnitEntry@@QAE@XZ				; CvUnitEntry::CvUnitEntry
PUBLIC	?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvUnitEntry::CacheResults
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
;	COMDAT __real@00000000
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstructs.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_7CvUnitEntry@@6B@
CONST	SEGMENT
??_7CvUnitEntry@@6B@ DD FLAT:?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvUnitEntry::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvUnitEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvUnitEntry@@QAE@XZ$0
__ehfuncinfo$??0CvUnitEntry@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvUnitEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvUnitEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T219202 = -24						; size = 4
$T219201 = -20						; size = 4
$T219190 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvUnitEntry@@QAE@XZ PROC				; CvUnitEntry::CvUnitEntry, COMDAT
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvUnitEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvUnitEntry@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+274], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+292], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+296], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+316], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+320], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+340], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+344], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+348], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+352], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+356], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+364], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+365], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+366], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+367], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+368], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+372], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+380], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+388], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+392], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+396], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+404], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+408], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+412], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+420], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+424], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+428], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+432], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+436], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+440], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+448], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+452], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+456], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+460], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+472], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+476], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+484], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+488], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+496], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+497], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+498], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+499], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+500], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+501], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+502], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+503], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+504], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+512], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+516], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+524], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+528], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+529], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+530], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+531], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+533], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+548], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+552], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+560], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 568				; 00000238H
	mov	DWORD PTR $T219190[ebp], eax
	mov	ecx, DWORD PTR $T219190[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+596], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+597], 0
	mov	DWORD PTR $T219202[ebp], 12		; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 600				; 00000258H
	mov	DWORD PTR $T219201[ebp], eax
$LN9@CvUnitEntr:
	mov	ecx, DWORD PTR $T219202[ebp]
	sub	ecx, 1
	mov	DWORD PTR $T219202[ebp], ecx
	js	SHORT $LN8@CvUnitEntr
	mov	edx, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0
	mov	ecx, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0
	mov	edx, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+12], xmm0
	mov	eax, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+16], xmm0
	mov	ecx, DWORD PTR $T219201[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0
	mov	edx, DWORD PTR $T219201[ebp]
	mov	DWORD PTR [edx+24], 1
	mov	eax, DWORD PTR $T219201[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR $T219201[ebp], eax
	jmp	SHORT $LN9@CvUnitEntr
$LN8@CvUnitEntr:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+936], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+940], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+944], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+948], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+952], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+964], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+968], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+972], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+976], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+980], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+984], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+988], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+992], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+996], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1000], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1004], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1008], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1012], 0

; 134  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvUnitEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??0CvUnitEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvUnitEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvUnitEntry@@QAE@XZ ENDP				; CvUnitEntry::CvUnitEntry
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T219274 = -48						; size = 4
$T219269 = -44						; size = 4
$T219264 = -40						; size = 4
$T219259 = -36						; size = 4
$T219254 = -32						; size = 4
$T219249 = -28						; size = 4
$T219244 = -24						; size = 4
$T219239 = -20						; size = 4
$T219234 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T219234[ebp], eax
	mov	ecx, DWORD PTR $T219234[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T219239[ebp], ecx
	mov	ecx, DWORD PTR $T219239[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T219244[ebp], edx
	mov	ecx, DWORD PTR $T219244[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T219249[ebp], eax
	mov	ecx, DWORD PTR $T219249[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T219254[ebp], ecx
	mov	ecx, DWORD PTR $T219254[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T219259[ebp], edx
	mov	ecx, DWORD PTR $T219259[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T219264[ebp], eax
	mov	ecx, DWORD PTR $T219264[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T219269[ebp], ecx
	mov	ecx, DWORD PTR $T219269[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T219274[ebp], edx
	mov	ecx, DWORD PTR $T219274[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_ECvString@@QAEPAXI@Z				; CvString::`vector deleting destructor'
PUBLIC	??1CvUnitEntry@@QAE@XZ				; CvUnitEntry::~CvUnitEntry
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvUnitEntry@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvUnitEntry@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvUnitEntry@@QAE@XZ$1
__ehfuncinfo$??1CvUnitEntry@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvUnitEntry@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvUnitEntry@@QAE@XZ
_TEXT	SEGMENT
tv222 = -232						; size = 4
tv213 = -228						; size = 4
tv204 = -224						; size = 4
tv151 = -220						; size = 4
_this$ = -216						; size = 4
$T219443 = -176						; size = 4
$T219438 = -172						; size = 4
$T219436 = -168						; size = 4
$T219432 = -164						; size = 4
$T219428 = -160						; size = 4
$T219427 = -156						; size = 4
$T219415 = -152						; size = 4
$T219411 = -148						; size = 4
$T219410 = -144						; size = 4
$T219398 = -140						; size = 4
$T219394 = -136						; size = 4
$T219393 = -132						; size = 4
$T219381 = -128						; size = 4
$T219377 = -124						; size = 4
$T219376 = -120						; size = 4
$T219364 = -116						; size = 4
$T219362 = -112						; size = 4
$T219358 = -108						; size = 4
$T219356 = -104						; size = 4
$T219352 = -100						; size = 4
$T219350 = -96						; size = 4
$T219346 = -92						; size = 4
$T219344 = -88						; size = 4
$T219340 = -84						; size = 4
$T219338 = -80						; size = 4
$T219334 = -76						; size = 4
$T219332 = -72						; size = 4
$T219328 = -68						; size = 4
$T219326 = -64						; size = 4
$T219322 = -60						; size = 4
$T219320 = -56						; size = 4
$T219316 = -52						; size = 4
$T219314 = -48						; size = 4
$T219310 = -44						; size = 4
$T219308 = -40						; size = 4
$T219304 = -36						; size = 4
$T219302 = -32						; size = 4
$T219298 = -28						; size = 4
$T219296 = -24						; size = 4
$T219292 = -20						; size = 4
$T219290 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvUnitEntry@@QAE@XZ PROC				; CvUnitEntry::~CvUnitEntry, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvUnitEntry@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvUnitEntry@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 139  : 	SAFE_DELETE_ARRAY(m_pbUpgradeUnitClass);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	mov	DWORD PTR $T219292[ebp], ecx
	mov	edx, DWORD PTR $T219292[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219290[ebp], eax
	mov	ecx, DWORD PTR $T219290[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219292[ebp]
	mov	DWORD PTR [edx], 0

; 140  : 	SAFE_DELETE_ARRAY(m_pbUnitAIType);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 968				; 000003c8H
	mov	DWORD PTR $T219298[ebp], eax
	mov	ecx, DWORD PTR $T219298[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219296[ebp], edx
	mov	eax, DWORD PTR $T219296[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219298[ebp]
	mov	DWORD PTR [ecx], 0

; 141  : 	SAFE_DELETE_ARRAY(m_pbNotUnitAIType);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 972				; 000003ccH
	mov	DWORD PTR $T219304[ebp], edx
	mov	eax, DWORD PTR $T219304[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219302[ebp], ecx
	mov	edx, DWORD PTR $T219302[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219304[ebp]
	mov	DWORD PTR [eax], 0

; 142  : 	SAFE_DELETE_ARRAY(m_pbBuilds);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 976				; 000003d0H
	mov	DWORD PTR $T219310[ebp], ecx
	mov	edx, DWORD PTR $T219310[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219308[ebp], eax
	mov	ecx, DWORD PTR $T219308[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219310[ebp]
	mov	DWORD PTR [edx], 0

; 143  : 	SAFE_DELETE_ARRAY(m_pbGreatPeoples);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 980				; 000003d4H
	mov	DWORD PTR $T219316[ebp], eax
	mov	ecx, DWORD PTR $T219316[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219314[ebp], edx
	mov	eax, DWORD PTR $T219314[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219316[ebp]
	mov	DWORD PTR [ecx], 0

; 144  : 	SAFE_DELETE_ARRAY(m_pbBuildings);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 984				; 000003d8H
	mov	DWORD PTR $T219322[ebp], edx
	mov	eax, DWORD PTR $T219322[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219320[ebp], ecx
	mov	edx, DWORD PTR $T219320[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219322[ebp]
	mov	DWORD PTR [eax], 0

; 145  : 	SAFE_DELETE_ARRAY(m_pbBuildingClassRequireds);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 988				; 000003dcH
	mov	DWORD PTR $T219328[ebp], ecx
	mov	edx, DWORD PTR $T219328[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219326[ebp], eax
	mov	ecx, DWORD PTR $T219326[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219328[ebp]
	mov	DWORD PTR [edx], 0

; 146  : 	SAFE_DELETE_ARRAY(m_piPrereqAndTechs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 936				; 000003a8H
	mov	DWORD PTR $T219334[ebp], eax
	mov	ecx, DWORD PTR $T219334[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219332[ebp], edx
	mov	eax, DWORD PTR $T219332[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219334[ebp]
	mov	DWORD PTR [ecx], 0

; 147  : 	SAFE_DELETE_ARRAY(m_piResourceQuantityRequirements);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 940				; 000003acH
	mov	DWORD PTR $T219340[ebp], edx
	mov	eax, DWORD PTR $T219340[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219338[ebp], ecx
	mov	edx, DWORD PTR $T219338[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219340[ebp]
	mov	DWORD PTR [eax], 0

; 148  : 	SAFE_DELETE_ARRAY(m_piProductionTraits);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	DWORD PTR $T219346[ebp], ecx
	mov	edx, DWORD PTR $T219346[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219344[ebp], eax
	mov	ecx, DWORD PTR $T219344[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219346[ebp]
	mov	DWORD PTR [edx], 0

; 149  : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 948				; 000003b4H
	mov	DWORD PTR $T219352[ebp], eax
	mov	ecx, DWORD PTR $T219352[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219350[ebp], edx
	mov	eax, DWORD PTR $T219350[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T219352[ebp]
	mov	DWORD PTR [ecx], 0

; 150  : 	SAFE_DELETE_ARRAY(m_piUnitGroupRequired);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 952				; 000003b8H
	mov	DWORD PTR $T219358[ebp], edx
	mov	eax, DWORD PTR $T219358[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219356[ebp], ecx
	mov	edx, DWORD PTR $T219356[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219358[ebp]
	mov	DWORD PTR [eax], 0

; 151  : 	SAFE_DELETE_ARRAY(m_pbFreePromotions);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 992				; 000003e0H
	mov	DWORD PTR $T219364[ebp], ecx
	mov	edx, DWORD PTR $T219364[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219362[ebp], eax
	mov	ecx, DWORD PTR $T219362[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T219364[ebp]
	mov	DWORD PTR [edx], 0

; 152  : 	SAFE_DELETE_ARRAY(m_paszEarlyArtDefineTags);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 996				; 000003e4H
	mov	DWORD PTR $T219381[ebp], eax
	mov	ecx, DWORD PTR $T219381[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219377[ebp], edx
	mov	eax, DWORD PTR $T219377[ebp]
	mov	DWORD PTR $T219376[ebp], eax
	cmp	DWORD PTR $T219376[ebp], 0
	je	SHORT $LN33@CvUnitEntr@2
	push	3
	mov	ecx, DWORD PTR $T219376[ebp]
	call	??_ECvString@@QAEPAXI@Z
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN34@CvUnitEntr@2
$LN33@CvUnitEntr@2:
	mov	DWORD PTR tv151[ebp], 0
$LN34@CvUnitEntr@2:
	mov	ecx, DWORD PTR $T219381[ebp]
	mov	DWORD PTR [ecx], 0

; 153  : 	SAFE_DELETE_ARRAY(m_paszLateArtDefineTags);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1000				; 000003e8H
	mov	DWORD PTR $T219398[ebp], edx
	mov	eax, DWORD PTR $T219398[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219394[ebp], ecx
	mov	edx, DWORD PTR $T219394[ebp]
	mov	DWORD PTR $T219393[ebp], edx
	cmp	DWORD PTR $T219393[ebp], 0
	je	SHORT $LN45@CvUnitEntr@2
	push	3
	mov	ecx, DWORD PTR $T219393[ebp]
	call	??_ECvString@@QAEPAXI@Z
	mov	DWORD PTR tv204[ebp], eax
	jmp	SHORT $LN46@CvUnitEntr@2
$LN45@CvUnitEntr@2:
	mov	DWORD PTR tv204[ebp], 0
$LN46@CvUnitEntr@2:
	mov	eax, DWORD PTR $T219398[ebp]
	mov	DWORD PTR [eax], 0

; 154  : 	SAFE_DELETE_ARRAY(m_paszMiddleArtDefineTags);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1004				; 000003ecH
	mov	DWORD PTR $T219415[ebp], ecx
	mov	edx, DWORD PTR $T219415[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T219411[ebp], eax
	mov	ecx, DWORD PTR $T219411[ebp]
	mov	DWORD PTR $T219410[ebp], ecx
	cmp	DWORD PTR $T219410[ebp], 0
	je	SHORT $LN57@CvUnitEntr@2
	push	3
	mov	ecx, DWORD PTR $T219410[ebp]
	call	??_ECvString@@QAEPAXI@Z
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN58@CvUnitEntr@2
$LN57@CvUnitEntr@2:
	mov	DWORD PTR tv213[ebp], 0
$LN58@CvUnitEntr@2:
	mov	edx, DWORD PTR $T219415[ebp]
	mov	DWORD PTR [edx], 0

; 155  : 	SAFE_DELETE_ARRAY(m_paszUnitNames);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1008				; 000003f0H
	mov	DWORD PTR $T219432[ebp], eax
	mov	ecx, DWORD PTR $T219432[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T219428[ebp], edx
	mov	eax, DWORD PTR $T219428[ebp]
	mov	DWORD PTR $T219427[ebp], eax
	cmp	DWORD PTR $T219427[ebp], 0
	je	SHORT $LN69@CvUnitEntr@2
	push	3
	mov	ecx, DWORD PTR $T219427[ebp]
	call	??_ECvString@@QAEPAXI@Z
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN70@CvUnitEntr@2
$LN69@CvUnitEntr@2:
	mov	DWORD PTR tv222[ebp], 0
$LN70@CvUnitEntr@2:
	mov	ecx, DWORD PTR $T219432[ebp]
	mov	DWORD PTR [ecx], 0

; 156  : 	SAFE_DELETE_ARRAY(m_paeGreatWorks);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1012				; 000003f4H
	mov	DWORD PTR $T219438[ebp], edx
	mov	eax, DWORD PTR $T219438[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T219436[ebp], ecx
	mov	edx, DWORD PTR $T219436[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T219438[ebp]
	mov	DWORD PTR [eax], 0

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 	SAFE_DELETE_ARRAY(m_piProductionModifierBuildings);
; 159  : 	SAFE_DELETE_ARRAY(m_piYieldFromKills);
; 160  : #endif
; 161  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	mov	DWORD PTR $T219443[ebp], ecx
	mov	ecx, DWORD PTR $T219443[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvUnitEntry@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvUnitEntry@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvUnitEntry@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvUnitEntry@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvUnitEntry@@QAE@XZ ENDP				; CvUnitEntry::~CvUnitEntry
PUBLIC	?DoUpdatePower@CvUnitEntry@@QAEXXZ		; CvUnitEntry::DoUpdatePower
PUBLIC	??_C@_0BA@LIKIENLB@PathSubdivision?$AA@		; `string'
PUBLIC	??_C@_09EDCLCNLE@CurveRoll?$AA@			; `string'
PUBLIC	??_C@_09ICICMGHB@RowOffset?$AA@			; `string'
PUBLIC	??_C@_0BB@GMGIGLGK@IndividualOffset?$AA@	; `string'
PUBLIC	??_C@_07NABLHCDO@EaseOut?$AA@			; `string'
PUBLIC	??_C@_06IBLHMLOI@EaseIn?$AA@			; `string'
PUBLIC	??_C@_09IGIFPOMH@TotalTime?$AA@			; `string'
PUBLIC	??_C@_08FHCLFKKE@NumHexes?$AA@			; `string'
PUBLIC	??_C@_08GCFKJFEN@MoveRate?$AA@			; `string'
PUBLIC	??_C@_0DN@GBGKNFPE@SELECT?5?$CK?5FROM?5MovementRates?5wher@ ; `string'
PUBLIC	??_C@_0BG@IDDLABJG@Units?5?9?5MovementRates?$AA@ ; `string'
PUBLIC	??_C@_0FJ@KGAJMIGH@select?5UniqueName?0?5GreatWorkType@ ; `string'
PUBLIC	??_C@_0BE@NLMNNIP@Units?5?9?5UniqueNames?$AA@	; `string'
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
PUBLIC	??_C@_0DJ@CMICAENA@select?5count?$CI?$CK?$CJ?5from?5Unit_Unique@ ; `string'
PUBLIC	??_C@_0BI@EMEJHAEA@Units?5?9?5UniqueNameCount?$AA@ ; `string'
PUBLIC	??_C@_0HG@BPINJJDH@select?5Technologies?4ID?5from?5Unit@ ; `string'
PUBLIC	??_C@_0BC@JFEDGKLH@Units?5?9?5TechTypes?$AA@	; `string'
PUBLIC	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray
PUBLIC	??_C@_0N@INKDAICK@Technologies?$AA@		; `string'
PUBLIC	??_C@_0BA@GLDILOEP@BuildingClasses?$AA@		; `string'
PUBLIC	??_C@_0BM@IHEEELMD@Unit_BuildingClassRequireds?$AA@ ; `string'
PUBLIC	??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@	; `string'
PUBLIC	??_C@_0P@KBOFNMAB@Unit_Buildings?$AA@		; `string'
PUBLIC	??_C@_0M@EENMFCNN@Specialists?$AA@		; `string'
PUBLIC	??_C@_0BC@CIDMFDCG@Unit_GreatPersons?$AA@	; `string'
PUBLIC	??_C@_0BA@PJGLMFLF@GreatPersonType?$AA@		; `string'
PUBLIC	??_C@_06EEPGMMON@Builds?$AA@			; `string'
PUBLIC	??_C@_0M@IIOBJNH@Unit_Builds?$AA@		; `string'
PUBLIC	??_C@_09LLAGGHGM@BuildType?$AA@			; `string'
PUBLIC	??_C@_0BA@GHPFBJGB@Unit_NotAITypes?$AA@		; `string'
PUBLIC	??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@		; `string'
PUBLIC	??_C@_0N@CKNFDIBF@Unit_AITypes?$AA@		; `string'
PUBLIC	??_C@_0L@NHJBPHOF@UnitAIType?$AA@		; `string'
PUBLIC	??_C@_0M@HLHJNCC@UnitClasses?$AA@		; `string'
PUBLIC	??_C@_0BD@NOGKHAON@Unit_ClassUpgrades?$AA@	; `string'
PUBLIC	??_C@_0O@JGILCIIO@UnitClassType?$AA@		; `string'
PUBLIC	??_C@_0P@GCBJCIAG@UnitPromotions?$AA@		; `string'
PUBLIC	??_C@_0BE@OBMCDBKK@Unit_FreePromotions?$AA@	; `string'
PUBLIC	??_C@_0O@IILJPJBB@PromotionType?$AA@		; `string'
PUBLIC	??_C@_06JAMLCLDI@Yields?$AA@			; `string'
PUBLIC	??_C@_0BE@NAIIDHDO@Unit_YieldFromKills?$AA@	; `string'
PUBLIC	??_C@_09HJBDLJFJ@YieldType?$AA@			; `string'
PUBLIC	??_C@_05LNDKIJIJ@Yield?$AA@			; `string'
PUBLIC	??_C@_09CKIIHEFP@Buildings?$AA@			; `string'
PUBLIC	??_C@_0CB@PJLEBENK@Unit_ProductionModifierBuildings@ ; `string'
PUBLIC	??_C@_0N@OGHNDFPH@BuildingType?$AA@		; `string'
PUBLIC	??_C@_0BD@JMJICLDJ@ProductionModifier?$AA@	; `string'
PUBLIC	??_C@_09FDCBPLKG@Resources?$AA@			; `string'
PUBLIC	??_C@_0CC@MBHMCDO@Unit_ResourceQuantityRequirement@ ; `string'
PUBLIC	??_C@_0N@EPHJOCBJ@ResourceType?$AA@		; `string'
PUBLIC	??_C@_06EGHFENCC@Traits?$AA@			; `string'
PUBLIC	??_C@_0BG@IDBKIPKJ@Unit_ProductionTraits?$AA@	; `string'
PUBLIC	??_C@_09HHNMMNID@TraitType?$AA@			; `string'
PUBLIC	??_C@_05NFPPHLCJ@Trait?$AA@			; `string'
PUBLIC	??_C@_0N@HKGBNEME@Unit_Flavors?$AA@		; `string'
PUBLIC	??_C@_08PNBAGKKP@UnitType?$AA@			; `string'
PUBLIC	??_C@_0BA@KNEGDPFJ@LeaderPromotion?$AA@		; `string'
PUBLIC	??_C@_0BB@IFAHKBOJ@SpaceshipProject?$AA@	; `string'
PUBLIC	??_C@_0O@MMIDMALL@ProjectPrereq?$AA@		; `string'
PUBLIC	??_C@_0M@EMBKKFAL@DomainCargo?$AA@		; `string'
PUBLIC	??_C@_0N@JIBALDJB@SpecialCargo?$AA@		; `string'
PUBLIC	??_C@_0BJ@PLDCLKNF@GoodyHutUpgradeUnitClass?$AA@ ; `string'
PUBLIC	??_C@_0L@LIHFHODE@PolicyType?$AA@		; `string'
PUBLIC	??_C@_0N@KNKPCICJ@ObsoleteTech?$AA@		; `string'
PUBLIC	??_C@_0L@NJNFNDFO@PrereqTech?$AA@		; `string'
PUBLIC	??_C@_0BC@BIDPEJFN@PillagePrereqTech?$AA@	; `string'
PUBLIC	??_C@_0O@NCBKCNPP@DefaultUnitAI?$AA@		; `string'
PUBLIC	??_C@_0BH@NIFFBICI@CivilianAttackPriority?$AA@	; `string'
PUBLIC	??_C@_06HFDFFJHI@Domain?$AA@			; `string'
PUBLIC	??_C@_0M@FGCAMCEF@CombatClass?$AA@		; `string'
PUBLIC	??_C@_07EGAJKHF@Capture?$AA@			; `string'
PUBLIC	??_C@_07ONMEKKNJ@Special?$AA@			; `string'
PUBLIC	??_C@_05EKAMNAII@Class?$AA@			; `string'
PUBLIC	??_C@_0BI@BHACMNCG@UnitArtInfoEraVariation?$AA@	; `string'
PUBLIC	??_C@_0BN@JKIILKFN@UnitArtInfoCulturalVariation?$AA@ ; `string'
PUBLIC	??_C@_0M@IMLLCCIF@UnitArtInfo?$AA@		; `string'
PUBLIC	??_C@_0P@BNHJNPFG@NumExoticGoods?$AA@		; `string'
PUBLIC	??_C@_05IOPOMLGK@Trade?$AA@			; `string'
PUBLIC	??_C@_0BI@CECOOOBA@RangeAttackOnlyInDomain?$AA@	; `string'
PUBLIC	??_C@_0BF@JGBDHAEA@CaptureWhileEmbarked?$AA@	; `string'
PUBLIC	??_C@_07BPDHDMKH@Suicide?$AA@			; `string'
PUBLIC	??_C@_0L@BIJIAIHH@Mechanized?$AA@		; `string'
PUBLIC	??_C@_0BA@GHBIMFHM@PrereqResources?$AA@		; `string'
PUBLIC	??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@	; `string'
PUBLIC	??_C@_0BM@KDKDJKAF@OneShotTourismPercentOthers?$AA@ ; `string'
PUBLIC	??_C@_0P@HKDBFADO@OneShotTourism?$AA@		; `string'
PUBLIC	??_C@_0N@PJBJAAKG@FreePolicies?$AA@		; `string'
PUBLIC	??_C@_0P@BJCGNFDJ@GoldenAgeTurns?$AA@		; `string'
PUBLIC	??_C@_0BC@NEFPKCDN@CultureBombRadius?$AA@	; `string'
PUBLIC	??_C@_0M@EHKLHIAH@FoundAbroad?$AA@		; `string'
PUBLIC	??_C@_05JDGHEPJG@Found?$AA@			; `string'
PUBLIC	??_C@_07CEKJFNCK@Pillage?$AA@			; `string'
PUBLIC	??_C@_0BD@CDKCFLHJ@MilitaryProduction?$AA@	; `string'
PUBLIC	??_C@_0BA@NPLCEOFB@MilitarySupport?$AA@		; `string'
PUBLIC	??_C@_0P@FHNGKGM@RivalTerritory?$AA@		; `string'
PUBLIC	??_C@_0N@JLDOMIFK@NoBadGoodies?$AA@		; `string'
PUBLIC	??_C@_04MPDBGAOA@Food?$AA@			; `string'
PUBLIC	??_C@_0BB@KOFKKLKE@LeaderExperience?$AA@	; `string'
PUBLIC	??_C@_0O@NLIKPLNH@PortraitIndex?$AA@		; `string'
PUBLIC	??_C@_0BD@LEGEBINP@UnitFlagIconOffset?$AA@	; `string'
PUBLIC	??_C@_0M@LMOEFFNJ@Unhappiness?$AA@		; `string'
PUBLIC	??_C@_0O@OFPKAHBM@NoMaintenance?$AA@		; `string'
PUBLIC	??_C@_0BF@PCBLMKKN@ExtraMaintenanceCost?$AA@	; `string'
PUBLIC	??_C@_0N@NJMICPAN@Conscription?$AA@		; `string'
PUBLIC	??_C@_0P@GGBHCLMH@XPValueDefense?$AA@		; `string'
PUBLIC	??_C@_0O@KJPLDOCL@XPValueAttack?$AA@		; `string'
PUBLIC	??_C@_0BC@EAPECPE@RangedCombatLimit?$AA@	; `string'
PUBLIC	??_C@_0N@CHOMJAEH@RangedCombat?$AA@		; `string'
PUBLIC	??_C@_0M@HLLAPADJ@CombatLimit?$AA@		; `string'
PUBLIC	??_C@_06BMBJGDHL@Combat?$AA@			; `string'
PUBLIC	??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@		; `string'
PUBLIC	??_C@_0BA@DKCODCKO@ProhibitsSpread?$AA@		; `string'
PUBLIC	??_C@_0BJ@MOLCPFKE@RequiresEnhancedReligion?$AA@ ; `string'
PUBLIC	??_C@_0O@KKHALMAI@FoundReligion?$AA@		; `string'
PUBLIC	??_C@_0BC@LCOFJMID@ReligiousStrength?$AA@	; `string'
PUBLIC	??_C@_0BA@CJPLONNA@ReligionSpreads?$AA@		; `string'
PUBLIC	??_C@_0N@IBMPLFMC@RemoveHeresy?$AA@		; `string'
PUBLIC	??_C@_0P@MCDJIPP@SpreadReligion?$AA@		; `string'
PUBLIC	??_C@_0O@PLIOIDHO@NumGoldPerEra?$AA@		; `string'
PUBLIC	??_C@_08LJKAMLEB@BaseGold?$AA@			; `string'
PUBLIC	??_C@_0N@LHOBLNPJ@RushBuilding?$AA@		; `string'
PUBLIC	??_C@_0BA@NALMHPBJ@HurryMultiplier?$AA@		; `string'
PUBLIC	??_C@_09IMPENBOK@BaseHurry?$AA@			; `string'
PUBLIC	??_C@_0BI@IOICOACK@BaseCultureTurnsToCount?$AA@	; `string'
PUBLIC	??_C@_0BI@KCIIMMGB@BaseBeakersTurnsToCount?$AA@	; `string'
PUBLIC	??_C@_0N@DBLFACAI@NumFreeTechs?$AA@		; `string'
PUBLIC	??_C@_08JFPBBIMB@WorkRate?$AA@			; `string'
PUBLIC	??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@		; `string'
PUBLIC	??_C@_0L@HKHELBGA@AirUnitCap?$AA@		; `string'
PUBLIC	??_C@_0BC@ODDPMIFP@AirInterceptRange?$AA@	; `string'
PUBLIC	??_C@_05CFMCGLCK@Range?$AA@			; `string'
PUBLIC	??_C@_0P@GIDGFBEL@BaseSightRange?$AA@		; `string'
PUBLIC	??_C@_08MPHBEKMP@Immobile?$AA@			; `string'
PUBLIC	??_C@_05OCMDHLMM@Moves?$AA@			; `string'
PUBLIC	??_C@_0M@ILJKFCBC@MinAreaSize?$AA@		; `string'
PUBLIC	??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@	; `string'
PUBLIC	??_C@_0BC@KALJCKJH@HurryCostModifier?$AA@	; `string'
PUBLIC	??_C@_0BC@BIKIILFC@MoveAfterPurchase?$AA@	; `string'
PUBLIC	??_C@_0N@BJFPEEDM@PurchaseOnly?$AA@		; `string'
PUBLIC	??_C@_0BN@NBDMLJGP@RequiresFaithPurchaseEnabled?$AA@ ; `string'
PUBLIC	??_C@_09JGBPBICB@FaithCost?$AA@			; `string'
PUBLIC	??_C@_0BM@JIKDDMHE@FinalProductionCostModifier?$AA@ ; `string'
PUBLIC	??_C@_04FICPKHNF@Cost?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?GetFloat@Results@Database@@QAEMPBD@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDH@Z:PROC
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp_?Reset@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHH@Z:PROC
EXTRN	__imp_?Step@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z:PROC
EXTRN	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; CvDatabaseUtility::PrepareResults
EXTRN	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvDatabaseUtility::GetResults
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z:PROC	; CvDatabaseUtility::MaxRows
EXTRN	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z:PROC ; CvDatabaseUtility::PopulateArrayByExistence
EXTRN	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z:PROC ; CvDatabaseUtility::PopulateArrayByValue
EXTRN	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z:PROC ; CvDatabaseUtility::SetFlavors
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDPBD@Z:PROC
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHPBD@Z:PROC
EXTRN	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvBaseInfo::CacheResults
;	COMDAT ??_C@_0BA@LIKIENLB@PathSubdivision?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BA@LIKIENLB@PathSubdivision?$AA@ DB 'PathSubdivision', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDCLCNLE@CurveRoll?$AA@
CONST	SEGMENT
??_C@_09EDCLCNLE@CurveRoll?$AA@ DB 'CurveRoll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ICICMGHB@RowOffset?$AA@
CONST	SEGMENT
??_C@_09ICICMGHB@RowOffset?$AA@ DB 'RowOffset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GMGIGLGK@IndividualOffset?$AA@
CONST	SEGMENT
??_C@_0BB@GMGIGLGK@IndividualOffset?$AA@ DB 'IndividualOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NABLHCDO@EaseOut?$AA@
CONST	SEGMENT
??_C@_07NABLHCDO@EaseOut?$AA@ DB 'EaseOut', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBLHMLOI@EaseIn?$AA@
CONST	SEGMENT
??_C@_06IBLHMLOI@EaseIn?$AA@ DB 'EaseIn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IGIFPOMH@TotalTime?$AA@
CONST	SEGMENT
??_C@_09IGIFPOMH@TotalTime?$AA@ DB 'TotalTime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHCLFKKE@NumHexes?$AA@
CONST	SEGMENT
??_C@_08FHCLFKKE@NumHexes?$AA@ DB 'NumHexes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GCFKJFEN@MoveRate?$AA@
CONST	SEGMENT
??_C@_08GCFKJFEN@MoveRate?$AA@ DB 'MoveRate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@GBGKNFPE@SELECT?5?$CK?5FROM?5MovementRates?5wher@
CONST	SEGMENT
??_C@_0DN@GBGKNFPE@SELECT?5?$CK?5FROM?5MovementRates?5wher@ DB 'SELECT * '
	DB	'FROM MovementRates where Type = ? ORDER BY NumHexes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDDLABJG@Units?5?9?5MovementRates?$AA@
CONST	SEGMENT
??_C@_0BG@IDDLABJG@Units?5?9?5MovementRates?$AA@ DB 'Units - MovementRate'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@KGAJMIGH@select?5UniqueName?0?5GreatWorkType@
CONST	SEGMENT
??_C@_0FJ@KGAJMIGH@select?5UniqueName?0?5GreatWorkType@ DB 'select Unique'
	DB	'Name, GreatWorkType from Unit_UniqueNames where UnitType = ? '
	DB	'ORDER BY rowid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLMNNIP@Units?5?9?5UniqueNames?$AA@
CONST	SEGMENT
??_C@_0BE@NLMNNIP@Units?5?9?5UniqueNames?$AA@ DB 'Units - UniqueNames', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CMICAENA@select?5count?$CI?$CK?$CJ?5from?5Unit_Unique@
CONST	SEGMENT
??_C@_0DJ@CMICAENA@select?5count?$CI?$CK?$CJ?5from?5Unit_Unique@ DB 'sele'
	DB	'ct count(*) from Unit_UniqueNames where UnitType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EMEJHAEA@Units?5?9?5UniqueNameCount?$AA@
CONST	SEGMENT
??_C@_0BI@EMEJHAEA@Units?5?9?5UniqueNameCount?$AA@ DB 'Units - UniqueName'
	DB	'Count', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HG@BPINJJDH@select?5Technologies?4ID?5from?5Unit@
CONST	SEGMENT
??_C@_0HG@BPINJJDH@select?5Technologies?4ID?5from?5Unit@ DB 'select Techn'
	DB	'ologies.ID from Unit_TechTypes inner join Technologies on Tec'
	DB	'hType = Technologies.Type where UnitType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFEDGKLH@Units?5?9?5TechTypes?$AA@
CONST	SEGMENT
??_C@_0BC@JFEDGKLH@Units?5?9?5TechTypes?$AA@ DB 'Units - TechTypes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INKDAICK@Technologies?$AA@
CONST	SEGMENT
??_C@_0N@INKDAICK@Technologies?$AA@ DB 'Technologies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
CONST	SEGMENT
??_C@_0BA@GLDILOEP@BuildingClasses?$AA@ DB 'BuildingClasses', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IHEEELMD@Unit_BuildingClassRequireds?$AA@
CONST	SEGMENT
??_C@_0BM@IHEEELMD@Unit_BuildingClassRequireds?$AA@ DB 'Unit_BuildingClas'
	DB	'sRequireds', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@
CONST	SEGMENT
??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@ DB 'BuildingClassType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KBOFNMAB@Unit_Buildings?$AA@
CONST	SEGMENT
??_C@_0P@KBOFNMAB@Unit_Buildings?$AA@ DB 'Unit_Buildings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EENMFCNN@Specialists?$AA@
CONST	SEGMENT
??_C@_0M@EENMFCNN@Specialists?$AA@ DB 'Specialists', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CIDMFDCG@Unit_GreatPersons?$AA@
CONST	SEGMENT
??_C@_0BC@CIDMFDCG@Unit_GreatPersons?$AA@ DB 'Unit_GreatPersons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJGLMFLF@GreatPersonType?$AA@
CONST	SEGMENT
??_C@_0BA@PJGLMFLF@GreatPersonType?$AA@ DB 'GreatPersonType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EEPGMMON@Builds?$AA@
CONST	SEGMENT
??_C@_06EEPGMMON@Builds?$AA@ DB 'Builds', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IIOBJNH@Unit_Builds?$AA@
CONST	SEGMENT
??_C@_0M@IIOBJNH@Unit_Builds?$AA@ DB 'Unit_Builds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLAGGHGM@BuildType?$AA@
CONST	SEGMENT
??_C@_09LLAGGHGM@BuildType?$AA@ DB 'BuildType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHPFBJGB@Unit_NotAITypes?$AA@
CONST	SEGMENT
??_C@_0BA@GHPFBJGB@Unit_NotAITypes?$AA@ DB 'Unit_NotAITypes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@
CONST	SEGMENT
??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@ DB 'UnitAIInfos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CKNFDIBF@Unit_AITypes?$AA@
CONST	SEGMENT
??_C@_0N@CKNFDIBF@Unit_AITypes?$AA@ DB 'Unit_AITypes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHJBPHOF@UnitAIType?$AA@
CONST	SEGMENT
??_C@_0L@NHJBPHOF@UnitAIType?$AA@ DB 'UnitAIType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHJNCC@UnitClasses?$AA@
CONST	SEGMENT
??_C@_0M@HLHJNCC@UnitClasses?$AA@ DB 'UnitClasses', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NOGKHAON@Unit_ClassUpgrades?$AA@
CONST	SEGMENT
??_C@_0BD@NOGKHAON@Unit_ClassUpgrades?$AA@ DB 'Unit_ClassUpgrades', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JGILCIIO@UnitClassType?$AA@
CONST	SEGMENT
??_C@_0O@JGILCIIO@UnitClassType?$AA@ DB 'UnitClassType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GCBJCIAG@UnitPromotions?$AA@
CONST	SEGMENT
??_C@_0P@GCBJCIAG@UnitPromotions?$AA@ DB 'UnitPromotions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OBMCDBKK@Unit_FreePromotions?$AA@
CONST	SEGMENT
??_C@_0BE@OBMCDBKK@Unit_FreePromotions?$AA@ DB 'Unit_FreePromotions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILJPJBB@PromotionType?$AA@
CONST	SEGMENT
??_C@_0O@IILJPJBB@PromotionType?$AA@ DB 'PromotionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JAMLCLDI@Yields?$AA@
CONST	SEGMENT
??_C@_06JAMLCLDI@Yields?$AA@ DB 'Yields', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NAIIDHDO@Unit_YieldFromKills?$AA@
CONST	SEGMENT
??_C@_0BE@NAIIDHDO@Unit_YieldFromKills?$AA@ DB 'Unit_YieldFromKills', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HJBDLJFJ@YieldType?$AA@
CONST	SEGMENT
??_C@_09HJBDLJFJ@YieldType?$AA@ DB 'YieldType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LNDKIJIJ@Yield?$AA@
CONST	SEGMENT
??_C@_05LNDKIJIJ@Yield?$AA@ DB 'Yield', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKIIHEFP@Buildings?$AA@
CONST	SEGMENT
??_C@_09CKIIHEFP@Buildings?$AA@ DB 'Buildings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PJLEBENK@Unit_ProductionModifierBuildings@
CONST	SEGMENT
??_C@_0CB@PJLEBENK@Unit_ProductionModifierBuildings@ DB 'Unit_ProductionM'
	DB	'odifierBuildings', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OGHNDFPH@BuildingType?$AA@
CONST	SEGMENT
??_C@_0N@OGHNDFPH@BuildingType?$AA@ DB 'BuildingType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMJICLDJ@ProductionModifier?$AA@
CONST	SEGMENT
??_C@_0BD@JMJICLDJ@ProductionModifier?$AA@ DB 'ProductionModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDCBPLKG@Resources?$AA@
CONST	SEGMENT
??_C@_09FDCBPLKG@Resources?$AA@ DB 'Resources', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MBHMCDO@Unit_ResourceQuantityRequirement@
CONST	SEGMENT
??_C@_0CC@MBHMCDO@Unit_ResourceQuantityRequirement@ DB 'Unit_ResourceQuan'
	DB	'tityRequirements', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
CONST	SEGMENT
??_C@_0N@EPHJOCBJ@ResourceType?$AA@ DB 'ResourceType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EGHFENCC@Traits?$AA@
CONST	SEGMENT
??_C@_06EGHFENCC@Traits?$AA@ DB 'Traits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBKIPKJ@Unit_ProductionTraits?$AA@
CONST	SEGMENT
??_C@_0BG@IDBKIPKJ@Unit_ProductionTraits?$AA@ DB 'Unit_ProductionTraits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHNMMNID@TraitType?$AA@
CONST	SEGMENT
??_C@_09HHNMMNID@TraitType?$AA@ DB 'TraitType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFPPHLCJ@Trait?$AA@
CONST	SEGMENT
??_C@_05NFPPHLCJ@Trait?$AA@ DB 'Trait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HKGBNEME@Unit_Flavors?$AA@
CONST	SEGMENT
??_C@_0N@HKGBNEME@Unit_Flavors?$AA@ DB 'Unit_Flavors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNBAGKKP@UnitType?$AA@
CONST	SEGMENT
??_C@_08PNBAGKKP@UnitType?$AA@ DB 'UnitType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KNEGDPFJ@LeaderPromotion?$AA@
CONST	SEGMENT
??_C@_0BA@KNEGDPFJ@LeaderPromotion?$AA@ DB 'LeaderPromotion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFAHKBOJ@SpaceshipProject?$AA@
CONST	SEGMENT
??_C@_0BB@IFAHKBOJ@SpaceshipProject?$AA@ DB 'SpaceshipProject', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MMIDMALL@ProjectPrereq?$AA@
CONST	SEGMENT
??_C@_0O@MMIDMALL@ProjectPrereq?$AA@ DB 'ProjectPrereq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMBKKFAL@DomainCargo?$AA@
CONST	SEGMENT
??_C@_0M@EMBKKFAL@DomainCargo?$AA@ DB 'DomainCargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JIBALDJB@SpecialCargo?$AA@
CONST	SEGMENT
??_C@_0N@JIBALDJB@SpecialCargo?$AA@ DB 'SpecialCargo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PLDCLKNF@GoodyHutUpgradeUnitClass?$AA@
CONST	SEGMENT
??_C@_0BJ@PLDCLKNF@GoodyHutUpgradeUnitClass?$AA@ DB 'GoodyHutUpgradeUnitC'
	DB	'lass', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LIHFHODE@PolicyType?$AA@
CONST	SEGMENT
??_C@_0L@LIHFHODE@PolicyType?$AA@ DB 'PolicyType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KNKPCICJ@ObsoleteTech?$AA@
CONST	SEGMENT
??_C@_0N@KNKPCICJ@ObsoleteTech?$AA@ DB 'ObsoleteTech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NJNFNDFO@PrereqTech?$AA@
CONST	SEGMENT
??_C@_0L@NJNFNDFO@PrereqTech?$AA@ DB 'PrereqTech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BIDPEJFN@PillagePrereqTech?$AA@
CONST	SEGMENT
??_C@_0BC@BIDPEJFN@PillagePrereqTech?$AA@ DB 'PillagePrereqTech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NCBKCNPP@DefaultUnitAI?$AA@
CONST	SEGMENT
??_C@_0O@NCBKCNPP@DefaultUnitAI?$AA@ DB 'DefaultUnitAI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NIFFBICI@CivilianAttackPriority?$AA@
CONST	SEGMENT
??_C@_0BH@NIFFBICI@CivilianAttackPriority?$AA@ DB 'CivilianAttackPriority'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFDFFJHI@Domain?$AA@
CONST	SEGMENT
??_C@_06HFDFFJHI@Domain?$AA@ DB 'Domain', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGCAMCEF@CombatClass?$AA@
CONST	SEGMENT
??_C@_0M@FGCAMCEF@CombatClass?$AA@ DB 'CombatClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGAJKHF@Capture?$AA@
CONST	SEGMENT
??_C@_07EGAJKHF@Capture?$AA@ DB 'Capture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONMEKKNJ@Special?$AA@
CONST	SEGMENT
??_C@_07ONMEKKNJ@Special?$AA@ DB 'Special', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKAMNAII@Class?$AA@
CONST	SEGMENT
??_C@_05EKAMNAII@Class?$AA@ DB 'Class', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHACMNCG@UnitArtInfoEraVariation?$AA@
CONST	SEGMENT
??_C@_0BI@BHACMNCG@UnitArtInfoEraVariation?$AA@ DB 'UnitArtInfoEraVariati'
	DB	'on', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JKIILKFN@UnitArtInfoCulturalVariation?$AA@
CONST	SEGMENT
??_C@_0BN@JKIILKFN@UnitArtInfoCulturalVariation?$AA@ DB 'UnitArtInfoCultu'
	DB	'ralVariation', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IMLLCCIF@UnitArtInfo?$AA@
CONST	SEGMENT
??_C@_0M@IMLLCCIF@UnitArtInfo?$AA@ DB 'UnitArtInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BNHJNPFG@NumExoticGoods?$AA@
CONST	SEGMENT
??_C@_0P@BNHJNPFG@NumExoticGoods?$AA@ DB 'NumExoticGoods', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOPOMLGK@Trade?$AA@
CONST	SEGMENT
??_C@_05IOPOMLGK@Trade?$AA@ DB 'Trade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CECOOOBA@RangeAttackOnlyInDomain?$AA@
CONST	SEGMENT
??_C@_0BI@CECOOOBA@RangeAttackOnlyInDomain?$AA@ DB 'RangeAttackOnlyInDoma'
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JGBDHAEA@CaptureWhileEmbarked?$AA@
CONST	SEGMENT
??_C@_0BF@JGBDHAEA@CaptureWhileEmbarked?$AA@ DB 'CaptureWhileEmbarked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPDHDMKH@Suicide?$AA@
CONST	SEGMENT
??_C@_07BPDHDMKH@Suicide?$AA@ DB 'Suicide', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BIJIAIHH@Mechanized?$AA@
CONST	SEGMENT
??_C@_0L@BIJIAIHH@Mechanized?$AA@ DB 'Mechanized', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHBIMFHM@PrereqResources?$AA@
CONST	SEGMENT
??_C@_0BA@GHBIMFHM@PrereqResources?$AA@ DB 'PrereqResources', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@
CONST	SEGMENT
??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@ DB 'IgnoreBuildingDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KDKDJKAF@OneShotTourismPercentOthers?$AA@
CONST	SEGMENT
??_C@_0BM@KDKDJKAF@OneShotTourismPercentOthers?$AA@ DB 'OneShotTourismPer'
	DB	'centOthers', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKDBFADO@OneShotTourism?$AA@
CONST	SEGMENT
??_C@_0P@HKDBFADO@OneShotTourism?$AA@ DB 'OneShotTourism', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJBJAAKG@FreePolicies?$AA@
CONST	SEGMENT
??_C@_0N@PJBJAAKG@FreePolicies?$AA@ DB 'FreePolicies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJCGNFDJ@GoldenAgeTurns?$AA@
CONST	SEGMENT
??_C@_0P@BJCGNFDJ@GoldenAgeTurns?$AA@ DB 'GoldenAgeTurns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEFPKCDN@CultureBombRadius?$AA@
CONST	SEGMENT
??_C@_0BC@NEFPKCDN@CultureBombRadius?$AA@ DB 'CultureBombRadius', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHKLHIAH@FoundAbroad?$AA@
CONST	SEGMENT
??_C@_0M@EHKLHIAH@FoundAbroad?$AA@ DB 'FoundAbroad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDGHEPJG@Found?$AA@
CONST	SEGMENT
??_C@_05JDGHEPJG@Found?$AA@ DB 'Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CEKJFNCK@Pillage?$AA@
CONST	SEGMENT
??_C@_07CEKJFNCK@Pillage?$AA@ DB 'Pillage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CDKCFLHJ@MilitaryProduction?$AA@
CONST	SEGMENT
??_C@_0BD@CDKCFLHJ@MilitaryProduction?$AA@ DB 'MilitaryProduction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NPLCEOFB@MilitarySupport?$AA@
CONST	SEGMENT
??_C@_0BA@NPLCEOFB@MilitarySupport?$AA@ DB 'MilitarySupport', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHNGKGM@RivalTerritory?$AA@
CONST	SEGMENT
??_C@_0P@FHNGKGM@RivalTerritory?$AA@ DB 'RivalTerritory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JLDOMIFK@NoBadGoodies?$AA@
CONST	SEGMENT
??_C@_0N@JLDOMIFK@NoBadGoodies?$AA@ DB 'NoBadGoodies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPDBGAOA@Food?$AA@
CONST	SEGMENT
??_C@_04MPDBGAOA@Food?$AA@ DB 'Food', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KOFKKLKE@LeaderExperience?$AA@
CONST	SEGMENT
??_C@_0BB@KOFKKLKE@LeaderExperience?$AA@ DB 'LeaderExperience', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NLIKPLNH@PortraitIndex?$AA@
CONST	SEGMENT
??_C@_0O@NLIKPLNH@PortraitIndex?$AA@ DB 'PortraitIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LEGEBINP@UnitFlagIconOffset?$AA@
CONST	SEGMENT
??_C@_0BD@LEGEBINP@UnitFlagIconOffset?$AA@ DB 'UnitFlagIconOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LMOEFFNJ@Unhappiness?$AA@
CONST	SEGMENT
??_C@_0M@LMOEFFNJ@Unhappiness?$AA@ DB 'Unhappiness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OFPKAHBM@NoMaintenance?$AA@
CONST	SEGMENT
??_C@_0O@OFPKAHBM@NoMaintenance?$AA@ DB 'NoMaintenance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PCBLMKKN@ExtraMaintenanceCost?$AA@
CONST	SEGMENT
??_C@_0BF@PCBLMKKN@ExtraMaintenanceCost?$AA@ DB 'ExtraMaintenanceCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJMICPAN@Conscription?$AA@
CONST	SEGMENT
??_C@_0N@NJMICPAN@Conscription?$AA@ DB 'Conscription', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GGBHCLMH@XPValueDefense?$AA@
CONST	SEGMENT
??_C@_0P@GGBHCLMH@XPValueDefense?$AA@ DB 'XPValueDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJPLDOCL@XPValueAttack?$AA@
CONST	SEGMENT
??_C@_0O@KJPLDOCL@XPValueAttack?$AA@ DB 'XPValueAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EAPECPE@RangedCombatLimit?$AA@
CONST	SEGMENT
??_C@_0BC@EAPECPE@RangedCombatLimit?$AA@ DB 'RangedCombatLimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHOMJAEH@RangedCombat?$AA@
CONST	SEGMENT
??_C@_0N@CHOMJAEH@RangedCombat?$AA@ DB 'RangedCombat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLLAPADJ@CombatLimit?$AA@
CONST	SEGMENT
??_C@_0M@HLLAPADJ@CombatLimit?$AA@ DB 'CombatLimit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMBJGDHL@Combat?$AA@
CONST	SEGMENT
??_C@_06BMBJGDHL@Combat?$AA@ DB 'Combat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@
CONST	SEGMENT
??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@ DB 'CanBuyCityState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DKCODCKO@ProhibitsSpread?$AA@
CONST	SEGMENT
??_C@_0BA@DKCODCKO@ProhibitsSpread?$AA@ DB 'ProhibitsSpread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MOLCPFKE@RequiresEnhancedReligion?$AA@
CONST	SEGMENT
??_C@_0BJ@MOLCPFKE@RequiresEnhancedReligion?$AA@ DB 'RequiresEnhancedReli'
	DB	'gion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KKHALMAI@FoundReligion?$AA@
CONST	SEGMENT
??_C@_0O@KKHALMAI@FoundReligion?$AA@ DB 'FoundReligion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LCOFJMID@ReligiousStrength?$AA@
CONST	SEGMENT
??_C@_0BC@LCOFJMID@ReligiousStrength?$AA@ DB 'ReligiousStrength', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CJPLONNA@ReligionSpreads?$AA@
CONST	SEGMENT
??_C@_0BA@CJPLONNA@ReligionSpreads?$AA@ DB 'ReligionSpreads', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBMPLFMC@RemoveHeresy?$AA@
CONST	SEGMENT
??_C@_0N@IBMPLFMC@RemoveHeresy?$AA@ DB 'RemoveHeresy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCDJIPP@SpreadReligion?$AA@
CONST	SEGMENT
??_C@_0P@MCDJIPP@SpreadReligion?$AA@ DB 'SpreadReligion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PLIOIDHO@NumGoldPerEra?$AA@
CONST	SEGMENT
??_C@_0O@PLIOIDHO@NumGoldPerEra?$AA@ DB 'NumGoldPerEra', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJKAMLEB@BaseGold?$AA@
CONST	SEGMENT
??_C@_08LJKAMLEB@BaseGold?$AA@ DB 'BaseGold', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHOBLNPJ@RushBuilding?$AA@
CONST	SEGMENT
??_C@_0N@LHOBLNPJ@RushBuilding?$AA@ DB 'RushBuilding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NALMHPBJ@HurryMultiplier?$AA@
CONST	SEGMENT
??_C@_0BA@NALMHPBJ@HurryMultiplier?$AA@ DB 'HurryMultiplier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IMPENBOK@BaseHurry?$AA@
CONST	SEGMENT
??_C@_09IMPENBOK@BaseHurry?$AA@ DB 'BaseHurry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IOICOACK@BaseCultureTurnsToCount?$AA@
CONST	SEGMENT
??_C@_0BI@IOICOACK@BaseCultureTurnsToCount?$AA@ DB 'BaseCultureTurnsToCou'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KCIIMMGB@BaseBeakersTurnsToCount?$AA@
CONST	SEGMENT
??_C@_0BI@KCIIMMGB@BaseBeakersTurnsToCount?$AA@ DB 'BaseBeakersTurnsToCou'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBLFACAI@NumFreeTechs?$AA@
CONST	SEGMENT
??_C@_0N@DBLFACAI@NumFreeTechs?$AA@ DB 'NumFreeTechs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFPBBIMB@WorkRate?$AA@
CONST	SEGMENT
??_C@_08JFPBBIMB@WorkRate?$AA@ DB 'WorkRate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@
CONST	SEGMENT
??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@ DB 'NukeDamageLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HKHELBGA@AirUnitCap?$AA@
CONST	SEGMENT
??_C@_0L@HKHELBGA@AirUnitCap?$AA@ DB 'AirUnitCap', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ODDPMIFP@AirInterceptRange?$AA@
CONST	SEGMENT
??_C@_0BC@ODDPMIFP@AirInterceptRange?$AA@ DB 'AirInterceptRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFMCGLCK@Range?$AA@
CONST	SEGMENT
??_C@_05CFMCGLCK@Range?$AA@ DB 'Range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GIDGFBEL@BaseSightRange?$AA@
CONST	SEGMENT
??_C@_0P@GIDGFBEL@BaseSightRange?$AA@ DB 'BaseSightRange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPHBEKMP@Immobile?$AA@
CONST	SEGMENT
??_C@_08MPHBEKMP@Immobile?$AA@ DB 'Immobile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCMDHLMM@Moves?$AA@
CONST	SEGMENT
??_C@_05OCMDHLMM@Moves?$AA@ DB 'Moves', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILJKFCBC@MinAreaSize?$AA@
CONST	SEGMENT
??_C@_0M@ILJKFCBC@MinAreaSize?$AA@ DB 'MinAreaSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@
CONST	SEGMENT
??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@ DB 'AdvancedStartCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KALJCKJH@HurryCostModifier?$AA@
CONST	SEGMENT
??_C@_0BC@KALJCKJH@HurryCostModifier?$AA@ DB 'HurryCostModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BIKIILFC@MoveAfterPurchase?$AA@
CONST	SEGMENT
??_C@_0BC@BIKIILFC@MoveAfterPurchase?$AA@ DB 'MoveAfterPurchase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJFPEEDM@PurchaseOnly?$AA@
CONST	SEGMENT
??_C@_0N@BJFPEEDM@PurchaseOnly?$AA@ DB 'PurchaseOnly', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NBDMLJGP@RequiresFaithPurchaseEnabled?$AA@
CONST	SEGMENT
??_C@_0BN@NBDMLJGP@RequiresFaithPurchaseEnabled?$AA@ DB 'RequiresFaithPur'
	DB	'chaseEnabled', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGBPBICB@FaithCost?$AA@
CONST	SEGMENT
??_C@_09JGBPBICB@FaithCost?$AA@ DB 'FaithCost', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JIKDDMHE@FinalProductionCostModifier?$AA@
CONST	SEGMENT
??_C@_0BM@JIKDDMHE@FinalProductionCostModifier?$AA@ DB 'FinalProductionCo'
	DB	'stModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04FICPKHNF@Cost?$AA@
CONST	SEGMENT
??_C@_04FICPKHNF@Cost?$AA@ DB 'Cost', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv860 = -252						; size = 4
_this$ = -248						; size = 4
$T219542 = -244						; size = 4
$T219541 = -240						; size = 4
_count$219534 = -228					; size = 4
$T219525 = -224						; size = 4
$T219524 = -220						; size = 4
$T219513 = -216						; size = 4
$T219510 = -212						; size = 4
$T219509 = -208						; size = 4
$T219508 = -204						; size = 4
_f1$217721 = -200					; size = 4
_iPathSubdivision$217733 = -196				; size = 4
_f5$217729 = -192					; size = 4
_f2$217723 = -188					; size = 4
_f3$217725 = -184					; size = 4
_f4$217727 = -180					; size = 4
_f0$217719 = -176					; size = 4
_f6$217731 = -172					; size = 4
_szMovementRate$217714 = -168				; size = 4
_pMovementRates$217711 = -164				; size = 4
_strKey$217709 = -160					; size = 28
_szGreatWorkType$217705 = -132				; size = 4
_pResults$217698 = -128					; size = 4
_strKey$217696 = -124					; size = 28
_i$217701 = -96						; size = 4
_pUnitNameCount$217683 = -92				; size = 4
_strKey$217681 = -88					; size = 28
_pResults$217674 = -60					; size = 4
_strKey$217672 = -56					; size = 28
__$ArrayPad$ = -28					; size = 4
_i$217677 = -24						; size = 4
_szUnitType$ = -20					; size = 4
_szTextVal$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvUnitEntry::CacheResults, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN15@CacheResul

; 166  : 		return false;

	xor	al, al
	jmp	$LN16@CacheResul
$LN15@CacheResul:

; 167  : 
; 168  : 	//Basic Properties
; 169  : 	m_iProductionCost = kResults.GetInt("Cost");

	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 170  : #ifdef NQ_UNIT_FINAL_PRODUCTION_COST_MODIFIER
; 171  : 	m_iFinalProductionCostModifier = kResults.GetInt("FinalProductionCostModifier");

	push	OFFSET ??_C@_0BM@JIKDDMHE@FinalProductionCostModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 172  : #endif
; 173  : 	m_iFaithCost = kResults.GetInt("FaithCost");

	push	OFFSET ??_C@_09JGBPBICB@FaithCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 174  : 	m_bRequiresFaithPurchaseEnabled = kResults.GetBool("RequiresFaithPurchaseEnabled");

	push	OFFSET ??_C@_0BN@NBDMLJGP@RequiresFaithPurchaseEnabled?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+272], al

; 175  : 	m_bPurchaseOnly = kResults.GetBool("PurchaseOnly");

	push	OFFSET ??_C@_0N@BJFPEEDM@PurchaseOnly?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+273], al

; 176  : 	m_bMoveAfterPurchase = kResults.GetBool("MoveAfterPurchase");

	push	OFFSET ??_C@_0BC@BIKIILFC@MoveAfterPurchase?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+274], al

; 177  : 	m_iHurryCostModifier = kResults.GetInt("HurryCostModifier");

	push	OFFSET ??_C@_0BC@KALJCKJH@HurryCostModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 178  : 	m_iAdvancedStartCost = kResults.GetInt("AdvancedStartCost");

	push	OFFSET ??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 179  : 	m_iMinAreaSize = kResults.GetInt("MinAreaSize");

	push	OFFSET ??_C@_0M@ILJKFCBC@MinAreaSize?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 180  : 	m_iMoves = kResults.GetInt("Moves");

	push	OFFSET ??_C@_05OCMDHLMM@Moves?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 181  : 	m_bMoves = kResults.GetInt("Immobile");

	push	OFFSET ??_C@_08MPHBEKMP@Immobile?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	test	eax, eax
	setne	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+292], al

; 182  : 	m_iBaseSightRange = kResults.GetInt("BaseSightRange");

	push	OFFSET ??_C@_0P@GIDGFBEL@BaseSightRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 183  : 	m_iRange = kResults.GetInt("Range");

	push	OFFSET ??_C@_05CFMCGLCK@Range?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 184  : 	m_iAirInterceptRange = kResults.GetInt("AirInterceptRange");

	push	OFFSET ??_C@_0BC@ODDPMIFP@AirInterceptRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 185  : 	m_iAirUnitCap = kResults.GetInt("AirUnitCap");

	push	OFFSET ??_C@_0L@HKHELBGA@AirUnitCap?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 186  : 	m_iNukeDamageLevel = kResults.GetInt("NukeDamageLevel");

	push	OFFSET ??_C@_0BA@NGIMPIOP@NukeDamageLevel?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 187  : 	m_iWorkRate = kResults.GetInt("WorkRate");

	push	OFFSET ??_C@_08JFPBBIMB@WorkRate?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 188  : 	m_iNumFreeTechs = kResults.GetInt("NumFreeTechs");

	push	OFFSET ??_C@_0N@DBLFACAI@NumFreeTechs?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 189  : 	m_iBaseBeakersTurnsToCount = kResults.GetInt("BaseBeakersTurnsToCount");

	push	OFFSET ??_C@_0BI@KCIIMMGB@BaseBeakersTurnsToCount?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 190  : 	m_iBaseCultureTurnsToCount = kResults.GetInt("BaseCultureTurnsToCount");

	push	OFFSET ??_C@_0BI@IOICOACK@BaseCultureTurnsToCount?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], eax

; 191  : 	m_iBaseHurry = kResults.GetInt("BaseHurry");

	push	OFFSET ??_C@_09IMPENBOK@BaseHurry?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 192  : 	m_iHurryMultiplier = kResults.GetInt("HurryMultiplier");

	push	OFFSET ??_C@_0BA@NALMHPBJ@HurryMultiplier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 193  : 	m_bRushBuilding= kResults.GetInt("RushBuilding");

	push	OFFSET ??_C@_0N@LHOBLNPJ@RushBuilding?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	test	eax, eax
	setne	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+340], al

; 194  : 	m_iBaseGold = kResults.GetInt("BaseGold");

	push	OFFSET ??_C@_08LJKAMLEB@BaseGold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+344], eax

; 195  : 	m_iNumGoldPerEra = kResults.GetInt("NumGoldPerEra");

	push	OFFSET ??_C@_0O@PLIOIDHO@NumGoldPerEra?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+348], eax

; 196  : 	m_bSpreadReligion = kResults.GetBool("SpreadReligion");

	push	OFFSET ??_C@_0P@MCDJIPP@SpreadReligion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+352], al

; 197  : 	m_bRemoveHeresy = kResults.GetBool("RemoveHeresy");

	push	OFFSET ??_C@_0N@IBMPLFMC@RemoveHeresy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+367], al

; 198  : 	m_iReligionSpreads = kResults.GetInt("ReligionSpreads");

	push	OFFSET ??_C@_0BA@CJPLONNA@ReligionSpreads?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+356], eax

; 199  : 	m_iReligiousStrength = kResults.GetInt("ReligiousStrength");

	push	OFFSET ??_C@_0BC@LCOFJMID@ReligiousStrength?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], eax

; 200  : 	m_bFoundReligion = kResults.GetBool("FoundReligion");

	push	OFFSET ??_C@_0O@KKHALMAI@FoundReligion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+364], al

; 201  : 	m_bRequiresEnhancedReligion = kResults.GetBool("RequiresEnhancedReligion");

	push	OFFSET ??_C@_0BJ@MOLCPFKE@RequiresEnhancedReligion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+365], al

; 202  : 	m_bProhibitsSpread = kResults.GetBool("ProhibitsSpread");

	push	OFFSET ??_C@_0BA@DKCODCKO@ProhibitsSpread?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+366], al

; 203  : 	m_bCanBuyCityState = kResults.GetBool("CanBuyCityState");

	push	OFFSET ??_C@_0BA@NGCBHOOC@CanBuyCityState?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+368], al

; 204  : 	m_iCombat = kResults.GetInt("Combat");

	push	OFFSET ??_C@_06BMBJGDHL@Combat?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+372], eax

; 205  : 	m_iCombatLimit = kResults.GetInt("CombatLimit");

	push	OFFSET ??_C@_0M@HLLAPADJ@CombatLimit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+376], eax

; 206  : 	m_iRangedCombat = kResults.GetInt("RangedCombat");

	push	OFFSET ??_C@_0N@CHOMJAEH@RangedCombat?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+380], eax

; 207  : 	m_iRangedCombatLimit = kResults.GetInt("RangedCombatLimit");

	push	OFFSET ??_C@_0BC@EAPECPE@RangedCombatLimit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], eax

; 208  : 	m_iXPValueAttack = kResults.GetInt("XPValueAttack");

	push	OFFSET ??_C@_0O@KJPLDOCL@XPValueAttack?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+388], eax

; 209  : 	m_iXPValueDefense = kResults.GetInt("XPValueDefense");

	push	OFFSET ??_C@_0P@GGBHCLMH@XPValueDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+392], eax

; 210  : 	m_iConscriptionValue = kResults.GetInt("Conscription");

	push	OFFSET ??_C@_0N@NJMICPAN@Conscription?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+404], eax

; 211  : 	m_iExtraMaintenanceCost = kResults.GetInt("ExtraMaintenanceCost");

	push	OFFSET ??_C@_0BF@PCBLMKKN@ExtraMaintenanceCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+408], eax

; 212  : 	m_bNoMaintenance = kResults.GetBool("NoMaintenance");

	push	OFFSET ??_C@_0O@OFPKAHBM@NoMaintenance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+412], al

; 213  : 	m_iUnhappiness = kResults.GetInt("Unhappiness");

	push	OFFSET ??_C@_0M@LMOEFFNJ@Unhappiness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+416], eax

; 214  : 	m_iUnitFlagIconOffset = kResults.GetInt("UnitFlagIconOffset");

	push	OFFSET ??_C@_0BD@LEGEBINP@UnitFlagIconOffset?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+560], eax

; 215  : 	m_iUnitPortraitOffset = kResults.GetInt("PortraitIndex");

	push	OFFSET ??_C@_0O@NLIKPLNH@PortraitIndex?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+564], eax

; 216  : 	m_iLeaderExperience = kResults.GetInt("LeaderExperience");

	push	OFFSET ??_C@_0BB@KOFKKLKE@LeaderExperience?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], eax

; 217  : 	m_bFoodProduction = kResults.GetBool("Food");

	push	OFFSET ??_C@_04MPDBGAOA@Food?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+496], al

; 218  : 	m_bNoBadGoodies = kResults.GetBool("NoBadGoodies");

	push	OFFSET ??_C@_0N@JLDOMIFK@NoBadGoodies?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+497], al

; 219  : 	m_bRivalTerritory = kResults.GetBool("RivalTerritory");

	push	OFFSET ??_C@_0P@FHNGKGM@RivalTerritory?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+498], al

; 220  : 	m_bMilitarySupport = kResults.GetBool("MilitarySupport");

	push	OFFSET ??_C@_0BA@NPLCEOFB@MilitarySupport?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+499], al

; 221  : 	m_bMilitaryProduction = kResults.GetBool("MilitaryProduction");

	push	OFFSET ??_C@_0BD@CDKCFLHJ@MilitaryProduction?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+500], al

; 222  : 	m_bPillage = kResults.GetBool("Pillage");

	push	OFFSET ??_C@_07CEKJFNCK@Pillage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+501], al

; 223  : 	m_bFound = kResults.GetBool("Found");

	push	OFFSET ??_C@_05JDGHEPJG@Found?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+502], al

; 224  : 	m_bFoundAbroad = kResults.GetBool("FoundAbroad");

	push	OFFSET ??_C@_0M@EHKLHIAH@FoundAbroad?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+503], al

; 225  : 	m_iCultureBombRadius = kResults.GetInt("CultureBombRadius");

	push	OFFSET ??_C@_0BC@NEFPKCDN@CultureBombRadius?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+504], eax

; 226  : 	m_iGoldenAgeTurns = kResults.GetInt("GoldenAgeTurns");

	push	OFFSET ??_C@_0P@BJCGNFDJ@GoldenAgeTurns?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+512], eax

; 227  : 	m_iFreePolicies = kResults.GetInt("FreePolicies");

	push	OFFSET ??_C@_0N@PJBJAAKG@FreePolicies?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+516], eax

; 228  : 	m_iOneShotTourism = kResults.GetInt("OneShotTourism");

	push	OFFSET ??_C@_0P@HKDBFADO@OneShotTourism?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], eax

; 229  : 	m_iOneShotTourismPercentOthers = kResults.GetInt("OneShotTourismPercentOthers");

	push	OFFSET ??_C@_0BM@KDKDJKAF@OneShotTourismPercentOthers?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+524], eax

; 230  : 	m_bIgnoreBuildingDefense = kResults.GetBool("IgnoreBuildingDefense");

	push	OFFSET ??_C@_0BG@NPOBMDEK@IgnoreBuildingDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+528], al

; 231  : 	m_bPrereqResources = kResults.GetBool("PrereqResources");

	push	OFFSET ??_C@_0BA@GHBIMFHM@PrereqResources?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+529], al

; 232  : 	m_bMechanized = kResults.GetBool("Mechanized");

	push	OFFSET ??_C@_0L@BIJIAIHH@Mechanized?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+530], al

; 233  : 	m_bSuicide = kResults.GetBool("Suicide");

	push	OFFSET ??_C@_07BPDHDMKH@Suicide?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+531], al

; 234  : 	m_bCaptureWhileEmbarked = kResults.GetBool("CaptureWhileEmbarked");

	push	OFFSET ??_C@_0BF@JGBDHAEA@CaptureWhileEmbarked?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+532], al

; 235  : 	m_bRangeAttackOnlyInDomain = kResults.GetBool("RangeAttackOnlyInDomain");

	push	OFFSET ??_C@_0BI@CECOOOBA@RangeAttackOnlyInDomain?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+533], al

; 236  : 	m_bTrade = kResults.GetBool("Trade");

	push	OFFSET ??_C@_05IOPOMLGK@Trade?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+548], al

; 237  : 	m_iNumExoticGoods = kResults.GetInt("NumExoticGoods");

	push	OFFSET ??_C@_0P@BNHJNPFG@NumExoticGoods?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+552], eax

; 238  : 
; 239  : 	m_strUnitArtInfoTag = kResults.GetText("UnitArtInfo");

	push	OFFSET ??_C@_0M@IMLLCCIF@UnitArtInfo?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T219525[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 568				; 00000238H
	mov	DWORD PTR $T219524[ebp], edx
	cmp	DWORD PTR $T219525[ebp], 0
	je	SHORT $LN26@CacheResul
	mov	eax, DWORD PTR $T219525[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219524[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN25@CacheResul
$LN26@CacheResul:
	mov	ecx, DWORD PTR $T219524[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN25@CacheResul:

; 240  : 	m_bUnitArtInfoCulturalVariation = kResults.GetBool("UnitArtInfoCulturalVariation");

	push	OFFSET ??_C@_0BN@JKIILKFN@UnitArtInfoCulturalVariation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+596], al

; 241  : 	m_bUnitArtInfoEraVariation = kResults.GetBool("UnitArtInfoEraVariation");

	push	OFFSET ??_C@_0BI@BHACMNCG@UnitArtInfoEraVariation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+597], al

; 242  : 
; 243  : 	//References
; 244  : 	const char* szTextVal = NULL;

	mov	DWORD PTR _szTextVal$[ebp], 0

; 245  : 	szTextVal = kResults.GetText("Class");

	push	OFFSET ??_C@_05EKAMNAII@Class?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 246  : 	m_iUnitClassType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+420], eax

; 247  : 
; 248  : 	szTextVal = kResults.GetText("Special");

	push	OFFSET ??_C@_07ONMEKKNJ@Special?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 249  : 	m_iSpecialUnitType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+424], eax

; 250  : 
; 251  : 	szTextVal = kResults.GetText("Capture");

	push	OFFSET ??_C@_07EGAJKHF@Capture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 252  : 	m_iUnitCaptureClassType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+428], eax

; 253  : 
; 254  : 	szTextVal = kResults.GetText("CombatClass");

	push	OFFSET ??_C@_0M@FGCAMCEF@CombatClass?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 255  : 	m_iUnitCombatType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+432], eax

; 256  : 
; 257  : 	szTextVal = kResults.GetText("Domain");

	push	OFFSET ??_C@_06HFDFFJHI@Domain?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 258  : 	m_iDomainType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+436], eax

; 259  : 
; 260  : 	szTextVal = kResults.GetText("CivilianAttackPriority");

	push	OFFSET ??_C@_0BH@NIFFBICI@CivilianAttackPriority?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 261  : 	m_iCivilianAttackPriority = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], eax

; 262  : 
; 263  : 	szTextVal = kResults.GetText("DefaultUnitAI");

	push	OFFSET ??_C@_0O@NCBKCNPP@DefaultUnitAI?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 264  : 	m_iDefaultUnitAIType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], eax

; 265  : 
; 266  : 	szTextVal = kResults.GetText("PillagePrereqTech");

	push	OFFSET ??_C@_0BC@BIDPEJFN@PillagePrereqTech?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 267  : 	m_iPrereqPillageTech = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+448], eax

; 268  : 	
; 269  : 	szTextVal = kResults.GetText("PrereqTech");

	push	OFFSET ??_C@_0L@NJNFNDFO@PrereqTech?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 270  : 	m_iPrereqAndTech = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+452], eax

; 271  : 
; 272  : 	szTextVal = kResults.GetText("ObsoleteTech");

	push	OFFSET ??_C@_0N@KNKPCICJ@ObsoleteTech?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 273  : 	m_iObsoleteTech = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+456], eax

; 274  : 
; 275  : 	szTextVal = kResults.GetText("PolicyType");

	push	OFFSET ??_C@_0L@LIHFHODE@PolicyType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 276  : 	m_iPolicyType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], eax

; 277  : 
; 278  : 	szTextVal = kResults.GetText("GoodyHutUpgradeUnitClass");

	push	OFFSET ??_C@_0BJ@PLDCLKNF@GoodyHutUpgradeUnitClass?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 279  : 	m_iGoodyHutUpgradeUnitClass = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax

; 280  : 
; 281  : 	szTextVal = kResults.GetText("SpecialCargo");

	push	OFFSET ??_C@_0N@JIBALDJB@SpecialCargo?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 282  : 	m_iSpecialCargo = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 283  : 
; 284  : 	szTextVal = kResults.GetText("DomainCargo");

	push	OFFSET ??_C@_0M@EMBKKFAL@DomainCargo?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 285  : 	m_iDomainCargo = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+400], eax

; 286  : 
; 287  : 	szTextVal = kResults.GetText("ProjectPrereq");

	push	OFFSET ??_C@_0O@MMIDMALL@ProjectPrereq?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 288  : 	m_iProjectPrereq = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+536], eax

; 289  : 
; 290  : 	szTextVal = kResults.GetText("SpaceshipProject");

	push	OFFSET ??_C@_0BB@IFAHKBOJ@SpaceshipProject?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 291  : 	m_iSpaceshipProject = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+540], eax

; 292  : 
; 293  : 	szTextVal = kResults.GetText("LeaderPromotion");

	push	OFFSET ??_C@_0BA@KNEGDPFJ@LeaderPromotion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 294  : 	m_iLeaderPromotion = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+544], eax

; 295  : 
; 296  : 	//Arrays
; 297  : 	const char* szUnitType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szUnitType$[ebp], eax

; 298  : 
; 299  : 	kUtility.SetFlavors(m_piFlavorValue, "Unit_Flavors", "UnitType", szUnitType);

	push	0
	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0N@HKGBNEME@Unit_Flavors?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 948				; 000003b4H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 300  : 
; 301  : 	kUtility.PopulateArrayByValue(m_piProductionTraits, "Traits", "Unit_ProductionTraits", "TraitType", "UnitType", szUnitType, "Trait");

	push	0
	push	0
	push	OFFSET ??_C@_05NFPPHLCJ@Trait?$AA@
	mov	ecx, DWORD PTR _szUnitType$[ebp]
	push	ecx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_09HHNMMNID@TraitType?$AA@
	push	OFFSET ??_C@_0BG@IDBKIPKJ@Unit_ProductionTraits?$AA@
	push	OFFSET ??_C@_06EGHFENCC@Traits?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 944				; 000003b0H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 302  : 
; 303  : 	kUtility.PopulateArrayByValue(m_piResourceQuantityRequirements, "Resources", "Unit_ResourceQuantityRequirements", "ResourceType", "UnitType", szUnitType, "Cost");

	push	0
	push	0
	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	mov	eax, DWORD PTR _szUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0CC@MBHMCDO@Unit_ResourceQuantityRequirement@
	push	OFFSET ??_C@_09FDCBPLKG@Resources?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 940				; 000003acH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 304  : 	kUtility.PopulateArrayByValue(m_piProductionModifierBuildings, "Buildings", "Unit_ProductionModifierBuildings", "BuildingType", "UnitType", szUnitType, "ProductionModifier");

	push	0
	push	0
	push	OFFSET ??_C@_0BD@JMJICLDJ@ProductionModifier?$AA@
	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0N@OGHNDFPH@BuildingType?$AA@
	push	OFFSET ??_C@_0CB@PJLEBENK@Unit_ProductionModifierBuildings@
	push	OFFSET ??_C@_09CKIIHEFP@Buildings?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 956				; 000003bcH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 305  : 	kUtility.PopulateArrayByValue(m_piYieldFromKills, "Yields", "Unit_YieldFromKills", "YieldType", "UnitType", szUnitType, "Yield");

	push	0
	push	0
	push	OFFSET ??_C@_05LNDKIJIJ@Yield?$AA@
	mov	ecx, DWORD PTR _szUnitType$[ebp]
	push	ecx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_09HJBDLJFJ@YieldType?$AA@
	push	OFFSET ??_C@_0BE@NAIIDHDO@Unit_YieldFromKills?$AA@
	push	OFFSET ??_C@_06JAMLCLDI@Yields?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 960				; 000003c0H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 306  : 	kUtility.PopulateArrayByExistence(m_pbFreePromotions, "UnitPromotions", "Unit_FreePromotions", "PromotionType", "UnitType", szUnitType);

	mov	eax, DWORD PTR _szUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0O@IILJPJBB@PromotionType?$AA@
	push	OFFSET ??_C@_0BE@OBMCDBKK@Unit_FreePromotions?$AA@
	push	OFFSET ??_C@_0P@GCBJCIAG@UnitPromotions?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 992				; 000003e0H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 307  : 
; 308  : 	kUtility.PopulateArrayByExistence(m_pbUpgradeUnitClass, "UnitClasses", "Unit_ClassUpgrades", "UnitClassType", "UnitType", szUnitType);

	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0O@JGILCIIO@UnitClassType?$AA@
	push	OFFSET ??_C@_0BD@NOGKHAON@Unit_ClassUpgrades?$AA@
	push	OFFSET ??_C@_0M@HLHJNCC@UnitClasses?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 964				; 000003c4H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 309  : 
; 310  : 	kUtility.PopulateArrayByExistence(m_pbUnitAIType, "UnitAIInfos", "Unit_AITypes", "UnitAIType", "UnitType", szUnitType);

	mov	ecx, DWORD PTR _szUnitType$[ebp]
	push	ecx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0L@NHJBPHOF@UnitAIType?$AA@
	push	OFFSET ??_C@_0N@CKNFDIBF@Unit_AITypes?$AA@
	push	OFFSET ??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 968				; 000003c8H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 311  : 	kUtility.PopulateArrayByExistence(m_pbNotUnitAIType, "UnitAIInfos", "Unit_NotAITypes", "UnitAIType", "UnitType", szUnitType);

	mov	eax, DWORD PTR _szUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0L@NHJBPHOF@UnitAIType?$AA@
	push	OFFSET ??_C@_0BA@GHPFBJGB@Unit_NotAITypes?$AA@
	push	OFFSET ??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 972				; 000003ccH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 312  : 
; 313  : 	kUtility.PopulateArrayByExistence(m_pbBuilds, "Builds", "Unit_Builds", "BuildType", "UnitType", szUnitType);

	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_09LLAGGHGM@BuildType?$AA@
	push	OFFSET ??_C@_0M@IIOBJNH@Unit_Builds?$AA@
	push	OFFSET ??_C@_06EEPGMMON@Builds?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 976				; 000003d0H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 314  : 	kUtility.PopulateArrayByExistence(m_pbGreatPeoples, "Specialists", "Unit_GreatPersons", "GreatPersonType", "UnitType", szUnitType);

	mov	ecx, DWORD PTR _szUnitType$[ebp]
	push	ecx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0BA@PJGLMFLF@GreatPersonType?$AA@
	push	OFFSET ??_C@_0BC@CIDMFDCG@Unit_GreatPersons?$AA@
	push	OFFSET ??_C@_0M@EENMFCNN@Specialists?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 980				; 000003d4H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 315  : 	kUtility.PopulateArrayByExistence(m_pbBuildings, "Buildings", "Unit_Buildings", "BuildingType", "UnitType", szUnitType);

	mov	eax, DWORD PTR _szUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0N@OGHNDFPH@BuildingType?$AA@
	push	OFFSET ??_C@_0P@KBOFNMAB@Unit_Buildings?$AA@
	push	OFFSET ??_C@_09CKIIHEFP@Buildings?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 984				; 000003d8H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 316  : 	kUtility.PopulateArrayByExistence(m_pbBuildingClassRequireds, "BuildingClasses", "Unit_BuildingClassRequireds", "BuildingClassType", "UnitType", szUnitType);

	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_08PNBAGKKP@UnitType?$AA@
	push	OFFSET ??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@
	push	OFFSET ??_C@_0BM@IHEEELMD@Unit_BuildingClassRequireds?$AA@
	push	OFFSET ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 988				; 000003dcH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 317  : 
; 318  : 	//TechTypes
; 319  : 	{
; 320  : 		//Initialize array to NO_TECH
; 321  : 		kUtility.InitializeArray(m_piPrereqAndTechs, "Technologies", (int)NO_TECH);

	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$219534[ebp], eax
	cmp	DWORD PTR _count$219534[ebp], 0
	jne	SHORT $LN31@CacheResul
	mov	DWORD PTR _count$219534[ebp], 1
$LN31@CacheResul:
	push	-1
	mov	ecx, DWORD PTR _count$219534[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 936				; 000003a8H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 322  : 
; 323  : 		std::string strKey = "Units - TechTypes";

	push	OFFSET ??_C@_0BC@JFEDGKLH@Units?5?9?5TechTypes?$AA@
	lea	ecx, DWORD PTR _strKey$217672[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 324  : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$217672[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217674[ebp], eax

; 325  : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$217674[ebp], 0
	jne	SHORT $LN14@CacheResul

; 326  : 		{
; 327  : 			pResults = kUtility.PrepareResults(strKey, "select Technologies.ID from Unit_TechTypes inner join Technologies on TechType = Technologies.Type where UnitType = ?");

	push	OFFSET ??_C@_0HG@BPINJJDH@select?5Technologies?4ID?5from?5Unit@
	lea	ecx, DWORD PTR _strKey$217672[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217674[ebp], eax
$LN14@CacheResul:

; 328  : 		}
; 329  : 
; 330  : 		pResults->Bind(1, szUnitType, -1, false);

	push	0
	push	-1
	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$217674[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z

; 331  : 
; 332  : 		int i = 0;

	mov	DWORD PTR _i$217677[ebp], 0
$LN13@CacheResul:

; 333  : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217674[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@CacheResul

; 334  : 		{
; 335  : 			m_piPrereqAndTechs[i++] = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217674[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+936]
	mov	ecx, DWORD PTR _i$217677[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	edx, DWORD PTR _i$217677[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217677[ebp], edx

; 336  : 		}

	jmp	SHORT $LN13@CacheResul
$LN12@CacheResul:

; 337  : 
; 338  : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217674[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 339  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$217672[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 340  : 
; 341  : 	//Unit Unique Names Count
; 342  : 	{
; 343  : 		std::string strKey = "Units - UniqueNameCount";

	push	OFFSET ??_C@_0BI@EMEJHAEA@Units?5?9?5UniqueNameCount?$AA@
	lea	ecx, DWORD PTR _strKey$217681[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 344  : 		Database::Results* pUnitNameCount = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$217681[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pUnitNameCount$217683[ebp], eax

; 345  : 		if(pUnitNameCount == NULL)

	cmp	DWORD PTR _pUnitNameCount$217683[ebp], 0
	jne	SHORT $LN11@CacheResul

; 346  : 		{
; 347  : 			pUnitNameCount = kUtility.PrepareResults(strKey, "select count(*) from Unit_UniqueNames where UnitType = ?");

	push	OFFSET ??_C@_0DJ@CMICAENA@select?5count?$CI?$CK?$CJ?5from?5Unit_Unique@
	lea	ecx, DWORD PTR _strKey$217681[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pUnitNameCount$217683[ebp], eax
$LN11@CacheResul:

; 348  : 		}
; 349  : 
; 350  : 		pUnitNameCount->Bind(1, szUnitType, -1, false);

	push	0
	push	-1
	mov	edx, DWORD PTR _szUnitType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pUnitNameCount$217683[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z

; 351  : 
; 352  : 		pUnitNameCount->Step();

	mov	ecx, DWORD PTR _pUnitNameCount$217683[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ

; 353  : 		m_iNumUnitNames = pUnitNameCount->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pUnitNameCount$217683[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], eax

; 354  : 
; 355  : 		pUnitNameCount->Reset();

	mov	ecx, DWORD PTR _pUnitNameCount$217683[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 356  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$217681[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 357  : 
; 358  : 	//Unit Unique Names
; 359  : 	{
; 360  : 		if(m_iNumUnitNames > 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+484], 0
	jle	$LN10@CacheResul

; 361  : 		{
; 362  : #ifdef AUI_WARNING_FIXES
; 363  : 			SAFE_DELETE_ARRAY(m_paszUnitNames);
; 364  : 			SAFE_DELETE_ARRAY(m_paeGreatWorks);
; 365  : #endif
; 366  : 			m_paszUnitNames = FNEW(CvString[m_iNumUnitNames], c_eCiv5GameplayDLL, 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+484]
	mov	DWORD PTR $T219508[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T219508[ebp]
	mov	edx, 28					; 0000001cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219510[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T219510[ebp], 0
	je	SHORT $LN18@CacheResul
	mov	ecx, DWORD PTR $T219510[ebp]
	mov	edx, DWORD PTR $T219508[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CvString@@QAE@XZ		; CvString::~CvString
	push	OFFSET ??0CvString@@QAE@XZ		; CvString::CvString
	mov	eax, DWORD PTR $T219508[ebp]
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR $T219510[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T219510[ebp]
	add	edx, 4
	mov	DWORD PTR tv860[ebp], edx
	jmp	SHORT $LN19@CacheResul
$LN18@CacheResul:
	mov	DWORD PTR tv860[ebp], 0
$LN19@CacheResul:
	mov	eax, DWORD PTR tv860[ebp]
	mov	DWORD PTR $T219509[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T219509[ebp]
	mov	DWORD PTR [ecx+1008], edx

; 367  : 			m_paeGreatWorks = FNEW(GreatWorkType[m_iNumUnitNames], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+484]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T219513[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T219513[ebp]
	mov	DWORD PTR [eax+1012], ecx

; 368  : 
; 369  : 			std::string strKey = "Units - UniqueNames";

	push	OFFSET ??_C@_0BE@NLMNNIP@Units?5?9?5UniqueNames?$AA@
	lea	ecx, DWORD PTR _strKey$217696[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 370  : 			Database::Results* pResults = kUtility.GetResults(strKey);

	lea	edx, DWORD PTR _strKey$217696[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$217698[ebp], eax

; 371  : 			if(pResults == NULL)

	cmp	DWORD PTR _pResults$217698[ebp], 0
	jne	SHORT $LN9@CacheResul

; 372  : 			{
; 373  : 				pResults = kUtility.PrepareResults(strKey, "select UniqueName, GreatWorkType from Unit_UniqueNames where UnitType = ? ORDER BY rowid");

	push	OFFSET ??_C@_0FJ@KGAJMIGH@select?5UniqueName?0?5GreatWorkType@
	lea	eax, DWORD PTR _strKey$217696[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$217698[ebp], eax
$LN9@CacheResul:

; 374  : 			}
; 375  : 
; 376  : 			pResults->Bind(1, szUnitType, -1, false);

	push	0
	push	-1
	mov	ecx, DWORD PTR _szUnitType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$217698[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z

; 377  : 
; 378  : 			int i = 0;

	mov	DWORD PTR _i$217701[ebp], 0
$LN8@CacheResul:

; 379  : 			while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$217698[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	$LN7@CacheResul

; 380  : 			{
; 381  : 				m_paszUnitNames[i] = pResults->GetText(0);

	push	0
	mov	ecx, DWORD PTR _pResults$217698[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T219542[ebp], eax
	mov	eax, DWORD PTR _i$217701[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+1008]
	mov	DWORD PTR $T219541[ebp], eax
	cmp	DWORD PTR $T219542[ebp], 0
	je	SHORT $LN42@CacheResul
	mov	edx, DWORD PTR $T219542[ebp]
	push	edx
	mov	ecx, DWORD PTR $T219541[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN41@CacheResul
$LN42@CacheResul:
	mov	ecx, DWORD PTR $T219541[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN41@CacheResul:

; 382  : 			
; 383  : 				const char* szGreatWorkType = pResults->GetText(1);

	push	1
	mov	ecx, DWORD PTR _pResults$217698[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR _szGreatWorkType$217705[ebp], eax

; 384  : 				if(szGreatWorkType == NULL)

	cmp	DWORD PTR _szGreatWorkType$217705[ebp], 0
	jne	SHORT $LN6@CacheResul

; 385  : 				{
; 386  : 					m_paeGreatWorks[i] = NO_GREAT_WORK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1012]
	mov	edx, DWORD PTR _i$217701[ebp]
	mov	DWORD PTR [ecx+edx*4], -1

; 387  : 				}
; 388  : 				else

	jmp	SHORT $LN5@CacheResul
$LN6@CacheResul:

; 389  : 				{
; 390  : 					m_paeGreatWorks[i] = static_cast<GreatWorkType>(GC.getInfoTypeForString(szGreatWorkType, true));

	push	1
	mov	eax, DWORD PTR _szGreatWorkType$217705[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1012]
	mov	ecx, DWORD PTR _i$217701[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN5@CacheResul:

; 391  : 				}
; 392  : 
; 393  : 				i++;

	mov	edx, DWORD PTR _i$217701[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217701[ebp], edx

; 394  : 			}

	jmp	$LN8@CacheResul
$LN7@CacheResul:

; 395  : 
; 396  : 			pResults->Reset();

	mov	ecx, DWORD PTR _pResults$217698[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 397  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$217696[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN10@CacheResul:

; 398  : 	}
; 399  : 
; 400  : 	//MovementRates
; 401  : 	{
; 402  : 		std::string strKey = "Units - MovementRates";

	push	OFFSET ??_C@_0BG@IDDLABJG@Units?5?9?5MovementRates?$AA@
	lea	ecx, DWORD PTR _strKey$217709[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 403  : 		Database::Results* pMovementRates = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$217709[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pMovementRates$217711[ebp], eax

; 404  : 		if(pMovementRates == NULL)

	cmp	DWORD PTR _pMovementRates$217711[ebp], 0
	jne	SHORT $LN4@CacheResul

; 405  : 		{
; 406  : 			pMovementRates = kUtility.PrepareResults(strKey, "SELECT * FROM MovementRates where Type = ? ORDER BY NumHexes");

	push	OFFSET ??_C@_0DN@GBGKNFPE@SELECT?5?$CK?5FROM?5MovementRates?5wher@
	lea	ecx, DWORD PTR _strKey$217709[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pMovementRates$217711[ebp], eax
$LN4@CacheResul:

; 407  : 		}
; 408  : 
; 409  : 		const char* szMovementRate = kResults.GetText("MoveRate");

	push	OFFSET ??_C@_08GCFKJFEN@MoveRate?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szMovementRate$217714[ebp], eax

; 410  : 		pMovementRates->Bind(1, szMovementRate, -1, false);

	push	0
	push	-1
	mov	edx, DWORD PTR _szMovementRate$217714[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN3@CacheResul:

; 411  : 		while(pMovementRates->Step())

	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	$LN2@CacheResul

; 412  : 		{
; 413  : 			int f0 = pMovementRates->GetInt("NumHexes") - 1;

	push	OFFSET ??_C@_08FHCLFKKE@NumHexes?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	sub	eax, 1
	mov	DWORD PTR _f0$217719[ebp], eax

; 414  : 			float f1 = pMovementRates->GetFloat("TotalTime");

	push	OFFSET ??_C@_09IGIFPOMH@TotalTime?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f1$217721[ebp]

; 415  : 			float f2 = pMovementRates->GetFloat("EaseIn");

	push	OFFSET ??_C@_06IBLHMLOI@EaseIn?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f2$217723[ebp]

; 416  : 			float f3 = pMovementRates->GetFloat("EaseOut");

	push	OFFSET ??_C@_07NABLHCDO@EaseOut?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f3$217725[ebp]

; 417  : 			float f4 = pMovementRates->GetFloat("IndividualOffset");

	push	OFFSET ??_C@_0BB@GMGIGLGK@IndividualOffset?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f4$217727[ebp]

; 418  : 			float f5 = pMovementRates->GetFloat("RowOffset");

	push	OFFSET ??_C@_09ICICMGHB@RowOffset?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f5$217729[ebp]

; 419  : 			float f6 = pMovementRates->GetFloat("CurveRoll");

	push	OFFSET ??_C@_09EDCLCNLE@CurveRoll?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR _f6$217731[ebp]

; 420  : 			int   iPathSubdivision = pMovementRates->GetInt("PathSubdivision");

	push	OFFSET ??_C@_0BA@LIKIENLB@PathSubdivision?$AA@
	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	DWORD PTR _iPathSubdivision$217733[ebp], eax

; 421  : 			if(f0 >= 0 && f0 <= 11)

	cmp	DWORD PTR _f0$217719[ebp], 0
	jl	$LN1@CacheResul
	cmp	DWORD PTR _f0$217719[ebp], 11		; 0000000bH
	jg	$LN1@CacheResul

; 422  : 			{
; 423  : 				m_unitMoveRate[f0].m_fTotalMoveRate    = f1;

	mov	ecx, DWORD PTR _f0$217719[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f1$217721[ebp]
	movss	DWORD PTR [edx+ecx+600], xmm0

; 424  : 				m_unitMoveRate[f0].m_fEaseIn           = f2;

	mov	eax, DWORD PTR _f0$217719[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f2$217723[ebp]
	movss	DWORD PTR [ecx+eax+604], xmm0

; 425  : 				m_unitMoveRate[f0].m_fEaseOut          = f3;

	mov	edx, DWORD PTR _f0$217719[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f3$217725[ebp]
	movss	DWORD PTR [eax+edx+608], xmm0

; 426  : 				m_unitMoveRate[f0].m_fIndividualOffset = f4;

	mov	ecx, DWORD PTR _f0$217719[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f4$217727[ebp]
	movss	DWORD PTR [edx+ecx+612], xmm0

; 427  : 				m_unitMoveRate[f0].m_fRowOffset        = f5;

	mov	eax, DWORD PTR _f0$217719[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f5$217729[ebp]
	movss	DWORD PTR [ecx+eax+616], xmm0

; 428  : 				m_unitMoveRate[f0].m_fCurveRoll        = f6;

	mov	edx, DWORD PTR _f0$217719[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _f6$217731[ebp]
	movss	DWORD PTR [eax+edx+620], xmm0

; 429  : 				m_unitMoveRate[f0].m_iPathSubdivision  = iPathSubdivision;

	mov	ecx, DWORD PTR _f0$217719[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iPathSubdivision$217733[ebp]
	mov	DWORD PTR [edx+ecx+624], eax
$LN1@CacheResul:

; 430  : 			}
; 431  : 		}

	jmp	$LN3@CacheResul
$LN2@CacheResul:

; 432  : 		pMovementRates->Reset();

	mov	ecx, DWORD PTR _pMovementRates$217711[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 433  : 
; 434  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$217709[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 435  : 
; 436  : 	// Calculate military Power and cache it
; 437  : 	DoUpdatePower();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoUpdatePower@CvUnitEntry@@QAEXXZ	; CvUnitEntry::DoUpdatePower

; 438  : 
; 439  : 	return true;

	mov	al, 1
$LN16@CacheResul:

; 440  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$217672[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _strKey$217681[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2:
	mov	eax, DWORD PTR $T219510[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3:
	lea	ecx, DWORD PTR _strKey$217696[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4:
	lea	ecx, DWORD PTR _strKey$217709[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvUnitEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvUnitEntry::CacheResults
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp
;	COMDAT ??_ECvString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECvString@@QAEPAXI@Z PROC				; CvString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN6@vector@2
	push	OFFSET ??1CvString@@QAE@XZ		; CvString::~CvString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN6@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECvString@@QAEPAXI@Z ENDP				; CvString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?GetProductionCost@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetProductionCost
; Function compile flags: /Odtp
;	COMDAT ?GetProductionCost@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProductionCost@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetProductionCost, COMDAT
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	return m_iProductionCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 446  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetProductionCost@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetProductionCost
_TEXT	ENDS
PUBLIC	?GetFinalProductionCostModifier@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetFinalProductionCostModifier
; Function compile flags: /Odtp
;	COMDAT ?GetFinalProductionCostModifier@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFinalProductionCostModifier@CvUnitEntry@@QBEHXZ PROC ; CvUnitEntry::GetFinalProductionCostModifier, COMDAT
; _this$ = ecx

; 451  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 452  : 	return m_iFinalProductionCostModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 453  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFinalProductionCostModifier@CvUnitEntry@@QBEHXZ ENDP ; CvUnitEntry::GetFinalProductionCostModifier
_TEXT	ENDS
PUBLIC	?GetFaithCost@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetFaithCost
; Function compile flags: /Odtp
;	COMDAT ?GetFaithCost@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFaithCost@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetFaithCost, COMDAT
; _this$ = ecx

; 459  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 460  : 	return m_iFaithCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 461  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFaithCost@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetFaithCost
_TEXT	ENDS
PUBLIC	?IsRequiresFaithPurchaseEnabled@CvUnitEntry@@QBE_NXZ ; CvUnitEntry::IsRequiresFaithPurchaseEnabled
; Function compile flags: /Odtp
;	COMDAT ?IsRequiresFaithPurchaseEnabled@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRequiresFaithPurchaseEnabled@CvUnitEntry@@QBE_NXZ PROC ; CvUnitEntry::IsRequiresFaithPurchaseEnabled, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	return m_bRequiresFaithPurchaseEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+272]

; 467  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRequiresFaithPurchaseEnabled@CvUnitEntry@@QBE_NXZ ENDP ; CvUnitEntry::IsRequiresFaithPurchaseEnabled
_TEXT	ENDS
PUBLIC	?IsPurchaseOnly@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsPurchaseOnly
; Function compile flags: /Odtp
;	COMDAT ?IsPurchaseOnly@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPurchaseOnly@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsPurchaseOnly, COMDAT
; _this$ = ecx

; 471  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 	return m_bPurchaseOnly;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+273]

; 473  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPurchaseOnly@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsPurchaseOnly
_TEXT	ENDS
PUBLIC	?CanMoveAfterPurchase@CvUnitEntry@@QBE_NXZ	; CvUnitEntry::CanMoveAfterPurchase
; Function compile flags: /Odtp
;	COMDAT ?CanMoveAfterPurchase@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanMoveAfterPurchase@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::CanMoveAfterPurchase, COMDAT
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 478  : 	return m_bMoveAfterPurchase;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+274]

; 479  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanMoveAfterPurchase@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::CanMoveAfterPurchase
_TEXT	ENDS
PUBLIC	?GetHurryCostModifier@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetHurryCostModifier
; Function compile flags: /Odtp
;	COMDAT ?GetHurryCostModifier@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHurryCostModifier@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetHurryCostModifier, COMDAT
; _this$ = ecx

; 483  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 484  : 	return m_iHurryCostModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 485  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHurryCostModifier@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetHurryCostModifier
_TEXT	ENDS
PUBLIC	?GetAdvancedStartCost@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetAdvancedStartCost
; Function compile flags: /Odtp
;	COMDAT ?GetAdvancedStartCost@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAdvancedStartCost@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetAdvancedStartCost, COMDAT
; _this$ = ecx

; 489  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  : 	return m_iAdvancedStartCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 491  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAdvancedStartCost@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetAdvancedStartCost
_TEXT	ENDS
PUBLIC	?GetMinAreaSize@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetMinAreaSize
; Function compile flags: /Odtp
;	COMDAT ?GetMinAreaSize@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMinAreaSize@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetMinAreaSize, COMDAT
; _this$ = ecx

; 495  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 496  : 	return m_iMinAreaSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 497  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMinAreaSize@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetMinAreaSize
_TEXT	ENDS
PUBLIC	?GetMoves@CvUnitEntry@@QBEHXZ			; CvUnitEntry::GetMoves
; Function compile flags: /Odtp
;	COMDAT ?GetMoves@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMoves@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetMoves, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 	return m_iMoves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 503  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMoves@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetMoves
_TEXT	ENDS
PUBLIC	?IsImmobile@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsImmobile
; Function compile flags: /Odtp
;	COMDAT ?IsImmobile@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsImmobile@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsImmobile, COMDAT
; _this$ = ecx

; 507  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 508  : 	return m_bMoves;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+292]

; 509  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsImmobile@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsImmobile
_TEXT	ENDS
PUBLIC	?GetBaseSightRange@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetBaseSightRange
; Function compile flags: /Odtp
;	COMDAT ?GetBaseSightRange@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBaseSightRange@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetBaseSightRange, COMDAT
; _this$ = ecx

; 513  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 514  : 	return m_iBaseSightRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 515  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseSightRange@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetBaseSightRange
_TEXT	ENDS
PUBLIC	?GetRange@CvUnitEntry@@QBEHXZ			; CvUnitEntry::GetRange
; Function compile flags: /Odtp
;	COMDAT ?GetRange@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRange@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetRange, COMDAT
; _this$ = ecx

; 519  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 520  : 	return m_iRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 521  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRange@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetRange
_TEXT	ENDS
PUBLIC	?GetAirInterceptRange@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetAirInterceptRange
; Function compile flags: /Odtp
;	COMDAT ?GetAirInterceptRange@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirInterceptRange@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetAirInterceptRange, COMDAT
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 	return m_iAirInterceptRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 527  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirInterceptRange@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetAirInterceptRange
_TEXT	ENDS
PUBLIC	?GetAirUnitCap@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetAirUnitCap
; Function compile flags: /Odtp
;	COMDAT ?GetAirUnitCap@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAirUnitCap@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetAirUnitCap, COMDAT
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	return m_iAirUnitCap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 533  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAirUnitCap@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetAirUnitCap
_TEXT	ENDS
PUBLIC	?GetNukeDamageLevel@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetNukeDamageLevel
; Function compile flags: /Odtp
;	COMDAT ?GetNukeDamageLevel@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNukeDamageLevel@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetNukeDamageLevel, COMDAT
; _this$ = ecx

; 537  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 538  : 	return m_iNukeDamageLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 539  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNukeDamageLevel@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetNukeDamageLevel
_TEXT	ENDS
PUBLIC	?GetWorkRate@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetWorkRate
; Function compile flags: /Odtp
;	COMDAT ?GetWorkRate@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWorkRate@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetWorkRate, COMDAT
; _this$ = ecx

; 543  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 544  : 	return m_iWorkRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 545  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWorkRate@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetWorkRate
_TEXT	ENDS
PUBLIC	?GetNumFreeTechs@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetNumFreeTechs
; Function compile flags: /Odtp
;	COMDAT ?GetNumFreeTechs@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumFreeTechs@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetNumFreeTechs, COMDAT
; _this$ = ecx

; 549  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 	return m_iNumFreeTechs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 551  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumFreeTechs@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetNumFreeTechs
_TEXT	ENDS
PUBLIC	?GetBaseBeakersTurnsToCount@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetBaseBeakersTurnsToCount
; Function compile flags: /Odtp
;	COMDAT ?GetBaseBeakersTurnsToCount@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBaseBeakersTurnsToCount@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetBaseBeakersTurnsToCount, COMDAT
; _this$ = ecx

; 555  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 556  : 	return m_iBaseBeakersTurnsToCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 557  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseBeakersTurnsToCount@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetBaseBeakersTurnsToCount
_TEXT	ENDS
PUBLIC	?GetBaseCultureTurnsToCount@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetBaseCultureTurnsToCount
; Function compile flags: /Odtp
;	COMDAT ?GetBaseCultureTurnsToCount@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBaseCultureTurnsToCount@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetBaseCultureTurnsToCount, COMDAT
; _this$ = ecx

; 561  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 562  : 	return m_iBaseCultureTurnsToCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseCultureTurnsToCount@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetBaseCultureTurnsToCount
_TEXT	ENDS
PUBLIC	?GetBaseHurry@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetBaseHurry
; Function compile flags: /Odtp
;	COMDAT ?GetBaseHurry@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBaseHurry@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetBaseHurry, COMDAT
; _this$ = ecx

; 567  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 568  : 	return m_iBaseHurry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 569  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseHurry@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetBaseHurry
_TEXT	ENDS
PUBLIC	?GetHurryMultiplier@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetHurryMultiplier
; Function compile flags: /Odtp
;	COMDAT ?GetHurryMultiplier@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHurryMultiplier@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetHurryMultiplier, COMDAT
; _this$ = ecx

; 573  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 574  : 	return m_iHurryMultiplier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 575  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHurryMultiplier@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetHurryMultiplier
_TEXT	ENDS
PUBLIC	?IsRushBuilding@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsRushBuilding
; Function compile flags: /Odtp
;	COMDAT ?IsRushBuilding@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRushBuilding@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsRushBuilding, COMDAT
; _this$ = ecx

; 579  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 	return m_bRushBuilding;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+340]

; 581  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRushBuilding@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsRushBuilding
_TEXT	ENDS
PUBLIC	?GetBaseGold@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetBaseGold
; Function compile flags: /Odtp
;	COMDAT ?GetBaseGold@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBaseGold@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetBaseGold, COMDAT
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 	return m_iBaseGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 587  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBaseGold@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetBaseGold
_TEXT	ENDS
PUBLIC	?GetNumGoldPerEra@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetNumGoldPerEra
; Function compile flags: /Odtp
;	COMDAT ?GetNumGoldPerEra@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumGoldPerEra@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetNumGoldPerEra, COMDAT
; _this$ = ecx

; 591  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 592  : 	return m_iNumGoldPerEra;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]

; 593  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumGoldPerEra@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetNumGoldPerEra
_TEXT	ENDS
PUBLIC	?IsSpreadReligion@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsSpreadReligion
; Function compile flags: /Odtp
;	COMDAT ?IsSpreadReligion@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSpreadReligion@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsSpreadReligion, COMDAT
; _this$ = ecx

; 597  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 598  : 	return m_bSpreadReligion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+352]

; 599  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSpreadReligion@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsSpreadReligion
_TEXT	ENDS
PUBLIC	?IsRemoveHeresy@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsRemoveHeresy
; Function compile flags: /Odtp
;	COMDAT ?IsRemoveHeresy@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRemoveHeresy@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsRemoveHeresy, COMDAT
; _this$ = ecx

; 603  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 604  : 	return m_bRemoveHeresy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+367]

; 605  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRemoveHeresy@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsRemoveHeresy
_TEXT	ENDS
PUBLIC	?GetReligionSpreads@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetReligionSpreads
; Function compile flags: /Odtp
;	COMDAT ?GetReligionSpreads@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReligionSpreads@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetReligionSpreads, COMDAT
; _this$ = ecx

; 609  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 610  : 	return m_iReligionSpreads;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]

; 611  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReligionSpreads@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetReligionSpreads
_TEXT	ENDS
PUBLIC	?GetReligiousStrength@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetReligiousStrength
; Function compile flags: /Odtp
;	COMDAT ?GetReligiousStrength@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReligiousStrength@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetReligiousStrength, COMDAT
; _this$ = ecx

; 615  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 616  : 	return m_iReligiousStrength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+360]

; 617  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReligiousStrength@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetReligiousStrength
_TEXT	ENDS
PUBLIC	?IsFoundReligion@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsFoundReligion
; Function compile flags: /Odtp
;	COMDAT ?IsFoundReligion@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFoundReligion@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsFoundReligion, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 	return m_bFoundReligion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+364]

; 623  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFoundReligion@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsFoundReligion
_TEXT	ENDS
PUBLIC	?IsRequiresEnhancedReligion@CvUnitEntry@@QBE_NXZ ; CvUnitEntry::IsRequiresEnhancedReligion
; Function compile flags: /Odtp
;	COMDAT ?IsRequiresEnhancedReligion@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRequiresEnhancedReligion@CvUnitEntry@@QBE_NXZ PROC	; CvUnitEntry::IsRequiresEnhancedReligion, COMDAT
; _this$ = ecx

; 627  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 	return m_bRequiresEnhancedReligion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+365]

; 629  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRequiresEnhancedReligion@CvUnitEntry@@QBE_NXZ ENDP	; CvUnitEntry::IsRequiresEnhancedReligion
_TEXT	ENDS
PUBLIC	?IsProhibitsSpread@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsProhibitsSpread
; Function compile flags: /Odtp
;	COMDAT ?IsProhibitsSpread@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsProhibitsSpread@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsProhibitsSpread, COMDAT
; _this$ = ecx

; 633  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 634  : 	return m_bProhibitsSpread;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+366]

; 635  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsProhibitsSpread@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsProhibitsSpread
_TEXT	ENDS
PUBLIC	?IsCanBuyCityState@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsCanBuyCityState
; Function compile flags: /Odtp
;	COMDAT ?IsCanBuyCityState@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCanBuyCityState@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsCanBuyCityState, COMDAT
; _this$ = ecx

; 639  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 	return m_bCanBuyCityState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+368]

; 641  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCanBuyCityState@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsCanBuyCityState
_TEXT	ENDS
PUBLIC	?GetCombat@CvUnitEntry@@QBEHXZ			; CvUnitEntry::GetCombat
; Function compile flags: /Odtp
;	COMDAT ?GetCombat@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombat@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetCombat, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	return m_iCombat;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+372]

; 647  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombat@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetCombat
_TEXT	ENDS
PUBLIC	?SetCombat@CvUnitEntry@@QAEXH@Z			; CvUnitEntry::SetCombat
; Function compile flags: /Odtp
;	COMDAT ?SetCombat@CvUnitEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNum$ = 8						; size = 4
?SetCombat@CvUnitEntry@@QAEXH@Z PROC			; CvUnitEntry::SetCombat, COMDAT
; _this$ = ecx

; 651  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 652  : 	m_iCombat = iNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNum$[ebp]
	mov	DWORD PTR [eax+372], ecx

; 653  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCombat@CvUnitEntry@@QAEXH@Z ENDP			; CvUnitEntry::SetCombat
_TEXT	ENDS
PUBLIC	?GetCombatLimit@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombatLimit
; Function compile flags: /Odtp
;	COMDAT ?GetCombatLimit@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCombatLimit@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetCombatLimit, COMDAT
; _this$ = ecx

; 657  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 658  : 	return m_iCombatLimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+376]

; 659  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCombatLimit@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetCombatLimit
_TEXT	ENDS
PUBLIC	?GetRangedCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetRangedCombat
; Function compile flags: /Odtp
;	COMDAT ?GetRangedCombat@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangedCombat@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetRangedCombat, COMDAT
; _this$ = ecx

; 663  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 664  : 	return m_iRangedCombat;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+380]

; 665  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangedCombat@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetRangedCombat
_TEXT	ENDS
PUBLIC	?GetRangedCombatLimit@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetRangedCombatLimit
; Function compile flags: /Odtp
;	COMDAT ?GetRangedCombatLimit@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangedCombatLimit@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetRangedCombatLimit, COMDAT
; _this$ = ecx

; 669  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 670  : 	return m_iRangedCombatLimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+384]

; 671  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangedCombatLimit@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetRangedCombatLimit
_TEXT	ENDS
PUBLIC	?GetXPValueAttack@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetXPValueAttack
; Function compile flags: /Odtp
;	COMDAT ?GetXPValueAttack@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetXPValueAttack@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetXPValueAttack, COMDAT
; _this$ = ecx

; 675  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 676  : 	return m_iXPValueAttack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+388]

; 677  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetXPValueAttack@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetXPValueAttack
_TEXT	ENDS
PUBLIC	?GetXPValueDefense@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetXPValueDefense
; Function compile flags: /Odtp
;	COMDAT ?GetXPValueDefense@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetXPValueDefense@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetXPValueDefense, COMDAT
; _this$ = ecx

; 681  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 682  : 	return m_iXPValueDefense;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+392]

; 683  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetXPValueDefense@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetXPValueDefense
_TEXT	ENDS
PUBLIC	?GetSpecialCargo@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetSpecialCargo
; Function compile flags: /Odtp
;	COMDAT ?GetSpecialCargo@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpecialCargo@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetSpecialCargo, COMDAT
; _this$ = ecx

; 687  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 688  : 	return m_iSpecialCargo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+396]

; 689  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpecialCargo@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetSpecialCargo
_TEXT	ENDS
PUBLIC	?GetDomainCargo@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetDomainCargo
; Function compile flags: /Odtp
;	COMDAT ?GetDomainCargo@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomainCargo@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetDomainCargo, COMDAT
; _this$ = ecx

; 693  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 694  : 	return m_iDomainCargo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+400]

; 695  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomainCargo@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetDomainCargo
_TEXT	ENDS
PUBLIC	?GetConscriptionValue@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetConscriptionValue
; Function compile flags: /Odtp
;	COMDAT ?GetConscriptionValue@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetConscriptionValue@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetConscriptionValue, COMDAT
; _this$ = ecx

; 699  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 700  : 	return m_iConscriptionValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+404]

; 701  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetConscriptionValue@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetConscriptionValue
_TEXT	ENDS
PUBLIC	?GetExtraMaintenanceCost@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetExtraMaintenanceCost
; Function compile flags: /Odtp
;	COMDAT ?GetExtraMaintenanceCost@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetExtraMaintenanceCost@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetExtraMaintenanceCost, COMDAT
; _this$ = ecx

; 705  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 706  : 	return m_iExtraMaintenanceCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+408]

; 707  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetExtraMaintenanceCost@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetExtraMaintenanceCost
_TEXT	ENDS
PUBLIC	?IsNoMaintenance@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsNoMaintenance
; Function compile flags: /Odtp
;	COMDAT ?IsNoMaintenance@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNoMaintenance@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsNoMaintenance, COMDAT
; _this$ = ecx

; 711  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  : 	return m_bNoMaintenance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+412]

; 713  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNoMaintenance@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsNoMaintenance
_TEXT	ENDS
PUBLIC	?GetUnhappiness@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetUnhappiness
; Function compile flags: /Odtp
;	COMDAT ?GetUnhappiness@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnhappiness@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetUnhappiness, COMDAT
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 	return m_iUnhappiness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+416]

; 719  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnhappiness@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetUnhappiness
_TEXT	ENDS
PUBLIC	?GetUnitClassType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetUnitClassType
; Function compile flags: /Odtp
;	COMDAT ?GetUnitClassType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitClassType@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetUnitClassType, COMDAT
; _this$ = ecx

; 723  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 724  : 	return m_iUnitClassType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+420]

; 725  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitClassType@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetUnitClassType
_TEXT	ENDS
PUBLIC	?GetSpecialUnitType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetSpecialUnitType
; Function compile flags: /Odtp
;	COMDAT ?GetSpecialUnitType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpecialUnitType@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetSpecialUnitType, COMDAT
; _this$ = ecx

; 729  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : 	return m_iSpecialUnitType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+424]

; 731  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpecialUnitType@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetSpecialUnitType
_TEXT	ENDS
PUBLIC	?GetUnitCaptureClassType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetUnitCaptureClassType
; Function compile flags: /Odtp
;	COMDAT ?GetUnitCaptureClassType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitCaptureClassType@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetUnitCaptureClassType, COMDAT
; _this$ = ecx

; 735  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 	return m_iUnitCaptureClassType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+428]

; 737  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitCaptureClassType@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetUnitCaptureClassType
_TEXT	ENDS
PUBLIC	?GetUnitCombatType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetUnitCombatType
; Function compile flags: /Odtp
;	COMDAT ?GetUnitCombatType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitCombatType@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetUnitCombatType, COMDAT
; _this$ = ecx

; 741  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 742  : 	return m_iUnitCombatType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+432]

; 743  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitCombatType@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetUnitCombatType
_TEXT	ENDS
PUBLIC	?GetDomainType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetDomainType
; Function compile flags: /Odtp
;	COMDAT ?GetDomainType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomainType@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetDomainType, COMDAT
; _this$ = ecx

; 747  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 748  : 	return m_iDomainType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+436]

; 749  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomainType@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetDomainType
_TEXT	ENDS
PUBLIC	?GetCivilianAttackPriority@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetCivilianAttackPriority
; Function compile flags: /Odtp
;	COMDAT ?GetCivilianAttackPriority@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCivilianAttackPriority@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetCivilianAttackPriority, COMDAT
; _this$ = ecx

; 753  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 754  : 	return m_iCivilianAttackPriority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+440]

; 755  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCivilianAttackPriority@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetCivilianAttackPriority
_TEXT	ENDS
PUBLIC	?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDefaultUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetDefaultUnitAIType, COMDAT
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	return m_iDefaultUnitAIType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+444]

; 761  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetDefaultUnitAIType
_TEXT	ENDS
PUBLIC	?GetPrereqPillageTech@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetPrereqPillageTech
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqPillageTech@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqPillageTech@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetPrereqPillageTech, COMDAT
; _this$ = ecx

; 765  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 766  : 	return m_iPrereqPillageTech;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+448]

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqPillageTech@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetPrereqPillageTech
_TEXT	ENDS
PUBLIC	?GetPrereqAndTech@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetPrereqAndTech
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqAndTech@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrereqAndTech@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetPrereqAndTech, COMDAT
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 772  : 	return m_iPrereqAndTech;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+452]

; 773  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrereqAndTech@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetPrereqAndTech
_TEXT	ENDS
PUBLIC	?GetObsoleteTech@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetObsoleteTech
; Function compile flags: /Odtp
;	COMDAT ?GetObsoleteTech@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObsoleteTech@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetObsoleteTech, COMDAT
; _this$ = ecx

; 777  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 	return m_iObsoleteTech;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+456]

; 779  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetObsoleteTech@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetObsoleteTech
_TEXT	ENDS
PUBLIC	?GetEra@CvUnitEntry@@QBEHXZ			; CvUnitEntry::GetEra
EXTRN	?GetEra@CvTechEntry@@QBEHXZ:PROC		; CvTechEntry::GetEra
EXTRN	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z:PROC ; CvGlobals::getTechInfo
; Function compile flags: /Odtp
;	COMDAT ?GetEra@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pTech$217918 = -8					; size = 4
_eTech$ = -4						; size = 4
?GetEra@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetEra, COMDAT
; _this$ = ecx

; 783  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 784  : 	TechTypes eTech = (TechTypes)GetPrereqAndTech();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPrereqAndTech@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetPrereqAndTech
	mov	DWORD PTR _eTech$[ebp], eax

; 785  : 	if (eTech != NO_TECH)

	cmp	DWORD PTR _eTech$[ebp], -1
	je	SHORT $LN1@GetEra

; 786  : 	{
; 787  : 		CvTechEntry* pTech = GC.getTechInfo((TechTypes)GetPrereqAndTech());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPrereqAndTech@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetPrereqAndTech
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pTech$217918[ebp], eax

; 788  : 		return pTech->GetEra();

	mov	ecx, DWORD PTR _pTech$217918[ebp]
	call	?GetEra@CvTechEntry@@QBEHXZ		; CvTechEntry::GetEra
	jmp	SHORT $LN2@GetEra
$LN1@GetEra:

; 789  : 	}
; 790  : 
; 791  : 	return -1;

	or	eax, -1
$LN2@GetEra:

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEra@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetEra
_TEXT	ENDS
PUBLIC	?GetPolicyType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetPolicyType
; Function compile flags: /Odtp
;	COMDAT ?GetPolicyType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPolicyType@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetPolicyType, COMDAT
; _this$ = ecx

; 796  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 797  : 	return m_iPolicyType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 798  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPolicyType@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetPolicyType
_TEXT	ENDS
PUBLIC	?GetGoodyHutUpgradeUnitClass@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetGoodyHutUpgradeUnitClass
; Function compile flags: /Odtp
;	COMDAT ?GetGoodyHutUpgradeUnitClass@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoodyHutUpgradeUnitClass@CvUnitEntry@@QBEHXZ PROC	; CvUnitEntry::GetGoodyHutUpgradeUnitClass, COMDAT
; _this$ = ecx

; 802  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 803  : 	return m_iGoodyHutUpgradeUnitClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 804  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoodyHutUpgradeUnitClass@CvUnitEntry@@QBEHXZ ENDP	; CvUnitEntry::GetGoodyHutUpgradeUnitClass
_TEXT	ENDS
PUBLIC	?GetGroupSize@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetGroupSize
; Function compile flags: /Odtp
;	COMDAT ?GetGroupSize@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroupSize@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetGroupSize, COMDAT
; _this$ = ecx

; 808  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 809  : 	return m_iGroupSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 810  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroupSize@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetGroupSize
_TEXT	ENDS
PUBLIC	?GetGroupDefinitions@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetGroupDefinitions
; Function compile flags: /Odtp
;	COMDAT ?GetGroupDefinitions@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGroupDefinitions@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetGroupDefinitions, COMDAT
; _this$ = ecx

; 814  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 815  : 	return m_iGroupDefinitions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]

; 816  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGroupDefinitions@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetGroupDefinitions
_TEXT	ENDS
PUBLIC	?GetMeleeWaveSize@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetMeleeWaveSize
; Function compile flags: /Odtp
;	COMDAT ?GetMeleeWaveSize@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeleeWaveSize@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetMeleeWaveSize, COMDAT
; _this$ = ecx

; 820  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 821  : 	return m_iUnitMeleeWaveSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+476]

; 822  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMeleeWaveSize@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetMeleeWaveSize
_TEXT	ENDS
PUBLIC	?GetRangedWaveSize@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetRangedWaveSize
; Function compile flags: /Odtp
;	COMDAT ?GetRangedWaveSize@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRangedWaveSize@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetRangedWaveSize, COMDAT
; _this$ = ecx

; 826  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 827  : 	return m_iUnitRangedWaveSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+480]

; 828  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRangedWaveSize@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetRangedWaveSize
_TEXT	ENDS
PUBLIC	?GetNumUnitNames@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetNumUnitNames
; Function compile flags: /Odtp
;	COMDAT ?GetNumUnitNames@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumUnitNames@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetNumUnitNames, COMDAT
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 833  : 	return m_iNumUnitNames;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+484]

; 834  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumUnitNames@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetNumUnitNames
_TEXT	ENDS
PUBLIC	?IsFoodProduction@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsFoodProduction
; Function compile flags: /Odtp
;	COMDAT ?IsFoodProduction@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFoodProduction@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsFoodProduction, COMDAT
; _this$ = ecx

; 838  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 839  : 	return m_bFoodProduction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+496]

; 840  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFoodProduction@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsFoodProduction
_TEXT	ENDS
PUBLIC	?IsNoBadGoodies@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsNoBadGoodies
; Function compile flags: /Odtp
;	COMDAT ?IsNoBadGoodies@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNoBadGoodies@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsNoBadGoodies, COMDAT
; _this$ = ecx

; 844  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 845  : 	return m_bNoBadGoodies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+497]

; 846  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNoBadGoodies@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsNoBadGoodies
_TEXT	ENDS
PUBLIC	?IsRivalTerritory@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsRivalTerritory
; Function compile flags: /Odtp
;	COMDAT ?IsRivalTerritory@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRivalTerritory@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsRivalTerritory, COMDAT
; _this$ = ecx

; 850  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 851  : 	return m_bRivalTerritory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+498]

; 852  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRivalTerritory@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsRivalTerritory
_TEXT	ENDS
PUBLIC	?IsMilitarySupport@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsMilitarySupport
; Function compile flags: /Odtp
;	COMDAT ?IsMilitarySupport@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMilitarySupport@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsMilitarySupport, COMDAT
; _this$ = ecx

; 856  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 857  : 	return m_bMilitarySupport;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+499]

; 858  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsMilitarySupport@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsMilitarySupport
_TEXT	ENDS
PUBLIC	?IsMilitaryProduction@CvUnitEntry@@QBE_NXZ	; CvUnitEntry::IsMilitaryProduction
; Function compile flags: /Odtp
;	COMDAT ?IsMilitaryProduction@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMilitaryProduction@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsMilitaryProduction, COMDAT
; _this$ = ecx

; 862  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 863  : 	return m_bMilitaryProduction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+500]

; 864  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsMilitaryProduction@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsMilitaryProduction
_TEXT	ENDS
PUBLIC	?IsPillage@CvUnitEntry@@QBE_NXZ			; CvUnitEntry::IsPillage
; Function compile flags: /Odtp
;	COMDAT ?IsPillage@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPillage@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsPillage, COMDAT
; _this$ = ecx

; 868  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 869  : 	return m_bPillage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+501]

; 870  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPillage@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsPillage
_TEXT	ENDS
PUBLIC	?IsFound@CvUnitEntry@@QBE_NXZ			; CvUnitEntry::IsFound
; Function compile flags: /Odtp
;	COMDAT ?IsFound@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFound@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsFound, COMDAT
; _this$ = ecx

; 874  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 875  : 	return m_bFound;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+502]

; 876  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFound@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsFound
_TEXT	ENDS
PUBLIC	?IsFoundAbroad@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsFoundAbroad
; Function compile flags: /Odtp
;	COMDAT ?IsFoundAbroad@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFoundAbroad@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsFoundAbroad, COMDAT
; _this$ = ecx

; 880  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 881  : 	return m_bFoundAbroad;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+503]

; 882  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFoundAbroad@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsFoundAbroad
_TEXT	ENDS
PUBLIC	?GetCultureBombRadius@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetCultureBombRadius
; Function compile flags: /Odtp
;	COMDAT ?GetCultureBombRadius@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCultureBombRadius@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetCultureBombRadius, COMDAT
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	return m_iCultureBombRadius;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+504]

; 888  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCultureBombRadius@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetCultureBombRadius
_TEXT	ENDS
PUBLIC	?GetGoldenAgeTurns@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetGoldenAgeTurns
; Function compile flags: /Odtp
;	COMDAT ?GetGoldenAgeTurns@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoldenAgeTurns@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetGoldenAgeTurns, COMDAT
; _this$ = ecx

; 892  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 893  : 	return m_iGoldenAgeTurns;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+512]

; 894  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoldenAgeTurns@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetGoldenAgeTurns
_TEXT	ENDS
PUBLIC	?GetFreePolicies@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetFreePolicies
; Function compile flags: /Odtp
;	COMDAT ?GetFreePolicies@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFreePolicies@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetFreePolicies, COMDAT
; _this$ = ecx

; 898  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 899  : 	return m_iFreePolicies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+516]

; 900  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFreePolicies@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetFreePolicies
_TEXT	ENDS
PUBLIC	?GetOneShotTourism@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetOneShotTourism
; Function compile flags: /Odtp
;	COMDAT ?GetOneShotTourism@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOneShotTourism@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetOneShotTourism, COMDAT
; _this$ = ecx

; 904  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 905  : 	return m_iOneShotTourism;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+520]

; 906  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOneShotTourism@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetOneShotTourism
_TEXT	ENDS
PUBLIC	?GetOneShotTourismPercentOthers@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetOneShotTourismPercentOthers
; Function compile flags: /Odtp
;	COMDAT ?GetOneShotTourismPercentOthers@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOneShotTourismPercentOthers@CvUnitEntry@@QBEHXZ PROC ; CvUnitEntry::GetOneShotTourismPercentOthers, COMDAT
; _this$ = ecx

; 910  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 911  : 	return m_iOneShotTourismPercentOthers;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+524]

; 912  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOneShotTourismPercentOthers@CvUnitEntry@@QBEHXZ ENDP ; CvUnitEntry::GetOneShotTourismPercentOthers
_TEXT	ENDS
PUBLIC	?IsIgnoreBuildingDefense@CvUnitEntry@@QBE_NXZ	; CvUnitEntry::IsIgnoreBuildingDefense
; Function compile flags: /Odtp
;	COMDAT ?IsIgnoreBuildingDefense@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIgnoreBuildingDefense@CvUnitEntry@@QBE_NXZ PROC	; CvUnitEntry::IsIgnoreBuildingDefense, COMDAT
; _this$ = ecx

; 916  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 	return m_bIgnoreBuildingDefense;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+528]

; 918  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsIgnoreBuildingDefense@CvUnitEntry@@QBE_NXZ ENDP	; CvUnitEntry::IsIgnoreBuildingDefense
_TEXT	ENDS
PUBLIC	?IsPrereqResources@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsPrereqResources
; Function compile flags: /Odtp
;	COMDAT ?IsPrereqResources@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPrereqResources@CvUnitEntry@@QBE_NXZ PROC		; CvUnitEntry::IsPrereqResources, COMDAT
; _this$ = ecx

; 922  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 923  : 	return m_bPrereqResources;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+529]

; 924  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPrereqResources@CvUnitEntry@@QBE_NXZ ENDP		; CvUnitEntry::IsPrereqResources
_TEXT	ENDS
PUBLIC	?IsMechUnit@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsMechUnit
; Function compile flags: /Odtp
;	COMDAT ?IsMechUnit@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMechUnit@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsMechUnit, COMDAT
; _this$ = ecx

; 928  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  : 	return m_bMechanized;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+530]

; 930  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsMechUnit@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsMechUnit
_TEXT	ENDS
PUBLIC	?IsSuicide@CvUnitEntry@@QBE_NXZ			; CvUnitEntry::IsSuicide
; Function compile flags: /Odtp
;	COMDAT ?IsSuicide@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSuicide@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsSuicide, COMDAT
; _this$ = ecx

; 934  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 	return m_bSuicide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+531]

; 936  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSuicide@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsSuicide
_TEXT	ENDS
PUBLIC	?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ	; CvUnitEntry::IsCaptureWhileEmbarked
; Function compile flags: /Odtp
;	COMDAT ?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ PROC	; CvUnitEntry::IsCaptureWhileEmbarked, COMDAT
; _this$ = ecx

; 940  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 941  : 	return m_bCaptureWhileEmbarked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+532]

; 942  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCaptureWhileEmbarked@CvUnitEntry@@QBE_NXZ ENDP	; CvUnitEntry::IsCaptureWhileEmbarked
_TEXT	ENDS
PUBLIC	?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ	; CvUnitEntry::IsRangeAttackOnlyInDomain
; Function compile flags: /Odtp
;	COMDAT ?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ PROC	; CvUnitEntry::IsRangeAttackOnlyInDomain, COMDAT
; _this$ = ecx

; 946  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 947  : 	return m_bRangeAttackOnlyInDomain;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+533]

; 948  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ ENDP	; CvUnitEntry::IsRangeAttackOnlyInDomain
_TEXT	ENDS
PUBLIC	?IsTrade@CvUnitEntry@@QBE_NXZ			; CvUnitEntry::IsTrade
; Function compile flags: /Odtp
;	COMDAT ?IsTrade@CvUnitEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTrade@CvUnitEntry@@QBE_NXZ PROC			; CvUnitEntry::IsTrade, COMDAT
; _this$ = ecx

; 952  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 953  : 	return m_bTrade;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+548]

; 954  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsTrade@CvUnitEntry@@QBE_NXZ ENDP			; CvUnitEntry::IsTrade
_TEXT	ENDS
PUBLIC	?GetNumExoticGoods@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetNumExoticGoods
; Function compile flags: /Odtp
;	COMDAT ?GetNumExoticGoods@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumExoticGoods@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetNumExoticGoods, COMDAT
; _this$ = ecx

; 958  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 959  : 	return m_iNumExoticGoods;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+552]

; 960  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumExoticGoods@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetNumExoticGoods
_TEXT	ENDS
PUBLIC	?GetCommandType@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCommandType
; Function compile flags: /Odtp
;	COMDAT ?GetCommandType@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCommandType@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetCommandType, COMDAT
; _this$ = ecx

; 964  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 965  : 	return m_iCommandType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+488]

; 966  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommandType@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetCommandType
_TEXT	ENDS
PUBLIC	?SetCommandType@CvUnitEntry@@QAEXH@Z		; CvUnitEntry::SetCommandType
; Function compile flags: /Odtp
;	COMDAT ?SetCommandType@CvUnitEntry@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNewType$ = 8						; size = 4
?SetCommandType@CvUnitEntry@@QAEXH@Z PROC		; CvUnitEntry::SetCommandType, COMDAT
; _this$ = ecx

; 970  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 971  : 	m_iCommandType = iNewType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewType$[ebp]
	mov	DWORD PTR [eax+488], ecx

; 972  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCommandType@CvUnitEntry@@QAEXH@Z ENDP		; CvUnitEntry::SetCommandType
_TEXT	ENDS
PUBLIC	?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z		; CvUnitEntry::GetPrereqAndTechs
; Function compile flags: /Odtp
;	COMDAT ?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z PROC		; CvUnitEntry::GetPrereqAndTechs, COMDAT
; _this$ = ecx

; 978  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 979  : 	CvAssertMsg(i < GC.getNUM_UNIT_AND_TECH_PREREQS(), "Index out of bounds");
; 980  : 	CvAssertMsg(i > -1, "Index out of bounds");
; 981  : 	return m_piPrereqAndTechs ? m_piPrereqAndTechs[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+936], 0
	je	SHORT $LN3@GetPrereqA
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+936]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetPrereqA
$LN3@GetPrereqA:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetPrereqA:
	mov	eax, DWORD PTR tv69[ebp]

; 982  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z ENDP		; CvUnitEntry::GetPrereqAndTechs
_TEXT	ENDS
PUBLIC	?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z ; CvUnitEntry::GetResourceQuantityRequirement
; Function compile flags: /Odtp
;	COMDAT ?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z PROC ; CvUnitEntry::GetResourceQuantityRequirement, COMDAT
; _this$ = ecx

; 986  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 	CvAssertMsg(i < GC.getNumResourceInfos(), "Index out of bounds");
; 988  : 	CvAssertMsg(i > -1, "Index out of bounds");
; 989  : 	return m_piResourceQuantityRequirements ? m_piResourceQuantityRequirements[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+940], 0
	je	SHORT $LN3@GetResourc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetResourc
$LN3@GetResourc:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetResourc:
	mov	eax, DWORD PTR tv69[ebp]

; 990  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z ENDP ; CvUnitEntry::GetResourceQuantityRequirement
_TEXT	ENDS
PUBLIC	?GetBuildingProductionModifier@CvUnitEntry@@QBEHW4BuildingTypes@@@Z ; CvUnitEntry::GetBuildingProductionModifier
; Function compile flags: /Odtp
;	COMDAT ?GetBuildingProductionModifier@CvUnitEntry@@QBEHW4BuildingTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eBuilding$ = 8						; size = 4
?GetBuildingProductionModifier@CvUnitEntry@@QBEHW4BuildingTypes@@@Z PROC ; CvUnitEntry::GetBuildingProductionModifier, COMDAT
; _this$ = ecx

; 994  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 995  : 	CvAssertMsg((int)eBuilding < GC.getNumBuildingInfos(), "Building type out of bounds");
; 996  : 	CvAssertMsg((int)eBuilding > -1, "Index out of bounds");
; 997  : 	return m_piProductionModifierBuildings[(int)eBuilding];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+956]
	mov	edx, DWORD PTR _eBuilding$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 998  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuildingProductionModifier@CvUnitEntry@@QBEHW4BuildingTypes@@@Z ENDP ; CvUnitEntry::GetBuildingProductionModifier
_TEXT	ENDS
PUBLIC	?GetYieldFromKills@CvUnitEntry@@QBEHW4YieldTypes@@@Z ; CvUnitEntry::GetYieldFromKills
; Function compile flags: /Odtp
;	COMDAT ?GetYieldFromKills@CvUnitEntry@@QBEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eYield$ = 8						; size = 4
?GetYieldFromKills@CvUnitEntry@@QBEHW4YieldTypes@@@Z PROC ; CvUnitEntry::GetYieldFromKills, COMDAT
; _this$ = ecx

; 1002 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1003 : 	CvAssertMsg((int)eYield < NUM_YIELD_TYPES, "Yield type out of bounds");
; 1004 : 	CvAssertMsg((int)eYield > -1, "Index out of bounds");
; 1005 : 	return m_piYieldFromKills[(int)eYield];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+960]
	mov	edx, DWORD PTR _eYield$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 1006 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetYieldFromKills@CvUnitEntry@@QBEHW4YieldTypes@@@Z ENDP ; CvUnitEntry::GetYieldFromKills
_TEXT	ENDS
PUBLIC	?GetProductionTraits@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetProductionTraits
; Function compile flags: /Odtp
;	COMDAT ?GetProductionTraits@CvUnitEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetProductionTraits@CvUnitEntry@@QBEHH@Z PROC		; CvUnitEntry::GetProductionTraits, COMDAT
; _this$ = ecx

; 1010 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1011 : 	CvAssertMsg(i < GC.getNumTraitInfos(), "Index out of bounds");
; 1012 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1013 : 	return m_piProductionTraits ? m_piProductionTraits[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+944], 0
	je	SHORT $LN3@GetProduct
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+944]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetProduct
$LN3@GetProduct:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetProduct:
	mov	eax, DWORD PTR tv69[ebp]

; 1014 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetProductionTraits@CvUnitEntry@@QBEHH@Z ENDP		; CvUnitEntry::GetProductionTraits
_TEXT	ENDS
PUBLIC	?GetFlavorValue@CvUnitEntry@@QBEHH@Z		; CvUnitEntry::GetFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?GetFlavorValue@CvUnitEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFlavorValue@CvUnitEntry@@QBEHH@Z PROC		; CvUnitEntry::GetFlavorValue, COMDAT
; _this$ = ecx

; 1018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1019 : 	CvAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 1020 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1021 : 	return m_piFlavorValue ? m_piFlavorValue[i] : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+948], 0
	je	SHORT $LN3@GetFlavorV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+948]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetFlavorV
$LN3@GetFlavorV:
	mov	DWORD PTR tv69[ebp], 0
$LN4@GetFlavorV:
	mov	eax, DWORD PTR tv69[ebp]

; 1022 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlavorValue@CvUnitEntry@@QBEHH@Z ENDP		; CvUnitEntry::GetFlavorValue
_TEXT	ENDS
PUBLIC	?GetUnitGroupRequired@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetUnitGroupRequired
; Function compile flags: /Odtp
;	COMDAT ?GetUnitGroupRequired@CvUnitEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitGroupRequired@CvUnitEntry@@QBEHH@Z PROC		; CvUnitEntry::GetUnitGroupRequired, COMDAT
; _this$ = ecx

; 1025 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1026 : 	CvAssertMsg(i < GetGroupDefinitions(), "Index out of bounds");
; 1027 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1028 : 	return m_piUnitGroupRequired ? m_piUnitGroupRequired[i] : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+952], 0
	je	SHORT $LN3@GetUnitGro
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+952]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetUnitGro
$LN3@GetUnitGro:
	mov	DWORD PTR tv69[ebp], 0
$LN4@GetUnitGro:
	mov	eax, DWORD PTR tv69[ebp]

; 1029 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitGroupRequired@CvUnitEntry@@QBEHH@Z ENDP		; CvUnitEntry::GetUnitGroupRequired
_TEXT	ENDS
PUBLIC	?GetUpgradeUnitClass@CvUnitEntry@@QBE_NH@Z	; CvUnitEntry::GetUpgradeUnitClass
; Function compile flags: /Odtp
;	COMDAT ?GetUpgradeUnitClass@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUpgradeUnitClass@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetUpgradeUnitClass, COMDAT
; _this$ = ecx

; 1033 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1034 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 1035 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1036 : 	return m_pbUpgradeUnitClass ? m_pbUpgradeUnitClass[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+964], 0
	je	SHORT $LN3@GetUpgrade
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+964]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetUpgrade
$LN3@GetUpgrade:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetUpgrade:
	mov	al, BYTE PTR tv68[ebp]

; 1037 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUpgradeUnitClass@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetUpgradeUnitClass
_TEXT	ENDS
PUBLIC	?GetUnitAIType@CvUnitEntry@@QBE_NH@Z		; CvUnitEntry::GetUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?GetUnitAIType@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetUnitAIType@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetUnitAIType, COMDAT
; _this$ = ecx

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1042 : 	CvAssertMsg(i < NUM_UNITAI_TYPES, "Index out of bounds");
; 1043 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1044 : 	return m_pbUnitAIType ? m_pbUnitAIType[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+968], 0
	je	SHORT $LN3@GetUnitAIT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+968]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetUnitAIT
$LN3@GetUnitAIT:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetUnitAIT:
	mov	al, BYTE PTR tv68[ebp]

; 1045 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetUnitAIType@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetUnitAIType
_TEXT	ENDS
PUBLIC	?GetNotUnitAIType@CvUnitEntry@@QBE_NH@Z		; CvUnitEntry::GetNotUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?GetNotUnitAIType@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetNotUnitAIType@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetNotUnitAIType, COMDAT
; _this$ = ecx

; 1049 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1050 : 	CvAssertMsg(i < NUM_UNITAI_TYPES, "Index out of bounds");
; 1051 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1052 : 	return m_pbNotUnitAIType ? m_pbNotUnitAIType[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+972], 0
	je	SHORT $LN3@GetNotUnit
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+972]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetNotUnit
$LN3@GetNotUnit:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetNotUnit:
	mov	al, BYTE PTR tv68[ebp]

; 1053 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNotUnitAIType@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetNotUnitAIType
_TEXT	ENDS
PUBLIC	?GetBuilds@CvUnitEntry@@QBE_NH@Z		; CvUnitEntry::GetBuilds
; Function compile flags: /Odtp
;	COMDAT ?GetBuilds@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetBuilds@CvUnitEntry@@QBE_NH@Z PROC			; CvUnitEntry::GetBuilds, COMDAT
; _this$ = ecx

; 1057 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1058 : 	CvAssertMsg(i < GC.getNumBuildInfos(), "Index out of bounds");
; 1059 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1060 : 	return m_pbBuilds ? m_pbBuilds[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+976], 0
	je	SHORT $LN3@GetBuilds
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+976]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetBuilds
$LN3@GetBuilds:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetBuilds:
	mov	al, BYTE PTR tv68[ebp]

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuilds@CvUnitEntry@@QBE_NH@Z ENDP			; CvUnitEntry::GetBuilds
_TEXT	ENDS
PUBLIC	?GetGreatPeoples@CvUnitEntry@@QBE_NH@Z		; CvUnitEntry::GetGreatPeoples
; Function compile flags: /Odtp
;	COMDAT ?GetGreatPeoples@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetGreatPeoples@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetGreatPeoples, COMDAT
; _this$ = ecx

; 1065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1066 : 	CvAssertMsg(i < GC.getNumSpecialistInfos(), "Index out of bounds");
; 1067 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1068 : 	return m_pbGreatPeoples ? m_pbGreatPeoples[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+980], 0
	je	SHORT $LN3@GetGreatPe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+980]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetGreatPe
$LN3@GetGreatPe:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetGreatPe:
	mov	al, BYTE PTR tv68[ebp]

; 1069 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatPeoples@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetGreatPeoples
_TEXT	ENDS
PUBLIC	?GetBuildings@CvUnitEntry@@QBE_NH@Z		; CvUnitEntry::GetBuildings
; Function compile flags: /Odtp
;	COMDAT ?GetBuildings@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetBuildings@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetBuildings, COMDAT
; _this$ = ecx

; 1073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1074 : 	CvAssertMsg(i < GC.getNumBuildingInfos(), "Index out of bounds");
; 1075 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1076 : 	return m_pbBuildings ? m_pbBuildings[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+984], 0
	je	SHORT $LN3@GetBuildin
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+984]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetBuildin
$LN3@GetBuildin:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetBuildin:
	mov	al, BYTE PTR tv68[ebp]

; 1077 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuildings@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetBuildings
_TEXT	ENDS
PUBLIC	?GetBuildingClassRequireds@CvUnitEntry@@QBE_NH@Z ; CvUnitEntry::GetBuildingClassRequireds
; Function compile flags: /Odtp
;	COMDAT ?GetBuildingClassRequireds@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetBuildingClassRequireds@CvUnitEntry@@QBE_NH@Z PROC	; CvUnitEntry::GetBuildingClassRequireds, COMDAT
; _this$ = ecx

; 1081 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1082 : 	CvAssertMsg(i < GC.getNumBuildingClassInfos(), "Index out of bounds");
; 1083 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1084 : 	return m_pbBuildingClassRequireds ? m_pbBuildingClassRequireds[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+988], 0
	je	SHORT $LN3@GetBuildin@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+988]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetBuildin@2
$LN3@GetBuildin@2:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetBuildin@2:
	mov	al, BYTE PTR tv68[ebp]

; 1085 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuildingClassRequireds@CvUnitEntry@@QBE_NH@Z ENDP	; CvUnitEntry::GetBuildingClassRequireds
_TEXT	ENDS
PUBLIC	?GetFreePromotions@CvUnitEntry@@QBE_NH@Z	; CvUnitEntry::GetFreePromotions
; Function compile flags: /Odtp
;	COMDAT ?GetFreePromotions@CvUnitEntry@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFreePromotions@CvUnitEntry@@QBE_NH@Z PROC		; CvUnitEntry::GetFreePromotions, COMDAT
; _this$ = ecx

; 1089 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1090 : 	CvAssertMsg(i < GC.getNumPromotionInfos(), "Index out of bounds");
; 1091 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1092 : 	return m_pbFreePromotions ? m_pbFreePromotions[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+992], 0
	je	SHORT $LN3@GetFreePro
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+992]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@GetFreePro
$LN3@GetFreePro:
	mov	BYTE PTR tv68[ebp], 0
$LN4@GetFreePro:
	mov	al, BYTE PTR tv68[ebp]

; 1093 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFreePromotions@CvUnitEntry@@QBE_NH@Z ENDP		; CvUnitEntry::GetFreePromotions
_TEXT	ENDS
PUBLIC	?GetProjectPrereq@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetProjectPrereq
; Function compile flags: /Odtp
;	COMDAT ?GetProjectPrereq@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProjectPrereq@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetProjectPrereq, COMDAT
; _this$ = ecx

; 1097 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1098 : 	return m_iProjectPrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+536]

; 1099 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetProjectPrereq@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetProjectPrereq
_TEXT	ENDS
PUBLIC	?GetSpaceshipProject@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetSpaceshipProject
; Function compile flags: /Odtp
;	COMDAT ?GetSpaceshipProject@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSpaceshipProject@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetSpaceshipProject, COMDAT
; _this$ = ecx

; 1103 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1104 : 	return m_iSpaceshipProject;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+540]

; 1105 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSpaceshipProject@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetSpaceshipProject
_TEXT	ENDS
PUBLIC	?GetLeaderPromotion@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetLeaderPromotion
; Function compile flags: /Odtp
;	COMDAT ?GetLeaderPromotion@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLeaderPromotion@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetLeaderPromotion, COMDAT
; _this$ = ecx

; 1109 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1110 : 	return m_iLeaderPromotion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+544]

; 1111 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLeaderPromotion@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetLeaderPromotion
_TEXT	ENDS
PUBLIC	?GetLeaderExperience@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetLeaderExperience
; Function compile flags: /Odtp
;	COMDAT ?GetLeaderExperience@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLeaderExperience@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetLeaderExperience, COMDAT
; _this$ = ecx

; 1115 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1116 : 	return m_iLeaderExperience;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+492]

; 1117 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLeaderExperience@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetLeaderExperience
_TEXT	ENDS
PUBLIC	?GetUnitArtInfoTag@CvUnitEntry@@QBEPBDXZ	; CvUnitEntry::GetUnitArtInfoTag
; Function compile flags: /Odtp
;	COMDAT ?GetUnitArtInfoTag@CvUnitEntry@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitArtInfoTag@CvUnitEntry@@QBEPBDXZ PROC		; CvUnitEntry::GetUnitArtInfoTag, COMDAT
; _this$ = ecx

; 1121 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1122 : 	return m_strUnitArtInfoTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 1123 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitArtInfoTag@CvUnitEntry@@QBEPBDXZ ENDP		; CvUnitEntry::GetUnitArtInfoTag
_TEXT	ENDS
PUBLIC	?GetUnitArtInfoCulturalVariation@CvUnitEntry@@QBE?B_NXZ ; CvUnitEntry::GetUnitArtInfoCulturalVariation
; Function compile flags: /Odtp
;	COMDAT ?GetUnitArtInfoCulturalVariation@CvUnitEntry@@QBE?B_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitArtInfoCulturalVariation@CvUnitEntry@@QBE?B_NXZ PROC ; CvUnitEntry::GetUnitArtInfoCulturalVariation, COMDAT
; _this$ = ecx

; 1127 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1128 : 	return m_bUnitArtInfoCulturalVariation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+596]

; 1129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitArtInfoCulturalVariation@CvUnitEntry@@QBE?B_NXZ ENDP ; CvUnitEntry::GetUnitArtInfoCulturalVariation
_TEXT	ENDS
PUBLIC	?GetUnitArtInfoEraVariation@CvUnitEntry@@QBE?B_NXZ ; CvUnitEntry::GetUnitArtInfoEraVariation
; Function compile flags: /Odtp
;	COMDAT ?GetUnitArtInfoEraVariation@CvUnitEntry@@QBE?B_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitArtInfoEraVariation@CvUnitEntry@@QBE?B_NXZ PROC	; CvUnitEntry::GetUnitArtInfoEraVariation, COMDAT
; _this$ = ecx

; 1134 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1135 : 	return m_bUnitArtInfoEraVariation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+597]

; 1136 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitArtInfoEraVariation@CvUnitEntry@@QBE?B_NXZ ENDP	; CvUnitEntry::GetUnitArtInfoEraVariation
_TEXT	ENDS
PUBLIC	?GetUnitNames@CvUnitEntry@@QBEPBDH@Z		; CvUnitEntry::GetUnitNames
EXTRN	__imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z$0
__ehfuncinfo$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetUnitNames@CvUnitEntry@@QBEPBDH@Z
_TEXT	SEGMENT
tv81 = -64						; size = 4
tv74 = -60						; size = 4
_this$ = -56						; size = 4
$T219809 = -52						; size = 4
$T219806 = -48						; size = 28
$T219805 = -20						; size = 4
$T219804 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 4
?GetUnitNames@CvUnitEntry@@QBEPBDH@Z PROC		; CvUnitEntry::GetUnitNames, COMDAT
; _this$ = ecx

; 1141 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T219809[ebp], 0

; 1142 : 	CvAssertMsg(i < GetNumUnitNames(), "Index out of bounds");
; 1143 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1144 : 	return (m_paszUnitNames) ? m_paszUnitNames[i] : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1008], 0
	je	SHORT $LN3@GetUnitNam
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+1008]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@GetUnitNam
$LN3@GetUnitNam:
	lea	ecx, DWORD PTR $T219806[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	ecx, DWORD PTR $T219806[ebp]
	call	DWORD PTR __imp_?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	eax, DWORD PTR $T219806[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T219809[ebp]
	or	ecx, 1
	mov	DWORD PTR $T219809[ebp], ecx
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv74[ebp], edx
$LN4@GetUnitNam:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T219805[ebp], eax
	mov	ecx, DWORD PTR $T219805[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T219804[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T219809[ebp]
	and	ecx, 1
	je	SHORT $LN7@GetUnitNam
	and	DWORD PTR $T219809[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T219806[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@GetUnitNam:
	mov	eax, DWORD PTR $T219804[ebp]

; 1145 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z$1:
	lea	ecx, DWORD PTR $T219806[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z$0:
	mov	eax, DWORD PTR $T219809[ebp]
	and	eax, 1
	je	$LN6@GetUnitNam
	and	DWORD PTR $T219809[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T219806[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetUnitNam:
	ret	0
__ehhandler$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUnitNames@CvUnitEntry@@QBEPBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnitNames@CvUnitEntry@@QBEPBDH@Z ENDP		; CvUnitEntry::GetUnitNames
PUBLIC	?GetGreatWorks@CvUnitEntry@@QBE?AW4GreatWorkType@@H@Z ; CvUnitEntry::GetGreatWorks
; Function compile flags: /Odtp
;	COMDAT ?GetGreatWorks@CvUnitEntry@@QBE?AW4GreatWorkType@@H@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetGreatWorks@CvUnitEntry@@QBE?AW4GreatWorkType@@H@Z PROC ; CvUnitEntry::GetGreatWorks, COMDAT
; _this$ = ecx

; 1149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1150 : 	CvAssertMsg(i < GetNumUnitNames(), "Index out of bounds");
; 1151 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1152 : 	return (m_paeGreatWorks) ? m_paeGreatWorks[i] : NO_GREAT_WORK;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1012], 0
	je	SHORT $LN3@GetGreatWo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1012]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetGreatWo
$LN3@GetGreatWo:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetGreatWo:
	mov	eax, DWORD PTR tv69[ebp]

; 1153 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetGreatWorks@CvUnitEntry@@QBE?AW4GreatWorkType@@H@Z ENDP ; CvUnitEntry::GetGreatWorks
_TEXT	ENDS
PUBLIC	?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetUnitFlagIconOffset
; Function compile flags: /Odtp
;	COMDAT ?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetUnitFlagIconOffset, COMDAT
; _this$ = ecx

; 1157 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1158 : 	return m_iUnitFlagIconOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+560]

; 1159 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetUnitFlagIconOffset
_TEXT	ENDS
PUBLIC	?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetUnitPortraitOffset
; Function compile flags: /Odtp
;	COMDAT ?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ PROC		; CvUnitEntry::GetUnitPortraitOffset, COMDAT
; _this$ = ecx

; 1164 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1165 : 	return m_iUnitPortraitOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+564]

; 1166 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ ENDP		; CvUnitEntry::GetUnitPortraitOffset
_TEXT	ENDS
PUBLIC	?GetCargoSpace@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCargoSpace
EXTRN	?GetCargoChange@CvPromotionEntry@@QBEHXZ:PROC	; CvPromotionEntry::GetCargoChange
EXTRN	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z:PROC ; CvGlobals::getPromotionInfo
EXTRN	?getNumPromotionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumPromotionInfos
; Function compile flags: /Odtp
;	COMDAT ?GetCargoSpace@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_iVal$218124 = -20					; size = 4
_ePromotion$218119 = -16				; size = 4
_pkPromotionInfo$218121 = -12				; size = 4
_iLoop$218115 = -8					; size = 4
_rtnValue$ = -4						; size = 4
?GetCargoSpace@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetCargoSpace, COMDAT
; _this$ = ecx

; 1173 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1174 : 	int rtnValue = 0;

	mov	DWORD PTR _rtnValue$[ebp], 0

; 1175 : 
; 1176 : #ifdef AUI_WARNING_FIXES
; 1177 : 	for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 1178 : #else
; 1179 : 	for(int iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)

	mov	DWORD PTR _iLoop$218115[ebp], 0
	jmp	SHORT $LN5@GetCargoSp
$LN4@GetCargoSp:
	mov	eax, DWORD PTR _iLoop$218115[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$218115[ebp], eax
$LN5@GetCargoSp:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _iLoop$218115[ebp], eax
	jge	SHORT $LN3@GetCargoSp

; 1180 : #endif
; 1181 : 	{
; 1182 : 		const PromotionTypes ePromotion = static_cast<PromotionTypes>(iLoop);

	mov	ecx, DWORD PTR _iLoop$218115[ebp]
	mov	DWORD PTR _ePromotion$218119[ebp], ecx

; 1183 : 		CvPromotionEntry* pkPromotionInfo = GC.getPromotionInfo(ePromotion);

	mov	edx, DWORD PTR _ePromotion$218119[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _pkPromotionInfo$218121[ebp], eax

; 1184 : 		if(pkPromotionInfo)

	cmp	DWORD PTR _pkPromotionInfo$218121[ebp], 0
	je	SHORT $LN2@GetCargoSp

; 1185 : 		{
; 1186 : 			if(GetFreePromotions(iLoop))

	mov	eax, DWORD PTR _iLoop$218115[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFreePromotions@CvUnitEntry@@QBE_NH@Z ; CvUnitEntry::GetFreePromotions
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@GetCargoSp

; 1187 : 			{
; 1188 : 				const int iVal = pkPromotionInfo->GetCargoChange();

	mov	ecx, DWORD PTR _pkPromotionInfo$218121[ebp]
	call	?GetCargoChange@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCargoChange
	mov	DWORD PTR _iVal$218124[ebp], eax

; 1189 : 				rtnValue += iVal;

	mov	edx, DWORD PTR _rtnValue$[ebp]
	add	edx, DWORD PTR _iVal$218124[ebp]
	mov	DWORD PTR _rtnValue$[ebp], edx
$LN2@GetCargoSp:

; 1190 : 			}
; 1191 : 		}
; 1192 : 	}

	jmp	SHORT $LN4@GetCargoSp
$LN3@GetCargoSp:

; 1193 : 
; 1194 : 	return rtnValue;

	mov	eax, DWORD PTR _rtnValue$[ebp]

; 1195 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCargoSpace@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetCargoSpace
_TEXT	ENDS
PUBLIC	?GetPower@CvUnitEntry@@QBEHXZ			; CvUnitEntry::GetPower
; Function compile flags: /Odtp
;	COMDAT ?GetPower@CvUnitEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPower@CvUnitEntry@@QBEHXZ PROC			; CvUnitEntry::GetPower, COMDAT
; _this$ = ecx

; 1199 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1200 : 	return m_iCachedPower;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+556]

; 1201 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPower@CvUnitEntry@@QBEHXZ ENDP			; CvUnitEntry::GetPower
_TEXT	ENDS
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff7333333333333
PUBLIC	__real@3ff8000000000000
EXTRN	?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetDomainModifierPercent
EXTRN	?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetUnitClassDefenseModifier
EXTRN	?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetUnitClassAttackModifier
EXTRN	?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetUnitClassModifierPercent
EXTRN	?getNumUnitClassInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumUnitClassInfos
EXTRN	?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetUnitCombatModifierPercent
EXTRN	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumUnitCombatClassInfos
EXTRN	?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetFeatureDefensePercent
EXTRN	?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetFeatureAttackPercent
EXTRN	?getNumFeatureInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumFeatureInfos
EXTRN	?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetTerrainDefensePercent
EXTRN	?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z:PROC ; CvPromotionEntry::GetTerrainAttackPercent
EXTRN	?getNumTerrainInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumTerrainInfos
EXTRN	?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ:PROC	; CvPromotionEntry::IsOnlyDefensive
EXTRN	?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ:PROC ; CvPromotionEntry::IsMustSetUpToRangedAttack
EXTRN	?IsBlitz@CvPromotionEntry@@QBE_NXZ:PROC		; CvPromotionEntry::IsBlitz
EXTRN	?GetDropRange@CvPromotionEntry@@QBEHXZ:PROC	; CvPromotionEntry::GetDropRange
EXTRN	?GetDefenseMod@CvPromotionEntry@@QBEHXZ:PROC	; CvPromotionEntry::GetDefenseMod
EXTRN	?GetAttackMod@CvPromotionEntry@@QBEHXZ:PROC	; CvPromotionEntry::GetAttackMod
EXTRN	?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ:PROC ; CvPromotionEntry::GetCityAttackPercent
EXTRN	___libm_sse2_pow:PROC
;	COMDAT __real@3fd3333333333333
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3ff7333333333333
CONST	SEGMENT
__real@3ff7333333333333 DQ 03ff7333333333333r	; 1.45
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
CONST	ENDS
;	COMDAT ?DoUpdatePower@CvUnitEntry@@QAEXXZ
_TEXT	SEGMENT
tv598 = -60						; size = 8
tv323 = -52						; size = 4
_this$ = -48						; size = 4
$T219852 = -44						; size = 4
$T219845 = -40						; size = 8
$T219844 = -32						; size = 8
_kPromotion$218154 = -24				; size = 4
_iPromotionLoop$218150 = -20				; size = 4
_iPower$ = -16						; size = 4
_iRangedStrength$ = -12					; size = 4
_iTemp$ = -8						; size = 4
_iLoop$ = -4						; size = 4
?DoUpdatePower@CvUnitEntry@@QAEXXZ PROC			; CvUnitEntry::DoUpdatePower, COMDAT
; _this$ = ecx

; 1205 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1206 : 	int iPower;
; 1207 : 
; 1208 : // ***************
; 1209 : // Main Factors - Strength & Moves
; 1210 : // ***************
; 1211 : 
; 1212 : 	// We want a Unit that has twice the strength to be roughly worth 3x as much with regards to Power
; 1213 : 	iPower = int(pow((double) GetCombat(), 1.5));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	cvtsi2sd xmm0, eax
	movsd	xmm1, QWORD PTR __real@3ff8000000000000
	call	___libm_sse2_pow
	cvttsd2si eax, xmm0
	mov	DWORD PTR _iPower$[ebp], eax

; 1214 : 
; 1215 : 	// Ranged Strength
; 1216 : 	int iRangedStrength = int(pow((double) GetRangedCombat(), 1.45));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetRangedCombat@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetRangedCombat
	cvtsi2sd xmm0, eax
	movsd	xmm1, QWORD PTR __real@3ff7333333333333
	call	___libm_sse2_pow
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _iRangedStrength$[ebp], ecx

; 1217 : 
; 1218 : 	// Naval ranged attacks are less useful
; 1219 : 	if(GetDomainType() == DOMAIN_SEA)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType
	test	eax, eax
	jne	SHORT $LN40@DoUpdatePo

; 1220 : 	{
; 1221 : 		iRangedStrength *= 3;

	mov	edx, DWORD PTR _iRangedStrength$[ebp]
	imul	edx, 3
	mov	DWORD PTR _iRangedStrength$[ebp], edx

; 1222 : 		iRangedStrength /= 4;

	mov	eax, DWORD PTR _iRangedStrength$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iRangedStrength$[ebp], eax
$LN40@DoUpdatePo:

; 1223 : 	}
; 1224 : 
; 1225 : 	if(iRangedStrength > iPower)

	mov	eax, DWORD PTR _iRangedStrength$[ebp]
	cmp	eax, DWORD PTR _iPower$[ebp]
	jle	SHORT $LN39@DoUpdatePo

; 1226 : 	{
; 1227 : 		iPower = iRangedStrength;

	mov	ecx, DWORD PTR _iRangedStrength$[ebp]
	mov	DWORD PTR _iPower$[ebp], ecx
$LN39@DoUpdatePo:

; 1228 : 	}
; 1229 : 
; 1230 : 	// We want Movement rate to be important, but not a dominating factor; a Unit with double the moves of a similarly-strengthed Unit should be ~1.5x as Powerful
; 1231 : 	iPower = int((float) iPower * pow(min(1.0,(double) GetMoves()), 0.3));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMoves@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetMoves
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR $T219844[ebp], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR $T219845[ebp], xmm0
	movsd	xmm0, QWORD PTR $T219845[ebp]
	comisd	xmm0, QWORD PTR $T219844[ebp]
	jbe	SHORT $LN45@DoUpdatePo
	lea	edx, DWORD PTR $T219844[ebp]
	mov	DWORD PTR tv323[ebp], edx
	jmp	SHORT $LN46@DoUpdatePo
$LN45@DoUpdatePo:
	lea	eax, DWORD PTR $T219845[ebp]
	mov	DWORD PTR tv323[ebp], eax
$LN46@DoUpdatePo:
	mov	ecx, DWORD PTR tv323[ebp]
	mov	DWORD PTR $T219852[ebp], ecx
	cvtsi2ss xmm0, DWORD PTR _iPower$[ebp]
	cvtss2sd xmm0, xmm0
	mov	edx, DWORD PTR $T219852[ebp]
	movsd	QWORD PTR tv598[ebp], xmm0
	movsd	xmm0, QWORD PTR [edx]
	movsd	xmm1, QWORD PTR __real@3fd3333333333333
	call	___libm_sse2_pow
	movsd	xmm1, QWORD PTR tv598[ebp]
	mulsd	xmm1, xmm0
	cvttsd2si eax, xmm1
	mov	DWORD PTR _iPower$[ebp], eax

; 1232 : 
; 1233 : // ***************
; 1234 : // Other modifiers
; 1235 : // ***************
; 1236 : 
; 1237 : 	// Suicide Units are obviously less useful
; 1238 : 	if(IsSuicide())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSuicide@CvUnitEntry@@QBE_NXZ		; CvUnitEntry::IsSuicide
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN38@DoUpdatePo

; 1239 : 	{
; 1240 : 		iPower /= 2;

	mov	eax, DWORD PTR _iPower$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iPower$[ebp], eax
$LN38@DoUpdatePo:

; 1241 : 	}
; 1242 : 
; 1243 : 	// Nukes are cool
; 1244 : 	if(GetNukeDamageLevel() > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNukeDamageLevel@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetNukeDamageLevel
	test	eax, eax
	jle	SHORT $LN37@DoUpdatePo

; 1245 : 	{
; 1246 : 		iPower += 4000;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, 4000				; 00000fa0H
	mov	DWORD PTR _iPower$[ebp], edx
$LN37@DoUpdatePo:

; 1247 : 	}
; 1248 : 
; 1249 : // ***************
; 1250 : // Promotion modifiers
; 1251 : // ***************
; 1252 : 
; 1253 : 	int iTemp;
; 1254 : #ifdef AUI_WARNING_FIXES
; 1255 : 	uint iLoop;
; 1256 : 
; 1257 : 	for (uint iPromotionLoop = 0; iPromotionLoop < GC.getNumPromotionInfos(); iPromotionLoop++)
; 1258 : #else
; 1259 : 	int iLoop;
; 1260 : 
; 1261 : 	for(int iPromotionLoop = 0; iPromotionLoop < GC.getNumPromotionInfos(); iPromotionLoop++)

	mov	DWORD PTR _iPromotionLoop$218150[ebp], 0
	jmp	SHORT $LN36@DoUpdatePo
$LN35@DoUpdatePo:
	mov	eax, DWORD PTR _iPromotionLoop$218150[ebp]
	add	eax, 1
	mov	DWORD PTR _iPromotionLoop$218150[ebp], eax
$LN36@DoUpdatePo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	DWORD PTR _iPromotionLoop$218150[ebp], eax
	jge	$LN34@DoUpdatePo

; 1262 : #endif
; 1263 : 	{
; 1264 : 		CvPromotionEntry* kPromotion = GC.getPromotionInfo((PromotionTypes)iPromotionLoop);

	mov	ecx, DWORD PTR _iPromotionLoop$218150[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _kPromotion$218154[ebp], eax

; 1265 : 		if(kPromotion == NULL)

	cmp	DWORD PTR _kPromotion$218154[ebp], 0
	jne	SHORT $LN33@DoUpdatePo

; 1266 : 			continue;

	jmp	SHORT $LN35@DoUpdatePo
$LN33@DoUpdatePo:

; 1267 : 
; 1268 : 		if(GetFreePromotions(iPromotionLoop))

	mov	edx, DWORD PTR _iPromotionLoop$218150[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFreePromotions@CvUnitEntry@@QBE_NH@Z ; CvUnitEntry::GetFreePromotions
	movzx	eax, al
	test	eax, eax
	je	$LN2@DoUpdatePo

; 1269 : 		{
; 1270 : 			// City Attack - add half of the bonus
; 1271 : 			if(kPromotion->GetCityAttackPercent() > 0)

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCityAttackPercent
	test	eax, eax
	jle	SHORT $LN31@DoUpdatePo

; 1272 : 			{
; 1273 : 				iTemp = (iPower * kPromotion->GetCityAttackPercent() / 2);

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetCityAttackPercent@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCityAttackPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iTemp$[ebp], eax

; 1274 : 				iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1275 : 				iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN31@DoUpdatePo:

; 1276 : 			}
; 1277 : 
; 1278 : 			// Attack - add half of the bonus
; 1279 : 			if(kPromotion->GetAttackMod() > 0)

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetAttackMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetAttackMod
	test	eax, eax
	jle	SHORT $LN30@DoUpdatePo

; 1280 : 			{
; 1281 : 				iTemp = (iPower * kPromotion->GetAttackMod() / 2);

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetAttackMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetAttackMod
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iTemp$[ebp], eax

; 1282 : 				iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1283 : 				iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN30@DoUpdatePo:

; 1284 : 			}
; 1285 : 
; 1286 : 			// Defense - add half of the bonus
; 1287 : 			if(kPromotion->GetDefenseMod() > 0)

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetDefenseMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetDefenseMod
	test	eax, eax
	jle	SHORT $LN29@DoUpdatePo

; 1288 : 			{
; 1289 : 				iTemp = (iPower * kPromotion->GetDefenseMod() / 2);

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetDefenseMod@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetDefenseMod
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iTemp$[ebp], eax

; 1290 : 				iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1291 : 				iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN29@DoUpdatePo:

; 1292 : 			}
; 1293 : 
; 1294 : 			// Paradrop - add 25%
; 1295 : 			if(kPromotion->GetDropRange() > 0)

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetDropRange@CvPromotionEntry@@QBEHXZ	; CvPromotionEntry::GetDropRange
	test	eax, eax
	jle	SHORT $LN28@DoUpdatePo

; 1296 : 			{
; 1297 : 				iTemp = iPower;

	mov	eax, DWORD PTR _iPower$[ebp]
	mov	DWORD PTR _iTemp$[ebp], eax

; 1298 : 				iTemp /= 4;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1299 : 				iPower += iTemp;

	mov	ecx, DWORD PTR _iPower$[ebp]
	add	ecx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], ecx
$LN28@DoUpdatePo:

; 1300 : 			}
; 1301 : 
; 1302 : 			// Blitz - add 20%
; 1303 : 			if(kPromotion->IsBlitz())

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?IsBlitz@CvPromotionEntry@@QBE_NXZ	; CvPromotionEntry::IsBlitz
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN27@DoUpdatePo

; 1304 : 			{
; 1305 : 				iTemp = iPower;

	mov	eax, DWORD PTR _iPower$[ebp]
	mov	DWORD PTR _iTemp$[ebp], eax

; 1306 : 				iTemp /= 5;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1307 : 				iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN27@DoUpdatePo:

; 1308 : 			}
; 1309 : 
; 1310 : 			// Set Up For Ranged Attack - reduce by 20%
; 1311 : 			if(kPromotion->IsMustSetUpToRangedAttack())

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?IsMustSetUpToRangedAttack@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsMustSetUpToRangedAttack
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@DoUpdatePo

; 1312 : 			{
; 1313 : 				iTemp = iPower;

	mov	ecx, DWORD PTR _iPower$[ebp]
	mov	DWORD PTR _iTemp$[ebp], ecx

; 1314 : 				iTemp /= 5;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1315 : 				iPower -= iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	sub	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN26@DoUpdatePo:

; 1316 : 			}
; 1317 : 
; 1318 : 			// Only Defensive - reduce  by 25%, but only if the Unit has no ranged capability
; 1319 : 			if(kPromotion->IsOnlyDefensive() && GetRangedCombat() == 0)

	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsOnlyDefensive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@DoUpdatePo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetRangedCombat@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetRangedCombat
	test	eax, eax
	jne	SHORT $LN25@DoUpdatePo

; 1320 : 			{
; 1321 : 				iTemp = iPower;

	mov	ecx, DWORD PTR _iPower$[ebp]
	mov	DWORD PTR _iTemp$[ebp], ecx

; 1322 : 				iTemp /= 4;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1323 : 				iPower -= iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	sub	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN25@DoUpdatePo:

; 1324 : 			}
; 1325 : 
; 1326 : 			for(iLoop = 0; iLoop < GC.getNumTerrainInfos(); iLoop++)

	mov	DWORD PTR _iLoop$[ebp], 0
	jmp	SHORT $LN24@DoUpdatePo
$LN23@DoUpdatePo:
	mov	eax, DWORD PTR _iLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$[ebp], eax
$LN24@DoUpdatePo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumTerrainInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTerrainInfos
	cmp	DWORD PTR _iLoop$[ebp], eax
	jge	$LN22@DoUpdatePo

; 1327 : 			{
; 1328 : 				// Terrain Attack - add one quarter of the bonus
; 1329 : 				if(kPromotion->GetTerrainAttackPercent(iLoop) > 0)

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainAttackPercent
	test	eax, eax
	jle	SHORT $LN21@DoUpdatePo

; 1330 : 				{
; 1331 : 					iTemp = (iPower * kPromotion->GetTerrainAttackPercent(iLoop) / 4);

	mov	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetTerrainAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainAttackPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1332 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1333 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN21@DoUpdatePo:

; 1334 : 				}
; 1335 : 				// Terrain Defense - add one quarter of the bonus
; 1336 : 				if(kPromotion->GetTerrainDefensePercent(iLoop) > 0)

	mov	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainDefensePercent
	test	eax, eax
	jle	SHORT $LN20@DoUpdatePo

; 1337 : 				{
; 1338 : 					iTemp = (iPower * kPromotion->GetTerrainDefensePercent(iLoop) / 4);

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetTerrainDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetTerrainDefensePercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1339 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1340 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN20@DoUpdatePo:

; 1341 : 				}
; 1342 : 			}

	jmp	$LN23@DoUpdatePo
$LN22@DoUpdatePo:

; 1343 : 
; 1344 : 			for(iLoop = 0; iLoop < GC.getNumFeatureInfos(); iLoop++)

	mov	DWORD PTR _iLoop$[ebp], 0
	jmp	SHORT $LN19@DoUpdatePo
$LN18@DoUpdatePo:
	mov	eax, DWORD PTR _iLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$[ebp], eax
$LN19@DoUpdatePo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumFeatureInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumFeatureInfos
	cmp	DWORD PTR _iLoop$[ebp], eax
	jge	$LN17@DoUpdatePo

; 1345 : 			{
; 1346 : 				// Feature Attack - add one quarter of the bonus
; 1347 : 				if(kPromotion->GetFeatureAttackPercent(iLoop) > 0)

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureAttackPercent
	test	eax, eax
	jle	SHORT $LN16@DoUpdatePo

; 1348 : 				{
; 1349 : 					iTemp = (iPower * kPromotion->GetFeatureAttackPercent(iLoop) / 4);

	mov	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetFeatureAttackPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureAttackPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1350 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1351 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN16@DoUpdatePo:

; 1352 : 				}
; 1353 : 				// Feature Defense - add one quarter of the bonus
; 1354 : 				if(kPromotion->GetFeatureDefensePercent(iLoop) > 0)

	mov	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureDefensePercent
	test	eax, eax
	jle	SHORT $LN15@DoUpdatePo

; 1355 : 				{
; 1356 : 					iTemp = (iPower * kPromotion->GetFeatureDefensePercent(iLoop) / 4);

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetFeatureDefensePercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetFeatureDefensePercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1357 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1358 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN15@DoUpdatePo:

; 1359 : 				}
; 1360 : 			}

	jmp	$LN18@DoUpdatePo
$LN17@DoUpdatePo:

; 1361 : 
; 1362 : 			for(iLoop = 0; iLoop < GC.getNumUnitCombatClassInfos(); iLoop++)

	mov	DWORD PTR _iLoop$[ebp], 0
	jmp	SHORT $LN14@DoUpdatePo
$LN13@DoUpdatePo:
	mov	eax, DWORD PTR _iLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$[ebp], eax
$LN14@DoUpdatePo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitCombatClassInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumUnitCombatClassInfos
	cmp	DWORD PTR _iLoop$[ebp], eax
	jge	SHORT $LN12@DoUpdatePo

; 1363 : 			{
; 1364 : 				// Unit Combat Class (e.g. Pikemen) - add one quarter of the bonus
; 1365 : 				if(kPromotion->GetUnitCombatModifierPercent(iLoop) > 0)

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitCombatModifierPercent
	test	eax, eax
	jle	SHORT $LN11@DoUpdatePo

; 1366 : 				{
; 1367 : 					iTemp = (iPower * kPromotion->GetUnitCombatModifierPercent(iLoop) / 4);

	mov	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitCombatModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitCombatModifierPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1368 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1369 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN11@DoUpdatePo:

; 1370 : 				}
; 1371 : 			}

	jmp	SHORT $LN13@DoUpdatePo
$LN12@DoUpdatePo:

; 1372 : 
; 1373 : 			for(iLoop = 0; iLoop < GC.getNumUnitClassInfos(); iLoop++)

	mov	DWORD PTR _iLoop$[ebp], 0
	jmp	SHORT $LN10@DoUpdatePo
$LN9@DoUpdatePo:
	mov	eax, DWORD PTR _iLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$[ebp], eax
$LN10@DoUpdatePo:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	DWORD PTR _iLoop$[ebp], eax
	jge	$LN8@DoUpdatePo

; 1374 : 			{
; 1375 : 				// Unit Class (e.g. bonus ONLY against Galleys) - add one eighth of the bonus
; 1376 : 				// We're assuming here that the bonus against the other Unit is at least going to be somewhat useful - trust the XML! :o
; 1377 : 				if(kPromotion->GetUnitClassModifierPercent(iLoop) > 0)

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassModifierPercent
	test	eax, eax
	jle	SHORT $LN7@DoUpdatePo

; 1378 : 				{
; 1379 : 					iTemp = (iPower * kPromotion->GetUnitClassModifierPercent(iLoop) / 8);

	mov	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassModifierPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _iTemp$[ebp], eax

; 1380 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1381 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN7@DoUpdatePo:

; 1382 : 				}
; 1383 : 				// Unit Class Attack - one tenth of the bonus
; 1384 : 				if(kPromotion->GetUnitClassAttackModifier(iLoop) > 0)

	mov	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassAttackModifier
	test	eax, eax
	jle	SHORT $LN6@DoUpdatePo

; 1385 : 				{
; 1386 : 					iTemp = (iPower * kPromotion->GetUnitClassAttackModifier(iLoop) / 10);

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassAttackModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassAttackModifier
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1387 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1388 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN6@DoUpdatePo:

; 1389 : 				}
; 1390 : 				// Unit Class Defense - one tenth of the bonus
; 1391 : 				if(kPromotion->GetUnitClassDefenseModifier(iLoop) > 0)

	mov	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassDefenseModifier
	test	eax, eax
	jle	SHORT $LN5@DoUpdatePo

; 1392 : 				{
; 1393 : 					iTemp = (iPower * kPromotion->GetUnitClassDefenseModifier(iLoop) / 10);

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetUnitClassDefenseModifier@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetUnitClassDefenseModifier
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1394 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1395 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN5@DoUpdatePo:

; 1396 : 				}
; 1397 : 			}

	jmp	$LN9@DoUpdatePo
$LN8@DoUpdatePo:

; 1398 : 
; 1399 : 			for(iLoop = 0; iLoop < NUM_DOMAIN_TYPES; iLoop++)

	mov	DWORD PTR _iLoop$[ebp], 0
	jmp	SHORT $LN4@DoUpdatePo
$LN3@DoUpdatePo:
	mov	eax, DWORD PTR _iLoop$[ebp]
	add	eax, 1
	mov	DWORD PTR _iLoop$[ebp], eax
$LN4@DoUpdatePo:
	cmp	DWORD PTR _iLoop$[ebp], 5
	jge	SHORT $LN2@DoUpdatePo

; 1400 : 			{
; 1401 : 				// Domain - add one quarter of the bonus
; 1402 : 				if(kPromotion->GetDomainModifierPercent(iLoop) > 0)

	mov	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetDomainModifierPercent
	test	eax, eax
	jle	SHORT $LN1@DoUpdatePo

; 1403 : 				{
; 1404 : 					iTemp = (iPower * kPromotion->GetDomainModifierPercent(iLoop) / 4);

	mov	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kPromotion$218154[ebp]
	call	?GetDomainModifierPercent@CvPromotionEntry@@QBEHH@Z ; CvPromotionEntry::GetDomainModifierPercent
	imul	eax, DWORD PTR _iPower$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _iTemp$[ebp], eax

; 1405 : 					iTemp /= 100;

	mov	eax, DWORD PTR _iTemp$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iTemp$[ebp], eax

; 1406 : 					iPower += iTemp;

	mov	edx, DWORD PTR _iPower$[ebp]
	add	edx, DWORD PTR _iTemp$[ebp]
	mov	DWORD PTR _iPower$[ebp], edx
$LN1@DoUpdatePo:

; 1407 : 				}
; 1408 : 			}

	jmp	SHORT $LN3@DoUpdatePo
$LN2@DoUpdatePo:

; 1409 : 		}
; 1410 : 	}

	jmp	$LN35@DoUpdatePo
$LN34@DoUpdatePo:

; 1411 : 
; 1412 : 	// Debug output
; 1413 : 	//char temp[256];
; 1414 : 	//sprintf(temp, "%s: %i\n", GetDescription(), iPower);
; 1415 : 	//OutputDebugString(temp);
; 1416 : 
; 1417 : 	m_iCachedPower = iPower;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iPower$[ebp]
	mov	DWORD PTR [eax+556], ecx

; 1418 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoUpdatePower@CvUnitEntry@@QAEXXZ ENDP			; CvUnitEntry::DoUpdatePower
_TEXT	ENDS
PUBLIC	?GetMoveRate@CvUnitEntry@@QBE?AUUnitMoveRate@@H@Z ; CvUnitEntry::GetMoveRate
; Function compile flags: /Odtp
;	COMDAT ?GetMoveRate@CvUnitEntry@@QBE?AUUnitMoveRate@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_numHexes$ = 12						; size = 4
?GetMoveRate@CvUnitEntry@@QBE?AUUnitMoveRate@@H@Z PROC	; CvUnitEntry::GetMoveRate, COMDAT
; _this$ = ecx

; 1421 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1422 : 	if(numHexes < 0)

	cmp	DWORD PTR _numHexes$[ebp], 0
	jge	SHORT $LN2@GetMoveRat

; 1423 : 		numHexes = 0;

	mov	DWORD PTR _numHexes$[ebp], 0
$LN2@GetMoveRat:

; 1424 : 	if(numHexes > 11)

	cmp	DWORD PTR _numHexes$[ebp], 11		; 0000000bH
	jle	SHORT $LN1@GetMoveRat

; 1425 : 		numHexes = 11;

	mov	DWORD PTR _numHexes$[ebp], 11		; 0000000bH
$LN1@GetMoveRat:

; 1426 : 	return m_unitMoveRate[numHexes];

	mov	eax, DWORD PTR _numHexes$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	esi, DWORD PTR [ecx+eax+600]
	mov	ecx, 7
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1427 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetMoveRate@CvUnitEntry@@QBE?AUUnitMoveRate@@H@Z ENDP	; CvUnitEntry::GetMoveRate
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >
PUBLIC	?_Buy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Buy
PUBLIC	??0CvUnitXMLEntries@@QAE@XZ			; CvUnitXMLEntries::CvUnitXMLEntries
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvUnitXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvUnitXMLEntries@@QAE@XZ$1
__ehfuncinfo$??0CvUnitXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvUnitXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvUnitXMLEntries@@QAE@XZ
_TEXT	SEGMENT
tv92 = -132						; size = 4
tv149 = -128						; size = 4
_this$ = -124						; size = 4
$T219899 = -30						; size = 1
$T219886 = -29						; size = 1
$T219882 = -28						; size = 4
$T219875 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvUnitXMLEntries@@QAE@XZ PROC			; CvUnitXMLEntries::CvUnitXMLEntries, COMDAT
; _this$ = ecx

; 1434 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvUnitXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T219899[ebp]
	mov	DWORD PTR $T219875[ebp], eax
	lea	ecx, DWORD PTR $T219886[ebp]
	mov	DWORD PTR $T219882[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1435 : 
; 1436 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvUnitXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0CvUnitXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvUnitXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvUnitXMLEntries@@QAE@XZ ENDP			; CvUnitXMLEntries::CvUnitXMLEntries
PUBLIC	??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >
PUBLIC	?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Tidy
PUBLIC	?DeleteArray@CvUnitXMLEntries@@QAEXXZ		; CvUnitXMLEntries::DeleteArray
PUBLIC	??1CvUnitXMLEntries@@QAE@XZ			; CvUnitXMLEntries::~CvUnitXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvUnitXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvUnitXMLEntries@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvUnitXMLEntries@@QAE@XZ$1
__ehfuncinfo$??1CvUnitXMLEntries@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvUnitXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvunitclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvUnitXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1CvUnitXMLEntries@@QAE@XZ PROC			; CvUnitXMLEntries::~CvUnitXMLEntries, COMDAT
; _this$ = ecx

; 1440 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvUnitXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1441 : 	DeleteArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteArray@CvUnitXMLEntries@@QAEXXZ	; CvUnitXMLEntries::DeleteArray

; 1442 : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvUnitXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >
__unwindfunclet$??1CvUnitXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1CvUnitXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvUnitXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvUnitXMLEntries@@QAE@XZ ENDP			; CvUnitXMLEntries::~CvUnitXMLEntries
PUBLIC	?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ; CvUnitXMLEntries::GetUnitEntries
; Function compile flags: /Odtp
;	COMDAT ?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ PROC ; CvUnitXMLEntries::GetUnitEntries, COMDAT
; _this$ = ecx

; 1446 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1447 : 	return m_paUnitEntries;

	mov	eax, DWORD PTR _this$[ebp]

; 1448 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnitEntries@CvUnitXMLEntries@@QAEAAV?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@XZ ENDP ; CvUnitXMLEntries::GetUnitEntries
_TEXT	ENDS
PUBLIC	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ		; CvUnitXMLEntries::GetNumUnits
; Function compile flags: /Odtp
;	COMDAT ?GetNumUnits@CvUnitXMLEntries@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumUnits@CvUnitXMLEntries@@QAEHXZ PROC		; CvUnitXMLEntries::GetNumUnits, COMDAT
; _this$ = ecx

; 1456 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1457 : 	return m_paUnitEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 1458 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumUnits@CvUnitXMLEntries@@QAEHXZ ENDP		; CvUnitXMLEntries::GetNumUnits
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@0@Z ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::erase
; Function compile flags: /Odtp
;	COMDAT ?DeleteArray@CvUnitXMLEntries@@QAEXXZ
_TEXT	SEGMENT
tv143 = -116						; size = 4
_this$ = -112						; size = 4
$T220142 = -56						; size = 4
$T220126 = -52						; size = 4
$T220247 = -48						; size = 4
$T220246 = -44						; size = 4
$T220245 = -40						; size = 4
$T220244 = -36						; size = 4
$T220243 = -32						; size = 4
$T220110 = -28						; size = 4
$T220104 = -24						; size = 4
$T220103 = -20						; size = 4
$T220069 = -16						; size = 4
$T220045 = -12						; size = 4
$T220035 = -8						; size = 4
_it$218368 = -4						; size = 4
?DeleteArray@CvUnitXMLEntries@@QAEXXZ PROC		; CvUnitXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 1463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 1464 : 	for(std::vector<CvUnitEntry*>::iterator it = m_paUnitEntries.begin(); it != m_paUnitEntries.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220045[ebp], ecx
	mov	edx, DWORD PTR $T220045[ebp]
	mov	DWORD PTR _it$218368[ebp], edx
	jmp	SHORT $LN3@DeleteArra
$LN2@DeleteArra:
	mov	eax, DWORD PTR _it$218368[ebp]
	add	eax, 4
	mov	DWORD PTR _it$218368[ebp], eax
$LN3@DeleteArra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220069[ebp], edx
	mov	eax, DWORD PTR $T220069[ebp]
	mov	DWORD PTR $T220035[ebp], eax
	mov	ecx, DWORD PTR _it$218368[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T220035[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DeleteArra

; 1465 : 	{
; 1466 : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$218368[ebp]
	mov	DWORD PTR $T220110[ebp], edx
	mov	eax, DWORD PTR $T220110[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T220104[ebp], ecx
	mov	edx, DWORD PTR $T220104[ebp]
	mov	DWORD PTR $T220103[ebp], edx
	cmp	DWORD PTR $T220103[ebp], 0
	je	SHORT $LN32@DeleteArra
	mov	ecx, DWORD PTR $T220103[ebp]
	call	??1CvUnitEntry@@QAE@XZ			; CvUnitEntry::~CvUnitEntry
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN35@DeleteArra
	mov	ecx, DWORD PTR $T220103[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@DeleteArra:
	mov	edx, DWORD PTR $T220103[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN33@DeleteArra
$LN32@DeleteArra:
	mov	DWORD PTR tv143[ebp], 0
$LN33@DeleteArra:
	mov	eax, DWORD PTR $T220110[ebp]
	mov	DWORD PTR [eax], 0

; 1467 : 	}

	jmp	$LN2@DeleteArra
$LN1@DeleteArra:

; 1468 : 
; 1469 : 	m_paUnitEntries.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220126[ebp], edx
	mov	eax, DWORD PTR $T220126[ebp]
	mov	DWORD PTR $T220244[ebp], eax
	mov	ecx, DWORD PTR $T220244[ebp]
	mov	DWORD PTR $T220243[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T220142[ebp], eax
	mov	ecx, DWORD PTR $T220142[ebp]
	mov	DWORD PTR $T220246[ebp], ecx
	mov	edx, DWORD PTR $T220246[ebp]
	mov	DWORD PTR $T220245[ebp], edx
	mov	eax, DWORD PTR $T220243[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220245[ebp]
	push	ecx
	lea	edx, DWORD PTR $T220247[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@0@Z ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::erase

; 1470 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteArray@CvUnitXMLEntries@@QAEXXZ ENDP		; CvUnitXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z ; CvUnitXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z PROC	; CvUnitXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 1478 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 	return m_paUnitEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 1480 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z ENDP	; CvUnitXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	??$ReadHashedDataArray@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHH@Z ; CvInfosSerializationHelper::ReadHashedDataArray<int>
PUBLIC	?Read@UnitArrayHelpers@@YAXAAVFDataStream@@PAH@Z ; UnitArrayHelpers::Read
EXTRN	?getNumUnitInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumUnitInfos
; Function compile flags: /Odtp
;	COMDAT ?Read@UnitArrayHelpers@@YAXAAVFDataStream@@PAH@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_paiUnitArray$ = 12					; size = 4
?Read@UnitArrayHelpers@@YAXAAVFDataStream@@PAH@Z PROC	; UnitArrayHelpers::Read, COMDAT

; 1484 : {

	push	ebp
	mov	ebp, esp

; 1485 : 	CvInfosSerializationHelper::ReadHashedDataArray(kStream, paiUnitArray, GC.getNumUnitInfos());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumUnitInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitInfos
	push	eax
	mov	eax, DWORD PTR _paiUnitArray$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??$ReadHashedDataArray@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHH@Z ; CvInfosSerializationHelper::ReadHashedDataArray<int>
	add	esp, 12					; 0000000cH

; 1486 : }

	pop	ebp
	ret	0
?Read@UnitArrayHelpers@@YAXAAVFDataStream@@PAH@Z ENDP	; UnitArrayHelpers::Read
_TEXT	ENDS
PUBLIC	??$WriteHashedDataArray@W4UnitTypes@@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHI@Z ; CvInfosSerializationHelper::WriteHashedDataArray<enum UnitTypes,int>
PUBLIC	?Write@UnitArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ; UnitArrayHelpers::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@UnitArrayHelpers@@YAXAAVFDataStream@@PAHH@Z
_TEXT	SEGMENT
_kStream$ = 8						; size = 4
_paiUnitArray$ = 12					; size = 4
_iArraySize$ = 16					; size = 4
?Write@UnitArrayHelpers@@YAXAAVFDataStream@@PAHH@Z PROC	; UnitArrayHelpers::Write, COMDAT

; 1490 : {

	push	ebp
	mov	ebp, esp

; 1491 : 	CvInfosSerializationHelper::WriteHashedDataArray<UnitTypes, int>(kStream, paiUnitArray, iArraySize);

	mov	eax, DWORD PTR _iArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _paiUnitArray$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??$WriteHashedDataArray@W4UnitTypes@@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHI@Z ; CvInfosSerializationHelper::WriteHashedDataArray<enum UnitTypes,int>
	add	esp, 12					; 0000000cH

; 1492 : }

	pop	ebp
	ret	0
?Write@UnitArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ENDP	; UnitArrayHelpers::Write
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >::~_Vector_val<CvUnitEntry *,std::allocator<CvUnitEntry *> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvUnitEntry@@PAPAV1@@stdext@@YAPAPAVCvUnitEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvUnitEntry * *,CvUnitEntry * *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T220423 = -52						; size = 4
$T220412 = -48						; size = 4
$T220411 = -44						; size = 4
__Cat$220418 = -40					; size = 1
$T220415 = -39						; size = 1
__Ptr$218456 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@0@Z PROC ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvUnitEntry@@PAPAV1@@stdext@@YAPAPAVCvUnitEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvUnitEntry * *,CvUnitEntry * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$218456[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220423[ebp], edx
	mov	eax, DWORD PTR $T220423[ebp]
	mov	DWORD PTR $T220412[ebp], eax
	mov	ecx, DWORD PTR __Ptr$218456[ebp]
	mov	DWORD PTR $T220411[ebp], ecx
	mov	dl, BYTE PTR __Cat$220418[ebp]
	mov	BYTE PTR $T220415[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$218456[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@2@0@Z ENDP ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvUnitEntry@@@std@@YAPAPAVCvUnitEntry@@IPAPAV1@@Z ; std::_Allocate<CvUnitEntry *>
PUBLIC	?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$220440 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$220440[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$220440[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$220440[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvUnitEntry@@@std@@YAPAPAVCvUnitEntry@@IPAPAV1@@Z ; std::_Allocate<CvUnitEntry *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T220504 = -28						; size = 4
$T220503 = -24						; size = 4
$T220499 = -20						; size = 4
$T220498 = -16						; size = 4
$T220487 = -12						; size = 4
$T220486 = -8						; size = 4
__Cat$220493 = -2					; size = 1
$T220490 = -1						; size = 1
?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220499[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T220498[ebp], ecx
	mov	edx, DWORD PTR $T220499[ebp]
	mov	DWORD PTR $T220487[ebp], edx
	mov	eax, DWORD PTR $T220498[ebp]
	mov	DWORD PTR $T220486[ebp], eax
	mov	cl, BYTE PTR __Cat$220493[ebp]
	mov	BYTE PTR $T220490[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T220504[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T220503[ebp], eax
	mov	ecx, DWORD PTR $T220503[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Tidy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T220508 = -80						; size = 28
$T220507 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T220508[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T220507[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T220507[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T220508[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220507[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T220507[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T220507[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T220508[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T220508[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T220507[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvUnitEntry@@V?$allocator@PAVCvUnitEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvUnitEntry *,std::allocator<CvUnitEntry *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfosserializationhelper.h
;	COMDAT ??$ReadHashedDataArray@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHH@Z
_TEXT	SEGMENT
_tValue$218564 = -24					; size = 4
_tValue$218559 = -20					; size = 4
_iType$218557 = -16					; size = 4
_bValid$218556 = -9					; size = 1
_iI$218552 = -8						; size = 4
_uiNumEntries$ = -4					; size = 4
_kStream$ = 8						; size = 4
_paArray$ = 12						; size = 4
_iArraySize$ = 16					; size = 4
??$ReadHashedDataArray@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHH@Z PROC ; CvInfosSerializationHelper::ReadHashedDataArray<int>, COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 249  : 	uint uiNumEntries;
; 250  : 
; 251  : 	kStream >> uiNumEntries;

	lea	eax, DWORD PTR _uiNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 252  : 
; 253  : 	for(uint iI = 0; iI < uiNumEntries; iI++)

	mov	DWORD PTR _iI$218552[ebp], 0
	jmp	SHORT $LN7@ReadHashed
$LN6@ReadHashed:
	mov	ecx, DWORD PTR _iI$218552[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218552[ebp], ecx
$LN7@ReadHashed:
	mov	edx, DWORD PTR _iI$218552[ebp]
	cmp	edx, DWORD PTR _uiNumEntries$[ebp]
	jae	SHORT $LN8@ReadHashed

; 254  : 	{
; 255  : 		bool bValid;
; 256  : 		int iType = ReadHashed(kStream, &bValid);

	lea	eax, DWORD PTR _bValid$218556[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$218557[ebp], eax

; 257  : 		if(iType != -1)

	cmp	DWORD PTR _iType$218557[ebp], -1
	je	SHORT $LN4@ReadHashed

; 258  : 		{
; 259  : 			TData tValue;
; 260  : 			kStream >> tValue;

	lea	edx, DWORD PTR _tValue$218559[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 261  : 			if((int)iType < iArraySize)

	mov	eax, DWORD PTR _iType$218557[ebp]
	cmp	eax, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN3@ReadHashed

; 262  : 				paArray[iType] = tValue;

	mov	ecx, DWORD PTR _iType$218557[ebp]
	mov	edx, DWORD PTR _paArray$[ebp]
	mov	eax, DWORD PTR _tValue$218559[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN3@ReadHashed:

; 263  : 		}

	jmp	SHORT $LN2@ReadHashed
$LN4@ReadHashed:

; 264  : 		else if(!bValid)

	movzx	ecx, BYTE PTR _bValid$218556[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@ReadHashed

; 265  : 		{
; 266  : 			TData tValue;
; 267  : 			kStream >> tValue;

	lea	edx, DWORD PTR _tValue$218564[ebp]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
$LN2@ReadHashed:

; 268  : 		}
; 269  : 	}

	jmp	SHORT $LN6@ReadHashed
$LN8@ReadHashed:

; 270  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$ReadHashedDataArray@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHH@Z ENDP ; CvInfosSerializationHelper::ReadHashedDataArray<int>
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@W4UnitTypes@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ??$WriteHashedDataArray@W4UnitTypes@@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHI@Z
_TEXT	SEGMENT
_eType$218570 = -8					; size = 4
_iI$218566 = -4						; size = 4
_kStream$ = 8						; size = 4
_paArray$ = 12						; size = 4
_uiArraySize$ = 16					; size = 4
??$WriteHashedDataArray@W4UnitTypes@@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHI@Z PROC ; CvInfosSerializationHelper::WriteHashedDataArray<enum UnitTypes,int>, COMDAT

; 559  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 560  : 	kStream << uiArraySize;

	lea	eax, DWORD PTR _uiArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 561  : 
; 562  : 	for(uint iI = 0; iI < uiArraySize; iI++)

	mov	DWORD PTR _iI$218566[ebp], 0
	jmp	SHORT $LN4@WriteHashe
$LN3@WriteHashe:
	mov	ecx, DWORD PTR _iI$218566[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218566[ebp], ecx
$LN4@WriteHashe:
	mov	edx, DWORD PTR _iI$218566[ebp]
	cmp	edx, DWORD PTR _uiArraySize$[ebp]
	jae	SHORT $LN5@WriteHashe

; 563  : 	{
; 564  : 		const TType eType = static_cast<TType>(iI);

	mov	eax, DWORD PTR _iI$218566[ebp]
	mov	DWORD PTR _eType$218570[ebp], eax

; 565  : 		if(WriteHashed(kStream, eType))

	mov	ecx, DWORD PTR _eType$218570[ebp]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@W4UnitTypes@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@WriteHashe

; 566  : 		{
; 567  : 			kStream << paArray[iI];

	mov	ecx, DWORD PTR _iI$218566[ebp]
	mov	edx, DWORD PTR _paArray$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
$LN1@WriteHashe:

; 568  : 		}
; 569  : 	}

	jmp	SHORT $LN3@WriteHashe
$LN5@WriteHashe:

; 570  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$WriteHashedDataArray@W4UnitTypes@@H@CvInfosSerializationHelper@@YAXAAVFDataStream@@PAHI@Z ENDP ; CvInfosSerializationHelper::WriteHashedDataArray<enum UnitTypes,int>
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvUnitEntry@@PAPAV1@@stdext@@YAPAPAVCvUnitEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
$T220590 = -26						; size = 1
$T220589 = -25						; size = 1
$T220588 = -24						; size = 4
$T220587 = -20						; size = 4
__Off$220584 = -16					; size = 4
__Result$220585 = -12					; size = 4
__Cat$220576 = -4					; size = 1
$T220572 = -3						; size = 1
$T220571 = -2						; size = 1
$T220570 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvUnitEntry@@PAPAV1@@stdext@@YAPAPAVCvUnitEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvUnitEntry * *,CvUnitEntry * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T220570[ebp], al
	mov	cl, BYTE PTR __Cat$220576[ebp]
	mov	BYTE PTR $T220571[ebp], cl
	mov	dl, BYTE PTR $T220570[ebp]
	mov	BYTE PTR $T220590[ebp], dl
	mov	al, BYTE PTR $T220572[ebp]
	mov	BYTE PTR $T220589[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T220588[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T220587[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T220587[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$220584[ebp], eax
	mov	ecx, DWORD PTR __Off$220584[ebp]
	mov	edx, DWORD PTR $T220588[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$220585[ebp], eax
	cmp	DWORD PTR __Off$220584[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$220584[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T220587[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$220584[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T220588[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$220585[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvUnitEntry@@PAPAV1@@stdext@@YAPAPAVCvUnitEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvUnitEntry * *,CvUnitEntry * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvUnitEntry@@@std@@YAPAPAVCvUnitEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T220597 = -16						; size = 4
$T220593 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvUnitEntry@@@std@@YAPAPAVCvUnitEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvUnitEntry *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T220597[ebp], 0
	lea	eax, DWORD PTR $T220597[ebp]
	push	eax
	lea	ecx, DWORD PTR $T220593[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T220593[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T220593[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvUnitEntry@@@std@@YAPAPAVCvUnitEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvUnitEntry *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
;	COMDAT ?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T220623 = -8						; size = 4
_i$172577 = -4						; size = 4
_pArray$ = 8						; size = 4
_count$ = 12						; size = 4
_iDefault$ = 16						; size = 4
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z PROC	; CvDatabaseUtility::InitializeArray, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 	CvAssertMsg(count > 0, "Initializing array to 0 or less items.");
; 122  : #ifdef AUI_WARNING_FIXES
; 123  : 	delete[] pArray;
; 124  : #endif
; 125  : 	pArray = FNEW(int[count], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, DWORD PTR _count$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T220623[ebp], eax
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR $T220623[ebp]
	mov	DWORD PTR [eax], ecx

; 126  : 	if(iDefault == 0)

	cmp	DWORD PTR _iDefault$[ebp], 0
	jne	SHORT $LN5@Initialize

; 127  : 	{
; 128  : 		ZeroMemory(pArray, sizeof(int) * count);

	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 129  : 	}
; 130  : 	else

	jmp	SHORT $LN6@Initialize
$LN5@Initialize:

; 131  : 	{
; 132  : 		for(size_t i = 0; i < count; ++i)

	mov	DWORD PTR _i$172577[ebp], 0
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:
	mov	edx, DWORD PTR _i$172577[ebp]
	add	edx, 1
	mov	DWORD PTR _i$172577[ebp], edx
$LN3@Initialize:
	mov	eax, DWORD PTR _i$172577[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN6@Initialize

; 133  : 			pArray[i] = iDefault;

	mov	ecx, DWORD PTR _pArray$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$172577[ebp]
	mov	ecx, DWORD PTR _iDefault$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN2@Initialize
$LN6@Initialize:

; 134  : 	}
; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ENDP	; CvDatabaseUtility::InitializeArray
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
