; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllRandom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvRandom1 DD 02331cbf1H
	DW	0ad80H
	DW	04c4aH
	DB	0a6H
	DB	014H
	DB	0f3H
	DB	077H
	DB	044H
	DB	045H
	DB	029H
	DB	0d9H
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllRandom@@6B@				; CvDllRandom::`vftable'
PUBLIC	??_7ICvRandom1@@6B@				; ICvRandom1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllRandom@@QAE@PAVCvRandom@@@Z		; CvDllRandom::CvDllRandom
PUBLIC	?QueryInterface@CvDllRandom@@UAGPAXU_GUID@@@Z	; CvDllRandom::QueryInterface
PUBLIC	?Destroy@CvDllRandom@@EAGXXZ			; CvDllRandom::Destroy
PUBLIC	?Init@CvDllRandom@@UAGXK@Z			; CvDllRandom::Init
PUBLIC	?Reset@CvDllRandom@@UAGXK@Z			; CvDllRandom::Reset
PUBLIC	?CopyFrom@CvDllRandom@@UAGXPAVICvRandom1@@@Z	; CvDllRandom::CopyFrom
PUBLIC	?Get@CvDllRandom@@UAGGGPBD@Z			; CvDllRandom::Get
PUBLIC	?GetFloat@CvDllRandom@@UAGMXZ			; CvDllRandom::GetFloat
PUBLIC	?GetSeed@CvDllRandom@@UBGKXZ			; CvDllRandom::GetSeed
PUBLIC	?Read@CvDllRandom@@UAGXAAVFDataStream@@@Z	; CvDllRandom::Read
PUBLIC	?Write@CvDllRandom@@UBGXAAVFDataStream@@@Z	; CvDllRandom::Write
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllRandom@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllrandom.cpp
CONST	SEGMENT
??_7CvDllRandom@@6B@ DD FLAT:?QueryInterface@CvDllRandom@@UAGPAXU_GUID@@@Z ; CvDllRandom::`vftable'
	DD	FLAT:?Destroy@CvDllRandom@@EAGXXZ
	DD	FLAT:?Init@CvDllRandom@@UAGXK@Z
	DD	FLAT:?Reset@CvDllRandom@@UAGXK@Z
	DD	FLAT:?CopyFrom@CvDllRandom@@UAGXPAVICvRandom1@@@Z
	DD	FLAT:?Get@CvDllRandom@@UAGGGPBD@Z
	DD	FLAT:?GetFloat@CvDllRandom@@UAGMXZ
	DD	FLAT:?GetSeed@CvDllRandom@@UBGKXZ
	DD	FLAT:?Read@CvDllRandom@@UAGXAAVFDataStream@@@Z
	DD	FLAT:?Write@CvDllRandom@@UBGXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT ??_7ICvRandom1@@6B@
CONST	SEGMENT
??_7ICvRandom1@@6B@ DD FLAT:__purecall			; ICvRandom1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllRandom@@QAE@PAVCvRandom@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pRandom$ = 8						; size = 4
??0CvDllRandom@@QAE@PAVCvRandom@@@Z PROC		; CvDllRandom::CvDllRandom, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvRandom1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllRandom@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pRandom$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 23   : 	FAssertMsg(pRandom != NULL, "SHOULD NOT HAPPEN");
; 24   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvDllRandom@@QAE@PAVCvRandom@@@Z ENDP		; CvDllRandom::CvDllRandom
_TEXT	ENDS
PUBLIC	??1CvDllRandom@@QAE@XZ				; CvDllRandom::~CvDllRandom
; Function compile flags: /Odtp
;	COMDAT ??1CvDllRandom@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllRandom@@QAE@XZ PROC				; CvDllRandom::~CvDllRandom, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllRandom@@6B@

; 28   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllRandom@@QAE@XZ ENDP				; CvDllRandom::~CvDllRandom
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllRandom@@QAEIXZ		; CvDllRandom::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllRandom@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T218172 = -72						; size = 16
$T218171 = -56						; size = 16
$T218170 = -40						; size = 16
$T218169 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllRandom@@UAGPAXU_GUID@@@Z PROC	; CvDllRandom::QueryInterface, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 32   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 33   : 	        guidInterface == ICvRandom1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T218170[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T218170[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T218170[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T218170[ebp+12], eax
	mov	ecx, DWORD PTR $T218170[ebp]
	mov	DWORD PTR $T218169[ebp], ecx
	mov	edx, DWORD PTR $T218170[ebp+4]
	mov	DWORD PTR $T218169[ebp+4], edx
	mov	eax, DWORD PTR $T218170[ebp+8]
	mov	DWORD PTR $T218169[ebp+8], eax
	mov	ecx, DWORD PTR $T218170[ebp+12]
	mov	DWORD PTR $T218169[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218169[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvRandom1
	mov	DWORD PTR $T218172[ebp], eax
	mov	ecx, DWORD PTR _guidICvRandom1+4
	mov	DWORD PTR $T218172[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvRandom1+8
	mov	DWORD PTR $T218172[ebp+8], edx
	mov	eax, DWORD PTR _guidICvRandom1+12
	mov	DWORD PTR $T218172[ebp+12], eax
	mov	ecx, DWORD PTR $T218172[ebp]
	mov	DWORD PTR $T218171[ebp], ecx
	mov	edx, DWORD PTR $T218172[ebp+4]
	mov	DWORD PTR $T218171[ebp+4], edx
	mov	eax, DWORD PTR $T218172[ebp+8]
	mov	DWORD PTR $T218171[ebp+8], eax
	mov	ecx, DWORD PTR $T218172[ebp+12]
	mov	DWORD PTR $T218171[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T218171[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 34   : 	{
; 35   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllRandom@@QAEIXZ	; CvDllRandom::IncrementReference

; 36   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 37   : 	}
; 38   : 
; 39   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 40   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllRandom@@UAGPAXU_GUID@@@Z ENDP	; CvDllRandom::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllRandom@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllRandom@@QAEIXZ PROC		; CvDllRandom::IncrementReference, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 45   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 46   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllRandom@@QAEIXZ ENDP		; CvDllRandom::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllRandom@@SAXPAX@Z			; CvDllRandom::operator delete
PUBLIC	?DecrementReference@CvDllRandom@@QAEIXZ		; CvDllRandom::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllRandom@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T218204 = -8						; size = 4
$T218203 = -4						; size = 4
?DecrementReference@CvDllRandom@@QAEIXZ PROC		; CvDllRandom::DecrementReference, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 51   : 	{
; 52   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T218204[ebp], ecx
	mov	edx, DWORD PTR $T218204[ebp]
	mov	DWORD PTR $T218203[ebp], edx
	cmp	DWORD PTR $T218203[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T218203[ebp]
	call	??1CvDllRandom@@QAE@XZ			; CvDllRandom::~CvDllRandom
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T218203[ebp]
	push	ecx
	call	??3CvDllRandom@@SAXPAX@Z		; CvDllRandom::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T218203[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 53   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 54   : 	}
; 55   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 56   : 	{
; 57   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 58   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 59   : 	}
; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllRandom@@QAEIXZ ENDP		; CvDllRandom::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllRandom@@QAEIXZ		; CvDllRandom::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllRandom@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllRandom@@QAEIXZ PROC		; CvDllRandom::GetReferenceCount, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllRandom@@QAEIXZ ENDP		; CvDllRandom::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllRandom@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllRandom@@EAGXXZ PROC			; CvDllRandom::Destroy, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp

; 69   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllRandom@@QAEIXZ	; CvDllRandom::DecrementReference

; 70   : }

	pop	ebp
	ret	4
?Destroy@CvDllRandom@@EAGXXZ ENDP			; CvDllRandom::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllRandom@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllRandom@@SAXPAX@Z PROC				; CvDllRandom::operator delete, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 75   : }

	pop	ebp
	ret	0
??3CvDllRandom@@SAXPAX@Z ENDP				; CvDllRandom::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllRandom@@SAPAXI@Z			; CvDllRandom::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllRandom@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllRandom@@SAPAXI@Z PROC				; CvDllRandom::operator new, COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 80   : }

	pop	ebp
	ret	0
??2CvDllRandom@@SAPAXI@Z ENDP				; CvDllRandom::operator new
_TEXT	ENDS
PUBLIC	?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ	; CvDllRandom::GetInstance
; Function compile flags: /Odtp
;	COMDAT ?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ PROC	; CvDllRandom::GetInstance, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	return m_pRandom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstance@CvDllRandom@@QAEPAVCvRandom@@XZ ENDP	; CvDllRandom::GetInstance
_TEXT	ENDS
EXTRN	?init@CvRandom@@QAEXK@Z:PROC			; CvRandom::init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvDllRandom@@UAGXK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ulSeed$ = 12						; size = 4
?Init@CvDllRandom@@UAGXK@Z PROC				; CvDllRandom::Init, COMDAT

; 88   : {

	push	ebp
	mov	ebp, esp

; 89   : 	m_pRandom->init(ulSeed);

	mov	eax, DWORD PTR _ulSeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?init@CvRandom@@QAEXK@Z			; CvRandom::init

; 90   : }

	pop	ebp
	ret	8
?Init@CvDllRandom@@UAGXK@Z ENDP				; CvDllRandom::Init
_TEXT	ENDS
EXTRN	?reset@CvRandom@@QAEXK@Z:PROC			; CvRandom::reset
; Function compile flags: /Odtp
;	COMDAT ?Reset@CvDllRandom@@UAGXK@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ulSeed$ = 12						; size = 4
?Reset@CvDllRandom@@UAGXK@Z PROC			; CvDllRandom::Reset, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp

; 94   : 	m_pRandom->reset(ulSeed);

	mov	eax, DWORD PTR _ulSeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?reset@CvRandom@@QAEXK@Z		; CvRandom::reset

; 95   : }

	pop	ebp
	ret	8
?Reset@CvDllRandom@@UAGXK@Z ENDP			; CvDllRandom::Reset
_TEXT	ENDS
EXTRN	?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z:PROC ; CvGlobals::UnwrapRandomPointer
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Odtp
;	COMDAT ?CopyFrom@CvDllRandom@@UAGXPAVICvRandom1@@@Z
_TEXT	SEGMENT
$T218230 = -8						; size = 4
_pkOther$ = -4						; size = 4
_this$ = 8						; size = 4
_pOther$ = 12						; size = 4
?CopyFrom@CvDllRandom@@UAGXPAVICvRandom1@@@Z PROC	; CvDllRandom::CopyFrom, COMDAT

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 99   : 	CvRandom* pkOther = GC.UnwrapRandomPointer(pOther);

	mov	eax, DWORD PTR _pOther$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?UnwrapRandomPointer@CvGlobals@@QAEPAVCvRandom@@PAVICvRandom1@@@Z ; CvGlobals::UnwrapRandomPointer
	mov	DWORD PTR _pkOther$[ebp], eax

; 100  : 	if(pkOther != NULL)

	cmp	DWORD PTR _pkOther$[ebp], 0
	je	SHORT $LN2@CopyFrom

; 101  : 		*m_pRandom = *pkOther;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T218230[ebp], edx
	mov	eax, DWORD PTR $T218230[ebp]
	mov	ecx, DWORD PTR _pkOther$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T218230[ebp]
	mov	ecx, DWORD PTR _pkOther$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T218230[ebp]
	mov	ecx, DWORD PTR _pkOther$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T218230[ebp]
	mov	ecx, DWORD PTR _pkOther$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR [eax+16], dl
$LN2@CopyFrom:

; 102  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@CvDllRandom@@UAGXPAVICvRandom1@@@Z ENDP	; CvDllRandom::CopyFrom
_TEXT	ENDS
EXTRN	?get@CvRandom@@QAEGGPBD@Z:PROC			; CvRandom::get
; Function compile flags: /Odtp
;	COMDAT ?Get@CvDllRandom@@UAGGGPBD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_usNum$ = 12						; size = 2
_pszLog$ = 16						; size = 4
?Get@CvDllRandom@@UAGGGPBD@Z PROC			; CvDllRandom::Get, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp

; 106  : #if defined(AUI_USE_SFMT_RNG) || defined(AUI_WARNING_FIXES)
; 107  : 	return (unsigned short)m_pRandom->get(usNum, pszLog);
; 108  : #else
; 109  : 	return m_pRandom->get(usNum, pszLog);

	mov	eax, DWORD PTR _pszLog$[ebp]
	push	eax
	movzx	ecx, WORD PTR _usNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?get@CvRandom@@QAEGGPBD@Z		; CvRandom::get

; 110  : #endif
; 111  : }

	pop	ebp
	ret	12					; 0000000cH
?Get@CvDllRandom@@UAGGGPBD@Z ENDP			; CvDllRandom::Get
_TEXT	ENDS
EXTRN	?getFloat@CvRandom@@QAEMXZ:PROC			; CvRandom::getFloat
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
;	COMDAT ?GetFloat@CvDllRandom@@UAGMXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetFloat@CvDllRandom@@UAGMXZ PROC			; CvDllRandom::GetFloat, COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp

; 115  : 	return m_pRandom->getFloat();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getFloat@CvRandom@@QAEMXZ		; CvRandom::getFloat

; 116  : }

	pop	ebp
	ret	4
?GetFloat@CvDllRandom@@UAGMXZ ENDP			; CvDllRandom::GetFloat
_TEXT	ENDS
EXTRN	?getSeed@CvRandom@@QBEKXZ:PROC			; CvRandom::getSeed
; Function compile flags: /Odtp
;	COMDAT ?GetSeed@CvDllRandom@@UBGKXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetSeed@CvDllRandom@@UBGKXZ PROC			; CvDllRandom::GetSeed, COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp

; 120  : 	return m_pRandom->getSeed();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getSeed@CvRandom@@QBEKXZ		; CvRandom::getSeed

; 121  : }

	pop	ebp
	ret	4
?GetSeed@CvDllRandom@@UBGKXZ ENDP			; CvDllRandom::GetSeed
_TEXT	ENDS
EXTRN	??5@YAAAVFDataStream@@AAV0@AAVCvRandom@@@Z:PROC	; operator>>
; Function compile flags: /Odtp
;	COMDAT ?Read@CvDllRandom@@UAGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Read@CvDllRandom@@UAGXAAVFDataStream@@@Z PROC		; CvDllRandom::Read, COMDAT

; 124  : {

	push	ebp
	mov	ebp, esp

; 125  : 	kStream >> *m_pRandom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAVCvRandom@@@Z ; operator>>
	add	esp, 8

; 126  : }

	pop	ebp
	ret	8
?Read@CvDllRandom@@UAGXAAVFDataStream@@@Z ENDP		; CvDllRandom::Read
_TEXT	ENDS
EXTRN	??6@YAAAVFDataStream@@AAV0@ABVCvRandom@@@Z:PROC	; operator<<
; Function compile flags: /Odtp
;	COMDAT ?Write@CvDllRandom@@UBGXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Write@CvDllRandom@@UBGXAAVFDataStream@@@Z PROC		; CvDllRandom::Write, COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp

; 130  : 	kStream << *m_pRandom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _kStream$[ebp]
	push	edx
	call	??6@YAAAVFDataStream@@AAV0@ABVCvRandom@@@Z ; operator<<
	add	esp, 8

; 131  : }

	pop	ebp
	ret	8
?Write@CvDllRandom@@UBGXAAVFDataStream@@@Z ENDP		; CvDllRandom::Write
_TEXT	ENDS
END
