; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvPlayerManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?RefreshDangerPlots@CvPlayerManager@@SAXXZ	; CvPlayerManager::RefreshDangerPlots
EXTRN	?UpdateDangerPlots@CvPlayer@@QAEXXZ:PROC	; CvPlayer::UpdateDangerPlots
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayermanager.cpp
;	COMDAT ?RefreshDangerPlots@CvPlayerManager@@SAXXZ
_TEXT	SEGMENT
$T216931 = -14						; size = 1
$T216927 = -13						; size = 1
_ePlayer$216900 = -12					; size = 4
_kPlayer$216902 = -8					; size = 4
_iPlayerCivLoop$216896 = -4				; size = 4
?RefreshDangerPlots@CvPlayerManager@@SAXXZ PROC		; CvPlayerManager::RefreshDangerPlots, COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 19   : 	for(int iPlayerCivLoop = 0; iPlayerCivLoop < MAX_CIV_PLAYERS; iPlayerCivLoop++)

	mov	DWORD PTR _iPlayerCivLoop$216896[ebp], 0
	jmp	SHORT $LN5@RefreshDan
$LN4@RefreshDan:
	mov	eax, DWORD PTR _iPlayerCivLoop$216896[ebp]
	add	eax, 1
	mov	DWORD PTR _iPlayerCivLoop$216896[ebp], eax
$LN5@RefreshDan:
	cmp	DWORD PTR _iPlayerCivLoop$216896[ebp], 63 ; 0000003fH
	jge	SHORT $LN6@RefreshDan

; 20   : 	{
; 21   : 		PlayerTypes ePlayer = (PlayerTypes) iPlayerCivLoop;

	mov	ecx, DWORD PTR _iPlayerCivLoop$216896[ebp]
	mov	DWORD PTR _ePlayer$216900[ebp], ecx

; 22   : 
; 23   : 		CvPlayer& kPlayer = GET_PLAYER(ePlayer);

	mov	edx, DWORD PTR _ePlayer$216900[ebp]
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _kPlayer$216902[ebp], edx

; 24   : 		// Must be alive
; 25   : 		if(!kPlayer.isAlive())

	mov	eax, DWORD PTR _kPlayer$216902[ebp]
	mov	cl, BYTE PTR [eax+2256]
	mov	BYTE PTR $T216927[ebp], cl
	movzx	edx, BYTE PTR $T216927[ebp]
	test	edx, edx
	jne	SHORT $LN2@RefreshDan

; 26   : 			continue;

	jmp	SHORT $LN4@RefreshDan
$LN2@RefreshDan:

; 27   : 
; 28   : 		if(kPlayer.m_pDangerPlots && kPlayer.m_pDangerPlots->IsDirty())

	mov	eax, DWORD PTR _kPlayer$216902[ebp]
	cmp	DWORD PTR [eax+4608], 0
	je	SHORT $LN1@RefreshDan
	mov	ecx, DWORD PTR _kPlayer$216902[ebp]
	mov	edx, DWORD PTR [ecx+4608]
	mov	al, BYTE PTR [edx+5]
	mov	BYTE PTR $T216931[ebp], al
	movzx	ecx, BYTE PTR $T216931[ebp]
	test	ecx, ecx
	je	SHORT $LN1@RefreshDan

; 29   : 			kPlayer.UpdateDangerPlots();

	mov	ecx, DWORD PTR _kPlayer$216902[ebp]
	call	?UpdateDangerPlots@CvPlayer@@QAEXXZ	; CvPlayer::UpdateDangerPlots
$LN1@RefreshDan:

; 30   : 	}

	jmp	SHORT $LN4@RefreshDan
$LN6@RefreshDan:

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RefreshDangerPlots@CvPlayerManager@@SAXXZ ENDP		; CvPlayerManager::RefreshDangerPlots
_TEXT	ENDS
END
